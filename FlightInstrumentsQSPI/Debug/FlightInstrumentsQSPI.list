
FlightInstrumentsQSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002bf30  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004760  0802c100  0802c100  0003c100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030860  08030860  000fbc18  2**0
                  CONTENTS
  4 .ARM          00000008  08030860  08030860  00040860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030868  08030868  000fbc18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08030868  08030868  00040868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08030874  08030874  00040874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0803087c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000db94  200000d8  08030954  000500d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000dc6c  08030954  0005dc6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000fbc18  2**0
                  CONTENTS, READONLY
 12 ExtFlashSection 0009bbd0  90000000  90000000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 FontFlashSection 0000003c  9009bbd0  9009bbd0  000fbbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 0000000c  9009bc0c  9009bc0c  000fbc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   000ee20a  00000000  00000000  000fbc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 000208f5  00000000  00000000  001e9e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000081d0  00000000  00000000  0020a748  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000079a8  00000000  00000000  00212918  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  000468de  00000000  00000000  0021a2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00071535  00000000  00000000  00260b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    00143386  00000000  00000000  002d20d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  00415459  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00023cfc  00000000  00000000  00415554  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d8 	.word	0x200000d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802c0e8 	.word	0x0802c0e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000dc 	.word	0x200000dc
 800020c:	0802c0e8 	.word	0x0802c0e8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <vApplicationGetIdleTaskMemory+0x2c>)
 80005c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <vApplicationGetIdleTaskMemory+0x30>)
 80005c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200000f4 	.word	0x200000f4
 80005e0:	2000014c 	.word	0x2000014c

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b5b0      	push	{r4, r5, r7, lr}
 80005e6:	b08c      	sub	sp, #48	; 0x30
 80005e8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f003 facf 	bl	8003b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f85d 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 ff59 	bl	80014a8 <_ZL12MX_GPIO_Initv>
  MX_ADC3_Init();
 80005f6:	f000 f92b 	bl	8000850 <_ZL12MX_ADC3_Initv>
  MX_CRC_Init();
 80005fa:	f000 f985 	bl	8000908 <_ZL11MX_CRC_Initv>
  MX_DCMI_Init();
 80005fe:	f000 f9ab 	bl	8000958 <_ZL12MX_DCMI_Initv>
  MX_I2C1_Init();
 8000602:	f000 f9e3 	bl	80009cc <_ZL12MX_I2C1_Initv>
  MX_I2C3_Init();
 8000606:	f000 fa2f 	bl	8000a68 <_ZL12MX_I2C3_Initv>
  MX_QUADSPI_Init();
 800060a:	f000 fa7b 	bl	8000b04 <_ZL15MX_QUADSPI_Initv>
  MX_RTC_Init();
 800060e:	f000 fab1 	bl	8000b74 <_ZL11MX_RTC_Initv>
  MX_SAI2_Init();
 8000612:	f000 fb6d 	bl	8000cf0 <_ZL12MX_SAI2_Initv>
  MX_SDMMC1_SD_Init();
 8000616:	f000 fc1d 	bl	8000e54 <_ZL17MX_SDMMC1_SD_Initv>
  MX_SPDIFRX_Init();
 800061a:	f000 fc3b 	bl	8000e94 <_ZL15MX_SPDIFRX_Initv>
  MX_SPI2_Init();
 800061e:	f000 fc6f 	bl	8000f00 <_ZL12MX_SPI2_Initv>
  MX_TIM2_Init();
 8000622:	f000 fcaf 	bl	8000f84 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000626:	f000 fd3b 	bl	80010a0 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 800062a:	f000 fdc9 	bl	80011c0 <_ZL12MX_TIM5_Initv>
  MX_TIM8_Init();
 800062e:	f000 fe57 	bl	80012e0 <_ZL12MX_TIM8_Initv>
  MX_TIM12_Init();
 8000632:	f000 feb7 	bl	80013a4 <_ZL13MX_TIM12_Initv>
  MX_USART1_UART_Init();
 8000636:	f000 ff03 	bl	8001440 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

/* Initialise the graphical hardware */
  GRAPHICS_HW_Init();
 800063a:	f01f f89d 	bl	801f778 <_Z16GRAPHICS_HW_Initv>

  /* Initialise the graphical stack engine */
  GRAPHICS_Init();
 800063e:	f01f f913 	bl	801f868 <_Z13GRAPHICS_Initv>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of msgQueue */
  //osMessageQDef(msgQueue, 4, uint32_t);
  osMessageQDef(msgQueue, 1, sizeof(&xTedMessagePointer));
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <main+0xb0>)
 8000644:	f107 0420 	add.w	r4, r7, #32
 8000648:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800064a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msgQueueHandle = osMessageCreate(osMessageQ(msgQueue), NULL);
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f018 f837 	bl	80186c8 <osMessageCreate>
 800065a:	4602      	mov	r2, r0
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <main+0xb4>)
 800065e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <main+0xb8>)
 8000662:	1d3c      	adds	r4, r7, #4
 8000664:	461d      	mov	r5, r3
 8000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f017 ffc6 	bl	8018608 <osThreadCreate>
 800067c:	4602      	mov	r2, r0
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <main+0xbc>)
 8000680:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */
  HAL_UART_Receive_IT(&huart1, uartMsgData, UART_BUF_SIZE);
 8000682:	2211      	movs	r2, #17
 8000684:	4907      	ldr	r1, [pc, #28]	; (80006a4 <main+0xc0>)
 8000686:	4808      	ldr	r0, [pc, #32]	; (80006a8 <main+0xc4>)
 8000688:	f00c fd82 	bl	800d190 <HAL_UART_Receive_IT>
  /* Start scheduler */
  osKernelStart();
 800068c:	f017 ff99 	bl	80185c2 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000690:	e7fe      	b.n	8000690 <main+0xac>
 8000692:	bf00      	nop
 8000694:	0802c100 	.word	0x0802c100
 8000698:	20000910 	.word	0x20000910
 800069c:	0802c11c 	.word	0x0802c11c
 80006a0:	2000090c 	.word	0x2000090c
 80006a4:	20000914 	.word	0x20000914
 80006a8:	2000088c 	.word	0x2000088c

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b0b4      	sub	sp, #208	; 0xd0
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006b6:	2230      	movs	r2, #48	; 0x30
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f02a fd97 	bl	802b1ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2284      	movs	r2, #132	; 0x84
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f02a fd88 	bl	802b1ee <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80006de:	f007 fdcf 	bl	8008280 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b58      	ldr	r3, [pc, #352]	; (8000844 <SystemClock_Config+0x198>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	4a57      	ldr	r2, [pc, #348]	; (8000844 <SystemClock_Config+0x198>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	6413      	str	r3, [r2, #64]	; 0x40
 80006ee:	4b55      	ldr	r3, [pc, #340]	; (8000844 <SystemClock_Config+0x198>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fa:	4b53      	ldr	r3, [pc, #332]	; (8000848 <SystemClock_Config+0x19c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a52      	ldr	r2, [pc, #328]	; (8000848 <SystemClock_Config+0x19c>)
 8000700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000704:	6013      	str	r3, [r2, #0]
 8000706:	4b50      	ldr	r3, [pc, #320]	; (8000848 <SystemClock_Config+0x19c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000712:	2309      	movs	r3, #9
 8000714:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000730:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000734:	2319      	movs	r3, #25
 8000736:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800073a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800073e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000742:	2302      	movs	r3, #2
 8000744:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000748:	2309      	movs	r3, #9
 800074a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000752:	4618      	mov	r0, r3
 8000754:	f008 fb50 	bl	8008df8 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	bf14      	ite	ne
 800075e:	2301      	movne	r3, #1
 8000760:	2300      	moveq	r3, #0
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000768:	f001 f90a 	bl	8001980 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800076c:	f007 fd98 	bl	80082a0 <HAL_PWREx_EnableOverDrive>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	bf14      	ite	ne
 8000776:	2301      	movne	r3, #1
 8000778:	2300      	moveq	r3, #0
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000780:	f001 f8fe 	bl	8001980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000796:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800079a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80007a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007aa:	2106      	movs	r1, #6
 80007ac:	4618      	mov	r0, r3
 80007ae:	f008 fd93 	bl	80092d8 <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	bf14      	ite	ne
 80007b8:	2301      	movne	r3, #1
 80007ba:	2300      	moveq	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 80007c2:	f001 f8dd 	bl	8001980 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <SystemClock_Config+0x1a0>)
 80007c8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80007ca:	2364      	movs	r3, #100	; 0x64
 80007cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80007da:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007de:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80007e0:	2305      	movs	r3, #5
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80007e8:	2303      	movs	r3, #3
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80007f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007f8:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007fe:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000800:	2300      	movs	r3, #0
 8000802:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000804:	2300      	movs	r3, #0
 8000806:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000808:	2300      	movs	r3, #0
 800080a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800080c:	2300      	movs	r3, #0
 800080e:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000810:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000818:	2300      	movs	r3, #0
 800081a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	4618      	mov	r0, r3
 8000824:	f008 ff58 	bl	80096d8 <HAL_RCCEx_PeriphCLKConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	bf14      	ite	ne
 800082e:	2301      	movne	r3, #1
 8000830:	2300      	moveq	r3, #0
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x190>
  {
    Error_Handler();
 8000838:	f001 f8a2 	bl	8001980 <Error_Handler>
  }
}
 800083c:	bf00      	nop
 800083e:	37d0      	adds	r7, #208	; 0xd0
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000
 800084c:	01b14068 	.word	0x01b14068

08000850 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <_ZL12MX_ADC3_Initv+0xac>)
 8000864:	4a26      	ldr	r2, [pc, #152]	; (8000900 <_ZL12MX_ADC3_Initv+0xb0>)
 8000866:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000868:	4b24      	ldr	r3, [pc, #144]	; (80008fc <_ZL12MX_ADC3_Initv+0xac>)
 800086a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800086e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <_ZL12MX_ADC3_Initv+0xac>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000876:	4b21      	ldr	r3, [pc, #132]	; (80008fc <_ZL12MX_ADC3_Initv+0xac>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <_ZL12MX_ADC3_Initv+0xac>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <_ZL12MX_ADC3_Initv+0xac>)
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <_ZL12MX_ADC3_Initv+0xac>)
 800088c:	2200      	movs	r2, #0
 800088e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <_ZL12MX_ADC3_Initv+0xac>)
 8000892:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <_ZL12MX_ADC3_Initv+0xb4>)
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <_ZL12MX_ADC3_Initv+0xac>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <_ZL12MX_ADC3_Initv+0xac>)
 800089e:	2201      	movs	r2, #1
 80008a0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <_ZL12MX_ADC3_Initv+0xac>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <_ZL12MX_ADC3_Initv+0xac>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008b0:	4812      	ldr	r0, [pc, #72]	; (80008fc <_ZL12MX_ADC3_Initv+0xac>)
 80008b2:	f003 f9bb 	bl	8003c2c <HAL_ADC_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	bf14      	ite	ne
 80008bc:	2301      	movne	r3, #1
 80008be:	2300      	moveq	r3, #0
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <_ZL12MX_ADC3_Initv+0x7a>
  {
    Error_Handler();
 80008c6:	f001 f85b 	bl	8001980 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008ca:	2304      	movs	r3, #4
 80008cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008d6:	463b      	mov	r3, r7
 80008d8:	4619      	mov	r1, r3
 80008da:	4808      	ldr	r0, [pc, #32]	; (80008fc <_ZL12MX_ADC3_Initv+0xac>)
 80008dc:	f003 f9ea 	bl	8003cb4 <HAL_ADC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	bf14      	ite	ne
 80008e6:	2301      	movne	r3, #1
 80008e8:	2300      	moveq	r3, #0
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 80008f0:	f001 f846 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000350 	.word	0x20000350
 8000900:	40012200 	.word	0x40012200
 8000904:	0f000001 	.word	0x0f000001

08000908 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <_ZL11MX_CRC_Initv+0x48>)
 800090e:	4a11      	ldr	r2, [pc, #68]	; (8000954 <_ZL11MX_CRC_Initv+0x4c>)
 8000910:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <_ZL11MX_CRC_Initv+0x48>)
 8000914:	2200      	movs	r2, #0
 8000916:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <_ZL11MX_CRC_Initv+0x48>)
 800091a:	2200      	movs	r2, #0
 800091c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <_ZL11MX_CRC_Initv+0x48>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <_ZL11MX_CRC_Initv+0x48>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <_ZL11MX_CRC_Initv+0x48>)
 800092c:	2201      	movs	r2, #1
 800092e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000930:	4807      	ldr	r0, [pc, #28]	; (8000950 <_ZL11MX_CRC_Initv+0x48>)
 8000932:	f003 fcff 	bl	8004334 <HAL_CRC_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	bf14      	ite	ne
 800093c:	2301      	movne	r3, #1
 800093e:	2300      	moveq	r3, #0
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8000946:	f001 f81b 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000398 	.word	0x20000398
 8000954:	40023000 	.word	0x40023000

08000958 <_ZL12MX_DCMI_Initv>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800095c:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <_ZL12MX_DCMI_Initv+0x6c>)
 800095e:	4a1a      	ldr	r2, [pc, #104]	; (80009c8 <_ZL12MX_DCMI_Initv+0x70>)
 8000960:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <_ZL12MX_DCMI_Initv+0x6c>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <_ZL12MX_DCMI_Initv+0x6c>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <_ZL12MX_DCMI_Initv+0x6c>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <_ZL12MX_DCMI_Initv+0x6c>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <_ZL12MX_DCMI_Initv+0x6c>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <_ZL12MX_DCMI_Initv+0x6c>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <_ZL12MX_DCMI_Initv+0x6c>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <_ZL12MX_DCMI_Initv+0x6c>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <_ZL12MX_DCMI_Initv+0x6c>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <_ZL12MX_DCMI_Initv+0x6c>)
 800099a:	2200      	movs	r2, #0
 800099c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <_ZL12MX_DCMI_Initv+0x6c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009a4:	4807      	ldr	r0, [pc, #28]	; (80009c4 <_ZL12MX_DCMI_Initv+0x6c>)
 80009a6:	f003 fdaf 	bl	8004508 <HAL_DCMI_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	bf14      	ite	ne
 80009b0:	2301      	movne	r3, #1
 80009b2:	2300      	moveq	r3, #0
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <_ZL12MX_DCMI_Initv+0x66>
  {
    Error_Handler();
 80009ba:	f000 ffe1 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200003bc 	.word	0x200003bc
 80009c8:	50050000 	.word	0x50050000

080009cc <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <_ZL12MX_I2C1_Initv+0x90>)
 80009d2:	4a23      	ldr	r2, [pc, #140]	; (8000a60 <_ZL12MX_I2C1_Initv+0x94>)
 80009d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <_ZL12MX_I2C1_Initv+0x90>)
 80009d8:	4a22      	ldr	r2, [pc, #136]	; (8000a64 <_ZL12MX_I2C1_Initv+0x98>)
 80009da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <_ZL12MX_I2C1_Initv+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <_ZL12MX_I2C1_Initv+0x90>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <_ZL12MX_I2C1_Initv+0x90>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ee:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <_ZL12MX_I2C1_Initv+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <_ZL12MX_I2C1_Initv+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <_ZL12MX_I2C1_Initv+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <_ZL12MX_I2C1_Initv+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a06:	4815      	ldr	r0, [pc, #84]	; (8000a5c <_ZL12MX_I2C1_Initv+0x90>)
 8000a08:	f006 fa54 	bl	8006eb4 <HAL_I2C_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	bf14      	ite	ne
 8000a12:	2301      	movne	r3, #1
 8000a14:	2300      	moveq	r3, #0
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000a1c:	f000 ffb0 	bl	8001980 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a20:	2100      	movs	r1, #0
 8000a22:	480e      	ldr	r0, [pc, #56]	; (8000a5c <_ZL12MX_I2C1_Initv+0x90>)
 8000a24:	f006 ff5e 	bl	80078e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	bf14      	ite	ne
 8000a2e:	2301      	movne	r3, #1
 8000a30:	2300      	moveq	r3, #0
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000a38:	f000 ffa2 	bl	8001980 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4807      	ldr	r0, [pc, #28]	; (8000a5c <_ZL12MX_I2C1_Initv+0x90>)
 8000a40:	f006 ff9b 	bl	800797a <HAL_I2CEx_ConfigDigitalFilter>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	bf14      	ite	ne
 8000a4a:	2301      	movne	r3, #1
 8000a4c:	2300      	moveq	r3, #0
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000a54:	f000 ff94 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	2000040c 	.word	0x2000040c
 8000a60:	40005400 	.word	0x40005400
 8000a64:	00c0eaff 	.word	0x00c0eaff

08000a68 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <_ZL12MX_I2C3_Initv+0x90>)
 8000a6e:	4a23      	ldr	r2, [pc, #140]	; (8000afc <_ZL12MX_I2C3_Initv+0x94>)
 8000a70:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <_ZL12MX_I2C3_Initv+0x90>)
 8000a74:	4a22      	ldr	r2, [pc, #136]	; (8000b00 <_ZL12MX_I2C3_Initv+0x98>)
 8000a76:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <_ZL12MX_I2C3_Initv+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <_ZL12MX_I2C3_Initv+0x90>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <_ZL12MX_I2C3_Initv+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <_ZL12MX_I2C3_Initv+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <_ZL12MX_I2C3_Initv+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <_ZL12MX_I2C3_Initv+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <_ZL12MX_I2C3_Initv+0x90>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000aa2:	4815      	ldr	r0, [pc, #84]	; (8000af8 <_ZL12MX_I2C3_Initv+0x90>)
 8000aa4:	f006 fa06 	bl	8006eb4 <HAL_I2C_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	bf14      	ite	ne
 8000aae:	2301      	movne	r3, #1
 8000ab0:	2300      	moveq	r3, #0
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8000ab8:	f000 ff62 	bl	8001980 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000abc:	2100      	movs	r1, #0
 8000abe:	480e      	ldr	r0, [pc, #56]	; (8000af8 <_ZL12MX_I2C3_Initv+0x90>)
 8000ac0:	f006 ff10 	bl	80078e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	bf14      	ite	ne
 8000aca:	2301      	movne	r3, #1
 8000acc:	2300      	moveq	r3, #0
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8000ad4:	f000 ff54 	bl	8001980 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <_ZL12MX_I2C3_Initv+0x90>)
 8000adc:	f006 ff4d 	bl	800797a <HAL_I2CEx_ConfigDigitalFilter>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	bf14      	ite	ne
 8000ae6:	2301      	movne	r3, #1
 8000ae8:	2300      	moveq	r3, #0
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8000af0:	f000 ff46 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000458 	.word	0x20000458
 8000afc:	40005c00 	.word	0x40005c00
 8000b00:	00c0eaff 	.word	0x00c0eaff

08000b04 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN QUADSPI_Init 1 */

	  /* USER CODE END QUADSPI_Init 1 */
	  /* QUADSPI parameter configuration*/
	  hqspi.Instance = QUADSPI;
 8000b08:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <_ZL15MX_QUADSPI_Initv+0x68>)
 8000b0a:	4a19      	ldr	r2, [pc, #100]	; (8000b70 <_ZL15MX_QUADSPI_Initv+0x6c>)
 8000b0c:	601a      	str	r2, [r3, #0]
	  hqspi.Init.ClockPrescaler = 1;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <_ZL15MX_QUADSPI_Initv+0x68>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	605a      	str	r2, [r3, #4]
	  hqspi.Init.FifoThreshold = 4;
 8000b14:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <_ZL15MX_QUADSPI_Initv+0x68>)
 8000b16:	2204      	movs	r2, #4
 8000b18:	609a      	str	r2, [r3, #8]
	  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <_ZL15MX_QUADSPI_Initv+0x68>)
 8000b1c:	2210      	movs	r2, #16
 8000b1e:	60da      	str	r2, [r3, #12]
	  hqspi.Init.FlashSize = 24;
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <_ZL15MX_QUADSPI_Initv+0x68>)
 8000b22:	2218      	movs	r2, #24
 8000b24:	611a      	str	r2, [r3, #16]
	  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <_ZL15MX_QUADSPI_Initv+0x68>)
 8000b28:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000b2c:	615a      	str	r2, [r3, #20]
	  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <_ZL15MX_QUADSPI_Initv+0x68>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
	  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <_ZL15MX_QUADSPI_Initv+0x68>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
	  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <_ZL15MX_QUADSPI_Initv+0x68>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
	  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b40:	480a      	ldr	r0, [pc, #40]	; (8000b6c <_ZL15MX_QUADSPI_Initv+0x68>)
 8000b42:	f007 fbfd 	bl	8008340 <HAL_QSPI_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf14      	ite	ne
 8000b4c:	2301      	movne	r3, #1
 8000b4e:	2300      	moveq	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <_ZL15MX_QUADSPI_Initv+0x56>
	  {
	    Error_Handler();
 8000b56:	f000 ff13 	bl	8001980 <Error_Handler>
	  }
	  /* USER CODE BEGIN QUADSPI_Init 2 */
	  BSP_QSPI_Init();
 8000b5a:	f002 fb35 	bl	80031c8 <BSP_QSPI_Init>

	  BSP_QSPI_MemoryMappedMode();
 8000b5e:	f002 fb8b 	bl	8003278 <BSP_QSPI_EnableMemoryMappedMode>
	  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8000b62:	205c      	movs	r0, #92	; 0x5c
 8000b64:	f003 fbd8 	bl	8004318 <HAL_NVIC_DisableIRQ>

	  /* USER CODE END QUADSPI_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200004a4 	.word	0x200004a4
 8000b70:	a0001000 	.word	0xa0001000

08000b74 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b092      	sub	sp, #72	; 0x48
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]
 8000b8a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000b90:	463b      	mov	r3, r7
 8000b92:	222c      	movs	r2, #44	; 0x2c
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f02a fb29 	bl	802b1ee <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000b9c:	4b52      	ldr	r3, [pc, #328]	; (8000ce8 <_ZL11MX_RTC_Initv+0x174>)
 8000b9e:	4a53      	ldr	r2, [pc, #332]	; (8000cec <_ZL11MX_RTC_Initv+0x178>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ba2:	4b51      	ldr	r3, [pc, #324]	; (8000ce8 <_ZL11MX_RTC_Initv+0x174>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ba8:	4b4f      	ldr	r3, [pc, #316]	; (8000ce8 <_ZL11MX_RTC_Initv+0x174>)
 8000baa:	227f      	movs	r2, #127	; 0x7f
 8000bac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000bae:	4b4e      	ldr	r3, [pc, #312]	; (8000ce8 <_ZL11MX_RTC_Initv+0x174>)
 8000bb0:	22ff      	movs	r2, #255	; 0xff
 8000bb2:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bb4:	484c      	ldr	r0, [pc, #304]	; (8000ce8 <_ZL11MX_RTC_Initv+0x174>)
 8000bb6:	f009 fab1 	bl	800a11c <HAL_RTC_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	bf14      	ite	ne
 8000bc0:	2301      	movne	r3, #1
 8000bc2:	2300      	moveq	r3, #0
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <_ZL11MX_RTC_Initv+0x5a>
  {
    Error_Handler();
 8000bca:	f000 fed9 	bl	8001980 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000be8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bec:	2201      	movs	r2, #1
 8000bee:	4619      	mov	r1, r3
 8000bf0:	483d      	ldr	r0, [pc, #244]	; (8000ce8 <_ZL11MX_RTC_Initv+0x174>)
 8000bf2:	f009 fb0f 	bl	800a214 <HAL_RTC_SetTime>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	bf14      	ite	ne
 8000bfc:	2301      	movne	r3, #1
 8000bfe:	2300      	moveq	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 8000c06:	f000 febb 	bl	8001980 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000c10:	2301      	movs	r3, #1
 8000c12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000c16:	2301      	movs	r3, #1
 8000c18:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c26:	2201      	movs	r2, #1
 8000c28:	4619      	mov	r1, r3
 8000c2a:	482f      	ldr	r0, [pc, #188]	; (8000ce8 <_ZL11MX_RTC_Initv+0x174>)
 8000c2c:	f009 fbb0 	bl	800a390 <HAL_RTC_SetDate>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	bf14      	ite	ne
 8000c36:	2301      	movne	r3, #1
 8000c38:	2300      	moveq	r3, #0
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <_ZL11MX_RTC_Initv+0xd0>
  {
    Error_Handler();
 8000c40:	f000 fe9e 	bl	8001980 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	2201      	movs	r2, #1
 8000c78:	4619      	mov	r1, r3
 8000c7a:	481b      	ldr	r0, [pc, #108]	; (8000ce8 <_ZL11MX_RTC_Initv+0x174>)
 8000c7c:	f009 fc30 	bl	800a4e0 <HAL_RTC_SetAlarm>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	bf14      	ite	ne
 8000c86:	2301      	movne	r3, #1
 8000c88:	2300      	moveq	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <_ZL11MX_RTC_Initv+0x120>
  {
    Error_Handler();
 8000c90:	f000 fe76 	bl	8001980 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8000c9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4810      	ldr	r0, [pc, #64]	; (8000ce8 <_ZL11MX_RTC_Initv+0x174>)
 8000ca8:	f009 fc1a 	bl	800a4e0 <HAL_RTC_SetAlarm>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	bf14      	ite	ne
 8000cb2:	2301      	movne	r3, #1
 8000cb4:	2300      	moveq	r3, #0
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <_ZL11MX_RTC_Initv+0x14c>
  {
    Error_Handler();
 8000cbc:	f000 fe60 	bl	8001980 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4808      	ldr	r0, [pc, #32]	; (8000ce8 <_ZL11MX_RTC_Initv+0x174>)
 8000cc6:	f009 fd95 	bl	800a7f4 <HAL_RTCEx_SetTimeStamp>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	bf14      	ite	ne
 8000cd0:	2301      	movne	r3, #1
 8000cd2:	2300      	moveq	r3, #0
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <_ZL11MX_RTC_Initv+0x16a>
  {
    Error_Handler();
 8000cda:	f000 fe51 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	3748      	adds	r7, #72	; 0x48
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200004f0 	.word	0x200004f0
 8000cec:	40002800 	.word	0x40002800

08000cf0 <_ZL12MX_SAI2_Initv>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000cf4:	4b52      	ldr	r3, [pc, #328]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000cf6:	4a53      	ldr	r2, [pc, #332]	; (8000e44 <_ZL12MX_SAI2_Initv+0x154>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000cfa:	4b51      	ldr	r3, [pc, #324]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d00:	4b4f      	ldr	r3, [pc, #316]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000d06:	4b4e      	ldr	r3, [pc, #312]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d08:	2240      	movs	r2, #64	; 0x40
 8000d0a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d0c:	4b4c      	ldr	r3, [pc, #304]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d12:	4b4b      	ldr	r3, [pc, #300]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d18:	4b49      	ldr	r3, [pc, #292]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d1e:	4b48      	ldr	r3, [pc, #288]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d24:	4b46      	ldr	r3, [pc, #280]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d2a:	4b45      	ldr	r3, [pc, #276]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d30:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d32:	4a45      	ldr	r2, [pc, #276]	; (8000e48 <_ZL12MX_SAI2_Initv+0x158>)
 8000d34:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d36:	4b42      	ldr	r3, [pc, #264]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d3c:	4b40      	ldr	r3, [pc, #256]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d42:	4b3f      	ldr	r3, [pc, #252]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d48:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000d4e:	4b3c      	ldr	r3, [pc, #240]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d50:	2208      	movs	r2, #8
 8000d52:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000d54:	4b3a      	ldr	r3, [pc, #232]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d5a:	4b39      	ldr	r3, [pc, #228]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d60:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d66:	4b36      	ldr	r3, [pc, #216]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000d6c:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d72:	4b33      	ldr	r3, [pc, #204]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000d78:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000d7e:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000d84:	482e      	ldr	r0, [pc, #184]	; (8000e40 <_ZL12MX_SAI2_Initv+0x150>)
 8000d86:	f009 fd8b 	bl	800a8a0 <HAL_SAI_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	bf14      	ite	ne
 8000d90:	2301      	movne	r3, #1
 8000d92:	2300      	moveq	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <_ZL12MX_SAI2_Initv+0xae>
  {
    Error_Handler();
 8000d9a:	f000 fdf1 	bl	8001980 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000d9e:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000da0:	4a2b      	ldr	r2, [pc, #172]	; (8000e50 <_ZL12MX_SAI2_Initv+0x160>)
 8000da2:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000da4:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000daa:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000dac:	2203      	movs	r2, #3
 8000dae:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000db0:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000db2:	2240      	movs	r2, #64	; 0x40
 8000db4:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000db6:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000dc2:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000dc8:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000dee:	2208      	movs	r2, #8
 8000df0:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000df2:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000e22:	480a      	ldr	r0, [pc, #40]	; (8000e4c <_ZL12MX_SAI2_Initv+0x15c>)
 8000e24:	f009 fd3c 	bl	800a8a0 <HAL_SAI_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	bf14      	ite	ne
 8000e2e:	2301      	movne	r3, #1
 8000e30:	2300      	moveq	r3, #0
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <_ZL12MX_SAI2_Initv+0x14c>
  {
    Error_Handler();
 8000e38:	f000 fda2 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000510 	.word	0x20000510
 8000e44:	40015c04 	.word	0x40015c04
 8000e48:	0002ee00 	.word	0x0002ee00
 8000e4c:	20000594 	.word	0x20000594
 8000e50:	40015c24 	.word	0x40015c24

08000e54 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8000e5a:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <_ZL17MX_SDMMC1_SD_Initv+0x3c>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	20000618 	.word	0x20000618
 8000e90:	40012c00 	.word	0x40012c00

08000e94 <_ZL15MX_SPDIFRX_Initv>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <_ZL15MX_SPDIFRX_Initv+0x68>)
 8000e9a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000e9e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <_ZL15MX_SPDIFRX_Initv+0x68>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <_ZL15MX_SPDIFRX_Initv+0x68>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <_ZL15MX_SPDIFRX_Initv+0x68>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <_ZL15MX_SPDIFRX_Initv+0x68>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000eb8:	4b10      	ldr	r3, [pc, #64]	; (8000efc <_ZL15MX_SPDIFRX_Initv+0x68>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <_ZL15MX_SPDIFRX_Initv+0x68>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <_ZL15MX_SPDIFRX_Initv+0x68>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <_ZL15MX_SPDIFRX_Initv+0x68>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <_ZL15MX_SPDIFRX_Initv+0x68>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <_ZL15MX_SPDIFRX_Initv+0x68>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000edc:	4807      	ldr	r0, [pc, #28]	; (8000efc <_ZL15MX_SPDIFRX_Initv+0x68>)
 8000ede:	f00a ffc7 	bl	800be70 <HAL_SPDIFRX_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	bf14      	ite	ne
 8000ee8:	2301      	movne	r3, #1
 8000eea:	2300      	moveq	r3, #0
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <_ZL15MX_SPDIFRX_Initv+0x62>
  {
    Error_Handler();
 8000ef2:	f000 fd45 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000069c 	.word	0x2000069c

08000f00 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <_ZL12MX_SPI2_Initv+0x7c>)
 8000f06:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <_ZL12MX_SPI2_Initv+0x80>)
 8000f08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <_ZL12MX_SPI2_Initv+0x7c>)
 8000f0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <_ZL12MX_SPI2_Initv+0x7c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <_ZL12MX_SPI2_Initv+0x7c>)
 8000f1a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f1e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <_ZL12MX_SPI2_Initv+0x7c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <_ZL12MX_SPI2_Initv+0x7c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <_ZL12MX_SPI2_Initv+0x7c>)
 8000f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f32:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <_ZL12MX_SPI2_Initv+0x7c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <_ZL12MX_SPI2_Initv+0x7c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <_ZL12MX_SPI2_Initv+0x7c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <_ZL12MX_SPI2_Initv+0x7c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <_ZL12MX_SPI2_Initv+0x7c>)
 8000f4e:	2207      	movs	r2, #7
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <_ZL12MX_SPI2_Initv+0x7c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <_ZL12MX_SPI2_Initv+0x7c>)
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f5e:	4807      	ldr	r0, [pc, #28]	; (8000f7c <_ZL12MX_SPI2_Initv+0x7c>)
 8000f60:	f00a ffe2 	bl	800bf28 <HAL_SPI_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	bf14      	ite	ne
 8000f6a:	2301      	movne	r3, #1
 8000f6c:	2300      	moveq	r3, #0
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8000f74:	f000 fd04 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200006e8 	.word	0x200006e8
 8000f80:	40003800 	.word	0x40003800

08000f84 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08e      	sub	sp, #56	; 0x38
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]
 8000fb2:	615a      	str	r2, [r3, #20]
 8000fb4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fb6:	4b39      	ldr	r3, [pc, #228]	; (800109c <_ZL12MX_TIM2_Initv+0x118>)
 8000fb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fbe:	4b37      	ldr	r3, [pc, #220]	; (800109c <_ZL12MX_TIM2_Initv+0x118>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b35      	ldr	r3, [pc, #212]	; (800109c <_ZL12MX_TIM2_Initv+0x118>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000fca:	4b34      	ldr	r3, [pc, #208]	; (800109c <_ZL12MX_TIM2_Initv+0x118>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <_ZL12MX_TIM2_Initv+0x118>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd6:	4b31      	ldr	r3, [pc, #196]	; (800109c <_ZL12MX_TIM2_Initv+0x118>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fdc:	482f      	ldr	r0, [pc, #188]	; (800109c <_ZL12MX_TIM2_Initv+0x118>)
 8000fde:	f00b f835 	bl	800c04c <HAL_TIM_Base_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	bf14      	ite	ne
 8000fe8:	2301      	movne	r3, #1
 8000fea:	2300      	moveq	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8000ff2:	f000 fcc5 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ffc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001000:	4619      	mov	r1, r3
 8001002:	4826      	ldr	r0, [pc, #152]	; (800109c <_ZL12MX_TIM2_Initv+0x118>)
 8001004:	f00b fb04 	bl	800c610 <HAL_TIM_ConfigClockSource>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	bf14      	ite	ne
 800100e:	2301      	movne	r3, #1
 8001010:	2300      	moveq	r3, #0
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8001018:	f000 fcb2 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800101c:	481f      	ldr	r0, [pc, #124]	; (800109c <_ZL12MX_TIM2_Initv+0x118>)
 800101e:	f00b f895 	bl	800c14c <HAL_TIM_PWM_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf14      	ite	ne
 8001028:	2301      	movne	r3, #1
 800102a:	2300      	moveq	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8001032:	f000 fca5 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	4619      	mov	r1, r3
 8001044:	4815      	ldr	r0, [pc, #84]	; (800109c <_ZL12MX_TIM2_Initv+0x118>)
 8001046:	f00b ff5d 	bl	800cf04 <HAL_TIMEx_MasterConfigSynchronization>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	bf14      	ite	ne
 8001050:	2301      	movne	r3, #1
 8001052:	2300      	moveq	r3, #0
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 800105a:	f000 fc91 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800105e:	2360      	movs	r3, #96	; 0x60
 8001060:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	4619      	mov	r1, r3
 8001074:	4809      	ldr	r0, [pc, #36]	; (800109c <_ZL12MX_TIM2_Initv+0x118>)
 8001076:	f00b f9b3 	bl	800c3e0 <HAL_TIM_PWM_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	bf14      	ite	ne
 8001080:	2301      	movne	r3, #1
 8001082:	2300      	moveq	r3, #0
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 800108a:	f000 fc79 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <_ZL12MX_TIM2_Initv+0x118>)
 8001090:	f001 f8f2 	bl	8002278 <HAL_TIM_MspPostInit>

}
 8001094:	bf00      	nop
 8001096:	3738      	adds	r7, #56	; 0x38
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2000074c 	.word	0x2000074c

080010a0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08e      	sub	sp, #56	; 0x38
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c0:	463b      	mov	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]
 80010ce:	615a      	str	r2, [r3, #20]
 80010d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010d2:	4b39      	ldr	r3, [pc, #228]	; (80011b8 <_ZL12MX_TIM3_Initv+0x118>)
 80010d4:	4a39      	ldr	r2, [pc, #228]	; (80011bc <_ZL12MX_TIM3_Initv+0x11c>)
 80010d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010d8:	4b37      	ldr	r3, [pc, #220]	; (80011b8 <_ZL12MX_TIM3_Initv+0x118>)
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010de:	4b36      	ldr	r3, [pc, #216]	; (80011b8 <_ZL12MX_TIM3_Initv+0x118>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80010e4:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <_ZL12MX_TIM3_Initv+0x118>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ea:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <_ZL12MX_TIM3_Initv+0x118>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f0:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <_ZL12MX_TIM3_Initv+0x118>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010f6:	4830      	ldr	r0, [pc, #192]	; (80011b8 <_ZL12MX_TIM3_Initv+0x118>)
 80010f8:	f00a ffa8 	bl	800c04c <HAL_TIM_Base_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	bf14      	ite	ne
 8001102:	2301      	movne	r3, #1
 8001104:	2300      	moveq	r3, #0
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 800110c:	f000 fc38 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800111a:	4619      	mov	r1, r3
 800111c:	4826      	ldr	r0, [pc, #152]	; (80011b8 <_ZL12MX_TIM3_Initv+0x118>)
 800111e:	f00b fa77 	bl	800c610 <HAL_TIM_ConfigClockSource>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf14      	ite	ne
 8001128:	2301      	movne	r3, #1
 800112a:	2300      	moveq	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8001132:	f000 fc25 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001136:	4820      	ldr	r0, [pc, #128]	; (80011b8 <_ZL12MX_TIM3_Initv+0x118>)
 8001138:	f00b f808 	bl	800c14c <HAL_TIM_PWM_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	bf14      	ite	ne
 8001142:	2301      	movne	r3, #1
 8001144:	2300      	moveq	r3, #0
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 800114c:	f000 fc18 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	4816      	ldr	r0, [pc, #88]	; (80011b8 <_ZL12MX_TIM3_Initv+0x118>)
 8001160:	f00b fed0 	bl	800cf04 <HAL_TIMEx_MasterConfigSynchronization>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	bf14      	ite	ne
 800116a:	2301      	movne	r3, #1
 800116c:	2300      	moveq	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8001174:	f000 fc04 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001178:	2360      	movs	r3, #96	; 0x60
 800117a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	2200      	movs	r2, #0
 800118c:	4619      	mov	r1, r3
 800118e:	480a      	ldr	r0, [pc, #40]	; (80011b8 <_ZL12MX_TIM3_Initv+0x118>)
 8001190:	f00b f926 	bl	800c3e0 <HAL_TIM_PWM_ConfigChannel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	bf14      	ite	ne
 800119a:	2301      	movne	r3, #1
 800119c:	2300      	moveq	r3, #0
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 80011a4:	f000 fbec 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011a8:	4803      	ldr	r0, [pc, #12]	; (80011b8 <_ZL12MX_TIM3_Initv+0x118>)
 80011aa:	f001 f865 	bl	8002278 <HAL_TIM_MspPostInit>

}
 80011ae:	bf00      	nop
 80011b0:	3738      	adds	r7, #56	; 0x38
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000078c 	.word	0x2000078c
 80011bc:	40000400 	.word	0x40000400

080011c0 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	; 0x38
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
 80011ee:	615a      	str	r2, [r3, #20]
 80011f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011f2:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <_ZL12MX_TIM5_Initv+0x118>)
 80011f4:	4a39      	ldr	r2, [pc, #228]	; (80012dc <_ZL12MX_TIM5_Initv+0x11c>)
 80011f6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80011f8:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <_ZL12MX_TIM5_Initv+0x118>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <_ZL12MX_TIM5_Initv+0x118>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001204:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <_ZL12MX_TIM5_Initv+0x118>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120a:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <_ZL12MX_TIM5_Initv+0x118>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001210:	4b31      	ldr	r3, [pc, #196]	; (80012d8 <_ZL12MX_TIM5_Initv+0x118>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001216:	4830      	ldr	r0, [pc, #192]	; (80012d8 <_ZL12MX_TIM5_Initv+0x118>)
 8001218:	f00a ff18 	bl	800c04c <HAL_TIM_Base_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	bf14      	ite	ne
 8001222:	2301      	movne	r3, #1
 8001224:	2300      	moveq	r3, #0
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <_ZL12MX_TIM5_Initv+0x70>
  {
    Error_Handler();
 800122c:	f000 fba8 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800123a:	4619      	mov	r1, r3
 800123c:	4826      	ldr	r0, [pc, #152]	; (80012d8 <_ZL12MX_TIM5_Initv+0x118>)
 800123e:	f00b f9e7 	bl	800c610 <HAL_TIM_ConfigClockSource>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf14      	ite	ne
 8001248:	2301      	movne	r3, #1
 800124a:	2300      	moveq	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <_ZL12MX_TIM5_Initv+0x96>
  {
    Error_Handler();
 8001252:	f000 fb95 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001256:	4820      	ldr	r0, [pc, #128]	; (80012d8 <_ZL12MX_TIM5_Initv+0x118>)
 8001258:	f00a ff78 	bl	800c14c <HAL_TIM_PWM_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	bf14      	ite	ne
 8001262:	2301      	movne	r3, #1
 8001264:	2300      	moveq	r3, #0
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <_ZL12MX_TIM5_Initv+0xb0>
  {
    Error_Handler();
 800126c:	f000 fb88 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	4816      	ldr	r0, [pc, #88]	; (80012d8 <_ZL12MX_TIM5_Initv+0x118>)
 8001280:	f00b fe40 	bl	800cf04 <HAL_TIMEx_MasterConfigSynchronization>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	bf14      	ite	ne
 800128a:	2301      	movne	r3, #1
 800128c:	2300      	moveq	r3, #0
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <_ZL12MX_TIM5_Initv+0xd8>
  {
    Error_Handler();
 8001294:	f000 fb74 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001298:	2360      	movs	r3, #96	; 0x60
 800129a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012a8:	463b      	mov	r3, r7
 80012aa:	220c      	movs	r2, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	480a      	ldr	r0, [pc, #40]	; (80012d8 <_ZL12MX_TIM5_Initv+0x118>)
 80012b0:	f00b f896 	bl	800c3e0 <HAL_TIM_PWM_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bf14      	ite	ne
 80012ba:	2301      	movne	r3, #1
 80012bc:	2300      	moveq	r3, #0
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <_ZL12MX_TIM5_Initv+0x108>
  {
    Error_Handler();
 80012c4:	f000 fb5c 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80012c8:	4803      	ldr	r0, [pc, #12]	; (80012d8 <_ZL12MX_TIM5_Initv+0x118>)
 80012ca:	f000 ffd5 	bl	8002278 <HAL_TIM_MspPostInit>

}
 80012ce:	bf00      	nop
 80012d0:	3738      	adds	r7, #56	; 0x38
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200007cc 	.word	0x200007cc
 80012dc:	40000c00 	.word	0x40000c00

080012e0 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <_ZL12MX_TIM8_Initv+0xbc>)
 8001300:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <_ZL12MX_TIM8_Initv+0xc0>)
 8001302:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001304:	4b25      	ldr	r3, [pc, #148]	; (800139c <_ZL12MX_TIM8_Initv+0xbc>)
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130a:	4b24      	ldr	r3, [pc, #144]	; (800139c <_ZL12MX_TIM8_Initv+0xbc>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <_ZL12MX_TIM8_Initv+0xbc>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <_ZL12MX_TIM8_Initv+0xbc>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <_ZL12MX_TIM8_Initv+0xbc>)
 800131e:	2200      	movs	r2, #0
 8001320:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <_ZL12MX_TIM8_Initv+0xbc>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001328:	481c      	ldr	r0, [pc, #112]	; (800139c <_ZL12MX_TIM8_Initv+0xbc>)
 800132a:	f00a fe8f 	bl	800c04c <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	bf14      	ite	ne
 8001334:	2301      	movne	r3, #1
 8001336:	2300      	moveq	r3, #0
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <_ZL12MX_TIM8_Initv+0x62>
  {
    Error_Handler();
 800133e:	f000 fb1f 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001346:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4619      	mov	r1, r3
 800134e:	4813      	ldr	r0, [pc, #76]	; (800139c <_ZL12MX_TIM8_Initv+0xbc>)
 8001350:	f00b f95e 	bl	800c610 <HAL_TIM_ConfigClockSource>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	bf14      	ite	ne
 800135a:	2301      	movne	r3, #1
 800135c:	2300      	moveq	r3, #0
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 8001364:	f000 fb0c 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4619      	mov	r1, r3
 8001378:	4808      	ldr	r0, [pc, #32]	; (800139c <_ZL12MX_TIM8_Initv+0xbc>)
 800137a:	f00b fdc3 	bl	800cf04 <HAL_TIMEx_MasterConfigSynchronization>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf14      	ite	ne
 8001384:	2301      	movne	r3, #1
 8001386:	2300      	moveq	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <_ZL12MX_TIM8_Initv+0xb2>
  {
    Error_Handler();
 800138e:	f000 faf7 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3720      	adds	r7, #32
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000080c 	.word	0x2000080c
 80013a0:	40010400 	.word	0x40010400

080013a4 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
 80013b8:	615a      	str	r2, [r3, #20]
 80013ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <_ZL13MX_TIM12_Initv+0x94>)
 80013be:	4a1f      	ldr	r2, [pc, #124]	; (800143c <_ZL13MX_TIM12_Initv+0x98>)
 80013c0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <_ZL13MX_TIM12_Initv+0x94>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <_ZL13MX_TIM12_Initv+0x94>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <_ZL13MX_TIM12_Initv+0x94>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <_ZL13MX_TIM12_Initv+0x94>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <_ZL13MX_TIM12_Initv+0x94>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80013e0:	4815      	ldr	r0, [pc, #84]	; (8001438 <_ZL13MX_TIM12_Initv+0x94>)
 80013e2:	f00a feb3 	bl	800c14c <HAL_TIM_PWM_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bf14      	ite	ne
 80013ec:	2301      	movne	r3, #1
 80013ee:	2300      	moveq	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <_ZL13MX_TIM12_Initv+0x56>
  {
    Error_Handler();
 80013f6:	f000 fac3 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013fa:	2360      	movs	r3, #96	; 0x60
 80013fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	4619      	mov	r1, r3
 8001410:	4809      	ldr	r0, [pc, #36]	; (8001438 <_ZL13MX_TIM12_Initv+0x94>)
 8001412:	f00a ffe5 	bl	800c3e0 <HAL_TIM_PWM_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf14      	ite	ne
 800141c:	2301      	movne	r3, #1
 800141e:	2300      	moveq	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <_ZL13MX_TIM12_Initv+0x86>
  {
    Error_Handler();
 8001426:	f000 faab 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800142a:	4803      	ldr	r0, [pc, #12]	; (8001438 <_ZL13MX_TIM12_Initv+0x94>)
 800142c:	f000 ff24 	bl	8002278 <HAL_TIM_MspPostInit>

}
 8001430:	bf00      	nop
 8001432:	3720      	adds	r7, #32
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2000084c 	.word	0x2000084c
 800143c:	40001800 	.word	0x40001800

08001440 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001446:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 800144c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001482:	4807      	ldr	r0, [pc, #28]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001484:	f00b fe36 	bl	800d0f4 <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	bf14      	ite	ne
 800148e:	2301      	movne	r3, #1
 8001490:	2300      	moveq	r3, #0
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8001498:	f000 fa72 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000088c 	.word	0x2000088c
 80014a4:	40011000 	.word	0x40011000

080014a8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b090      	sub	sp, #64	; 0x40
 80014ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014be:	4baf      	ldr	r3, [pc, #700]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4aae      	ldr	r2, [pc, #696]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 80014c4:	f043 0310 	orr.w	r3, r3, #16
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4bac      	ldr	r3, [pc, #688]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80014d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014d6:	4ba9      	ldr	r3, [pc, #676]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4aa8      	ldr	r2, [pc, #672]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 80014dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4ba6      	ldr	r3, [pc, #664]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	4ba3      	ldr	r3, [pc, #652]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4aa2      	ldr	r2, [pc, #648]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4ba0      	ldr	r3, [pc, #640]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	623b      	str	r3, [r7, #32]
 8001504:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	4b9d      	ldr	r3, [pc, #628]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a9c      	ldr	r2, [pc, #624]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 800150c:	f043 0308 	orr.w	r3, r3, #8
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b9a      	ldr	r3, [pc, #616]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151e:	4b97      	ldr	r3, [pc, #604]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a96      	ldr	r2, [pc, #600]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b94      	ldr	r3, [pc, #592]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b91      	ldr	r3, [pc, #580]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a90      	ldr	r2, [pc, #576]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b8e      	ldr	r3, [pc, #568]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800154e:	4b8b      	ldr	r3, [pc, #556]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a8a      	ldr	r2, [pc, #552]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 8001554:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b88      	ldr	r3, [pc, #544]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001566:	4b85      	ldr	r3, [pc, #532]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a84      	ldr	r2, [pc, #528]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b82      	ldr	r3, [pc, #520]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800157e:	4b7f      	ldr	r3, [pc, #508]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a7e      	ldr	r2, [pc, #504]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 8001584:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b7c      	ldr	r3, [pc, #496]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001596:	4b79      	ldr	r3, [pc, #484]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a78      	ldr	r2, [pc, #480]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 800159c:	f043 0320 	orr.w	r3, r3, #32
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b76      	ldr	r3, [pc, #472]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0320 	and.w	r3, r3, #32
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ae:	4b73      	ldr	r3, [pc, #460]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a72      	ldr	r2, [pc, #456]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 80015b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b70      	ldr	r3, [pc, #448]	; (800177c <_ZL12MX_GPIO_Initv+0x2d4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	2120      	movs	r1, #32
 80015ca:	486d      	ldr	r0, [pc, #436]	; (8001780 <_ZL12MX_GPIO_Initv+0x2d8>)
 80015cc:	f003 fffe 	bl	80055cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	210c      	movs	r1, #12
 80015d4:	486b      	ldr	r0, [pc, #428]	; (8001784 <_ZL12MX_GPIO_Initv+0x2dc>)
 80015d6:	f003 fff9 	bl	80055cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80015da:	2201      	movs	r2, #1
 80015dc:	2108      	movs	r1, #8
 80015de:	486a      	ldr	r0, [pc, #424]	; (8001788 <_ZL12MX_GPIO_Initv+0x2e0>)
 80015e0:	f003 fff4 	bl	80055cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ea:	4866      	ldr	r0, [pc, #408]	; (8001784 <_ZL12MX_GPIO_Initv+0x2dc>)
 80015ec:	f003 ffee 	bl	80055cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015f6:	4865      	ldr	r0, [pc, #404]	; (800178c <_ZL12MX_GPIO_Initv+0x2e4>)
 80015f8:	f003 ffe8 	bl	80055cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	21c8      	movs	r1, #200	; 0xc8
 8001600:	4863      	ldr	r0, [pc, #396]	; (8001790 <_ZL12MX_GPIO_Initv+0x2e8>)
 8001602:	f003 ffe3 	bl	80055cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001606:	2308      	movs	r3, #8
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160a:	2300      	movs	r3, #0
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001616:	4619      	mov	r1, r3
 8001618:	485e      	ldr	r0, [pc, #376]	; (8001794 <_ZL12MX_GPIO_Initv+0x2ec>)
 800161a:	f003 fd0b 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800161e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001630:	230b      	movs	r3, #11
 8001632:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001638:	4619      	mov	r1, r3
 800163a:	4855      	ldr	r0, [pc, #340]	; (8001790 <_ZL12MX_GPIO_Initv+0x2e8>)
 800163c:	f003 fcfa 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8001640:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001652:	230a      	movs	r3, #10
 8001654:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800165a:	4619      	mov	r1, r3
 800165c:	484e      	ldr	r0, [pc, #312]	; (8001798 <_ZL12MX_GPIO_Initv+0x2f0>)
 800165e:	f003 fce9 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001668:	2300      	movs	r3, #0
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001674:	4619      	mov	r1, r3
 8001676:	4849      	ldr	r0, [pc, #292]	; (800179c <_ZL12MX_GPIO_Initv+0x2f4>)
 8001678:	f003 fcdc 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800167c:	2340      	movs	r3, #64	; 0x40
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001680:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <_ZL12MX_GPIO_Initv+0x2f8>)
 8001682:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001688:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800168c:	4619      	mov	r1, r3
 800168e:	483c      	ldr	r0, [pc, #240]	; (8001780 <_ZL12MX_GPIO_Initv+0x2d8>)
 8001690:	f003 fcd0 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001694:	2320      	movs	r3, #32
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016a8:	4619      	mov	r1, r3
 80016aa:	4835      	ldr	r0, [pc, #212]	; (8001780 <_ZL12MX_GPIO_Initv+0x2d8>)
 80016ac:	f003 fcc2 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80016b0:	f241 030c 	movw	r3, #4108	; 0x100c
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016c6:	4619      	mov	r1, r3
 80016c8:	482e      	ldr	r0, [pc, #184]	; (8001784 <_ZL12MX_GPIO_Initv+0x2dc>)
 80016ca:	f003 fcb3 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80016ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d4:	2300      	movs	r3, #0
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e0:	4619      	mov	r1, r3
 80016e2:	4830      	ldr	r0, [pc, #192]	; (80017a4 <_ZL12MX_GPIO_Initv+0x2fc>)
 80016e4:	f003 fca6 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80016e8:	2308      	movs	r3, #8
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016fc:	4619      	mov	r1, r3
 80016fe:	4822      	ldr	r0, [pc, #136]	; (8001788 <_ZL12MX_GPIO_Initv+0x2e0>)
 8001700:	f003 fc98 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001704:	2310      	movs	r3, #16
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001708:	2300      	movs	r3, #0
 800170a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001714:	4619      	mov	r1, r3
 8001716:	481a      	ldr	r0, [pc, #104]	; (8001780 <_ZL12MX_GPIO_Initv+0x2d8>)
 8001718:	f003 fc8c 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800171c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001722:	2300      	movs	r3, #0
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800172a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800172e:	4619      	mov	r1, r3
 8001730:	4816      	ldr	r0, [pc, #88]	; (800178c <_ZL12MX_GPIO_Initv+0x2e4>)
 8001732:	f003 fc7f 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174c:	4619      	mov	r1, r3
 800174e:	480f      	ldr	r0, [pc, #60]	; (800178c <_ZL12MX_GPIO_Initv+0x2e4>)
 8001750:	f003 fc70 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <_ZL12MX_GPIO_Initv+0x2f8>)
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001766:	4619      	mov	r1, r3
 8001768:	4806      	ldr	r0, [pc, #24]	; (8001784 <_ZL12MX_GPIO_Initv+0x2dc>)
 800176a:	f003 fc63 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800176e:	23c0      	movs	r3, #192	; 0xc0
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	e016      	b.n	80017a8 <_ZL12MX_GPIO_Initv+0x300>
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	40020c00 	.word	0x40020c00
 8001784:	40022000 	.word	0x40022000
 8001788:	40022800 	.word	0x40022800
 800178c:	40021c00 	.word	0x40021c00
 8001790:	40021800 	.word	0x40021800
 8001794:	40021000 	.word	0x40021000
 8001798:	40020400 	.word	0x40020400
 800179c:	40022400 	.word	0x40022400
 80017a0:	10120000 	.word	0x10120000
 80017a4:	40020800 	.word	0x40020800
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80017ae:	2308      	movs	r3, #8
 80017b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b6:	4619      	mov	r1, r3
 80017b8:	4838      	ldr	r0, [pc, #224]	; (800189c <_ZL12MX_GPIO_Initv+0x3f4>)
 80017ba:	f003 fc3b 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80017be:	2310      	movs	r3, #16
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017ce:	230a      	movs	r3, #10
 80017d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d6:	4619      	mov	r1, r3
 80017d8:	4831      	ldr	r0, [pc, #196]	; (80018a0 <_ZL12MX_GPIO_Initv+0x3f8>)
 80017da:	f003 fc2b 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80017de:	23c8      	movs	r3, #200	; 0xc8
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f2:	4619      	mov	r1, r3
 80017f4:	482b      	ldr	r0, [pc, #172]	; (80018a4 <_ZL12MX_GPIO_Initv+0x3fc>)
 80017f6:	f003 fc1d 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80017fa:	2305      	movs	r3, #5
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800180a:	230a      	movs	r3, #10
 800180c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001812:	4619      	mov	r1, r3
 8001814:	4821      	ldr	r0, [pc, #132]	; (800189c <_ZL12MX_GPIO_Initv+0x3f4>)
 8001816:	f003 fc0d 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800181a:	2332      	movs	r3, #50	; 0x32
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800182a:	230b      	movs	r3, #11
 800182c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001832:	4619      	mov	r1, r3
 8001834:	4819      	ldr	r0, [pc, #100]	; (800189c <_ZL12MX_GPIO_Initv+0x3f4>)
 8001836:	f003 fbfd 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800183a:	2304      	movs	r3, #4
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183e:	2300      	movs	r3, #0
 8001840:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184a:	4619      	mov	r1, r3
 800184c:	4815      	ldr	r0, [pc, #84]	; (80018a4 <_ZL12MX_GPIO_Initv+0x3fc>)
 800184e:	f003 fbf1 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001852:	2386      	movs	r3, #134	; 0x86
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001862:	230b      	movs	r3, #11
 8001864:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186a:	4619      	mov	r1, r3
 800186c:	480e      	ldr	r0, [pc, #56]	; (80018a8 <_ZL12MX_GPIO_Initv+0x400>)
 800186e:	f003 fbe1 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001872:	2328      	movs	r3, #40	; 0x28
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001882:	230a      	movs	r3, #10
 8001884:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800188a:	4619      	mov	r1, r3
 800188c:	4806      	ldr	r0, [pc, #24]	; (80018a8 <_ZL12MX_GPIO_Initv+0x400>)
 800188e:	f003 fbd1 	bl	8005034 <HAL_GPIO_Init>

}
 8001892:	bf00      	nop
 8001894:	3740      	adds	r7, #64	; 0x40
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40020800 	.word	0x40020800
 80018a0:	40021c00 	.word	0x40021c00
 80018a4:	40021800 	.word	0x40021800
 80018a8:	40020000 	.word	0x40020000

080018ac <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* init code for FATFS */
  MX_FATFS_Init();
 80018b4:	f00e f89e 	bl	800f9f4 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80018b8:	f01f feee 	bl	8021698 <MX_USB_HOST_Init>

/* Graphic application */
  GRAPHICS_MainTask();
 80018bc:	f01d ffda 	bl	801f874 <_Z17GRAPHICS_MainTaskv>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80018c0:	2001      	movs	r0, #1
 80018c2:	f016 feed 	bl	80186a0 <osDelay>
 80018c6:	e7fb      	b.n	80018c0 <_Z16StartDefaultTaskPKv+0x14>

080018c8 <HAL_UART_RxCpltCallback>:
  }
  /* USER CODE END 5 */ 
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	if(uartMsgData[16] == 13)
 80018d0:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <HAL_UART_RxCpltCallback+0x80>)
 80018d2:	7c1b      	ldrb	r3, [r3, #16]
 80018d4:	2b0d      	cmp	r3, #13
 80018d6:	d12d      	bne.n	8001934 <HAL_UART_RxCpltCallback+0x6c>
	{
			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]

			memcpy(msgConvBuff, &uartMsgData[0], 4*sizeof(*uartMsgData));
 80018dc:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <HAL_UART_RxCpltCallback+0x80>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a1a      	ldr	r2, [pc, #104]	; (800194c <HAL_UART_RxCpltCallback+0x84>)
 80018e2:	6013      	str	r3, [r2, #0]
			xTedMessagePointer->wind = *(float*)msgConvBuff;
 80018e4:	4a19      	ldr	r2, [pc, #100]	; (800194c <HAL_UART_RxCpltCallback+0x84>)
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_UART_RxCpltCallback+0x88>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	601a      	str	r2, [r3, #0]

			memcpy(msgConvBuff, &uartMsgData[4], 4*sizeof(*uartMsgData));
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <HAL_UART_RxCpltCallback+0x80>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4a16      	ldr	r2, [pc, #88]	; (800194c <HAL_UART_RxCpltCallback+0x84>)
 80018f4:	6013      	str	r3, [r2, #0]
			xTedMessagePointer->pitch = *(float*)msgConvBuff;
 80018f6:	4a15      	ldr	r2, [pc, #84]	; (800194c <HAL_UART_RxCpltCallback+0x84>)
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_UART_RxCpltCallback+0x88>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	605a      	str	r2, [r3, #4]

			memcpy(msgConvBuff, &uartMsgData[8], 4*sizeof(*uartMsgData));
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_UART_RxCpltCallback+0x80>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4a11      	ldr	r2, [pc, #68]	; (800194c <HAL_UART_RxCpltCallback+0x84>)
 8001906:	6013      	str	r3, [r2, #0]
			xTedMessagePointer->roll = *(float*)msgConvBuff;
 8001908:	4a10      	ldr	r2, [pc, #64]	; (800194c <HAL_UART_RxCpltCallback+0x84>)
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_UART_RxCpltCallback+0x88>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	609a      	str	r2, [r3, #8]

			memcpy(msgConvBuff, &uartMsgData[12], 4*sizeof(*uartMsgData));
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_UART_RxCpltCallback+0x80>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	4a0d      	ldr	r2, [pc, #52]	; (800194c <HAL_UART_RxCpltCallback+0x84>)
 8001918:	6013      	str	r3, [r2, #0]
			xTedMessagePointer->degree = *(float*)msgConvBuff;
 800191a:	4a0c      	ldr	r2, [pc, #48]	; (800194c <HAL_UART_RxCpltCallback+0x84>)
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <HAL_UART_RxCpltCallback+0x88>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	60da      	str	r2, [r3, #12]

			xQueueSendToBackFromISR(msgQueueHandle, (void*)&xTedMessagePointer, &xHigherPriorityTaskWoken);
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_UART_RxCpltCallback+0x8c>)
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	f107 020c 	add.w	r2, r7, #12
 800192c:	2300      	movs	r3, #0
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <HAL_UART_RxCpltCallback+0x88>)
 8001930:	f017 faa2 	bl	8018e78 <xQueueGenericSendFromISR>

	}
	HAL_UART_Receive_IT(&huart1, uartMsgData, UART_BUF_SIZE);
 8001934:	2211      	movs	r2, #17
 8001936:	4904      	ldr	r1, [pc, #16]	; (8001948 <HAL_UART_RxCpltCallback+0x80>)
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <HAL_UART_RxCpltCallback+0x90>)
 800193a:	f00b fc29 	bl	800d190 <HAL_UART_Receive_IT>

}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000914 	.word	0x20000914
 800194c:	20000928 	.word	0x20000928
 8001950:	2000034c 	.word	0x2000034c
 8001954:	20000910 	.word	0x20000910
 8001958:	2000088c 	.word	0x2000088c

0800195c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d101      	bne.n	8001972 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800196e:	f002 f91b 	bl	8003ba8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40001000 	.word	0x40001000

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_MspInit+0x4c>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	4a10      	ldr	r2, [pc, #64]	; (80019dc <HAL_MspInit+0x4c>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_MspInit+0x4c>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_MspInit+0x4c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <HAL_MspInit+0x4c>)
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_MspInit+0x4c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	210f      	movs	r1, #15
 80019ca:	f06f 0001 	mvn.w	r0, #1
 80019ce:	f002 fc79 	bl	80042c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800

080019e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <HAL_ADC_MspInit+0xa4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d13c      	bne.n	8001a7c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a02:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <HAL_ADC_MspInit+0xa8>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4a20      	ldr	r2, [pc, #128]	; (8001a88 <HAL_ADC_MspInit+0xa8>)
 8001a08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <HAL_ADC_MspInit+0xa8>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_ADC_MspInit+0xa8>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a1a      	ldr	r2, [pc, #104]	; (8001a88 <HAL_ADC_MspInit+0xa8>)
 8001a20:	f043 0320 	orr.w	r3, r3, #32
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_ADC_MspInit+0xa8>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0320 	and.w	r3, r3, #32
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_ADC_MspInit+0xa8>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <HAL_ADC_MspInit+0xa8>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_ADC_MspInit+0xa8>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8001a4a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001a4e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a50:	2303      	movs	r3, #3
 8001a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480b      	ldr	r0, [pc, #44]	; (8001a8c <HAL_ADC_MspInit+0xac>)
 8001a60:	f003 fae8 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001a64:	2301      	movs	r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	4806      	ldr	r0, [pc, #24]	; (8001a90 <HAL_ADC_MspInit+0xb0>)
 8001a78:	f003 fadc 	bl	8005034 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40012200 	.word	0x40012200
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40021400 	.word	0x40021400
 8001a90:	40020000 	.word	0x40020000

08001a94 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <HAL_CRC_MspInit+0x38>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d10b      	bne.n	8001abe <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <HAL_CRC_MspInit+0x3c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <HAL_CRC_MspInit+0x3c>)
 8001aac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <HAL_CRC_MspInit+0x3c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40023000 	.word	0x40023000
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08e      	sub	sp, #56	; 0x38
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a50      	ldr	r2, [pc, #320]	; (8001c34 <HAL_DCMI_MspInit+0x160>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	f040 809a 	bne.w	8001c2c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001af8:	4b4f      	ldr	r3, [pc, #316]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afc:	4a4e      	ldr	r2, [pc, #312]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6353      	str	r3, [r2, #52]	; 0x34
 8001b04:	4b4c      	ldr	r3, [pc, #304]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	623b      	str	r3, [r7, #32]
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b10:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	4a48      	ldr	r2, [pc, #288]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b16:	f043 0310 	orr.w	r3, r3, #16
 8001b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1c:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b28:	4b43      	ldr	r3, [pc, #268]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	4a42      	ldr	r2, [pc, #264]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b2e:	f043 0308 	orr.w	r3, r3, #8
 8001b32:	6313      	str	r3, [r2, #48]	; 0x30
 8001b34:	4b40      	ldr	r3, [pc, #256]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b40:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	4a3c      	ldr	r2, [pc, #240]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4c:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b58:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	4a36      	ldr	r2, [pc, #216]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b62:	6313      	str	r3, [r2, #48]	; 0x30
 8001b64:	4b34      	ldr	r3, [pc, #208]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	4b31      	ldr	r3, [pc, #196]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	4a30      	ldr	r2, [pc, #192]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7c:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001b88:	2360      	movs	r3, #96	; 0x60
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b98:	230d      	movs	r3, #13
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4826      	ldr	r0, [pc, #152]	; (8001c3c <HAL_DCMI_MspInit+0x168>)
 8001ba4:	f003 fa46 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001ba8:	2308      	movs	r3, #8
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bb8:	230d      	movs	r3, #13
 8001bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	481f      	ldr	r0, [pc, #124]	; (8001c40 <HAL_DCMI_MspInit+0x16c>)
 8001bc4:	f003 fa36 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bda:	230d      	movs	r3, #13
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be2:	4619      	mov	r1, r3
 8001be4:	4817      	ldr	r0, [pc, #92]	; (8001c44 <HAL_DCMI_MspInit+0x170>)
 8001be6:	f003 fa25 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8001bea:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bfc:	230d      	movs	r3, #13
 8001bfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c04:	4619      	mov	r1, r3
 8001c06:	4810      	ldr	r0, [pc, #64]	; (8001c48 <HAL_DCMI_MspInit+0x174>)
 8001c08:	f003 fa14 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001c0c:	2350      	movs	r3, #80	; 0x50
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c1c:	230d      	movs	r3, #13
 8001c1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c24:	4619      	mov	r1, r3
 8001c26:	4809      	ldr	r0, [pc, #36]	; (8001c4c <HAL_DCMI_MspInit+0x178>)
 8001c28:	f003 fa04 	bl	8005034 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3738      	adds	r7, #56	; 0x38
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	50050000 	.word	0x50050000
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40020c00 	.word	0x40020c00
 8001c44:	40021800 	.word	0x40021800
 8001c48:	40021c00 	.word	0x40021c00
 8001c4c:	40020000 	.word	0x40020000

08001c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	; 0x30
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a2f      	ldr	r2, [pc, #188]	; (8001d2c <HAL_I2C_MspInit+0xdc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d129      	bne.n	8001cc6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a2e      	ldr	r2, [pc, #184]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b2c      	ldr	r3, [pc, #176]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	61bb      	str	r3, [r7, #24]
 8001c88:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001c8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c90:	2312      	movs	r3, #18
 8001c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca0:	f107 031c 	add.w	r3, r7, #28
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4823      	ldr	r0, [pc, #140]	; (8001d34 <HAL_I2C_MspInit+0xe4>)
 8001ca8:	f003 f9c4 	bl	8005034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cac:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	4a1f      	ldr	r2, [pc, #124]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001cb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001cc4:	e02d      	b.n	8001d22 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1b      	ldr	r2, [pc, #108]	; (8001d38 <HAL_I2C_MspInit+0xe8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d128      	bne.n	8001d22 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cd0:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	4a16      	ldr	r2, [pc, #88]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cda:	6313      	str	r3, [r2, #48]	; 0x30
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001ce8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cee:	2312      	movs	r3, #18
 8001cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cfe:	f107 031c 	add.w	r3, r7, #28
 8001d02:	4619      	mov	r1, r3
 8001d04:	480d      	ldr	r0, [pc, #52]	; (8001d3c <HAL_I2C_MspInit+0xec>)
 8001d06:	f003 f995 	bl	8005034 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001d10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
}
 8001d22:	bf00      	nop
 8001d24:	3730      	adds	r7, #48	; 0x30
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40005400 	.word	0x40005400
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020400 	.word	0x40020400
 8001d38:	40005c00 	.word	0x40005c00
 8001d3c:	40021c00 	.word	0x40021c00

08001d40 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <HAL_I2C_MspDeInit+0x54>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d10b      	bne.n	8001d6a <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_I2C_MspDeInit+0x58>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a10      	ldr	r2, [pc, #64]	; (8001d98 <HAL_I2C_MspDeInit+0x58>)
 8001d58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 8001d5e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001d62:	480e      	ldr	r0, [pc, #56]	; (8001d9c <HAL_I2C_MspDeInit+0x5c>)
 8001d64:	f003 fb10 	bl	8005388 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001d68:	e00f      	b.n	8001d8a <HAL_I2C_MspDeInit+0x4a>
  else if(hi2c->Instance==I2C3)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <HAL_I2C_MspDeInit+0x60>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d10a      	bne.n	8001d8a <HAL_I2C_MspDeInit+0x4a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <HAL_I2C_MspDeInit+0x58>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <HAL_I2C_MspDeInit+0x58>)
 8001d7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8001d80:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001d84:	4807      	ldr	r0, [pc, #28]	; (8001da4 <HAL_I2C_MspDeInit+0x64>)
 8001d86:	f003 faff 	bl	8005388 <HAL_GPIO_DeInit>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40005400 	.word	0x40005400
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40020400 	.word	0x40020400
 8001da0:	40005c00 	.word	0x40005c00
 8001da4:	40021c00 	.word	0x40021c00

08001da8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	; 0x30
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a3b      	ldr	r2, [pc, #236]	; (8001eb4 <HAL_QSPI_MspInit+0x10c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d170      	bne.n	8001eac <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001dca:	4b3b      	ldr	r3, [pc, #236]	; (8001eb8 <HAL_QSPI_MspInit+0x110>)
 8001dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dce:	4a3a      	ldr	r2, [pc, #232]	; (8001eb8 <HAL_QSPI_MspInit+0x110>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6393      	str	r3, [r2, #56]	; 0x38
 8001dd6:	4b38      	ldr	r3, [pc, #224]	; (8001eb8 <HAL_QSPI_MspInit+0x110>)
 8001dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de2:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <HAL_QSPI_MspInit+0x110>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a34      	ldr	r2, [pc, #208]	; (8001eb8 <HAL_QSPI_MspInit+0x110>)
 8001de8:	f043 0310 	orr.w	r3, r3, #16
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <HAL_QSPI_MspInit+0x110>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <HAL_QSPI_MspInit+0x110>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a2e      	ldr	r2, [pc, #184]	; (8001eb8 <HAL_QSPI_MspInit+0x110>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <HAL_QSPI_MspInit+0x110>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e12:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <HAL_QSPI_MspInit+0x110>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a28      	ldr	r2, [pc, #160]	; (8001eb8 <HAL_QSPI_MspInit+0x110>)
 8001e18:	f043 0308 	orr.w	r3, r3, #8
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <HAL_QSPI_MspInit+0x110>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e3a:	2309      	movs	r3, #9
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	f107 031c 	add.w	r3, r7, #28
 8001e42:	4619      	mov	r1, r3
 8001e44:	481d      	ldr	r0, [pc, #116]	; (8001ebc <HAL_QSPI_MspInit+0x114>)
 8001e46:	f003 f8f5 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001e4a:	2340      	movs	r3, #64	; 0x40
 8001e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001e5a:	230a      	movs	r3, #10
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	4619      	mov	r1, r3
 8001e64:	4816      	ldr	r0, [pc, #88]	; (8001ec0 <HAL_QSPI_MspInit+0x118>)
 8001e66:	f003 f8e5 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e76:	2303      	movs	r3, #3
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e7a:	2309      	movs	r3, #9
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	f107 031c 	add.w	r3, r7, #28
 8001e82:	4619      	mov	r1, r3
 8001e84:	480e      	ldr	r0, [pc, #56]	; (8001ec0 <HAL_QSPI_MspInit+0x118>)
 8001e86:	f003 f8d5 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001e8a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e9c:	2309      	movs	r3, #9
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4807      	ldr	r0, [pc, #28]	; (8001ec4 <HAL_QSPI_MspInit+0x11c>)
 8001ea8:	f003 f8c4 	bl	8005034 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001eac:	bf00      	nop
 8001eae:	3730      	adds	r7, #48	; 0x30
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	a0001000 	.word	0xa0001000
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40020400 	.word	0x40020400
 8001ec4:	40020c00 	.word	0x40020c00

08001ec8 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <HAL_QSPI_MspDeInit+0x40>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d112      	bne.n	8001f00 <HAL_QSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <HAL_QSPI_MspDeInit+0x44>)
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	4a0b      	ldr	r2, [pc, #44]	; (8001f0c <HAL_QSPI_MspDeInit+0x44>)
 8001ee0:	f023 0302 	bic.w	r3, r3, #2
 8001ee4:	6393      	str	r3, [r2, #56]	; 0x38
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    HAL_GPIO_DeInit(QSPI_D2_GPIO_Port, QSPI_D2_Pin);
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	4809      	ldr	r0, [pc, #36]	; (8001f10 <HAL_QSPI_MspDeInit+0x48>)
 8001eea:	f003 fa4d 	bl	8005388 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, QSPI_NCS_Pin|GPIO_PIN_2);
 8001eee:	2144      	movs	r1, #68	; 0x44
 8001ef0:	4808      	ldr	r0, [pc, #32]	; (8001f14 <HAL_QSPI_MspDeInit+0x4c>)
 8001ef2:	f003 fa49 	bl	8005388 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin);
 8001ef6:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001efa:	4807      	ldr	r0, [pc, #28]	; (8001f18 <HAL_QSPI_MspDeInit+0x50>)
 8001efc:	f003 fa44 	bl	8005388 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	a0001000 	.word	0xa0001000
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40020400 	.word	0x40020400
 8001f18:	40020c00 	.word	0x40020c00

08001f1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a07      	ldr	r2, [pc, #28]	; (8001f48 <HAL_RTC_MspInit+0x2c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d105      	bne.n	8001f3a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <HAL_RTC_MspInit+0x30>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f32:	4a06      	ldr	r2, [pc, #24]	; (8001f4c <HAL_RTC_MspInit+0x30>)
 8001f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f38:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40002800 	.word	0x40002800
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a25      	ldr	r2, [pc, #148]	; (8002004 <HAL_SD_MspInit+0xb4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d144      	bne.n	8001ffc <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f72:	4b25      	ldr	r3, [pc, #148]	; (8002008 <HAL_SD_MspInit+0xb8>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	4a24      	ldr	r2, [pc, #144]	; (8002008 <HAL_SD_MspInit+0xb8>)
 8001f78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <HAL_SD_MspInit+0xb8>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8a:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <HAL_SD_MspInit+0xb8>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <HAL_SD_MspInit+0xb8>)
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <HAL_SD_MspInit+0xb8>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_SD_MspInit+0xb8>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a18      	ldr	r2, [pc, #96]	; (8002008 <HAL_SD_MspInit+0xb8>)
 8001fa8:	f043 0308 	orr.w	r3, r3, #8
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_SD_MspInit+0xb8>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8001fba:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001fbe:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001fcc:	230c      	movs	r3, #12
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	480d      	ldr	r0, [pc, #52]	; (800200c <HAL_SD_MspInit+0xbc>)
 8001fd8:	f003 f82c 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001fdc:	2304      	movs	r3, #4
 8001fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001fec:	230c      	movs	r3, #12
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4806      	ldr	r0, [pc, #24]	; (8002010 <HAL_SD_MspInit+0xc0>)
 8001ff8:	f003 f81c 	bl	8005034 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001ffc:	bf00      	nop
 8001ffe:	3728      	adds	r7, #40	; 0x28
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40012c00 	.word	0x40012c00
 8002008:	40023800 	.word	0x40023800
 800200c:	40020800 	.word	0x40020800
 8002010:	40020c00 	.word	0x40020c00

08002014 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	; 0x28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002034:	d127      	bne.n	8002086 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002036:	4b16      	ldr	r3, [pc, #88]	; (8002090 <HAL_SPDIFRX_MspInit+0x7c>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	4a15      	ldr	r2, [pc, #84]	; (8002090 <HAL_SPDIFRX_MspInit+0x7c>)
 800203c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002040:	6413      	str	r3, [r2, #64]	; 0x40
 8002042:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_SPDIFRX_MspInit+0x7c>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <HAL_SPDIFRX_MspInit+0x7c>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	4a0f      	ldr	r2, [pc, #60]	; (8002090 <HAL_SPDIFRX_MspInit+0x7c>)
 8002054:	f043 0308 	orr.w	r3, r3, #8
 8002058:	6313      	str	r3, [r2, #48]	; 0x30
 800205a:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <HAL_SPDIFRX_MspInit+0x7c>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002076:	2308      	movs	r3, #8
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	4804      	ldr	r0, [pc, #16]	; (8002094 <HAL_SPDIFRX_MspInit+0x80>)
 8002082:	f002 ffd7 	bl	8005034 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002086:	bf00      	nop
 8002088:	3728      	adds	r7, #40	; 0x28
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800
 8002094:	40020c00 	.word	0x40020c00

08002098 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a25      	ldr	r2, [pc, #148]	; (800214c <HAL_SPI_MspInit+0xb4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d144      	bne.n	8002144 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020ba:	4b25      	ldr	r3, [pc, #148]	; (8002150 <HAL_SPI_MspInit+0xb8>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4a24      	ldr	r2, [pc, #144]	; (8002150 <HAL_SPI_MspInit+0xb8>)
 80020c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c4:	6413      	str	r3, [r2, #64]	; 0x40
 80020c6:	4b22      	ldr	r3, [pc, #136]	; (8002150 <HAL_SPI_MspInit+0xb8>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80020d2:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <HAL_SPI_MspInit+0xb8>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a1e      	ldr	r2, [pc, #120]	; (8002150 <HAL_SPI_MspInit+0xb8>)
 80020d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <HAL_SPI_MspInit+0xb8>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_SPI_MspInit+0xb8>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a18      	ldr	r2, [pc, #96]	; (8002150 <HAL_SPI_MspInit+0xb8>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_SPI_MspInit+0xb8>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002102:	2302      	movs	r3, #2
 8002104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002112:	2305      	movs	r3, #5
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4619      	mov	r1, r3
 800211c:	480d      	ldr	r0, [pc, #52]	; (8002154 <HAL_SPI_MspInit+0xbc>)
 800211e:	f002 ff89 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002122:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2300      	movs	r3, #0
 8002132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002134:	2305      	movs	r3, #5
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4619      	mov	r1, r3
 800213e:	4806      	ldr	r0, [pc, #24]	; (8002158 <HAL_SPI_MspInit+0xc0>)
 8002140:	f002 ff78 	bl	8005034 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002144:	bf00      	nop
 8002146:	3728      	adds	r7, #40	; 0x28
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40003800 	.word	0x40003800
 8002150:	40023800 	.word	0x40023800
 8002154:	40022000 	.word	0x40022000
 8002158:	40020400 	.word	0x40020400

0800215c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a2e      	ldr	r2, [pc, #184]	; (8002224 <HAL_TIM_Base_MspInit+0xc8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d10c      	bne.n	8002188 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800216e:	4b2e      	ldr	r3, [pc, #184]	; (8002228 <HAL_TIM_Base_MspInit+0xcc>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a2d      	ldr	r2, [pc, #180]	; (8002228 <HAL_TIM_Base_MspInit+0xcc>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <HAL_TIM_Base_MspInit+0xcc>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	61fb      	str	r3, [r7, #28]
 8002184:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002186:	e046      	b.n	8002216 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002190:	d10c      	bne.n	80021ac <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002192:	4b25      	ldr	r3, [pc, #148]	; (8002228 <HAL_TIM_Base_MspInit+0xcc>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a24      	ldr	r2, [pc, #144]	; (8002228 <HAL_TIM_Base_MspInit+0xcc>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b22      	ldr	r3, [pc, #136]	; (8002228 <HAL_TIM_Base_MspInit+0xcc>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	69bb      	ldr	r3, [r7, #24]
}
 80021aa:	e034      	b.n	8002216 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1e      	ldr	r2, [pc, #120]	; (800222c <HAL_TIM_Base_MspInit+0xd0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d10c      	bne.n	80021d0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <HAL_TIM_Base_MspInit+0xcc>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a1b      	ldr	r2, [pc, #108]	; (8002228 <HAL_TIM_Base_MspInit+0xcc>)
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_TIM_Base_MspInit+0xcc>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697b      	ldr	r3, [r7, #20]
}
 80021ce:	e022      	b.n	8002216 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a16      	ldr	r2, [pc, #88]	; (8002230 <HAL_TIM_Base_MspInit+0xd4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d10c      	bne.n	80021f4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021da:	4b13      	ldr	r3, [pc, #76]	; (8002228 <HAL_TIM_Base_MspInit+0xcc>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a12      	ldr	r2, [pc, #72]	; (8002228 <HAL_TIM_Base_MspInit+0xcc>)
 80021e0:	f043 0308 	orr.w	r3, r3, #8
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <HAL_TIM_Base_MspInit+0xcc>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]
}
 80021f2:	e010      	b.n	8002216 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <HAL_TIM_Base_MspInit+0xd8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d10b      	bne.n	8002216 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_TIM_Base_MspInit+0xcc>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	4a09      	ldr	r2, [pc, #36]	; (8002228 <HAL_TIM_Base_MspInit+0xcc>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	6453      	str	r3, [r2, #68]	; 0x44
 800220a:	4b07      	ldr	r3, [pc, #28]	; (8002228 <HAL_TIM_Base_MspInit+0xcc>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
}
 8002216:	bf00      	nop
 8002218:	3724      	adds	r7, #36	; 0x24
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40010000 	.word	0x40010000
 8002228:	40023800 	.word	0x40023800
 800222c:	40000400 	.word	0x40000400
 8002230:	40000c00 	.word	0x40000c00
 8002234:	40010400 	.word	0x40010400

08002238 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <HAL_TIM_PWM_MspInit+0x38>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d10b      	bne.n	8002262 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_TIM_PWM_MspInit+0x3c>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	4a09      	ldr	r2, [pc, #36]	; (8002274 <HAL_TIM_PWM_MspInit+0x3c>)
 8002250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002254:	6413      	str	r3, [r2, #64]	; 0x40
 8002256:	4b07      	ldr	r3, [pc, #28]	; (8002274 <HAL_TIM_PWM_MspInit+0x3c>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40001800 	.word	0x40001800
 8002274:	40023800 	.word	0x40023800

08002278 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08c      	sub	sp, #48	; 0x30
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a56      	ldr	r2, [pc, #344]	; (80023f0 <HAL_TIM_MspPostInit+0x178>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d11d      	bne.n	80022d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229a:	4b56      	ldr	r3, [pc, #344]	; (80023f4 <HAL_TIM_MspPostInit+0x17c>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a55      	ldr	r2, [pc, #340]	; (80023f4 <HAL_TIM_MspPostInit+0x17c>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <HAL_TIM_MspPostInit+0x17c>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	61bb      	str	r3, [r7, #24]
 80022b0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80022b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022c4:	2301      	movs	r3, #1
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	4619      	mov	r1, r3
 80022ce:	484a      	ldr	r0, [pc, #296]	; (80023f8 <HAL_TIM_MspPostInit+0x180>)
 80022d0:	f002 feb0 	bl	8005034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80022d4:	e087      	b.n	80023e6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022de:	d11d      	bne.n	800231c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e0:	4b44      	ldr	r3, [pc, #272]	; (80023f4 <HAL_TIM_MspPostInit+0x17c>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	4a43      	ldr	r2, [pc, #268]	; (80023f4 <HAL_TIM_MspPostInit+0x17c>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6313      	str	r3, [r2, #48]	; 0x30
 80022ec:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <HAL_TIM_MspPostInit+0x17c>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80022f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800230a:	2301      	movs	r3, #1
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800230e:	f107 031c 	add.w	r3, r7, #28
 8002312:	4619      	mov	r1, r3
 8002314:	4838      	ldr	r0, [pc, #224]	; (80023f8 <HAL_TIM_MspPostInit+0x180>)
 8002316:	f002 fe8d 	bl	8005034 <HAL_GPIO_Init>
}
 800231a:	e064      	b.n	80023e6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a36      	ldr	r2, [pc, #216]	; (80023fc <HAL_TIM_MspPostInit+0x184>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d11c      	bne.n	8002360 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002326:	4b33      	ldr	r3, [pc, #204]	; (80023f4 <HAL_TIM_MspPostInit+0x17c>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	4a32      	ldr	r2, [pc, #200]	; (80023f4 <HAL_TIM_MspPostInit+0x17c>)
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
 8002332:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <HAL_TIM_MspPostInit+0x17c>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800233e:	2310      	movs	r3, #16
 8002340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800234e:	2302      	movs	r3, #2
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002352:	f107 031c 	add.w	r3, r7, #28
 8002356:	4619      	mov	r1, r3
 8002358:	4829      	ldr	r0, [pc, #164]	; (8002400 <HAL_TIM_MspPostInit+0x188>)
 800235a:	f002 fe6b 	bl	8005034 <HAL_GPIO_Init>
}
 800235e:	e042      	b.n	80023e6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a27      	ldr	r2, [pc, #156]	; (8002404 <HAL_TIM_MspPostInit+0x18c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d11c      	bne.n	80023a4 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_TIM_MspPostInit+0x17c>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4a21      	ldr	r2, [pc, #132]	; (80023f4 <HAL_TIM_MspPostInit+0x17c>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4b1f      	ldr	r3, [pc, #124]	; (80023f4 <HAL_TIM_MspPostInit+0x17c>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002382:	2301      	movs	r3, #1
 8002384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002392:	2302      	movs	r3, #2
 8002394:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	4619      	mov	r1, r3
 800239c:	481a      	ldr	r0, [pc, #104]	; (8002408 <HAL_TIM_MspPostInit+0x190>)
 800239e:	f002 fe49 	bl	8005034 <HAL_GPIO_Init>
}
 80023a2:	e020      	b.n	80023e6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a18      	ldr	r2, [pc, #96]	; (800240c <HAL_TIM_MspPostInit+0x194>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d11b      	bne.n	80023e6 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_TIM_MspPostInit+0x17c>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a10      	ldr	r2, [pc, #64]	; (80023f4 <HAL_TIM_MspPostInit+0x17c>)
 80023b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_TIM_MspPostInit+0x17c>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80023c6:	2340      	movs	r3, #64	; 0x40
 80023c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80023d6:	2309      	movs	r3, #9
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80023da:	f107 031c 	add.w	r3, r7, #28
 80023de:	4619      	mov	r1, r3
 80023e0:	480b      	ldr	r0, [pc, #44]	; (8002410 <HAL_TIM_MspPostInit+0x198>)
 80023e2:	f002 fe27 	bl	8005034 <HAL_GPIO_Init>
}
 80023e6:	bf00      	nop
 80023e8:	3730      	adds	r7, #48	; 0x30
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40010000 	.word	0x40010000
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020000 	.word	0x40020000
 80023fc:	40000400 	.word	0x40000400
 8002400:	40020400 	.word	0x40020400
 8002404:	40000c00 	.word	0x40000c00
 8002408:	40022000 	.word	0x40022000
 800240c:	40001800 	.word	0x40001800
 8002410:	40021c00 	.word	0x40021c00

08002414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a29      	ldr	r2, [pc, #164]	; (80024d8 <HAL_UART_MspInit+0xc4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d14c      	bne.n	80024d0 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002436:	4b29      	ldr	r3, [pc, #164]	; (80024dc <HAL_UART_MspInit+0xc8>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	4a28      	ldr	r2, [pc, #160]	; (80024dc <HAL_UART_MspInit+0xc8>)
 800243c:	f043 0310 	orr.w	r3, r3, #16
 8002440:	6453      	str	r3, [r2, #68]	; 0x44
 8002442:	4b26      	ldr	r3, [pc, #152]	; (80024dc <HAL_UART_MspInit+0xc8>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244e:	4b23      	ldr	r3, [pc, #140]	; (80024dc <HAL_UART_MspInit+0xc8>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a22      	ldr	r2, [pc, #136]	; (80024dc <HAL_UART_MspInit+0xc8>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b20      	ldr	r3, [pc, #128]	; (80024dc <HAL_UART_MspInit+0xc8>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_UART_MspInit+0xc8>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a1c      	ldr	r2, [pc, #112]	; (80024dc <HAL_UART_MspInit+0xc8>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <HAL_UART_MspInit+0xc8>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800248e:	2307      	movs	r3, #7
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002492:	f107 0314 	add.w	r3, r7, #20
 8002496:	4619      	mov	r1, r3
 8002498:	4811      	ldr	r0, [pc, #68]	; (80024e0 <HAL_UART_MspInit+0xcc>)
 800249a:	f002 fdcb 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800249e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024b0:	2307      	movs	r3, #7
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	4619      	mov	r1, r3
 80024ba:	480a      	ldr	r0, [pc, #40]	; (80024e4 <HAL_UART_MspInit+0xd0>)
 80024bc:	f002 fdba 	bl	8005034 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2105      	movs	r1, #5
 80024c4:	2025      	movs	r0, #37	; 0x25
 80024c6:	f001 fefd 	bl	80042c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024ca:	2025      	movs	r0, #37	; 0x25
 80024cc:	f001 ff16 	bl	80042fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024d0:	bf00      	nop
 80024d2:	3728      	adds	r7, #40	; 0x28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40011000 	.word	0x40011000
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40020400 	.word	0x40020400
 80024e4:	40020000 	.word	0x40020000

080024e8 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	; 0x28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a2b      	ldr	r2, [pc, #172]	; (80025a4 <HAL_SAI_MspInit+0xbc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d124      	bne.n	8002544 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80024fa:	4b2b      	ldr	r3, [pc, #172]	; (80025a8 <HAL_SAI_MspInit+0xc0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10b      	bne.n	800251a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002502:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <HAL_SAI_MspInit+0xc4>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	4a29      	ldr	r2, [pc, #164]	; (80025ac <HAL_SAI_MspInit+0xc4>)
 8002508:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800250c:	6453      	str	r3, [r2, #68]	; 0x44
 800250e:	4b27      	ldr	r3, [pc, #156]	; (80025ac <HAL_SAI_MspInit+0xc4>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800251a:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <HAL_SAI_MspInit+0xc0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	3301      	adds	r3, #1
 8002520:	4a21      	ldr	r2, [pc, #132]	; (80025a8 <HAL_SAI_MspInit+0xc0>)
 8002522:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002524:	23f0      	movs	r3, #240	; 0xf0
 8002526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002530:	2300      	movs	r3, #0
 8002532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002534:	230a      	movs	r3, #10
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4619      	mov	r1, r3
 800253e:	481c      	ldr	r0, [pc, #112]	; (80025b0 <HAL_SAI_MspInit+0xc8>)
 8002540:	f002 fd78 	bl	8005034 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1a      	ldr	r2, [pc, #104]	; (80025b4 <HAL_SAI_MspInit+0xcc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d125      	bne.n	800259a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800254e:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <HAL_SAI_MspInit+0xc0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10b      	bne.n	800256e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <HAL_SAI_MspInit+0xc4>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	4a14      	ldr	r2, [pc, #80]	; (80025ac <HAL_SAI_MspInit+0xc4>)
 800255c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002560:	6453      	str	r3, [r2, #68]	; 0x44
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_SAI_MspInit+0xc4>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <HAL_SAI_MspInit+0xc0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	3301      	adds	r3, #1
 8002574:	4a0c      	ldr	r2, [pc, #48]	; (80025a8 <HAL_SAI_MspInit+0xc0>)
 8002576:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800257c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800258a:	230a      	movs	r3, #10
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	4619      	mov	r1, r3
 8002594:	4808      	ldr	r0, [pc, #32]	; (80025b8 <HAL_SAI_MspInit+0xd0>)
 8002596:	f002 fd4d 	bl	8005034 <HAL_GPIO_Init>

    }
}
 800259a:	bf00      	nop
 800259c:	3728      	adds	r7, #40	; 0x28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40015c04 	.word	0x40015c04
 80025a8:	2000092c 	.word	0x2000092c
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40022000 	.word	0x40022000
 80025b4:	40015c24 	.word	0x40015c24
 80025b8:	40021800 	.word	0x40021800

080025bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08c      	sub	sp, #48	; 0x30
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80025cc:	2200      	movs	r2, #0
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	2036      	movs	r0, #54	; 0x36
 80025d2:	f001 fe77 	bl	80042c4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80025d6:	2036      	movs	r0, #54	; 0x36
 80025d8:	f001 fe90 	bl	80042fc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80025dc:	4b1f      	ldr	r3, [pc, #124]	; (800265c <HAL_InitTick+0xa0>)
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	4a1e      	ldr	r2, [pc, #120]	; (800265c <HAL_InitTick+0xa0>)
 80025e2:	f043 0310 	orr.w	r3, r3, #16
 80025e6:	6413      	str	r3, [r2, #64]	; 0x40
 80025e8:	4b1c      	ldr	r3, [pc, #112]	; (800265c <HAL_InitTick+0xa0>)
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025f4:	f107 0210 	add.w	r2, r7, #16
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f007 f838 	bl	8009674 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002604:	f007 f80e 	bl	8009624 <HAL_RCC_GetPCLK1Freq>
 8002608:	4603      	mov	r3, r0
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002610:	4a13      	ldr	r2, [pc, #76]	; (8002660 <HAL_InitTick+0xa4>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	0c9b      	lsrs	r3, r3, #18
 8002618:	3b01      	subs	r3, #1
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_InitTick+0xa8>)
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <HAL_InitTick+0xac>)
 8002620:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <HAL_InitTick+0xa8>)
 8002624:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002628:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800262a:	4a0e      	ldr	r2, [pc, #56]	; (8002664 <HAL_InitTick+0xa8>)
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <HAL_InitTick+0xa8>)
 8002632:	2200      	movs	r2, #0
 8002634:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_InitTick+0xa8>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800263c:	4809      	ldr	r0, [pc, #36]	; (8002664 <HAL_InitTick+0xa8>)
 800263e:	f009 fd05 	bl	800c04c <HAL_TIM_Base_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d104      	bne.n	8002652 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002648:	4806      	ldr	r0, [pc, #24]	; (8002664 <HAL_InitTick+0xa8>)
 800264a:	f009 fd55 	bl	800c0f8 <HAL_TIM_Base_Start_IT>
 800264e:	4603      	mov	r3, r0
 8002650:	e000      	b.n	8002654 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
}
 8002654:	4618      	mov	r0, r3
 8002656:	3730      	adds	r7, #48	; 0x30
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40023800 	.word	0x40023800
 8002660:	431bde83 	.word	0x431bde83
 8002664:	2000d0d0 	.word	0x2000d0d0
 8002668:	40001000 	.word	0x40001000

0800266c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800267a:	b480      	push	{r7}
 800267c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800267e:	e7fe      	b.n	800267e <HardFault_Handler+0x4>

08002680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002684:	e7fe      	b.n	8002684 <MemManage_Handler+0x4>

08002686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002686:	b480      	push	{r7}
 8002688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800268a:	e7fe      	b.n	800268a <BusFault_Handler+0x4>

0800268c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002690:	e7fe      	b.n	8002690 <UsageFault_Handler+0x4>

08002692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026a4:	4802      	ldr	r0, [pc, #8]	; (80026b0 <USART1_IRQHandler+0x10>)
 80026a6:	f00a fe15 	bl	800d2d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2000088c 	.word	0x2000088c

080026b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026b8:	4802      	ldr	r0, [pc, #8]	; (80026c4 <TIM6_DAC_IRQHandler+0x10>)
 80026ba:	f009 fd72 	bl	800c1a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2000d0d0 	.word	0x2000d0d0

080026c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80026cc:	4802      	ldr	r0, [pc, #8]	; (80026d8 <OTG_FS_IRQHandler+0x10>)
 80026ce:	f003 fa0f 	bl	8005af0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2000d9a4 	.word	0x2000d9a4

080026dc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80026e0:	4802      	ldr	r0, [pc, #8]	; (80026ec <LTDC_IRQHandler+0x10>)
 80026e2:	f005 fa7f 	bl	8007be4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2000cdf0 	.word	0x2000cdf0

080026f0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <DMA2D_IRQHandler+0x10>)
 80026f6:	f002 fa5e 	bl	8004bb6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	2000ce98 	.word	0x2000ce98

08002704 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
	return 1;
 8002708:	2301      	movs	r3, #1
}
 800270a:	4618      	mov	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <_kill>:

int _kill(int pid, int sig)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800271e:	f028 fd0f 	bl	802b140 <__errno>
 8002722:	4602      	mov	r2, r0
 8002724:	2316      	movs	r3, #22
 8002726:	6013      	str	r3, [r2, #0]
	return -1;
 8002728:	f04f 33ff 	mov.w	r3, #4294967295
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <_exit>:

void _exit (int status)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800273c:	f04f 31ff 	mov.w	r1, #4294967295
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ffe7 	bl	8002714 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002746:	e7fe      	b.n	8002746 <_exit+0x12>

08002748 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	e00a      	b.n	8002770 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800275a:	f3af 8000 	nop.w
 800275e:	4601      	mov	r1, r0
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	60ba      	str	r2, [r7, #8]
 8002766:	b2ca      	uxtb	r2, r1
 8002768:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3301      	adds	r3, #1
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	429a      	cmp	r2, r3
 8002776:	dbf0      	blt.n	800275a <_read+0x12>
	}

return len;
 8002778:	687b      	ldr	r3, [r7, #4]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b086      	sub	sp, #24
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	e009      	b.n	80027a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	60ba      	str	r2, [r7, #8]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	3301      	adds	r3, #1
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	dbf1      	blt.n	8002794 <_write+0x12>
	}
	return len;
 80027b0:	687b      	ldr	r3, [r7, #4]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <_close>:

int _close(int file)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
	return -1;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027e2:	605a      	str	r2, [r3, #4]
	return 0;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <_isatty>:

int _isatty(int file)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
	return 1;
 80027fa:	2301      	movs	r3, #1
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
	return 0;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800282c:	4b11      	ldr	r3, [pc, #68]	; (8002874 <_sbrk+0x50>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <_sbrk+0x16>
		heap_end = &end;
 8002834:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <_sbrk+0x50>)
 8002836:	4a10      	ldr	r2, [pc, #64]	; (8002878 <_sbrk+0x54>)
 8002838:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <_sbrk+0x50>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <_sbrk+0x50>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4413      	add	r3, r2
 8002848:	466a      	mov	r2, sp
 800284a:	4293      	cmp	r3, r2
 800284c:	d907      	bls.n	800285e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800284e:	f028 fc77 	bl	802b140 <__errno>
 8002852:	4602      	mov	r2, r0
 8002854:	230c      	movs	r3, #12
 8002856:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295
 800285c:	e006      	b.n	800286c <_sbrk+0x48>
	}

	heap_end += incr;
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <_sbrk+0x50>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	4a03      	ldr	r2, [pc, #12]	; (8002874 <_sbrk+0x50>)
 8002868:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800286a:	68fb      	ldr	r3, [r7, #12]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000930 	.word	0x20000930
 8002878:	2000dc70 	.word	0x2000dc70

0800287c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002880:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <SystemInit+0x5c>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <SystemInit+0x5c>)
 8002888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800288c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <SystemInit+0x60>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a11      	ldr	r2, [pc, #68]	; (80028dc <SystemInit+0x60>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <SystemInit+0x60>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <SystemInit+0x60>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	490d      	ldr	r1, [pc, #52]	; (80028dc <SystemInit+0x60>)
 80028a8:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <SystemInit+0x64>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <SystemInit+0x60>)
 80028b0:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <SystemInit+0x68>)
 80028b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <SystemInit+0x60>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a08      	ldr	r2, [pc, #32]	; (80028dc <SystemInit+0x60>)
 80028ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <SystemInit+0x60>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028c6:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <SystemInit+0x5c>)
 80028c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028cc:	609a      	str	r2, [r3, #8]
#endif
}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00
 80028dc:	40023800 	.word	0x40023800
 80028e0:	fef6ffff 	.word	0xfef6ffff
 80028e4:	24003010 	.word	0x24003010

080028e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002920 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80028ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80028ee:	e003      	b.n	80028f8 <LoopCopyDataInit>

080028f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80028f0:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80028f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80028f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80028f6:	3104      	adds	r1, #4

080028f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80028f8:	480b      	ldr	r0, [pc, #44]	; (8002928 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80028fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80028fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002900:	d3f6      	bcc.n	80028f0 <CopyDataInit>
  ldr  r2, =_sbss
 8002902:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002904:	e002      	b.n	800290c <LoopFillZerobss>

08002906 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002906:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002908:	f842 3b04 	str.w	r3, [r2], #4

0800290c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800290e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002910:	d3f9      	bcc.n	8002906 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002912:	f7ff ffb3 	bl	800287c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002916:	f028 fc2b 	bl	802b170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800291a:	f7fd fe63 	bl	80005e4 <main>
  bx  lr    
 800291e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002920:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002924:	0803087c 	.word	0x0803087c
  ldr  r0, =_sdata
 8002928:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800292c:	200000d8 	.word	0x200000d8
  ldr  r2, =_sbss
 8002930:	200000d8 	.word	0x200000d8
  ldr  r3, = _ebss
 8002934:	2000dc6c 	.word	0x2000dc6c

08002938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002938:	e7fe      	b.n	8002938 <ADC_IRQHandler>

0800293a <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8002944:	20c8      	movs	r0, #200	; 0xc8
 8002946:	f000 fc33 	bl	80031b0 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800294a:	f000 fa7b 	bl	8002e44 <ft5336_I2C_InitializeIfRequired>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800297e:	2300      	movs	r3, #0
 8002980:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002982:	f000 fa5f 	bl	8002e44 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]
 800298a:	e010      	b.n	80029ae <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	21a8      	movs	r1, #168	; 0xa8
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fbee 	bl	8003174 <TS_IO_Read>
 8002998:	4603      	mov	r3, r0
 800299a:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800299c:	7b7b      	ldrb	r3, [r7, #13]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b51      	cmp	r3, #81	; 0x51
 80029a2:	d101      	bne.n	80029a8 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	3301      	adds	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d802      	bhi.n	80029ba <ft5336_ReadID+0x4e>
 80029b4:	7bbb      	ldrb	r3, [r7, #14]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0e8      	beq.n	800298c <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80029ba:	7b7b      	ldrb	r3, [r7, #13]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	b29b      	uxth	r3, r3
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 fa45 	bl	8002e64 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 f933 	bl	8002c48 <ft5336_TS_DisableIT>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2102      	movs	r1, #2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fbb7 	bl	8003174 <TS_IO_Read>
 8002a06:	4603      	mov	r3, r0
 8002a08:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b05      	cmp	r3, #5
 8002a1c:	d901      	bls.n	8002a22 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <ft5336_TS_DetectTouch+0x50>)
 8002a28:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8002a2a:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <ft5336_TS_DetectTouch+0x50>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	b2db      	uxtb	r3, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000934 	.word	0x20000934

08002a40 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8002a62:	4b6d      	ldr	r3, [pc, #436]	; (8002c18 <ft5336_TS_GetXY+0x1d8>)
 8002a64:	789a      	ldrb	r2, [r3, #2]
 8002a66:	4b6c      	ldr	r3, [pc, #432]	; (8002c18 <ft5336_TS_GetXY+0x1d8>)
 8002a68:	785b      	ldrb	r3, [r3, #1]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	f080 80cf 	bcs.w	8002c0e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8002a70:	4b69      	ldr	r3, [pc, #420]	; (8002c18 <ft5336_TS_GetXY+0x1d8>)
 8002a72:	789b      	ldrb	r3, [r3, #2]
 8002a74:	2b09      	cmp	r3, #9
 8002a76:	d871      	bhi.n	8002b5c <ft5336_TS_GetXY+0x11c>
 8002a78:	a201      	add	r2, pc, #4	; (adr r2, 8002a80 <ft5336_TS_GetXY+0x40>)
 8002a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7e:	bf00      	nop
 8002a80:	08002aa9 	.word	0x08002aa9
 8002a84:	08002abb 	.word	0x08002abb
 8002a88:	08002acd 	.word	0x08002acd
 8002a8c:	08002adf 	.word	0x08002adf
 8002a90:	08002af1 	.word	0x08002af1
 8002a94:	08002b03 	.word	0x08002b03
 8002a98:	08002b15 	.word	0x08002b15
 8002a9c:	08002b27 	.word	0x08002b27
 8002aa0:	08002b39 	.word	0x08002b39
 8002aa4:	08002b4b 	.word	0x08002b4b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8002aa8:	2304      	movs	r3, #4
 8002aaa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8002aac:	2303      	movs	r3, #3
 8002aae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8002ab0:	2306      	movs	r3, #6
 8002ab2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8002ab4:	2305      	movs	r3, #5
 8002ab6:	753b      	strb	r3, [r7, #20]
      break;
 8002ab8:	e051      	b.n	8002b5e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8002aba:	230a      	movs	r3, #10
 8002abc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8002abe:	2309      	movs	r3, #9
 8002ac0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8002ac2:	230c      	movs	r3, #12
 8002ac4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8002ac6:	230b      	movs	r3, #11
 8002ac8:	753b      	strb	r3, [r7, #20]
      break;
 8002aca:	e048      	b.n	8002b5e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8002acc:	2310      	movs	r3, #16
 8002ace:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8002ad0:	230f      	movs	r3, #15
 8002ad2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8002ad4:	2312      	movs	r3, #18
 8002ad6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8002ad8:	2311      	movs	r3, #17
 8002ada:	753b      	strb	r3, [r7, #20]
      break;
 8002adc:	e03f      	b.n	8002b5e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8002ade:	2316      	movs	r3, #22
 8002ae0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8002ae2:	2315      	movs	r3, #21
 8002ae4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8002ae6:	2318      	movs	r3, #24
 8002ae8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8002aea:	2317      	movs	r3, #23
 8002aec:	753b      	strb	r3, [r7, #20]
      break;
 8002aee:	e036      	b.n	8002b5e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8002af0:	231c      	movs	r3, #28
 8002af2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8002af4:	231b      	movs	r3, #27
 8002af6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8002af8:	231e      	movs	r3, #30
 8002afa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8002afc:	231d      	movs	r3, #29
 8002afe:	753b      	strb	r3, [r7, #20]
      break;
 8002b00:	e02d      	b.n	8002b5e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8002b02:	2322      	movs	r3, #34	; 0x22
 8002b04:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8002b06:	2321      	movs	r3, #33	; 0x21
 8002b08:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8002b0a:	2324      	movs	r3, #36	; 0x24
 8002b0c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8002b0e:	2323      	movs	r3, #35	; 0x23
 8002b10:	753b      	strb	r3, [r7, #20]
      break;
 8002b12:	e024      	b.n	8002b5e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8002b14:	2328      	movs	r3, #40	; 0x28
 8002b16:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8002b18:	2327      	movs	r3, #39	; 0x27
 8002b1a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8002b1c:	232a      	movs	r3, #42	; 0x2a
 8002b1e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8002b20:	2329      	movs	r3, #41	; 0x29
 8002b22:	753b      	strb	r3, [r7, #20]
      break;
 8002b24:	e01b      	b.n	8002b5e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8002b26:	232e      	movs	r3, #46	; 0x2e
 8002b28:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8002b2a:	232d      	movs	r3, #45	; 0x2d
 8002b2c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8002b2e:	2330      	movs	r3, #48	; 0x30
 8002b30:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8002b32:	232f      	movs	r3, #47	; 0x2f
 8002b34:	753b      	strb	r3, [r7, #20]
      break;
 8002b36:	e012      	b.n	8002b5e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8002b38:	2334      	movs	r3, #52	; 0x34
 8002b3a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8002b3c:	2333      	movs	r3, #51	; 0x33
 8002b3e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8002b40:	2336      	movs	r3, #54	; 0x36
 8002b42:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8002b44:	2335      	movs	r3, #53	; 0x35
 8002b46:	753b      	strb	r3, [r7, #20]
      break;
 8002b48:	e009      	b.n	8002b5e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8002b4a:	233a      	movs	r3, #58	; 0x3a
 8002b4c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8002b4e:	2339      	movs	r3, #57	; 0x39
 8002b50:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8002b52:	233c      	movs	r3, #60	; 0x3c
 8002b54:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8002b56:	233b      	movs	r3, #59	; 0x3b
 8002b58:	753b      	strb	r3, [r7, #20]
      break;
 8002b5a:	e000      	b.n	8002b5e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8002b5c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8002b5e:	89fb      	ldrh	r3, [r7, #14]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	7dfa      	ldrb	r2, [r7, #23]
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fb04 	bl	8003174 <TS_IO_Read>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8002b70:	7cfb      	ldrb	r3, [r7, #19]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	4b29      	ldr	r3, [pc, #164]	; (8002c1c <ft5336_TS_GetXY+0x1dc>)
 8002b78:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8002b7a:	89fb      	ldrh	r3, [r7, #14]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	7dba      	ldrb	r2, [r7, #22]
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 faf6 	bl	8003174 <TS_IO_Read>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b96:	b21a      	sxth	r2, r3
 8002b98:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <ft5336_TS_GetXY+0x1dc>)
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b21b      	sxth	r3, r3
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	b21b      	sxth	r3, r3
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <ft5336_TS_GetXY+0x1dc>)
 8002ba6:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8002ba8:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <ft5336_TS_GetXY+0x1dc>)
 8002baa:	881a      	ldrh	r2, [r3, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8002bb0:	89fb      	ldrh	r3, [r7, #14]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	7d7a      	ldrb	r2, [r7, #21]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fadb 	bl	8003174 <TS_IO_Read>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8002bc2:	7cfb      	ldrb	r3, [r7, #19]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <ft5336_TS_GetXY+0x1dc>)
 8002bca:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8002bcc:	89fb      	ldrh	r3, [r7, #14]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	7d3a      	ldrb	r2, [r7, #20]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 facd 	bl	8003174 <TS_IO_Read>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002bde:	7cfb      	ldrb	r3, [r7, #19]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002be8:	b21a      	sxth	r2, r3
 8002bea:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <ft5336_TS_GetXY+0x1dc>)
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	b21b      	sxth	r3, r3
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	b21b      	sxth	r3, r3
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <ft5336_TS_GetXY+0x1dc>)
 8002bf8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8002bfa:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <ft5336_TS_GetXY+0x1dc>)
 8002bfc:	881a      	ldrh	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8002c02:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <ft5336_TS_GetXY+0x1d8>)
 8002c04:	789b      	ldrb	r3, [r3, #2]
 8002c06:	3301      	adds	r3, #1
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <ft5336_TS_GetXY+0x1d8>)
 8002c0c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8002c0e:	bf00      	nop
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000934 	.word	0x20000934
 8002c1c:	20000938 	.word	0x20000938

08002c20 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	7bfa      	ldrb	r2, [r7, #15]
 8002c38:	21a4      	movs	r1, #164	; 0xa4
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fa80 	bl	8003140 <TS_IO_Write>
}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	21a4      	movs	r1, #164	; 0xa4
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fa6c 	bl	8003140 <TS_IO_Write>
}
 8002c68:	bf00      	nop
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	6039      	str	r1, [r7, #0]
 8002ca8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fa5d 	bl	8003174 <TS_IO_Read>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	601a      	str	r2, [r3, #0]
}
 8002cc8:	bf00      	nop
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	4603      	mov	r3, r0
 8002cde:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8002cf0:	4b4d      	ldr	r3, [pc, #308]	; (8002e28 <ft5336_TS_GetTouchInfo+0x158>)
 8002cf2:	785b      	ldrb	r3, [r3, #1]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	f080 8090 	bcs.w	8002e1e <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b09      	cmp	r3, #9
 8002d02:	d85d      	bhi.n	8002dc0 <ft5336_TS_GetTouchInfo+0xf0>
 8002d04:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <ft5336_TS_GetTouchInfo+0x3c>)
 8002d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0a:	bf00      	nop
 8002d0c:	08002d35 	.word	0x08002d35
 8002d10:	08002d43 	.word	0x08002d43
 8002d14:	08002d51 	.word	0x08002d51
 8002d18:	08002d5f 	.word	0x08002d5f
 8002d1c:	08002d6d 	.word	0x08002d6d
 8002d20:	08002d7b 	.word	0x08002d7b
 8002d24:	08002d89 	.word	0x08002d89
 8002d28:	08002d97 	.word	0x08002d97
 8002d2c:	08002da5 	.word	0x08002da5
 8002d30:	08002db3 	.word	0x08002db3
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8002d34:	2303      	movs	r3, #3
 8002d36:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8002d38:	2307      	movs	r3, #7
 8002d3a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8002d3c:	2308      	movs	r3, #8
 8002d3e:	757b      	strb	r3, [r7, #21]
      break;
 8002d40:	e03f      	b.n	8002dc2 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8002d42:	2309      	movs	r3, #9
 8002d44:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8002d46:	230d      	movs	r3, #13
 8002d48:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8002d4a:	230e      	movs	r3, #14
 8002d4c:	757b      	strb	r3, [r7, #21]
      break;
 8002d4e:	e038      	b.n	8002dc2 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8002d50:	230f      	movs	r3, #15
 8002d52:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8002d54:	2313      	movs	r3, #19
 8002d56:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8002d58:	2314      	movs	r3, #20
 8002d5a:	757b      	strb	r3, [r7, #21]
      break;
 8002d5c:	e031      	b.n	8002dc2 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8002d5e:	2315      	movs	r3, #21
 8002d60:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8002d62:	2319      	movs	r3, #25
 8002d64:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8002d66:	231a      	movs	r3, #26
 8002d68:	757b      	strb	r3, [r7, #21]
      break;
 8002d6a:	e02a      	b.n	8002dc2 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8002d6c:	231b      	movs	r3, #27
 8002d6e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8002d70:	231f      	movs	r3, #31
 8002d72:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8002d74:	2320      	movs	r3, #32
 8002d76:	757b      	strb	r3, [r7, #21]
      break;
 8002d78:	e023      	b.n	8002dc2 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8002d7a:	2321      	movs	r3, #33	; 0x21
 8002d7c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8002d7e:	2325      	movs	r3, #37	; 0x25
 8002d80:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8002d82:	2326      	movs	r3, #38	; 0x26
 8002d84:	757b      	strb	r3, [r7, #21]
      break;
 8002d86:	e01c      	b.n	8002dc2 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8002d88:	2327      	movs	r3, #39	; 0x27
 8002d8a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8002d8c:	232b      	movs	r3, #43	; 0x2b
 8002d8e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8002d90:	232c      	movs	r3, #44	; 0x2c
 8002d92:	757b      	strb	r3, [r7, #21]
      break;
 8002d94:	e015      	b.n	8002dc2 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8002d96:	232d      	movs	r3, #45	; 0x2d
 8002d98:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8002d9a:	2331      	movs	r3, #49	; 0x31
 8002d9c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8002d9e:	2332      	movs	r3, #50	; 0x32
 8002da0:	757b      	strb	r3, [r7, #21]
      break;
 8002da2:	e00e      	b.n	8002dc2 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8002da4:	2333      	movs	r3, #51	; 0x33
 8002da6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8002da8:	2337      	movs	r3, #55	; 0x37
 8002daa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8002dac:	2338      	movs	r3, #56	; 0x38
 8002dae:	757b      	strb	r3, [r7, #21]
      break;
 8002db0:	e007      	b.n	8002dc2 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8002db2:	2339      	movs	r3, #57	; 0x39
 8002db4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8002db6:	233d      	movs	r3, #61	; 0x3d
 8002db8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8002dba:	233e      	movs	r3, #62	; 0x3e
 8002dbc:	757b      	strb	r3, [r7, #21]
      break;
 8002dbe:	e000      	b.n	8002dc2 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8002dc0:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8002dc2:	89fb      	ldrh	r3, [r7, #14]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	7dfa      	ldrb	r2, [r7, #23]
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 f9d2 	bl	8003174 <TS_IO_Read>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8002dd4:	7d3b      	ldrb	r3, [r7, #20]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	119b      	asrs	r3, r3, #6
 8002dda:	f003 0203 	and.w	r2, r3, #3
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8002de2:	89fb      	ldrh	r3, [r7, #14]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	7dba      	ldrb	r2, [r7, #22]
 8002de8:	4611      	mov	r1, r2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 f9c2 	bl	8003174 <TS_IO_Read>
 8002df0:	4603      	mov	r3, r0
 8002df2:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8002df4:	7d3b      	ldrb	r3, [r7, #20]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8002dfe:	89fb      	ldrh	r3, [r7, #14]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	7d7a      	ldrb	r2, [r7, #21]
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f9b4 	bl	8003174 <TS_IO_Read>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8002e10:	7d3b      	ldrb	r3, [r7, #20]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	111b      	asrs	r3, r3, #4
 8002e16:	f003 0204 	and.w	r2, r3, #4
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8002e1e:	bf00      	nop
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000934 	.word	0x20000934

08002e2c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000934 	.word	0x20000934

08002e44 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8002e48:	f7ff fff0 	bl	8002e2c <ft5336_Get_I2C_InitializedStatus>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d104      	bne.n	8002e5c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8002e52:	f000 f96b 	bl	800312c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8002e56:	4b02      	ldr	r3, [pc, #8]	; (8002e60 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000934 	.word	0x20000934

08002e64 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8002e72:	68fb      	ldr	r3, [r7, #12]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08c      	sub	sp, #48	; 0x30
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a51      	ldr	r2, [pc, #324]	; (8002fd0 <I2Cx_MspInit+0x150>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d14d      	bne.n	8002f2c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002e90:	4b50      	ldr	r3, [pc, #320]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	4a4f      	ldr	r2, [pc, #316]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9c:	4b4d      	ldr	r3, [pc, #308]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002eac:	2312      	movs	r3, #18
 8002eae:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002eb8:	2304      	movs	r3, #4
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ebc:	f107 031c 	add.w	r3, r7, #28
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4845      	ldr	r0, [pc, #276]	; (8002fd8 <I2Cx_MspInit+0x158>)
 8002ec4:	f002 f8b6 	bl	8005034 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ece:	f107 031c 	add.w	r3, r7, #28
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4840      	ldr	r0, [pc, #256]	; (8002fd8 <I2Cx_MspInit+0x158>)
 8002ed6:	f002 f8ad 	bl	8005034 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002eda:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	4a3d      	ldr	r2, [pc, #244]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002ee0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee6:	4b3b      	ldr	r3, [pc, #236]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002ef2:	4b38      	ldr	r3, [pc, #224]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	4a37      	ldr	r2, [pc, #220]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002ef8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002efc:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002efe:	4b35      	ldr	r3, [pc, #212]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4a34      	ldr	r2, [pc, #208]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002f04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f08:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	210f      	movs	r1, #15
 8002f0e:	2048      	movs	r0, #72	; 0x48
 8002f10:	f001 f9d8 	bl	80042c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002f14:	2048      	movs	r0, #72	; 0x48
 8002f16:	f001 f9f1 	bl	80042fc <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	210f      	movs	r1, #15
 8002f1e:	2049      	movs	r0, #73	; 0x49
 8002f20:	f001 f9d0 	bl	80042c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002f24:	2049      	movs	r0, #73	; 0x49
 8002f26:	f001 f9e9 	bl	80042fc <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002f2a:	e04d      	b.n	8002fc8 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002f2c:	4b29      	ldr	r3, [pc, #164]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	4a28      	ldr	r2, [pc, #160]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002f32:	f043 0302 	orr.w	r3, r3, #2
 8002f36:	6313      	str	r3, [r2, #48]	; 0x30
 8002f38:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f48:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002f4a:	2312      	movs	r3, #18
 8002f4c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002f52:	2302      	movs	r3, #2
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002f56:	2304      	movs	r3, #4
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f5a:	f107 031c 	add.w	r3, r7, #28
 8002f5e:	4619      	mov	r1, r3
 8002f60:	481e      	ldr	r0, [pc, #120]	; (8002fdc <I2Cx_MspInit+0x15c>)
 8002f62:	f002 f867 	bl	8005034 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f6c:	f107 031c 	add.w	r3, r7, #28
 8002f70:	4619      	mov	r1, r3
 8002f72:	481a      	ldr	r0, [pc, #104]	; (8002fdc <I2Cx_MspInit+0x15c>)
 8002f74:	f002 f85e 	bl	8005034 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002f78:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	4a15      	ldr	r2, [pc, #84]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002f7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f82:	6413      	str	r3, [r2, #64]	; 0x40
 8002f84:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002f90:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	4a0f      	ldr	r2, [pc, #60]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002f96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f9a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	4a0c      	ldr	r2, [pc, #48]	; (8002fd4 <I2Cx_MspInit+0x154>)
 8002fa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fa6:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	210f      	movs	r1, #15
 8002fac:	201f      	movs	r0, #31
 8002fae:	f001 f989 	bl	80042c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002fb2:	201f      	movs	r0, #31
 8002fb4:	f001 f9a2 	bl	80042fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002fb8:	2200      	movs	r2, #0
 8002fba:	210f      	movs	r1, #15
 8002fbc:	2020      	movs	r0, #32
 8002fbe:	f001 f981 	bl	80042c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002fc2:	2020      	movs	r0, #32
 8002fc4:	f001 f99a 	bl	80042fc <HAL_NVIC_EnableIRQ>
}
 8002fc8:	bf00      	nop
 8002fca:	3730      	adds	r7, #48	; 0x30
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	2000093c 	.word	0x2000093c
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40021c00 	.word	0x40021c00
 8002fdc:	40020400 	.word	0x40020400

08002fe0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f004 fa51 	bl	8007490 <HAL_I2C_GetState>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d125      	bne.n	8003040 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a14      	ldr	r2, [pc, #80]	; (8003048 <I2Cx_Init+0x68>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d103      	bne.n	8003004 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a13      	ldr	r2, [pc, #76]	; (800304c <I2Cx_Init+0x6c>)
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	e002      	b.n	800300a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a12      	ldr	r2, [pc, #72]	; (8003050 <I2Cx_Init+0x70>)
 8003008:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a11      	ldr	r2, [pc, #68]	; (8003054 <I2Cx_Init+0x74>)
 800300e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff ff23 	bl	8002e80 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f003 ff3a 	bl	8006eb4 <HAL_I2C_Init>
  }
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	2000093c 	.word	0x2000093c
 800304c:	40005c00 	.word	0x40005c00
 8003050:	40005400 	.word	0x40005400
 8003054:	40912732 	.word	0x40912732

08003058 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	; 0x28
 800305c:	af04      	add	r7, sp, #16
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	4608      	mov	r0, r1
 8003062:	4611      	mov	r1, r2
 8003064:	461a      	mov	r2, r3
 8003066:	4603      	mov	r3, r0
 8003068:	72fb      	strb	r3, [r7, #11]
 800306a:	460b      	mov	r3, r1
 800306c:	813b      	strh	r3, [r7, #8]
 800306e:	4613      	mov	r3, r2
 8003070:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003076:	7afb      	ldrb	r3, [r7, #11]
 8003078:	b299      	uxth	r1, r3
 800307a:	88f8      	ldrh	r0, [r7, #6]
 800307c:	893a      	ldrh	r2, [r7, #8]
 800307e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003082:	9302      	str	r3, [sp, #8]
 8003084:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003086:	9301      	str	r3, [sp, #4]
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	4603      	mov	r3, r0
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f004 f8e4 	bl	800725c <HAL_I2C_Mem_Read>
 8003094:	4603      	mov	r3, r0
 8003096:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003098:	7dfb      	ldrb	r3, [r7, #23]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d004      	beq.n	80030a8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800309e:	7afb      	ldrb	r3, [r7, #11]
 80030a0:	4619      	mov	r1, r3
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f832 	bl	800310c <I2Cx_Error>
  }
  return status;    
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b08a      	sub	sp, #40	; 0x28
 80030b6:	af04      	add	r7, sp, #16
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	4608      	mov	r0, r1
 80030bc:	4611      	mov	r1, r2
 80030be:	461a      	mov	r2, r3
 80030c0:	4603      	mov	r3, r0
 80030c2:	72fb      	strb	r3, [r7, #11]
 80030c4:	460b      	mov	r3, r1
 80030c6:	813b      	strh	r3, [r7, #8]
 80030c8:	4613      	mov	r3, r2
 80030ca:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80030d0:	7afb      	ldrb	r3, [r7, #11]
 80030d2:	b299      	uxth	r1, r3
 80030d4:	88f8      	ldrh	r0, [r7, #6]
 80030d6:	893a      	ldrh	r2, [r7, #8]
 80030d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030dc:	9302      	str	r3, [sp, #8]
 80030de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	4603      	mov	r3, r0
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f003 ffa3 	bl	8007034 <HAL_I2C_Mem_Write>
 80030ee:	4603      	mov	r3, r0
 80030f0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80030f2:	7dfb      	ldrb	r3, [r7, #23]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d004      	beq.n	8003102 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80030f8:	7afb      	ldrb	r3, [r7, #11]
 80030fa:	4619      	mov	r1, r3
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f805 	bl	800310c <I2Cx_Error>
  }
  return status;
 8003102:	7dfb      	ldrb	r3, [r7, #23]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f003 ff5b 	bl	8006fd4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff ff5e 	bl	8002fe0 <I2Cx_Init>
}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003130:	4802      	ldr	r0, [pc, #8]	; (800313c <TS_IO_Init+0x10>)
 8003132:	f7ff ff55 	bl	8002fe0 <I2Cx_Init>
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	2000093c 	.word	0x2000093c

08003140 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af02      	add	r7, sp, #8
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
 800314a:	460b      	mov	r3, r1
 800314c:	71bb      	strb	r3, [r7, #6]
 800314e:	4613      	mov	r3, r2
 8003150:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003152:	79bb      	ldrb	r3, [r7, #6]
 8003154:	b29a      	uxth	r2, r3
 8003156:	79f9      	ldrb	r1, [r7, #7]
 8003158:	2301      	movs	r3, #1
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	1d7b      	adds	r3, r7, #5
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2301      	movs	r3, #1
 8003162:	4803      	ldr	r0, [pc, #12]	; (8003170 <TS_IO_Write+0x30>)
 8003164:	f7ff ffa5 	bl	80030b2 <I2Cx_WriteMultiple>
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	2000093c 	.word	0x2000093c

08003174 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af02      	add	r7, sp, #8
 800317a:	4603      	mov	r3, r0
 800317c:	460a      	mov	r2, r1
 800317e:	71fb      	strb	r3, [r7, #7]
 8003180:	4613      	mov	r3, r2
 8003182:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003184:	2300      	movs	r3, #0
 8003186:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003188:	79bb      	ldrb	r3, [r7, #6]
 800318a:	b29a      	uxth	r2, r3
 800318c:	79f9      	ldrb	r1, [r7, #7]
 800318e:	2301      	movs	r3, #1
 8003190:	9301      	str	r3, [sp, #4]
 8003192:	f107 030f 	add.w	r3, r7, #15
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	2301      	movs	r3, #1
 800319a:	4804      	ldr	r0, [pc, #16]	; (80031ac <TS_IO_Read+0x38>)
 800319c:	f7ff ff5c 	bl	8003058 <I2Cx_ReadMultiple>

  return read_value;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	2000093c 	.word	0x2000093c

080031b0 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fd15 	bl	8003be8 <HAL_Delay>
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 80031ce:	4b28      	ldr	r3, [pc, #160]	; (8003270 <BSP_QSPI_Init+0xa8>)
 80031d0:	4a28      	ldr	r2, [pc, #160]	; (8003274 <BSP_QSPI_Init+0xac>)
 80031d2:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80031d4:	4826      	ldr	r0, [pc, #152]	; (8003270 <BSP_QSPI_Init+0xa8>)
 80031d6:	f005 f93d 	bl	8008454 <HAL_QSPI_DeInit>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e041      	b.n	8003268 <BSP_QSPI_Init+0xa0>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 80031e4:	2100      	movs	r1, #0
 80031e6:	4822      	ldr	r0, [pc, #136]	; (8003270 <BSP_QSPI_Init+0xa8>)
 80031e8:	f000 f878 	bl	80032dc <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 80031ec:	4b20      	ldr	r3, [pc, #128]	; (8003270 <BSP_QSPI_Init+0xa8>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 80031f2:	4b1f      	ldr	r3, [pc, #124]	; (8003270 <BSP_QSPI_Init+0xa8>)
 80031f4:	2204      	movs	r2, #4
 80031f6:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80031f8:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <BSP_QSPI_Init+0xa8>)
 80031fa:	2210      	movs	r2, #16
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003202:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800320c:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 800320e:	fab3 f383 	clz	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	461a      	mov	r2, r3
 8003218:	4b15      	ldr	r3, [pc, #84]	; (8003270 <BSP_QSPI_Init+0xa8>)
 800321a:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 800321c:	4b14      	ldr	r3, [pc, #80]	; (8003270 <BSP_QSPI_Init+0xa8>)
 800321e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8003222:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8003224:	4b12      	ldr	r3, [pc, #72]	; (8003270 <BSP_QSPI_Init+0xa8>)
 8003226:	2200      	movs	r2, #0
 8003228:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 800322a:	4b11      	ldr	r3, [pc, #68]	; (8003270 <BSP_QSPI_Init+0xa8>)
 800322c:	2200      	movs	r2, #0
 800322e:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8003230:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <BSP_QSPI_Init+0xa8>)
 8003232:	2200      	movs	r2, #0
 8003234:	621a      	str	r2, [r3, #32]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8003236:	480e      	ldr	r0, [pc, #56]	; (8003270 <BSP_QSPI_Init+0xa8>)
 8003238:	f005 f882 	bl	8008340 <HAL_QSPI_Init>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e010      	b.n	8003268 <BSP_QSPI_Init+0xa0>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8003246:	480a      	ldr	r0, [pc, #40]	; (8003270 <BSP_QSPI_Init+0xa8>)
 8003248:	f000 f908 	bl	800345c <QSPI_ResetMemory>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 8003252:	2304      	movs	r3, #4
 8003254:	e008      	b.n	8003268 <BSP_QSPI_Init+0xa0>
  }
 
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8003256:	4806      	ldr	r0, [pc, #24]	; (8003270 <BSP_QSPI_Init+0xa8>)
 8003258:	f000 f942 	bl	80034e0 <QSPI_DummyCyclesCfg>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 8003262:	2304      	movs	r3, #4
 8003264:	e000      	b.n	8003268 <BSP_QSPI_Init+0xa0>
  }
  
  return QSPI_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	2000d110 	.word	0x2000d110
 8003274:	a0001000 	.word	0xa0001000

08003278 <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_EnableMemoryMappedMode(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b090      	sub	sp, #64	; 0x40
 800327c:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800327e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003282:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8003284:	23eb      	movs	r3, #235	; 0xeb
 8003286:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003288:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 800328e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003292:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003294:	2300      	movs	r3, #0
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003298:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800329c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 800329e:	230a      	movs	r3, #10
 80032a0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80032a2:	2300      	movs	r3, #0
 80032a4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80032a6:	2300      	movs	r3, #0
 80032a8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80032aa:	2300      	movs	r3, #0
 80032ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	603b      	str	r3, [r7, #0]
  
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80032b6:	463a      	mov	r2, r7
 80032b8:	f107 0308 	add.w	r3, r7, #8
 80032bc:	4619      	mov	r1, r3
 80032be:	4806      	ldr	r0, [pc, #24]	; (80032d8 <BSP_QSPI_EnableMemoryMappedMode+0x60>)
 80032c0:	f005 fb06 	bl	80088d0 <HAL_QSPI_MemoryMapped>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <BSP_QSPI_EnableMemoryMappedMode+0x56>
  {
    return QSPI_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <BSP_QSPI_EnableMemoryMappedMode+0x58>
  }

  return QSPI_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3740      	adds	r7, #64	; 0x40
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	2000d110 	.word	0x2000d110

080032dc <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08e      	sub	sp, #56	; 0x38
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 80032e6:	4b59      	ldr	r3, [pc, #356]	; (800344c <BSP_QSPI_MspInit+0x170>)
 80032e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ea:	4a58      	ldr	r2, [pc, #352]	; (800344c <BSP_QSPI_MspInit+0x170>)
 80032ec:	f043 0302 	orr.w	r3, r3, #2
 80032f0:	6393      	str	r3, [r2, #56]	; 0x38
 80032f2:	4b56      	ldr	r3, [pc, #344]	; (800344c <BSP_QSPI_MspInit+0x170>)
 80032f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	623b      	str	r3, [r7, #32]
 80032fc:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 80032fe:	4b53      	ldr	r3, [pc, #332]	; (800344c <BSP_QSPI_MspInit+0x170>)
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	4a52      	ldr	r2, [pc, #328]	; (800344c <BSP_QSPI_MspInit+0x170>)
 8003304:	f043 0302 	orr.w	r3, r3, #2
 8003308:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 800330a:	4b50      	ldr	r3, [pc, #320]	; (800344c <BSP_QSPI_MspInit+0x170>)
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	4a4f      	ldr	r2, [pc, #316]	; (800344c <BSP_QSPI_MspInit+0x170>)
 8003310:	f023 0302 	bic.w	r3, r3, #2
 8003314:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8003316:	4b4d      	ldr	r3, [pc, #308]	; (800344c <BSP_QSPI_MspInit+0x170>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	4a4c      	ldr	r2, [pc, #304]	; (800344c <BSP_QSPI_MspInit+0x170>)
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	6313      	str	r3, [r2, #48]	; 0x30
 8003322:	4b4a      	ldr	r3, [pc, #296]	; (800344c <BSP_QSPI_MspInit+0x170>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	61fb      	str	r3, [r7, #28]
 800332c:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 800332e:	4b47      	ldr	r3, [pc, #284]	; (800344c <BSP_QSPI_MspInit+0x170>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	4a46      	ldr	r2, [pc, #280]	; (800344c <BSP_QSPI_MspInit+0x170>)
 8003334:	f043 0302 	orr.w	r3, r3, #2
 8003338:	6313      	str	r3, [r2, #48]	; 0x30
 800333a:	4b44      	ldr	r3, [pc, #272]	; (800344c <BSP_QSPI_MspInit+0x170>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8003346:	4b41      	ldr	r3, [pc, #260]	; (800344c <BSP_QSPI_MspInit+0x170>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	4a40      	ldr	r2, [pc, #256]	; (800344c <BSP_QSPI_MspInit+0x170>)
 800334c:	f043 0308 	orr.w	r3, r3, #8
 8003350:	6313      	str	r3, [r2, #48]	; 0x30
 8003352:	4b3e      	ldr	r3, [pc, #248]	; (800344c <BSP_QSPI_MspInit+0x170>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 800335e:	4b3b      	ldr	r3, [pc, #236]	; (800344c <BSP_QSPI_MspInit+0x170>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	4a3a      	ldr	r2, [pc, #232]	; (800344c <BSP_QSPI_MspInit+0x170>)
 8003364:	f043 0308 	orr.w	r3, r3, #8
 8003368:	6313      	str	r3, [r2, #48]	; 0x30
 800336a:	4b38      	ldr	r3, [pc, #224]	; (800344c <BSP_QSPI_MspInit+0x170>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8003376:	4b35      	ldr	r3, [pc, #212]	; (800344c <BSP_QSPI_MspInit+0x170>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	4a34      	ldr	r2, [pc, #208]	; (800344c <BSP_QSPI_MspInit+0x170>)
 800337c:	f043 0310 	orr.w	r3, r3, #16
 8003380:	6313      	str	r3, [r2, #48]	; 0x30
 8003382:	4b32      	ldr	r3, [pc, #200]	; (800344c <BSP_QSPI_MspInit+0x170>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 800338e:	4b2f      	ldr	r3, [pc, #188]	; (800344c <BSP_QSPI_MspInit+0x170>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a2e      	ldr	r2, [pc, #184]	; (800344c <BSP_QSPI_MspInit+0x170>)
 8003394:	f043 0308 	orr.w	r3, r3, #8
 8003398:	6313      	str	r3, [r2, #48]	; 0x30
 800339a:	4b2c      	ldr	r3, [pc, #176]	; (800344c <BSP_QSPI_MspInit+0x170>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 80033a6:	2340      	movs	r3, #64	; 0x40
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033aa:	2302      	movs	r3, #2
 80033ac:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80033ae:	2301      	movs	r3, #1
 80033b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80033b2:	2303      	movs	r3, #3
 80033b4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80033b6:	230a      	movs	r3, #10
 80033b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80033ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033be:	4619      	mov	r1, r3
 80033c0:	4823      	ldr	r0, [pc, #140]	; (8003450 <BSP_QSPI_MspInit+0x174>)
 80033c2:	f001 fe37 	bl	8005034 <HAL_GPIO_Init>

  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80033c6:	2304      	movs	r3, #4
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80033ce:	2309      	movs	r3, #9
 80033d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80033d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d6:	4619      	mov	r1, r3
 80033d8:	481d      	ldr	r0, [pc, #116]	; (8003450 <BSP_QSPI_MspInit+0x174>)
 80033da:	f001 fe2b 	bl	8005034 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 80033de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80033e4:	2309      	movs	r3, #9
 80033e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80033e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ec:	4619      	mov	r1, r3
 80033ee:	4819      	ldr	r0, [pc, #100]	; (8003454 <BSP_QSPI_MspInit+0x178>)
 80033f0:	f001 fe20 	bl	8005034 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 80033f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80033fa:	2309      	movs	r3, #9
 80033fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 80033fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003402:	4619      	mov	r1, r3
 8003404:	4813      	ldr	r0, [pc, #76]	; (8003454 <BSP_QSPI_MspInit+0x178>)
 8003406:	f001 fe15 	bl	8005034 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 800340a:	2304      	movs	r3, #4
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800340e:	2309      	movs	r3, #9
 8003410:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8003412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003416:	4619      	mov	r1, r3
 8003418:	480f      	ldr	r0, [pc, #60]	; (8003458 <BSP_QSPI_MspInit+0x17c>)
 800341a:	f001 fe0b 	bl	8005034 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 800341e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003424:	2309      	movs	r3, #9
 8003426:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8003428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800342c:	4619      	mov	r1, r3
 800342e:	4809      	ldr	r0, [pc, #36]	; (8003454 <BSP_QSPI_MspInit+0x178>)
 8003430:	f001 fe00 	bl	8005034 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8003434:	2200      	movs	r2, #0
 8003436:	210f      	movs	r1, #15
 8003438:	205c      	movs	r0, #92	; 0x5c
 800343a:	f000 ff43 	bl	80042c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800343e:	205c      	movs	r0, #92	; 0x5c
 8003440:	f000 ff5c 	bl	80042fc <HAL_NVIC_EnableIRQ>
}
 8003444:	bf00      	nop
 8003446:	3738      	adds	r7, #56	; 0x38
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40023800 	.word	0x40023800
 8003450:	40020400 	.word	0x40020400
 8003454:	40020c00 	.word	0x40020c00
 8003458:	40021000 	.word	0x40021000

0800345c <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b090      	sub	sp, #64	; 0x40
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003464:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003468:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 800346a:	2366      	movs	r3, #102	; 0x66
 800346c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800346e:	2300      	movs	r3, #0
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003472:	2300      	movs	r3, #0
 8003474:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8003476:	2300      	movs	r3, #0
 8003478:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800347e:	2300      	movs	r3, #0
 8003480:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003482:	2300      	movs	r3, #0
 8003484:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003486:	2300      	movs	r3, #0
 8003488:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800348a:	f107 0308 	add.w	r3, r7, #8
 800348e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003492:	4619      	mov	r1, r3
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f005 f80d 	bl	80084b4 <HAL_QSPI_Command>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e019      	b.n	80034d8 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 80034a4:	2399      	movs	r3, #153	; 0x99
 80034a6:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034a8:	f107 0308 	add.w	r3, r7, #8
 80034ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b0:	4619      	mov	r1, r3
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f004 fffe 	bl	80084b4 <HAL_QSPI_Command>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e00a      	b.n	80034d8 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80034c2:	f241 3188 	movw	r1, #5000	; 0x1388
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f8c7 	bl	800365a <QSPI_AutoPollingMemReady>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3740      	adds	r7, #64	; 0x40
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b094      	sub	sp, #80	; 0x50
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80034e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80034ee:	2385      	movs	r3, #133	; 0x85
 80034f0:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80034f2:	2300      	movs	r3, #0
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80034fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034fe:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003504:	2301      	movs	r3, #1
 8003506:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003508:	2300      	movs	r3, #0
 800350a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800350c:	2300      	movs	r3, #0
 800350e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003510:	2300      	movs	r3, #0
 8003512:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003514:	f107 0310 	add.w	r3, r7, #16
 8003518:	f241 3288 	movw	r2, #5000	; 0x1388
 800351c:	4619      	mov	r1, r3
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f004 ffc8 	bl	80084b4 <HAL_QSPI_Command>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e048      	b.n	80035c0 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800352e:	f107 030f 	add.w	r3, r7, #15
 8003532:	f241 3288 	movw	r2, #5000	; 0x1388
 8003536:	4619      	mov	r1, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f005 f8b0 	bl	800869e <HAL_QSPI_Receive>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e03b      	b.n	80035c0 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f83d 	bl	80035c8 <QSPI_WriteEnable>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e033      	b.n	80035c0 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */  
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8003558:	2381      	movs	r3, #129	; 0x81
 800355a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	b25b      	sxtb	r3, r3
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	b25a      	sxtb	r2, r3
 8003566:	23f0      	movs	r3, #240	; 0xf0
 8003568:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800356c:	fa93 f3a3 	rbit	r3, r3
 8003570:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	b2db      	uxtb	r3, r3
 800357a:	4619      	mov	r1, r3
 800357c:	230a      	movs	r3, #10
 800357e:	408b      	lsls	r3, r1
 8003580:	b25b      	sxtb	r3, r3
 8003582:	4313      	orrs	r3, r2
 8003584:	b25b      	sxtb	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	73fb      	strb	r3, [r7, #15]
      
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800358a:	f107 0310 	add.w	r3, r7, #16
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4619      	mov	r1, r3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f004 ff8d 	bl	80084b4 <HAL_QSPI_Command>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <QSPI_DummyCyclesCfg+0xc4>
  {
    return QSPI_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e00d      	b.n	80035c0 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035a4:	f107 030f 	add.w	r3, r7, #15
 80035a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ac:	4619      	mov	r1, r3
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f004 ffe0 	bl	8008574 <HAL_QSPI_Transmit>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <QSPI_DummyCyclesCfg+0xde>
  {
    return QSPI_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <QSPI_DummyCyclesCfg+0xe0>
  }
  
  return QSPI_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3750      	adds	r7, #80	; 0x50
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b096      	sub	sp, #88	; 0x58
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80035d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80035d6:	2306      	movs	r3, #6
 80035d8:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80035da:	2300      	movs	r3, #0
 80035dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80035de:	2300      	movs	r3, #0
 80035e0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80035e2:	2300      	movs	r3, #0
 80035e4:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80035ea:	2300      	movs	r3, #0
 80035ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80035ee:	2300      	movs	r3, #0
 80035f0:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80035f2:	2300      	movs	r3, #0
 80035f4:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035f6:	f107 0320 	add.w	r3, r7, #32
 80035fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fe:	4619      	mov	r1, r3
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f004 ff57 	bl	80084b4 <HAL_QSPI_Command>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e020      	b.n	8003652 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = N25Q128A_SR_WREN;
 8003610:	2302      	movs	r3, #2
 8003612:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8003614:	2302      	movs	r3, #2
 8003616:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003618:	2300      	movs	r3, #0
 800361a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800361c:	2301      	movs	r3, #1
 800361e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003620:	2310      	movs	r3, #16
 8003622:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003624:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003628:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 800362a:	2305      	movs	r3, #5
 800362c:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800362e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003632:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003634:	f107 0208 	add.w	r2, r7, #8
 8003638:	f107 0120 	add.w	r1, r7, #32
 800363c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f005 f8cc 	bl	80087de <HAL_QSPI_AutoPolling>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3758      	adds	r7, #88	; 0x58
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b096      	sub	sp, #88	; 0x58
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003668:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800366a:	2305      	movs	r3, #5
 800366c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800366e:	2300      	movs	r3, #0
 8003670:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003672:	2300      	movs	r3, #0
 8003674:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003676:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800367a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003680:	2300      	movs	r3, #0
 8003682:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003684:	2300      	movs	r3, #0
 8003686:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003688:	2300      	movs	r3, #0
 800368a:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8003690:	2301      	movs	r3, #1
 8003692:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003694:	2300      	movs	r3, #0
 8003696:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003698:	2301      	movs	r3, #1
 800369a:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800369c:	2310      	movs	r3, #16
 800369e:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80036a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036a4:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80036a6:	f107 0208 	add.w	r2, r7, #8
 80036aa:	f107 0120 	add.w	r1, r7, #32
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f005 f894 	bl	80087de <HAL_QSPI_AutoPolling>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3758      	adds	r7, #88	; 0x58
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	460a      	mov	r2, r1
 80036d6:	80fb      	strh	r3, [r7, #6]
 80036d8:	4613      	mov	r3, r2
 80036da:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80036e0:	4a14      	ldr	r2, [pc, #80]	; (8003734 <BSP_TS_Init+0x68>)
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80036e6:	4a14      	ldr	r2, [pc, #80]	; (8003738 <BSP_TS_Init+0x6c>)
 80036e8:	88bb      	ldrh	r3, [r7, #4]
 80036ea:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80036ec:	4b13      	ldr	r3, [pc, #76]	; (800373c <BSP_TS_Init+0x70>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2070      	movs	r0, #112	; 0x70
 80036f2:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80036f4:	4b11      	ldr	r3, [pc, #68]	; (800373c <BSP_TS_Init+0x70>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2070      	movs	r0, #112	; 0x70
 80036fa:	4798      	blx	r3
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b51      	cmp	r3, #81	; 0x51
 8003700:	d111      	bne.n	8003726 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003702:	4b0f      	ldr	r3, [pc, #60]	; (8003740 <BSP_TS_Init+0x74>)
 8003704:	4a0d      	ldr	r2, [pc, #52]	; (800373c <BSP_TS_Init+0x70>)
 8003706:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003708:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <BSP_TS_Init+0x78>)
 800370a:	2270      	movs	r2, #112	; 0x70
 800370c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800370e:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <BSP_TS_Init+0x7c>)
 8003710:	2208      	movs	r2, #8
 8003712:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <BSP_TS_Init+0x74>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <BSP_TS_Init+0x78>)
 800371c:	7812      	ldrb	r2, [r2, #0]
 800371e:	b292      	uxth	r2, r2
 8003720:	4610      	mov	r0, r2
 8003722:	4798      	blx	r3
 8003724:	e001      	b.n	800372a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003726:	2303      	movs	r3, #3
 8003728:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800372a:	7bfb      	ldrb	r3, [r7, #15]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	2000098c 	.word	0x2000098c
 8003738:	2000098e 	.word	0x2000098e
 800373c:	20000004 	.word	0x20000004
 8003740:	20000988 	.word	0x20000988
 8003744:	20000991 	.word	0x20000991
 8003748:	20000990 	.word	0x20000990

0800374c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b097      	sub	sp, #92	; 0x5c
 8003750:	af02      	add	r7, sp, #8
 8003752:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003766:	4b97      	ldr	r3, [pc, #604]	; (80039c4 <BSP_TS_GetState+0x278>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	4a96      	ldr	r2, [pc, #600]	; (80039c8 <BSP_TS_GetState+0x27c>)
 800376e:	7812      	ldrb	r2, [r2, #0]
 8003770:	b292      	uxth	r2, r2
 8003772:	4610      	mov	r0, r2
 8003774:	4798      	blx	r3
 8003776:	4603      	mov	r3, r0
 8003778:	461a      	mov	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 81a8 	beq.w	8003ad8 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8003788:	2300      	movs	r3, #0
 800378a:	64bb      	str	r3, [r7, #72]	; 0x48
 800378c:	e197      	b.n	8003abe <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800378e:	4b8d      	ldr	r3, [pc, #564]	; (80039c4 <BSP_TS_GetState+0x278>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	4a8c      	ldr	r2, [pc, #560]	; (80039c8 <BSP_TS_GetState+0x27c>)
 8003796:	7812      	ldrb	r2, [r2, #0]
 8003798:	b290      	uxth	r0, r2
 800379a:	f107 0120 	add.w	r1, r7, #32
 800379e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037a0:	0052      	lsls	r2, r2, #1
 80037a2:	188c      	adds	r4, r1, r2
 80037a4:	f107 0114 	add.w	r1, r7, #20
 80037a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037aa:	0052      	lsls	r2, r2, #1
 80037ac:	440a      	add	r2, r1
 80037ae:	4621      	mov	r1, r4
 80037b0:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80037b2:	4b86      	ldr	r3, [pc, #536]	; (80039cc <BSP_TS_GetState+0x280>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d11b      	bne.n	80037f2 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 80037ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80037c2:	4413      	add	r3, r2
 80037c4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80037c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80037d0:	440b      	add	r3, r1
 80037d2:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 80037d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80037de:	4413      	add	r3, r2
 80037e0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80037e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80037ec:	440b      	add	r3, r1
 80037ee:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 80037f2:	4b76      	ldr	r3, [pc, #472]	; (80039cc <BSP_TS_GetState+0x280>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d010      	beq.n	8003820 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 80037fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003806:	4413      	add	r3, r2
 8003808:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800380c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003810:	b29a      	uxth	r2, r3
 8003812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800381a:	440b      	add	r3, r1
 800381c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8003820:	4b6a      	ldr	r3, [pc, #424]	; (80039cc <BSP_TS_GetState+0x280>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d010      	beq.n	800384e <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 800382c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003834:	4413      	add	r3, r2
 8003836:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800383a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800383e:	b29a      	uxth	r2, r3
 8003840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003848:	440b      	add	r3, r1
 800384a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800384e:	4b5f      	ldr	r3, [pc, #380]	; (80039cc <BSP_TS_GetState+0x280>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d01b      	beq.n	8003892 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 800385a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003862:	4413      	add	r3, r2
 8003864:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003870:	440b      	add	r3, r1
 8003872:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8003876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800387e:	4413      	add	r3, r2
 8003880:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800388c:	440b      	add	r3, r1
 800388e:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800389a:	4413      	add	r3, r2
 800389c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80038a0:	4619      	mov	r1, r3
 80038a2:	4a4b      	ldr	r2, [pc, #300]	; (80039d0 <BSP_TS_GetState+0x284>)
 80038a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038aa:	4299      	cmp	r1, r3
 80038ac:	d90e      	bls.n	80038cc <BSP_TS_GetState+0x180>
 80038ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80038b6:	4413      	add	r3, r2
 80038b8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80038bc:	4944      	ldr	r1, [pc, #272]	; (80039d0 <BSP_TS_GetState+0x284>)
 80038be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	e00d      	b.n	80038e8 <BSP_TS_GetState+0x19c>
 80038cc:	4a40      	ldr	r2, [pc, #256]	; (80039d0 <BSP_TS_GetState+0x284>)
 80038ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80038de:	440b      	add	r3, r1
 80038e0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80038ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80038f4:	4413      	add	r3, r2
 80038f6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80038fa:	4619      	mov	r1, r3
 80038fc:	4a35      	ldr	r2, [pc, #212]	; (80039d4 <BSP_TS_GetState+0x288>)
 80038fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003904:	4299      	cmp	r1, r3
 8003906:	d90e      	bls.n	8003926 <BSP_TS_GetState+0x1da>
 8003908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003910:	4413      	add	r3, r2
 8003912:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003916:	492f      	ldr	r1, [pc, #188]	; (80039d4 <BSP_TS_GetState+0x288>)
 8003918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800391e:	b29b      	uxth	r3, r3
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	b29b      	uxth	r3, r3
 8003924:	e00d      	b.n	8003942 <BSP_TS_GetState+0x1f6>
 8003926:	4a2b      	ldr	r2, [pc, #172]	; (80039d4 <BSP_TS_GetState+0x288>)
 8003928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392e:	b29a      	uxth	r2, r3
 8003930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003938:	440b      	add	r3, r1
 800393a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	b29b      	uxth	r3, r3
 8003942:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8003946:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800394a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800394e:	4413      	add	r3, r2
 8003950:	2b05      	cmp	r3, #5
 8003952:	dd17      	ble.n	8003984 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8003954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800395c:	4413      	add	r3, r2
 800395e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003962:	4619      	mov	r1, r3
 8003964:	4a1a      	ldr	r2, [pc, #104]	; (80039d0 <BSP_TS_GetState+0x284>)
 8003966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003968:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800396c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003974:	4413      	add	r3, r2
 8003976:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800397a:	4619      	mov	r1, r3
 800397c:	4a15      	ldr	r2, [pc, #84]	; (80039d4 <BSP_TS_GetState+0x288>)
 800397e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003980:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8003984:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <BSP_TS_GetState+0x27c>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b70      	cmp	r3, #112	; 0x70
 800398a:	d125      	bne.n	80039d8 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 800398c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003994:	4413      	add	r3, r2
 8003996:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	4413      	add	r3, r2
 80039a2:	460a      	mov	r2, r1
 80039a4:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80039a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80039ae:	4413      	add	r3, r2
 80039b0:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b8:	3304      	adds	r3, #4
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	4413      	add	r3, r2
 80039be:	460a      	mov	r2, r1
 80039c0:	809a      	strh	r2, [r3, #4]
 80039c2:	e02c      	b.n	8003a1e <BSP_TS_GetState+0x2d2>
 80039c4:	20000988 	.word	0x20000988
 80039c8:	20000991 	.word	0x20000991
 80039cc:	20000990 	.word	0x20000990
 80039d0:	20000994 	.word	0x20000994
 80039d4:	200009a8 	.word	0x200009a8
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80039d8:	4b42      	ldr	r3, [pc, #264]	; (8003ae4 <BSP_TS_GetState+0x398>)
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	4619      	mov	r1, r3
 80039de:	4a42      	ldr	r2, [pc, #264]	; (8003ae8 <BSP_TS_GetState+0x39c>)
 80039e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e6:	fb03 f301 	mul.w	r3, r3, r1
 80039ea:	0b1b      	lsrs	r3, r3, #12
 80039ec:	b299      	uxth	r1, r3
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	4413      	add	r3, r2
 80039f6:	460a      	mov	r2, r1
 80039f8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80039fa:	4b3c      	ldr	r3, [pc, #240]	; (8003aec <BSP_TS_GetState+0x3a0>)
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	4619      	mov	r1, r3
 8003a00:	4a3b      	ldr	r2, [pc, #236]	; (8003af0 <BSP_TS_GetState+0x3a4>)
 8003a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a08:	fb03 f301 	mul.w	r3, r3, r1
 8003a0c:	0b1b      	lsrs	r3, r3, #12
 8003a0e:	b299      	uxth	r1, r3
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a14:	3304      	adds	r3, #4
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	4413      	add	r3, r2
 8003a1a:	460a      	mov	r2, r1
 8003a1c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8003a1e:	4b35      	ldr	r3, [pc, #212]	; (8003af4 <BSP_TS_GetState+0x3a8>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	b298      	uxth	r0, r3
 8003a24:	f107 010c 	add.w	r1, r7, #12
 8003a28:	f107 0210 	add.w	r2, r7, #16
 8003a2c:	f107 0308 	add.w	r3, r7, #8
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	460b      	mov	r3, r1
 8003a34:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003a36:	f7ff f94b 	bl	8002cd0 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	b2d9      	uxtb	r1, r3
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a42:	4413      	add	r3, r2
 8003a44:	3316      	adds	r3, #22
 8003a46:	460a      	mov	r2, r1
 8003a48:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	b2d9      	uxtb	r1, r3
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a52:	4413      	add	r3, r2
 8003a54:	3320      	adds	r3, #32
 8003a56:	460a      	mov	r2, r1
 8003a58:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d827      	bhi.n	8003ab0 <BSP_TS_GetState+0x364>
 8003a60:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <BSP_TS_GetState+0x31c>)
 8003a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a66:	bf00      	nop
 8003a68:	08003a79 	.word	0x08003a79
 8003a6c:	08003a87 	.word	0x08003a87
 8003a70:	08003a95 	.word	0x08003a95
 8003a74:	08003aa3 	.word	0x08003aa3
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a7c:	4413      	add	r3, r2
 8003a7e:	331b      	adds	r3, #27
 8003a80:	2201      	movs	r2, #1
 8003a82:	701a      	strb	r2, [r3, #0]
          break;
 8003a84:	e018      	b.n	8003ab8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a8a:	4413      	add	r3, r2
 8003a8c:	331b      	adds	r3, #27
 8003a8e:	2202      	movs	r2, #2
 8003a90:	701a      	strb	r2, [r3, #0]
          break;
 8003a92:	e011      	b.n	8003ab8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a98:	4413      	add	r3, r2
 8003a9a:	331b      	adds	r3, #27
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	701a      	strb	r2, [r3, #0]
          break;
 8003aa0:	e00a      	b.n	8003ab8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa6:	4413      	add	r3, r2
 8003aa8:	331b      	adds	r3, #27
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
          break;
 8003aae:	e003      	b.n	8003ab8 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8003ab6:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8003ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aba:	3301      	adds	r3, #1
 8003abc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	f4ff ae61 	bcc.w	800378e <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f813 	bl	8003af8 <BSP_TS_Get_GestureId>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8003ad8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3754      	adds	r7, #84	; 0x54
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd90      	pop	{r4, r7, pc}
 8003ae4:	2000098c 	.word	0x2000098c
 8003ae8:	20000994 	.word	0x20000994
 8003aec:	2000098e 	.word	0x2000098e
 8003af0:	200009a8 	.word	0x200009a8
 8003af4:	20000991 	.word	0x20000991

08003af8 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003b08:	4b1f      	ldr	r3, [pc, #124]	; (8003b88 <BSP_TS_Get_GestureId+0x90>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	f107 0208 	add.w	r2, r7, #8
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff f8c2 	bl	8002c9e <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b18      	cmp	r3, #24
 8003b1e:	d01b      	beq.n	8003b58 <BSP_TS_Get_GestureId+0x60>
 8003b20:	2b18      	cmp	r3, #24
 8003b22:	d806      	bhi.n	8003b32 <BSP_TS_Get_GestureId+0x3a>
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d00f      	beq.n	8003b48 <BSP_TS_Get_GestureId+0x50>
 8003b28:	2b14      	cmp	r3, #20
 8003b2a:	d011      	beq.n	8003b50 <BSP_TS_Get_GestureId+0x58>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <BSP_TS_Get_GestureId+0x48>
 8003b30:	e022      	b.n	8003b78 <BSP_TS_Get_GestureId+0x80>
 8003b32:	2b40      	cmp	r3, #64	; 0x40
 8003b34:	d018      	beq.n	8003b68 <BSP_TS_Get_GestureId+0x70>
 8003b36:	2b49      	cmp	r3, #73	; 0x49
 8003b38:	d01a      	beq.n	8003b70 <BSP_TS_Get_GestureId+0x78>
 8003b3a:	2b1c      	cmp	r3, #28
 8003b3c:	d010      	beq.n	8003b60 <BSP_TS_Get_GestureId+0x68>
 8003b3e:	e01b      	b.n	8003b78 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003b46:	e01a      	b.n	8003b7e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003b4e:	e016      	b.n	8003b7e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003b56:	e012      	b.n	8003b7e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003b5e:	e00e      	b.n	8003b7e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2204      	movs	r2, #4
 8003b64:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003b66:	e00a      	b.n	8003b7e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2205      	movs	r2, #5
 8003b6c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003b6e:	e006      	b.n	8003b7e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2206      	movs	r2, #6
 8003b74:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003b76:	e002      	b.n	8003b7e <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b7c:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000991 	.word	0x20000991

08003b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b90:	2003      	movs	r0, #3
 8003b92:	f000 fb8c 	bl	80042ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b96:	2000      	movs	r0, #0
 8003b98:	f7fe fd10 	bl	80025bc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003b9c:	f7fd fef8 	bl	8001990 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_IncTick+0x20>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <HAL_IncTick+0x24>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	4a04      	ldr	r2, [pc, #16]	; (8003bcc <HAL_IncTick+0x24>)
 8003bba:	6013      	str	r3, [r2, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	2000002c 	.word	0x2000002c
 8003bcc:	2000d15c 	.word	0x2000d15c

08003bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <HAL_GetTick+0x14>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	2000d15c 	.word	0x2000d15c

08003be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bf0:	f7ff ffee 	bl	8003bd0 <HAL_GetTick>
 8003bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c00:	d005      	beq.n	8003c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <HAL_Delay+0x40>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c0e:	bf00      	nop
 8003c10:	f7ff ffde 	bl	8003bd0 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d8f7      	bhi.n	8003c10 <HAL_Delay+0x28>
  {
  }
}
 8003c20:	bf00      	nop
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	2000002c 	.word	0x2000002c

08003c2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e031      	b.n	8003ca6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fd fec8 	bl	80019e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d116      	bne.n	8003c98 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <HAL_ADC_Init+0x84>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	f043 0202 	orr.w	r2, r3, #2
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f94e 	bl	8003f1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f023 0303 	bic.w	r3, r3, #3
 8003c8e:	f043 0201 	orr.w	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40
 8003c96:	e001      	b.n	8003c9c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	ffffeefd 	.word	0xffffeefd

08003cb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x1c>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e115      	b.n	8003efc <HAL_ADC_ConfigChannel+0x248>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b09      	cmp	r3, #9
 8003cde:	d935      	bls.n	8003d4c <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68d9      	ldr	r1, [r3, #12]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	4613      	mov	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3b1e      	subs	r3, #30
 8003cf6:	2207      	movs	r2, #7
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43da      	mvns	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	400a      	ands	r2, r1
 8003d04:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a7f      	ldr	r2, [pc, #508]	; (8003f08 <HAL_ADC_ConfigChannel+0x254>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d10a      	bne.n	8003d26 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68d9      	ldr	r1, [r3, #12]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	061a      	lsls	r2, r3, #24
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	60da      	str	r2, [r3, #12]
 8003d24:	e035      	b.n	8003d92 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68d9      	ldr	r1, [r3, #12]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	4618      	mov	r0, r3
 8003d38:	4603      	mov	r3, r0
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4403      	add	r3, r0
 8003d3e:	3b1e      	subs	r3, #30
 8003d40:	409a      	lsls	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	60da      	str	r2, [r3, #12]
 8003d4a:	e022      	b.n	8003d92 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6919      	ldr	r1, [r3, #16]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	4413      	add	r3, r2
 8003d60:	2207      	movs	r2, #7
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43da      	mvns	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	400a      	ands	r2, r1
 8003d6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6919      	ldr	r1, [r3, #16]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	4618      	mov	r0, r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	4403      	add	r3, r0
 8003d88:	409a      	lsls	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b06      	cmp	r3, #6
 8003d98:	d824      	bhi.n	8003de4 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	3b05      	subs	r3, #5
 8003dac:	221f      	movs	r2, #31
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	43da      	mvns	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	400a      	ands	r2, r1
 8003dba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	4618      	mov	r0, r3
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3b05      	subs	r3, #5
 8003dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	635a      	str	r2, [r3, #52]	; 0x34
 8003de2:	e04c      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b0c      	cmp	r3, #12
 8003dea:	d824      	bhi.n	8003e36 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3b23      	subs	r3, #35	; 0x23
 8003dfe:	221f      	movs	r2, #31
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43da      	mvns	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	400a      	ands	r2, r1
 8003e0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	3b23      	subs	r3, #35	; 0x23
 8003e28:	fa00 f203 	lsl.w	r2, r0, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
 8003e34:	e023      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	3b41      	subs	r3, #65	; 0x41
 8003e48:	221f      	movs	r2, #31
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43da      	mvns	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	400a      	ands	r2, r1
 8003e56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	4618      	mov	r0, r3
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	3b41      	subs	r3, #65	; 0x41
 8003e72:	fa00 f203 	lsl.w	r2, r0, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <HAL_ADC_ConfigChannel+0x258>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d109      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x1e8>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b12      	cmp	r3, #18
 8003e8e:	d105      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003e90:	4b1f      	ldr	r3, [pc, #124]	; (8003f10 <HAL_ADC_ConfigChannel+0x25c>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	4a1e      	ldr	r2, [pc, #120]	; (8003f10 <HAL_ADC_ConfigChannel+0x25c>)
 8003e96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e9a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1a      	ldr	r2, [pc, #104]	; (8003f0c <HAL_ADC_ConfigChannel+0x258>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d125      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x23e>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a17      	ldr	r2, [pc, #92]	; (8003f08 <HAL_ADC_ConfigChannel+0x254>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <HAL_ADC_ConfigChannel+0x204>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b11      	cmp	r3, #17
 8003eb6:	d11c      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003eb8:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <HAL_ADC_ConfigChannel+0x25c>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <HAL_ADC_ConfigChannel+0x25c>)
 8003ebe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ec2:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a0f      	ldr	r2, [pc, #60]	; (8003f08 <HAL_ADC_ConfigChannel+0x254>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d111      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003ece:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <HAL_ADC_ConfigChannel+0x260>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a11      	ldr	r2, [pc, #68]	; (8003f18 <HAL_ADC_ConfigChannel+0x264>)
 8003ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed8:	0c9a      	lsrs	r2, r3, #18
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003ee4:	e002      	b.n	8003eec <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f9      	bne.n	8003ee6 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	10000012 	.word	0x10000012
 8003f0c:	40012000 	.word	0x40012000
 8003f10:	40012300 	.word	0x40012300
 8003f14:	20000000 	.word	0x20000000
 8003f18:	431bde83 	.word	0x431bde83

08003f1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003f24:	4b78      	ldr	r3, [pc, #480]	; (8004108 <ADC_Init+0x1ec>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	4a77      	ldr	r2, [pc, #476]	; (8004108 <ADC_Init+0x1ec>)
 8003f2a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003f2e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003f30:	4b75      	ldr	r3, [pc, #468]	; (8004108 <ADC_Init+0x1ec>)
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	4973      	ldr	r1, [pc, #460]	; (8004108 <ADC_Init+0x1ec>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	021a      	lsls	r2, r3, #8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6859      	ldr	r1, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6899      	ldr	r1, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	4a58      	ldr	r2, [pc, #352]	; (800410c <ADC_Init+0x1f0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6899      	ldr	r1, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fe0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6899      	ldr	r1, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	e00f      	b.n	8004016 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004004:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004014:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0202 	bic.w	r2, r2, #2
 8004024:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6899      	ldr	r1, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	005a      	lsls	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01b      	beq.n	800407c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004052:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004062:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	3b01      	subs	r3, #1
 8004070:	035a      	lsls	r2, r3, #13
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	e007      	b.n	800408c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800408a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800409a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	051a      	lsls	r2, r3, #20
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6899      	ldr	r1, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040ce:	025a      	lsls	r2, r3, #9
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6899      	ldr	r1, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	029a      	lsls	r2, r3, #10
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	609a      	str	r2, [r3, #8]
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	40012300 	.word	0x40012300
 800410c:	0f000001 	.word	0x0f000001

08004110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <__NVIC_SetPriorityGrouping+0x40>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800412c:	4013      	ands	r3, r2
 800412e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <__NVIC_SetPriorityGrouping+0x44>)
 800413a:	4313      	orrs	r3, r2
 800413c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800413e:	4a04      	ldr	r2, [pc, #16]	; (8004150 <__NVIC_SetPriorityGrouping+0x40>)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	60d3      	str	r3, [r2, #12]
}
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	e000ed00 	.word	0xe000ed00
 8004154:	05fa0000 	.word	0x05fa0000

08004158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <__NVIC_GetPriorityGrouping+0x18>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	0a1b      	lsrs	r3, r3, #8
 8004162:	f003 0307 	and.w	r3, r3, #7
}
 8004166:	4618      	mov	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	e000ed00 	.word	0xe000ed00

08004174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	2b00      	cmp	r3, #0
 8004184:	db0b      	blt.n	800419e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	f003 021f 	and.w	r2, r3, #31
 800418c:	4907      	ldr	r1, [pc, #28]	; (80041ac <__NVIC_EnableIRQ+0x38>)
 800418e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	2001      	movs	r0, #1
 8004196:	fa00 f202 	lsl.w	r2, r0, r2
 800419a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	e000e100 	.word	0xe000e100

080041b0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	db10      	blt.n	80041e4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	f003 021f 	and.w	r2, r3, #31
 80041c8:	4909      	ldr	r1, [pc, #36]	; (80041f0 <__NVIC_DisableIRQ+0x40>)
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2001      	movs	r0, #1
 80041d2:	fa00 f202 	lsl.w	r2, r0, r2
 80041d6:	3320      	adds	r3, #32
 80041d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80041dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80041e0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	e000e100 	.word	0xe000e100

080041f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	6039      	str	r1, [r7, #0]
 80041fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004204:	2b00      	cmp	r3, #0
 8004206:	db0a      	blt.n	800421e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	b2da      	uxtb	r2, r3
 800420c:	490c      	ldr	r1, [pc, #48]	; (8004240 <__NVIC_SetPriority+0x4c>)
 800420e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004212:	0112      	lsls	r2, r2, #4
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	440b      	add	r3, r1
 8004218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800421c:	e00a      	b.n	8004234 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	b2da      	uxtb	r2, r3
 8004222:	4908      	ldr	r1, [pc, #32]	; (8004244 <__NVIC_SetPriority+0x50>)
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	3b04      	subs	r3, #4
 800422c:	0112      	lsls	r2, r2, #4
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	440b      	add	r3, r1
 8004232:	761a      	strb	r2, [r3, #24]
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	e000e100 	.word	0xe000e100
 8004244:	e000ed00 	.word	0xe000ed00

08004248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004248:	b480      	push	{r7}
 800424a:	b089      	sub	sp, #36	; 0x24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f1c3 0307 	rsb	r3, r3, #7
 8004262:	2b04      	cmp	r3, #4
 8004264:	bf28      	it	cs
 8004266:	2304      	movcs	r3, #4
 8004268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3304      	adds	r3, #4
 800426e:	2b06      	cmp	r3, #6
 8004270:	d902      	bls.n	8004278 <NVIC_EncodePriority+0x30>
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	3b03      	subs	r3, #3
 8004276:	e000      	b.n	800427a <NVIC_EncodePriority+0x32>
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800427c:	f04f 32ff 	mov.w	r2, #4294967295
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43da      	mvns	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	401a      	ands	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004290:	f04f 31ff 	mov.w	r1, #4294967295
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	fa01 f303 	lsl.w	r3, r1, r3
 800429a:	43d9      	mvns	r1, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a0:	4313      	orrs	r3, r2
         );
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3724      	adds	r7, #36	; 0x24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff ff2a 	bl	8004110 <__NVIC_SetPriorityGrouping>
}
 80042bc:	bf00      	nop
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042d6:	f7ff ff3f 	bl	8004158 <__NVIC_GetPriorityGrouping>
 80042da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	6978      	ldr	r0, [r7, #20]
 80042e2:	f7ff ffb1 	bl	8004248 <NVIC_EncodePriority>
 80042e6:	4602      	mov	r2, r0
 80042e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ec:	4611      	mov	r1, r2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff ff80 	bl	80041f4 <__NVIC_SetPriority>
}
 80042f4:	bf00      	nop
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff ff32 	bl	8004174 <__NVIC_EnableIRQ>
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff ff42 	bl	80041b0 <__NVIC_DisableIRQ>
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e054      	b.n	80043f0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	7f5b      	ldrb	r3, [r3, #29]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d105      	bne.n	800435c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fd fb9c 	bl	8001a94 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	791b      	ldrb	r3, [r3, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10c      	bne.n	8004384 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a22      	ldr	r2, [pc, #136]	; (80043f8 <HAL_CRC_Init+0xc4>)
 8004370:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0218 	bic.w	r2, r2, #24
 8004380:	609a      	str	r2, [r3, #8]
 8004382:	e00c      	b.n	800439e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6899      	ldr	r1, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	461a      	mov	r2, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f834 	bl	80043fc <HAL_CRCEx_Polynomial_Set>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e028      	b.n	80043f0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	795b      	ldrb	r3, [r3, #5]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d105      	bne.n	80043b2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f04f 32ff 	mov.w	r2, #4294967295
 80043ae:	611a      	str	r2, [r3, #16]
 80043b0:	e004      	b.n	80043bc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6912      	ldr	r2, [r2, #16]
 80043ba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695a      	ldr	r2, [r3, #20]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699a      	ldr	r2, [r3, #24]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	04c11db7 	.word	0x04c11db7

080043fc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800440c:	231f      	movs	r3, #31
 800440e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004410:	bf00      	nop
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1e5a      	subs	r2, r3, #1
 8004416:	613a      	str	r2, [r7, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d009      	beq.n	8004430 <HAL_CRCEx_Polynomial_Set+0x34>
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b18      	cmp	r3, #24
 8004434:	d846      	bhi.n	80044c4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004436:	a201      	add	r2, pc, #4	; (adr r2, 800443c <HAL_CRCEx_Polynomial_Set+0x40>)
 8004438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443c:	080044cb 	.word	0x080044cb
 8004440:	080044c5 	.word	0x080044c5
 8004444:	080044c5 	.word	0x080044c5
 8004448:	080044c5 	.word	0x080044c5
 800444c:	080044c5 	.word	0x080044c5
 8004450:	080044c5 	.word	0x080044c5
 8004454:	080044c5 	.word	0x080044c5
 8004458:	080044c5 	.word	0x080044c5
 800445c:	080044b9 	.word	0x080044b9
 8004460:	080044c5 	.word	0x080044c5
 8004464:	080044c5 	.word	0x080044c5
 8004468:	080044c5 	.word	0x080044c5
 800446c:	080044c5 	.word	0x080044c5
 8004470:	080044c5 	.word	0x080044c5
 8004474:	080044c5 	.word	0x080044c5
 8004478:	080044c5 	.word	0x080044c5
 800447c:	080044ad 	.word	0x080044ad
 8004480:	080044c5 	.word	0x080044c5
 8004484:	080044c5 	.word	0x080044c5
 8004488:	080044c5 	.word	0x080044c5
 800448c:	080044c5 	.word	0x080044c5
 8004490:	080044c5 	.word	0x080044c5
 8004494:	080044c5 	.word	0x080044c5
 8004498:	080044c5 	.word	0x080044c5
 800449c:	080044a1 	.word	0x080044a1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	2b06      	cmp	r3, #6
 80044a4:	d913      	bls.n	80044ce <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80044aa:	e010      	b.n	80044ce <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b07      	cmp	r3, #7
 80044b0:	d90f      	bls.n	80044d2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80044b6:	e00c      	b.n	80044d2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2b0f      	cmp	r3, #15
 80044bc:	d90b      	bls.n	80044d6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80044c2:	e008      	b.n	80044d6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	75fb      	strb	r3, [r7, #23]
      break;
 80044c8:	e006      	b.n	80044d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80044ca:	bf00      	nop
 80044cc:	e004      	b.n	80044d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80044ce:	bf00      	nop
 80044d0:	e002      	b.n	80044d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80044d2:	bf00      	nop
 80044d4:	e000      	b.n	80044d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80044d6:	bf00      	nop
  }
  if (status == HAL_OK)
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10d      	bne.n	80044fa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f023 0118 	bic.w	r1, r3, #24
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	371c      	adds	r7, #28
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e062      	b.n	80045e0 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d102      	bne.n	800452c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fd fad4 	bl	8001ad4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6819      	ldr	r1, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	4b2a      	ldr	r3, [pc, #168]	; (80045e8 <HAL_DCMI_Init+0xe0>)
 8004540:	400b      	ands	r3, r1
 8004542:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6819      	ldr	r1, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004558:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004564:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004570:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800457c:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004588:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b10      	cmp	r3, #16
 8004598:	d112      	bne.n	80045c0 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	7f1b      	ldrb	r3, [r3, #28]
 800459e:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	7f5b      	ldrb	r3, [r3, #29]
 80045a4:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80045a6:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	7f9b      	ldrb	r3, [r3, #30]
 80045ac:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80045ae:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	7fdb      	ldrb	r3, [r3, #31]
 80045b6:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80045bc:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80045be:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 021e 	orr.w	r2, r2, #30
 80045ce:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	ffe0f007 	.word	0xffe0f007

080045ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004602:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_DMA_Start_IT+0x26>
 800460e:	2302      	movs	r3, #2
 8004610:	e048      	b.n	80046a4 <HAL_DMA_Start_IT+0xb8>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b01      	cmp	r3, #1
 8004624:	d137      	bne.n	8004696 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2202      	movs	r2, #2
 800462a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f8d4 	bl	80047e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004644:	223f      	movs	r2, #63	; 0x3f
 8004646:	409a      	lsls	r2, r3
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0216 	orr.w	r2, r2, #22
 800465a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695a      	ldr	r2, [r3, #20]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800466a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0208 	orr.w	r2, r2, #8
 8004682:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	e005      	b.n	80046a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800469e:	2302      	movs	r3, #2
 80046a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046ba:	f7ff fa89 	bl	8003bd0 <HAL_GetTick>
 80046be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d008      	beq.n	80046de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2280      	movs	r2, #128	; 0x80
 80046d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e052      	b.n	8004784 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0216 	bic.w	r2, r2, #22
 80046ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695a      	ldr	r2, [r3, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d103      	bne.n	800470e <HAL_DMA_Abort+0x62>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470a:	2b00      	cmp	r3, #0
 800470c:	d007      	beq.n	800471e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0208 	bic.w	r2, r2, #8
 800471c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0201 	bic.w	r2, r2, #1
 800472c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800472e:	e013      	b.n	8004758 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004730:	f7ff fa4e 	bl	8003bd0 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b05      	cmp	r3, #5
 800473c:	d90c      	bls.n	8004758 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2203      	movs	r2, #3
 8004750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e015      	b.n	8004784 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e4      	bne.n	8004730 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476a:	223f      	movs	r2, #63	; 0x3f
 800476c:	409a      	lsls	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d004      	beq.n	80047aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2280      	movs	r2, #128	; 0x80
 80047a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e00c      	b.n	80047c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2205      	movs	r2, #5
 80047ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0201 	bic.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004804:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b40      	cmp	r3, #64	; 0x40
 8004814:	d108      	bne.n	8004828 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004826:	e007      	b.n	8004838 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	60da      	str	r2, [r3, #12]
}
 8004838:	bf00      	nop
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e039      	b.n	80048ca <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f01b fda6 	bl	80203bc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004894:	f023 0107 	bic.w	r1, r3, #7
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048aa:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <HAL_DMA2D_Init+0x90>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	68d1      	ldr	r1, [r2, #12]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6812      	ldr	r2, [r2, #0]
 80048b6:	430b      	orrs	r3, r1
 80048b8:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	ffffc000 	.word	0xffffc000

080048d8 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e05f      	b.n	80049aa <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 80048ea:	4b32      	ldr	r3, [pc, #200]	; (80049b4 <HAL_DMA2D_DeInit+0xdc>)
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d02e      	beq.n	8004954 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b01      	cmp	r3, #1
 8004902:	d107      	bne.n	8004914 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f8c1 	bl	8004a8c <HAL_DMA2D_Abort>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d021      	beq.n	8004954 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e04a      	b.n	80049aa <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b20      	cmp	r3, #32
 8004920:	d108      	bne.n	8004934 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8004922:	2100      	movs	r1, #0
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f8f7 	bl	8004b18 <HAL_DMA2D_CLUTLoading_Abort>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d011      	beq.n	8004954 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e03a      	b.n	80049aa <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b20      	cmp	r3, #32
 8004940:	d108      	bne.n	8004954 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8004942:	2101      	movs	r1, #1
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f8e7 	bl	8004b18 <HAL_DMA2D_CLUTLoading_Abort>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e02a      	b.n	80049aa <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	223f      	movs	r2, #63	; 0x3f
 8004962:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2200      	movs	r2, #0
 800496a:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2200      	movs	r2, #0
 8004972:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2200      	movs	r2, #0
 800497a:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2200      	movs	r2, #0
 8004982:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2200      	movs	r2, #0
 800498a:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f01b fd3b 	bl	8020408 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40023800 	.word	0x40023800

080049b8 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_DMA2D_Start_IT+0x1c>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e020      	b.n	8004a16 <HAL_DMA2D_Start_IT+0x5e>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fa84 	bl	8004efc <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8004a02:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0201 	orr.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b086      	sub	sp, #24
 8004a22:	af02      	add	r7, sp, #8
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_DMA2D_BlendingStart_IT+0x1c>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e024      	b.n	8004a84 <HAL_DMA2D_BlendingStart_IT+0x66>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2202      	movs	r2, #2
 8004a46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 fa4d 	bl	8004efc <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8004a70:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0201 	orr.w	r2, r2, #1
 8004a80:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f023 0205 	bic.w	r2, r3, #5
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0204 	orr.w	r2, r2, #4
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004aa8:	f7ff f892 	bl	8003bd0 <HAL_GetTick>
 8004aac:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004aae:	e017      	b.n	8004ae0 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8004ab0:	f7ff f88e 	bl	8003bd0 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004abe:	d90f      	bls.n	8004ae0 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac4:	f043 0220 	orr.w	r2, r3, #32
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2203      	movs	r2, #3
 8004ad0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e017      	b.n	8004b10 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e0      	bne.n	8004ab0 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8004afc:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3324      	adds	r3, #36	; 0x24
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0204 	orr.w	r2, r2, #4
 8004b38:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d103      	bne.n	8004b48 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	331c      	adds	r3, #28
 8004b46:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8004b48:	f7ff f842 	bl	8003bd0 <HAL_GetTick>
 8004b4c:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8004b4e:	e017      	b.n	8004b80 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8004b50:	f7ff f83e 	bl	8003bd0 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b5e:	d90f      	bls.n	8004b80 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b64:	f043 0220 	orr.w	r2, r3, #32
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2203      	movs	r2, #3
 8004b70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e016      	b.n	8004bae <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1e1      	bne.n	8004b50 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8004b9a:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d026      	beq.n	8004c26 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d021      	beq.n	8004c26 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bf0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	f043 0201 	orr.w	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2201      	movs	r2, #1
 8004c04:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2204      	movs	r2, #4
 8004c0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d026      	beq.n	8004c7e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d021      	beq.n	8004c7e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c48:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c56:	f043 0202 	orr.w	r2, r3, #2
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2204      	movs	r2, #4
 8004c62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d026      	beq.n	8004cd6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d021      	beq.n	8004cd6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2208      	movs	r2, #8
 8004ca8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cae:	f043 0204 	orr.w	r2, r3, #4
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2204      	movs	r2, #4
 8004cba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d013      	beq.n	8004d08 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00e      	beq.n	8004d08 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2204      	movs	r2, #4
 8004d00:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f853 	bl	8004dae <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d024      	beq.n	8004d5c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01f      	beq.n	8004d5c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d2a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2202      	movs	r2, #2
 8004d32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f003 0310 	and.w	r3, r3, #16
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d01f      	beq.n	8004da6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01a      	beq.n	8004da6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d7e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2210      	movs	r2, #16
 8004d86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f80e 	bl	8004dc2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004da6:	bf00      	nop
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_DMA2D_ConfigLayer+0x20>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e079      	b.n	8004eec <HAL_DMA2D_ConfigLayer+0x114>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	3318      	adds	r3, #24
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	4413      	add	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	041b      	lsls	r3, r3, #16
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004e22:	4b35      	ldr	r3, [pc, #212]	; (8004ef8 <HAL_DMA2D_ConfigLayer+0x120>)
 8004e24:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b0a      	cmp	r3, #10
 8004e2c:	d003      	beq.n	8004e36 <HAL_DMA2D_ConfigLayer+0x5e>
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b09      	cmp	r3, #9
 8004e34:	d107      	bne.n	8004e46 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e005      	b.n	8004e52 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	061b      	lsls	r3, r3, #24
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d120      	bne.n	8004e9a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	43db      	mvns	r3, r3
 8004e62:	ea02 0103 	and.w	r1, r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b0a      	cmp	r3, #10
 8004e80:	d003      	beq.n	8004e8a <HAL_DMA2D_ConfigLayer+0xb2>
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b09      	cmp	r3, #9
 8004e88:	d127      	bne.n	8004eda <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004e96:	629a      	str	r2, [r3, #40]	; 0x28
 8004e98:	e01f      	b.n	8004eda <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69da      	ldr	r2, [r3, #28]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	ea02 0103 	and.w	r1, r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b0a      	cmp	r3, #10
 8004ec2:	d003      	beq.n	8004ecc <HAL_DMA2D_ConfigLayer+0xf4>
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b09      	cmp	r3, #9
 8004eca:	d106      	bne.n	8004eda <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004ed8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	ff03000f 	.word	0xff03000f

08004efc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b08b      	sub	sp, #44	; 0x2c
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f10:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	041a      	lsls	r2, r3, #16
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f34:	d174      	bne.n	8005020 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004f3c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f44:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004f4c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d108      	bne.n	8004f6e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	431a      	orrs	r2, r3
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6c:	e053      	b.n	8005016 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d106      	bne.n	8004f84 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
 8004f82:	e048      	b.n	8005016 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d111      	bne.n	8004fb0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	0cdb      	lsrs	r3, r3, #19
 8004f90:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	0a9b      	lsrs	r3, r3, #10
 8004f96:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	08db      	lsrs	r3, r3, #3
 8004f9c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	02db      	lsls	r3, r3, #11
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
 8004fae:	e032      	b.n	8005016 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d117      	bne.n	8004fe8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	0fdb      	lsrs	r3, r3, #31
 8004fbc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	0cdb      	lsrs	r3, r3, #19
 8004fc2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	0adb      	lsrs	r3, r3, #11
 8004fc8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	08db      	lsrs	r3, r3, #3
 8004fce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	029b      	lsls	r3, r3, #10
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	03db      	lsls	r3, r3, #15
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe6:	e016      	b.n	8005016 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	0f1b      	lsrs	r3, r3, #28
 8004fec:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	0d1b      	lsrs	r3, r3, #20
 8004ff2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	0b1b      	lsrs	r3, r3, #12
 8004ff8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	091b      	lsrs	r3, r3, #4
 8004ffe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	011a      	lsls	r2, r3, #4
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	021b      	lsls	r3, r3, #8
 8005008:	431a      	orrs	r2, r3
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	031b      	lsls	r3, r3, #12
 800500e:	4313      	orrs	r3, r2
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800501e:	e003      	b.n	8005028 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	60da      	str	r2, [r3, #12]
}
 8005028:	bf00      	nop
 800502a:	372c      	adds	r7, #44	; 0x2c
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005034:	b480      	push	{r7}
 8005036:	b089      	sub	sp, #36	; 0x24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800503e:	2300      	movs	r3, #0
 8005040:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005046:	2300      	movs	r3, #0
 8005048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800504a:	2300      	movs	r3, #0
 800504c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]
 8005052:	e175      	b.n	8005340 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005054:	2201      	movs	r2, #1
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4013      	ands	r3, r2
 8005066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	429a      	cmp	r2, r3
 800506e:	f040 8164 	bne.w	800533a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d003      	beq.n	8005082 <HAL_GPIO_Init+0x4e>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b12      	cmp	r3, #18
 8005080:	d123      	bne.n	80050ca <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	08da      	lsrs	r2, r3, #3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3208      	adds	r2, #8
 800508a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800508e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	220f      	movs	r2, #15
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	43db      	mvns	r3, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4013      	ands	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	08da      	lsrs	r2, r3, #3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3208      	adds	r2, #8
 80050c4:	69b9      	ldr	r1, [r7, #24]
 80050c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	2203      	movs	r2, #3
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	43db      	mvns	r3, r3
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4013      	ands	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f003 0203 	and.w	r2, r3, #3
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d00b      	beq.n	800511e <HAL_GPIO_Init+0xea>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d007      	beq.n	800511e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005112:	2b11      	cmp	r3, #17
 8005114:	d003      	beq.n	800511e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2b12      	cmp	r3, #18
 800511c:	d130      	bne.n	8005180 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	2203      	movs	r2, #3
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	43db      	mvns	r3, r3
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4013      	ands	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4313      	orrs	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005154:	2201      	movs	r2, #1
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	f003 0201 	and.w	r2, r3, #1
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4313      	orrs	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	2203      	movs	r2, #3
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	43db      	mvns	r3, r3
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	4013      	ands	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 80be 	beq.w	800533a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051be:	4b65      	ldr	r3, [pc, #404]	; (8005354 <HAL_GPIO_Init+0x320>)
 80051c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c2:	4a64      	ldr	r2, [pc, #400]	; (8005354 <HAL_GPIO_Init+0x320>)
 80051c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051c8:	6453      	str	r3, [r2, #68]	; 0x44
 80051ca:	4b62      	ldr	r3, [pc, #392]	; (8005354 <HAL_GPIO_Init+0x320>)
 80051cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80051d6:	4a60      	ldr	r2, [pc, #384]	; (8005358 <HAL_GPIO_Init+0x324>)
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	089b      	lsrs	r3, r3, #2
 80051dc:	3302      	adds	r3, #2
 80051de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	220f      	movs	r2, #15
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	43db      	mvns	r3, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4013      	ands	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a57      	ldr	r2, [pc, #348]	; (800535c <HAL_GPIO_Init+0x328>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d037      	beq.n	8005272 <HAL_GPIO_Init+0x23e>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a56      	ldr	r2, [pc, #344]	; (8005360 <HAL_GPIO_Init+0x32c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d031      	beq.n	800526e <HAL_GPIO_Init+0x23a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a55      	ldr	r2, [pc, #340]	; (8005364 <HAL_GPIO_Init+0x330>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d02b      	beq.n	800526a <HAL_GPIO_Init+0x236>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a54      	ldr	r2, [pc, #336]	; (8005368 <HAL_GPIO_Init+0x334>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d025      	beq.n	8005266 <HAL_GPIO_Init+0x232>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a53      	ldr	r2, [pc, #332]	; (800536c <HAL_GPIO_Init+0x338>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d01f      	beq.n	8005262 <HAL_GPIO_Init+0x22e>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a52      	ldr	r2, [pc, #328]	; (8005370 <HAL_GPIO_Init+0x33c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d019      	beq.n	800525e <HAL_GPIO_Init+0x22a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a51      	ldr	r2, [pc, #324]	; (8005374 <HAL_GPIO_Init+0x340>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d013      	beq.n	800525a <HAL_GPIO_Init+0x226>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a50      	ldr	r2, [pc, #320]	; (8005378 <HAL_GPIO_Init+0x344>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00d      	beq.n	8005256 <HAL_GPIO_Init+0x222>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a4f      	ldr	r2, [pc, #316]	; (800537c <HAL_GPIO_Init+0x348>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d007      	beq.n	8005252 <HAL_GPIO_Init+0x21e>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a4e      	ldr	r2, [pc, #312]	; (8005380 <HAL_GPIO_Init+0x34c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d101      	bne.n	800524e <HAL_GPIO_Init+0x21a>
 800524a:	2309      	movs	r3, #9
 800524c:	e012      	b.n	8005274 <HAL_GPIO_Init+0x240>
 800524e:	230a      	movs	r3, #10
 8005250:	e010      	b.n	8005274 <HAL_GPIO_Init+0x240>
 8005252:	2308      	movs	r3, #8
 8005254:	e00e      	b.n	8005274 <HAL_GPIO_Init+0x240>
 8005256:	2307      	movs	r3, #7
 8005258:	e00c      	b.n	8005274 <HAL_GPIO_Init+0x240>
 800525a:	2306      	movs	r3, #6
 800525c:	e00a      	b.n	8005274 <HAL_GPIO_Init+0x240>
 800525e:	2305      	movs	r3, #5
 8005260:	e008      	b.n	8005274 <HAL_GPIO_Init+0x240>
 8005262:	2304      	movs	r3, #4
 8005264:	e006      	b.n	8005274 <HAL_GPIO_Init+0x240>
 8005266:	2303      	movs	r3, #3
 8005268:	e004      	b.n	8005274 <HAL_GPIO_Init+0x240>
 800526a:	2302      	movs	r3, #2
 800526c:	e002      	b.n	8005274 <HAL_GPIO_Init+0x240>
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <HAL_GPIO_Init+0x240>
 8005272:	2300      	movs	r3, #0
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	f002 0203 	and.w	r2, r2, #3
 800527a:	0092      	lsls	r2, r2, #2
 800527c:	4093      	lsls	r3, r2
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	4313      	orrs	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005284:	4934      	ldr	r1, [pc, #208]	; (8005358 <HAL_GPIO_Init+0x324>)
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	089b      	lsrs	r3, r3, #2
 800528a:	3302      	adds	r3, #2
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005292:	4b3c      	ldr	r3, [pc, #240]	; (8005384 <HAL_GPIO_Init+0x350>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	43db      	mvns	r3, r3
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	4013      	ands	r3, r2
 80052a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052b6:	4a33      	ldr	r2, [pc, #204]	; (8005384 <HAL_GPIO_Init+0x350>)
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80052bc:	4b31      	ldr	r3, [pc, #196]	; (8005384 <HAL_GPIO_Init+0x350>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	43db      	mvns	r3, r3
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	4013      	ands	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052e0:	4a28      	ldr	r2, [pc, #160]	; (8005384 <HAL_GPIO_Init+0x350>)
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052e6:	4b27      	ldr	r3, [pc, #156]	; (8005384 <HAL_GPIO_Init+0x350>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	43db      	mvns	r3, r3
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	4013      	ands	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800530a:	4a1e      	ldr	r2, [pc, #120]	; (8005384 <HAL_GPIO_Init+0x350>)
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005310:	4b1c      	ldr	r3, [pc, #112]	; (8005384 <HAL_GPIO_Init+0x350>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	43db      	mvns	r3, r3
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	4013      	ands	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005334:	4a13      	ldr	r2, [pc, #76]	; (8005384 <HAL_GPIO_Init+0x350>)
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	3301      	adds	r3, #1
 800533e:	61fb      	str	r3, [r7, #28]
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	2b0f      	cmp	r3, #15
 8005344:	f67f ae86 	bls.w	8005054 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005348:	bf00      	nop
 800534a:	3724      	adds	r7, #36	; 0x24
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	40023800 	.word	0x40023800
 8005358:	40013800 	.word	0x40013800
 800535c:	40020000 	.word	0x40020000
 8005360:	40020400 	.word	0x40020400
 8005364:	40020800 	.word	0x40020800
 8005368:	40020c00 	.word	0x40020c00
 800536c:	40021000 	.word	0x40021000
 8005370:	40021400 	.word	0x40021400
 8005374:	40021800 	.word	0x40021800
 8005378:	40021c00 	.word	0x40021c00
 800537c:	40022000 	.word	0x40022000
 8005380:	40022400 	.word	0x40022400
 8005384:	40013c00 	.word	0x40013c00

08005388 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005392:	2300      	movs	r3, #0
 8005394:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800539a:	2300      	movs	r3, #0
 800539c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	e0d9      	b.n	8005558 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80053a4:	2201      	movs	r2, #1
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	4013      	ands	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	f040 80c9 	bne.w	8005552 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80053c0:	4a6a      	ldr	r2, [pc, #424]	; (800556c <HAL_GPIO_DeInit+0x1e4>)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	089b      	lsrs	r3, r3, #2
 80053c6:	3302      	adds	r3, #2
 80053c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053cc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	220f      	movs	r2, #15
 80053d8:	fa02 f303 	lsl.w	r3, r2, r3
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	4013      	ands	r3, r2
 80053e0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a62      	ldr	r2, [pc, #392]	; (8005570 <HAL_GPIO_DeInit+0x1e8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d037      	beq.n	800545a <HAL_GPIO_DeInit+0xd2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a61      	ldr	r2, [pc, #388]	; (8005574 <HAL_GPIO_DeInit+0x1ec>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d031      	beq.n	8005456 <HAL_GPIO_DeInit+0xce>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a60      	ldr	r2, [pc, #384]	; (8005578 <HAL_GPIO_DeInit+0x1f0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d02b      	beq.n	8005452 <HAL_GPIO_DeInit+0xca>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a5f      	ldr	r2, [pc, #380]	; (800557c <HAL_GPIO_DeInit+0x1f4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d025      	beq.n	800544e <HAL_GPIO_DeInit+0xc6>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a5e      	ldr	r2, [pc, #376]	; (8005580 <HAL_GPIO_DeInit+0x1f8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d01f      	beq.n	800544a <HAL_GPIO_DeInit+0xc2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a5d      	ldr	r2, [pc, #372]	; (8005584 <HAL_GPIO_DeInit+0x1fc>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d019      	beq.n	8005446 <HAL_GPIO_DeInit+0xbe>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a5c      	ldr	r2, [pc, #368]	; (8005588 <HAL_GPIO_DeInit+0x200>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d013      	beq.n	8005442 <HAL_GPIO_DeInit+0xba>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a5b      	ldr	r2, [pc, #364]	; (800558c <HAL_GPIO_DeInit+0x204>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00d      	beq.n	800543e <HAL_GPIO_DeInit+0xb6>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a5a      	ldr	r2, [pc, #360]	; (8005590 <HAL_GPIO_DeInit+0x208>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d007      	beq.n	800543a <HAL_GPIO_DeInit+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a59      	ldr	r2, [pc, #356]	; (8005594 <HAL_GPIO_DeInit+0x20c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d101      	bne.n	8005436 <HAL_GPIO_DeInit+0xae>
 8005432:	2309      	movs	r3, #9
 8005434:	e012      	b.n	800545c <HAL_GPIO_DeInit+0xd4>
 8005436:	230a      	movs	r3, #10
 8005438:	e010      	b.n	800545c <HAL_GPIO_DeInit+0xd4>
 800543a:	2308      	movs	r3, #8
 800543c:	e00e      	b.n	800545c <HAL_GPIO_DeInit+0xd4>
 800543e:	2307      	movs	r3, #7
 8005440:	e00c      	b.n	800545c <HAL_GPIO_DeInit+0xd4>
 8005442:	2306      	movs	r3, #6
 8005444:	e00a      	b.n	800545c <HAL_GPIO_DeInit+0xd4>
 8005446:	2305      	movs	r3, #5
 8005448:	e008      	b.n	800545c <HAL_GPIO_DeInit+0xd4>
 800544a:	2304      	movs	r3, #4
 800544c:	e006      	b.n	800545c <HAL_GPIO_DeInit+0xd4>
 800544e:	2303      	movs	r3, #3
 8005450:	e004      	b.n	800545c <HAL_GPIO_DeInit+0xd4>
 8005452:	2302      	movs	r3, #2
 8005454:	e002      	b.n	800545c <HAL_GPIO_DeInit+0xd4>
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <HAL_GPIO_DeInit+0xd4>
 800545a:	2300      	movs	r3, #0
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	f002 0203 	and.w	r2, r2, #3
 8005462:	0092      	lsls	r2, r2, #2
 8005464:	4093      	lsls	r3, r2
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	429a      	cmp	r2, r3
 800546a:	d132      	bne.n	80054d2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	220f      	movs	r2, #15
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800547c:	4a3b      	ldr	r2, [pc, #236]	; (800556c <HAL_GPIO_DeInit+0x1e4>)
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	089b      	lsrs	r3, r3, #2
 8005482:	3302      	adds	r3, #2
 8005484:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	43da      	mvns	r2, r3
 800548c:	4837      	ldr	r0, [pc, #220]	; (800556c <HAL_GPIO_DeInit+0x1e4>)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	089b      	lsrs	r3, r3, #2
 8005492:	400a      	ands	r2, r1
 8005494:	3302      	adds	r3, #2
 8005496:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800549a:	4b3f      	ldr	r3, [pc, #252]	; (8005598 <HAL_GPIO_DeInit+0x210>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	43db      	mvns	r3, r3
 80054a2:	493d      	ldr	r1, [pc, #244]	; (8005598 <HAL_GPIO_DeInit+0x210>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80054a8:	4b3b      	ldr	r3, [pc, #236]	; (8005598 <HAL_GPIO_DeInit+0x210>)
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	43db      	mvns	r3, r3
 80054b0:	4939      	ldr	r1, [pc, #228]	; (8005598 <HAL_GPIO_DeInit+0x210>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80054b6:	4b38      	ldr	r3, [pc, #224]	; (8005598 <HAL_GPIO_DeInit+0x210>)
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	43db      	mvns	r3, r3
 80054be:	4936      	ldr	r1, [pc, #216]	; (8005598 <HAL_GPIO_DeInit+0x210>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80054c4:	4b34      	ldr	r3, [pc, #208]	; (8005598 <HAL_GPIO_DeInit+0x210>)
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	43db      	mvns	r3, r3
 80054cc:	4932      	ldr	r1, [pc, #200]	; (8005598 <HAL_GPIO_DeInit+0x210>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	2103      	movs	r1, #3
 80054dc:	fa01 f303 	lsl.w	r3, r1, r3
 80054e0:	43db      	mvns	r3, r3
 80054e2:	401a      	ands	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	08da      	lsrs	r2, r3, #3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3208      	adds	r2, #8
 80054f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	220f      	movs	r2, #15
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	43db      	mvns	r3, r3
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	08d2      	lsrs	r2, r2, #3
 8005508:	4019      	ands	r1, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3208      	adds	r2, #8
 800550e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	2103      	movs	r1, #3
 800551c:	fa01 f303 	lsl.w	r3, r1, r3
 8005520:	43db      	mvns	r3, r3
 8005522:	401a      	ands	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	2101      	movs	r1, #1
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	fa01 f303 	lsl.w	r3, r1, r3
 8005534:	43db      	mvns	r3, r3
 8005536:	401a      	ands	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	2103      	movs	r1, #3
 8005546:	fa01 f303 	lsl.w	r3, r1, r3
 800554a:	43db      	mvns	r3, r3
 800554c:	401a      	ands	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	3301      	adds	r3, #1
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2b0f      	cmp	r3, #15
 800555c:	f67f af22 	bls.w	80053a4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005560:	bf00      	nop
 8005562:	371c      	adds	r7, #28
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	40013800 	.word	0x40013800
 8005570:	40020000 	.word	0x40020000
 8005574:	40020400 	.word	0x40020400
 8005578:	40020800 	.word	0x40020800
 800557c:	40020c00 	.word	0x40020c00
 8005580:	40021000 	.word	0x40021000
 8005584:	40021400 	.word	0x40021400
 8005588:	40021800 	.word	0x40021800
 800558c:	40021c00 	.word	0x40021c00
 8005590:	40022000 	.word	0x40022000
 8005594:	40022400 	.word	0x40022400
 8005598:	40013c00 	.word	0x40013c00

0800559c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691a      	ldr	r2, [r3, #16]
 80055ac:	887b      	ldrh	r3, [r7, #2]
 80055ae:	4013      	ands	r3, r2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80055b4:	2301      	movs	r3, #1
 80055b6:	73fb      	strb	r3, [r7, #15]
 80055b8:	e001      	b.n	80055be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80055ba:	2300      	movs	r3, #0
 80055bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80055be:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	807b      	strh	r3, [r7, #2]
 80055d8:	4613      	mov	r3, r2
 80055da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055dc:	787b      	ldrb	r3, [r7, #1]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055e2:	887a      	ldrh	r2, [r7, #2]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80055e8:	e003      	b.n	80055f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80055ea:	887b      	ldrh	r3, [r7, #2]
 80055ec:	041a      	lsls	r2, r3, #16
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	619a      	str	r2, [r3, #24]
}
 80055f2:	bf00      	nop
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80055fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005600:	b08d      	sub	sp, #52	; 0x34
 8005602:	af0a      	add	r7, sp, #40	; 0x28
 8005604:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e048      	b.n	80056a2 <HAL_HCD_Init+0xa4>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d106      	bne.n	800562a <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f01c f88b 	bl	8021740 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2203      	movs	r2, #3
 800562e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4618      	mov	r0, r3
 8005638:	f009 fb0f 	bl	800ec5a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	603b      	str	r3, [r7, #0]
 8005642:	687e      	ldr	r6, [r7, #4]
 8005644:	466d      	mov	r5, sp
 8005646:	f106 0410 	add.w	r4, r6, #16
 800564a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800564c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800564e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005652:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005656:	e885 0003 	stmia.w	r5, {r0, r1}
 800565a:	1d33      	adds	r3, r6, #4
 800565c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800565e:	6838      	ldr	r0, [r7, #0]
 8005660:	f009 fa92 	bl	800eb88 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2101      	movs	r1, #1
 800566a:	4618      	mov	r0, r3
 800566c:	f009 fb06 	bl	800ec7c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	687e      	ldr	r6, [r7, #4]
 8005678:	466d      	mov	r5, sp
 800567a:	f106 0410 	add.w	r4, r6, #16
 800567e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005686:	e894 0003 	ldmia.w	r4, {r0, r1}
 800568a:	e885 0003 	stmia.w	r5, {r0, r1}
 800568e:	1d33      	adds	r3, r6, #4
 8005690:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005692:	6838      	ldr	r0, [r7, #0]
 8005694:	f009 fc18 	bl	800eec8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056aa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80056aa:	b590      	push	{r4, r7, lr}
 80056ac:	b089      	sub	sp, #36	; 0x24
 80056ae:	af04      	add	r7, sp, #16
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	4608      	mov	r0, r1
 80056b4:	4611      	mov	r1, r2
 80056b6:	461a      	mov	r2, r3
 80056b8:	4603      	mov	r3, r0
 80056ba:	70fb      	strb	r3, [r7, #3]
 80056bc:	460b      	mov	r3, r1
 80056be:	70bb      	strb	r3, [r7, #2]
 80056c0:	4613      	mov	r3, r2
 80056c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_HCD_HC_Init+0x28>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e07f      	b.n	80057d2 <HAL_HCD_HC_Init+0x128>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80056da:	78fa      	ldrb	r2, [r7, #3]
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	4613      	mov	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	440b      	add	r3, r1
 80056e8:	333d      	adds	r3, #61	; 0x3d
 80056ea:	2200      	movs	r2, #0
 80056ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80056ee:	78fa      	ldrb	r2, [r7, #3]
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	440b      	add	r3, r1
 80056fc:	3338      	adds	r3, #56	; 0x38
 80056fe:	787a      	ldrb	r2, [r7, #1]
 8005700:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005702:	78fa      	ldrb	r2, [r7, #3]
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	4613      	mov	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	440b      	add	r3, r1
 8005710:	3340      	adds	r3, #64	; 0x40
 8005712:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005714:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005716:	78fa      	ldrb	r2, [r7, #3]
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	440b      	add	r3, r1
 8005724:	3339      	adds	r3, #57	; 0x39
 8005726:	78fa      	ldrb	r2, [r7, #3]
 8005728:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800572a:	78fa      	ldrb	r2, [r7, #3]
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	4613      	mov	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	440b      	add	r3, r1
 8005738:	333f      	adds	r3, #63	; 0x3f
 800573a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800573e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005740:	78fa      	ldrb	r2, [r7, #3]
 8005742:	78bb      	ldrb	r3, [r7, #2]
 8005744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005748:	b2d8      	uxtb	r0, r3
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	440b      	add	r3, r1
 8005756:	333a      	adds	r3, #58	; 0x3a
 8005758:	4602      	mov	r2, r0
 800575a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800575c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005760:	2b00      	cmp	r3, #0
 8005762:	da0a      	bge.n	800577a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005764:	78fa      	ldrb	r2, [r7, #3]
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	4613      	mov	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	440b      	add	r3, r1
 8005772:	333b      	adds	r3, #59	; 0x3b
 8005774:	2201      	movs	r2, #1
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	e009      	b.n	800578e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800577a:	78fa      	ldrb	r2, [r7, #3]
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	440b      	add	r3, r1
 8005788:	333b      	adds	r3, #59	; 0x3b
 800578a:	2200      	movs	r2, #0
 800578c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800578e:	78fa      	ldrb	r2, [r7, #3]
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	4613      	mov	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	440b      	add	r3, r1
 800579c:	333c      	adds	r3, #60	; 0x3c
 800579e:	f897 2020 	ldrb.w	r2, [r7, #32]
 80057a2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6818      	ldr	r0, [r3, #0]
 80057a8:	787c      	ldrb	r4, [r7, #1]
 80057aa:	78ba      	ldrb	r2, [r7, #2]
 80057ac:	78f9      	ldrb	r1, [r7, #3]
 80057ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057b0:	9302      	str	r3, [sp, #8]
 80057b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057b6:	9301      	str	r3, [sp, #4]
 80057b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	4623      	mov	r3, r4
 80057c0:	f009 fcf8 	bl	800f1b4 <USB_HC_Init>
 80057c4:	4603      	mov	r3, r0
 80057c6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd90      	pop	{r4, r7, pc}

080057da <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	460b      	mov	r3, r1
 80057e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_HCD_HC_Halt+0x1e>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e00f      	b.n	8005818 <HAL_HCD_HC_Halt+0x3e>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	78fa      	ldrb	r2, [r7, #3]
 8005806:	4611      	mov	r1, r2
 8005808:	4618      	mov	r0, r3
 800580a:	f009 ff32 	bl	800f672 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8005816:	7bfb      	ldrb	r3, [r7, #15]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	4608      	mov	r0, r1
 800582a:	4611      	mov	r1, r2
 800582c:	461a      	mov	r2, r3
 800582e:	4603      	mov	r3, r0
 8005830:	70fb      	strb	r3, [r7, #3]
 8005832:	460b      	mov	r3, r1
 8005834:	70bb      	strb	r3, [r7, #2]
 8005836:	4613      	mov	r3, r2
 8005838:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800583a:	78fa      	ldrb	r2, [r7, #3]
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	4613      	mov	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	440b      	add	r3, r1
 8005848:	333b      	adds	r3, #59	; 0x3b
 800584a:	78ba      	ldrb	r2, [r7, #2]
 800584c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800584e:	78fa      	ldrb	r2, [r7, #3]
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	440b      	add	r3, r1
 800585c:	333f      	adds	r3, #63	; 0x3f
 800585e:	787a      	ldrb	r2, [r7, #1]
 8005860:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005862:	7c3b      	ldrb	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005868:	78fa      	ldrb	r2, [r7, #3]
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	440b      	add	r3, r1
 8005876:	3342      	adds	r3, #66	; 0x42
 8005878:	2203      	movs	r2, #3
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	e009      	b.n	8005892 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800587e:	78fa      	ldrb	r2, [r7, #3]
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	440b      	add	r3, r1
 800588c:	3342      	adds	r3, #66	; 0x42
 800588e:	2202      	movs	r2, #2
 8005890:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005892:	787b      	ldrb	r3, [r7, #1]
 8005894:	2b03      	cmp	r3, #3
 8005896:	f200 80d6 	bhi.w	8005a46 <HAL_HCD_HC_SubmitRequest+0x226>
 800589a:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <HAL_HCD_HC_SubmitRequest+0x80>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	080058b1 	.word	0x080058b1
 80058a4:	08005a31 	.word	0x08005a31
 80058a8:	0800591d 	.word	0x0800591d
 80058ac:	080059a7 	.word	0x080059a7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80058b0:	7c3b      	ldrb	r3, [r7, #16]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	f040 80c9 	bne.w	8005a4a <HAL_HCD_HC_SubmitRequest+0x22a>
 80058b8:	78bb      	ldrb	r3, [r7, #2]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f040 80c5 	bne.w	8005a4a <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80058c0:	8b3b      	ldrh	r3, [r7, #24]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d109      	bne.n	80058da <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80058c6:	78fa      	ldrb	r2, [r7, #3]
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	440b      	add	r3, r1
 80058d4:	3351      	adds	r3, #81	; 0x51
 80058d6:	2201      	movs	r2, #1
 80058d8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80058da:	78fa      	ldrb	r2, [r7, #3]
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	440b      	add	r3, r1
 80058e8:	3351      	adds	r3, #81	; 0x51
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10a      	bne.n	8005906 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80058f0:	78fa      	ldrb	r2, [r7, #3]
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	440b      	add	r3, r1
 80058fe:	3342      	adds	r3, #66	; 0x42
 8005900:	2200      	movs	r2, #0
 8005902:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005904:	e0a1      	b.n	8005a4a <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005906:	78fa      	ldrb	r2, [r7, #3]
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	4613      	mov	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	00db      	lsls	r3, r3, #3
 8005912:	440b      	add	r3, r1
 8005914:	3342      	adds	r3, #66	; 0x42
 8005916:	2202      	movs	r2, #2
 8005918:	701a      	strb	r2, [r3, #0]
      break;
 800591a:	e096      	b.n	8005a4a <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800591c:	78bb      	ldrb	r3, [r7, #2]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d120      	bne.n	8005964 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005922:	78fa      	ldrb	r2, [r7, #3]
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	440b      	add	r3, r1
 8005930:	3351      	adds	r3, #81	; 0x51
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005938:	78fa      	ldrb	r2, [r7, #3]
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	440b      	add	r3, r1
 8005946:	3342      	adds	r3, #66	; 0x42
 8005948:	2200      	movs	r2, #0
 800594a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800594c:	e07e      	b.n	8005a4c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800594e:	78fa      	ldrb	r2, [r7, #3]
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	440b      	add	r3, r1
 800595c:	3342      	adds	r3, #66	; 0x42
 800595e:	2202      	movs	r2, #2
 8005960:	701a      	strb	r2, [r3, #0]
      break;
 8005962:	e073      	b.n	8005a4c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005964:	78fa      	ldrb	r2, [r7, #3]
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	440b      	add	r3, r1
 8005972:	3350      	adds	r3, #80	; 0x50
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10a      	bne.n	8005990 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800597a:	78fa      	ldrb	r2, [r7, #3]
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	4613      	mov	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	440b      	add	r3, r1
 8005988:	3342      	adds	r3, #66	; 0x42
 800598a:	2200      	movs	r2, #0
 800598c:	701a      	strb	r2, [r3, #0]
      break;
 800598e:	e05d      	b.n	8005a4c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005990:	78fa      	ldrb	r2, [r7, #3]
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	440b      	add	r3, r1
 800599e:	3342      	adds	r3, #66	; 0x42
 80059a0:	2202      	movs	r2, #2
 80059a2:	701a      	strb	r2, [r3, #0]
      break;
 80059a4:	e052      	b.n	8005a4c <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80059a6:	78bb      	ldrb	r3, [r7, #2]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d120      	bne.n	80059ee <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80059ac:	78fa      	ldrb	r2, [r7, #3]
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	440b      	add	r3, r1
 80059ba:	3351      	adds	r3, #81	; 0x51
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10a      	bne.n	80059d8 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80059c2:	78fa      	ldrb	r2, [r7, #3]
 80059c4:	6879      	ldr	r1, [r7, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	440b      	add	r3, r1
 80059d0:	3342      	adds	r3, #66	; 0x42
 80059d2:	2200      	movs	r2, #0
 80059d4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80059d6:	e039      	b.n	8005a4c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80059d8:	78fa      	ldrb	r2, [r7, #3]
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	4613      	mov	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	440b      	add	r3, r1
 80059e6:	3342      	adds	r3, #66	; 0x42
 80059e8:	2202      	movs	r2, #2
 80059ea:	701a      	strb	r2, [r3, #0]
      break;
 80059ec:	e02e      	b.n	8005a4c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80059ee:	78fa      	ldrb	r2, [r7, #3]
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	440b      	add	r3, r1
 80059fc:	3350      	adds	r3, #80	; 0x50
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005a04:	78fa      	ldrb	r2, [r7, #3]
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	440b      	add	r3, r1
 8005a12:	3342      	adds	r3, #66	; 0x42
 8005a14:	2200      	movs	r2, #0
 8005a16:	701a      	strb	r2, [r3, #0]
      break;
 8005a18:	e018      	b.n	8005a4c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005a1a:	78fa      	ldrb	r2, [r7, #3]
 8005a1c:	6879      	ldr	r1, [r7, #4]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	440b      	add	r3, r1
 8005a28:	3342      	adds	r3, #66	; 0x42
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	701a      	strb	r2, [r3, #0]
      break;
 8005a2e:	e00d      	b.n	8005a4c <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005a30:	78fa      	ldrb	r2, [r7, #3]
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	440b      	add	r3, r1
 8005a3e:	3342      	adds	r3, #66	; 0x42
 8005a40:	2200      	movs	r2, #0
 8005a42:	701a      	strb	r2, [r3, #0]
      break;
 8005a44:	e002      	b.n	8005a4c <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8005a46:	bf00      	nop
 8005a48:	e000      	b.n	8005a4c <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8005a4a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005a4c:	78fa      	ldrb	r2, [r7, #3]
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	440b      	add	r3, r1
 8005a5a:	3344      	adds	r3, #68	; 0x44
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005a60:	78fa      	ldrb	r2, [r7, #3]
 8005a62:	8b39      	ldrh	r1, [r7, #24]
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	4403      	add	r3, r0
 8005a70:	3348      	adds	r3, #72	; 0x48
 8005a72:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005a74:	78fa      	ldrb	r2, [r7, #3]
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	440b      	add	r3, r1
 8005a82:	335c      	adds	r3, #92	; 0x5c
 8005a84:	2200      	movs	r2, #0
 8005a86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005a88:	78fa      	ldrb	r2, [r7, #3]
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	440b      	add	r3, r1
 8005a96:	334c      	adds	r3, #76	; 0x4c
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005a9c:	78fa      	ldrb	r2, [r7, #3]
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	440b      	add	r3, r1
 8005aaa:	3339      	adds	r3, #57	; 0x39
 8005aac:	78fa      	ldrb	r2, [r7, #3]
 8005aae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005ab0:	78fa      	ldrb	r2, [r7, #3]
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	440b      	add	r3, r1
 8005abe:	335d      	adds	r3, #93	; 0x5d
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	78fa      	ldrb	r2, [r7, #3]
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	3338      	adds	r3, #56	; 0x38
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	18d1      	adds	r1, r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f009 fc72 	bl	800f3c8 <USB_HC_StartXfer>
 8005ae4:	4603      	mov	r3, r0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop

08005af0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f009 f99b 	bl	800ee42 <USB_GetMode>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	f040 80f1 	bne.w	8005cf6 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f009 f97f 	bl	800ee1c <USB_ReadInterrupts>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 80e7 	beq.w	8005cf4 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f009 f976 	bl	800ee1c <USB_ReadInterrupts>
 8005b30:	4603      	mov	r3, r0
 8005b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b3a:	d104      	bne.n	8005b46 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005b44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f009 f966 	bl	800ee1c <USB_ReadInterrupts>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b5a:	d104      	bne.n	8005b66 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f009 f956 	bl	800ee1c <USB_ReadInterrupts>
 8005b70:	4603      	mov	r3, r0
 8005b72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b7a:	d104      	bne.n	8005b86 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005b84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f009 f946 	bl	800ee1c <USB_ReadInterrupts>
 8005b90:	4603      	mov	r3, r0
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d103      	bne.n	8005ba2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f009 f938 	bl	800ee1c <USB_ReadInterrupts>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bb6:	d117      	bne.n	8005be8 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005bc6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005bca:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f01b fe29 	bl	8021824 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f009 fa25 	bl	800f028 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f009 f915 	bl	800ee1c <USB_ReadInterrupts>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bfc:	d102      	bne.n	8005c04 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f001 f8c8 	bl	8006d94 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f009 f907 	bl	800ee1c <USB_ReadInterrupts>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	f003 0308 	and.w	r3, r3, #8
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d106      	bne.n	8005c26 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f01b fde7 	bl	80217ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2208      	movs	r2, #8
 8005c24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f009 f8f6 	bl	800ee1c <USB_ReadInterrupts>
 8005c30:	4603      	mov	r3, r0
 8005c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c3a:	d138      	bne.n	8005cae <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f009 fd05 	bl	800f650 <USB_HC_ReadInterrupt>
 8005c46:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	e025      	b.n	8005c9a <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d018      	beq.n	8005c94 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c78:	d106      	bne.n	8005c88 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f8cf 	bl	8005e24 <HCD_HC_IN_IRQHandler>
 8005c86:	e005      	b.n	8005c94 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fc5f 	bl	8006552 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	3301      	adds	r3, #1
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d3d4      	bcc.n	8005c4e <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f009 f8b2 	bl	800ee1c <USB_ReadInterrupts>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f003 0310 	and.w	r3, r3, #16
 8005cbe:	2b10      	cmp	r3, #16
 8005cc0:	d101      	bne.n	8005cc6 <HAL_HCD_IRQHandler+0x1d6>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <HAL_HCD_IRQHandler+0x1d8>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d014      	beq.n	8005cf6 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0210 	bic.w	r2, r2, #16
 8005cda:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 ffad 	bl	8006c3c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	699a      	ldr	r2, [r3, #24]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f042 0210 	orr.w	r2, r2, #16
 8005cf0:	619a      	str	r2, [r3, #24]
 8005cf2:	e000      	b.n	8005cf6 <HAL_HCD_IRQHandler+0x206>
      return;
 8005cf4:	bf00      	nop
    }
  }
}
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d101      	bne.n	8005d12 <HAL_HCD_Start+0x16>
 8005d0e:	2302      	movs	r3, #2
 8005d10:	e013      	b.n	8005d3a <HAL_HCD_Start+0x3e>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f008 ff8a 	bl	800ec38 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2101      	movs	r1, #1
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f009 f9e0 	bl	800f0f0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d101      	bne.n	8005d58 <HAL_HCD_Stop+0x16>
 8005d54:	2302      	movs	r3, #2
 8005d56:	e00d      	b.n	8005d74 <HAL_HCD_Stop+0x32>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f009 fdbf 	bl	800f8e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f009 f987 	bl	800f09c <USB_ResetPort>
 8005d8e:	4603      	mov	r3, r0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005da4:	78fa      	ldrb	r2, [r7, #3]
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	4613      	mov	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	440b      	add	r3, r1
 8005db2:	335c      	adds	r3, #92	; 0x5c
 8005db4:	781b      	ldrb	r3, [r3, #0]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005dce:	78fa      	ldrb	r2, [r7, #3]
 8005dd0:	6879      	ldr	r1, [r7, #4]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	440b      	add	r3, r1
 8005ddc:	334c      	adds	r3, #76	; 0x4c
 8005dde:	681b      	ldr	r3, [r3, #0]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f009 f9c9 	bl	800f190 <USB_GetCurrentFrame>
 8005dfe:	4603      	mov	r3, r0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f009 f9a4 	bl	800f162 <USB_GetHostSpeed>
 8005e1a:	4603      	mov	r3, r0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	d119      	bne.n	8005e88 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e60:	461a      	mov	r2, r3
 8005e62:	2304      	movs	r3, #4
 8005e64:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	0151      	lsls	r1, r2, #5
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e80:	f043 0302 	orr.w	r3, r3, #2
 8005e84:	60d3      	str	r3, [r2, #12]
 8005e86:	e095      	b.n	8005fb4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	d109      	bne.n	8005eb2 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eaa:	461a      	mov	r2, r3
 8005eac:	2320      	movs	r3, #32
 8005eae:	6093      	str	r3, [r2, #8]
 8005eb0:	e080      	b.n	8005fb4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d134      	bne.n	8005f32 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	0151      	lsls	r1, r2, #5
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	440a      	add	r2, r1
 8005ede:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ee2:	f043 0302 	orr.w	r3, r3, #2
 8005ee6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4613      	mov	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	440b      	add	r3, r1
 8005ef6:	335d      	adds	r3, #93	; 0x5d
 8005ef8:	2205      	movs	r2, #5
 8005efa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f08:	461a      	mov	r2, r3
 8005f0a:	2310      	movs	r3, #16
 8005f0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	2308      	movs	r3, #8
 8005f1e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	4611      	mov	r1, r2
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f009 fba1 	bl	800f672 <USB_HC_Halt>
 8005f30:	e040      	b.n	8005fb4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f48:	d134      	bne.n	8005fb4 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	0151      	lsls	r1, r2, #5
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	440a      	add	r2, r1
 8005f60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f64:	f043 0302 	orr.w	r3, r3, #2
 8005f68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	4611      	mov	r1, r2
 8005f74:	4618      	mov	r0, r3
 8005f76:	f009 fb7c 	bl	800f672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f86:	461a      	mov	r2, r3
 8005f88:	2310      	movs	r3, #16
 8005f8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	440b      	add	r3, r1
 8005f9a:	335d      	adds	r3, #93	; 0x5d
 8005f9c:	2208      	movs	r2, #8
 8005f9e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fac:	461a      	mov	r2, r3
 8005fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fb2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fca:	d122      	bne.n	8006012 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	0151      	lsls	r1, r2, #5
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	440a      	add	r2, r1
 8005fe2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fe6:	f043 0302 	orr.w	r3, r3, #2
 8005fea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f009 fb3b 	bl	800f672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	4413      	add	r3, r2
 8006004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006008:	461a      	mov	r2, r3
 800600a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800600e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006010:	e29b      	b.n	800654a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	4413      	add	r3, r2
 800601a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b01      	cmp	r3, #1
 8006026:	f040 80c1 	bne.w	80061ac <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d01b      	beq.n	800606a <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	440b      	add	r3, r1
 8006040:	3348      	adds	r3, #72	; 0x48
 8006042:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	0159      	lsls	r1, r3, #5
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	440b      	add	r3, r1
 800604c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8006056:	1ad1      	subs	r1, r2, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4613      	mov	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	4403      	add	r3, r0
 8006066:	334c      	adds	r3, #76	; 0x4c
 8006068:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4613      	mov	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	440b      	add	r3, r1
 8006078:	335d      	adds	r3, #93	; 0x5d
 800607a:	2201      	movs	r2, #1
 800607c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4613      	mov	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	440b      	add	r3, r1
 800608c:	3358      	adds	r3, #88	; 0x58
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	4413      	add	r3, r2
 800609a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609e:	461a      	mov	r2, r3
 80060a0:	2301      	movs	r3, #1
 80060a2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	4613      	mov	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	440b      	add	r3, r1
 80060b2:	333f      	adds	r3, #63	; 0x3f
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	440b      	add	r3, r1
 80060c8:	333f      	adds	r3, #63	; 0x3f
 80060ca:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d121      	bne.n	8006114 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ea:	f043 0302 	orr.w	r3, r3, #2
 80060ee:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	4611      	mov	r1, r2
 80060fa:	4618      	mov	r0, r3
 80060fc:	f009 fab9 	bl	800f672 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	4413      	add	r3, r2
 8006108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610c:	461a      	mov	r2, r3
 800610e:	2310      	movs	r3, #16
 8006110:	6093      	str	r3, [r2, #8]
 8006112:	e034      	b.n	800617e <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	4613      	mov	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	440b      	add	r3, r1
 8006122:	333f      	adds	r3, #63	; 0x3f
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b03      	cmp	r3, #3
 8006128:	d129      	bne.n	800617e <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	4413      	add	r3, r2
 8006132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	0151      	lsls	r1, r2, #5
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	440a      	add	r2, r1
 8006140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006144:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006148:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4613      	mov	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	440b      	add	r3, r1
 8006158:	335c      	adds	r3, #92	; 0x5c
 800615a:	2201      	movs	r2, #1
 800615c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	b2d8      	uxtb	r0, r3
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	4613      	mov	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	440b      	add	r3, r1
 8006170:	335c      	adds	r3, #92	; 0x5c
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	461a      	mov	r2, r3
 8006176:	4601      	mov	r1, r0
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f01b fb61 	bl	8021840 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4613      	mov	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	440b      	add	r3, r1
 800618c:	3350      	adds	r3, #80	; 0x50
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	f083 0301 	eor.w	r3, r3, #1
 8006194:	b2d8      	uxtb	r0, r3
 8006196:	6879      	ldr	r1, [r7, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4613      	mov	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	440b      	add	r3, r1
 80061a4:	3350      	adds	r3, #80	; 0x50
 80061a6:	4602      	mov	r2, r0
 80061a8:	701a      	strb	r2, [r3, #0]
}
 80061aa:	e1ce      	b.n	800654a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b02      	cmp	r3, #2
 80061c0:	f040 80f1 	bne.w	80063a6 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061de:	f023 0302 	bic.w	r3, r3, #2
 80061e2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	440b      	add	r3, r1
 80061f2:	335d      	adds	r3, #93	; 0x5d
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d10a      	bne.n	8006210 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80061fa:	6879      	ldr	r1, [r7, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4613      	mov	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	440b      	add	r3, r1
 8006208:	335c      	adds	r3, #92	; 0x5c
 800620a:	2201      	movs	r2, #1
 800620c:	701a      	strb	r2, [r3, #0]
 800620e:	e0b0      	b.n	8006372 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	440b      	add	r3, r1
 800621e:	335d      	adds	r3, #93	; 0x5d
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b05      	cmp	r3, #5
 8006224:	d10a      	bne.n	800623c <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	440b      	add	r3, r1
 8006234:	335c      	adds	r3, #92	; 0x5c
 8006236:	2205      	movs	r2, #5
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	e09a      	b.n	8006372 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800623c:	6879      	ldr	r1, [r7, #4]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	440b      	add	r3, r1
 800624a:	335d      	adds	r3, #93	; 0x5d
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b06      	cmp	r3, #6
 8006250:	d00a      	beq.n	8006268 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4613      	mov	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	440b      	add	r3, r1
 8006260:	335d      	adds	r3, #93	; 0x5d
 8006262:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006264:	2b08      	cmp	r3, #8
 8006266:	d156      	bne.n	8006316 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4613      	mov	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	440b      	add	r3, r1
 8006276:	3358      	adds	r3, #88	; 0x58
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	1c59      	adds	r1, r3, #1
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	4613      	mov	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	4403      	add	r3, r0
 800628a:	3358      	adds	r3, #88	; 0x58
 800628c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4613      	mov	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	00db      	lsls	r3, r3, #3
 800629a:	440b      	add	r3, r1
 800629c:	3358      	adds	r3, #88	; 0x58
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d914      	bls.n	80062ce <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80062a4:	6879      	ldr	r1, [r7, #4]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	440b      	add	r3, r1
 80062b2:	3358      	adds	r3, #88	; 0x58
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80062b8:	6879      	ldr	r1, [r7, #4]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	440b      	add	r3, r1
 80062c6:	335c      	adds	r3, #92	; 0x5c
 80062c8:	2204      	movs	r2, #4
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	e009      	b.n	80062e2 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4613      	mov	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	00db      	lsls	r3, r3, #3
 80062da:	440b      	add	r3, r1
 80062dc:	335c      	adds	r3, #92	; 0x5c
 80062de:	2202      	movs	r2, #2
 80062e0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062f8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006300:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	4413      	add	r3, r2
 800630a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630e:	461a      	mov	r2, r3
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	6013      	str	r3, [r2, #0]
 8006314:	e02d      	b.n	8006372 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4613      	mov	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	00db      	lsls	r3, r3, #3
 8006322:	440b      	add	r3, r1
 8006324:	335d      	adds	r3, #93	; 0x5d
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b03      	cmp	r3, #3
 800632a:	d122      	bne.n	8006372 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800632c:	6879      	ldr	r1, [r7, #4]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	440b      	add	r3, r1
 800633a:	335c      	adds	r3, #92	; 0x5c
 800633c:	2202      	movs	r2, #2
 800633e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	4413      	add	r3, r2
 8006348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006356:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800635e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	4413      	add	r3, r2
 8006368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636c:	461a      	mov	r2, r3
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	4413      	add	r3, r2
 800637a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637e:	461a      	mov	r2, r3
 8006380:	2302      	movs	r3, #2
 8006382:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	b2d8      	uxtb	r0, r3
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4613      	mov	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	440b      	add	r3, r1
 8006396:	335c      	adds	r3, #92	; 0x5c
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	4601      	mov	r1, r0
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f01b fa4e 	bl	8021840 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80063a4:	e0d1      	b.n	800654a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b8:	2b80      	cmp	r3, #128	; 0x80
 80063ba:	d13e      	bne.n	800643a <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063d6:	f043 0302 	orr.w	r3, r3, #2
 80063da:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	440b      	add	r3, r1
 80063ea:	3358      	adds	r3, #88	; 0x58
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	1c59      	adds	r1, r3, #1
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	4403      	add	r3, r0
 80063fe:	3358      	adds	r3, #88	; 0x58
 8006400:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	00db      	lsls	r3, r3, #3
 800640e:	440b      	add	r3, r1
 8006410:	335d      	adds	r3, #93	; 0x5d
 8006412:	2206      	movs	r2, #6
 8006414:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	4611      	mov	r1, r2
 8006420:	4618      	mov	r0, r3
 8006422:	f009 f926 	bl	800f672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	4413      	add	r3, r2
 800642e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006432:	461a      	mov	r2, r3
 8006434:	2380      	movs	r3, #128	; 0x80
 8006436:	6093      	str	r3, [r2, #8]
}
 8006438:	e087      	b.n	800654a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	4413      	add	r3, r2
 8006442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f003 0310 	and.w	r3, r3, #16
 800644c:	2b10      	cmp	r3, #16
 800644e:	d17c      	bne.n	800654a <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006450:	6879      	ldr	r1, [r7, #4]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4613      	mov	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	440b      	add	r3, r1
 800645e:	333f      	adds	r3, #63	; 0x3f
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	2b03      	cmp	r3, #3
 8006464:	d122      	bne.n	80064ac <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	00db      	lsls	r3, r3, #3
 8006472:	440b      	add	r3, r1
 8006474:	3358      	adds	r3, #88	; 0x58
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	4413      	add	r3, r2
 8006482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	440a      	add	r2, r1
 8006490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006494:	f043 0302 	orr.w	r3, r3, #2
 8006498:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	4611      	mov	r1, r2
 80064a4:	4618      	mov	r0, r3
 80064a6:	f009 f8e4 	bl	800f672 <USB_HC_Halt>
 80064aa:	e045      	b.n	8006538 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	440b      	add	r3, r1
 80064ba:	333f      	adds	r3, #63	; 0x3f
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	440b      	add	r3, r1
 80064d0:	333f      	adds	r3, #63	; 0x3f
 80064d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d12f      	bne.n	8006538 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80064d8:	6879      	ldr	r1, [r7, #4]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4613      	mov	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	440b      	add	r3, r1
 80064e6:	3358      	adds	r3, #88	; 0x58
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d121      	bne.n	8006538 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80064f4:	6879      	ldr	r1, [r7, #4]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4613      	mov	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	440b      	add	r3, r1
 8006502:	335d      	adds	r3, #93	; 0x5d
 8006504:	2203      	movs	r2, #3
 8006506:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	4413      	add	r3, r2
 8006510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	440a      	add	r2, r1
 800651e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006522:	f043 0302 	orr.w	r3, r3, #2
 8006526:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	4611      	mov	r1, r2
 8006532:	4618      	mov	r0, r3
 8006534:	f009 f89d 	bl	800f672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	4413      	add	r3, r2
 8006540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006544:	461a      	mov	r2, r3
 8006546:	2310      	movs	r3, #16
 8006548:	6093      	str	r3, [r2, #8]
}
 800654a:	bf00      	nop
 800654c:	3718      	adds	r7, #24
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b086      	sub	sp, #24
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	460b      	mov	r3, r1
 800655c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	4413      	add	r3, r2
 8006574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 0304 	and.w	r3, r3, #4
 800657e:	2b04      	cmp	r3, #4
 8006580:	d119      	bne.n	80065b6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	4413      	add	r3, r2
 800658a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658e:	461a      	mov	r2, r3
 8006590:	2304      	movs	r3, #4
 8006592:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	4413      	add	r3, r2
 800659c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ae:	f043 0302 	orr.w	r3, r3, #2
 80065b2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80065b4:	e33e      	b.n	8006c34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f003 0320 	and.w	r3, r3, #32
 80065c8:	2b20      	cmp	r3, #32
 80065ca:	d141      	bne.n	8006650 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d8:	461a      	mov	r2, r3
 80065da:	2320      	movs	r3, #32
 80065dc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	4613      	mov	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	00db      	lsls	r3, r3, #3
 80065ea:	440b      	add	r3, r1
 80065ec:	333d      	adds	r3, #61	; 0x3d
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	f040 831f 	bne.w	8006c34 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4613      	mov	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	00db      	lsls	r3, r3, #3
 8006602:	440b      	add	r3, r1
 8006604:	333d      	adds	r3, #61	; 0x3d
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4613      	mov	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	440b      	add	r3, r1
 8006618:	335c      	adds	r3, #92	; 0x5c
 800661a:	2202      	movs	r2, #2
 800661c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	4413      	add	r3, r2
 8006626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	0151      	lsls	r1, r2, #5
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	440a      	add	r2, r1
 8006634:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006638:	f043 0302 	orr.w	r3, r3, #2
 800663c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	b2d2      	uxtb	r2, r2
 8006646:	4611      	mov	r1, r2
 8006648:	4618      	mov	r0, r3
 800664a:	f009 f812 	bl	800f672 <USB_HC_Halt>
}
 800664e:	e2f1      	b.n	8006c34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	4413      	add	r3, r2
 8006658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d13f      	bne.n	80066e6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	440b      	add	r3, r1
 8006674:	335d      	adds	r3, #93	; 0x5d
 8006676:	2204      	movs	r2, #4
 8006678:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	00db      	lsls	r3, r3, #3
 8006686:	440b      	add	r3, r1
 8006688:	333d      	adds	r3, #61	; 0x3d
 800668a:	2201      	movs	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	440b      	add	r3, r1
 800669c:	3358      	adds	r3, #88	; 0x58
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	0151      	lsls	r1, r2, #5
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	440a      	add	r2, r1
 80066b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066bc:	f043 0302 	orr.w	r3, r3, #2
 80066c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	b2d2      	uxtb	r2, r2
 80066ca:	4611      	mov	r1, r2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f008 ffd0 	bl	800f672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066de:	461a      	mov	r2, r3
 80066e0:	2340      	movs	r3, #64	; 0x40
 80066e2:	6093      	str	r3, [r2, #8]
}
 80066e4:	e2a6      	b.n	8006c34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066fc:	d122      	bne.n	8006744 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	4413      	add	r3, r2
 8006706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	0151      	lsls	r1, r2, #5
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	440a      	add	r2, r1
 8006714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006718:	f043 0302 	orr.w	r3, r3, #2
 800671c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	b2d2      	uxtb	r2, r2
 8006726:	4611      	mov	r1, r2
 8006728:	4618      	mov	r0, r3
 800672a:	f008 ffa2 	bl	800f672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	4413      	add	r3, r2
 8006736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673a:	461a      	mov	r2, r3
 800673c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006740:	6093      	str	r3, [r2, #8]
}
 8006742:	e277      	b.n	8006c34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	4413      	add	r3, r2
 800674c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b01      	cmp	r3, #1
 8006758:	d135      	bne.n	80067c6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4613      	mov	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	440b      	add	r3, r1
 8006768:	3358      	adds	r3, #88	; 0x58
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	4413      	add	r3, r2
 8006776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	0151      	lsls	r1, r2, #5
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	440a      	add	r2, r1
 8006784:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006788:	f043 0302 	orr.w	r3, r3, #2
 800678c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	b2d2      	uxtb	r2, r2
 8006796:	4611      	mov	r1, r2
 8006798:	4618      	mov	r0, r3
 800679a:	f008 ff6a 	bl	800f672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067aa:	461a      	mov	r2, r3
 80067ac:	2301      	movs	r3, #1
 80067ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	440b      	add	r3, r1
 80067be:	335d      	adds	r3, #93	; 0x5d
 80067c0:	2201      	movs	r2, #1
 80067c2:	701a      	strb	r2, [r3, #0]
}
 80067c4:	e236      	b.n	8006c34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f003 0308 	and.w	r3, r3, #8
 80067d8:	2b08      	cmp	r3, #8
 80067da:	d12b      	bne.n	8006834 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e8:	461a      	mov	r2, r3
 80067ea:	2308      	movs	r3, #8
 80067ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	0151      	lsls	r1, r2, #5
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	440a      	add	r2, r1
 8006804:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006808:	f043 0302 	orr.w	r3, r3, #2
 800680c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	4611      	mov	r1, r2
 8006818:	4618      	mov	r0, r3
 800681a:	f008 ff2a 	bl	800f672 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	440b      	add	r3, r1
 800682c:	335d      	adds	r3, #93	; 0x5d
 800682e:	2205      	movs	r2, #5
 8006830:	701a      	strb	r2, [r3, #0]
}
 8006832:	e1ff      	b.n	8006c34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	4413      	add	r3, r2
 800683c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 0310 	and.w	r3, r3, #16
 8006846:	2b10      	cmp	r3, #16
 8006848:	d155      	bne.n	80068f6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	00db      	lsls	r3, r3, #3
 8006856:	440b      	add	r3, r1
 8006858:	3358      	adds	r3, #88	; 0x58
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800685e:	6879      	ldr	r1, [r7, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	440b      	add	r3, r1
 800686c:	335d      	adds	r3, #93	; 0x5d
 800686e:	2203      	movs	r2, #3
 8006870:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006872:	6879      	ldr	r1, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	00db      	lsls	r3, r3, #3
 800687e:	440b      	add	r3, r1
 8006880:	333d      	adds	r3, #61	; 0x3d
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d114      	bne.n	80068b2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4613      	mov	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	440b      	add	r3, r1
 8006896:	333c      	adds	r3, #60	; 0x3c
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d109      	bne.n	80068b2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	440b      	add	r3, r1
 80068ac:	333d      	adds	r3, #61	; 0x3d
 80068ae:	2201      	movs	r2, #1
 80068b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	0151      	lsls	r1, r2, #5
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	440a      	add	r2, r1
 80068c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068cc:	f043 0302 	orr.w	r3, r3, #2
 80068d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	b2d2      	uxtb	r2, r2
 80068da:	4611      	mov	r1, r2
 80068dc:	4618      	mov	r0, r3
 80068de:	f008 fec8 	bl	800f672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ee:	461a      	mov	r2, r3
 80068f0:	2310      	movs	r3, #16
 80068f2:	6093      	str	r3, [r2, #8]
}
 80068f4:	e19e      	b.n	8006c34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006908:	2b80      	cmp	r3, #128	; 0x80
 800690a:	d12b      	bne.n	8006964 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	4413      	add	r3, r2
 8006914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	0151      	lsls	r1, r2, #5
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	440a      	add	r2, r1
 8006922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006926:	f043 0302 	orr.w	r3, r3, #2
 800692a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	4611      	mov	r1, r2
 8006936:	4618      	mov	r0, r3
 8006938:	f008 fe9b 	bl	800f672 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800693c:	6879      	ldr	r1, [r7, #4]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	440b      	add	r3, r1
 800694a:	335d      	adds	r3, #93	; 0x5d
 800694c:	2206      	movs	r2, #6
 800694e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	4413      	add	r3, r2
 8006958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695c:	461a      	mov	r2, r3
 800695e:	2380      	movs	r3, #128	; 0x80
 8006960:	6093      	str	r3, [r2, #8]
}
 8006962:	e167      	b.n	8006c34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	4413      	add	r3, r2
 800696c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800697a:	d135      	bne.n	80069e8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	4413      	add	r3, r2
 8006984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	440a      	add	r2, r1
 8006992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006996:	f043 0302 	orr.w	r3, r3, #2
 800699a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	4611      	mov	r1, r2
 80069a6:	4618      	mov	r0, r3
 80069a8:	f008 fe63 	bl	800f672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b8:	461a      	mov	r2, r3
 80069ba:	2310      	movs	r3, #16
 80069bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ca:	461a      	mov	r2, r3
 80069cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	4613      	mov	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	440b      	add	r3, r1
 80069e0:	335d      	adds	r3, #93	; 0x5d
 80069e2:	2208      	movs	r2, #8
 80069e4:	701a      	strb	r2, [r3, #0]
}
 80069e6:	e125      	b.n	8006c34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	f040 811a 	bne.w	8006c34 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	0151      	lsls	r1, r2, #5
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	440a      	add	r2, r1
 8006a16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a1a:	f023 0302 	bic.w	r3, r3, #2
 8006a1e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006a20:	6879      	ldr	r1, [r7, #4]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	440b      	add	r3, r1
 8006a2e:	335d      	adds	r3, #93	; 0x5d
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d137      	bne.n	8006aa6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006a36:	6879      	ldr	r1, [r7, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	00db      	lsls	r3, r3, #3
 8006a42:	440b      	add	r3, r1
 8006a44:	335c      	adds	r3, #92	; 0x5c
 8006a46:	2201      	movs	r2, #1
 8006a48:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	00db      	lsls	r3, r3, #3
 8006a56:	440b      	add	r3, r1
 8006a58:	333f      	adds	r3, #63	; 0x3f
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d00b      	beq.n	8006a78 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006a60:	6879      	ldr	r1, [r7, #4]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	440b      	add	r3, r1
 8006a6e:	333f      	adds	r3, #63	; 0x3f
 8006a70:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	f040 80c5 	bne.w	8006c02 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006a78:	6879      	ldr	r1, [r7, #4]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	00db      	lsls	r3, r3, #3
 8006a84:	440b      	add	r3, r1
 8006a86:	3351      	adds	r3, #81	; 0x51
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	f083 0301 	eor.w	r3, r3, #1
 8006a8e:	b2d8      	uxtb	r0, r3
 8006a90:	6879      	ldr	r1, [r7, #4]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	4613      	mov	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	440b      	add	r3, r1
 8006a9e:	3351      	adds	r3, #81	; 0x51
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	701a      	strb	r2, [r3, #0]
 8006aa4:	e0ad      	b.n	8006c02 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	00db      	lsls	r3, r3, #3
 8006ab2:	440b      	add	r3, r1
 8006ab4:	335d      	adds	r3, #93	; 0x5d
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d10a      	bne.n	8006ad2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	440b      	add	r3, r1
 8006aca:	335c      	adds	r3, #92	; 0x5c
 8006acc:	2202      	movs	r2, #2
 8006ace:	701a      	strb	r2, [r3, #0]
 8006ad0:	e097      	b.n	8006c02 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006ad2:	6879      	ldr	r1, [r7, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	440b      	add	r3, r1
 8006ae0:	335d      	adds	r3, #93	; 0x5d
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d10a      	bne.n	8006afe <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006ae8:	6879      	ldr	r1, [r7, #4]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	4613      	mov	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	440b      	add	r3, r1
 8006af6:	335c      	adds	r3, #92	; 0x5c
 8006af8:	2202      	movs	r2, #2
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	e081      	b.n	8006c02 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4613      	mov	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	00db      	lsls	r3, r3, #3
 8006b0a:	440b      	add	r3, r1
 8006b0c:	335d      	adds	r3, #93	; 0x5d
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b05      	cmp	r3, #5
 8006b12:	d10a      	bne.n	8006b2a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	440b      	add	r3, r1
 8006b22:	335c      	adds	r3, #92	; 0x5c
 8006b24:	2205      	movs	r2, #5
 8006b26:	701a      	strb	r2, [r3, #0]
 8006b28:	e06b      	b.n	8006c02 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	00db      	lsls	r3, r3, #3
 8006b36:	440b      	add	r3, r1
 8006b38:	335d      	adds	r3, #93	; 0x5d
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b06      	cmp	r3, #6
 8006b3e:	d00a      	beq.n	8006b56 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006b40:	6879      	ldr	r1, [r7, #4]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	440b      	add	r3, r1
 8006b4e:	335d      	adds	r3, #93	; 0x5d
 8006b50:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006b52:	2b08      	cmp	r3, #8
 8006b54:	d155      	bne.n	8006c02 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006b56:	6879      	ldr	r1, [r7, #4]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	00db      	lsls	r3, r3, #3
 8006b62:	440b      	add	r3, r1
 8006b64:	3358      	adds	r3, #88	; 0x58
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	1c59      	adds	r1, r3, #1
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	00db      	lsls	r3, r3, #3
 8006b76:	4403      	add	r3, r0
 8006b78:	3358      	adds	r3, #88	; 0x58
 8006b7a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	4613      	mov	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	440b      	add	r3, r1
 8006b8a:	3358      	adds	r3, #88	; 0x58
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d914      	bls.n	8006bbc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	4613      	mov	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	00db      	lsls	r3, r3, #3
 8006b9e:	440b      	add	r3, r1
 8006ba0:	3358      	adds	r3, #88	; 0x58
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006ba6:	6879      	ldr	r1, [r7, #4]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4613      	mov	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	440b      	add	r3, r1
 8006bb4:	335c      	adds	r3, #92	; 0x5c
 8006bb6:	2204      	movs	r2, #4
 8006bb8:	701a      	strb	r2, [r3, #0]
 8006bba:	e009      	b.n	8006bd0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006bbc:	6879      	ldr	r1, [r7, #4]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	440b      	add	r3, r1
 8006bca:	335c      	adds	r3, #92	; 0x5c
 8006bcc:	2202      	movs	r2, #2
 8006bce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006be6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c0e:	461a      	mov	r2, r3
 8006c10:	2302      	movs	r3, #2
 8006c12:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	b2d8      	uxtb	r0, r3
 8006c18:	6879      	ldr	r1, [r7, #4]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	440b      	add	r3, r1
 8006c26:	335c      	adds	r3, #92	; 0x5c
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	4601      	mov	r1, r0
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f01a fe06 	bl	8021840 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006c34:	bf00      	nop
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b08a      	sub	sp, #40	; 0x28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	f003 030f 	and.w	r3, r3, #15
 8006c5c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	0c5b      	lsrs	r3, r3, #17
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	091b      	lsrs	r3, r3, #4
 8006c6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c70:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d003      	beq.n	8006c80 <HCD_RXQLVL_IRQHandler+0x44>
 8006c78:	2b05      	cmp	r3, #5
 8006c7a:	f000 8082 	beq.w	8006d82 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006c7e:	e083      	b.n	8006d88 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d07f      	beq.n	8006d86 <HCD_RXQLVL_IRQHandler+0x14a>
 8006c86:	6879      	ldr	r1, [r7, #4]
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	00db      	lsls	r3, r3, #3
 8006c92:	440b      	add	r3, r1
 8006c94:	3344      	adds	r3, #68	; 0x44
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d074      	beq.n	8006d86 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6818      	ldr	r0, [r3, #0]
 8006ca0:	6879      	ldr	r1, [r7, #4]
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	440b      	add	r3, r1
 8006cae:	3344      	adds	r3, #68	; 0x44
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	b292      	uxth	r2, r2
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	f008 f887 	bl	800edca <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	440b      	add	r3, r1
 8006cca:	3344      	adds	r3, #68	; 0x44
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	18d1      	adds	r1, r2, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	00db      	lsls	r3, r3, #3
 8006cde:	4403      	add	r3, r0
 8006ce0:	3344      	adds	r3, #68	; 0x44
 8006ce2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006ce4:	6879      	ldr	r1, [r7, #4]
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	440b      	add	r3, r1
 8006cf2:	334c      	adds	r3, #76	; 0x4c
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	18d1      	adds	r1, r2, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	69ba      	ldr	r2, [r7, #24]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	4403      	add	r3, r0
 8006d08:	334c      	adds	r3, #76	; 0x4c
 8006d0a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d18:	691a      	ldr	r2, [r3, #16]
 8006d1a:	4b1d      	ldr	r3, [pc, #116]	; (8006d90 <HCD_RXQLVL_IRQHandler+0x154>)
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d031      	beq.n	8006d86 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d38:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d40:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4e:	461a      	mov	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006d54:	6879      	ldr	r1, [r7, #4]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	00db      	lsls	r3, r3, #3
 8006d60:	440b      	add	r3, r1
 8006d62:	3350      	adds	r3, #80	; 0x50
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	f083 0301 	eor.w	r3, r3, #1
 8006d6a:	b2d8      	uxtb	r0, r3
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	4613      	mov	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	00db      	lsls	r3, r3, #3
 8006d78:	440b      	add	r3, r1
 8006d7a:	3350      	adds	r3, #80	; 0x50
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	701a      	strb	r2, [r3, #0]
      break;
 8006d80:	e001      	b.n	8006d86 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006d82:	bf00      	nop
 8006d84:	e000      	b.n	8006d88 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006d86:	bf00      	nop
  }
}
 8006d88:	bf00      	nop
 8006d8a:	3728      	adds	r7, #40	; 0x28
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	1ff80000 	.word	0x1ff80000

08006d94 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006dc0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d113      	bne.n	8006df4 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d10a      	bne.n	8006dec <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	699a      	ldr	r2, [r3, #24]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8006de4:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f01a fd0e 	bl	8021808 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f043 0302 	orr.w	r3, r3, #2
 8006df2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f003 0308 	and.w	r3, r3, #8
 8006dfa:	2b08      	cmp	r3, #8
 8006dfc:	d147      	bne.n	8006e8e <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f043 0308 	orr.w	r3, r3, #8
 8006e04:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b04      	cmp	r3, #4
 8006e0e:	d129      	bne.n	8006e64 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d113      	bne.n	8006e40 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006e1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e22:	d106      	bne.n	8006e32 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2102      	movs	r1, #2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f008 f8fc 	bl	800f028 <USB_InitFSLSPClkSel>
 8006e30:	e011      	b.n	8006e56 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2101      	movs	r1, #1
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f008 f8f5 	bl	800f028 <USB_InitFSLSPClkSel>
 8006e3e:	e00a      	b.n	8006e56 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d106      	bne.n	8006e56 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006e54:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f01a fd04 	bl	8021864 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f01a fcd3 	bl	8021808 <HAL_HCD_Connect_Callback>
 8006e62:	e014      	b.n	8006e8e <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f01a fd0b 	bl	8021880 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006e7c:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	699a      	ldr	r2, [r3, #24]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006e8c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f003 0320 	and.w	r3, r3, #32
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	d103      	bne.n	8006ea0 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f043 0320 	orr.w	r3, r3, #32
 8006e9e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	6013      	str	r3, [r2, #0]
}
 8006eac:	bf00      	nop
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e07f      	b.n	8006fc6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d106      	bne.n	8006ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7fa feb8 	bl	8001c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2224      	movs	r2, #36	; 0x24
 8006ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f022 0201 	bic.w	r2, r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d107      	bne.n	8006f2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	689a      	ldr	r2, [r3, #8]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f2a:	609a      	str	r2, [r3, #8]
 8006f2c:	e006      	b.n	8006f3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689a      	ldr	r2, [r3, #8]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006f3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d104      	bne.n	8006f4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6859      	ldr	r1, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	4b1d      	ldr	r3, [pc, #116]	; (8006fd0 <HAL_I2C_Init+0x11c>)
 8006f5a:	430b      	orrs	r3, r1
 8006f5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	691a      	ldr	r2, [r3, #16]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	ea42 0103 	orr.w	r1, r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	021a      	lsls	r2, r3, #8
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	430a      	orrs	r2, r1
 8006f86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	69d9      	ldr	r1, [r3, #28]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a1a      	ldr	r2, [r3, #32]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0201 	orr.w	r2, r2, #1
 8006fa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	02008000 	.word	0x02008000

08006fd4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e021      	b.n	800702a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2224      	movs	r2, #36	; 0x24
 8006fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0201 	bic.w	r2, r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7fa fe9e 	bl	8001d40 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af02      	add	r7, sp, #8
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	4608      	mov	r0, r1
 800703e:	4611      	mov	r1, r2
 8007040:	461a      	mov	r2, r3
 8007042:	4603      	mov	r3, r0
 8007044:	817b      	strh	r3, [r7, #10]
 8007046:	460b      	mov	r3, r1
 8007048:	813b      	strh	r3, [r7, #8]
 800704a:	4613      	mov	r3, r2
 800704c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b20      	cmp	r3, #32
 8007058:	f040 80f9 	bne.w	800724e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d002      	beq.n	8007068 <HAL_I2C_Mem_Write+0x34>
 8007062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007064:	2b00      	cmp	r3, #0
 8007066:	d105      	bne.n	8007074 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800706e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e0ed      	b.n	8007250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <HAL_I2C_Mem_Write+0x4e>
 800707e:	2302      	movs	r3, #2
 8007080:	e0e6      	b.n	8007250 <HAL_I2C_Mem_Write+0x21c>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800708a:	f7fc fda1 	bl	8003bd0 <HAL_GetTick>
 800708e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	2319      	movs	r3, #25
 8007096:	2201      	movs	r2, #1
 8007098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 fad1 	bl	8007644 <I2C_WaitOnFlagUntilTimeout>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e0d1      	b.n	8007250 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2221      	movs	r2, #33	; 0x21
 80070b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2240      	movs	r2, #64	; 0x40
 80070b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6a3a      	ldr	r2, [r7, #32]
 80070c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80070cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070d4:	88f8      	ldrh	r0, [r7, #6]
 80070d6:	893a      	ldrh	r2, [r7, #8]
 80070d8:	8979      	ldrh	r1, [r7, #10]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	9301      	str	r3, [sp, #4]
 80070de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	4603      	mov	r3, r0
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f9e1 	bl	80074ac <I2C_RequestMemoryWrite>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d005      	beq.n	80070fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e0a9      	b.n	8007250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007100:	b29b      	uxth	r3, r3
 8007102:	2bff      	cmp	r3, #255	; 0xff
 8007104:	d90e      	bls.n	8007124 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	22ff      	movs	r2, #255	; 0xff
 800710a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007110:	b2da      	uxtb	r2, r3
 8007112:	8979      	ldrh	r1, [r7, #10]
 8007114:	2300      	movs	r3, #0
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 fbb3 	bl	8007888 <I2C_TransferConfig>
 8007122:	e00f      	b.n	8007144 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007128:	b29a      	uxth	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007132:	b2da      	uxtb	r2, r3
 8007134:	8979      	ldrh	r1, [r7, #10]
 8007136:	2300      	movs	r3, #0
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 fba2 	bl	8007888 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f000 fabb 	bl	80076c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e07b      	b.n	8007250 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	781a      	ldrb	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	1c5a      	adds	r2, r3, #1
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007172:	b29b      	uxth	r3, r3
 8007174:	3b01      	subs	r3, #1
 8007176:	b29a      	uxth	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007180:	3b01      	subs	r3, #1
 8007182:	b29a      	uxth	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800718c:	b29b      	uxth	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d034      	beq.n	80071fc <HAL_I2C_Mem_Write+0x1c8>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007196:	2b00      	cmp	r3, #0
 8007198:	d130      	bne.n	80071fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a0:	2200      	movs	r2, #0
 80071a2:	2180      	movs	r1, #128	; 0x80
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 fa4d 	bl	8007644 <I2C_WaitOnFlagUntilTimeout>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e04d      	b.n	8007250 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2bff      	cmp	r3, #255	; 0xff
 80071bc:	d90e      	bls.n	80071dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	22ff      	movs	r2, #255	; 0xff
 80071c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	8979      	ldrh	r1, [r7, #10]
 80071cc:	2300      	movs	r3, #0
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 fb57 	bl	8007888 <I2C_TransferConfig>
 80071da:	e00f      	b.n	80071fc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	8979      	ldrh	r1, [r7, #10]
 80071ee:	2300      	movs	r3, #0
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 fb46 	bl	8007888 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007200:	b29b      	uxth	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d19e      	bne.n	8007144 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 fa9a 	bl	8007744 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e01a      	b.n	8007250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2220      	movs	r2, #32
 8007220:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6859      	ldr	r1, [r3, #4]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	4b0a      	ldr	r3, [pc, #40]	; (8007258 <HAL_I2C_Mem_Write+0x224>)
 800722e:	400b      	ands	r3, r1
 8007230:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2220      	movs	r2, #32
 8007236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	e000      	b.n	8007250 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800724e:	2302      	movs	r3, #2
  }
}
 8007250:	4618      	mov	r0, r3
 8007252:	3718      	adds	r7, #24
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	fe00e800 	.word	0xfe00e800

0800725c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af02      	add	r7, sp, #8
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	4608      	mov	r0, r1
 8007266:	4611      	mov	r1, r2
 8007268:	461a      	mov	r2, r3
 800726a:	4603      	mov	r3, r0
 800726c:	817b      	strh	r3, [r7, #10]
 800726e:	460b      	mov	r3, r1
 8007270:	813b      	strh	r3, [r7, #8]
 8007272:	4613      	mov	r3, r2
 8007274:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b20      	cmp	r3, #32
 8007280:	f040 80fd 	bne.w	800747e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <HAL_I2C_Mem_Read+0x34>
 800728a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800728c:	2b00      	cmp	r3, #0
 800728e:	d105      	bne.n	800729c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007296:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e0f1      	b.n	8007480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d101      	bne.n	80072aa <HAL_I2C_Mem_Read+0x4e>
 80072a6:	2302      	movs	r3, #2
 80072a8:	e0ea      	b.n	8007480 <HAL_I2C_Mem_Read+0x224>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80072b2:	f7fc fc8d 	bl	8003bd0 <HAL_GetTick>
 80072b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	2319      	movs	r3, #25
 80072be:	2201      	movs	r2, #1
 80072c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 f9bd 	bl	8007644 <I2C_WaitOnFlagUntilTimeout>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e0d5      	b.n	8007480 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2222      	movs	r2, #34	; 0x22
 80072d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2240      	movs	r2, #64	; 0x40
 80072e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a3a      	ldr	r2, [r7, #32]
 80072ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072fc:	88f8      	ldrh	r0, [r7, #6]
 80072fe:	893a      	ldrh	r2, [r7, #8]
 8007300:	8979      	ldrh	r1, [r7, #10]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	9301      	str	r3, [sp, #4]
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	4603      	mov	r3, r0
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 f921 	bl	8007554 <I2C_RequestMemoryRead>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e0ad      	b.n	8007480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007328:	b29b      	uxth	r3, r3
 800732a:	2bff      	cmp	r3, #255	; 0xff
 800732c:	d90e      	bls.n	800734c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	22ff      	movs	r2, #255	; 0xff
 8007332:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007338:	b2da      	uxtb	r2, r3
 800733a:	8979      	ldrh	r1, [r7, #10]
 800733c:	4b52      	ldr	r3, [pc, #328]	; (8007488 <HAL_I2C_Mem_Read+0x22c>)
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 fa9f 	bl	8007888 <I2C_TransferConfig>
 800734a:	e00f      	b.n	800736c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007350:	b29a      	uxth	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800735a:	b2da      	uxtb	r2, r3
 800735c:	8979      	ldrh	r1, [r7, #10]
 800735e:	4b4a      	ldr	r3, [pc, #296]	; (8007488 <HAL_I2C_Mem_Read+0x22c>)
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 fa8e 	bl	8007888 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007372:	2200      	movs	r2, #0
 8007374:	2104      	movs	r1, #4
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f000 f964 	bl	8007644 <I2C_WaitOnFlagUntilTimeout>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e07c      	b.n	8007480 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	b2d2      	uxtb	r2, r2
 8007392:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	3b01      	subs	r3, #1
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d034      	beq.n	800742c <HAL_I2C_Mem_Read+0x1d0>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d130      	bne.n	800742c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	2200      	movs	r2, #0
 80073d2:	2180      	movs	r1, #128	; 0x80
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f000 f935 	bl	8007644 <I2C_WaitOnFlagUntilTimeout>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e04d      	b.n	8007480 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2bff      	cmp	r3, #255	; 0xff
 80073ec:	d90e      	bls.n	800740c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	22ff      	movs	r2, #255	; 0xff
 80073f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	8979      	ldrh	r1, [r7, #10]
 80073fc:	2300      	movs	r3, #0
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 fa3f 	bl	8007888 <I2C_TransferConfig>
 800740a:	e00f      	b.n	800742c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007410:	b29a      	uxth	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800741a:	b2da      	uxtb	r2, r3
 800741c:	8979      	ldrh	r1, [r7, #10]
 800741e:	2300      	movs	r3, #0
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 fa2e 	bl	8007888 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d19a      	bne.n	800736c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 f982 	bl	8007744 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e01a      	b.n	8007480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2220      	movs	r2, #32
 8007450:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6859      	ldr	r1, [r3, #4]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	4b0b      	ldr	r3, [pc, #44]	; (800748c <HAL_I2C_Mem_Read+0x230>)
 800745e:	400b      	ands	r3, r1
 8007460:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2220      	movs	r2, #32
 8007466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	e000      	b.n	8007480 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800747e:	2302      	movs	r3, #2
  }
}
 8007480:	4618      	mov	r0, r3
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	80002400 	.word	0x80002400
 800748c:	fe00e800 	.word	0xfe00e800

08007490 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800749e:	b2db      	uxtb	r3, r3
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af02      	add	r7, sp, #8
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	4608      	mov	r0, r1
 80074b6:	4611      	mov	r1, r2
 80074b8:	461a      	mov	r2, r3
 80074ba:	4603      	mov	r3, r0
 80074bc:	817b      	strh	r3, [r7, #10]
 80074be:	460b      	mov	r3, r1
 80074c0:	813b      	strh	r3, [r7, #8]
 80074c2:	4613      	mov	r3, r2
 80074c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80074c6:	88fb      	ldrh	r3, [r7, #6]
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	8979      	ldrh	r1, [r7, #10]
 80074cc:	4b20      	ldr	r3, [pc, #128]	; (8007550 <I2C_RequestMemoryWrite+0xa4>)
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 f9d7 	bl	8007888 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074da:	69fa      	ldr	r2, [r7, #28]
 80074dc:	69b9      	ldr	r1, [r7, #24]
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 f8f0 	bl	80076c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e02c      	b.n	8007548 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074ee:	88fb      	ldrh	r3, [r7, #6]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d105      	bne.n	8007500 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80074f4:	893b      	ldrh	r3, [r7, #8]
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	629a      	str	r2, [r3, #40]	; 0x28
 80074fe:	e015      	b.n	800752c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007500:	893b      	ldrh	r3, [r7, #8]
 8007502:	0a1b      	lsrs	r3, r3, #8
 8007504:	b29b      	uxth	r3, r3
 8007506:	b2da      	uxtb	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800750e:	69fa      	ldr	r2, [r7, #28]
 8007510:	69b9      	ldr	r1, [r7, #24]
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 f8d6 	bl	80076c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e012      	b.n	8007548 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007522:	893b      	ldrh	r3, [r7, #8]
 8007524:	b2da      	uxtb	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	2200      	movs	r2, #0
 8007534:	2180      	movs	r1, #128	; 0x80
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 f884 	bl	8007644 <I2C_WaitOnFlagUntilTimeout>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e000      	b.n	8007548 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	80002000 	.word	0x80002000

08007554 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af02      	add	r7, sp, #8
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	4608      	mov	r0, r1
 800755e:	4611      	mov	r1, r2
 8007560:	461a      	mov	r2, r3
 8007562:	4603      	mov	r3, r0
 8007564:	817b      	strh	r3, [r7, #10]
 8007566:	460b      	mov	r3, r1
 8007568:	813b      	strh	r3, [r7, #8]
 800756a:	4613      	mov	r3, r2
 800756c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800756e:	88fb      	ldrh	r3, [r7, #6]
 8007570:	b2da      	uxtb	r2, r3
 8007572:	8979      	ldrh	r1, [r7, #10]
 8007574:	4b20      	ldr	r3, [pc, #128]	; (80075f8 <I2C_RequestMemoryRead+0xa4>)
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	2300      	movs	r3, #0
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f000 f984 	bl	8007888 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007580:	69fa      	ldr	r2, [r7, #28]
 8007582:	69b9      	ldr	r1, [r7, #24]
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 f89d 	bl	80076c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e02c      	b.n	80075ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007594:	88fb      	ldrh	r3, [r7, #6]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d105      	bne.n	80075a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800759a:	893b      	ldrh	r3, [r7, #8]
 800759c:	b2da      	uxtb	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	629a      	str	r2, [r3, #40]	; 0x28
 80075a4:	e015      	b.n	80075d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80075a6:	893b      	ldrh	r3, [r7, #8]
 80075a8:	0a1b      	lsrs	r3, r3, #8
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075b4:	69fa      	ldr	r2, [r7, #28]
 80075b6:	69b9      	ldr	r1, [r7, #24]
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 f883 	bl	80076c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e012      	b.n	80075ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075c8:	893b      	ldrh	r3, [r7, #8]
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	2200      	movs	r2, #0
 80075da:	2140      	movs	r1, #64	; 0x40
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 f831 	bl	8007644 <I2C_WaitOnFlagUntilTimeout>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e000      	b.n	80075ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	80002000 	.word	0x80002000

080075fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b02      	cmp	r3, #2
 8007610:	d103      	bne.n	800761a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2200      	movs	r2, #0
 8007618:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b01      	cmp	r3, #1
 8007626:	d007      	beq.n	8007638 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0201 	orr.w	r2, r2, #1
 8007636:	619a      	str	r2, [r3, #24]
  }
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	603b      	str	r3, [r7, #0]
 8007650:	4613      	mov	r3, r2
 8007652:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007654:	e022      	b.n	800769c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765c:	d01e      	beq.n	800769c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800765e:	f7fc fab7 	bl	8003bd0 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	429a      	cmp	r2, r3
 800766c:	d302      	bcc.n	8007674 <I2C_WaitOnFlagUntilTimeout+0x30>
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d113      	bne.n	800769c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007678:	f043 0220 	orr.w	r2, r3, #32
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2220      	movs	r2, #32
 8007684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e00f      	b.n	80076bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699a      	ldr	r2, [r3, #24]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	4013      	ands	r3, r2
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	bf0c      	ite	eq
 80076ac:	2301      	moveq	r3, #1
 80076ae:	2300      	movne	r3, #0
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	461a      	mov	r2, r3
 80076b4:	79fb      	ldrb	r3, [r7, #7]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d0cd      	beq.n	8007656 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80076d0:	e02c      	b.n	800772c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	68b9      	ldr	r1, [r7, #8]
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 f870 	bl	80077bc <I2C_IsAcknowledgeFailed>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e02a      	b.n	800773c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ec:	d01e      	beq.n	800772c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ee:	f7fc fa6f 	bl	8003bd0 <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d302      	bcc.n	8007704 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d113      	bne.n	800772c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007708:	f043 0220 	orr.w	r2, r3, #32
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2220      	movs	r2, #32
 8007714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e007      	b.n	800773c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b02      	cmp	r3, #2
 8007738:	d1cb      	bne.n	80076d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007750:	e028      	b.n	80077a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	68b9      	ldr	r1, [r7, #8]
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f000 f830 	bl	80077bc <I2C_IsAcknowledgeFailed>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e026      	b.n	80077b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007766:	f7fc fa33 	bl	8003bd0 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	429a      	cmp	r2, r3
 8007774:	d302      	bcc.n	800777c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d113      	bne.n	80077a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007780:	f043 0220 	orr.w	r2, r3, #32
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2220      	movs	r2, #32
 800778c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e007      	b.n	80077b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	f003 0320 	and.w	r3, r3, #32
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	d1cf      	bne.n	8007752 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	f003 0310 	and.w	r3, r3, #16
 80077d2:	2b10      	cmp	r3, #16
 80077d4:	d151      	bne.n	800787a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077d6:	e022      	b.n	800781e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077de:	d01e      	beq.n	800781e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077e0:	f7fc f9f6 	bl	8003bd0 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d302      	bcc.n	80077f6 <I2C_IsAcknowledgeFailed+0x3a>
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d113      	bne.n	800781e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077fa:	f043 0220 	orr.w	r2, r3, #32
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2220      	movs	r2, #32
 8007806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e02e      	b.n	800787c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b20      	cmp	r3, #32
 800782a:	d1d5      	bne.n	80077d8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2210      	movs	r2, #16
 8007832:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2220      	movs	r2, #32
 800783a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f7ff fedd 	bl	80075fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6859      	ldr	r1, [r3, #4]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	4b0d      	ldr	r3, [pc, #52]	; (8007884 <I2C_IsAcknowledgeFailed+0xc8>)
 800784e:	400b      	ands	r3, r1
 8007850:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007856:	f043 0204 	orr.w	r2, r3, #4
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2220      	movs	r2, #32
 8007862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e000      	b.n	800787c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	fe00e800 	.word	0xfe00e800

08007888 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	607b      	str	r3, [r7, #4]
 8007892:	460b      	mov	r3, r1
 8007894:	817b      	strh	r3, [r7, #10]
 8007896:	4613      	mov	r3, r2
 8007898:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	0d5b      	lsrs	r3, r3, #21
 80078a4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80078a8:	4b0d      	ldr	r3, [pc, #52]	; (80078e0 <I2C_TransferConfig+0x58>)
 80078aa:	430b      	orrs	r3, r1
 80078ac:	43db      	mvns	r3, r3
 80078ae:	ea02 0103 	and.w	r1, r2, r3
 80078b2:	897b      	ldrh	r3, [r7, #10]
 80078b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80078b8:	7a7b      	ldrb	r3, [r7, #9]
 80078ba:	041b      	lsls	r3, r3, #16
 80078bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80078c0:	431a      	orrs	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	431a      	orrs	r2, r3
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	431a      	orrs	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80078d2:	bf00      	nop
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	03ff63ff 	.word	0x03ff63ff

080078e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	d138      	bne.n	800796c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007900:	2b01      	cmp	r3, #1
 8007902:	d101      	bne.n	8007908 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007904:	2302      	movs	r3, #2
 8007906:	e032      	b.n	800796e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2224      	movs	r2, #36	; 0x24
 8007914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0201 	bic.w	r2, r2, #1
 8007926:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007936:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6819      	ldr	r1, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	430a      	orrs	r2, r1
 8007946:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0201 	orr.w	r2, r2, #1
 8007956:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2220      	movs	r2, #32
 800795c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	e000      	b.n	800796e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800796c:	2302      	movs	r3, #2
  }
}
 800796e:	4618      	mov	r0, r3
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800797a:	b480      	push	{r7}
 800797c:	b085      	sub	sp, #20
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b20      	cmp	r3, #32
 800798e:	d139      	bne.n	8007a04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007996:	2b01      	cmp	r3, #1
 8007998:	d101      	bne.n	800799e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800799a:	2302      	movs	r3, #2
 800799c:	e033      	b.n	8007a06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2224      	movs	r2, #36	; 0x24
 80079aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f022 0201 	bic.w	r2, r2, #1
 80079bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80079cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	021b      	lsls	r3, r3, #8
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f042 0201 	orr.w	r2, r2, #1
 80079ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a00:	2300      	movs	r3, #0
 8007a02:	e000      	b.n	8007a06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a04:	2302      	movs	r3, #2
  }
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3714      	adds	r7, #20
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
	...

08007a14 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e0bf      	b.n	8007ba6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d106      	bne.n	8007a40 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f018 fb20 	bl	8020080 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	699a      	ldr	r2, [r3, #24]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007a56:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6999      	ldr	r1, [r3, #24]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007a6c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6899      	ldr	r1, [r3, #8]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	4b4a      	ldr	r3, [pc, #296]	; (8007bb0 <HAL_LTDC_Init+0x19c>)
 8007a88:	400b      	ands	r3, r1
 8007a8a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	041b      	lsls	r3, r3, #16
 8007a92:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6899      	ldr	r1, [r3, #8]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	699a      	ldr	r2, [r3, #24]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68d9      	ldr	r1, [r3, #12]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	4b3e      	ldr	r3, [pc, #248]	; (8007bb0 <HAL_LTDC_Init+0x19c>)
 8007ab6:	400b      	ands	r3, r1
 8007ab8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	041b      	lsls	r3, r3, #16
 8007ac0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68d9      	ldr	r1, [r3, #12]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a1a      	ldr	r2, [r3, #32]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6919      	ldr	r1, [r3, #16]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	4b33      	ldr	r3, [pc, #204]	; (8007bb0 <HAL_LTDC_Init+0x19c>)
 8007ae4:	400b      	ands	r3, r1
 8007ae6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	041b      	lsls	r3, r3, #16
 8007aee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6919      	ldr	r1, [r3, #16]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	431a      	orrs	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6959      	ldr	r1, [r3, #20]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	4b27      	ldr	r3, [pc, #156]	; (8007bb0 <HAL_LTDC_Init+0x19c>)
 8007b12:	400b      	ands	r3, r1
 8007b14:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1a:	041b      	lsls	r3, r3, #16
 8007b1c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6959      	ldr	r1, [r3, #20]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	430a      	orrs	r2, r1
 8007b32:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b3a:	021b      	lsls	r3, r3, #8
 8007b3c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007b44:	041b      	lsls	r3, r3, #16
 8007b46:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007b6a:	431a      	orrs	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f042 0206 	orr.w	r2, r2, #6
 8007b82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	699a      	ldr	r2, [r3, #24]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f042 0201 	orr.w	r2, r2, #1
 8007b92:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	f000f800 	.word	0xf000f800

08007bb4 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f018 fb27 	bl	8020210 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f003 0304 	and.w	r3, r3, #4
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d023      	beq.n	8007c4e <HAL_LTDC_IRQHandler+0x6a>
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d01e      	beq.n	8007c4e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0204 	bic.w	r2, r2, #4
 8007c1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2204      	movs	r2, #4
 8007c26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c2e:	f043 0201 	orr.w	r2, r3, #1
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2204      	movs	r2, #4
 8007c3c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f86f 	bl	8007d2c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d023      	beq.n	8007ca0 <HAL_LTDC_IRQHandler+0xbc>
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d01e      	beq.n	8007ca0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f022 0202 	bic.w	r2, r2, #2
 8007c70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2202      	movs	r2, #2
 8007c78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c80:	f043 0202 	orr.w	r2, r3, #2
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2204      	movs	r2, #4
 8007c8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f846 	bl	8007d2c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d01b      	beq.n	8007ce2 <HAL_LTDC_IRQHandler+0xfe>
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d016      	beq.n	8007ce2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f022 0201 	bic.w	r2, r2, #1
 8007cc2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f019 fad5 	bl	802128c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f003 0308 	and.w	r3, r3, #8
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d01b      	beq.n	8007d24 <HAL_LTDC_IRQHandler+0x140>
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f003 0308 	and.w	r3, r3, #8
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d016      	beq.n	8007d24 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 0208 	bic.w	r2, r2, #8
 8007d04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2208      	movs	r2, #8
 8007d0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f80e 	bl	8007d40 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007d24:	bf00      	nop
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007d54:	b5b0      	push	{r4, r5, r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d101      	bne.n	8007d6e <HAL_LTDC_ConfigLayer+0x1a>
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	e02c      	b.n	8007dc8 <HAL_LTDC_ConfigLayer+0x74>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2134      	movs	r1, #52	; 0x34
 8007d84:	fb01 f303 	mul.w	r3, r1, r3
 8007d88:	4413      	add	r3, r2
 8007d8a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	4614      	mov	r4, r2
 8007d92:	461d      	mov	r5, r3
 8007d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	68b9      	ldr	r1, [r7, #8]
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 f8cf 	bl	8007f4c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2201      	movs	r2, #1
 8007db4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bdb0      	pop	{r4, r5, r7, pc}

08007dd0 <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b089      	sub	sp, #36	; 0x24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d101      	bne.n	8007dea <HAL_LTDC_SetPitch+0x1a>
 8007de6:	2302      	movs	r3, #2
 8007de8:	e06e      	b.n	8007ec8 <HAL_LTDC_SetPitch+0xf8>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2202      	movs	r2, #2
 8007df6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2134      	movs	r1, #52	; 0x34
 8007e00:	fb01 f303 	mul.w	r3, r1, r3
 8007e04:	4413      	add	r3, r2
 8007e06:	3348      	adds	r3, #72	; 0x48
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d102      	bne.n	8007e18 <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 8007e12:	2304      	movs	r3, #4
 8007e14:	61fb      	str	r3, [r7, #28]
 8007e16:	e016      	b.n	8007e46 <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d102      	bne.n	8007e24 <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	61fb      	str	r3, [r7, #28]
 8007e22:	e010      	b.n	8007e46 <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	2b04      	cmp	r3, #4
 8007e28:	d008      	beq.n	8007e3c <HAL_LTDC_SetPitch+0x6c>
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d005      	beq.n	8007e3c <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d002      	beq.n	8007e3c <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	2b07      	cmp	r3, #7
 8007e3a:	d102      	bne.n	8007e42 <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	61fb      	str	r3, [r7, #28]
 8007e40:	e001      	b.n	8007e46 <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 8007e42:	2301      	movs	r3, #1
 8007e44:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	69fa      	ldr	r2, [r7, #28]
 8007e4a:	fb02 f303 	mul.w	r3, r2, r3
 8007e4e:	041b      	lsls	r3, r3, #16
 8007e50:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	01db      	lsls	r3, r3, #7
 8007e5c:	4413      	add	r3, r2
 8007e5e:	3384      	adds	r3, #132	; 0x84
 8007e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4619      	mov	r1, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	01db      	lsls	r3, r3, #7
 8007e6c:	440b      	add	r3, r1
 8007e6e:	3384      	adds	r3, #132	; 0x84
 8007e70:	4619      	mov	r1, r3
 8007e72:	4b18      	ldr	r3, [pc, #96]	; (8007ed4 <HAL_LTDC_SetPitch+0x104>)
 8007e74:	4013      	ands	r3, r2
 8007e76:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8007e78:	4b17      	ldr	r3, [pc, #92]	; (8007ed8 <HAL_LTDC_SetPitch+0x108>)
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7c:	4a16      	ldr	r2, [pc, #88]	; (8007ed8 <HAL_LTDC_SetPitch+0x108>)
 8007e7e:	f043 0301 	orr.w	r3, r3, #1
 8007e82:	6253      	str	r3, [r2, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	01db      	lsls	r3, r3, #7
 8007e8e:	4413      	add	r3, r2
 8007e90:	3384      	adds	r3, #132	; 0x84
 8007e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4619      	mov	r1, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	01db      	lsls	r3, r3, #7
 8007e9e:	440b      	add	r3, r1
 8007ea0:	3384      	adds	r3, #132	; 0x84
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8007eaa:	4b0b      	ldr	r3, [pc, #44]	; (8007ed8 <HAL_LTDC_SetPitch+0x108>)
 8007eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eae:	4a0a      	ldr	r2, [pc, #40]	; (8007ed8 <HAL_LTDC_SetPitch+0x108>)
 8007eb0:	f043 0301 	orr.w	r3, r3, #1
 8007eb4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3724      	adds	r7, #36	; 0x24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	e000ffff 	.word	0xe000ffff
 8007ed8:	40016800 	.word	0x40016800

08007edc <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d101      	bne.n	8007ef4 <HAL_LTDC_ProgramLineEvent+0x18>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e023      	b.n	8007f3c <HAL_LTDC_ProgramLineEvent+0x60>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2202      	movs	r2, #2
 8007f00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 0201 	bic.w	r2, r2, #1
 8007f12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8007f14:	4a0c      	ldr	r2, [pc, #48]	; (8007f48 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f042 0201 	orr.w	r2, r2, #1
 8007f28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	40016800 	.word	0x40016800

08007f4c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b089      	sub	sp, #36	; 0x24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	0c1b      	lsrs	r3, r3, #16
 8007f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f68:	4413      	add	r3, r2
 8007f6a:	041b      	lsls	r3, r3, #16
 8007f6c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	01db      	lsls	r3, r3, #7
 8007f78:	4413      	add	r3, r2
 8007f7a:	3384      	adds	r3, #132	; 0x84
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	6812      	ldr	r2, [r2, #0]
 8007f82:	4611      	mov	r1, r2
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	01d2      	lsls	r2, r2, #7
 8007f88:	440a      	add	r2, r1
 8007f8a:	3284      	adds	r2, #132	; 0x84
 8007f8c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007f90:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	0c1b      	lsrs	r3, r3, #16
 8007f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fa2:	4413      	add	r3, r2
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4619      	mov	r1, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	01db      	lsls	r3, r3, #7
 8007fb0:	440b      	add	r3, r1
 8007fb2:	3384      	adds	r3, #132	; 0x84
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	68da      	ldr	r2, [r3, #12]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fca:	4413      	add	r3, r2
 8007fcc:	041b      	lsls	r3, r3, #16
 8007fce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	01db      	lsls	r3, r3, #7
 8007fda:	4413      	add	r3, r2
 8007fdc:	3384      	adds	r3, #132	; 0x84
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	6812      	ldr	r2, [r2, #0]
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	01d2      	lsls	r2, r2, #7
 8007fea:	440a      	add	r2, r1
 8007fec:	3284      	adds	r2, #132	; 0x84
 8007fee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007ff2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	689a      	ldr	r2, [r3, #8]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008002:	4413      	add	r3, r2
 8008004:	1c5a      	adds	r2, r3, #1
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4619      	mov	r1, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	01db      	lsls	r3, r3, #7
 8008010:	440b      	add	r3, r1
 8008012:	3384      	adds	r3, #132	; 0x84
 8008014:	4619      	mov	r1, r3
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	4313      	orrs	r3, r2
 800801a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	461a      	mov	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	01db      	lsls	r3, r3, #7
 8008026:	4413      	add	r3, r2
 8008028:	3384      	adds	r3, #132	; 0x84
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	6812      	ldr	r2, [r2, #0]
 8008030:	4611      	mov	r1, r2
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	01d2      	lsls	r2, r2, #7
 8008036:	440a      	add	r2, r1
 8008038:	3284      	adds	r2, #132	; 0x84
 800803a:	f023 0307 	bic.w	r3, r3, #7
 800803e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	461a      	mov	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	01db      	lsls	r3, r3, #7
 800804a:	4413      	add	r3, r2
 800804c:	3384      	adds	r3, #132	; 0x84
 800804e:	461a      	mov	r2, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800805c:	021b      	lsls	r3, r3, #8
 800805e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008066:	041b      	lsls	r3, r3, #16
 8008068:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	061b      	lsls	r3, r3, #24
 8008070:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	461a      	mov	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	01db      	lsls	r3, r3, #7
 800807c:	4413      	add	r3, r2
 800807e:	3384      	adds	r3, #132	; 0x84
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	01db      	lsls	r3, r3, #7
 800808c:	4413      	add	r3, r2
 800808e:	3384      	adds	r3, #132	; 0x84
 8008090:	461a      	mov	r2, r3
 8008092:	2300      	movs	r3, #0
 8008094:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800809c:	461a      	mov	r2, r3
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	431a      	orrs	r2, r3
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	431a      	orrs	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4619      	mov	r1, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	01db      	lsls	r3, r3, #7
 80080b0:	440b      	add	r3, r1
 80080b2:	3384      	adds	r3, #132	; 0x84
 80080b4:	4619      	mov	r1, r3
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	461a      	mov	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	01db      	lsls	r3, r3, #7
 80080c6:	4413      	add	r3, r2
 80080c8:	3384      	adds	r3, #132	; 0x84
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	6812      	ldr	r2, [r2, #0]
 80080d0:	4611      	mov	r1, r2
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	01d2      	lsls	r2, r2, #7
 80080d6:	440a      	add	r2, r1
 80080d8:	3284      	adds	r2, #132	; 0x84
 80080da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80080de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	461a      	mov	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	01db      	lsls	r3, r3, #7
 80080ea:	4413      	add	r3, r2
 80080ec:	3384      	adds	r3, #132	; 0x84
 80080ee:	461a      	mov	r2, r3
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	695b      	ldr	r3, [r3, #20]
 80080f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	461a      	mov	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	01db      	lsls	r3, r3, #7
 8008100:	4413      	add	r3, r2
 8008102:	3384      	adds	r3, #132	; 0x84
 8008104:	69da      	ldr	r2, [r3, #28]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4619      	mov	r1, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	01db      	lsls	r3, r3, #7
 8008110:	440b      	add	r3, r1
 8008112:	3384      	adds	r3, #132	; 0x84
 8008114:	4619      	mov	r1, r3
 8008116:	4b58      	ldr	r3, [pc, #352]	; (8008278 <LTDC_SetConfig+0x32c>)
 8008118:	4013      	ands	r3, r2
 800811a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	69da      	ldr	r2, [r3, #28]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	68f9      	ldr	r1, [r7, #12]
 8008126:	6809      	ldr	r1, [r1, #0]
 8008128:	4608      	mov	r0, r1
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	01c9      	lsls	r1, r1, #7
 800812e:	4401      	add	r1, r0
 8008130:	3184      	adds	r1, #132	; 0x84
 8008132:	4313      	orrs	r3, r2
 8008134:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	01db      	lsls	r3, r3, #7
 8008140:	4413      	add	r3, r2
 8008142:	3384      	adds	r3, #132	; 0x84
 8008144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	461a      	mov	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	01db      	lsls	r3, r3, #7
 8008150:	4413      	add	r3, r2
 8008152:	3384      	adds	r3, #132	; 0x84
 8008154:	461a      	mov	r2, r3
 8008156:	2300      	movs	r3, #0
 8008158:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	01db      	lsls	r3, r3, #7
 8008164:	4413      	add	r3, r2
 8008166:	3384      	adds	r3, #132	; 0x84
 8008168:	461a      	mov	r2, r3
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d102      	bne.n	800817e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008178:	2304      	movs	r3, #4
 800817a:	61fb      	str	r3, [r7, #28]
 800817c:	e01b      	b.n	80081b6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d102      	bne.n	800818c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008186:	2303      	movs	r3, #3
 8008188:	61fb      	str	r3, [r7, #28]
 800818a:	e014      	b.n	80081b6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	2b04      	cmp	r3, #4
 8008192:	d00b      	beq.n	80081ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008198:	2b02      	cmp	r3, #2
 800819a:	d007      	beq.n	80081ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d003      	beq.n	80081ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80081a8:	2b07      	cmp	r3, #7
 80081aa:	d102      	bne.n	80081b2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80081ac:	2302      	movs	r3, #2
 80081ae:	61fb      	str	r3, [r7, #28]
 80081b0:	e001      	b.n	80081b6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80081b2:	2301      	movs	r3, #1
 80081b4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	01db      	lsls	r3, r3, #7
 80081c0:	4413      	add	r3, r2
 80081c2:	3384      	adds	r3, #132	; 0x84
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	6812      	ldr	r2, [r2, #0]
 80081ca:	4611      	mov	r1, r2
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	01d2      	lsls	r2, r2, #7
 80081d0:	440a      	add	r2, r1
 80081d2:	3284      	adds	r2, #132	; 0x84
 80081d4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80081d8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081de:	69fa      	ldr	r2, [r7, #28]
 80081e0:	fb02 f303 	mul.w	r3, r2, r3
 80081e4:	041a      	lsls	r2, r3, #16
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	6859      	ldr	r1, [r3, #4]
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	1acb      	subs	r3, r1, r3
 80081f0:	69f9      	ldr	r1, [r7, #28]
 80081f2:	fb01 f303 	mul.w	r3, r1, r3
 80081f6:	3303      	adds	r3, #3
 80081f8:	68f9      	ldr	r1, [r7, #12]
 80081fa:	6809      	ldr	r1, [r1, #0]
 80081fc:	4608      	mov	r0, r1
 80081fe:	6879      	ldr	r1, [r7, #4]
 8008200:	01c9      	lsls	r1, r1, #7
 8008202:	4401      	add	r1, r0
 8008204:	3184      	adds	r1, #132	; 0x84
 8008206:	4313      	orrs	r3, r2
 8008208:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	461a      	mov	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	01db      	lsls	r3, r3, #7
 8008214:	4413      	add	r3, r2
 8008216:	3384      	adds	r3, #132	; 0x84
 8008218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4619      	mov	r1, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	01db      	lsls	r3, r3, #7
 8008224:	440b      	add	r3, r1
 8008226:	3384      	adds	r3, #132	; 0x84
 8008228:	4619      	mov	r1, r3
 800822a:	4b14      	ldr	r3, [pc, #80]	; (800827c <LTDC_SetConfig+0x330>)
 800822c:	4013      	ands	r3, r2
 800822e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	461a      	mov	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	01db      	lsls	r3, r3, #7
 800823a:	4413      	add	r3, r2
 800823c:	3384      	adds	r3, #132	; 0x84
 800823e:	461a      	mov	r2, r3
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	01db      	lsls	r3, r3, #7
 8008250:	4413      	add	r3, r2
 8008252:	3384      	adds	r3, #132	; 0x84
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	6812      	ldr	r2, [r2, #0]
 800825a:	4611      	mov	r1, r2
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	01d2      	lsls	r2, r2, #7
 8008260:	440a      	add	r2, r1
 8008262:	3284      	adds	r2, #132	; 0x84
 8008264:	f043 0301 	orr.w	r3, r3, #1
 8008268:	6013      	str	r3, [r2, #0]
}
 800826a:	bf00      	nop
 800826c:	3724      	adds	r7, #36	; 0x24
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	fffff8f8 	.word	0xfffff8f8
 800827c:	fffff800 	.word	0xfffff800

08008280 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008280:	b480      	push	{r7}
 8008282:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008284:	4b05      	ldr	r3, [pc, #20]	; (800829c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a04      	ldr	r2, [pc, #16]	; (800829c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800828a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800828e:	6013      	str	r3, [r2, #0]
}
 8008290:	bf00      	nop
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	40007000 	.word	0x40007000

080082a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80082a6:	2300      	movs	r3, #0
 80082a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80082aa:	4b23      	ldr	r3, [pc, #140]	; (8008338 <HAL_PWREx_EnableOverDrive+0x98>)
 80082ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ae:	4a22      	ldr	r2, [pc, #136]	; (8008338 <HAL_PWREx_EnableOverDrive+0x98>)
 80082b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082b4:	6413      	str	r3, [r2, #64]	; 0x40
 80082b6:	4b20      	ldr	r3, [pc, #128]	; (8008338 <HAL_PWREx_EnableOverDrive+0x98>)
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082be:	603b      	str	r3, [r7, #0]
 80082c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80082c2:	4b1e      	ldr	r3, [pc, #120]	; (800833c <HAL_PWREx_EnableOverDrive+0x9c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a1d      	ldr	r2, [pc, #116]	; (800833c <HAL_PWREx_EnableOverDrive+0x9c>)
 80082c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082ce:	f7fb fc7f 	bl	8003bd0 <HAL_GetTick>
 80082d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80082d4:	e009      	b.n	80082ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80082d6:	f7fb fc7b 	bl	8003bd0 <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082e4:	d901      	bls.n	80082ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e022      	b.n	8008330 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80082ea:	4b14      	ldr	r3, [pc, #80]	; (800833c <HAL_PWREx_EnableOverDrive+0x9c>)
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082f6:	d1ee      	bne.n	80082d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80082f8:	4b10      	ldr	r3, [pc, #64]	; (800833c <HAL_PWREx_EnableOverDrive+0x9c>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a0f      	ldr	r2, [pc, #60]	; (800833c <HAL_PWREx_EnableOverDrive+0x9c>)
 80082fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008302:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008304:	f7fb fc64 	bl	8003bd0 <HAL_GetTick>
 8008308:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800830a:	e009      	b.n	8008320 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800830c:	f7fb fc60 	bl	8003bd0 <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800831a:	d901      	bls.n	8008320 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e007      	b.n	8008330 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008320:	4b06      	ldr	r3, [pc, #24]	; (800833c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008328:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800832c:	d1ee      	bne.n	800830c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	40023800 	.word	0x40023800
 800833c:	40007000 	.word	0x40007000

08008340 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af02      	add	r7, sp, #8
 8008346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800834c:	f7fb fc40 	bl	8003bd0 <HAL_GetTick>
 8008350:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e073      	b.n	8008444 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b01      	cmp	r3, #1
 8008366:	d101      	bne.n	800836c <HAL_QSPI_Init+0x2c>
 8008368:	2302      	movs	r3, #2
 800836a:	e06b      	b.n	8008444 <HAL_QSPI_Init+0x104>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10b      	bne.n	8008398 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7f9 fd0d 	bl	8001da8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 800838e:	f241 3188 	movw	r1, #5000	; 0x1388
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fb65 	bl	8008a62 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	021a      	lsls	r2, r3, #8
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2200      	movs	r2, #0
 80083bc:	2120      	movs	r1, #32
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fb5d 	bl	8008a7e <QSPI_WaitFlagStateUntilTimeout>
 80083c4:	4603      	mov	r3, r0
 80083c6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80083c8:	7bfb      	ldrb	r3, [r7, #15]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d135      	bne.n	800843a <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	4b1d      	ldr	r3, [pc, #116]	; (800844c <HAL_QSPI_Init+0x10c>)
 80083d6:	4013      	ands	r3, r2
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	6852      	ldr	r2, [r2, #4]
 80083dc:	0611      	lsls	r1, r2, #24
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	68d2      	ldr	r2, [r2, #12]
 80083e2:	4311      	orrs	r1, r2
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	69d2      	ldr	r2, [r2, #28]
 80083e8:	4311      	orrs	r1, r2
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	6a12      	ldr	r2, [r2, #32]
 80083ee:	4311      	orrs	r1, r2
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	6812      	ldr	r2, [r2, #0]
 80083f4:	430b      	orrs	r3, r1
 80083f6:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	4b14      	ldr	r3, [pc, #80]	; (8008450 <HAL_QSPI_Init+0x110>)
 8008400:	4013      	ands	r3, r2
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	6912      	ldr	r2, [r2, #16]
 8008406:	0411      	lsls	r1, r2, #16
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	6952      	ldr	r2, [r2, #20]
 800840c:	4311      	orrs	r1, r2
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	6992      	ldr	r2, [r2, #24]
 8008412:	4311      	orrs	r1, r2
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	6812      	ldr	r2, [r2, #0]
 8008418:	430b      	orrs	r3, r1
 800841a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f042 0201 	orr.w	r2, r2, #1
 800842a:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008442:	7bfb      	ldrb	r3, [r7, #15]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	00ffff2f 	.word	0x00ffff2f
 8008450:	ffe0f8fe 	.word	0xffe0f8fe

08008454 <HAL_QSPI_DeInit>:
  * @brief DeInitializes the QSPI peripheral 
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d101      	bne.n	8008466 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e022      	b.n	80084ac <HAL_QSPI_DeInit+0x58>
  }

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b01      	cmp	r3, #1
 8008470:	d101      	bne.n	8008476 <HAL_QSPI_DeInit+0x22>
 8008472:	2302      	movs	r3, #2
 8008474:	e01a      	b.n	80084ac <HAL_QSPI_DeInit+0x58>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f022 0201 	bic.w	r2, r2, #1
 800848c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7f9 fd1a 	bl	8001ec8 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_QSPI_Command>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af02      	add	r7, sp, #8
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 80084c4:	f7fb fb84 	bl	8003bd0 <HAL_GetTick>
 80084c8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d101      	bne.n	80084da <HAL_QSPI_Command+0x26>
 80084d6:	2302      	movs	r3, #2
 80084d8:	e048      	b.n	800856c <HAL_QSPI_Command+0xb8>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d137      	bne.n	800855e <HAL_QSPI_Command+0xaa>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;   
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2202      	movs	r2, #2
 80084f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	2200      	movs	r2, #0
 8008504:	2120      	movs	r1, #32
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 fab9 	bl	8008a7e <QSPI_WaitFlagStateUntilTimeout>
 800850c:	4603      	mov	r3, r0
 800850e:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 8008510:	7dfb      	ldrb	r3, [r7, #23]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d125      	bne.n	8008562 <HAL_QSPI_Command+0xae>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8008516:	2200      	movs	r2, #0
 8008518:	68b9      	ldr	r1, [r7, #8]
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f000 fae6 	bl	8008aec <QSPI_Config>
      
      if (cmd->DataMode == QSPI_DATA_NONE)
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008524:	2b00      	cmp	r3, #0
 8008526:	d115      	bne.n	8008554 <HAL_QSPI_Command+0xa0>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done 
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	2201      	movs	r2, #1
 8008530:	2102      	movs	r1, #2
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f000 faa3 	bl	8008a7e <QSPI_WaitFlagStateUntilTimeout>
 8008538:	4603      	mov	r3, r0
 800853a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800853c:	7dfb      	ldrb	r3, [r7, #23]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10f      	bne.n	8008562 <HAL_QSPI_Command+0xae>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2202      	movs	r2, #2
 8008548:	60da      	str	r2, [r3, #12]
          
          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;   
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008552:	e006      	b.n	8008562 <HAL_QSPI_Command+0xae>
        
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;   
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800855c:	e001      	b.n	8008562 <HAL_QSPI_Command+0xae>
      }
    }
  }
  else
  {
    status = HAL_BUSY;   
 800855e:	2302      	movs	r3, #2
 8008560:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800856a:	7dfb      	ldrb	r3, [r7, #23]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <HAL_QSPI_Transmit>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b08a      	sub	sp, #40	; 0x28
 8008578:	af02      	add	r7, sp, #8
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
   HAL_StatusTypeDef status = HAL_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8008584:	f7fb fb24 	bl	8003bd0 <HAL_GetTick>
 8008588:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3320      	adds	r3, #32
 8008590:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b01      	cmp	r3, #1
 800859c:	d101      	bne.n	80085a2 <HAL_QSPI_Transmit+0x2e>
 800859e:	2302      	movs	r3, #2
 80085a0:	e079      	b.n	8008696 <HAL_QSPI_Transmit+0x122>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d168      	bne.n	8008688 <HAL_QSPI_Transmit+0x114>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d059      	beq.n	8008676 <HAL_QSPI_Transmit+0x102>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2212      	movs	r2, #18
 80085c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      
      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	1c5a      	adds	r2, r3, #1
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	68ba      	ldr	r2, [r7, #8]
 80085e6:	625a      	str	r2, [r3, #36]	; 0x24
    
      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	695a      	ldr	r2, [r3, #20]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80085f6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0)
 80085f8:	e019      	b.n	800862e <HAL_QSPI_Transmit+0xba>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	2201      	movs	r2, #1
 8008602:	2104      	movs	r1, #4
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 fa3a 	bl	8008a7e <QSPI_WaitFlagStateUntilTimeout>
 800860a:	4603      	mov	r3, r0
 800860c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800860e:	7ffb      	ldrb	r3, [r7, #31]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d111      	bne.n	8008638 <HAL_QSPI_Transmit+0xc4>
        { 
          break;
        }

        *(__IO uint8_t *)data_reg = *hqspi->pTxBuffPtr++;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008618:	1c59      	adds	r1, r3, #1
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	6251      	str	r1, [r2, #36]	; 0x24
 800861e:	781a      	ldrb	r2, [r3, #0]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	701a      	strb	r2, [r3, #0]
        hqspi->TxXferCount--;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	1e5a      	subs	r2, r3, #1
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e1      	bne.n	80085fa <HAL_QSPI_Transmit+0x86>
 8008636:	e000      	b.n	800863a <HAL_QSPI_Transmit+0xc6>
          break;
 8008638:	bf00      	nop
      }
    
      if (status == HAL_OK)
 800863a:	7ffb      	ldrb	r3, [r7, #31]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d115      	bne.n	800866c <HAL_QSPI_Transmit+0xf8>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	2201      	movs	r2, #1
 8008648:	2102      	movs	r1, #2
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 fa17 	bl	8008a7e <QSPI_WaitFlagStateUntilTimeout>
 8008650:	4603      	mov	r3, r0
 8008652:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8008654:	7ffb      	ldrb	r3, [r7, #31]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d108      	bne.n	800866c <HAL_QSPI_Transmit+0xf8>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2202      	movs	r2, #2
 8008660:	60da      	str	r2, [r3, #12]
          
#if defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f000 f998 	bl	8008998 <HAL_QSPI_Abort>
 8008668:	4603      	mov	r3, r0
 800866a:	77fb      	strb	r3, [r7, #31]
#endif /* QSPI_V1_0 */ 
        }
      }
    
      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;    
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008674:	e00a      	b.n	800868c <HAL_QSPI_Transmit+0x118>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800867a:	f043 0208 	orr.w	r2, r3, #8
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	77fb      	strb	r3, [r7, #31]
 8008686:	e001      	b.n	800868c <HAL_QSPI_Transmit+0x118>
    }
  }
  else
  {
    status = HAL_BUSY;
 8008688:	2302      	movs	r3, #2
 800868a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8008694:	7ffb      	ldrb	r3, [r7, #31]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3720      	adds	r7, #32
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <HAL_QSPI_Receive>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b08a      	sub	sp, #40	; 0x28
 80086a2:	af02      	add	r7, sp, #8
 80086a4:	60f8      	str	r0, [r7, #12]
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80086ae:	f7fb fa8f 	bl	8003bd0 <HAL_GetTick>
 80086b2:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	3320      	adds	r3, #32
 80086c2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d101      	bne.n	80086d4 <HAL_QSPI_Receive+0x36>
 80086d0:	2302      	movs	r3, #2
 80086d2:	e080      	b.n	80087d6 <HAL_QSPI_Receive+0x138>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d16f      	bne.n	80087c8 <HAL_QSPI_Receive+0x12a>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	645a      	str	r2, [r3, #68]	; 0x44
    if(pData != NULL )
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d060      	beq.n	80087b6 <HAL_QSPI_Receive+0x118>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2222      	movs	r2, #34	; 0x22
 80086f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	695b      	ldr	r3, [r3, #20]
 8008720:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800872c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	619a      	str	r2, [r3, #24]
      
      while(hqspi->RxXferCount > 0)
 8008736:	e01a      	b.n	800876e <HAL_QSPI_Receive+0xd0>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	2201      	movs	r2, #1
 8008740:	2106      	movs	r1, #6
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 f99b 	bl	8008a7e <QSPI_WaitFlagStateUntilTimeout>
 8008748:	4603      	mov	r3, r0
 800874a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800874c:	7ffb      	ldrb	r3, [r7, #31]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d112      	bne.n	8008778 <HAL_QSPI_Receive+0xda>
        { 
          break;
        }

        *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008756:	1c59      	adds	r1, r3, #1
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	6311      	str	r1, [r2, #48]	; 0x30
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	7812      	ldrb	r2, [r2, #0]
 8008760:	b2d2      	uxtb	r2, r2
 8008762:	701a      	strb	r2, [r3, #0]
        hqspi->RxXferCount--;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008768:	1e5a      	subs	r2, r3, #1
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1e0      	bne.n	8008738 <HAL_QSPI_Receive+0x9a>
 8008776:	e000      	b.n	800877a <HAL_QSPI_Receive+0xdc>
          break;
 8008778:	bf00      	nop
      }
    
      if (status == HAL_OK)
 800877a:	7ffb      	ldrb	r3, [r7, #31]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d115      	bne.n	80087ac <HAL_QSPI_Receive+0x10e>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	2201      	movs	r2, #1
 8008788:	2102      	movs	r1, #2
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f000 f977 	bl	8008a7e <QSPI_WaitFlagStateUntilTimeout>
 8008790:	4603      	mov	r3, r0
 8008792:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8008794:	7ffb      	ldrb	r3, [r7, #31]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d108      	bne.n	80087ac <HAL_QSPI_Receive+0x10e>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2202      	movs	r2, #2
 80087a0:	60da      	str	r2, [r3, #12]
          
#if defined(QSPI1_V1_0)
         /* Workaround - Extra data written in the FIFO at the end of a read transfer */
         status = HAL_QSPI_Abort(hqspi);
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f000 f8f8 	bl	8008998 <HAL_QSPI_Abort>
 80087a8:	4603      	mov	r3, r0
 80087aa:	77fb      	strb	r3, [r7, #31]
#endif /* QSPI_V1_0 */  
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;    
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087b4:	e00a      	b.n	80087cc <HAL_QSPI_Receive+0x12e>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ba:	f043 0208 	orr.w	r2, r3, #8
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	77fb      	strb	r3, [r7, #31]
 80087c6:	e001      	b.n	80087cc <HAL_QSPI_Receive+0x12e>
    }
  }
  else
  {
    status = HAL_BUSY;
 80087c8:	2302      	movs	r3, #2
 80087ca:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80087d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3720      	adds	r7, #32
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <HAL_QSPI_AutoPolling>:
  * @param  Timeout  Time out duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b088      	sub	sp, #32
 80087e2:	af02      	add	r7, sp, #8
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	607a      	str	r2, [r7, #4]
 80087ea:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 80087f0:	f7fb f9ee 	bl	8003bd0 <HAL_GetTick>
 80087f4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d101      	bne.n	8008806 <HAL_QSPI_AutoPolling+0x28>
 8008802:	2302      	movs	r3, #2
 8008804:	e060      	b.n	80088c8 <HAL_QSPI_AutoPolling+0xea>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b01      	cmp	r3, #1
 8008818:	d14f      	bne.n	80088ba <HAL_QSPI_AutoPolling+0xdc>
  {
    
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2242      	movs	r2, #66	; 0x42
 8008824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	2200      	movs	r2, #0
 8008830:	2120      	movs	r1, #32
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f000 f923 	bl	8008a7e <QSPI_WaitFlagStateUntilTimeout>
 8008838:	4603      	mov	r3, r0
 800883a:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 800883c:	7dfb      	ldrb	r3, [r7, #23]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d13d      	bne.n	80088be <HAL_QSPI_AutoPolling+0xe0>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	6812      	ldr	r2, [r2, #0]
 800884a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6852      	ldr	r2, [r2, #4]
 8008854:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	6892      	ldr	r2, [r2, #8]
 800885e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Configure QSPI: CR register with Match mode and Automatic stop enabled 
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), 
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	431a      	orrs	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008878:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));
      
      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68da      	ldr	r2, [r3, #12]
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008882:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008886:	68b9      	ldr	r1, [r7, #8]
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f000 f92f 	bl	8008aec <QSPI_Config>
      
      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	2201      	movs	r2, #1
 8008896:	2108      	movs	r1, #8
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f000 f8f0 	bl	8008a7e <QSPI_WaitFlagStateUntilTimeout>
 800889e:	4603      	mov	r3, r0
 80088a0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80088a2:	7dfb      	ldrb	r3, [r7, #23]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10a      	bne.n	80088be <HAL_QSPI_AutoPolling+0xe0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2208      	movs	r2, #8
 80088ae:	60da      	str	r2, [r3, #12]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088b8:	e001      	b.n	80088be <HAL_QSPI_AutoPolling+0xe0>
      }
    }
  }
  else
  {
    status = HAL_BUSY;   
 80088ba:	2302      	movs	r3, #2
 80088bc:	75fb      	strb	r3, [r7, #23]
  }
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return status;  
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b088      	sub	sp, #32
 80088d4:	af02      	add	r7, sp, #8
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 80088e0:	f7fb f976 	bl	8003bd0 <HAL_GetTick>
 80088e4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d101      	bne.n	80088f6 <HAL_QSPI_MemoryMapped+0x26>
 80088f2:	2302      	movs	r3, #2
 80088f4:	e04c      	b.n	8008990 <HAL_QSPI_MemoryMapped+0xc0>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b01      	cmp	r3, #1
 8008908:	d13b      	bne.n	8008982 <HAL_QSPI_MemoryMapped+0xb2>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2282      	movs	r2, #130	; 0x82
 8008914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	2200      	movs	r2, #0
 8008922:	2120      	movs	r1, #32
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 f8aa 	bl	8008a7e <QSPI_WaitFlagStateUntilTimeout>
 800892a:	4603      	mov	r3, r0
 800892c:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d128      	bne.n	8008986 <HAL_QSPI_MemoryMapped+0xb6>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f023 0108 	bic.w	r1, r3, #8
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685a      	ldr	r2, [r3, #4]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	2b08      	cmp	r3, #8
 8008950:	d110      	bne.n	8008974 <HAL_QSPI_MemoryMapped+0xa4>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));
        
        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	6812      	ldr	r2, [r2, #0]
 800895a:	631a      	str	r2, [r3, #48]	; 0x30
        
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2210      	movs	r2, #16
 8008962:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008972:	601a      	str	r2, [r3, #0]
      }
      
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8008974:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008978:	68b9      	ldr	r1, [r7, #8]
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f000 f8b6 	bl	8008aec <QSPI_Config>
 8008980:	e001      	b.n	8008986 <HAL_QSPI_MemoryMapped+0xb6>
    }
  }
  else
  {
    status = HAL_BUSY;   
 8008982:	2302      	movs	r3, #2
 8008984:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return status;  
 800898e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3718      	adds	r7, #24
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af02      	add	r7, sp, #8
 800899e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80089a4:	f7fb f914 	bl	8003bd0 <HAL_GetTick>
 80089a8:	60b8      	str	r0, [r7, #8]
  
  /* Check if the state is in one of the busy states */
  if ((hqspi->State & 0x2) != 0)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d04e      	beq.n	8008a58 <HAL_QSPI_Abort+0xc0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 0304 	and.w	r3, r3, #4
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d017      	beq.n	8008a00 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f022 0204 	bic.w	r2, r2, #4
 80089de:	601a      	str	r2, [r3, #0]
      
      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7fb fe61 	bl	80046ac <HAL_DMA_Abort>
 80089ea:	4603      	mov	r3, r0
 80089ec:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80089ee:	7bfb      	ldrb	r3, [r7, #15]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d005      	beq.n	8008a00 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f8:	f043 0204 	orr.w	r2, r3, #4
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }  
    
    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f042 0202 	orr.w	r2, r2, #2
 8008a0e:	601a      	str	r2, [r3, #0]
    
    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	2102      	movs	r1, #2
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f82e 	bl	8008a7e <QSPI_WaitFlagStateUntilTimeout>
 8008a22:	4603      	mov	r3, r0
 8008a24:	73fb      	strb	r3, [r7, #15]

    if(status == HAL_OK)
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10e      	bne.n	8008a4a <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2202      	movs	r2, #2
 8008a32:	60da      	str	r2, [r3, #12]
      
      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2120      	movs	r1, #32
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f81c 	bl	8008a7e <QSPI_WaitFlagStateUntilTimeout>
 8008a46:	4603      	mov	r3, r0
 8008a48:	73fb      	strb	r3, [r7, #15]
    }
    
    if (status == HAL_OK)
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d103      	bne.n	8008a58 <HAL_QSPI_Abort+0xc0>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b083      	sub	sp, #12
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008a72:	bf00      	nop
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	60f8      	str	r0, [r7, #12]
 8008a86:	60b9      	str	r1, [r7, #8]
 8008a88:	603b      	str	r3, [r7, #0]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008a8e:	e01a      	b.n	8008ac6 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a96:	d016      	beq.n	8008ac6 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d007      	beq.n	8008aae <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008a9e:	f7fb f897 	bl	8003bd0 <HAL_GetTick>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	69ba      	ldr	r2, [r7, #24]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d20b      	bcs.n	8008ac6 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2204      	movs	r2, #4
 8008ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aba:	f043 0201 	orr.w	r2, r3, #1
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e00e      	b.n	8008ae4 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	689a      	ldr	r2, [r3, #8]
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	4013      	ands	r3, r2
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	bf14      	ite	ne
 8008ad4:	2301      	movne	r3, #1
 8008ad6:	2300      	moveq	r3, #0
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	461a      	mov	r2, r3
 8008adc:	79fb      	ldrb	r3, [r7, #7]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d1d6      	bne.n	8008a90 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d009      	beq.n	8008b14 <QSPI_Config+0x28>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008b06:	d005      	beq.n	8008b14 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1));
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3a01      	subs	r2, #1
 8008b12:	611a      	str	r2, [r3, #16]
  }
      
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 80b9 	beq.w	8008c90 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d05f      	beq.n	8008be6 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	6892      	ldr	r2, [r2, #8]
 8008b2e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	69db      	ldr	r3, [r3, #28]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d031      	beq.n	8008b9c <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b40:	431a      	orrs	r2, r3
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b46:	431a      	orrs	r2, r3
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4c:	431a      	orrs	r2, r3
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	049b      	lsls	r3, r3, #18
 8008b54:	431a      	orrs	r2, r3
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	431a      	orrs	r2, r3
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	431a      	orrs	r2, r3
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	431a      	orrs	r2, r3
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	69db      	ldr	r3, [r3, #28]
 8008b6c:	431a      	orrs	r2, r3
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	431a      	orrs	r2, r3
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	ea42 0103 	orr.w	r1, r2, r3
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << 18) | cmd->AlternateBytesSize |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008b8c:	f000 812e 	beq.w	8008dec <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	6852      	ldr	r2, [r2, #4]
 8008b98:	619a      	str	r2, [r3, #24]
                                           cmd->AddressMode | cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8008b9a:	e127      	b.n	8008dec <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba4:	431a      	orrs	r2, r3
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008baa:	431a      	orrs	r2, r3
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	049b      	lsls	r3, r3, #18
 8008bb8:	431a      	orrs	r2, r3
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	431a      	orrs	r2, r3
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
 8008bc4:	431a      	orrs	r2, r3
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	69db      	ldr	r3, [r3, #28]
 8008bca:	431a      	orrs	r2, r3
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	ea42 0103 	orr.w	r1, r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	430a      	orrs	r2, r1
 8008be2:	615a      	str	r2, [r3, #20]
}
 8008be4:	e102      	b.n	8008dec <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d02e      	beq.n	8008c4c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf6:	431a      	orrs	r2, r3
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bfc:	431a      	orrs	r2, r3
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c02:	431a      	orrs	r2, r3
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	049b      	lsls	r3, r3, #18
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	6a1b      	ldr	r3, [r3, #32]
 8008c10:	431a      	orrs	r2, r3
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	431a      	orrs	r2, r3
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	69db      	ldr	r3, [r3, #28]
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	431a      	orrs	r2, r3
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	ea42 0103 	orr.w	r1, r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008c3c:	f000 80d6 	beq.w	8008dec <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	6852      	ldr	r2, [r2, #4]
 8008c48:	619a      	str	r2, [r3, #24]
}
 8008c4a:	e0cf      	b.n	8008dec <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c54:	431a      	orrs	r2, r3
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c5a:	431a      	orrs	r2, r3
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	431a      	orrs	r2, r3
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	049b      	lsls	r3, r3, #18
 8008c68:	431a      	orrs	r2, r3
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	431a      	orrs	r2, r3
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	69db      	ldr	r3, [r3, #28]
 8008c74:	431a      	orrs	r2, r3
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	431a      	orrs	r2, r3
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	ea42 0103 	orr.w	r1, r2, r3
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	430a      	orrs	r2, r1
 8008c8c:	615a      	str	r2, [r3, #20]
}
 8008c8e:	e0ad      	b.n	8008dec <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	6a1b      	ldr	r3, [r3, #32]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d058      	beq.n	8008d4a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	6892      	ldr	r2, [r2, #8]
 8008ca0:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d02d      	beq.n	8008d06 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb8:	431a      	orrs	r2, r3
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbe:	431a      	orrs	r2, r3
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	049b      	lsls	r3, r3, #18
 8008cc6:	431a      	orrs	r2, r3
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	431a      	orrs	r2, r3
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	431a      	orrs	r2, r3
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	431a      	orrs	r2, r3
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	ea42 0103 	orr.w	r1, r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008cf8:	d078      	beq.n	8008dec <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	6852      	ldr	r2, [r2, #4]
 8008d02:	619a      	str	r2, [r3, #24]
}
 8008d04:	e072      	b.n	8008dec <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0e:	431a      	orrs	r2, r3
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d14:	431a      	orrs	r2, r3
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1a:	431a      	orrs	r2, r3
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	049b      	lsls	r3, r3, #18
 8008d22:	431a      	orrs	r2, r3
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	431a      	orrs	r2, r3
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	6a1b      	ldr	r3, [r3, #32]
 8008d2e:	431a      	orrs	r2, r3
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	431a      	orrs	r2, r3
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	ea42 0103 	orr.w	r1, r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	430a      	orrs	r2, r1
 8008d46:	615a      	str	r2, [r3, #20]
}
 8008d48:	e050      	b.n	8008dec <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d02a      	beq.n	8008da8 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5a:	431a      	orrs	r2, r3
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d60:	431a      	orrs	r2, r3
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	431a      	orrs	r2, r3
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	049b      	lsls	r3, r3, #18
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	6a1b      	ldr	r3, [r3, #32]
 8008d74:	431a      	orrs	r2, r3
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	431a      	orrs	r2, r3
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	ea42 0103 	orr.w	r1, r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	430a      	orrs	r2, r1
 8008d92:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008d9a:	d027      	beq.n	8008dec <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	6852      	ldr	r2, [r2, #4]
 8008da4:	619a      	str	r2, [r3, #24]
}
 8008da6:	e021      	b.n	8008dec <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d01d      	beq.n	8008dec <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db8:	431a      	orrs	r2, r3
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dbe:	431a      	orrs	r2, r3
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc4:	431a      	orrs	r2, r3
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	049b      	lsls	r3, r3, #18
 8008dcc:	431a      	orrs	r2, r3
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	431a      	orrs	r2, r3
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	69db      	ldr	r3, [r3, #28]
 8008dd8:	431a      	orrs	r2, r3
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	ea42 0103 	orr.w	r1, r2, r3
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	430a      	orrs	r2, r1
 8008dea:	615a      	str	r2, [r3, #20]
}
 8008dec:	bf00      	nop
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8008e00:	2300      	movs	r3, #0
 8008e02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e25c      	b.n	80092c8 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f000 8087 	beq.w	8008f2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008e1c:	4b96      	ldr	r3, [pc, #600]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	f003 030c 	and.w	r3, r3, #12
 8008e24:	2b04      	cmp	r3, #4
 8008e26:	d00c      	beq.n	8008e42 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e28:	4b93      	ldr	r3, [pc, #588]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	f003 030c 	and.w	r3, r3, #12
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	d112      	bne.n	8008e5a <HAL_RCC_OscConfig+0x62>
 8008e34:	4b90      	ldr	r3, [pc, #576]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e40:	d10b      	bne.n	8008e5a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e42:	4b8d      	ldr	r3, [pc, #564]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d06c      	beq.n	8008f28 <HAL_RCC_OscConfig+0x130>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d168      	bne.n	8008f28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e236      	b.n	80092c8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e62:	d106      	bne.n	8008e72 <HAL_RCC_OscConfig+0x7a>
 8008e64:	4b84      	ldr	r3, [pc, #528]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a83      	ldr	r2, [pc, #524]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	e02e      	b.n	8008ed0 <HAL_RCC_OscConfig+0xd8>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10c      	bne.n	8008e94 <HAL_RCC_OscConfig+0x9c>
 8008e7a:	4b7f      	ldr	r3, [pc, #508]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a7e      	ldr	r2, [pc, #504]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e84:	6013      	str	r3, [r2, #0]
 8008e86:	4b7c      	ldr	r3, [pc, #496]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a7b      	ldr	r2, [pc, #492]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e90:	6013      	str	r3, [r2, #0]
 8008e92:	e01d      	b.n	8008ed0 <HAL_RCC_OscConfig+0xd8>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e9c:	d10c      	bne.n	8008eb8 <HAL_RCC_OscConfig+0xc0>
 8008e9e:	4b76      	ldr	r3, [pc, #472]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a75      	ldr	r2, [pc, #468]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ea8:	6013      	str	r3, [r2, #0]
 8008eaa:	4b73      	ldr	r3, [pc, #460]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a72      	ldr	r2, [pc, #456]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008eb4:	6013      	str	r3, [r2, #0]
 8008eb6:	e00b      	b.n	8008ed0 <HAL_RCC_OscConfig+0xd8>
 8008eb8:	4b6f      	ldr	r3, [pc, #444]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a6e      	ldr	r2, [pc, #440]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ec2:	6013      	str	r3, [r2, #0]
 8008ec4:	4b6c      	ldr	r3, [pc, #432]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a6b      	ldr	r2, [pc, #428]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d013      	beq.n	8008f00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed8:	f7fa fe7a 	bl	8003bd0 <HAL_GetTick>
 8008edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ede:	e008      	b.n	8008ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ee0:	f7fa fe76 	bl	8003bd0 <HAL_GetTick>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	2b64      	cmp	r3, #100	; 0x64
 8008eec:	d901      	bls.n	8008ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e1ea      	b.n	80092c8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ef2:	4b61      	ldr	r3, [pc, #388]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d0f0      	beq.n	8008ee0 <HAL_RCC_OscConfig+0xe8>
 8008efe:	e014      	b.n	8008f2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f00:	f7fa fe66 	bl	8003bd0 <HAL_GetTick>
 8008f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f06:	e008      	b.n	8008f1a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f08:	f7fa fe62 	bl	8003bd0 <HAL_GetTick>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	2b64      	cmp	r3, #100	; 0x64
 8008f14:	d901      	bls.n	8008f1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e1d6      	b.n	80092c8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f1a:	4b57      	ldr	r3, [pc, #348]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1f0      	bne.n	8008f08 <HAL_RCC_OscConfig+0x110>
 8008f26:	e000      	b.n	8008f2a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0302 	and.w	r3, r3, #2
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d069      	beq.n	800900a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008f36:	4b50      	ldr	r3, [pc, #320]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	f003 030c 	and.w	r3, r3, #12
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00b      	beq.n	8008f5a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f42:	4b4d      	ldr	r3, [pc, #308]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	f003 030c 	and.w	r3, r3, #12
 8008f4a:	2b08      	cmp	r3, #8
 8008f4c:	d11c      	bne.n	8008f88 <HAL_RCC_OscConfig+0x190>
 8008f4e:	4b4a      	ldr	r3, [pc, #296]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d116      	bne.n	8008f88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f5a:	4b47      	ldr	r3, [pc, #284]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d005      	beq.n	8008f72 <HAL_RCC_OscConfig+0x17a>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d001      	beq.n	8008f72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e1aa      	b.n	80092c8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f72:	4b41      	ldr	r3, [pc, #260]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	00db      	lsls	r3, r3, #3
 8008f80:	493d      	ldr	r1, [pc, #244]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008f82:	4313      	orrs	r3, r2
 8008f84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f86:	e040      	b.n	800900a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d023      	beq.n	8008fd8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f90:	4b39      	ldr	r3, [pc, #228]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a38      	ldr	r2, [pc, #224]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008f96:	f043 0301 	orr.w	r3, r3, #1
 8008f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f9c:	f7fa fe18 	bl	8003bd0 <HAL_GetTick>
 8008fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fa2:	e008      	b.n	8008fb6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fa4:	f7fa fe14 	bl	8003bd0 <HAL_GetTick>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d901      	bls.n	8008fb6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e188      	b.n	80092c8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fb6:	4b30      	ldr	r3, [pc, #192]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 0302 	and.w	r3, r3, #2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d0f0      	beq.n	8008fa4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fc2:	4b2d      	ldr	r3, [pc, #180]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	00db      	lsls	r3, r3, #3
 8008fd0:	4929      	ldr	r1, [pc, #164]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	600b      	str	r3, [r1, #0]
 8008fd6:	e018      	b.n	800900a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008fd8:	4b27      	ldr	r3, [pc, #156]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a26      	ldr	r2, [pc, #152]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8008fde:	f023 0301 	bic.w	r3, r3, #1
 8008fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe4:	f7fa fdf4 	bl	8003bd0 <HAL_GetTick>
 8008fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fea:	e008      	b.n	8008ffe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fec:	f7fa fdf0 	bl	8003bd0 <HAL_GetTick>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d901      	bls.n	8008ffe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	e164      	b.n	80092c8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ffe:	4b1e      	ldr	r3, [pc, #120]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 0302 	and.w	r3, r3, #2
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1f0      	bne.n	8008fec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0308 	and.w	r3, r3, #8
 8009012:	2b00      	cmp	r3, #0
 8009014:	d038      	beq.n	8009088 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d019      	beq.n	8009052 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800901e:	4b16      	ldr	r3, [pc, #88]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8009020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009022:	4a15      	ldr	r2, [pc, #84]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8009024:	f043 0301 	orr.w	r3, r3, #1
 8009028:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800902a:	f7fa fdd1 	bl	8003bd0 <HAL_GetTick>
 800902e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009030:	e008      	b.n	8009044 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009032:	f7fa fdcd 	bl	8003bd0 <HAL_GetTick>
 8009036:	4602      	mov	r2, r0
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	2b02      	cmp	r3, #2
 800903e:	d901      	bls.n	8009044 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e141      	b.n	80092c8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009044:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8009046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009048:	f003 0302 	and.w	r3, r3, #2
 800904c:	2b00      	cmp	r3, #0
 800904e:	d0f0      	beq.n	8009032 <HAL_RCC_OscConfig+0x23a>
 8009050:	e01a      	b.n	8009088 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009052:	4b09      	ldr	r3, [pc, #36]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8009054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009056:	4a08      	ldr	r2, [pc, #32]	; (8009078 <HAL_RCC_OscConfig+0x280>)
 8009058:	f023 0301 	bic.w	r3, r3, #1
 800905c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800905e:	f7fa fdb7 	bl	8003bd0 <HAL_GetTick>
 8009062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009064:	e00a      	b.n	800907c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009066:	f7fa fdb3 	bl	8003bd0 <HAL_GetTick>
 800906a:	4602      	mov	r2, r0
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	2b02      	cmp	r3, #2
 8009072:	d903      	bls.n	800907c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e127      	b.n	80092c8 <HAL_RCC_OscConfig+0x4d0>
 8009078:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800907c:	4b94      	ldr	r3, [pc, #592]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 800907e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009080:	f003 0302 	and.w	r3, r3, #2
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1ee      	bne.n	8009066 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 80a4 	beq.w	80091de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009096:	4b8e      	ldr	r3, [pc, #568]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 8009098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10d      	bne.n	80090be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80090a2:	4b8b      	ldr	r3, [pc, #556]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	4a8a      	ldr	r2, [pc, #552]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 80090a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090ac:	6413      	str	r3, [r2, #64]	; 0x40
 80090ae:	4b88      	ldr	r3, [pc, #544]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 80090b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80090ba:	2301      	movs	r3, #1
 80090bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090be:	4b85      	ldr	r3, [pc, #532]	; (80092d4 <HAL_RCC_OscConfig+0x4dc>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d118      	bne.n	80090fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80090ca:	4b82      	ldr	r3, [pc, #520]	; (80092d4 <HAL_RCC_OscConfig+0x4dc>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a81      	ldr	r2, [pc, #516]	; (80092d4 <HAL_RCC_OscConfig+0x4dc>)
 80090d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80090d6:	f7fa fd7b 	bl	8003bd0 <HAL_GetTick>
 80090da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090dc:	e008      	b.n	80090f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80090de:	f7fa fd77 	bl	8003bd0 <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	2b64      	cmp	r3, #100	; 0x64
 80090ea:	d901      	bls.n	80090f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e0eb      	b.n	80092c8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090f0:	4b78      	ldr	r3, [pc, #480]	; (80092d4 <HAL_RCC_OscConfig+0x4dc>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d0f0      	beq.n	80090de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d106      	bne.n	8009112 <HAL_RCC_OscConfig+0x31a>
 8009104:	4b72      	ldr	r3, [pc, #456]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 8009106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009108:	4a71      	ldr	r2, [pc, #452]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 800910a:	f043 0301 	orr.w	r3, r3, #1
 800910e:	6713      	str	r3, [r2, #112]	; 0x70
 8009110:	e02d      	b.n	800916e <HAL_RCC_OscConfig+0x376>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10c      	bne.n	8009134 <HAL_RCC_OscConfig+0x33c>
 800911a:	4b6d      	ldr	r3, [pc, #436]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 800911c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911e:	4a6c      	ldr	r2, [pc, #432]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 8009120:	f023 0301 	bic.w	r3, r3, #1
 8009124:	6713      	str	r3, [r2, #112]	; 0x70
 8009126:	4b6a      	ldr	r3, [pc, #424]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 8009128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912a:	4a69      	ldr	r2, [pc, #420]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 800912c:	f023 0304 	bic.w	r3, r3, #4
 8009130:	6713      	str	r3, [r2, #112]	; 0x70
 8009132:	e01c      	b.n	800916e <HAL_RCC_OscConfig+0x376>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	2b05      	cmp	r3, #5
 800913a:	d10c      	bne.n	8009156 <HAL_RCC_OscConfig+0x35e>
 800913c:	4b64      	ldr	r3, [pc, #400]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 800913e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009140:	4a63      	ldr	r2, [pc, #396]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 8009142:	f043 0304 	orr.w	r3, r3, #4
 8009146:	6713      	str	r3, [r2, #112]	; 0x70
 8009148:	4b61      	ldr	r3, [pc, #388]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 800914a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800914c:	4a60      	ldr	r2, [pc, #384]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 800914e:	f043 0301 	orr.w	r3, r3, #1
 8009152:	6713      	str	r3, [r2, #112]	; 0x70
 8009154:	e00b      	b.n	800916e <HAL_RCC_OscConfig+0x376>
 8009156:	4b5e      	ldr	r3, [pc, #376]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 8009158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800915a:	4a5d      	ldr	r2, [pc, #372]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 800915c:	f023 0301 	bic.w	r3, r3, #1
 8009160:	6713      	str	r3, [r2, #112]	; 0x70
 8009162:	4b5b      	ldr	r3, [pc, #364]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 8009164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009166:	4a5a      	ldr	r2, [pc, #360]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 8009168:	f023 0304 	bic.w	r3, r3, #4
 800916c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d015      	beq.n	80091a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009176:	f7fa fd2b 	bl	8003bd0 <HAL_GetTick>
 800917a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800917c:	e00a      	b.n	8009194 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800917e:	f7fa fd27 	bl	8003bd0 <HAL_GetTick>
 8009182:	4602      	mov	r2, r0
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	f241 3288 	movw	r2, #5000	; 0x1388
 800918c:	4293      	cmp	r3, r2
 800918e:	d901      	bls.n	8009194 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e099      	b.n	80092c8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009194:	4b4e      	ldr	r3, [pc, #312]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 8009196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009198:	f003 0302 	and.w	r3, r3, #2
 800919c:	2b00      	cmp	r3, #0
 800919e:	d0ee      	beq.n	800917e <HAL_RCC_OscConfig+0x386>
 80091a0:	e014      	b.n	80091cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091a2:	f7fa fd15 	bl	8003bd0 <HAL_GetTick>
 80091a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091a8:	e00a      	b.n	80091c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091aa:	f7fa fd11 	bl	8003bd0 <HAL_GetTick>
 80091ae:	4602      	mov	r2, r0
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d901      	bls.n	80091c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	e083      	b.n	80092c8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091c0:	4b43      	ldr	r3, [pc, #268]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 80091c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c4:	f003 0302 	and.w	r3, r3, #2
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1ee      	bne.n	80091aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80091cc:	7dfb      	ldrb	r3, [r7, #23]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d105      	bne.n	80091de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091d2:	4b3f      	ldr	r3, [pc, #252]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 80091d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d6:	4a3e      	ldr	r2, [pc, #248]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 80091d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d06f      	beq.n	80092c6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80091e6:	4b3a      	ldr	r3, [pc, #232]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f003 030c 	and.w	r3, r3, #12
 80091ee:	2b08      	cmp	r3, #8
 80091f0:	d067      	beq.n	80092c2 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d149      	bne.n	800928e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091fa:	4b35      	ldr	r3, [pc, #212]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a34      	ldr	r2, [pc, #208]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 8009200:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009206:	f7fa fce3 	bl	8003bd0 <HAL_GetTick>
 800920a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800920c:	e008      	b.n	8009220 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800920e:	f7fa fcdf 	bl	8003bd0 <HAL_GetTick>
 8009212:	4602      	mov	r2, r0
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	2b02      	cmp	r3, #2
 800921a:	d901      	bls.n	8009220 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e053      	b.n	80092c8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009220:	4b2b      	ldr	r3, [pc, #172]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1f0      	bne.n	800920e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	69da      	ldr	r2, [r3, #28]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	431a      	orrs	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923a:	019b      	lsls	r3, r3, #6
 800923c:	431a      	orrs	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009242:	085b      	lsrs	r3, r3, #1
 8009244:	3b01      	subs	r3, #1
 8009246:	041b      	lsls	r3, r3, #16
 8009248:	431a      	orrs	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924e:	061b      	lsls	r3, r3, #24
 8009250:	4313      	orrs	r3, r2
 8009252:	4a1f      	ldr	r2, [pc, #124]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 8009254:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009258:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800925a:	4b1d      	ldr	r3, [pc, #116]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a1c      	ldr	r2, [pc, #112]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 8009260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009266:	f7fa fcb3 	bl	8003bd0 <HAL_GetTick>
 800926a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800926c:	e008      	b.n	8009280 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800926e:	f7fa fcaf 	bl	8003bd0 <HAL_GetTick>
 8009272:	4602      	mov	r2, r0
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	2b02      	cmp	r3, #2
 800927a:	d901      	bls.n	8009280 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e023      	b.n	80092c8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009280:	4b13      	ldr	r3, [pc, #76]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0f0      	beq.n	800926e <HAL_RCC_OscConfig+0x476>
 800928c:	e01b      	b.n	80092c6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800928e:	4b10      	ldr	r3, [pc, #64]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a0f      	ldr	r2, [pc, #60]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 8009294:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800929a:	f7fa fc99 	bl	8003bd0 <HAL_GetTick>
 800929e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092a0:	e008      	b.n	80092b4 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092a2:	f7fa fc95 	bl	8003bd0 <HAL_GetTick>
 80092a6:	4602      	mov	r2, r0
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d901      	bls.n	80092b4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e009      	b.n	80092c8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092b4:	4b06      	ldr	r3, [pc, #24]	; (80092d0 <HAL_RCC_OscConfig+0x4d8>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1f0      	bne.n	80092a2 <HAL_RCC_OscConfig+0x4aa>
 80092c0:	e001      	b.n	80092c6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e000      	b.n	80092c8 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3718      	adds	r7, #24
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	40023800 	.word	0x40023800
 80092d4:	40007000 	.word	0x40007000

080092d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80092e2:	2300      	movs	r3, #0
 80092e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e0ce      	b.n	800948e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80092f0:	4b69      	ldr	r3, [pc, #420]	; (8009498 <HAL_RCC_ClockConfig+0x1c0>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 030f 	and.w	r3, r3, #15
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d910      	bls.n	8009320 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092fe:	4b66      	ldr	r3, [pc, #408]	; (8009498 <HAL_RCC_ClockConfig+0x1c0>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f023 020f 	bic.w	r2, r3, #15
 8009306:	4964      	ldr	r1, [pc, #400]	; (8009498 <HAL_RCC_ClockConfig+0x1c0>)
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	4313      	orrs	r3, r2
 800930c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800930e:	4b62      	ldr	r3, [pc, #392]	; (8009498 <HAL_RCC_ClockConfig+0x1c0>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 030f 	and.w	r3, r3, #15
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	429a      	cmp	r2, r3
 800931a:	d001      	beq.n	8009320 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	e0b6      	b.n	800948e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0302 	and.w	r3, r3, #2
 8009328:	2b00      	cmp	r3, #0
 800932a:	d020      	beq.n	800936e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 0304 	and.w	r3, r3, #4
 8009334:	2b00      	cmp	r3, #0
 8009336:	d005      	beq.n	8009344 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009338:	4b58      	ldr	r3, [pc, #352]	; (800949c <HAL_RCC_ClockConfig+0x1c4>)
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	4a57      	ldr	r2, [pc, #348]	; (800949c <HAL_RCC_ClockConfig+0x1c4>)
 800933e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009342:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 0308 	and.w	r3, r3, #8
 800934c:	2b00      	cmp	r3, #0
 800934e:	d005      	beq.n	800935c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009350:	4b52      	ldr	r3, [pc, #328]	; (800949c <HAL_RCC_ClockConfig+0x1c4>)
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	4a51      	ldr	r2, [pc, #324]	; (800949c <HAL_RCC_ClockConfig+0x1c4>)
 8009356:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800935a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800935c:	4b4f      	ldr	r3, [pc, #316]	; (800949c <HAL_RCC_ClockConfig+0x1c4>)
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	494c      	ldr	r1, [pc, #304]	; (800949c <HAL_RCC_ClockConfig+0x1c4>)
 800936a:	4313      	orrs	r3, r2
 800936c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b00      	cmp	r3, #0
 8009378:	d040      	beq.n	80093fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d107      	bne.n	8009392 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009382:	4b46      	ldr	r3, [pc, #280]	; (800949c <HAL_RCC_ClockConfig+0x1c4>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800938a:	2b00      	cmp	r3, #0
 800938c:	d115      	bne.n	80093ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e07d      	b.n	800948e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	2b02      	cmp	r3, #2
 8009398:	d107      	bne.n	80093aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800939a:	4b40      	ldr	r3, [pc, #256]	; (800949c <HAL_RCC_ClockConfig+0x1c4>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d109      	bne.n	80093ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e071      	b.n	800948e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093aa:	4b3c      	ldr	r3, [pc, #240]	; (800949c <HAL_RCC_ClockConfig+0x1c4>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d101      	bne.n	80093ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	e069      	b.n	800948e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80093ba:	4b38      	ldr	r3, [pc, #224]	; (800949c <HAL_RCC_ClockConfig+0x1c4>)
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	f023 0203 	bic.w	r2, r3, #3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	4935      	ldr	r1, [pc, #212]	; (800949c <HAL_RCC_ClockConfig+0x1c4>)
 80093c8:	4313      	orrs	r3, r2
 80093ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093cc:	f7fa fc00 	bl	8003bd0 <HAL_GetTick>
 80093d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093d2:	e00a      	b.n	80093ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093d4:	f7fa fbfc 	bl	8003bd0 <HAL_GetTick>
 80093d8:	4602      	mov	r2, r0
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	f241 3288 	movw	r2, #5000	; 0x1388
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d901      	bls.n	80093ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e051      	b.n	800948e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093ea:	4b2c      	ldr	r3, [pc, #176]	; (800949c <HAL_RCC_ClockConfig+0x1c4>)
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	f003 020c 	and.w	r2, r3, #12
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d1eb      	bne.n	80093d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80093fc:	4b26      	ldr	r3, [pc, #152]	; (8009498 <HAL_RCC_ClockConfig+0x1c0>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 030f 	and.w	r3, r3, #15
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	429a      	cmp	r2, r3
 8009408:	d210      	bcs.n	800942c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800940a:	4b23      	ldr	r3, [pc, #140]	; (8009498 <HAL_RCC_ClockConfig+0x1c0>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f023 020f 	bic.w	r2, r3, #15
 8009412:	4921      	ldr	r1, [pc, #132]	; (8009498 <HAL_RCC_ClockConfig+0x1c0>)
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	4313      	orrs	r3, r2
 8009418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800941a:	4b1f      	ldr	r3, [pc, #124]	; (8009498 <HAL_RCC_ClockConfig+0x1c0>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 030f 	and.w	r3, r3, #15
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	429a      	cmp	r2, r3
 8009426:	d001      	beq.n	800942c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	e030      	b.n	800948e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0304 	and.w	r3, r3, #4
 8009434:	2b00      	cmp	r3, #0
 8009436:	d008      	beq.n	800944a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009438:	4b18      	ldr	r3, [pc, #96]	; (800949c <HAL_RCC_ClockConfig+0x1c4>)
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	4915      	ldr	r1, [pc, #84]	; (800949c <HAL_RCC_ClockConfig+0x1c4>)
 8009446:	4313      	orrs	r3, r2
 8009448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0308 	and.w	r3, r3, #8
 8009452:	2b00      	cmp	r3, #0
 8009454:	d009      	beq.n	800946a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009456:	4b11      	ldr	r3, [pc, #68]	; (800949c <HAL_RCC_ClockConfig+0x1c4>)
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	00db      	lsls	r3, r3, #3
 8009464:	490d      	ldr	r1, [pc, #52]	; (800949c <HAL_RCC_ClockConfig+0x1c4>)
 8009466:	4313      	orrs	r3, r2
 8009468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800946a:	f000 f81d 	bl	80094a8 <HAL_RCC_GetSysClockFreq>
 800946e:	4601      	mov	r1, r0
 8009470:	4b0a      	ldr	r3, [pc, #40]	; (800949c <HAL_RCC_ClockConfig+0x1c4>)
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	091b      	lsrs	r3, r3, #4
 8009476:	f003 030f 	and.w	r3, r3, #15
 800947a:	4a09      	ldr	r2, [pc, #36]	; (80094a0 <HAL_RCC_ClockConfig+0x1c8>)
 800947c:	5cd3      	ldrb	r3, [r2, r3]
 800947e:	fa21 f303 	lsr.w	r3, r1, r3
 8009482:	4a08      	ldr	r2, [pc, #32]	; (80094a4 <HAL_RCC_ClockConfig+0x1cc>)
 8009484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8009486:	2000      	movs	r0, #0
 8009488:	f7f9 f898 	bl	80025bc <HAL_InitTick>

  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	40023c00 	.word	0x40023c00
 800949c:	40023800 	.word	0x40023800
 80094a0:	0802ca48 	.word	0x0802ca48
 80094a4:	20000000 	.word	0x20000000

080094a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	607b      	str	r3, [r7, #4]
 80094b2:	2300      	movs	r3, #0
 80094b4:	60fb      	str	r3, [r7, #12]
 80094b6:	2300      	movs	r3, #0
 80094b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80094ba:	2300      	movs	r3, #0
 80094bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094be:	4b50      	ldr	r3, [pc, #320]	; (8009600 <HAL_RCC_GetSysClockFreq+0x158>)
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	f003 030c 	and.w	r3, r3, #12
 80094c6:	2b04      	cmp	r3, #4
 80094c8:	d007      	beq.n	80094da <HAL_RCC_GetSysClockFreq+0x32>
 80094ca:	2b08      	cmp	r3, #8
 80094cc:	d008      	beq.n	80094e0 <HAL_RCC_GetSysClockFreq+0x38>
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	f040 808d 	bne.w	80095ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80094d4:	4b4b      	ldr	r3, [pc, #300]	; (8009604 <HAL_RCC_GetSysClockFreq+0x15c>)
 80094d6:	60bb      	str	r3, [r7, #8]
       break;
 80094d8:	e08c      	b.n	80095f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80094da:	4b4b      	ldr	r3, [pc, #300]	; (8009608 <HAL_RCC_GetSysClockFreq+0x160>)
 80094dc:	60bb      	str	r3, [r7, #8]
      break;
 80094de:	e089      	b.n	80095f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80094e0:	4b47      	ldr	r3, [pc, #284]	; (8009600 <HAL_RCC_GetSysClockFreq+0x158>)
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094e8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80094ea:	4b45      	ldr	r3, [pc, #276]	; (8009600 <HAL_RCC_GetSysClockFreq+0x158>)
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d023      	beq.n	800953e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094f6:	4b42      	ldr	r3, [pc, #264]	; (8009600 <HAL_RCC_GetSysClockFreq+0x158>)
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	099b      	lsrs	r3, r3, #6
 80094fc:	f04f 0400 	mov.w	r4, #0
 8009500:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009504:	f04f 0200 	mov.w	r2, #0
 8009508:	ea03 0501 	and.w	r5, r3, r1
 800950c:	ea04 0602 	and.w	r6, r4, r2
 8009510:	4a3d      	ldr	r2, [pc, #244]	; (8009608 <HAL_RCC_GetSysClockFreq+0x160>)
 8009512:	fb02 f106 	mul.w	r1, r2, r6
 8009516:	2200      	movs	r2, #0
 8009518:	fb02 f205 	mul.w	r2, r2, r5
 800951c:	440a      	add	r2, r1
 800951e:	493a      	ldr	r1, [pc, #232]	; (8009608 <HAL_RCC_GetSysClockFreq+0x160>)
 8009520:	fba5 0101 	umull	r0, r1, r5, r1
 8009524:	1853      	adds	r3, r2, r1
 8009526:	4619      	mov	r1, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f04f 0400 	mov.w	r4, #0
 800952e:	461a      	mov	r2, r3
 8009530:	4623      	mov	r3, r4
 8009532:	f7f6 febd 	bl	80002b0 <__aeabi_uldivmod>
 8009536:	4603      	mov	r3, r0
 8009538:	460c      	mov	r4, r1
 800953a:	60fb      	str	r3, [r7, #12]
 800953c:	e049      	b.n	80095d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800953e:	4b30      	ldr	r3, [pc, #192]	; (8009600 <HAL_RCC_GetSysClockFreq+0x158>)
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	099b      	lsrs	r3, r3, #6
 8009544:	f04f 0400 	mov.w	r4, #0
 8009548:	f240 11ff 	movw	r1, #511	; 0x1ff
 800954c:	f04f 0200 	mov.w	r2, #0
 8009550:	ea03 0501 	and.w	r5, r3, r1
 8009554:	ea04 0602 	and.w	r6, r4, r2
 8009558:	4629      	mov	r1, r5
 800955a:	4632      	mov	r2, r6
 800955c:	f04f 0300 	mov.w	r3, #0
 8009560:	f04f 0400 	mov.w	r4, #0
 8009564:	0154      	lsls	r4, r2, #5
 8009566:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800956a:	014b      	lsls	r3, r1, #5
 800956c:	4619      	mov	r1, r3
 800956e:	4622      	mov	r2, r4
 8009570:	1b49      	subs	r1, r1, r5
 8009572:	eb62 0206 	sbc.w	r2, r2, r6
 8009576:	f04f 0300 	mov.w	r3, #0
 800957a:	f04f 0400 	mov.w	r4, #0
 800957e:	0194      	lsls	r4, r2, #6
 8009580:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009584:	018b      	lsls	r3, r1, #6
 8009586:	1a5b      	subs	r3, r3, r1
 8009588:	eb64 0402 	sbc.w	r4, r4, r2
 800958c:	f04f 0100 	mov.w	r1, #0
 8009590:	f04f 0200 	mov.w	r2, #0
 8009594:	00e2      	lsls	r2, r4, #3
 8009596:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800959a:	00d9      	lsls	r1, r3, #3
 800959c:	460b      	mov	r3, r1
 800959e:	4614      	mov	r4, r2
 80095a0:	195b      	adds	r3, r3, r5
 80095a2:	eb44 0406 	adc.w	r4, r4, r6
 80095a6:	f04f 0100 	mov.w	r1, #0
 80095aa:	f04f 0200 	mov.w	r2, #0
 80095ae:	02a2      	lsls	r2, r4, #10
 80095b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80095b4:	0299      	lsls	r1, r3, #10
 80095b6:	460b      	mov	r3, r1
 80095b8:	4614      	mov	r4, r2
 80095ba:	4618      	mov	r0, r3
 80095bc:	4621      	mov	r1, r4
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f04f 0400 	mov.w	r4, #0
 80095c4:	461a      	mov	r2, r3
 80095c6:	4623      	mov	r3, r4
 80095c8:	f7f6 fe72 	bl	80002b0 <__aeabi_uldivmod>
 80095cc:	4603      	mov	r3, r0
 80095ce:	460c      	mov	r4, r1
 80095d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80095d2:	4b0b      	ldr	r3, [pc, #44]	; (8009600 <HAL_RCC_GetSysClockFreq+0x158>)
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	0c1b      	lsrs	r3, r3, #16
 80095d8:	f003 0303 	and.w	r3, r3, #3
 80095dc:	3301      	adds	r3, #1
 80095de:	005b      	lsls	r3, r3, #1
 80095e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ea:	60bb      	str	r3, [r7, #8]
      break;
 80095ec:	e002      	b.n	80095f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80095ee:	4b05      	ldr	r3, [pc, #20]	; (8009604 <HAL_RCC_GetSysClockFreq+0x15c>)
 80095f0:	60bb      	str	r3, [r7, #8]
      break;
 80095f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80095f4:	68bb      	ldr	r3, [r7, #8]
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095fe:	bf00      	nop
 8009600:	40023800 	.word	0x40023800
 8009604:	00f42400 	.word	0x00f42400
 8009608:	017d7840 	.word	0x017d7840

0800960c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800960c:	b480      	push	{r7}
 800960e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009610:	4b03      	ldr	r3, [pc, #12]	; (8009620 <HAL_RCC_GetHCLKFreq+0x14>)
 8009612:	681b      	ldr	r3, [r3, #0]
}
 8009614:	4618      	mov	r0, r3
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	20000000 	.word	0x20000000

08009624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009628:	f7ff fff0 	bl	800960c <HAL_RCC_GetHCLKFreq>
 800962c:	4601      	mov	r1, r0
 800962e:	4b05      	ldr	r3, [pc, #20]	; (8009644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	0a9b      	lsrs	r3, r3, #10
 8009634:	f003 0307 	and.w	r3, r3, #7
 8009638:	4a03      	ldr	r2, [pc, #12]	; (8009648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800963a:	5cd3      	ldrb	r3, [r2, r3]
 800963c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009640:	4618      	mov	r0, r3
 8009642:	bd80      	pop	{r7, pc}
 8009644:	40023800 	.word	0x40023800
 8009648:	0802ca58 	.word	0x0802ca58

0800964c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009650:	f7ff ffdc 	bl	800960c <HAL_RCC_GetHCLKFreq>
 8009654:	4601      	mov	r1, r0
 8009656:	4b05      	ldr	r3, [pc, #20]	; (800966c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	0b5b      	lsrs	r3, r3, #13
 800965c:	f003 0307 	and.w	r3, r3, #7
 8009660:	4a03      	ldr	r2, [pc, #12]	; (8009670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009662:	5cd3      	ldrb	r3, [r2, r3]
 8009664:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009668:	4618      	mov	r0, r3
 800966a:	bd80      	pop	{r7, pc}
 800966c:	40023800 	.word	0x40023800
 8009670:	0802ca58 	.word	0x0802ca58

08009674 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	220f      	movs	r2, #15
 8009682:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009684:	4b12      	ldr	r3, [pc, #72]	; (80096d0 <HAL_RCC_GetClockConfig+0x5c>)
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f003 0203 	and.w	r2, r3, #3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009690:	4b0f      	ldr	r3, [pc, #60]	; (80096d0 <HAL_RCC_GetClockConfig+0x5c>)
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800969c:	4b0c      	ldr	r3, [pc, #48]	; (80096d0 <HAL_RCC_GetClockConfig+0x5c>)
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80096a8:	4b09      	ldr	r3, [pc, #36]	; (80096d0 <HAL_RCC_GetClockConfig+0x5c>)
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	08db      	lsrs	r3, r3, #3
 80096ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80096b6:	4b07      	ldr	r3, [pc, #28]	; (80096d4 <HAL_RCC_GetClockConfig+0x60>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 020f 	and.w	r2, r3, #15
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	601a      	str	r2, [r3, #0]
}
 80096c2:	bf00      	nop
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	40023800 	.word	0x40023800
 80096d4:	40023c00 	.word	0x40023c00

080096d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b088      	sub	sp, #32
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80096e0:	2300      	movs	r3, #0
 80096e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80096e4:	2300      	movs	r3, #0
 80096e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80096e8:	2300      	movs	r3, #0
 80096ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80096f0:	2300      	movs	r3, #0
 80096f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d012      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009700:	4b69      	ldr	r3, [pc, #420]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	4a68      	ldr	r2, [pc, #416]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009706:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800970a:	6093      	str	r3, [r2, #8]
 800970c:	4b66      	ldr	r3, [pc, #408]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800970e:	689a      	ldr	r2, [r3, #8]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009714:	4964      	ldr	r1, [pc, #400]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009716:	4313      	orrs	r3, r2
 8009718:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009722:	2301      	movs	r3, #1
 8009724:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800972e:	2b00      	cmp	r3, #0
 8009730:	d017      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009732:	4b5d      	ldr	r3, [pc, #372]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009738:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009740:	4959      	ldr	r1, [pc, #356]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009742:	4313      	orrs	r3, r2
 8009744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800974c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009750:	d101      	bne.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009752:	2301      	movs	r3, #1
 8009754:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800975a:	2b00      	cmp	r3, #0
 800975c:	d101      	bne.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800975e:	2301      	movs	r3, #1
 8009760:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800976a:	2b00      	cmp	r3, #0
 800976c:	d017      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800976e:	4b4e      	ldr	r3, [pc, #312]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009774:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977c:	494a      	ldr	r1, [pc, #296]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800977e:	4313      	orrs	r3, r2
 8009780:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800978c:	d101      	bne.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800978e:	2301      	movs	r3, #1
 8009790:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800979a:	2301      	movs	r3, #1
 800979c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80097aa:	2301      	movs	r3, #1
 80097ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0320 	and.w	r3, r3, #32
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f000 808b 	beq.w	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80097bc:	4b3a      	ldr	r3, [pc, #232]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c0:	4a39      	ldr	r2, [pc, #228]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097c6:	6413      	str	r3, [r2, #64]	; 0x40
 80097c8:	4b37      	ldr	r3, [pc, #220]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097d0:	60bb      	str	r3, [r7, #8]
 80097d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80097d4:	4b35      	ldr	r3, [pc, #212]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a34      	ldr	r2, [pc, #208]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80097da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097e0:	f7fa f9f6 	bl	8003bd0 <HAL_GetTick>
 80097e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80097e6:	e008      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097e8:	f7fa f9f2 	bl	8003bd0 <HAL_GetTick>
 80097ec:	4602      	mov	r2, r0
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	2b64      	cmp	r3, #100	; 0x64
 80097f4:	d901      	bls.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80097f6:	2303      	movs	r3, #3
 80097f8:	e355      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80097fa:	4b2c      	ldr	r3, [pc, #176]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009802:	2b00      	cmp	r3, #0
 8009804:	d0f0      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009806:	4b28      	ldr	r3, [pc, #160]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800980a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800980e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d035      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	429a      	cmp	r2, r3
 8009822:	d02e      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009824:	4b20      	ldr	r3, [pc, #128]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800982c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800982e:	4b1e      	ldr	r3, [pc, #120]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009832:	4a1d      	ldr	r2, [pc, #116]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009838:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800983a:	4b1b      	ldr	r3, [pc, #108]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800983c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800983e:	4a1a      	ldr	r2, [pc, #104]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009844:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009846:	4a18      	ldr	r2, [pc, #96]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800984c:	4b16      	ldr	r3, [pc, #88]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800984e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009850:	f003 0301 	and.w	r3, r3, #1
 8009854:	2b01      	cmp	r3, #1
 8009856:	d114      	bne.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009858:	f7fa f9ba 	bl	8003bd0 <HAL_GetTick>
 800985c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800985e:	e00a      	b.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009860:	f7fa f9b6 	bl	8003bd0 <HAL_GetTick>
 8009864:	4602      	mov	r2, r0
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	f241 3288 	movw	r2, #5000	; 0x1388
 800986e:	4293      	cmp	r3, r2
 8009870:	d901      	bls.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009872:	2303      	movs	r3, #3
 8009874:	e317      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009876:	4b0c      	ldr	r3, [pc, #48]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800987a:	f003 0302 	and.w	r3, r3, #2
 800987e:	2b00      	cmp	r3, #0
 8009880:	d0ee      	beq.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800988a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800988e:	d111      	bne.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009890:	4b05      	ldr	r3, [pc, #20]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800989c:	4b04      	ldr	r3, [pc, #16]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800989e:	400b      	ands	r3, r1
 80098a0:	4901      	ldr	r1, [pc, #4]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	608b      	str	r3, [r1, #8]
 80098a6:	e00b      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80098a8:	40023800 	.word	0x40023800
 80098ac:	40007000 	.word	0x40007000
 80098b0:	0ffffcff 	.word	0x0ffffcff
 80098b4:	4bb0      	ldr	r3, [pc, #704]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	4aaf      	ldr	r2, [pc, #700]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80098be:	6093      	str	r3, [r2, #8]
 80098c0:	4bad      	ldr	r3, [pc, #692]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098cc:	49aa      	ldr	r1, [pc, #680]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098ce:	4313      	orrs	r3, r2
 80098d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 0310 	and.w	r3, r3, #16
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d010      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80098de:	4ba6      	ldr	r3, [pc, #664]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098e4:	4aa4      	ldr	r2, [pc, #656]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80098ee:	4ba2      	ldr	r3, [pc, #648]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f8:	499f      	ldr	r1, [pc, #636]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098fa:	4313      	orrs	r3, r2
 80098fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00a      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800990c:	4b9a      	ldr	r3, [pc, #616]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800990e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009912:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800991a:	4997      	ldr	r1, [pc, #604]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800991c:	4313      	orrs	r3, r2
 800991e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00a      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800992e:	4b92      	ldr	r3, [pc, #584]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009934:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800993c:	498e      	ldr	r1, [pc, #568]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800993e:	4313      	orrs	r3, r2
 8009940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00a      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009950:	4b89      	ldr	r3, [pc, #548]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009956:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800995e:	4986      	ldr	r1, [pc, #536]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009960:	4313      	orrs	r3, r2
 8009962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00a      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009972:	4b81      	ldr	r3, [pc, #516]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009978:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009980:	497d      	ldr	r1, [pc, #500]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009982:	4313      	orrs	r3, r2
 8009984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00a      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009994:	4b78      	ldr	r3, [pc, #480]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800999a:	f023 0203 	bic.w	r2, r3, #3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099a2:	4975      	ldr	r1, [pc, #468]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80099a4:	4313      	orrs	r3, r2
 80099a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00a      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80099b6:	4b70      	ldr	r3, [pc, #448]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80099b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099bc:	f023 020c 	bic.w	r2, r3, #12
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099c4:	496c      	ldr	r1, [pc, #432]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80099c6:	4313      	orrs	r3, r2
 80099c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00a      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80099d8:	4b67      	ldr	r3, [pc, #412]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80099da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099e6:	4964      	ldr	r1, [pc, #400]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80099e8:	4313      	orrs	r3, r2
 80099ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00a      	beq.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80099fa:	4b5f      	ldr	r3, [pc, #380]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80099fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a00:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a08:	495b      	ldr	r1, [pc, #364]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00a      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009a1c:	4b56      	ldr	r3, [pc, #344]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a2a:	4953      	ldr	r1, [pc, #332]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00a      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009a3e:	4b4e      	ldr	r3, [pc, #312]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a4c:	494a      	ldr	r1, [pc, #296]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00a      	beq.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009a60:	4b45      	ldr	r3, [pc, #276]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a6e:	4942      	ldr	r1, [pc, #264]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009a70:	4313      	orrs	r3, r2
 8009a72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00a      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009a82:	4b3d      	ldr	r3, [pc, #244]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a90:	4939      	ldr	r1, [pc, #228]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009a92:	4313      	orrs	r3, r2
 8009a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00a      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009aa4:	4b34      	ldr	r3, [pc, #208]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aaa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ab2:	4931      	ldr	r1, [pc, #196]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d011      	beq.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009ac6:	4b2c      	ldr	r3, [pc, #176]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009acc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ad4:	4928      	ldr	r1, [pc, #160]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ae0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ae4:	d101      	bne.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 0308 	and.w	r3, r3, #8
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009af6:	2301      	movs	r3, #1
 8009af8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00a      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b06:	4b1c      	ldr	r3, [pc, #112]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b14:	4918      	ldr	r1, [pc, #96]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00b      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009b28:	4b13      	ldr	r3, [pc, #76]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b38:	490f      	ldr	r1, [pc, #60]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d005      	beq.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b4e:	f040 80d8 	bne.w	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009b52:	4b09      	ldr	r3, [pc, #36]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a08      	ldr	r2, [pc, #32]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009b58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b5e:	f7fa f837 	bl	8003bd0 <HAL_GetTick>
 8009b62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009b64:	e00a      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009b66:	f7fa f833 	bl	8003bd0 <HAL_GetTick>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	2b64      	cmp	r3, #100	; 0x64
 8009b72:	d903      	bls.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e196      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8009b78:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009b7c:	4b6c      	ldr	r3, [pc, #432]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1ee      	bne.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 0301 	and.w	r3, r3, #1
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d021      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d11d      	bne.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009b9c:	4b64      	ldr	r3, [pc, #400]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ba2:	0c1b      	lsrs	r3, r3, #16
 8009ba4:	f003 0303 	and.w	r3, r3, #3
 8009ba8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009baa:	4b61      	ldr	r3, [pc, #388]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bb0:	0e1b      	lsrs	r3, r3, #24
 8009bb2:	f003 030f 	and.w	r3, r3, #15
 8009bb6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	019a      	lsls	r2, r3, #6
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	041b      	lsls	r3, r3, #16
 8009bc2:	431a      	orrs	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	061b      	lsls	r3, r3, #24
 8009bc8:	431a      	orrs	r2, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	071b      	lsls	r3, r3, #28
 8009bd0:	4957      	ldr	r1, [pc, #348]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d004      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x516>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bec:	d00a      	beq.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d02e      	beq.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c02:	d129      	bne.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009c04:	4b4a      	ldr	r3, [pc, #296]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c0a:	0c1b      	lsrs	r3, r3, #16
 8009c0c:	f003 0303 	and.w	r3, r3, #3
 8009c10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009c12:	4b47      	ldr	r3, [pc, #284]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c18:	0f1b      	lsrs	r3, r3, #28
 8009c1a:	f003 0307 	and.w	r3, r3, #7
 8009c1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	019a      	lsls	r2, r3, #6
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	041b      	lsls	r3, r3, #16
 8009c2a:	431a      	orrs	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	061b      	lsls	r3, r3, #24
 8009c32:	431a      	orrs	r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	071b      	lsls	r3, r3, #28
 8009c38:	493d      	ldr	r1, [pc, #244]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009c40:	4b3b      	ldr	r3, [pc, #236]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c46:	f023 021f 	bic.w	r2, r3, #31
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	4937      	ldr	r1, [pc, #220]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009c52:	4313      	orrs	r3, r2
 8009c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d01d      	beq.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009c64:	4b32      	ldr	r3, [pc, #200]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c6a:	0e1b      	lsrs	r3, r3, #24
 8009c6c:	f003 030f 	and.w	r3, r3, #15
 8009c70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009c72:	4b2f      	ldr	r3, [pc, #188]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c78:	0f1b      	lsrs	r3, r3, #28
 8009c7a:	f003 0307 	and.w	r3, r3, #7
 8009c7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	019a      	lsls	r2, r3, #6
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	041b      	lsls	r3, r3, #16
 8009c8c:	431a      	orrs	r2, r3
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	061b      	lsls	r3, r3, #24
 8009c92:	431a      	orrs	r2, r3
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	071b      	lsls	r3, r3, #28
 8009c98:	4925      	ldr	r1, [pc, #148]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d011      	beq.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	019a      	lsls	r2, r3, #6
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	041b      	lsls	r3, r3, #16
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	061b      	lsls	r3, r3, #24
 8009cc0:	431a      	orrs	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	071b      	lsls	r3, r3, #28
 8009cc8:	4919      	ldr	r1, [pc, #100]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009cd0:	4b17      	ldr	r3, [pc, #92]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a16      	ldr	r2, [pc, #88]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009cd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009cda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cdc:	f7f9 ff78 	bl	8003bd0 <HAL_GetTick>
 8009ce0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009ce2:	e008      	b.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009ce4:	f7f9 ff74 	bl	8003bd0 <HAL_GetTick>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	2b64      	cmp	r3, #100	; 0x64
 8009cf0:	d901      	bls.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e0d7      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009cf6:	4b0e      	ldr	r3, [pc, #56]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d0f0      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	f040 80cd 	bne.w	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009d0a:	4b09      	ldr	r3, [pc, #36]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a08      	ldr	r2, [pc, #32]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d16:	f7f9 ff5b 	bl	8003bd0 <HAL_GetTick>
 8009d1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009d1c:	e00a      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009d1e:	f7f9 ff57 	bl	8003bd0 <HAL_GetTick>
 8009d22:	4602      	mov	r2, r0
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	2b64      	cmp	r3, #100	; 0x64
 8009d2a:	d903      	bls.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e0ba      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8009d30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009d34:	4b5e      	ldr	r3, [pc, #376]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d40:	d0ed      	beq.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d009      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d02e      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d12a      	bne.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009d6a:	4b51      	ldr	r3, [pc, #324]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d70:	0c1b      	lsrs	r3, r3, #16
 8009d72:	f003 0303 	and.w	r3, r3, #3
 8009d76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009d78:	4b4d      	ldr	r3, [pc, #308]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d7e:	0f1b      	lsrs	r3, r3, #28
 8009d80:	f003 0307 	and.w	r3, r3, #7
 8009d84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	019a      	lsls	r2, r3, #6
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	041b      	lsls	r3, r3, #16
 8009d90:	431a      	orrs	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	061b      	lsls	r3, r3, #24
 8009d98:	431a      	orrs	r2, r3
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	071b      	lsls	r3, r3, #28
 8009d9e:	4944      	ldr	r1, [pc, #272]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009da0:	4313      	orrs	r3, r2
 8009da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009da6:	4b42      	ldr	r3, [pc, #264]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db4:	3b01      	subs	r3, #1
 8009db6:	021b      	lsls	r3, r3, #8
 8009db8:	493d      	ldr	r1, [pc, #244]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d022      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dd4:	d11d      	bne.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009dd6:	4b36      	ldr	r3, [pc, #216]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ddc:	0e1b      	lsrs	r3, r3, #24
 8009dde:	f003 030f 	and.w	r3, r3, #15
 8009de2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009de4:	4b32      	ldr	r3, [pc, #200]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dea:	0f1b      	lsrs	r3, r3, #28
 8009dec:	f003 0307 	and.w	r3, r3, #7
 8009df0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	019a      	lsls	r2, r3, #6
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6a1b      	ldr	r3, [r3, #32]
 8009dfc:	041b      	lsls	r3, r3, #16
 8009dfe:	431a      	orrs	r2, r3
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	061b      	lsls	r3, r3, #24
 8009e04:	431a      	orrs	r2, r3
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	071b      	lsls	r3, r3, #28
 8009e0a:	4929      	ldr	r1, [pc, #164]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 0308 	and.w	r3, r3, #8
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d028      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009e1e:	4b24      	ldr	r3, [pc, #144]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e24:	0e1b      	lsrs	r3, r3, #24
 8009e26:	f003 030f 	and.w	r3, r3, #15
 8009e2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009e2c:	4b20      	ldr	r3, [pc, #128]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e32:	0c1b      	lsrs	r3, r3, #16
 8009e34:	f003 0303 	and.w	r3, r3, #3
 8009e38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	695b      	ldr	r3, [r3, #20]
 8009e3e:	019a      	lsls	r2, r3, #6
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	041b      	lsls	r3, r3, #16
 8009e44:	431a      	orrs	r2, r3
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	061b      	lsls	r3, r3, #24
 8009e4a:	431a      	orrs	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	69db      	ldr	r3, [r3, #28]
 8009e50:	071b      	lsls	r3, r3, #28
 8009e52:	4917      	ldr	r1, [pc, #92]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009e54:	4313      	orrs	r3, r2
 8009e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009e5a:	4b15      	ldr	r3, [pc, #84]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e68:	4911      	ldr	r1, [pc, #68]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009e70:	4b0f      	ldr	r3, [pc, #60]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a0e      	ldr	r2, [pc, #56]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e7c:	f7f9 fea8 	bl	8003bd0 <HAL_GetTick>
 8009e80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009e82:	e008      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009e84:	f7f9 fea4 	bl	8003bd0 <HAL_GetTick>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	2b64      	cmp	r3, #100	; 0x64
 8009e90:	d901      	bls.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e92:	2303      	movs	r3, #3
 8009e94:	e007      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009e96:	4b06      	ldr	r3, [pc, #24]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ea2:	d1ef      	bne.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3720      	adds	r7, #32
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	40023800 	.word	0x40023800

08009eb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b087      	sub	sp, #28
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ed2:	f040 8086 	bne.w	8009fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009ed6:	4b8d      	ldr	r3, [pc, #564]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009edc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009ee4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009eec:	d03e      	beq.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8009eee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ef2:	d073      	beq.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d000      	beq.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009ef8:	e074      	b.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009efa:	4b84      	ldr	r3, [pc, #528]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d108      	bne.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009f06:	4b81      	ldr	r3, [pc, #516]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f0e:	4a80      	ldr	r2, [pc, #512]	; (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f14:	613b      	str	r3, [r7, #16]
 8009f16:	e007      	b.n	8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009f18:	4b7c      	ldr	r3, [pc, #496]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f20:	4a7c      	ldr	r2, [pc, #496]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8009f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f26:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009f28:	4b78      	ldr	r3, [pc, #480]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f2e:	0e1b      	lsrs	r3, r3, #24
 8009f30:	f003 030f 	and.w	r3, r3, #15
 8009f34:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009f36:	4b75      	ldr	r3, [pc, #468]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f3c:	099b      	lsrs	r3, r3, #6
 8009f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f42:	693a      	ldr	r2, [r7, #16]
 8009f44:	fb02 f203 	mul.w	r2, r2, r3
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f4e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009f50:	4b6e      	ldr	r3, [pc, #440]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f56:	0a1b      	lsrs	r3, r3, #8
 8009f58:	f003 031f 	and.w	r3, r3, #31
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f68:	617b      	str	r3, [r7, #20]
        break;
 8009f6a:	e03b      	b.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009f6c:	4b67      	ldr	r3, [pc, #412]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d108      	bne.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009f78:	4b64      	ldr	r3, [pc, #400]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f80:	4a63      	ldr	r2, [pc, #396]	; (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f86:	613b      	str	r3, [r7, #16]
 8009f88:	e007      	b.n	8009f9a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009f8a:	4b60      	ldr	r3, [pc, #384]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f92:	4a60      	ldr	r2, [pc, #384]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8009f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f98:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009f9a:	4b5c      	ldr	r3, [pc, #368]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fa0:	0e1b      	lsrs	r3, r3, #24
 8009fa2:	f003 030f 	and.w	r3, r3, #15
 8009fa6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009fa8:	4b58      	ldr	r3, [pc, #352]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fae:	099b      	lsrs	r3, r3, #6
 8009fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	fb02 f203 	mul.w	r2, r2, r3
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009fc2:	4b52      	ldr	r3, [pc, #328]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fc8:	f003 031f 	and.w	r3, r3, #31
 8009fcc:	3301      	adds	r3, #1
 8009fce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fd8:	617b      	str	r3, [r7, #20]
        break;
 8009fda:	e003      	b.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fdc:	4b4e      	ldr	r3, [pc, #312]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8009fde:	617b      	str	r3, [r7, #20]
        break;
 8009fe0:	e000      	b.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8009fe2:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fea:	f040 8086 	bne.w	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009fee:	4b47      	ldr	r3, [pc, #284]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ff4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009ffc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a004:	d03e      	beq.n	800a084 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a006:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a00a:	d073      	beq.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d000      	beq.n	800a012 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800a010:	e074      	b.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a012:	4b3e      	ldr	r3, [pc, #248]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d108      	bne.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a01e:	4b3b      	ldr	r3, [pc, #236]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a026:	4a3a      	ldr	r2, [pc, #232]	; (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800a028:	fbb2 f3f3 	udiv	r3, r2, r3
 800a02c:	613b      	str	r3, [r7, #16]
 800a02e:	e007      	b.n	800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a030:	4b36      	ldr	r3, [pc, #216]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a038:	4a36      	ldr	r2, [pc, #216]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800a03a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a03e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800a040:	4b32      	ldr	r3, [pc, #200]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a046:	0e1b      	lsrs	r3, r3, #24
 800a048:	f003 030f 	and.w	r3, r3, #15
 800a04c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800a04e:	4b2f      	ldr	r3, [pc, #188]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a054:	099b      	lsrs	r3, r3, #6
 800a056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a05a:	693a      	ldr	r2, [r7, #16]
 800a05c:	fb02 f203 	mul.w	r2, r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	fbb2 f3f3 	udiv	r3, r2, r3
 800a066:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800a068:	4b28      	ldr	r3, [pc, #160]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a06a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a06e:	0a1b      	lsrs	r3, r3, #8
 800a070:	f003 031f 	and.w	r3, r3, #31
 800a074:	3301      	adds	r3, #1
 800a076:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a078:	697a      	ldr	r2, [r7, #20]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a080:	617b      	str	r3, [r7, #20]
        break;
 800a082:	e03b      	b.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a084:	4b21      	ldr	r3, [pc, #132]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d108      	bne.n	800a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a090:	4b1e      	ldr	r3, [pc, #120]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a098:	4a1d      	ldr	r2, [pc, #116]	; (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800a09a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a09e:	613b      	str	r3, [r7, #16]
 800a0a0:	e007      	b.n	800a0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a0a2:	4b1a      	ldr	r3, [pc, #104]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0aa:	4a1a      	ldr	r2, [pc, #104]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800a0ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0b0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800a0b2:	4b16      	ldr	r3, [pc, #88]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a0b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0b8:	0e1b      	lsrs	r3, r3, #24
 800a0ba:	f003 030f 	and.w	r3, r3, #15
 800a0be:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800a0c0:	4b12      	ldr	r3, [pc, #72]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a0c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0c6:	099b      	lsrs	r3, r3, #6
 800a0c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	fb02 f203 	mul.w	r2, r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0d8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800a0da:	4b0c      	ldr	r3, [pc, #48]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a0dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0e0:	f003 031f 	and.w	r3, r3, #31
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a0e8:	697a      	ldr	r2, [r7, #20]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f0:	617b      	str	r3, [r7, #20]
        break;
 800a0f2:	e003      	b.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 800a0f4:	4b08      	ldr	r3, [pc, #32]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800a0f6:	617b      	str	r3, [r7, #20]
        break;
 800a0f8:	e000      	b.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800a0fa:	bf00      	nop

  return frequency;
 800a0fc:	697b      	ldr	r3, [r7, #20]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	371c      	adds	r7, #28
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	40023800 	.word	0x40023800
 800a110:	00f42400 	.word	0x00f42400
 800a114:	017d7840 	.word	0x017d7840
 800a118:	00bb8000 	.word	0x00bb8000

0800a11c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e06b      	b.n	800a206 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	7f5b      	ldrb	r3, [r3, #29]
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b00      	cmp	r3, #0
 800a136:	d105      	bne.n	800a144 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7f7 feec 	bl	8001f1c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2202      	movs	r2, #2
 800a148:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	22ca      	movs	r2, #202	; 0xca
 800a150:	625a      	str	r2, [r3, #36]	; 0x24
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2253      	movs	r2, #83	; 0x53
 800a158:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fb00 	bl	800a760 <RTC_EnterInitMode>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d008      	beq.n	800a178 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	22ff      	movs	r2, #255	; 0xff
 800a16c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2204      	movs	r2, #4
 800a172:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e046      	b.n	800a206 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6899      	ldr	r1, [r3, #8]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	4b23      	ldr	r3, [pc, #140]	; (800a210 <HAL_RTC_Init+0xf4>)
 800a184:	400b      	ands	r3, r1
 800a186:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6899      	ldr	r1, [r3, #8]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	685a      	ldr	r2, [r3, #4]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	431a      	orrs	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	695b      	ldr	r3, [r3, #20]
 800a19c:	431a      	orrs	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	430a      	orrs	r2, r1
 800a1a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	68d2      	ldr	r2, [r2, #12]
 800a1ae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	6919      	ldr	r1, [r3, #16]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	041a      	lsls	r2, r3, #16
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	430a      	orrs	r2, r1
 800a1c2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68da      	ldr	r2, [r3, #12]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1d2:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f022 0208 	bic.w	r2, r2, #8
 800a1e2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	699a      	ldr	r2, [r3, #24]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	22ff      	movs	r2, #255	; 0xff
 800a1fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2201      	movs	r2, #1
 800a202:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a204:	2300      	movs	r3, #0
  }
}
 800a206:	4618      	mov	r0, r3
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	ff8fffbf 	.word	0xff8fffbf

0800a214 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a214:	b590      	push	{r4, r7, lr}
 800a216:	b087      	sub	sp, #28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a220:	2300      	movs	r3, #0
 800a222:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	7f1b      	ldrb	r3, [r3, #28]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d101      	bne.n	800a230 <HAL_RTC_SetTime+0x1c>
 800a22c:	2302      	movs	r3, #2
 800a22e:	e0a8      	b.n	800a382 <HAL_RTC_SetTime+0x16e>
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2201      	movs	r2, #1
 800a234:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2202      	movs	r2, #2
 800a23a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d126      	bne.n	800a290 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d102      	bne.n	800a256 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	2200      	movs	r2, #0
 800a254:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 faac 	bl	800a7b8 <RTC_ByteToBcd2>
 800a260:	4603      	mov	r3, r0
 800a262:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	785b      	ldrb	r3, [r3, #1]
 800a268:	4618      	mov	r0, r3
 800a26a:	f000 faa5 	bl	800a7b8 <RTC_ByteToBcd2>
 800a26e:	4603      	mov	r3, r0
 800a270:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a272:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	789b      	ldrb	r3, [r3, #2]
 800a278:	4618      	mov	r0, r3
 800a27a:	f000 fa9d 	bl	800a7b8 <RTC_ByteToBcd2>
 800a27e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a280:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	7b1b      	ldrb	r3, [r3, #12]
 800a288:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a28a:	4313      	orrs	r3, r2
 800a28c:	617b      	str	r3, [r7, #20]
 800a28e:	e018      	b.n	800a2c2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d102      	bne.n	800a2a4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	785b      	ldrb	r3, [r3, #1]
 800a2ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a2b0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a2b6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	7b1b      	ldrb	r3, [r3, #12]
 800a2bc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	22ca      	movs	r2, #202	; 0xca
 800a2c8:	625a      	str	r2, [r3, #36]	; 0x24
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2253      	movs	r2, #83	; 0x53
 800a2d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f000 fa44 	bl	800a760 <RTC_EnterInitMode>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00b      	beq.n	800a2f6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	22ff      	movs	r2, #255	; 0xff
 800a2e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2204      	movs	r2, #4
 800a2ea:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e045      	b.n	800a382 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	6979      	ldr	r1, [r7, #20]
 800a2fc:	4b23      	ldr	r3, [pc, #140]	; (800a38c <HAL_RTC_SetTime+0x178>)
 800a2fe:	400b      	ands	r3, r1
 800a300:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	689a      	ldr	r2, [r3, #8]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a310:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	6899      	ldr	r1, [r3, #8]
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	691a      	ldr	r2, [r3, #16]
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	431a      	orrs	r2, r3
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	430a      	orrs	r2, r1
 800a328:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	68da      	ldr	r2, [r3, #12]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a338:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	f003 0320 	and.w	r3, r3, #32
 800a344:	2b00      	cmp	r3, #0
 800a346:	d111      	bne.n	800a36c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f000 f9e1 	bl	800a710 <HAL_RTC_WaitForSynchro>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00b      	beq.n	800a36c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	22ff      	movs	r2, #255	; 0xff
 800a35a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2204      	movs	r2, #4
 800a360:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2200      	movs	r2, #0
 800a366:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	e00a      	b.n	800a382 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	22ff      	movs	r2, #255	; 0xff
 800a372:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2201      	movs	r2, #1
 800a378:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2200      	movs	r2, #0
 800a37e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a380:	2300      	movs	r3, #0
  }
}
 800a382:	4618      	mov	r0, r3
 800a384:	371c      	adds	r7, #28
 800a386:	46bd      	mov	sp, r7
 800a388:	bd90      	pop	{r4, r7, pc}
 800a38a:	bf00      	nop
 800a38c:	007f7f7f 	.word	0x007f7f7f

0800a390 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a390:	b590      	push	{r4, r7, lr}
 800a392:	b087      	sub	sp, #28
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800a39c:	2300      	movs	r3, #0
 800a39e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	7f1b      	ldrb	r3, [r3, #28]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d101      	bne.n	800a3ac <HAL_RTC_SetDate+0x1c>
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	e092      	b.n	800a4d2 <HAL_RTC_SetDate+0x142>
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2202      	movs	r2, #2
 800a3b6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10e      	bne.n	800a3dc <HAL_RTC_SetDate+0x4c>
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	785b      	ldrb	r3, [r3, #1]
 800a3c2:	f003 0310 	and.w	r3, r3, #16
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d008      	beq.n	800a3dc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	785b      	ldrb	r3, [r3, #1]
 800a3ce:	f023 0310 	bic.w	r3, r3, #16
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	330a      	adds	r3, #10
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d11c      	bne.n	800a41c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	78db      	ldrb	r3, [r3, #3]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 f9e6 	bl	800a7b8 <RTC_ByteToBcd2>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	785b      	ldrb	r3, [r3, #1]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f000 f9df 	bl	800a7b8 <RTC_ByteToBcd2>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a3fe:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	789b      	ldrb	r3, [r3, #2]
 800a404:	4618      	mov	r0, r3
 800a406:	f000 f9d7 	bl	800a7b8 <RTC_ByteToBcd2>
 800a40a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a40c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a416:	4313      	orrs	r3, r2
 800a418:	617b      	str	r3, [r7, #20]
 800a41a:	e00e      	b.n	800a43a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	78db      	ldrb	r3, [r3, #3]
 800a420:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	785b      	ldrb	r3, [r3, #1]
 800a426:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a428:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800a42e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a436:	4313      	orrs	r3, r2
 800a438:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	22ca      	movs	r2, #202	; 0xca
 800a440:	625a      	str	r2, [r3, #36]	; 0x24
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2253      	movs	r2, #83	; 0x53
 800a448:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f000 f988 	bl	800a760 <RTC_EnterInitMode>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00b      	beq.n	800a46e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	22ff      	movs	r2, #255	; 0xff
 800a45c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2204      	movs	r2, #4
 800a462:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e031      	b.n	800a4d2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	6979      	ldr	r1, [r7, #20]
 800a474:	4b19      	ldr	r3, [pc, #100]	; (800a4dc <HAL_RTC_SetDate+0x14c>)
 800a476:	400b      	ands	r3, r1
 800a478:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68da      	ldr	r2, [r3, #12]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a488:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	f003 0320 	and.w	r3, r3, #32
 800a494:	2b00      	cmp	r3, #0
 800a496:	d111      	bne.n	800a4bc <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f000 f939 	bl	800a710 <HAL_RTC_WaitForSynchro>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00b      	beq.n	800a4bc <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	22ff      	movs	r2, #255	; 0xff
 800a4aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2204      	movs	r2, #4
 800a4b0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e00a      	b.n	800a4d2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	22ff      	movs	r2, #255	; 0xff
 800a4c2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a4d0:	2300      	movs	r3, #0
  }
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	371c      	adds	r7, #28
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd90      	pop	{r4, r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	00ffff3f 	.word	0x00ffff3f

0800a4e0 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a4e0:	b590      	push	{r4, r7, lr}
 800a4e2:	b089      	sub	sp, #36	; 0x24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	61fb      	str	r3, [r7, #28]
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	7f1b      	ldrb	r3, [r3, #28]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d101      	bne.n	800a504 <HAL_RTC_SetAlarm+0x24>
 800a500:	2302      	movs	r3, #2
 800a502:	e101      	b.n	800a708 <HAL_RTC_SetAlarm+0x228>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2201      	movs	r2, #1
 800a508:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2202      	movs	r2, #2
 800a50e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d137      	bne.n	800a586 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a520:	2b00      	cmp	r3, #0
 800a522:	d102      	bne.n	800a52a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	2200      	movs	r2, #0
 800a528:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 f942 	bl	800a7b8 <RTC_ByteToBcd2>
 800a534:	4603      	mov	r3, r0
 800a536:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	785b      	ldrb	r3, [r3, #1]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 f93b 	bl	800a7b8 <RTC_ByteToBcd2>
 800a542:	4603      	mov	r3, r0
 800a544:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a546:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	789b      	ldrb	r3, [r3, #2]
 800a54c:	4618      	mov	r0, r3
 800a54e:	f000 f933 	bl	800a7b8 <RTC_ByteToBcd2>
 800a552:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a554:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	7b1b      	ldrb	r3, [r3, #12]
 800a55c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a55e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 f925 	bl	800a7b8 <RTC_ByteToBcd2>
 800a56e:	4603      	mov	r3, r0
 800a570:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a572:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a57a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a580:	4313      	orrs	r3, r2
 800a582:	61fb      	str	r3, [r7, #28]
 800a584:	e023      	b.n	800a5ce <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a590:	2b00      	cmp	r3, #0
 800a592:	d102      	bne.n	800a59a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	2200      	movs	r2, #0
 800a598:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	785b      	ldrb	r3, [r3, #1]
 800a5a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a5a6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a5a8:	68ba      	ldr	r2, [r7, #8]
 800a5aa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a5ac:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	7b1b      	ldrb	r3, [r3, #12]
 800a5b2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a5b4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a5bc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a5be:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a5c4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	69db      	ldr	r3, [r3, #28]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	22ca      	movs	r2, #202	; 0xca
 800a5e0:	625a      	str	r2, [r3, #36]	; 0x24
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2253      	movs	r2, #83	; 0x53
 800a5e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5f2:	d13f      	bne.n	800a674 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	689a      	ldr	r2, [r3, #8]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a602:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	689a      	ldr	r2, [r3, #8]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a612:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a614:	f7f9 fadc 	bl	8003bd0 <HAL_GetTick>
 800a618:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a61a:	e013      	b.n	800a644 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a61c:	f7f9 fad8 	bl	8003bd0 <HAL_GetTick>
 800a620:	4602      	mov	r2, r0
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a62a:	d90b      	bls.n	800a644 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	22ff      	movs	r2, #255	; 0xff
 800a632:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2203      	movs	r2, #3
 800a638:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2200      	movs	r2, #0
 800a63e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a640:	2303      	movs	r3, #3
 800a642:	e061      	b.n	800a708 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	f003 0301 	and.w	r3, r3, #1
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d0e4      	beq.n	800a61c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	69fa      	ldr	r2, [r7, #28]
 800a658:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	689a      	ldr	r2, [r3, #8]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a670:	609a      	str	r2, [r3, #8]
 800a672:	e03e      	b.n	800a6f2 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	689a      	ldr	r2, [r3, #8]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a682:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	689a      	ldr	r2, [r3, #8]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a692:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a694:	f7f9 fa9c 	bl	8003bd0 <HAL_GetTick>
 800a698:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a69a:	e013      	b.n	800a6c4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a69c:	f7f9 fa98 	bl	8003bd0 <HAL_GetTick>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6aa:	d90b      	bls.n	800a6c4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	22ff      	movs	r2, #255	; 0xff
 800a6b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2203      	movs	r2, #3
 800a6b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	e021      	b.n	800a708 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	f003 0302 	and.w	r3, r3, #2
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d0e4      	beq.n	800a69c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	69fa      	ldr	r2, [r7, #28]
 800a6d8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	697a      	ldr	r2, [r7, #20]
 800a6e0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	689a      	ldr	r2, [r3, #8]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	22ff      	movs	r2, #255	; 0xff
 800a6f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3724      	adds	r7, #36	; 0x24
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd90      	pop	{r4, r7, pc}

0800a710 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a718:	2300      	movs	r3, #0
 800a71a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68da      	ldr	r2, [r3, #12]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a72a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a72c:	f7f9 fa50 	bl	8003bd0 <HAL_GetTick>
 800a730:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a732:	e009      	b.n	800a748 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a734:	f7f9 fa4c 	bl	8003bd0 <HAL_GetTick>
 800a738:	4602      	mov	r2, r0
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a742:	d901      	bls.n	800a748 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a744:	2303      	movs	r3, #3
 800a746:	e007      	b.n	800a758 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	f003 0320 	and.w	r3, r3, #32
 800a752:	2b00      	cmp	r3, #0
 800a754:	d0ee      	beq.n	800a734 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a768:	2300      	movs	r3, #0
 800a76a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a776:	2b00      	cmp	r3, #0
 800a778:	d119      	bne.n	800a7ae <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f04f 32ff 	mov.w	r2, #4294967295
 800a782:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a784:	f7f9 fa24 	bl	8003bd0 <HAL_GetTick>
 800a788:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a78a:	e009      	b.n	800a7a0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a78c:	f7f9 fa20 	bl	8003bd0 <HAL_GetTick>
 800a790:	4602      	mov	r2, r0
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	1ad3      	subs	r3, r2, r3
 800a796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a79a:	d901      	bls.n	800a7a0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a79c:	2303      	movs	r3, #3
 800a79e:	e007      	b.n	800a7b0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0ee      	beq.n	800a78c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	4603      	mov	r3, r0
 800a7c0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a7c6:	e005      	b.n	800a7d4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a7ce:	79fb      	ldrb	r3, [r7, #7]
 800a7d0:	3b0a      	subs	r3, #10
 800a7d2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a7d4:	79fb      	ldrb	r3, [r7, #7]
 800a7d6:	2b09      	cmp	r3, #9
 800a7d8:	d8f6      	bhi.n	800a7c8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	011b      	lsls	r3, r3, #4
 800a7e0:	b2da      	uxtb	r2, r3
 800a7e2:	79fb      	ldrb	r3, [r7, #7]
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	b2db      	uxtb	r3, r3
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3714      	adds	r7, #20
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b087      	sub	sp, #28
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a800:	2300      	movs	r3, #0
 800a802:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	7f1b      	ldrb	r3, [r3, #28]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d101      	bne.n	800a810 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a80c:	2302      	movs	r3, #2
 800a80e:	e03e      	b.n	800a88e <HAL_RTCEx_SetTimeStamp+0x9a>
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2201      	movs	r2, #1
 800a814:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2202      	movs	r2, #2
 800a81a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689a      	ldr	r2, [r3, #8]
 800a822:	4b1e      	ldr	r3, [pc, #120]	; (800a89c <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a824:	4013      	ands	r3, r2
 800a826:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a828:	697a      	ldr	r2, [r7, #20]
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	4313      	orrs	r3, r2
 800a82e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	22ca      	movs	r2, #202	; 0xca
 800a836:	625a      	str	r2, [r3, #36]	; 0x24
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2253      	movs	r2, #83	; 0x53
 800a83e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f022 0206 	bic.w	r2, r2, #6
 800a84e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	430a      	orrs	r2, r1
 800a85e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	697a      	ldr	r2, [r7, #20]
 800a866:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	689a      	ldr	r2, [r3, #8]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a876:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	22ff      	movs	r2, #255	; 0xff
 800a87e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2201      	movs	r2, #1
 800a884:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2200      	movs	r2, #0
 800a88a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	371c      	adds	r7, #28
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	fffff7f7 	.word	0xfffff7f7

0800a8a0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b088      	sub	sp, #32
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d101      	bne.n	800a8be <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e149      	b.n	800ab52 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d106      	bne.n	800a8d8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f7f7 fe08 	bl	80024e8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 f94f 	bl	800ab84 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d007      	beq.n	800a8fe <HAL_SAI_Init+0x5e>
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d302      	bcc.n	800a8f8 <HAL_SAI_Init+0x58>
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d006      	beq.n	800a904 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800a8f6:	e008      	b.n	800a90a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	61fb      	str	r3, [r7, #28]
      break;
 800a8fc:	e005      	b.n	800a90a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a8fe:	2310      	movs	r3, #16
 800a900:	61fb      	str	r3, [r7, #28]
      break;
 800a902:	e002      	b.n	800a90a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a904:	2320      	movs	r3, #32
 800a906:	61fb      	str	r3, [r7, #28]
      break;
 800a908:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	2b03      	cmp	r3, #3
 800a910:	d81d      	bhi.n	800a94e <HAL_SAI_Init+0xae>
 800a912:	a201      	add	r2, pc, #4	; (adr r2, 800a918 <HAL_SAI_Init+0x78>)
 800a914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a918:	0800a929 	.word	0x0800a929
 800a91c:	0800a92f 	.word	0x0800a92f
 800a920:	0800a937 	.word	0x0800a937
 800a924:	0800a93f 	.word	0x0800a93f
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800a928:	2300      	movs	r3, #0
 800a92a:	617b      	str	r3, [r7, #20]
      }
      break;
 800a92c:	e010      	b.n	800a950 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800a92e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a932:	617b      	str	r3, [r7, #20]
      }
      break;
 800a934:	e00c      	b.n	800a950 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800a936:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a93a:	617b      	str	r3, [r7, #20]
      }
      break;
 800a93c:	e008      	b.n	800a950 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800a93e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a942:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	f043 0301 	orr.w	r3, r3, #1
 800a94a:	61fb      	str	r3, [r7, #28]
      }
      break;
 800a94c:	e000      	b.n	800a950 <HAL_SAI_Init+0xb0>
  default:
    break;
 800a94e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a81      	ldr	r2, [pc, #516]	; (800ab5c <HAL_SAI_Init+0x2bc>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d004      	beq.n	800a964 <HAL_SAI_Init+0xc4>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a80      	ldr	r2, [pc, #512]	; (800ab60 <HAL_SAI_Init+0x2c0>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d103      	bne.n	800a96c <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800a964:	4a7f      	ldr	r2, [pc, #508]	; (800ab64 <HAL_SAI_Init+0x2c4>)
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	6013      	str	r3, [r2, #0]
 800a96a:	e002      	b.n	800a972 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a96c:	4a7e      	ldr	r2, [pc, #504]	; (800ab68 <HAL_SAI_Init+0x2c8>)
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	69db      	ldr	r3, [r3, #28]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d043      	beq.n	800aa02 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a76      	ldr	r2, [pc, #472]	; (800ab5c <HAL_SAI_Init+0x2bc>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d004      	beq.n	800a992 <HAL_SAI_Init+0xf2>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a74      	ldr	r2, [pc, #464]	; (800ab60 <HAL_SAI_Init+0x2c0>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d104      	bne.n	800a99c <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a992:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a996:	f7ff fa8d 	bl	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a99a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a72      	ldr	r2, [pc, #456]	; (800ab6c <HAL_SAI_Init+0x2cc>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d004      	beq.n	800a9b0 <HAL_SAI_Init+0x110>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a71      	ldr	r2, [pc, #452]	; (800ab70 <HAL_SAI_Init+0x2d0>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d104      	bne.n	800a9ba <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a9b0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a9b4:	f7ff fa7e 	bl	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a9b8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800a9ba:	693a      	ldr	r2, [r7, #16]
 800a9bc:	4613      	mov	r3, r2
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	4413      	add	r3, r2
 800a9c2:	005b      	lsls	r3, r3, #1
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	69db      	ldr	r3, [r3, #28]
 800a9ca:	025b      	lsls	r3, r3, #9
 800a9cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9d0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	4a67      	ldr	r2, [pc, #412]	; (800ab74 <HAL_SAI_Init+0x2d4>)
 800a9d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9da:	08da      	lsrs	r2, r3, #3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800a9e0:	68f9      	ldr	r1, [r7, #12]
 800a9e2:	4b64      	ldr	r3, [pc, #400]	; (800ab74 <HAL_SAI_Init+0x2d4>)
 800a9e4:	fba3 2301 	umull	r2, r3, r3, r1
 800a9e8:	08da      	lsrs	r2, r3, #3
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	005b      	lsls	r3, r3, #1
 800a9f2:	1aca      	subs	r2, r1, r3
 800a9f4:	2a08      	cmp	r2, #8
 800a9f6:	d904      	bls.n	800aa02 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a1b      	ldr	r3, [r3, #32]
 800a9fc:	1c5a      	adds	r2, r3, #1
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d003      	beq.n	800aa12 <HAL_SAI_Init+0x172>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d109      	bne.n	800aa26 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d101      	bne.n	800aa1e <HAL_SAI_Init+0x17e>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	e001      	b.n	800aa22 <HAL_SAI_Init+0x182>
 800aa1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa22:	61bb      	str	r3, [r7, #24]
 800aa24:	e008      	b.n	800aa38 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d102      	bne.n	800aa34 <HAL_SAI_Init+0x194>
 800aa2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa32:	e000      	b.n	800aa36 <HAL_SAI_Init+0x196>
 800aa34:	2300      	movs	r3, #0
 800aa36:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	6819      	ldr	r1, [r3, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	4b4d      	ldr	r3, [pc, #308]	; (800ab78 <HAL_SAI_Init+0x2d8>)
 800aa44:	400b      	ands	r3, r1
 800aa46:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	6819      	ldr	r1, [r3, #0]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	685a      	ldr	r2, [r3, #4]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa56:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aa5c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa62:	431a      	orrs	r2, r3
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800aa70:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa7c:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	051b      	lsls	r3, r3, #20
 800aa84:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	6859      	ldr	r1, [r3, #4]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	4b38      	ldr	r3, [pc, #224]	; (800ab7c <HAL_SAI_Init+0x2dc>)
 800aa9a:	400b      	ands	r3, r1
 800aa9c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	6859      	ldr	r1, [r3, #4]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	699a      	ldr	r2, [r3, #24]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaac:	431a      	orrs	r2, r3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab2:	431a      	orrs	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	430a      	orrs	r2, r1
 800aaba:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	6899      	ldr	r1, [r3, #8]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	4b2e      	ldr	r3, [pc, #184]	; (800ab80 <HAL_SAI_Init+0x2e0>)
 800aac8:	400b      	ands	r3, r1
 800aaca:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6899      	ldr	r1, [r3, #8]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad6:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800aadc:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800aae2:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800aae8:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800aaf2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	430a      	orrs	r2, r1
 800aafa:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	68d9      	ldr	r1, [r3, #12]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	f24f 0320 	movw	r3, #61472	; 0xf020
 800ab0a:	400b      	ands	r3, r1
 800ab0c:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68d9      	ldr	r1, [r3, #12]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab1c:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab22:	041b      	lsls	r3, r3, #16
 800ab24:	431a      	orrs	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	021b      	lsls	r3, r3, #8
 800ab2e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	430a      	orrs	r2, r1
 800ab36:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3720      	adds	r7, #32
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	40015804 	.word	0x40015804
 800ab60:	40015824 	.word	0x40015824
 800ab64:	40015800 	.word	0x40015800
 800ab68:	40015c00 	.word	0x40015c00
 800ab6c:	40015c04 	.word	0x40015c04
 800ab70:	40015c24 	.word	0x40015c24
 800ab74:	cccccccd 	.word	0xcccccccd
 800ab78:	ff05c010 	.word	0xff05c010
 800ab7c:	ffff1ff0 	.word	0xffff1ff0
 800ab80:	fff88000 	.word	0xfff88000

0800ab84 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ab84:	b490      	push	{r4, r7}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800ab8c:	4b16      	ldr	r3, [pc, #88]	; (800abe8 <SAI_Disable+0x64>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a16      	ldr	r2, [pc, #88]	; (800abec <SAI_Disable+0x68>)
 800ab92:	fba2 2303 	umull	r2, r3, r2, r3
 800ab96:	0b1b      	lsrs	r3, r3, #12
 800ab98:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800abac:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800abae:	4623      	mov	r3, r4
 800abb0:	1e5c      	subs	r4, r3, #1
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10a      	bne.n	800abcc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800abc6:	2303      	movs	r3, #3
 800abc8:	73fb      	strb	r3, [r7, #15]
      break;
 800abca:	e006      	b.n	800abda <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1e9      	bne.n	800abae <SAI_Disable+0x2a>

  return status;
 800abda:	7bfb      	ldrb	r3, [r7, #15]
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bc90      	pop	{r4, r7}
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	20000000 	.word	0x20000000
 800abec:	95cbec1b 	.word	0x95cbec1b

0800abf0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d101      	bne.n	800ac02 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	e01d      	b.n	800ac3e <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d105      	bne.n	800ac1a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f7f7 f99b 	bl	8001f50 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2203      	movs	r2, #3
 800ac1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f80f 	bl	800ac46 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3708      	adds	r7, #8
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ac46:	b5b0      	push	{r4, r5, r7, lr}
 800ac48:	b08e      	sub	sp, #56	; 0x38
 800ac4a:	af04      	add	r7, sp, #16
 800ac4c:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ac52:	2300      	movs	r3, #0
 800ac54:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800ac56:	2300      	movs	r3, #0
 800ac58:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ac62:	2300      	movs	r3, #0
 800ac64:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800ac66:	2376      	movs	r3, #118	; 0x76
 800ac68:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681d      	ldr	r5, [r3, #0]
 800ac6e:	466c      	mov	r4, sp
 800ac70:	f107 0318 	add.w	r3, r7, #24
 800ac74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ac7c:	f107 030c 	add.w	r3, r7, #12
 800ac80:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac82:	4628      	mov	r0, r5
 800ac84:	f003 fa2e 	bl	800e0e4 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	685a      	ldr	r2, [r3, #4]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac96:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f003 fa5a 	bl	800e156 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	685a      	ldr	r2, [r3, #4]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acb0:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 800acb2:	2002      	movs	r0, #2
 800acb4:	f7f8 ff98 	bl	8003be8 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fe24 	bl	800b906 <SD_PowerON>
 800acbe:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800acc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00b      	beq.n	800acde <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2201      	movs	r2, #1
 800acca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	431a      	orrs	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e013      	b.n	800ad06 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fd48 	bl	800b774 <SD_InitCard>
 800ace4:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800ace6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00b      	beq.n	800ad04 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfa:	431a      	orrs	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e000      	b.n	800ad06 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3728      	adds	r7, #40	; 0x28
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ad10 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b08c      	sub	sp, #48	; 0x30
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
 800ad1c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d107      	bne.n	800ad38 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ad34:	2301      	movs	r3, #1
 800ad36:	e0b0      	b.n	800ae9a <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	f040 80a9 	bne.w	800ae98 <HAL_SD_ReadBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	441a      	add	r2, r3
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d907      	bls.n	800ad6a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e097      	b.n	800ae9a <HAL_SD_ReadBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2203      	movs	r2, #3
 800ad6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2200      	movs	r2, #0
 800ad78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ad88:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad8e:	4a45      	ldr	r2, [pc, #276]	; (800aea4 <HAL_SD_ReadBlocks_DMA+0x194>)
 800ad90:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad96:	4a44      	ldr	r2, [pc, #272]	; (800aea8 <HAL_SD_ReadBlocks_DMA+0x198>)
 800ad98:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad9e:	2200      	movs	r2, #0
 800ada0:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	3380      	adds	r3, #128	; 0x80
 800adac:	4619      	mov	r1, r3
 800adae:	68ba      	ldr	r2, [r7, #8]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	025b      	lsls	r3, r3, #9
 800adb4:	089b      	lsrs	r3, r3, #2
 800adb6:	f7f9 fc19 	bl	80045ec <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f042 0208 	orr.w	r2, r2, #8
 800adc8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adce:	2b01      	cmp	r3, #1
 800add0:	d002      	beq.n	800add8 <HAL_SD_ReadBlocks_DMA+0xc8>
    {
      BlockAdd *= 512U;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	025b      	lsls	r3, r3, #9
 800add6:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800add8:	f04f 33ff 	mov.w	r3, #4294967295
 800addc:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	025b      	lsls	r3, r3, #9
 800ade2:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ade4:	2390      	movs	r3, #144	; 0x90
 800ade6:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ade8:	2302      	movs	r3, #2
 800adea:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800adec:	2300      	movs	r3, #0
 800adee:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800adf0:	2301      	movs	r3, #1
 800adf2:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f107 0214 	add.w	r2, r7, #20
 800adfc:	4611      	mov	r1, r2
 800adfe:	4618      	mov	r0, r3
 800ae00:	f003 fa12 	bl	800e228 <SDMMC_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f003 fa37 	bl	800e280 <SDMMC_CmdBlockLength>
 800ae12:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d010      	beq.n	800ae3c <HAL_SD_ReadBlocks_DMA+0x12c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ae22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2a:	431a      	orrs	r2, r3
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e02e      	b.n	800ae9a <HAL_SD_ReadBlocks_DMA+0x18a>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d90a      	bls.n	800ae58 <HAL_SD_ReadBlocks_DMA+0x148>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2282      	movs	r2, #130	; 0x82
 800ae46:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	6879      	ldr	r1, [r7, #4]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f003 fa5e 	bl	800e310 <SDMMC_CmdReadMultiBlock>
 800ae54:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ae56:	e009      	b.n	800ae6c <HAL_SD_ReadBlocks_DMA+0x15c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2281      	movs	r2, #129	; 0x81
 800ae5c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	6879      	ldr	r1, [r7, #4]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f003 fa2f 	bl	800e2c8 <SDMMC_CmdReadSingleBlock>
 800ae6a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d010      	beq.n	800ae94 <HAL_SD_ReadBlocks_DMA+0x184>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ae7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae82:	431a      	orrs	r2, r3
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ae90:	2301      	movs	r3, #1
 800ae92:	e002      	b.n	800ae9a <HAL_SD_ReadBlocks_DMA+0x18a>
    }

    return HAL_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	e000      	b.n	800ae9a <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800ae98:	2302      	movs	r3, #2
  }
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3730      	adds	r7, #48	; 0x30
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	0800b671 	.word	0x0800b671
 800aea8:	0800b6df 	.word	0x0800b6df

0800aeac <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b08c      	sub	sp, #48	; 0x30
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
 800aeb8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800aeba:	2300      	movs	r3, #0
 800aebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d107      	bne.n	800aed4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aed0:	2301      	movs	r3, #1
 800aed2:	e0b0      	b.n	800b036 <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	2b01      	cmp	r3, #1
 800aede:	f040 80a9 	bne.w	800b034 <HAL_SD_WriteBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2200      	movs	r2, #0
 800aee6:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	441a      	add	r2, r3
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d907      	bls.n	800af06 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aefa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	e097      	b.n	800b036 <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2203      	movs	r2, #3
 800af0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2200      	movs	r2, #0
 800af14:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f042 021a 	orr.w	r2, r2, #26
 800af24:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2a:	4a45      	ldr	r2, [pc, #276]	; (800b040 <HAL_SD_WriteBlocks_DMA+0x194>)
 800af2c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af32:	4a44      	ldr	r2, [pc, #272]	; (800b044 <HAL_SD_WriteBlocks_DMA+0x198>)
 800af34:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af3a:	2200      	movs	r2, #0
 800af3c:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af42:	2b01      	cmp	r3, #1
 800af44:	d002      	beq.n	800af4c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	025b      	lsls	r3, r3, #9
 800af4a:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f44f 7100 	mov.w	r1, #512	; 0x200
 800af54:	4618      	mov	r0, r3
 800af56:	f003 f993 	bl	800e280 <SDMMC_CmdBlockLength>
 800af5a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800af5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d010      	beq.n	800af84 <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800af6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af72:	431a      	orrs	r2, r3
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	e058      	b.n	800b036 <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	2b01      	cmp	r3, #1
 800af88:	d90a      	bls.n	800afa0 <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	22a0      	movs	r2, #160	; 0xa0
 800af8e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	6879      	ldr	r1, [r7, #4]
 800af96:	4618      	mov	r0, r3
 800af98:	f003 fa02 	bl	800e3a0 <SDMMC_CmdWriteMultiBlock>
 800af9c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800af9e:	e009      	b.n	800afb4 <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2290      	movs	r2, #144	; 0x90
 800afa4:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	6879      	ldr	r1, [r7, #4]
 800afac:	4618      	mov	r0, r3
 800afae:	f003 f9d3 	bl	800e358 <SDMMC_CmdWriteSingleBlock>
 800afb2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800afb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d010      	beq.n	800afdc <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800afc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afca:	431a      	orrs	r2, r3
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800afd8:	2301      	movs	r3, #1
 800afda:	e02c      	b.n	800b036 <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f042 0208 	orr.w	r2, r2, #8
 800afea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800aff0:	68b9      	ldr	r1, [r7, #8]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	3380      	adds	r3, #128	; 0x80
 800aff8:	461a      	mov	r2, r3
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	025b      	lsls	r3, r3, #9
 800affe:	089b      	lsrs	r3, r3, #2
 800b000:	f7f9 faf4 	bl	80045ec <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b004:	f04f 33ff 	mov.w	r3, #4294967295
 800b008:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	025b      	lsls	r3, r3, #9
 800b00e:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b010:	2390      	movs	r3, #144	; 0x90
 800b012:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b014:	2300      	movs	r3, #0
 800b016:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b018:	2300      	movs	r3, #0
 800b01a:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800b01c:	2301      	movs	r3, #1
 800b01e:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f107 0214 	add.w	r2, r7, #20
 800b028:	4611      	mov	r1, r2
 800b02a:	4618      	mov	r0, r3
 800b02c:	f003 f8fc 	bl	800e228 <SDMMC_ConfigData>
    
    return HAL_OK;
 800b030:	2300      	movs	r3, #0
 800b032:	e000      	b.n	800b036 <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800b034:	2302      	movs	r3, #2
  }
}
 800b036:	4618      	mov	r0, r3
 800b038:	3730      	adds	r7, #48	; 0x30
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	0800b647 	.word	0x0800b647
 800b044:	0800b6df 	.word	0x0800b6df

0800b048 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 800b050:	bf00      	nop
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 800b066:	2300      	movs	r3, #0
 800b068:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b06e:	0e1b      	lsrs	r3, r3, #24
 800b070:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	099b      	lsrs	r3, r3, #6
 800b076:	b2db      	uxtb	r3, r3
 800b078:	f003 0303 	and.w	r3, r3, #3
 800b07c:	b2da      	uxtb	r2, r3
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	089b      	lsrs	r3, r3, #2
 800b086:	b2db      	uxtb	r3, r3
 800b088:	f003 030f 	and.w	r3, r3, #15
 800b08c:	b2da      	uxtb	r2, r3
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	b2db      	uxtb	r3, r3
 800b096:	f003 0303 	and.w	r3, r3, #3
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0a4:	0c1b      	lsrs	r3, r3, #16
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	b2da      	uxtb	r2, r3
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0b6:	0a1b      	lsrs	r3, r3, #8
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	b2da      	uxtb	r2, r3
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	b2da      	uxtb	r2, r3
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0d8:	0e1b      	lsrs	r3, r3, #24
 800b0da:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	011b      	lsls	r3, r3, #4
 800b0e2:	b29a      	uxth	r2, r3
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0ec:	0c1b      	lsrs	r3, r3, #16
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	88db      	ldrh	r3, [r3, #6]
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	091b      	lsrs	r3, r3, #4
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	f003 030f 	and.w	r3, r3, #15
 800b102:	b29b      	uxth	r3, r3
 800b104:	4313      	orrs	r3, r2
 800b106:	b29a      	uxth	r2, r3
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	f003 030f 	and.w	r3, r3, #15
 800b114:	b2da      	uxtb	r2, r3
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b11e:	0a1b      	lsrs	r3, r3, #8
 800b120:	b2db      	uxtb	r3, r3
 800b122:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	09db      	lsrs	r3, r3, #7
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	f003 0301 	and.w	r3, r3, #1
 800b12e:	b2da      	uxtb	r2, r3
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	099b      	lsrs	r3, r3, #6
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	f003 0301 	and.w	r3, r3, #1
 800b13e:	b2da      	uxtb	r2, r3
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	095b      	lsrs	r3, r3, #5
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	f003 0301 	and.w	r3, r3, #1
 800b14e:	b2da      	uxtb	r2, r3
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	091b      	lsrs	r3, r3, #4
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	f003 0301 	and.w	r3, r3, #1
 800b15e:	b2da      	uxtb	r2, r3
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	2200      	movs	r2, #0
 800b168:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f040 8086 	bne.w	800b280 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	029b      	lsls	r3, r3, #10
 800b178:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b184:	b2db      	uxtb	r3, r3
 800b186:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	691a      	ldr	r2, [r3, #16]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	431a      	orrs	r2, r3
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b19a:	0e1b      	lsrs	r3, r3, #24
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	691a      	ldr	r2, [r3, #16]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	099b      	lsrs	r3, r3, #6
 800b1a8:	f003 0303 	and.w	r3, r3, #3
 800b1ac:	431a      	orrs	r2, r3
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	08db      	lsrs	r3, r3, #3
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	f003 0307 	and.w	r3, r3, #7
 800b1bc:	b2da      	uxtb	r2, r3
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	f003 0307 	and.w	r3, r3, #7
 800b1ca:	b2da      	uxtb	r2, r3
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1d4:	0c1b      	lsrs	r3, r3, #16
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	095b      	lsrs	r3, r3, #5
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	f003 0307 	and.w	r3, r3, #7
 800b1e4:	b2da      	uxtb	r2, r3
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	089b      	lsrs	r3, r3, #2
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	f003 0307 	and.w	r3, r3, #7
 800b1f4:	b2da      	uxtb	r2, r3
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	005b      	lsls	r3, r3, #1
 800b200:	b2db      	uxtb	r3, r3
 800b202:	f003 0306 	and.w	r3, r3, #6
 800b206:	b2da      	uxtb	r2, r3
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b210:	0a1b      	lsrs	r3, r3, #8
 800b212:	b2db      	uxtb	r3, r3
 800b214:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	7e1b      	ldrb	r3, [r3, #24]
 800b21a:	b2da      	uxtb	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	09db      	lsrs	r3, r3, #7
 800b220:	b2db      	uxtb	r3, r3
 800b222:	f003 0301 	and.w	r3, r3, #1
 800b226:	b2db      	uxtb	r3, r3
 800b228:	4313      	orrs	r3, r2
 800b22a:	b2da      	uxtb	r2, r3
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	691b      	ldr	r3, [r3, #16]
 800b234:	1c5a      	adds	r2, r3, #1
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	7e1b      	ldrb	r3, [r3, #24]
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	3302      	adds	r3, #2
 800b242:	2201      	movs	r2, #1
 800b244:	409a      	lsls	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b24a:	fb02 f203 	mul.w	r2, r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	7a1b      	ldrb	r3, [r3, #8]
 800b256:	b2db      	uxtb	r3, r3
 800b258:	461a      	mov	r2, r3
 800b25a:	2301      	movs	r3, #1
 800b25c:	4093      	lsls	r3, r2
 800b25e:	461a      	mov	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b26c:	0a52      	lsrs	r2, r2, #9
 800b26e:	fb02 f203 	mul.w	r2, r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b27c:	661a      	str	r2, [r3, #96]	; 0x60
 800b27e:	e04d      	b.n	800b31c <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b284:	2b01      	cmp	r3, #1
 800b286:	d138      	bne.n	800b2fa <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	041b      	lsls	r3, r3, #16
 800b294:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2a0:	0e1b      	lsrs	r3, r3, #24
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	691a      	ldr	r2, [r3, #16]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	021b      	lsls	r3, r3, #8
 800b2ae:	431a      	orrs	r2, r3
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2b8:	0c1b      	lsrs	r3, r3, #16
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	691a      	ldr	r2, [r3, #16]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	431a      	orrs	r2, r3
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2ce:	0a1b      	lsrs	r3, r3, #8
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	691b      	ldr	r3, [r3, #16]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	029a      	lsls	r2, r3, #10
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	655a      	str	r2, [r3, #84]	; 0x54
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b2ee:	659a      	str	r2, [r3, #88]	; 0x58
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	661a      	str	r2, [r3, #96]	; 0x60
 800b2f8:	e010      	b.n	800b31c <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b302:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b308:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	e0c1      	b.n	800b4a0 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	099b      	lsrs	r3, r3, #6
 800b320:	b2db      	uxtb	r3, r3
 800b322:	f003 0301 	and.w	r3, r3, #1
 800b326:	b2da      	uxtb	r2, r3
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	005b      	lsls	r3, r3, #1
 800b332:	b2db      	uxtb	r3, r3
 800b334:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b342:	b2db      	uxtb	r3, r3
 800b344:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	7e9b      	ldrb	r3, [r3, #26]
 800b34a:	b2da      	uxtb	r2, r3
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	09db      	lsrs	r3, r3, #7
 800b350:	b2db      	uxtb	r3, r3
 800b352:	f003 0301 	and.w	r3, r3, #1
 800b356:	b2db      	uxtb	r3, r3
 800b358:	4313      	orrs	r3, r2
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	b2db      	uxtb	r3, r3
 800b364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b368:	b2da      	uxtb	r2, r3
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b372:	0e1b      	lsrs	r3, r3, #24
 800b374:	b2db      	uxtb	r3, r3
 800b376:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	09db      	lsrs	r3, r3, #7
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	f003 0301 	and.w	r3, r3, #1
 800b382:	b2da      	uxtb	r2, r3
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	095b      	lsrs	r3, r3, #5
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	f003 0303 	and.w	r3, r3, #3
 800b392:	b2da      	uxtb	r2, r3
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	089b      	lsrs	r3, r3, #2
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	f003 0307 	and.w	r3, r3, #7
 800b3a2:	b2da      	uxtb	r2, r3
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	f003 030c 	and.w	r3, r3, #12
 800b3b4:	b2da      	uxtb	r2, r3
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3be:	0c1b      	lsrs	r3, r3, #16
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	7fdb      	ldrb	r3, [r3, #31]
 800b3c8:	b2da      	uxtb	r2, r3
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	099b      	lsrs	r3, r3, #6
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	f003 0303 	and.w	r3, r3, #3
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	b2da      	uxtb	r2, r3
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	095b      	lsrs	r3, r3, #5
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	f003 0301 	and.w	r3, r3, #1
 800b3e8:	b2da      	uxtb	r2, r3
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	f003 0301 	and.w	r3, r3, #1
 800b400:	b2da      	uxtb	r2, r3
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b40c:	0a1b      	lsrs	r3, r3, #8
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	09db      	lsrs	r3, r3, #7
 800b416:	b2db      	uxtb	r3, r3
 800b418:	f003 0301 	and.w	r3, r3, #1
 800b41c:	b2da      	uxtb	r2, r3
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	099b      	lsrs	r3, r3, #6
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	f003 0301 	and.w	r3, r3, #1
 800b42e:	b2da      	uxtb	r2, r3
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	095b      	lsrs	r3, r3, #5
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	f003 0301 	and.w	r3, r3, #1
 800b440:	b2da      	uxtb	r2, r3
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	091b      	lsrs	r3, r3, #4
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	f003 0301 	and.w	r3, r3, #1
 800b452:	b2da      	uxtb	r2, r3
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	089b      	lsrs	r3, r3, #2
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	f003 0303 	and.w	r3, r3, #3
 800b464:	b2da      	uxtb	r2, r3
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	f003 0303 	and.w	r3, r3, #3
 800b474:	b2da      	uxtb	r2, r3
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b480:	b2db      	uxtb	r3, r3
 800b482:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	085b      	lsrs	r3, r3, #1
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b48e:	b2da      	uxtb	r2, r3
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2201      	movs	r2, #1
 800b49a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3714      	adds	r7, #20
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800b4f6:	2300      	movs	r3, #0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b504:	b5b0      	push	{r4, r5, r7, lr}
 800b506:	b08e      	sub	sp, #56	; 0x38
 800b508:	af04      	add	r7, sp, #16
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b50e:	2300      	movs	r3, #0
 800b510:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2203      	movs	r2, #3
 800b516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b51e:	2b03      	cmp	r3, #3
 800b520:	d02e      	beq.n	800b580 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b528:	d106      	bne.n	800b538 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	639a      	str	r2, [r3, #56]	; 0x38
 800b536:	e029      	b.n	800b58c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b53e:	d10a      	bne.n	800b556 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 fab2 	bl	800baaa <SD_WideBus_Enable>
 800b546:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54e:	431a      	orrs	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	639a      	str	r2, [r3, #56]	; 0x38
 800b554:	e01a      	b.n	800b58c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10a      	bne.n	800b572 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 faf1 	bl	800bb44 <SD_WideBus_Disable>
 800b562:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56a:	431a      	orrs	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	639a      	str	r2, [r3, #56]	; 0x38
 800b570:	e00c      	b.n	800b58c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b576:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	639a      	str	r2, [r3, #56]	; 0x38
 800b57e:	e005      	b.n	800b58c <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b584:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00a      	beq.n	800b5aa <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b59c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e024      	b.n	800b5f4 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	695b      	ldr	r3, [r3, #20]
 800b5c4:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	699b      	ldr	r3, [r3, #24]
 800b5ca:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681d      	ldr	r5, [r3, #0]
 800b5d0:	466c      	mov	r4, sp
 800b5d2:	f107 0318 	add.w	r3, r7, #24
 800b5d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b5da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b5de:	f107 030c 	add.w	r3, r7, #12
 800b5e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	f002 fd7d 	bl	800e0e4 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3728      	adds	r7, #40	; 0x28
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bdb0      	pop	{r4, r5, r7, pc}

0800b5fc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800b604:	2304      	movs	r3, #4
 800b606:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b608:	2300      	movs	r3, #0
 800b60a:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 800b60c:	2300      	movs	r3, #0
 800b60e:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 800b610:	f107 030c 	add.w	r3, r7, #12
 800b614:	4619      	mov	r1, r3
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fa1d 	bl	800ba56 <SD_SendStatus>
 800b61c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d005      	beq.n	800b630 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	431a      	orrs	r2, r3
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	0a5b      	lsrs	r3, r3, #9
 800b634:	b2db      	uxtb	r3, r3
 800b636:	f003 030f 	and.w	r3, r3, #15
 800b63a:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 800b63c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3718      	adds	r7, #24
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800b646:	b480      	push	{r7}
 800b648:	b085      	sub	sp, #20
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b652:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b662:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b664:	bf00      	nop
 800b666:	3714      	adds	r7, #20
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b67c:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b67e:	2300      	movs	r3, #0
 800b680:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b686:	2b82      	cmp	r3, #130	; 0x82
 800b688:	d111      	bne.n	800b6ae <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4618      	mov	r0, r3
 800b690:	f002 feaa 	bl	800e3e8 <SDMMC_CmdStopTransfer>
 800b694:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d008      	beq.n	800b6ae <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	431a      	orrs	r2, r3
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f7ff fccd 	bl	800b048 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f022 0208 	bic.w	r2, r2, #8
 800b6bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b6c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	f004 fa19 	bl	800fb08 <HAL_SD_RxCpltCallback>
#endif
}
 800b6d6:	bf00      	nop
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <SD_DMAError>:
* @brief  DMA SD communication error callback 
* @param  hdma DMA handle
* @retval None
*/
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b084      	sub	sp, #16
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ea:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f7f9 f86f 	bl	80047d0 <HAL_DMA_GetError>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b02      	cmp	r3, #2
 800b6f6:	d039      	beq.n	800b76c <SD_DMAError+0x8e>
  {
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d004      	beq.n	800b70c <SD_DMAError+0x2e>
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d12c      	bne.n	800b766 <SD_DMAError+0x88>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b714:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b724:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
      
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b72a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f7ff ff62 	bl	800b5fc <HAL_SD_GetCardState>
 800b738:	4603      	mov	r3, r0
 800b73a:	72fb      	strb	r3, [r7, #11]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b73c:	7afb      	ldrb	r3, [r7, #11]
 800b73e:	2b06      	cmp	r3, #6
 800b740:	d002      	beq.n	800b748 <SD_DMAError+0x6a>
 800b742:	7afb      	ldrb	r3, [r7, #11]
 800b744:	2b05      	cmp	r3, #5
 800b746:	d10a      	bne.n	800b75e <SD_DMAError+0x80>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f002 fe4b 	bl	800e3e8 <SDMMC_CmdStopTransfer>
 800b752:	4602      	mov	r2, r0
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b758:	431a      	orrs	r2, r3
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	639a      	str	r2, [r3, #56]	; 0x38
      }
      
      hsd->State= HAL_SD_STATE_READY;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2201      	movs	r2, #1
 800b762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f7ff fc6e 	bl	800b048 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b76c:	bf00      	nop
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b774:	b5b0      	push	{r4, r5, r7, lr}
 800b776:	b094      	sub	sp, #80	; 0x50
 800b778:	af04      	add	r7, sp, #16
 800b77a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b77c:	2300      	movs	r3, #0
 800b77e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 800b780:	2301      	movs	r3, #1
 800b782:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4618      	mov	r0, r3
 800b78a:	f002 fcf2 	bl	800e172 <SDMMC_GetPowerState>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d102      	bne.n	800b79a <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b794:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b798:	e0b1      	b.n	800b8fe <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	d02f      	beq.n	800b802 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f002 ff39 	bl	800e61e <SDMMC_CmdSendCID>
 800b7ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d001      	beq.n	800b7b8 <SD_InitCard+0x44>
    {
      return errorstate;
 800b7b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7b6:	e0a2      	b.n	800b8fe <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2100      	movs	r1, #0
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f002 fd1d 	bl	800e1fe <SDMMC_GetResponse>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2104      	movs	r1, #4
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f002 fd14 	bl	800e1fe <SDMMC_GetResponse>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2108      	movs	r1, #8
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f002 fd0b 	bl	800e1fe <SDMMC_GetResponse>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	210c      	movs	r1, #12
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f002 fd02 	bl	800e1fe <SDMMC_GetResponse>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b806:	2b03      	cmp	r3, #3
 800b808:	d00d      	beq.n	800b826 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f107 020e 	add.w	r2, r7, #14
 800b812:	4611      	mov	r1, r2
 800b814:	4618      	mov	r0, r3
 800b816:	f002 ff43 	bl	800e6a0 <SDMMC_CmdSetRelAdd>
 800b81a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b81c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d001      	beq.n	800b826 <SD_InitCard+0xb2>
    {
      return errorstate;
 800b822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b824:	e06b      	b.n	800b8fe <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b82a:	2b03      	cmp	r3, #3
 800b82c:	d036      	beq.n	800b89c <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b82e:	89fb      	ldrh	r3, [r7, #14]
 800b830:	461a      	mov	r2, r3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b83e:	041b      	lsls	r3, r3, #16
 800b840:	4619      	mov	r1, r3
 800b842:	4610      	mov	r0, r2
 800b844:	f002 ff0b 	bl	800e65e <SDMMC_CmdSendCSD>
 800b848:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b84a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d001      	beq.n	800b854 <SD_InitCard+0xe0>
    {
      return errorstate;
 800b850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b852:	e054      	b.n	800b8fe <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2100      	movs	r1, #0
 800b85a:	4618      	mov	r0, r3
 800b85c:	f002 fccf 	bl	800e1fe <SDMMC_GetResponse>
 800b860:	4602      	mov	r2, r0
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2104      	movs	r1, #4
 800b86c:	4618      	mov	r0, r3
 800b86e:	f002 fcc6 	bl	800e1fe <SDMMC_GetResponse>
 800b872:	4602      	mov	r2, r0
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2108      	movs	r1, #8
 800b87e:	4618      	mov	r0, r3
 800b880:	f002 fcbd 	bl	800e1fe <SDMMC_GetResponse>
 800b884:	4602      	mov	r2, r0
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	210c      	movs	r1, #12
 800b890:	4618      	mov	r0, r3
 800b892:	f002 fcb4 	bl	800e1fe <SDMMC_GetResponse>
 800b896:	4602      	mov	r2, r0
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2104      	movs	r1, #4
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f002 fcab 	bl	800e1fe <SDMMC_GetResponse>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	0d1a      	lsrs	r2, r3, #20
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800b8b0:	f107 0310 	add.w	r3, r7, #16
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7ff fbd0 	bl	800b05c <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6819      	ldr	r1, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8c4:	041b      	lsls	r3, r3, #16
 800b8c6:	f04f 0400 	mov.w	r4, #0
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	4623      	mov	r3, r4
 800b8ce:	4608      	mov	r0, r1
 800b8d0:	f002 fdae 	bl	800e430 <SDMMC_CmdSelDesel>
 800b8d4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d001      	beq.n	800b8e0 <SD_InitCard+0x16c>
  {
    return errorstate;
 800b8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8de:	e00e      	b.n	800b8fe <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681d      	ldr	r5, [r3, #0]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	466c      	mov	r4, sp
 800b8e8:	f103 0210 	add.w	r2, r3, #16
 800b8ec:	ca07      	ldmia	r2, {r0, r1, r2}
 800b8ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	f002 fbf4 	bl	800e0e4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3740      	adds	r7, #64	; 0x40
 800b902:	46bd      	mov	sp, r7
 800b904:	bdb0      	pop	{r4, r5, r7, pc}

0800b906 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b086      	sub	sp, #24
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800b90e:	2300      	movs	r3, #0
 800b910:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 800b912:	2300      	movs	r3, #0
 800b914:	617b      	str	r3, [r7, #20]
 800b916:	2300      	movs	r3, #0
 800b918:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b91a:	2300      	movs	r3, #0
 800b91c:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4618      	mov	r0, r3
 800b924:	f002 fda9 	bl	800e47a <SDMMC_CmdGoIdleState>
 800b928:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d001      	beq.n	800b934 <SD_PowerON+0x2e>
  {
    return errorstate;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	e08c      	b.n	800ba4e <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4618      	mov	r0, r3
 800b93a:	f002 fdbe 	bl	800e4ba <SDMMC_CmdOperCond>
 800b93e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d03d      	beq.n	800b9c2 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2200      	movs	r2, #0
 800b94a:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800b94c:	e032      	b.n	800b9b4 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	1c5a      	adds	r2, r3, #1
 800b952:	60ba      	str	r2, [r7, #8]
 800b954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b958:	4293      	cmp	r3, r2
 800b95a:	d102      	bne.n	800b962 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b95c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b960:	e075      	b.n	800ba4e <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2100      	movs	r1, #0
 800b968:	4618      	mov	r0, r3
 800b96a:	f002 fdc7 	bl	800e4fc <SDMMC_CmdAppCommand>
 800b96e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d002      	beq.n	800b97c <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b976:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b97a:	e068      	b.n	800ba4e <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2100      	movs	r1, #0
 800b982:	4618      	mov	r0, r3
 800b984:	f002 fdde 	bl	800e544 <SDMMC_CmdAppOperCommand>
 800b988:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d002      	beq.n	800b996 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b990:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b994:	e05b      	b.n	800ba4e <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2100      	movs	r1, #0
 800b99c:	4618      	mov	r0, r3
 800b99e:	f002 fc2e 	bl	800e1fe <SDMMC_GetResponse>
 800b9a2:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	0fdb      	lsrs	r3, r3, #31
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	bf0c      	ite	eq
 800b9ac:	2301      	moveq	r3, #1
 800b9ae:	2300      	movne	r3, #0
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d0c9      	beq.n	800b94e <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	645a      	str	r2, [r3, #68]	; 0x44
 800b9c0:	e044      	b.n	800ba4c <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800b9c8:	e031      	b.n	800ba2e <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	1c5a      	adds	r2, r3, #1
 800b9ce:	60ba      	str	r2, [r7, #8]
 800b9d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d102      	bne.n	800b9de <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b9d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b9dc:	e037      	b.n	800ba4e <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f002 fd89 	bl	800e4fc <SDMMC_CmdAppCommand>
 800b9ea:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d001      	beq.n	800b9f6 <SD_PowerON+0xf0>
      {
        return errorstate;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	e02b      	b.n	800ba4e <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f002 fda0 	bl	800e544 <SDMMC_CmdAppOperCommand>
 800ba04:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d001      	beq.n	800ba10 <SD_PowerON+0x10a>
      {
        return errorstate;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	e01e      	b.n	800ba4e <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2100      	movs	r1, #0
 800ba16:	4618      	mov	r0, r3
 800ba18:	f002 fbf1 	bl	800e1fe <SDMMC_GetResponse>
 800ba1c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	0fdb      	lsrs	r3, r3, #31
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	bf0c      	ite	eq
 800ba26:	2301      	moveq	r3, #1
 800ba28:	2300      	movne	r3, #0
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d0ca      	beq.n	800b9ca <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d003      	beq.n	800ba46 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2201      	movs	r2, #1
 800ba42:	645a      	str	r2, [r3, #68]	; 0x44
 800ba44:	e002      	b.n	800ba4c <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3718      	adds	r7, #24
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b084      	sub	sp, #16
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
 800ba5e:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ba60:	2300      	movs	r3, #0
 800ba62:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d102      	bne.n	800ba70 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800ba6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba6e:	e018      	b.n	800baa2 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba78:	041b      	lsls	r3, r3, #16
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	4610      	mov	r0, r2
 800ba7e:	f002 fe32 	bl	800e6e6 <SDMMC_CmdSendStatus>
 800ba82:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d001      	beq.n	800ba8e <SD_SendStatus+0x38>
  {
    return errorstate;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	e009      	b.n	800baa2 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2100      	movs	r1, #0
 800ba94:	4618      	mov	r0, r3
 800ba96:	f002 fbb2 	bl	800e1fe <SDMMC_GetResponse>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b086      	sub	sp, #24
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 800bab2:	2300      	movs	r3, #0
 800bab4:	60fb      	str	r3, [r7, #12]
 800bab6:	2300      	movs	r3, #0
 800bab8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800baba:	2300      	movs	r3, #0
 800babc:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	2100      	movs	r1, #0
 800bac4:	4618      	mov	r0, r3
 800bac6:	f002 fb9a 	bl	800e1fe <SDMMC_GetResponse>
 800baca:	4603      	mov	r3, r0
 800bacc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bad0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bad4:	d102      	bne.n	800badc <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bad6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bada:	e02f      	b.n	800bb3c <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800badc:	f107 030c 	add.w	r3, r7, #12
 800bae0:	4619      	mov	r1, r3
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 f87b 	bl	800bbde <SD_FindSCR>
 800bae8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d001      	beq.n	800baf4 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	e023      	b.n	800bb3c <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d01c      	beq.n	800bb38 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb06:	041b      	lsls	r3, r3, #16
 800bb08:	4619      	mov	r1, r3
 800bb0a:	4610      	mov	r0, r2
 800bb0c:	f002 fcf6 	bl	800e4fc <SDMMC_CmdAppCommand>
 800bb10:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	e00f      	b.n	800bb3c <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2102      	movs	r1, #2
 800bb22:	4618      	mov	r0, r3
 800bb24:	f002 fd34 	bl	800e590 <SDMMC_CmdBusWidth>
 800bb28:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d001      	beq.n	800bb34 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	e003      	b.n	800bb3c <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800bb34:	2300      	movs	r3, #0
 800bb36:	e001      	b.n	800bb3c <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bb38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3718      	adds	r7, #24
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b086      	sub	sp, #24
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	60fb      	str	r3, [r7, #12]
 800bb50:	2300      	movs	r3, #0
 800bb52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800bb54:	2300      	movs	r3, #0
 800bb56:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f002 fb4d 	bl	800e1fe <SDMMC_GetResponse>
 800bb64:	4603      	mov	r3, r0
 800bb66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb6e:	d102      	bne.n	800bb76 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bb70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb74:	e02f      	b.n	800bbd6 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bb76:	f107 030c 	add.w	r3, r7, #12
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 f82e 	bl	800bbde <SD_FindSCR>
 800bb82:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d001      	beq.n	800bb8e <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	e023      	b.n	800bbd6 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d01c      	beq.n	800bbd2 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bba0:	041b      	lsls	r3, r3, #16
 800bba2:	4619      	mov	r1, r3
 800bba4:	4610      	mov	r0, r2
 800bba6:	f002 fca9 	bl	800e4fc <SDMMC_CmdAppCommand>
 800bbaa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d001      	beq.n	800bbb6 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	e00f      	b.n	800bbd6 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2100      	movs	r1, #0
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f002 fce7 	bl	800e590 <SDMMC_CmdBusWidth>
 800bbc2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d001      	beq.n	800bbce <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	e003      	b.n	800bbd6 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	e001      	b.n	800bbd6 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bbd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3718      	adds	r7, #24
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bbde:	b590      	push	{r4, r7, lr}
 800bbe0:	b08f      	sub	sp, #60	; 0x3c
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
 800bbe6:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800bbec:	f7f7 fff0 	bl	8003bd0 <HAL_GetTick>
 800bbf0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	60fb      	str	r3, [r7, #12]
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2108      	movs	r1, #8
 800bc04:	4618      	mov	r0, r3
 800bc06:	f002 fb3b 	bl	800e280 <SDMMC_CmdBlockLength>
 800bc0a:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800bc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d001      	beq.n	800bc16 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc14:	e0a8      	b.n	800bd68 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc1e:	041b      	lsls	r3, r3, #16
 800bc20:	4619      	mov	r1, r3
 800bc22:	4610      	mov	r0, r2
 800bc24:	f002 fc6a 	bl	800e4fc <SDMMC_CmdAppCommand>
 800bc28:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d001      	beq.n	800bc34 <SD_FindSCR+0x56>
  {
    return errorstate;
 800bc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc32:	e099      	b.n	800bd68 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bc34:	f04f 33ff 	mov.w	r3, #4294967295
 800bc38:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 800bc3a:	2308      	movs	r3, #8
 800bc3c:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800bc3e:	2330      	movs	r3, #48	; 0x30
 800bc40:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bc42:	2302      	movs	r3, #2
 800bc44:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bc46:	2300      	movs	r3, #0
 800bc48:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f107 0214 	add.w	r2, r7, #20
 800bc56:	4611      	mov	r1, r2
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f002 fae5 	bl	800e228 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4618      	mov	r0, r3
 800bc64:	f002 fcb8 	bl	800e5d8 <SDMMC_CmdSendSCR>
 800bc68:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d022      	beq.n	800bcb6 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800bc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc72:	e079      	b.n	800bd68 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d00e      	beq.n	800bca0 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6819      	ldr	r1, [r3, #0]
 800bc86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	f107 020c 	add.w	r2, r7, #12
 800bc8e:	18d4      	adds	r4, r2, r3
 800bc90:	4608      	mov	r0, r1
 800bc92:	f002 fa53 	bl	800e13c <SDMMC_ReadFIFO>
 800bc96:	4603      	mov	r3, r0
 800bc98:	6023      	str	r3, [r4, #0]
      index++;
 800bc9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bca0:	f7f7 ff96 	bl	8003bd0 <HAL_GetTick>
 800bca4:	4602      	mov	r2, r0
 800bca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca8:	1ad3      	subs	r3, r2, r3
 800bcaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcae:	d102      	bne.n	800bcb6 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bcb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcb4:	e058      	b.n	800bd68 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcbc:	f240 432a 	movw	r3, #1066	; 0x42a
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d0d6      	beq.n	800bc74 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bccc:	f003 0308 	and.w	r3, r3, #8
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d005      	beq.n	800bce0 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2208      	movs	r2, #8
 800bcda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bcdc:	2308      	movs	r3, #8
 800bcde:	e043      	b.n	800bd68 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bce6:	f003 0302 	and.w	r3, r3, #2
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d005      	beq.n	800bcfa <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2202      	movs	r2, #2
 800bcf4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bcf6:	2302      	movs	r3, #2
 800bcf8:	e036      	b.n	800bd68 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd00:	f003 0320 	and.w	r3, r3, #32
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d005      	beq.n	800bd14 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2220      	movs	r2, #32
 800bd0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800bd10:	2320      	movs	r3, #32
 800bd12:	e029      	b.n	800bd68 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800bd1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	061a      	lsls	r2, r3, #24
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	021b      	lsls	r3, r3, #8
 800bd26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bd2a:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	0a1b      	lsrs	r3, r3, #8
 800bd30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bd34:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800bd40:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bd42:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	061a      	lsls	r2, r3, #24
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	021b      	lsls	r3, r3, #8
 800bd4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bd50:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	0a1b      	lsrs	r3, r3, #8
 800bd56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bd5a:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	0e1b      	lsrs	r3, r3, #24
 800bd60:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 800bd66:	2300      	movs	r3, #0
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	373c      	adds	r7, #60	; 0x3c
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd90      	pop	{r4, r7, pc}

0800bd70 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d101      	bne.n	800bd84 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800bd80:	2301      	movs	r3, #1
 800bd82:	e025      	b.n	800bdd0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d106      	bne.n	800bd9e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f014 fb05 	bl	80203a8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2202      	movs	r2, #2
 800bda2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	3304      	adds	r3, #4
 800bdae:	4619      	mov	r1, r3
 800bdb0:	4610      	mov	r0, r2
 800bdb2:	f002 f871 	bl	800de98 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6818      	ldr	r0, [r3, #0]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	6839      	ldr	r1, [r7, #0]
 800bdc2:	f002 f8db 	bl	800df7c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2201      	movs	r2, #1
 800bdca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800bdce:	2300      	movs	r3, #0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	2b02      	cmp	r3, #2
 800bdee:	d101      	bne.n	800bdf4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800bdf0:	2302      	movs	r3, #2
 800bdf2:	e018      	b.n	800be26 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2202      	movs	r2, #2
 800bdf8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	68b9      	ldr	r1, [r7, #8]
 800be04:	4618      	mov	r0, r3
 800be06:	f002 f939 	bl	800e07c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2b02      	cmp	r3, #2
 800be10:	d104      	bne.n	800be1c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2205      	movs	r2, #5
 800be16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800be1a:	e003      	b.n	800be24 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2201      	movs	r2, #1
 800be20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b082      	sub	sp, #8
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	2b02      	cmp	r3, #2
 800be42:	d101      	bne.n	800be48 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800be44:	2302      	movs	r3, #2
 800be46:	e00e      	b.n	800be66 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2202      	movs	r2, #2
 800be4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	6839      	ldr	r1, [r7, #0]
 800be56:	4618      	mov	r0, r3
 800be58:	f002 f931 	bl	800e0be <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2201      	movs	r2, #1
 800be60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800be64:	2300      	movs	r3, #0
}
 800be66:	4618      	mov	r0, r3
 800be68:	3708      	adds	r7, #8
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
	...

0800be70 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d101      	bne.n	800be82 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	e04c      	b.n	800bf1c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d106      	bne.n	800be9c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f7f6 f8bc 	bl	8002014 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2202      	movs	r2, #2
 800bea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f022 0203 	bic.w	r2, r2, #3
 800beb2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800bebc:	68fa      	ldr	r2, [r7, #12]
 800bebe:	4b19      	ldr	r3, [pc, #100]	; (800bf24 <HAL_SPDIFRX_Init+0xb4>)
 800bec0:	4013      	ands	r3, r2
 800bec2:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800becc:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800bed2:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800bed8:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800bede:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800bee4:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800beea:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800bef0:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800bef6:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800befc:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800befe:	68fa      	ldr	r2, [r7, #12]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	68fa      	ldr	r2, [r7, #12]
 800bf0a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2201      	movs	r2, #1
 800bf16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800bf1a:	2300      	movs	r3, #0
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	fff88407 	.word	0xfff88407

0800bf28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d101      	bne.n	800bf3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
 800bf38:	e084      	b.n	800c044 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d106      	bne.n	800bf5a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f7f6 f89f 	bl	8002098 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2202      	movs	r2, #2
 800bf5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf70:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	68db      	ldr	r3, [r3, #12]
 800bf76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf7a:	d902      	bls.n	800bf82 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	60fb      	str	r3, [r7, #12]
 800bf80:	e002      	b.n	800bf88 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bf82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf86:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bf90:	d007      	beq.n	800bfa2 <HAL_SPI_Init+0x7a>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf9a:	d002      	beq.n	800bfa2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d10b      	bne.n	800bfc2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	68db      	ldr	r3, [r3, #12]
 800bfae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bfb2:	d903      	bls.n	800bfbc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2202      	movs	r2, #2
 800bfb8:	631a      	str	r2, [r3, #48]	; 0x30
 800bfba:	e002      	b.n	800bfc2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	685a      	ldr	r2, [r3, #4]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	431a      	orrs	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	431a      	orrs	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	695b      	ldr	r3, [r3, #20]
 800bfd6:	431a      	orrs	r2, r3
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	699b      	ldr	r3, [r3, #24]
 800bfdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bfe0:	431a      	orrs	r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	69db      	ldr	r3, [r3, #28]
 800bfe6:	431a      	orrs	r2, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6a1b      	ldr	r3, [r3, #32]
 800bfec:	ea42 0103 	orr.w	r1, r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	430a      	orrs	r2, r1
 800bffa:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	699b      	ldr	r3, [r3, #24]
 800c000:	0c1b      	lsrs	r3, r3, #16
 800c002:	f003 0204 	and.w	r2, r3, #4
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00a:	431a      	orrs	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c010:	431a      	orrs	r2, r3
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	ea42 0103 	orr.w	r1, r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	68fa      	ldr	r2, [r7, #12]
 800c020:	430a      	orrs	r2, r1
 800c022:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	69da      	ldr	r2, [r3, #28]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c032:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2201      	movs	r2, #1
 800c03e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c042:	2300      	movs	r3, #0
}
 800c044:	4618      	mov	r0, r3
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d101      	bne.n	800c05e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c05a:	2301      	movs	r3, #1
 800c05c:	e01d      	b.n	800c09a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c064:	b2db      	uxtb	r3, r3
 800c066:	2b00      	cmp	r3, #0
 800c068:	d106      	bne.n	800c078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2200      	movs	r2, #0
 800c06e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f7f6 f872 	bl	800215c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2202      	movs	r2, #2
 800c07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	3304      	adds	r3, #4
 800c088:	4619      	mov	r1, r3
 800c08a:	4610      	mov	r0, r2
 800c08c:	f000 fba2 	bl	800c7d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2201      	movs	r2, #1
 800c094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c098:	2300      	movs	r3, #0
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3708      	adds	r7, #8
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
	...

0800c0a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2202      	movs	r2, #2
 800c0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	689a      	ldr	r2, [r3, #8]
 800c0ba:	4b0e      	ldr	r3, [pc, #56]	; (800c0f4 <HAL_TIM_Base_Start+0x50>)
 800c0bc:	4013      	ands	r3, r2
 800c0be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2b06      	cmp	r3, #6
 800c0c4:	d00b      	beq.n	800c0de <HAL_TIM_Base_Start+0x3a>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0cc:	d007      	beq.n	800c0de <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f042 0201 	orr.w	r2, r2, #1
 800c0dc:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c0e6:	2300      	movs	r3, #0
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3714      	adds	r7, #20
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr
 800c0f4:	00010007 	.word	0x00010007

0800c0f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	68da      	ldr	r2, [r3, #12]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f042 0201 	orr.w	r2, r2, #1
 800c10e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	689a      	ldr	r2, [r3, #8]
 800c116:	4b0c      	ldr	r3, [pc, #48]	; (800c148 <HAL_TIM_Base_Start_IT+0x50>)
 800c118:	4013      	ands	r3, r2
 800c11a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2b06      	cmp	r3, #6
 800c120:	d00b      	beq.n	800c13a <HAL_TIM_Base_Start_IT+0x42>
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c128:	d007      	beq.n	800c13a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f042 0201 	orr.w	r2, r2, #1
 800c138:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c13a:	2300      	movs	r3, #0
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3714      	adds	r7, #20
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	00010007 	.word	0x00010007

0800c14c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d101      	bne.n	800c15e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c15a:	2301      	movs	r3, #1
 800c15c:	e01d      	b.n	800c19a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c164:	b2db      	uxtb	r3, r3
 800c166:	2b00      	cmp	r3, #0
 800c168:	d106      	bne.n	800c178 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f7f6 f860 	bl	8002238 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2202      	movs	r2, #2
 800c17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	3304      	adds	r3, #4
 800c188:	4619      	mov	r1, r3
 800c18a:	4610      	mov	r0, r2
 800c18c:	f000 fb22 	bl	800c7d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c198:	2300      	movs	r3, #0
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3708      	adds	r7, #8
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}

0800c1a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c1a2:	b580      	push	{r7, lr}
 800c1a4:	b082      	sub	sp, #8
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	691b      	ldr	r3, [r3, #16]
 800c1b0:	f003 0302 	and.w	r3, r3, #2
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d122      	bne.n	800c1fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	f003 0302 	and.w	r3, r3, #2
 800c1c2:	2b02      	cmp	r3, #2
 800c1c4:	d11b      	bne.n	800c1fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f06f 0202 	mvn.w	r2, #2
 800c1ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	699b      	ldr	r3, [r3, #24]
 800c1dc:	f003 0303 	and.w	r3, r3, #3
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d003      	beq.n	800c1ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 fad7 	bl	800c798 <HAL_TIM_IC_CaptureCallback>
 800c1ea:	e005      	b.n	800c1f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 fac9 	bl	800c784 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fada 	bl	800c7ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	f003 0304 	and.w	r3, r3, #4
 800c208:	2b04      	cmp	r3, #4
 800c20a:	d122      	bne.n	800c252 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	f003 0304 	and.w	r3, r3, #4
 800c216:	2b04      	cmp	r3, #4
 800c218:	d11b      	bne.n	800c252 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f06f 0204 	mvn.w	r2, #4
 800c222:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2202      	movs	r2, #2
 800c228:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	699b      	ldr	r3, [r3, #24]
 800c230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c234:	2b00      	cmp	r3, #0
 800c236:	d003      	beq.n	800c240 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 faad 	bl	800c798 <HAL_TIM_IC_CaptureCallback>
 800c23e:	e005      	b.n	800c24c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 fa9f 	bl	800c784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 fab0 	bl	800c7ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	691b      	ldr	r3, [r3, #16]
 800c258:	f003 0308 	and.w	r3, r3, #8
 800c25c:	2b08      	cmp	r3, #8
 800c25e:	d122      	bne.n	800c2a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	f003 0308 	and.w	r3, r3, #8
 800c26a:	2b08      	cmp	r3, #8
 800c26c:	d11b      	bne.n	800c2a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f06f 0208 	mvn.w	r2, #8
 800c276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2204      	movs	r2, #4
 800c27c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	69db      	ldr	r3, [r3, #28]
 800c284:	f003 0303 	and.w	r3, r3, #3
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d003      	beq.n	800c294 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 fa83 	bl	800c798 <HAL_TIM_IC_CaptureCallback>
 800c292:	e005      	b.n	800c2a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 fa75 	bl	800c784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 fa86 	bl	800c7ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	691b      	ldr	r3, [r3, #16]
 800c2ac:	f003 0310 	and.w	r3, r3, #16
 800c2b0:	2b10      	cmp	r3, #16
 800c2b2:	d122      	bne.n	800c2fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	f003 0310 	and.w	r3, r3, #16
 800c2be:	2b10      	cmp	r3, #16
 800c2c0:	d11b      	bne.n	800c2fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f06f 0210 	mvn.w	r2, #16
 800c2ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2208      	movs	r2, #8
 800c2d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	69db      	ldr	r3, [r3, #28]
 800c2d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d003      	beq.n	800c2e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 fa59 	bl	800c798 <HAL_TIM_IC_CaptureCallback>
 800c2e6:	e005      	b.n	800c2f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 fa4b 	bl	800c784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fa5c 	bl	800c7ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	691b      	ldr	r3, [r3, #16]
 800c300:	f003 0301 	and.w	r3, r3, #1
 800c304:	2b01      	cmp	r3, #1
 800c306:	d10e      	bne.n	800c326 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	68db      	ldr	r3, [r3, #12]
 800c30e:	f003 0301 	and.w	r3, r3, #1
 800c312:	2b01      	cmp	r3, #1
 800c314:	d107      	bne.n	800c326 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f06f 0201 	mvn.w	r2, #1
 800c31e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f7f5 fb1b 	bl	800195c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	691b      	ldr	r3, [r3, #16]
 800c32c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c330:	2b80      	cmp	r3, #128	; 0x80
 800c332:	d10e      	bne.n	800c352 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c33e:	2b80      	cmp	r3, #128	; 0x80
 800c340:	d107      	bne.n	800c352 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c34a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 febd 	bl	800d0cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	691b      	ldr	r3, [r3, #16]
 800c358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c35c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c360:	d10e      	bne.n	800c380 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c36c:	2b80      	cmp	r3, #128	; 0x80
 800c36e:	d107      	bne.n	800c380 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 feb0 	bl	800d0e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	691b      	ldr	r3, [r3, #16]
 800c386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c38a:	2b40      	cmp	r3, #64	; 0x40
 800c38c:	d10e      	bne.n	800c3ac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c398:	2b40      	cmp	r3, #64	; 0x40
 800c39a:	d107      	bne.n	800c3ac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c3a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 fa0a 	bl	800c7c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	691b      	ldr	r3, [r3, #16]
 800c3b2:	f003 0320 	and.w	r3, r3, #32
 800c3b6:	2b20      	cmp	r3, #32
 800c3b8:	d10e      	bne.n	800c3d8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	f003 0320 	and.w	r3, r3, #32
 800c3c4:	2b20      	cmp	r3, #32
 800c3c6:	d107      	bne.n	800c3d8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f06f 0220 	mvn.w	r2, #32
 800c3d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 fe70 	bl	800d0b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c3d8:	bf00      	nop
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d101      	bne.n	800c3fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c3f6:	2302      	movs	r3, #2
 800c3f8:	e105      	b.n	800c606 <HAL_TIM_PWM_ConfigChannel+0x226>
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2202      	movs	r2, #2
 800c406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2b14      	cmp	r3, #20
 800c40e:	f200 80f0 	bhi.w	800c5f2 <HAL_TIM_PWM_ConfigChannel+0x212>
 800c412:	a201      	add	r2, pc, #4	; (adr r2, 800c418 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c418:	0800c46d 	.word	0x0800c46d
 800c41c:	0800c5f3 	.word	0x0800c5f3
 800c420:	0800c5f3 	.word	0x0800c5f3
 800c424:	0800c5f3 	.word	0x0800c5f3
 800c428:	0800c4ad 	.word	0x0800c4ad
 800c42c:	0800c5f3 	.word	0x0800c5f3
 800c430:	0800c5f3 	.word	0x0800c5f3
 800c434:	0800c5f3 	.word	0x0800c5f3
 800c438:	0800c4ef 	.word	0x0800c4ef
 800c43c:	0800c5f3 	.word	0x0800c5f3
 800c440:	0800c5f3 	.word	0x0800c5f3
 800c444:	0800c5f3 	.word	0x0800c5f3
 800c448:	0800c52f 	.word	0x0800c52f
 800c44c:	0800c5f3 	.word	0x0800c5f3
 800c450:	0800c5f3 	.word	0x0800c5f3
 800c454:	0800c5f3 	.word	0x0800c5f3
 800c458:	0800c571 	.word	0x0800c571
 800c45c:	0800c5f3 	.word	0x0800c5f3
 800c460:	0800c5f3 	.word	0x0800c5f3
 800c464:	0800c5f3 	.word	0x0800c5f3
 800c468:	0800c5b1 	.word	0x0800c5b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68b9      	ldr	r1, [r7, #8]
 800c472:	4618      	mov	r0, r3
 800c474:	f000 fa4e 	bl	800c914 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	699a      	ldr	r2, [r3, #24]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f042 0208 	orr.w	r2, r2, #8
 800c486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	699a      	ldr	r2, [r3, #24]
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f022 0204 	bic.w	r2, r2, #4
 800c496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	6999      	ldr	r1, [r3, #24]
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	691a      	ldr	r2, [r3, #16]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	430a      	orrs	r2, r1
 800c4a8:	619a      	str	r2, [r3, #24]
      break;
 800c4aa:	e0a3      	b.n	800c5f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	68b9      	ldr	r1, [r7, #8]
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 faa0 	bl	800c9f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	699a      	ldr	r2, [r3, #24]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	699a      	ldr	r2, [r3, #24]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6999      	ldr	r1, [r3, #24]
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	021a      	lsls	r2, r3, #8
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	430a      	orrs	r2, r1
 800c4ea:	619a      	str	r2, [r3, #24]
      break;
 800c4ec:	e082      	b.n	800c5f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	68b9      	ldr	r1, [r7, #8]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f000 faf7 	bl	800cae8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	69da      	ldr	r2, [r3, #28]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f042 0208 	orr.w	r2, r2, #8
 800c508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	69da      	ldr	r2, [r3, #28]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f022 0204 	bic.w	r2, r2, #4
 800c518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	69d9      	ldr	r1, [r3, #28]
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	691a      	ldr	r2, [r3, #16]
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	430a      	orrs	r2, r1
 800c52a:	61da      	str	r2, [r3, #28]
      break;
 800c52c:	e062      	b.n	800c5f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	68b9      	ldr	r1, [r7, #8]
 800c534:	4618      	mov	r0, r3
 800c536:	f000 fb4d 	bl	800cbd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	69da      	ldr	r2, [r3, #28]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	69da      	ldr	r2, [r3, #28]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	69d9      	ldr	r1, [r3, #28]
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	021a      	lsls	r2, r3, #8
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	430a      	orrs	r2, r1
 800c56c:	61da      	str	r2, [r3, #28]
      break;
 800c56e:	e041      	b.n	800c5f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	68b9      	ldr	r1, [r7, #8]
 800c576:	4618      	mov	r0, r3
 800c578:	f000 fb84 	bl	800cc84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f042 0208 	orr.w	r2, r2, #8
 800c58a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f022 0204 	bic.w	r2, r2, #4
 800c59a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	691a      	ldr	r2, [r3, #16]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	430a      	orrs	r2, r1
 800c5ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c5ae:	e021      	b.n	800c5f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	68b9      	ldr	r1, [r7, #8]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f000 fbb6 	bl	800cd28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c5ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	021a      	lsls	r2, r3, #8
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	430a      	orrs	r2, r1
 800c5ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c5f0:	e000      	b.n	800c5f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800c5f2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c604:	2300      	movs	r3, #0
}
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop

0800c610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c620:	2b01      	cmp	r3, #1
 800c622:	d101      	bne.n	800c628 <HAL_TIM_ConfigClockSource+0x18>
 800c624:	2302      	movs	r3, #2
 800c626:	e0a6      	b.n	800c776 <HAL_TIM_ConfigClockSource+0x166>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2202      	movs	r2, #2
 800c634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	4b4f      	ldr	r3, [pc, #316]	; (800c780 <HAL_TIM_ConfigClockSource+0x170>)
 800c644:	4013      	ands	r3, r2
 800c646:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c64e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b40      	cmp	r3, #64	; 0x40
 800c65e:	d067      	beq.n	800c730 <HAL_TIM_ConfigClockSource+0x120>
 800c660:	2b40      	cmp	r3, #64	; 0x40
 800c662:	d80b      	bhi.n	800c67c <HAL_TIM_ConfigClockSource+0x6c>
 800c664:	2b10      	cmp	r3, #16
 800c666:	d073      	beq.n	800c750 <HAL_TIM_ConfigClockSource+0x140>
 800c668:	2b10      	cmp	r3, #16
 800c66a:	d802      	bhi.n	800c672 <HAL_TIM_ConfigClockSource+0x62>
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d06f      	beq.n	800c750 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c670:	e078      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c672:	2b20      	cmp	r3, #32
 800c674:	d06c      	beq.n	800c750 <HAL_TIM_ConfigClockSource+0x140>
 800c676:	2b30      	cmp	r3, #48	; 0x30
 800c678:	d06a      	beq.n	800c750 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800c67a:	e073      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c67c:	2b70      	cmp	r3, #112	; 0x70
 800c67e:	d00d      	beq.n	800c69c <HAL_TIM_ConfigClockSource+0x8c>
 800c680:	2b70      	cmp	r3, #112	; 0x70
 800c682:	d804      	bhi.n	800c68e <HAL_TIM_ConfigClockSource+0x7e>
 800c684:	2b50      	cmp	r3, #80	; 0x50
 800c686:	d033      	beq.n	800c6f0 <HAL_TIM_ConfigClockSource+0xe0>
 800c688:	2b60      	cmp	r3, #96	; 0x60
 800c68a:	d041      	beq.n	800c710 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800c68c:	e06a      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c68e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c692:	d066      	beq.n	800c762 <HAL_TIM_ConfigClockSource+0x152>
 800c694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c698:	d017      	beq.n	800c6ca <HAL_TIM_ConfigClockSource+0xba>
      break;
 800c69a:	e063      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6818      	ldr	r0, [r3, #0]
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	6899      	ldr	r1, [r3, #8]
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	685a      	ldr	r2, [r3, #4]
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	f000 fc0a 	bl	800cec4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c6be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	609a      	str	r2, [r3, #8]
      break;
 800c6c8:	e04c      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6818      	ldr	r0, [r3, #0]
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	6899      	ldr	r1, [r3, #8]
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	685a      	ldr	r2, [r3, #4]
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	68db      	ldr	r3, [r3, #12]
 800c6da:	f000 fbf3 	bl	800cec4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	689a      	ldr	r2, [r3, #8]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c6ec:	609a      	str	r2, [r3, #8]
      break;
 800c6ee:	e039      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6818      	ldr	r0, [r3, #0]
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	6859      	ldr	r1, [r3, #4]
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	68db      	ldr	r3, [r3, #12]
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	f000 fb67 	bl	800cdd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2150      	movs	r1, #80	; 0x50
 800c708:	4618      	mov	r0, r3
 800c70a:	f000 fbc0 	bl	800ce8e <TIM_ITRx_SetConfig>
      break;
 800c70e:	e029      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6818      	ldr	r0, [r3, #0]
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	6859      	ldr	r1, [r3, #4]
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	461a      	mov	r2, r3
 800c71e:	f000 fb86 	bl	800ce2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2160      	movs	r1, #96	; 0x60
 800c728:	4618      	mov	r0, r3
 800c72a:	f000 fbb0 	bl	800ce8e <TIM_ITRx_SetConfig>
      break;
 800c72e:	e019      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6818      	ldr	r0, [r3, #0]
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	6859      	ldr	r1, [r3, #4]
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	461a      	mov	r2, r3
 800c73e:	f000 fb47 	bl	800cdd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2140      	movs	r1, #64	; 0x40
 800c748:	4618      	mov	r0, r3
 800c74a:	f000 fba0 	bl	800ce8e <TIM_ITRx_SetConfig>
      break;
 800c74e:	e009      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4619      	mov	r1, r3
 800c75a:	4610      	mov	r0, r2
 800c75c:	f000 fb97 	bl	800ce8e <TIM_ITRx_SetConfig>
      break;
 800c760:	e000      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800c762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	3710      	adds	r7, #16
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	fffeff88 	.word	0xfffeff88

0800c784 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c78c:	bf00      	nop
 800c78e:	370c      	adds	r7, #12
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c7a0:	bf00      	nop
 800c7a2:	370c      	adds	r7, #12
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr

0800c7ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b083      	sub	sp, #12
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c7b4:	bf00      	nop
 800c7b6:	370c      	adds	r7, #12
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr

0800c7c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b083      	sub	sp, #12
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c7c8:	bf00      	nop
 800c7ca:	370c      	adds	r7, #12
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr

0800c7d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	4a40      	ldr	r2, [pc, #256]	; (800c8e8 <TIM_Base_SetConfig+0x114>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d013      	beq.n	800c814 <TIM_Base_SetConfig+0x40>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7f2:	d00f      	beq.n	800c814 <TIM_Base_SetConfig+0x40>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	4a3d      	ldr	r2, [pc, #244]	; (800c8ec <TIM_Base_SetConfig+0x118>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d00b      	beq.n	800c814 <TIM_Base_SetConfig+0x40>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	4a3c      	ldr	r2, [pc, #240]	; (800c8f0 <TIM_Base_SetConfig+0x11c>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d007      	beq.n	800c814 <TIM_Base_SetConfig+0x40>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	4a3b      	ldr	r2, [pc, #236]	; (800c8f4 <TIM_Base_SetConfig+0x120>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d003      	beq.n	800c814 <TIM_Base_SetConfig+0x40>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4a3a      	ldr	r2, [pc, #232]	; (800c8f8 <TIM_Base_SetConfig+0x124>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d108      	bne.n	800c826 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c81a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	68fa      	ldr	r2, [r7, #12]
 800c822:	4313      	orrs	r3, r2
 800c824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	4a2f      	ldr	r2, [pc, #188]	; (800c8e8 <TIM_Base_SetConfig+0x114>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d02b      	beq.n	800c886 <TIM_Base_SetConfig+0xb2>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c834:	d027      	beq.n	800c886 <TIM_Base_SetConfig+0xb2>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	4a2c      	ldr	r2, [pc, #176]	; (800c8ec <TIM_Base_SetConfig+0x118>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d023      	beq.n	800c886 <TIM_Base_SetConfig+0xb2>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	4a2b      	ldr	r2, [pc, #172]	; (800c8f0 <TIM_Base_SetConfig+0x11c>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d01f      	beq.n	800c886 <TIM_Base_SetConfig+0xb2>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	4a2a      	ldr	r2, [pc, #168]	; (800c8f4 <TIM_Base_SetConfig+0x120>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d01b      	beq.n	800c886 <TIM_Base_SetConfig+0xb2>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4a29      	ldr	r2, [pc, #164]	; (800c8f8 <TIM_Base_SetConfig+0x124>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d017      	beq.n	800c886 <TIM_Base_SetConfig+0xb2>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	4a28      	ldr	r2, [pc, #160]	; (800c8fc <TIM_Base_SetConfig+0x128>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d013      	beq.n	800c886 <TIM_Base_SetConfig+0xb2>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	4a27      	ldr	r2, [pc, #156]	; (800c900 <TIM_Base_SetConfig+0x12c>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d00f      	beq.n	800c886 <TIM_Base_SetConfig+0xb2>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4a26      	ldr	r2, [pc, #152]	; (800c904 <TIM_Base_SetConfig+0x130>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d00b      	beq.n	800c886 <TIM_Base_SetConfig+0xb2>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4a25      	ldr	r2, [pc, #148]	; (800c908 <TIM_Base_SetConfig+0x134>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d007      	beq.n	800c886 <TIM_Base_SetConfig+0xb2>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4a24      	ldr	r2, [pc, #144]	; (800c90c <TIM_Base_SetConfig+0x138>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d003      	beq.n	800c886 <TIM_Base_SetConfig+0xb2>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4a23      	ldr	r2, [pc, #140]	; (800c910 <TIM_Base_SetConfig+0x13c>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d108      	bne.n	800c898 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c88c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	68fa      	ldr	r2, [r7, #12]
 800c894:	4313      	orrs	r3, r2
 800c896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	695b      	ldr	r3, [r3, #20]
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	689a      	ldr	r2, [r3, #8]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4a0a      	ldr	r2, [pc, #40]	; (800c8e8 <TIM_Base_SetConfig+0x114>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d003      	beq.n	800c8cc <TIM_Base_SetConfig+0xf8>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	4a0c      	ldr	r2, [pc, #48]	; (800c8f8 <TIM_Base_SetConfig+0x124>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d103      	bne.n	800c8d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	691a      	ldr	r2, [r3, #16]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	615a      	str	r2, [r3, #20]
}
 800c8da:	bf00      	nop
 800c8dc:	3714      	adds	r7, #20
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr
 800c8e6:	bf00      	nop
 800c8e8:	40010000 	.word	0x40010000
 800c8ec:	40000400 	.word	0x40000400
 800c8f0:	40000800 	.word	0x40000800
 800c8f4:	40000c00 	.word	0x40000c00
 800c8f8:	40010400 	.word	0x40010400
 800c8fc:	40014000 	.word	0x40014000
 800c900:	40014400 	.word	0x40014400
 800c904:	40014800 	.word	0x40014800
 800c908:	40001800 	.word	0x40001800
 800c90c:	40001c00 	.word	0x40001c00
 800c910:	40002000 	.word	0x40002000

0800c914 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c914:	b480      	push	{r7}
 800c916:	b087      	sub	sp, #28
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6a1b      	ldr	r3, [r3, #32]
 800c922:	f023 0201 	bic.w	r2, r3, #1
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6a1b      	ldr	r3, [r3, #32]
 800c92e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	699b      	ldr	r3, [r3, #24]
 800c93a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	4b2b      	ldr	r3, [pc, #172]	; (800c9ec <TIM_OC1_SetConfig+0xd8>)
 800c940:	4013      	ands	r3, r2
 800c942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f023 0303 	bic.w	r3, r3, #3
 800c94a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	4313      	orrs	r3, r2
 800c954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	f023 0302 	bic.w	r3, r3, #2
 800c95c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	4313      	orrs	r3, r2
 800c966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4a21      	ldr	r2, [pc, #132]	; (800c9f0 <TIM_OC1_SetConfig+0xdc>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d003      	beq.n	800c978 <TIM_OC1_SetConfig+0x64>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4a20      	ldr	r2, [pc, #128]	; (800c9f4 <TIM_OC1_SetConfig+0xe0>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d10c      	bne.n	800c992 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	f023 0308 	bic.w	r3, r3, #8
 800c97e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	697a      	ldr	r2, [r7, #20]
 800c986:	4313      	orrs	r3, r2
 800c988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	f023 0304 	bic.w	r3, r3, #4
 800c990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4a16      	ldr	r2, [pc, #88]	; (800c9f0 <TIM_OC1_SetConfig+0xdc>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d003      	beq.n	800c9a2 <TIM_OC1_SetConfig+0x8e>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4a15      	ldr	r2, [pc, #84]	; (800c9f4 <TIM_OC1_SetConfig+0xe0>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d111      	bne.n	800c9c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c9b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	695b      	ldr	r3, [r3, #20]
 800c9b6:	693a      	ldr	r2, [r7, #16]
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	699b      	ldr	r3, [r3, #24]
 800c9c0:	693a      	ldr	r2, [r7, #16]
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	693a      	ldr	r2, [r7, #16]
 800c9ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	685a      	ldr	r2, [r3, #4]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	697a      	ldr	r2, [r7, #20]
 800c9de:	621a      	str	r2, [r3, #32]
}
 800c9e0:	bf00      	nop
 800c9e2:	371c      	adds	r7, #28
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr
 800c9ec:	fffeff8f 	.word	0xfffeff8f
 800c9f0:	40010000 	.word	0x40010000
 800c9f4:	40010400 	.word	0x40010400

0800c9f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b087      	sub	sp, #28
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a1b      	ldr	r3, [r3, #32]
 800ca06:	f023 0210 	bic.w	r2, r3, #16
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6a1b      	ldr	r3, [r3, #32]
 800ca12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	699b      	ldr	r3, [r3, #24]
 800ca1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ca20:	68fa      	ldr	r2, [r7, #12]
 800ca22:	4b2e      	ldr	r3, [pc, #184]	; (800cadc <TIM_OC2_SetConfig+0xe4>)
 800ca24:	4013      	ands	r3, r2
 800ca26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	021b      	lsls	r3, r3, #8
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	f023 0320 	bic.w	r3, r3, #32
 800ca42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	011b      	lsls	r3, r3, #4
 800ca4a:	697a      	ldr	r2, [r7, #20]
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	4a23      	ldr	r2, [pc, #140]	; (800cae0 <TIM_OC2_SetConfig+0xe8>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d003      	beq.n	800ca60 <TIM_OC2_SetConfig+0x68>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4a22      	ldr	r2, [pc, #136]	; (800cae4 <TIM_OC2_SetConfig+0xec>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d10d      	bne.n	800ca7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	011b      	lsls	r3, r3, #4
 800ca6e:	697a      	ldr	r2, [r7, #20]
 800ca70:	4313      	orrs	r3, r2
 800ca72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	4a18      	ldr	r2, [pc, #96]	; (800cae0 <TIM_OC2_SetConfig+0xe8>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d003      	beq.n	800ca8c <TIM_OC2_SetConfig+0x94>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	4a17      	ldr	r2, [pc, #92]	; (800cae4 <TIM_OC2_SetConfig+0xec>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d113      	bne.n	800cab4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ca9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	695b      	ldr	r3, [r3, #20]
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	693a      	ldr	r2, [r7, #16]
 800caa4:	4313      	orrs	r3, r2
 800caa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	699b      	ldr	r3, [r3, #24]
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	693a      	ldr	r2, [r7, #16]
 800cab0:	4313      	orrs	r3, r2
 800cab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	693a      	ldr	r2, [r7, #16]
 800cab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	685a      	ldr	r2, [r3, #4]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	697a      	ldr	r2, [r7, #20]
 800cacc:	621a      	str	r2, [r3, #32]
}
 800cace:	bf00      	nop
 800cad0:	371c      	adds	r7, #28
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	feff8fff 	.word	0xfeff8fff
 800cae0:	40010000 	.word	0x40010000
 800cae4:	40010400 	.word	0x40010400

0800cae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cae8:	b480      	push	{r7}
 800caea:	b087      	sub	sp, #28
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6a1b      	ldr	r3, [r3, #32]
 800caf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6a1b      	ldr	r3, [r3, #32]
 800cb02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	69db      	ldr	r3, [r3, #28]
 800cb0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	4b2d      	ldr	r3, [pc, #180]	; (800cbc8 <TIM_OC3_SetConfig+0xe0>)
 800cb14:	4013      	ands	r3, r2
 800cb16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f023 0303 	bic.w	r3, r3, #3
 800cb1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	4313      	orrs	r3, r2
 800cb28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	021b      	lsls	r3, r3, #8
 800cb38:	697a      	ldr	r2, [r7, #20]
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	4a22      	ldr	r2, [pc, #136]	; (800cbcc <TIM_OC3_SetConfig+0xe4>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d003      	beq.n	800cb4e <TIM_OC3_SetConfig+0x66>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4a21      	ldr	r2, [pc, #132]	; (800cbd0 <TIM_OC3_SetConfig+0xe8>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d10d      	bne.n	800cb6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cb54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	021b      	lsls	r3, r3, #8
 800cb5c:	697a      	ldr	r2, [r7, #20]
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cb68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4a17      	ldr	r2, [pc, #92]	; (800cbcc <TIM_OC3_SetConfig+0xe4>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d003      	beq.n	800cb7a <TIM_OC3_SetConfig+0x92>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	4a16      	ldr	r2, [pc, #88]	; (800cbd0 <TIM_OC3_SetConfig+0xe8>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d113      	bne.n	800cba2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cb88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	695b      	ldr	r3, [r3, #20]
 800cb8e:	011b      	lsls	r3, r3, #4
 800cb90:	693a      	ldr	r2, [r7, #16]
 800cb92:	4313      	orrs	r3, r2
 800cb94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	699b      	ldr	r3, [r3, #24]
 800cb9a:	011b      	lsls	r3, r3, #4
 800cb9c:	693a      	ldr	r2, [r7, #16]
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	693a      	ldr	r2, [r7, #16]
 800cba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	68fa      	ldr	r2, [r7, #12]
 800cbac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	685a      	ldr	r2, [r3, #4]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	697a      	ldr	r2, [r7, #20]
 800cbba:	621a      	str	r2, [r3, #32]
}
 800cbbc:	bf00      	nop
 800cbbe:	371c      	adds	r7, #28
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr
 800cbc8:	fffeff8f 	.word	0xfffeff8f
 800cbcc:	40010000 	.word	0x40010000
 800cbd0:	40010400 	.word	0x40010400

0800cbd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b087      	sub	sp, #28
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6a1b      	ldr	r3, [r3, #32]
 800cbe2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6a1b      	ldr	r3, [r3, #32]
 800cbee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	69db      	ldr	r3, [r3, #28]
 800cbfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cbfc:	68fa      	ldr	r2, [r7, #12]
 800cbfe:	4b1e      	ldr	r3, [pc, #120]	; (800cc78 <TIM_OC4_SetConfig+0xa4>)
 800cc00:	4013      	ands	r3, r2
 800cc02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	021b      	lsls	r3, r3, #8
 800cc12:	68fa      	ldr	r2, [r7, #12]
 800cc14:	4313      	orrs	r3, r2
 800cc16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cc1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	689b      	ldr	r3, [r3, #8]
 800cc24:	031b      	lsls	r3, r3, #12
 800cc26:	693a      	ldr	r2, [r7, #16]
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	4a13      	ldr	r2, [pc, #76]	; (800cc7c <TIM_OC4_SetConfig+0xa8>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d003      	beq.n	800cc3c <TIM_OC4_SetConfig+0x68>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	4a12      	ldr	r2, [pc, #72]	; (800cc80 <TIM_OC4_SetConfig+0xac>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d109      	bne.n	800cc50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	695b      	ldr	r3, [r3, #20]
 800cc48:	019b      	lsls	r3, r3, #6
 800cc4a:	697a      	ldr	r2, [r7, #20]
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	68fa      	ldr	r2, [r7, #12]
 800cc5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	685a      	ldr	r2, [r3, #4]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	693a      	ldr	r2, [r7, #16]
 800cc68:	621a      	str	r2, [r3, #32]
}
 800cc6a:	bf00      	nop
 800cc6c:	371c      	adds	r7, #28
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr
 800cc76:	bf00      	nop
 800cc78:	feff8fff 	.word	0xfeff8fff
 800cc7c:	40010000 	.word	0x40010000
 800cc80:	40010400 	.word	0x40010400

0800cc84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b087      	sub	sp, #28
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6a1b      	ldr	r3, [r3, #32]
 800cc92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6a1b      	ldr	r3, [r3, #32]
 800cc9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	4b1b      	ldr	r3, [pc, #108]	; (800cd1c <TIM_OC5_SetConfig+0x98>)
 800ccb0:	4013      	ands	r3, r2
 800ccb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	68fa      	ldr	r2, [r7, #12]
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ccc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	041b      	lsls	r3, r3, #16
 800cccc:	693a      	ldr	r2, [r7, #16]
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4a12      	ldr	r2, [pc, #72]	; (800cd20 <TIM_OC5_SetConfig+0x9c>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d003      	beq.n	800cce2 <TIM_OC5_SetConfig+0x5e>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	4a11      	ldr	r2, [pc, #68]	; (800cd24 <TIM_OC5_SetConfig+0xa0>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d109      	bne.n	800ccf6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cce8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	695b      	ldr	r3, [r3, #20]
 800ccee:	021b      	lsls	r3, r3, #8
 800ccf0:	697a      	ldr	r2, [r7, #20]
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	697a      	ldr	r2, [r7, #20]
 800ccfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	68fa      	ldr	r2, [r7, #12]
 800cd00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	685a      	ldr	r2, [r3, #4]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	693a      	ldr	r2, [r7, #16]
 800cd0e:	621a      	str	r2, [r3, #32]
}
 800cd10:	bf00      	nop
 800cd12:	371c      	adds	r7, #28
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr
 800cd1c:	fffeff8f 	.word	0xfffeff8f
 800cd20:	40010000 	.word	0x40010000
 800cd24:	40010400 	.word	0x40010400

0800cd28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b087      	sub	sp, #28
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6a1b      	ldr	r3, [r3, #32]
 800cd36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6a1b      	ldr	r3, [r3, #32]
 800cd42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cd50:	68fa      	ldr	r2, [r7, #12]
 800cd52:	4b1c      	ldr	r3, [pc, #112]	; (800cdc4 <TIM_OC6_SetConfig+0x9c>)
 800cd54:	4013      	ands	r3, r2
 800cd56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	021b      	lsls	r3, r3, #8
 800cd5e:	68fa      	ldr	r2, [r7, #12]
 800cd60:	4313      	orrs	r3, r2
 800cd62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cd6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	051b      	lsls	r3, r3, #20
 800cd72:	693a      	ldr	r2, [r7, #16]
 800cd74:	4313      	orrs	r3, r2
 800cd76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	4a13      	ldr	r2, [pc, #76]	; (800cdc8 <TIM_OC6_SetConfig+0xa0>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d003      	beq.n	800cd88 <TIM_OC6_SetConfig+0x60>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	4a12      	ldr	r2, [pc, #72]	; (800cdcc <TIM_OC6_SetConfig+0xa4>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d109      	bne.n	800cd9c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cd8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	695b      	ldr	r3, [r3, #20]
 800cd94:	029b      	lsls	r3, r3, #10
 800cd96:	697a      	ldr	r2, [r7, #20]
 800cd98:	4313      	orrs	r3, r2
 800cd9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	697a      	ldr	r2, [r7, #20]
 800cda0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	68fa      	ldr	r2, [r7, #12]
 800cda6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	685a      	ldr	r2, [r3, #4]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	693a      	ldr	r2, [r7, #16]
 800cdb4:	621a      	str	r2, [r3, #32]
}
 800cdb6:	bf00      	nop
 800cdb8:	371c      	adds	r7, #28
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop
 800cdc4:	feff8fff 	.word	0xfeff8fff
 800cdc8:	40010000 	.word	0x40010000
 800cdcc:	40010400 	.word	0x40010400

0800cdd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b087      	sub	sp, #28
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	6a1b      	ldr	r3, [r3, #32]
 800cde0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	6a1b      	ldr	r3, [r3, #32]
 800cde6:	f023 0201 	bic.w	r2, r3, #1
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	699b      	ldr	r3, [r3, #24]
 800cdf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cdfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	011b      	lsls	r3, r3, #4
 800ce00:	693a      	ldr	r2, [r7, #16]
 800ce02:	4313      	orrs	r3, r2
 800ce04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	f023 030a 	bic.w	r3, r3, #10
 800ce0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ce0e:	697a      	ldr	r2, [r7, #20]
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	4313      	orrs	r3, r2
 800ce14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	693a      	ldr	r2, [r7, #16]
 800ce1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	697a      	ldr	r2, [r7, #20]
 800ce20:	621a      	str	r2, [r3, #32]
}
 800ce22:	bf00      	nop
 800ce24:	371c      	adds	r7, #28
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr

0800ce2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce2e:	b480      	push	{r7}
 800ce30:	b087      	sub	sp, #28
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	60f8      	str	r0, [r7, #12]
 800ce36:	60b9      	str	r1, [r7, #8]
 800ce38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	6a1b      	ldr	r3, [r3, #32]
 800ce3e:	f023 0210 	bic.w	r2, r3, #16
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	699b      	ldr	r3, [r3, #24]
 800ce4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6a1b      	ldr	r3, [r3, #32]
 800ce50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	031b      	lsls	r3, r3, #12
 800ce5e:	697a      	ldr	r2, [r7, #20]
 800ce60:	4313      	orrs	r3, r2
 800ce62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ce6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	011b      	lsls	r3, r3, #4
 800ce70:	693a      	ldr	r2, [r7, #16]
 800ce72:	4313      	orrs	r3, r2
 800ce74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	697a      	ldr	r2, [r7, #20]
 800ce7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	693a      	ldr	r2, [r7, #16]
 800ce80:	621a      	str	r2, [r3, #32]
}
 800ce82:	bf00      	nop
 800ce84:	371c      	adds	r7, #28
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr

0800ce8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ce8e:	b480      	push	{r7}
 800ce90:	b085      	sub	sp, #20
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
 800ce96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	689b      	ldr	r3, [r3, #8]
 800ce9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cea4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cea6:	683a      	ldr	r2, [r7, #0]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	f043 0307 	orr.w	r3, r3, #7
 800ceb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	68fa      	ldr	r2, [r7, #12]
 800ceb6:	609a      	str	r2, [r3, #8]
}
 800ceb8:	bf00      	nop
 800ceba:	3714      	adds	r7, #20
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr

0800cec4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b087      	sub	sp, #28
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	60f8      	str	r0, [r7, #12]
 800cecc:	60b9      	str	r1, [r7, #8]
 800cece:	607a      	str	r2, [r7, #4]
 800ced0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cede:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	021a      	lsls	r2, r3, #8
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	431a      	orrs	r2, r3
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	4313      	orrs	r3, r2
 800ceec:	697a      	ldr	r2, [r7, #20]
 800ceee:	4313      	orrs	r3, r2
 800cef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	697a      	ldr	r2, [r7, #20]
 800cef6:	609a      	str	r2, [r3, #8]
}
 800cef8:	bf00      	nop
 800cefa:	371c      	adds	r7, #28
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr

0800cf04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d101      	bne.n	800cf1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf18:	2302      	movs	r3, #2
 800cf1a:	e045      	b.n	800cfa8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2202      	movs	r2, #2
 800cf28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	689b      	ldr	r3, [r3, #8]
 800cf3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a1c      	ldr	r2, [pc, #112]	; (800cfb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d004      	beq.n	800cf50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	4a1b      	ldr	r2, [pc, #108]	; (800cfb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d108      	bne.n	800cf62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cf56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	68fa      	ldr	r2, [r7, #12]
 800cf70:	4313      	orrs	r3, r2
 800cf72:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf7a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	689b      	ldr	r3, [r3, #8]
 800cf80:	68ba      	ldr	r2, [r7, #8]
 800cf82:	4313      	orrs	r3, r2
 800cf84:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	68fa      	ldr	r2, [r7, #12]
 800cf8c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cfa6:	2300      	movs	r3, #0
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3714      	adds	r7, #20
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr
 800cfb4:	40010000 	.word	0x40010000
 800cfb8:	40010400 	.word	0x40010400

0800cfbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b085      	sub	sp, #20
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d101      	bne.n	800cfd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cfd4:	2302      	movs	r3, #2
 800cfd6:	e065      	b.n	800d0a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	4313      	orrs	r3, r2
 800cfec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	4313      	orrs	r3, r2
 800cffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	4313      	orrs	r3, r2
 800d008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4313      	orrs	r3, r2
 800d016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	691b      	ldr	r3, [r3, #16]
 800d022:	4313      	orrs	r3, r2
 800d024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	695b      	ldr	r3, [r3, #20]
 800d030:	4313      	orrs	r3, r2
 800d032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d03e:	4313      	orrs	r3, r2
 800d040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	699b      	ldr	r3, [r3, #24]
 800d04c:	041b      	lsls	r3, r3, #16
 800d04e:	4313      	orrs	r3, r2
 800d050:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4a16      	ldr	r2, [pc, #88]	; (800d0b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d004      	beq.n	800d066 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a14      	ldr	r2, [pc, #80]	; (800d0b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d115      	bne.n	800d092 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d070:	051b      	lsls	r3, r3, #20
 800d072:	4313      	orrs	r3, r2
 800d074:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	69db      	ldr	r3, [r3, #28]
 800d080:	4313      	orrs	r3, r2
 800d082:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	6a1b      	ldr	r3, [r3, #32]
 800d08e:	4313      	orrs	r3, r2
 800d090:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	68fa      	ldr	r2, [r7, #12]
 800d098:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2200      	movs	r2, #0
 800d09e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d0a2:	2300      	movs	r3, #0
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3714      	adds	r7, #20
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr
 800d0b0:	40010000 	.word	0x40010000
 800d0b4:	40010400 	.word	0x40010400

0800d0b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d0c0:	bf00      	nop
 800d0c2:	370c      	adds	r7, #12
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr

0800d0cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d0d4:	bf00      	nop
 800d0d6:	370c      	adds	r7, #12
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr

0800d0e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b083      	sub	sp, #12
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d0e8:	bf00      	nop
 800d0ea:	370c      	adds	r7, #12
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr

0800d0f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d101      	bne.n	800d106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d102:	2301      	movs	r3, #1
 800d104:	e040      	b.n	800d188 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d106      	bne.n	800d11c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2200      	movs	r2, #0
 800d112:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f7f5 f97c 	bl	8002414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2224      	movs	r2, #36	; 0x24
 800d120:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f022 0201 	bic.w	r2, r2, #1
 800d130:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 f9fe 	bl	800d534 <UART_SetConfig>
 800d138:	4603      	mov	r3, r0
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d101      	bne.n	800d142 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d13e:	2301      	movs	r3, #1
 800d140:	e022      	b.n	800d188 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d146:	2b00      	cmp	r3, #0
 800d148:	d002      	beq.n	800d150 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 fc96 	bl	800da7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	685a      	ldr	r2, [r3, #4]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d15e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	689a      	ldr	r2, [r3, #8]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d16e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f042 0201 	orr.w	r2, r2, #1
 800d17e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f000 fd1d 	bl	800dbc0 <UART_CheckIdleState>
 800d186:	4603      	mov	r3, r0
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3708      	adds	r7, #8
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d190:	b480      	push	{r7}
 800d192:	b085      	sub	sp, #20
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	4613      	mov	r3, r2
 800d19c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1a2:	2b20      	cmp	r3, #32
 800d1a4:	f040 808a 	bne.w	800d2bc <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d002      	beq.n	800d1b4 <HAL_UART_Receive_IT+0x24>
 800d1ae:	88fb      	ldrh	r3, [r7, #6]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d101      	bne.n	800d1b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	e082      	b.n	800d2be <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800d1be:	2b01      	cmp	r3, #1
 800d1c0:	d101      	bne.n	800d1c6 <HAL_UART_Receive_IT+0x36>
 800d1c2:	2302      	movs	r3, #2
 800d1c4:	e07b      	b.n	800d2be <HAL_UART_Receive_IT+0x12e>
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	68ba      	ldr	r2, [r7, #8]
 800d1d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	88fa      	ldrh	r2, [r7, #6]
 800d1d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	88fa      	ldrh	r2, [r7, #6]
 800d1e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	689b      	ldr	r3, [r3, #8]
 800d1ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1f2:	d10e      	bne.n	800d212 <HAL_UART_Receive_IT+0x82>
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d105      	bne.n	800d208 <HAL_UART_Receive_IT+0x78>
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d202:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d206:	e02d      	b.n	800d264 <HAL_UART_Receive_IT+0xd4>
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	22ff      	movs	r2, #255	; 0xff
 800d20c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d210:	e028      	b.n	800d264 <HAL_UART_Receive_IT+0xd4>
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	689b      	ldr	r3, [r3, #8]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d10d      	bne.n	800d236 <HAL_UART_Receive_IT+0xa6>
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	691b      	ldr	r3, [r3, #16]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d104      	bne.n	800d22c <HAL_UART_Receive_IT+0x9c>
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	22ff      	movs	r2, #255	; 0xff
 800d226:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d22a:	e01b      	b.n	800d264 <HAL_UART_Receive_IT+0xd4>
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	227f      	movs	r2, #127	; 0x7f
 800d230:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d234:	e016      	b.n	800d264 <HAL_UART_Receive_IT+0xd4>
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	689b      	ldr	r3, [r3, #8]
 800d23a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d23e:	d10d      	bne.n	800d25c <HAL_UART_Receive_IT+0xcc>
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	691b      	ldr	r3, [r3, #16]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d104      	bne.n	800d252 <HAL_UART_Receive_IT+0xc2>
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	227f      	movs	r2, #127	; 0x7f
 800d24c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d250:	e008      	b.n	800d264 <HAL_UART_Receive_IT+0xd4>
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	223f      	movs	r2, #63	; 0x3f
 800d256:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d25a:	e003      	b.n	800d264 <HAL_UART_Receive_IT+0xd4>
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2200      	movs	r2, #0
 800d260:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2200      	movs	r2, #0
 800d268:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2222      	movs	r2, #34	; 0x22
 800d26e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	689a      	ldr	r2, [r3, #8]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f042 0201 	orr.w	r2, r2, #1
 800d27e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d288:	d107      	bne.n	800d29a <HAL_UART_Receive_IT+0x10a>
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	691b      	ldr	r3, [r3, #16]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d103      	bne.n	800d29a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	4a0d      	ldr	r2, [pc, #52]	; (800d2cc <HAL_UART_Receive_IT+0x13c>)
 800d296:	661a      	str	r2, [r3, #96]	; 0x60
 800d298:	e002      	b.n	800d2a0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	4a0c      	ldr	r2, [pc, #48]	; (800d2d0 <HAL_UART_Receive_IT+0x140>)
 800d29e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800d2b6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	e000      	b.n	800d2be <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800d2bc:	2302      	movs	r3, #2
  }
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3714      	adds	r7, #20
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr
 800d2ca:	bf00      	nop
 800d2cc:	0800ddf3 	.word	0x0800ddf3
 800d2d0:	0800dd4d 	.word	0x0800dd4d

0800d2d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b088      	sub	sp, #32
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	69db      	ldr	r3, [r3, #28]
 800d2e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	689b      	ldr	r3, [r3, #8]
 800d2f2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	f003 030f 	and.w	r3, r3, #15
 800d2fa:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d113      	bne.n	800d32a <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800d302:	69fb      	ldr	r3, [r7, #28]
 800d304:	f003 0320 	and.w	r3, r3, #32
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d00e      	beq.n	800d32a <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d30c:	69bb      	ldr	r3, [r7, #24]
 800d30e:	f003 0320 	and.w	r3, r3, #32
 800d312:	2b00      	cmp	r3, #0
 800d314:	d009      	beq.n	800d32a <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f000 80eb 	beq.w	800d4f6 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	4798      	blx	r3
      }
      return;
 800d328:	e0e5      	b.n	800d4f6 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	f000 80c0 	beq.w	800d4b2 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	f003 0301 	and.w	r3, r3, #1
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d105      	bne.n	800d348 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800d33c:	69bb      	ldr	r3, [r7, #24]
 800d33e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d342:	2b00      	cmp	r3, #0
 800d344:	f000 80b5 	beq.w	800d4b2 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d348:	69fb      	ldr	r3, [r7, #28]
 800d34a:	f003 0301 	and.w	r3, r3, #1
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00e      	beq.n	800d370 <HAL_UART_IRQHandler+0x9c>
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d009      	beq.n	800d370 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2201      	movs	r2, #1
 800d362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d368:	f043 0201 	orr.w	r2, r3, #1
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d370:	69fb      	ldr	r3, [r7, #28]
 800d372:	f003 0302 	and.w	r3, r3, #2
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00e      	beq.n	800d398 <HAL_UART_IRQHandler+0xc4>
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	f003 0301 	and.w	r3, r3, #1
 800d380:	2b00      	cmp	r3, #0
 800d382:	d009      	beq.n	800d398 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2202      	movs	r2, #2
 800d38a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d390:	f043 0204 	orr.w	r2, r3, #4
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	f003 0304 	and.w	r3, r3, #4
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d00e      	beq.n	800d3c0 <HAL_UART_IRQHandler+0xec>
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	f003 0301 	and.w	r3, r3, #1
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d009      	beq.n	800d3c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	2204      	movs	r2, #4
 800d3b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3b8:	f043 0202 	orr.w	r2, r3, #2
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d3c0:	69fb      	ldr	r3, [r7, #28]
 800d3c2:	f003 0308 	and.w	r3, r3, #8
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d013      	beq.n	800d3f2 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	f003 0320 	and.w	r3, r3, #32
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d104      	bne.n	800d3de <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d009      	beq.n	800d3f2 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	2208      	movs	r2, #8
 800d3e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3ea:	f043 0208 	orr.w	r2, r3, #8
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d07f      	beq.n	800d4fa <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	f003 0320 	and.w	r3, r3, #32
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00c      	beq.n	800d41e <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d404:	69bb      	ldr	r3, [r7, #24]
 800d406:	f003 0320 	and.w	r3, r3, #32
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d007      	beq.n	800d41e <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d412:	2b00      	cmp	r3, #0
 800d414:	d003      	beq.n	800d41e <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d422:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d42e:	2b40      	cmp	r3, #64	; 0x40
 800d430:	d004      	beq.n	800d43c <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d031      	beq.n	800d4a0 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 fc36 	bl	800dcae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d44c:	2b40      	cmp	r3, #64	; 0x40
 800d44e:	d123      	bne.n	800d498 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	689a      	ldr	r2, [r3, #8]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d45e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d464:	2b00      	cmp	r3, #0
 800d466:	d013      	beq.n	800d490 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d46c:	4a26      	ldr	r2, [pc, #152]	; (800d508 <HAL_UART_IRQHandler+0x234>)
 800d46e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d474:	4618      	mov	r0, r3
 800d476:	f7f7 f989 	bl	800478c <HAL_DMA_Abort_IT>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d016      	beq.n	800d4ae <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d48a:	4610      	mov	r0, r2
 800d48c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d48e:	e00e      	b.n	800d4ae <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f000 f845 	bl	800d520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d496:	e00a      	b.n	800d4ae <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f000 f841 	bl	800d520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d49e:	e006      	b.n	800d4ae <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f000 f83d 	bl	800d520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800d4ac:	e025      	b.n	800d4fa <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4ae:	bf00      	nop
    return;
 800d4b0:	e023      	b.n	800d4fa <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d4b2:	69fb      	ldr	r3, [r7, #28]
 800d4b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d00d      	beq.n	800d4d8 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d4bc:	69bb      	ldr	r3, [r7, #24]
 800d4be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d008      	beq.n	800d4d8 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d017      	beq.n	800d4fe <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	4798      	blx	r3
    }
    return;
 800d4d6:	e012      	b.n	800d4fe <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d00e      	beq.n	800d500 <HAL_UART_IRQHandler+0x22c>
 800d4e2:	69bb      	ldr	r3, [r7, #24]
 800d4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d009      	beq.n	800d500 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 fc14 	bl	800dd1a <UART_EndTransmit_IT>
    return;
 800d4f2:	bf00      	nop
 800d4f4:	e004      	b.n	800d500 <HAL_UART_IRQHandler+0x22c>
      return;
 800d4f6:	bf00      	nop
 800d4f8:	e002      	b.n	800d500 <HAL_UART_IRQHandler+0x22c>
    return;
 800d4fa:	bf00      	nop
 800d4fc:	e000      	b.n	800d500 <HAL_UART_IRQHandler+0x22c>
    return;
 800d4fe:	bf00      	nop
  }

}
 800d500:	3720      	adds	r7, #32
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	0800dcef 	.word	0x0800dcef

0800d50c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b083      	sub	sp, #12
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d514:	bf00      	nop
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr

0800d520 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d520:	b480      	push	{r7}
 800d522:	b083      	sub	sp, #12
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d528:	bf00      	nop
 800d52a:	370c      	adds	r7, #12
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b088      	sub	sp, #32
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800d53c:	2300      	movs	r3, #0
 800d53e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800d540:	2300      	movs	r3, #0
 800d542:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	689a      	ldr	r2, [r3, #8]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	691b      	ldr	r3, [r3, #16]
 800d54c:	431a      	orrs	r2, r3
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	695b      	ldr	r3, [r3, #20]
 800d552:	431a      	orrs	r2, r3
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	69db      	ldr	r3, [r3, #28]
 800d558:	4313      	orrs	r3, r2
 800d55a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	681a      	ldr	r2, [r3, #0]
 800d562:	4bb1      	ldr	r3, [pc, #708]	; (800d828 <UART_SetConfig+0x2f4>)
 800d564:	4013      	ands	r3, r2
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	6812      	ldr	r2, [r2, #0]
 800d56a:	6939      	ldr	r1, [r7, #16]
 800d56c:	430b      	orrs	r3, r1
 800d56e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	685b      	ldr	r3, [r3, #4]
 800d576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	68da      	ldr	r2, [r3, #12]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	430a      	orrs	r2, r1
 800d584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	699b      	ldr	r3, [r3, #24]
 800d58a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6a1b      	ldr	r3, [r3, #32]
 800d590:	693a      	ldr	r2, [r7, #16]
 800d592:	4313      	orrs	r3, r2
 800d594:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	689b      	ldr	r3, [r3, #8]
 800d59c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	693a      	ldr	r2, [r7, #16]
 800d5a6:	430a      	orrs	r2, r1
 800d5a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	4a9f      	ldr	r2, [pc, #636]	; (800d82c <UART_SetConfig+0x2f8>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d121      	bne.n	800d5f8 <UART_SetConfig+0xc4>
 800d5b4:	4b9e      	ldr	r3, [pc, #632]	; (800d830 <UART_SetConfig+0x2fc>)
 800d5b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5ba:	f003 0303 	and.w	r3, r3, #3
 800d5be:	2b03      	cmp	r3, #3
 800d5c0:	d816      	bhi.n	800d5f0 <UART_SetConfig+0xbc>
 800d5c2:	a201      	add	r2, pc, #4	; (adr r2, 800d5c8 <UART_SetConfig+0x94>)
 800d5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c8:	0800d5d9 	.word	0x0800d5d9
 800d5cc:	0800d5e5 	.word	0x0800d5e5
 800d5d0:	0800d5df 	.word	0x0800d5df
 800d5d4:	0800d5eb 	.word	0x0800d5eb
 800d5d8:	2301      	movs	r3, #1
 800d5da:	77fb      	strb	r3, [r7, #31]
 800d5dc:	e151      	b.n	800d882 <UART_SetConfig+0x34e>
 800d5de:	2302      	movs	r3, #2
 800d5e0:	77fb      	strb	r3, [r7, #31]
 800d5e2:	e14e      	b.n	800d882 <UART_SetConfig+0x34e>
 800d5e4:	2304      	movs	r3, #4
 800d5e6:	77fb      	strb	r3, [r7, #31]
 800d5e8:	e14b      	b.n	800d882 <UART_SetConfig+0x34e>
 800d5ea:	2308      	movs	r3, #8
 800d5ec:	77fb      	strb	r3, [r7, #31]
 800d5ee:	e148      	b.n	800d882 <UART_SetConfig+0x34e>
 800d5f0:	2310      	movs	r3, #16
 800d5f2:	77fb      	strb	r3, [r7, #31]
 800d5f4:	bf00      	nop
 800d5f6:	e144      	b.n	800d882 <UART_SetConfig+0x34e>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4a8d      	ldr	r2, [pc, #564]	; (800d834 <UART_SetConfig+0x300>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d134      	bne.n	800d66c <UART_SetConfig+0x138>
 800d602:	4b8b      	ldr	r3, [pc, #556]	; (800d830 <UART_SetConfig+0x2fc>)
 800d604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d608:	f003 030c 	and.w	r3, r3, #12
 800d60c:	2b0c      	cmp	r3, #12
 800d60e:	d829      	bhi.n	800d664 <UART_SetConfig+0x130>
 800d610:	a201      	add	r2, pc, #4	; (adr r2, 800d618 <UART_SetConfig+0xe4>)
 800d612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d616:	bf00      	nop
 800d618:	0800d64d 	.word	0x0800d64d
 800d61c:	0800d665 	.word	0x0800d665
 800d620:	0800d665 	.word	0x0800d665
 800d624:	0800d665 	.word	0x0800d665
 800d628:	0800d659 	.word	0x0800d659
 800d62c:	0800d665 	.word	0x0800d665
 800d630:	0800d665 	.word	0x0800d665
 800d634:	0800d665 	.word	0x0800d665
 800d638:	0800d653 	.word	0x0800d653
 800d63c:	0800d665 	.word	0x0800d665
 800d640:	0800d665 	.word	0x0800d665
 800d644:	0800d665 	.word	0x0800d665
 800d648:	0800d65f 	.word	0x0800d65f
 800d64c:	2300      	movs	r3, #0
 800d64e:	77fb      	strb	r3, [r7, #31]
 800d650:	e117      	b.n	800d882 <UART_SetConfig+0x34e>
 800d652:	2302      	movs	r3, #2
 800d654:	77fb      	strb	r3, [r7, #31]
 800d656:	e114      	b.n	800d882 <UART_SetConfig+0x34e>
 800d658:	2304      	movs	r3, #4
 800d65a:	77fb      	strb	r3, [r7, #31]
 800d65c:	e111      	b.n	800d882 <UART_SetConfig+0x34e>
 800d65e:	2308      	movs	r3, #8
 800d660:	77fb      	strb	r3, [r7, #31]
 800d662:	e10e      	b.n	800d882 <UART_SetConfig+0x34e>
 800d664:	2310      	movs	r3, #16
 800d666:	77fb      	strb	r3, [r7, #31]
 800d668:	bf00      	nop
 800d66a:	e10a      	b.n	800d882 <UART_SetConfig+0x34e>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4a71      	ldr	r2, [pc, #452]	; (800d838 <UART_SetConfig+0x304>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d120      	bne.n	800d6b8 <UART_SetConfig+0x184>
 800d676:	4b6e      	ldr	r3, [pc, #440]	; (800d830 <UART_SetConfig+0x2fc>)
 800d678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d67c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d680:	2b10      	cmp	r3, #16
 800d682:	d00f      	beq.n	800d6a4 <UART_SetConfig+0x170>
 800d684:	2b10      	cmp	r3, #16
 800d686:	d802      	bhi.n	800d68e <UART_SetConfig+0x15a>
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d005      	beq.n	800d698 <UART_SetConfig+0x164>
 800d68c:	e010      	b.n	800d6b0 <UART_SetConfig+0x17c>
 800d68e:	2b20      	cmp	r3, #32
 800d690:	d005      	beq.n	800d69e <UART_SetConfig+0x16a>
 800d692:	2b30      	cmp	r3, #48	; 0x30
 800d694:	d009      	beq.n	800d6aa <UART_SetConfig+0x176>
 800d696:	e00b      	b.n	800d6b0 <UART_SetConfig+0x17c>
 800d698:	2300      	movs	r3, #0
 800d69a:	77fb      	strb	r3, [r7, #31]
 800d69c:	e0f1      	b.n	800d882 <UART_SetConfig+0x34e>
 800d69e:	2302      	movs	r3, #2
 800d6a0:	77fb      	strb	r3, [r7, #31]
 800d6a2:	e0ee      	b.n	800d882 <UART_SetConfig+0x34e>
 800d6a4:	2304      	movs	r3, #4
 800d6a6:	77fb      	strb	r3, [r7, #31]
 800d6a8:	e0eb      	b.n	800d882 <UART_SetConfig+0x34e>
 800d6aa:	2308      	movs	r3, #8
 800d6ac:	77fb      	strb	r3, [r7, #31]
 800d6ae:	e0e8      	b.n	800d882 <UART_SetConfig+0x34e>
 800d6b0:	2310      	movs	r3, #16
 800d6b2:	77fb      	strb	r3, [r7, #31]
 800d6b4:	bf00      	nop
 800d6b6:	e0e4      	b.n	800d882 <UART_SetConfig+0x34e>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4a5f      	ldr	r2, [pc, #380]	; (800d83c <UART_SetConfig+0x308>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d120      	bne.n	800d704 <UART_SetConfig+0x1d0>
 800d6c2:	4b5b      	ldr	r3, [pc, #364]	; (800d830 <UART_SetConfig+0x2fc>)
 800d6c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d6cc:	2b40      	cmp	r3, #64	; 0x40
 800d6ce:	d00f      	beq.n	800d6f0 <UART_SetConfig+0x1bc>
 800d6d0:	2b40      	cmp	r3, #64	; 0x40
 800d6d2:	d802      	bhi.n	800d6da <UART_SetConfig+0x1a6>
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d005      	beq.n	800d6e4 <UART_SetConfig+0x1b0>
 800d6d8:	e010      	b.n	800d6fc <UART_SetConfig+0x1c8>
 800d6da:	2b80      	cmp	r3, #128	; 0x80
 800d6dc:	d005      	beq.n	800d6ea <UART_SetConfig+0x1b6>
 800d6de:	2bc0      	cmp	r3, #192	; 0xc0
 800d6e0:	d009      	beq.n	800d6f6 <UART_SetConfig+0x1c2>
 800d6e2:	e00b      	b.n	800d6fc <UART_SetConfig+0x1c8>
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	77fb      	strb	r3, [r7, #31]
 800d6e8:	e0cb      	b.n	800d882 <UART_SetConfig+0x34e>
 800d6ea:	2302      	movs	r3, #2
 800d6ec:	77fb      	strb	r3, [r7, #31]
 800d6ee:	e0c8      	b.n	800d882 <UART_SetConfig+0x34e>
 800d6f0:	2304      	movs	r3, #4
 800d6f2:	77fb      	strb	r3, [r7, #31]
 800d6f4:	e0c5      	b.n	800d882 <UART_SetConfig+0x34e>
 800d6f6:	2308      	movs	r3, #8
 800d6f8:	77fb      	strb	r3, [r7, #31]
 800d6fa:	e0c2      	b.n	800d882 <UART_SetConfig+0x34e>
 800d6fc:	2310      	movs	r3, #16
 800d6fe:	77fb      	strb	r3, [r7, #31]
 800d700:	bf00      	nop
 800d702:	e0be      	b.n	800d882 <UART_SetConfig+0x34e>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4a4d      	ldr	r2, [pc, #308]	; (800d840 <UART_SetConfig+0x30c>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d124      	bne.n	800d758 <UART_SetConfig+0x224>
 800d70e:	4b48      	ldr	r3, [pc, #288]	; (800d830 <UART_SetConfig+0x2fc>)
 800d710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d71c:	d012      	beq.n	800d744 <UART_SetConfig+0x210>
 800d71e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d722:	d802      	bhi.n	800d72a <UART_SetConfig+0x1f6>
 800d724:	2b00      	cmp	r3, #0
 800d726:	d007      	beq.n	800d738 <UART_SetConfig+0x204>
 800d728:	e012      	b.n	800d750 <UART_SetConfig+0x21c>
 800d72a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d72e:	d006      	beq.n	800d73e <UART_SetConfig+0x20a>
 800d730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d734:	d009      	beq.n	800d74a <UART_SetConfig+0x216>
 800d736:	e00b      	b.n	800d750 <UART_SetConfig+0x21c>
 800d738:	2300      	movs	r3, #0
 800d73a:	77fb      	strb	r3, [r7, #31]
 800d73c:	e0a1      	b.n	800d882 <UART_SetConfig+0x34e>
 800d73e:	2302      	movs	r3, #2
 800d740:	77fb      	strb	r3, [r7, #31]
 800d742:	e09e      	b.n	800d882 <UART_SetConfig+0x34e>
 800d744:	2304      	movs	r3, #4
 800d746:	77fb      	strb	r3, [r7, #31]
 800d748:	e09b      	b.n	800d882 <UART_SetConfig+0x34e>
 800d74a:	2308      	movs	r3, #8
 800d74c:	77fb      	strb	r3, [r7, #31]
 800d74e:	e098      	b.n	800d882 <UART_SetConfig+0x34e>
 800d750:	2310      	movs	r3, #16
 800d752:	77fb      	strb	r3, [r7, #31]
 800d754:	bf00      	nop
 800d756:	e094      	b.n	800d882 <UART_SetConfig+0x34e>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a39      	ldr	r2, [pc, #228]	; (800d844 <UART_SetConfig+0x310>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d124      	bne.n	800d7ac <UART_SetConfig+0x278>
 800d762:	4b33      	ldr	r3, [pc, #204]	; (800d830 <UART_SetConfig+0x2fc>)
 800d764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d768:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d76c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d770:	d012      	beq.n	800d798 <UART_SetConfig+0x264>
 800d772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d776:	d802      	bhi.n	800d77e <UART_SetConfig+0x24a>
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d007      	beq.n	800d78c <UART_SetConfig+0x258>
 800d77c:	e012      	b.n	800d7a4 <UART_SetConfig+0x270>
 800d77e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d782:	d006      	beq.n	800d792 <UART_SetConfig+0x25e>
 800d784:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d788:	d009      	beq.n	800d79e <UART_SetConfig+0x26a>
 800d78a:	e00b      	b.n	800d7a4 <UART_SetConfig+0x270>
 800d78c:	2301      	movs	r3, #1
 800d78e:	77fb      	strb	r3, [r7, #31]
 800d790:	e077      	b.n	800d882 <UART_SetConfig+0x34e>
 800d792:	2302      	movs	r3, #2
 800d794:	77fb      	strb	r3, [r7, #31]
 800d796:	e074      	b.n	800d882 <UART_SetConfig+0x34e>
 800d798:	2304      	movs	r3, #4
 800d79a:	77fb      	strb	r3, [r7, #31]
 800d79c:	e071      	b.n	800d882 <UART_SetConfig+0x34e>
 800d79e:	2308      	movs	r3, #8
 800d7a0:	77fb      	strb	r3, [r7, #31]
 800d7a2:	e06e      	b.n	800d882 <UART_SetConfig+0x34e>
 800d7a4:	2310      	movs	r3, #16
 800d7a6:	77fb      	strb	r3, [r7, #31]
 800d7a8:	bf00      	nop
 800d7aa:	e06a      	b.n	800d882 <UART_SetConfig+0x34e>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a25      	ldr	r2, [pc, #148]	; (800d848 <UART_SetConfig+0x314>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d124      	bne.n	800d800 <UART_SetConfig+0x2cc>
 800d7b6:	4b1e      	ldr	r3, [pc, #120]	; (800d830 <UART_SetConfig+0x2fc>)
 800d7b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7bc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d7c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7c4:	d012      	beq.n	800d7ec <UART_SetConfig+0x2b8>
 800d7c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7ca:	d802      	bhi.n	800d7d2 <UART_SetConfig+0x29e>
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d007      	beq.n	800d7e0 <UART_SetConfig+0x2ac>
 800d7d0:	e012      	b.n	800d7f8 <UART_SetConfig+0x2c4>
 800d7d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d7d6:	d006      	beq.n	800d7e6 <UART_SetConfig+0x2b2>
 800d7d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d7dc:	d009      	beq.n	800d7f2 <UART_SetConfig+0x2be>
 800d7de:	e00b      	b.n	800d7f8 <UART_SetConfig+0x2c4>
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	77fb      	strb	r3, [r7, #31]
 800d7e4:	e04d      	b.n	800d882 <UART_SetConfig+0x34e>
 800d7e6:	2302      	movs	r3, #2
 800d7e8:	77fb      	strb	r3, [r7, #31]
 800d7ea:	e04a      	b.n	800d882 <UART_SetConfig+0x34e>
 800d7ec:	2304      	movs	r3, #4
 800d7ee:	77fb      	strb	r3, [r7, #31]
 800d7f0:	e047      	b.n	800d882 <UART_SetConfig+0x34e>
 800d7f2:	2308      	movs	r3, #8
 800d7f4:	77fb      	strb	r3, [r7, #31]
 800d7f6:	e044      	b.n	800d882 <UART_SetConfig+0x34e>
 800d7f8:	2310      	movs	r3, #16
 800d7fa:	77fb      	strb	r3, [r7, #31]
 800d7fc:	bf00      	nop
 800d7fe:	e040      	b.n	800d882 <UART_SetConfig+0x34e>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4a11      	ldr	r2, [pc, #68]	; (800d84c <UART_SetConfig+0x318>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d139      	bne.n	800d87e <UART_SetConfig+0x34a>
 800d80a:	4b09      	ldr	r3, [pc, #36]	; (800d830 <UART_SetConfig+0x2fc>)
 800d80c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d818:	d027      	beq.n	800d86a <UART_SetConfig+0x336>
 800d81a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d81e:	d817      	bhi.n	800d850 <UART_SetConfig+0x31c>
 800d820:	2b00      	cmp	r3, #0
 800d822:	d01c      	beq.n	800d85e <UART_SetConfig+0x32a>
 800d824:	e027      	b.n	800d876 <UART_SetConfig+0x342>
 800d826:	bf00      	nop
 800d828:	efff69f3 	.word	0xefff69f3
 800d82c:	40011000 	.word	0x40011000
 800d830:	40023800 	.word	0x40023800
 800d834:	40004400 	.word	0x40004400
 800d838:	40004800 	.word	0x40004800
 800d83c:	40004c00 	.word	0x40004c00
 800d840:	40005000 	.word	0x40005000
 800d844:	40011400 	.word	0x40011400
 800d848:	40007800 	.word	0x40007800
 800d84c:	40007c00 	.word	0x40007c00
 800d850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d854:	d006      	beq.n	800d864 <UART_SetConfig+0x330>
 800d856:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d85a:	d009      	beq.n	800d870 <UART_SetConfig+0x33c>
 800d85c:	e00b      	b.n	800d876 <UART_SetConfig+0x342>
 800d85e:	2300      	movs	r3, #0
 800d860:	77fb      	strb	r3, [r7, #31]
 800d862:	e00e      	b.n	800d882 <UART_SetConfig+0x34e>
 800d864:	2302      	movs	r3, #2
 800d866:	77fb      	strb	r3, [r7, #31]
 800d868:	e00b      	b.n	800d882 <UART_SetConfig+0x34e>
 800d86a:	2304      	movs	r3, #4
 800d86c:	77fb      	strb	r3, [r7, #31]
 800d86e:	e008      	b.n	800d882 <UART_SetConfig+0x34e>
 800d870:	2308      	movs	r3, #8
 800d872:	77fb      	strb	r3, [r7, #31]
 800d874:	e005      	b.n	800d882 <UART_SetConfig+0x34e>
 800d876:	2310      	movs	r3, #16
 800d878:	77fb      	strb	r3, [r7, #31]
 800d87a:	bf00      	nop
 800d87c:	e001      	b.n	800d882 <UART_SetConfig+0x34e>
 800d87e:	2310      	movs	r3, #16
 800d880:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	69db      	ldr	r3, [r3, #28]
 800d886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d88a:	d17c      	bne.n	800d986 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800d88c:	7ffb      	ldrb	r3, [r7, #31]
 800d88e:	2b08      	cmp	r3, #8
 800d890:	d859      	bhi.n	800d946 <UART_SetConfig+0x412>
 800d892:	a201      	add	r2, pc, #4	; (adr r2, 800d898 <UART_SetConfig+0x364>)
 800d894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d898:	0800d8bd 	.word	0x0800d8bd
 800d89c:	0800d8db 	.word	0x0800d8db
 800d8a0:	0800d8f9 	.word	0x0800d8f9
 800d8a4:	0800d947 	.word	0x0800d947
 800d8a8:	0800d911 	.word	0x0800d911
 800d8ac:	0800d947 	.word	0x0800d947
 800d8b0:	0800d947 	.word	0x0800d947
 800d8b4:	0800d947 	.word	0x0800d947
 800d8b8:	0800d92f 	.word	0x0800d92f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800d8bc:	f7fb feb2 	bl	8009624 <HAL_RCC_GetPCLK1Freq>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	005a      	lsls	r2, r3, #1
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	085b      	lsrs	r3, r3, #1
 800d8ca:	441a      	add	r2, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	61bb      	str	r3, [r7, #24]
        break;
 800d8d8:	e038      	b.n	800d94c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800d8da:	f7fb feb7 	bl	800964c <HAL_RCC_GetPCLK2Freq>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	005a      	lsls	r2, r3, #1
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	685b      	ldr	r3, [r3, #4]
 800d8e6:	085b      	lsrs	r3, r3, #1
 800d8e8:	441a      	add	r2, r3
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	61bb      	str	r3, [r7, #24]
        break;
 800d8f6:	e029      	b.n	800d94c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	085a      	lsrs	r2, r3, #1
 800d8fe:	4b5d      	ldr	r3, [pc, #372]	; (800da74 <UART_SetConfig+0x540>)
 800d900:	4413      	add	r3, r2
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	6852      	ldr	r2, [r2, #4]
 800d906:	fbb3 f3f2 	udiv	r3, r3, r2
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	61bb      	str	r3, [r7, #24]
        break;
 800d90e:	e01d      	b.n	800d94c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800d910:	f7fb fdca 	bl	80094a8 <HAL_RCC_GetSysClockFreq>
 800d914:	4603      	mov	r3, r0
 800d916:	005a      	lsls	r2, r3, #1
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	085b      	lsrs	r3, r3, #1
 800d91e:	441a      	add	r2, r3
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	fbb2 f3f3 	udiv	r3, r2, r3
 800d928:	b29b      	uxth	r3, r3
 800d92a:	61bb      	str	r3, [r7, #24]
        break;
 800d92c:	e00e      	b.n	800d94c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	085b      	lsrs	r3, r3, #1
 800d934:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d940:	b29b      	uxth	r3, r3
 800d942:	61bb      	str	r3, [r7, #24]
        break;
 800d944:	e002      	b.n	800d94c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800d946:	2301      	movs	r3, #1
 800d948:	75fb      	strb	r3, [r7, #23]
        break;
 800d94a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	2b0f      	cmp	r3, #15
 800d950:	d916      	bls.n	800d980 <UART_SetConfig+0x44c>
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d958:	d212      	bcs.n	800d980 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d95a:	69bb      	ldr	r3, [r7, #24]
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	f023 030f 	bic.w	r3, r3, #15
 800d962:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d964:	69bb      	ldr	r3, [r7, #24]
 800d966:	085b      	lsrs	r3, r3, #1
 800d968:	b29b      	uxth	r3, r3
 800d96a:	f003 0307 	and.w	r3, r3, #7
 800d96e:	b29a      	uxth	r2, r3
 800d970:	89fb      	ldrh	r3, [r7, #14]
 800d972:	4313      	orrs	r3, r2
 800d974:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	89fa      	ldrh	r2, [r7, #14]
 800d97c:	60da      	str	r2, [r3, #12]
 800d97e:	e06e      	b.n	800da5e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800d980:	2301      	movs	r3, #1
 800d982:	75fb      	strb	r3, [r7, #23]
 800d984:	e06b      	b.n	800da5e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800d986:	7ffb      	ldrb	r3, [r7, #31]
 800d988:	2b08      	cmp	r3, #8
 800d98a:	d857      	bhi.n	800da3c <UART_SetConfig+0x508>
 800d98c:	a201      	add	r2, pc, #4	; (adr r2, 800d994 <UART_SetConfig+0x460>)
 800d98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d992:	bf00      	nop
 800d994:	0800d9b9 	.word	0x0800d9b9
 800d998:	0800d9d5 	.word	0x0800d9d5
 800d99c:	0800d9f1 	.word	0x0800d9f1
 800d9a0:	0800da3d 	.word	0x0800da3d
 800d9a4:	0800da09 	.word	0x0800da09
 800d9a8:	0800da3d 	.word	0x0800da3d
 800d9ac:	0800da3d 	.word	0x0800da3d
 800d9b0:	0800da3d 	.word	0x0800da3d
 800d9b4:	0800da25 	.word	0x0800da25
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800d9b8:	f7fb fe34 	bl	8009624 <HAL_RCC_GetPCLK1Freq>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	085b      	lsrs	r3, r3, #1
 800d9c4:	441a      	add	r2, r3
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	61bb      	str	r3, [r7, #24]
        break;
 800d9d2:	e036      	b.n	800da42 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800d9d4:	f7fb fe3a 	bl	800964c <HAL_RCC_GetPCLK2Freq>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	085b      	lsrs	r3, r3, #1
 800d9e0:	441a      	add	r2, r3
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	61bb      	str	r3, [r7, #24]
        break;
 800d9ee:	e028      	b.n	800da42 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	685b      	ldr	r3, [r3, #4]
 800d9f4:	085a      	lsrs	r2, r3, #1
 800d9f6:	4b20      	ldr	r3, [pc, #128]	; (800da78 <UART_SetConfig+0x544>)
 800d9f8:	4413      	add	r3, r2
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	6852      	ldr	r2, [r2, #4]
 800d9fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800da02:	b29b      	uxth	r3, r3
 800da04:	61bb      	str	r3, [r7, #24]
        break;
 800da06:	e01c      	b.n	800da42 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800da08:	f7fb fd4e 	bl	80094a8 <HAL_RCC_GetSysClockFreq>
 800da0c:	4602      	mov	r2, r0
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	085b      	lsrs	r3, r3, #1
 800da14:	441a      	add	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da1e:	b29b      	uxth	r3, r3
 800da20:	61bb      	str	r3, [r7, #24]
        break;
 800da22:	e00e      	b.n	800da42 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	685b      	ldr	r3, [r3, #4]
 800da28:	085b      	lsrs	r3, r3, #1
 800da2a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	fbb2 f3f3 	udiv	r3, r2, r3
 800da36:	b29b      	uxth	r3, r3
 800da38:	61bb      	str	r3, [r7, #24]
        break;
 800da3a:	e002      	b.n	800da42 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800da3c:	2301      	movs	r3, #1
 800da3e:	75fb      	strb	r3, [r7, #23]
        break;
 800da40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da42:	69bb      	ldr	r3, [r7, #24]
 800da44:	2b0f      	cmp	r3, #15
 800da46:	d908      	bls.n	800da5a <UART_SetConfig+0x526>
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da4e:	d204      	bcs.n	800da5a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	69ba      	ldr	r2, [r7, #24]
 800da56:	60da      	str	r2, [r3, #12]
 800da58:	e001      	b.n	800da5e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800da5a:	2301      	movs	r3, #1
 800da5c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2200      	movs	r2, #0
 800da62:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800da6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3720      	adds	r7, #32
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	01e84800 	.word	0x01e84800
 800da78:	00f42400 	.word	0x00f42400

0800da7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b083      	sub	sp, #12
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da88:	f003 0301 	and.w	r3, r3, #1
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d00a      	beq.n	800daa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	685b      	ldr	r3, [r3, #4]
 800da96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	430a      	orrs	r2, r1
 800daa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daaa:	f003 0302 	and.w	r3, r3, #2
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d00a      	beq.n	800dac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	430a      	orrs	r2, r1
 800dac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dacc:	f003 0304 	and.w	r3, r3, #4
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d00a      	beq.n	800daea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	430a      	orrs	r2, r1
 800dae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daee:	f003 0308 	and.w	r3, r3, #8
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d00a      	beq.n	800db0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	430a      	orrs	r2, r1
 800db0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db10:	f003 0310 	and.w	r3, r3, #16
 800db14:	2b00      	cmp	r3, #0
 800db16:	d00a      	beq.n	800db2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	430a      	orrs	r2, r1
 800db2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db32:	f003 0320 	and.w	r3, r3, #32
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00a      	beq.n	800db50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	689b      	ldr	r3, [r3, #8]
 800db40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	430a      	orrs	r2, r1
 800db4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d01a      	beq.n	800db92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	430a      	orrs	r2, r1
 800db70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db7a:	d10a      	bne.n	800db92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	430a      	orrs	r2, r1
 800db90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d00a      	beq.n	800dbb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	430a      	orrs	r2, r1
 800dbb2:	605a      	str	r2, [r3, #4]
  }
}
 800dbb4:	bf00      	nop
 800dbb6:	370c      	adds	r7, #12
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b086      	sub	sp, #24
 800dbc4:	af02      	add	r7, sp, #8
 800dbc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800dbce:	f7f5 ffff 	bl	8003bd0 <HAL_GetTick>
 800dbd2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f003 0308 	and.w	r3, r3, #8
 800dbde:	2b08      	cmp	r3, #8
 800dbe0:	d10e      	bne.n	800dc00 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dbe2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dbe6:	9300      	str	r3, [sp, #0]
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2200      	movs	r2, #0
 800dbec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 f814 	bl	800dc1e <UART_WaitOnFlagUntilTimeout>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d001      	beq.n	800dc00 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dbfc:	2303      	movs	r3, #3
 800dbfe:	e00a      	b.n	800dc16 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2220      	movs	r2, #32
 800dc04:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2220      	movs	r2, #32
 800dc0a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800dc14:	2300      	movs	r3, #0
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3710      	adds	r7, #16
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}

0800dc1e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800dc1e:	b580      	push	{r7, lr}
 800dc20:	b084      	sub	sp, #16
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	60f8      	str	r0, [r7, #12]
 800dc26:	60b9      	str	r1, [r7, #8]
 800dc28:	603b      	str	r3, [r7, #0]
 800dc2a:	4613      	mov	r3, r2
 800dc2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc2e:	e02a      	b.n	800dc86 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc30:	69bb      	ldr	r3, [r7, #24]
 800dc32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc36:	d026      	beq.n	800dc86 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc38:	f7f5 ffca 	bl	8003bd0 <HAL_GetTick>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	69ba      	ldr	r2, [r7, #24]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d302      	bcc.n	800dc4e <UART_WaitOnFlagUntilTimeout+0x30>
 800dc48:	69bb      	ldr	r3, [r7, #24]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d11b      	bne.n	800dc86 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	681a      	ldr	r2, [r3, #0]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dc5c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	689a      	ldr	r2, [r3, #8]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f022 0201 	bic.w	r2, r2, #1
 800dc6c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2220      	movs	r2, #32
 800dc72:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2220      	movs	r2, #32
 800dc78:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800dc82:	2303      	movs	r3, #3
 800dc84:	e00f      	b.n	800dca6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	69da      	ldr	r2, [r3, #28]
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	4013      	ands	r3, r2
 800dc90:	68ba      	ldr	r2, [r7, #8]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	bf0c      	ite	eq
 800dc96:	2301      	moveq	r3, #1
 800dc98:	2300      	movne	r3, #0
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	79fb      	ldrb	r3, [r7, #7]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d0c5      	beq.n	800dc30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800dca4:	2300      	movs	r3, #0
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3710      	adds	r7, #16
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}

0800dcae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dcae:	b480      	push	{r7}
 800dcb0:	b083      	sub	sp, #12
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800dcc4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	689a      	ldr	r2, [r3, #8]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f022 0201 	bic.w	r2, r2, #1
 800dcd4:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2220      	movs	r2, #32
 800dcda:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2200      	movs	r2, #0
 800dce0:	661a      	str	r2, [r3, #96]	; 0x60
}
 800dce2:	bf00      	nop
 800dce4:	370c      	adds	r7, #12
 800dce6:	46bd      	mov	sp, r7
 800dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcec:	4770      	bx	lr

0800dcee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dcee:	b580      	push	{r7, lr}
 800dcf0:	b084      	sub	sp, #16
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2200      	movs	r2, #0
 800dd08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd0c:	68f8      	ldr	r0, [r7, #12]
 800dd0e:	f7ff fc07 	bl	800d520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd12:	bf00      	nop
 800dd14:	3710      	adds	r7, #16
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}

0800dd1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dd1a:	b580      	push	{r7, lr}
 800dd1c:	b082      	sub	sp, #8
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd30:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2220      	movs	r2, #32
 800dd36:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f7ff fbe4 	bl	800d50c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd44:	bf00      	nop
 800dd46:	3708      	adds	r7, #8
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b084      	sub	sp, #16
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dd5a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd60:	2b22      	cmp	r3, #34	; 0x22
 800dd62:	d13a      	bne.n	800ddda <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd6a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dd6c:	89bb      	ldrh	r3, [r7, #12]
 800dd6e:	b2d9      	uxtb	r1, r3
 800dd70:	89fb      	ldrh	r3, [r7, #14]
 800dd72:	b2da      	uxtb	r2, r3
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd78:	400a      	ands	r2, r1
 800dd7a:	b2d2      	uxtb	r2, r2
 800dd7c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd82:	1c5a      	adds	r2, r3, #1
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	3b01      	subs	r3, #1
 800dd92:	b29a      	uxth	r2, r3
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d121      	bne.n	800ddea <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ddb4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	689a      	ldr	r2, [r3, #8]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	f022 0201 	bic.w	r2, r2, #1
 800ddc4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2220      	movs	r2, #32
 800ddca:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f7f3 fd78 	bl	80018c8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ddd8:	e007      	b.n	800ddea <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	699a      	ldr	r2, [r3, #24]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f042 0208 	orr.w	r2, r2, #8
 800dde8:	619a      	str	r2, [r3, #24]
}
 800ddea:	bf00      	nop
 800ddec:	3710      	adds	r7, #16
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}

0800ddf2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ddf2:	b580      	push	{r7, lr}
 800ddf4:	b084      	sub	sp, #16
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800de00:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de06:	2b22      	cmp	r3, #34	; 0x22
 800de08:	d13a      	bne.n	800de80 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de10:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de16:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800de18:	89ba      	ldrh	r2, [r7, #12]
 800de1a:	89fb      	ldrh	r3, [r7, #14]
 800de1c:	4013      	ands	r3, r2
 800de1e:	b29a      	uxth	r2, r3
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de28:	1c9a      	adds	r2, r3, #2
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800de34:	b29b      	uxth	r3, r3
 800de36:	3b01      	subs	r3, #1
 800de38:	b29a      	uxth	r2, r3
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800de46:	b29b      	uxth	r3, r3
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d121      	bne.n	800de90 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	681a      	ldr	r2, [r3, #0]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800de5a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	689a      	ldr	r2, [r3, #8]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f022 0201 	bic.w	r2, r2, #1
 800de6a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2220      	movs	r2, #32
 800de70:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2200      	movs	r2, #0
 800de76:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f7f3 fd25 	bl	80018c8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800de7e:	e007      	b.n	800de90 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	699a      	ldr	r2, [r3, #24]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f042 0208 	orr.w	r2, r2, #8
 800de8e:	619a      	str	r2, [r3, #24]
}
 800de90:	bf00      	nop
 800de92:	3710      	adds	r7, #16
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800de98:	b480      	push	{r7}
 800de9a:	b085      	sub	sp, #20
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800dea2:	2300      	movs	r3, #0
 800dea4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800dea6:	2300      	movs	r3, #0
 800dea8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d027      	beq.n	800df02 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800deb8:	68fa      	ldr	r2, [r7, #12]
 800deba:	4b2f      	ldr	r3, [pc, #188]	; (800df78 <FMC_SDRAM_Init+0xe0>)
 800debc:	4013      	ands	r3, r2
 800debe:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800dec8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800dece:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800ded4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800deda:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800dee0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800dee6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800deec:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800def2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800def4:	68fa      	ldr	r2, [r7, #12]
 800def6:	4313      	orrs	r3, r2
 800def8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	68fa      	ldr	r2, [r7, #12]
 800defe:	601a      	str	r2, [r3, #0]
 800df00:	e032      	b.n	800df68 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800df0e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800df18:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800df1e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800df20:	68fa      	ldr	r2, [r7, #12]
 800df22:	4313      	orrs	r3, r2
 800df24:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800df2c:	68ba      	ldr	r2, [r7, #8]
 800df2e:	4b12      	ldr	r3, [pc, #72]	; (800df78 <FMC_SDRAM_Init+0xe0>)
 800df30:	4013      	ands	r3, r2
 800df32:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800df3c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800df42:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800df48:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800df4e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800df54:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800df56:	68ba      	ldr	r2, [r7, #8]
 800df58:	4313      	orrs	r3, r2
 800df5a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	68fa      	ldr	r2, [r7, #12]
 800df60:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	68ba      	ldr	r2, [r7, #8]
 800df66:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800df68:	2300      	movs	r3, #0
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3714      	adds	r7, #20
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr
 800df76:	bf00      	nop
 800df78:	ffff8000 	.word	0xffff8000

0800df7c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b087      	sub	sp, #28
 800df80:	af00      	add	r7, sp, #0
 800df82:	60f8      	str	r0, [r7, #12]
 800df84:	60b9      	str	r1, [r7, #8]
 800df86:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800df88:	2300      	movs	r3, #0
 800df8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800df8c:	2300      	movs	r3, #0
 800df8e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2b01      	cmp	r3, #1
 800df94:	d02e      	beq.n	800dff4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	689b      	ldr	r3, [r3, #8]
 800df9a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dfa2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	3b01      	subs	r3, #1
 800dfb0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800dfb2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	689b      	ldr	r3, [r3, #8]
 800dfb8:	3b01      	subs	r3, #1
 800dfba:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800dfbc:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	68db      	ldr	r3, [r3, #12]
 800dfc2:	3b01      	subs	r3, #1
 800dfc4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800dfc6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	691b      	ldr	r3, [r3, #16]
 800dfcc:	3b01      	subs	r3, #1
 800dfce:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800dfd0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	695b      	ldr	r3, [r3, #20]
 800dfd6:	3b01      	subs	r3, #1
 800dfd8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800dfda:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	699b      	ldr	r3, [r3, #24]
 800dfe0:	3b01      	subs	r3, #1
 800dfe2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	697a      	ldr	r2, [r7, #20]
 800dfe8:	4313      	orrs	r3, r2
 800dfea:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	697a      	ldr	r2, [r7, #20]
 800dff0:	609a      	str	r2, [r3, #8]
 800dff2:	e039      	b.n	800e068 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	689b      	ldr	r3, [r3, #8]
 800dff8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800dffa:	697a      	ldr	r2, [r7, #20]
 800dffc:	4b1e      	ldr	r3, [pc, #120]	; (800e078 <FMC_SDRAM_Timing_Init+0xfc>)
 800dffe:	4013      	ands	r3, r2
 800e000:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	68db      	ldr	r3, [r3, #12]
 800e006:	3b01      	subs	r3, #1
 800e008:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	695b      	ldr	r3, [r3, #20]
 800e00e:	3b01      	subs	r3, #1
 800e010:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800e012:	4313      	orrs	r3, r2
 800e014:	697a      	ldr	r2, [r7, #20]
 800e016:	4313      	orrs	r3, r2
 800e018:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e026:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	3b01      	subs	r3, #1
 800e034:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e036:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	3b01      	subs	r3, #1
 800e03e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800e040:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	691b      	ldr	r3, [r3, #16]
 800e046:	3b01      	subs	r3, #1
 800e048:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800e04a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	699b      	ldr	r3, [r3, #24]
 800e050:	3b01      	subs	r3, #1
 800e052:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e054:	4313      	orrs	r3, r2
 800e056:	693a      	ldr	r2, [r7, #16]
 800e058:	4313      	orrs	r3, r2
 800e05a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	697a      	ldr	r2, [r7, #20]
 800e060:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	693a      	ldr	r2, [r7, #16]
 800e066:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800e068:	2300      	movs	r3, #0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	371c      	adds	r7, #28
 800e06e:	46bd      	mov	sp, r7
 800e070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e074:	4770      	bx	lr
 800e076:	bf00      	nop
 800e078:	ff0f0fff 	.word	0xff0f0fff

0800e07c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b087      	sub	sp, #28
 800e080:	af00      	add	r7, sp, #0
 800e082:	60f8      	str	r0, [r7, #12]
 800e084:	60b9      	str	r1, [r7, #8]
 800e086:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800e088:	2300      	movs	r3, #0
 800e08a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800e094:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	689b      	ldr	r3, [r3, #8]
 800e09a:	3b01      	subs	r3, #1
 800e09c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800e09e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	68db      	ldr	r3, [r3, #12]
 800e0a4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800e0a6:	4313      	orrs	r3, r2
 800e0a8:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800e0aa:	697a      	ldr	r2, [r7, #20]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800e0b0:	2300      	movs	r3, #0
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	371c      	adds	r7, #28
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0bc:	4770      	bx	lr

0800e0be <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800e0be:	b480      	push	{r7}
 800e0c0:	b083      	sub	sp, #12
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
 800e0c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	695a      	ldr	r2, [r3, #20]
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	005b      	lsls	r3, r3, #1
 800e0d0:	431a      	orrs	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800e0d6:	2300      	movs	r3, #0
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	370c      	adds	r7, #12
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr

0800e0e4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e0e4:	b084      	sub	sp, #16
 800e0e6:	b480      	push	{r7}
 800e0e8:	b085      	sub	sp, #20
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
 800e0ee:	f107 001c 	add.w	r0, r7, #28
 800e0f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e0fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e0fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e0fe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e102:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e104:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e106:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e10a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e10e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e110:	68fa      	ldr	r2, [r7, #12]
 800e112:	4313      	orrs	r3, r2
 800e114:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	685a      	ldr	r2, [r3, #4]
 800e11a:	4b07      	ldr	r3, [pc, #28]	; (800e138 <SDMMC_Init+0x54>)
 800e11c:	4013      	ands	r3, r2
 800e11e:	68fa      	ldr	r2, [r7, #12]
 800e120:	431a      	orrs	r2, r3
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e126:	2300      	movs	r3, #0
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3714      	adds	r7, #20
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	b004      	add	sp, #16
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	ffff8100 	.word	0xffff8100

0800e13c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b083      	sub	sp, #12
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	370c      	adds	r7, #12
 800e14e:	46bd      	mov	sp, r7
 800e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e154:	4770      	bx	lr

0800e156 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800e156:	b480      	push	{r7}
 800e158:	b083      	sub	sp, #12
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2203      	movs	r2, #3
 800e162:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800e164:	2300      	movs	r3, #0
}
 800e166:	4618      	mov	r0, r3
 800e168:	370c      	adds	r7, #12
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr

0800e172 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800e172:	b480      	push	{r7}
 800e174:	b083      	sub	sp, #12
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f003 0303 	and.w	r3, r3, #3
}
 800e182:	4618      	mov	r0, r3
 800e184:	370c      	adds	r7, #12
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr
	...

0800e190 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e190:	b480      	push	{r7}
 800e192:	b085      	sub	sp, #20
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e19a:	2300      	movs	r3, #0
 800e19c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e1ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e1b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e1ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e1bc:	68fa      	ldr	r2, [r7, #12]
 800e1be:	4313      	orrs	r3, r2
 800e1c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	68da      	ldr	r2, [r3, #12]
 800e1c6:	4b06      	ldr	r3, [pc, #24]	; (800e1e0 <SDMMC_SendCommand+0x50>)
 800e1c8:	4013      	ands	r3, r2
 800e1ca:	68fa      	ldr	r2, [r7, #12]
 800e1cc:	431a      	orrs	r2, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e1d2:	2300      	movs	r3, #0
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3714      	adds	r7, #20
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr
 800e1e0:	fffff000 	.word	0xfffff000

0800e1e4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b083      	sub	sp, #12
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	691b      	ldr	r3, [r3, #16]
 800e1f0:	b2db      	uxtb	r3, r3
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	370c      	adds	r7, #12
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fc:	4770      	bx	lr

0800e1fe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e1fe:	b480      	push	{r7}
 800e200:	b085      	sub	sp, #20
 800e202:	af00      	add	r7, sp, #0
 800e204:	6078      	str	r0, [r7, #4]
 800e206:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800e208:	2300      	movs	r3, #0
 800e20a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	3314      	adds	r3, #20
 800e210:	461a      	mov	r2, r3
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	4413      	add	r3, r2
 800e216:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
}  
 800e21c:	4618      	mov	r0, r3
 800e21e:	3714      	adds	r7, #20
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr

0800e228 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800e228:	b480      	push	{r7}
 800e22a:	b085      	sub	sp, #20
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e232:	2300      	movs	r3, #0
 800e234:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	681a      	ldr	r2, [r3, #0]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	685a      	ldr	r2, [r3, #4]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e24e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e254:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e25a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e25c:	68fa      	ldr	r2, [r7, #12]
 800e25e:	4313      	orrs	r3, r2
 800e260:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e266:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	431a      	orrs	r2, r3
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e272:	2300      	movs	r3, #0

}
 800e274:	4618      	mov	r0, r3
 800e276:	3714      	adds	r7, #20
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b088      	sub	sp, #32
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e28a:	2300      	movs	r3, #0
 800e28c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e292:	2310      	movs	r3, #16
 800e294:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e296:	2340      	movs	r3, #64	; 0x40
 800e298:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e29a:	2300      	movs	r3, #0
 800e29c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e29e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2a2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2a4:	f107 0308 	add.w	r3, r7, #8
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f7ff ff70 	bl	800e190 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e2b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2b4:	2110      	movs	r1, #16
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f000 fa64 	bl	800e784 <SDMMC_GetCmdResp1>
 800e2bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2be:	69fb      	ldr	r3, [r7, #28]
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3720      	adds	r7, #32
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b088      	sub	sp, #32
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e2da:	2311      	movs	r3, #17
 800e2dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2de:	2340      	movs	r3, #64	; 0x40
 800e2e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2ea:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2ec:	f107 0308 	add.w	r3, r7, #8
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f7ff ff4c 	bl	800e190 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e2f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2fc:	2111      	movs	r1, #17
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f000 fa40 	bl	800e784 <SDMMC_GetCmdResp1>
 800e304:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e306:	69fb      	ldr	r3, [r7, #28]
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3720      	adds	r7, #32
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b088      	sub	sp, #32
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e31a:	2300      	movs	r3, #0
 800e31c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e322:	2312      	movs	r3, #18
 800e324:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e326:	2340      	movs	r3, #64	; 0x40
 800e328:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e32a:	2300      	movs	r3, #0
 800e32c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e32e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e332:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e334:	f107 0308 	add.w	r3, r7, #8
 800e338:	4619      	mov	r1, r3
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f7ff ff28 	bl	800e190 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e340:	f241 3288 	movw	r2, #5000	; 0x1388
 800e344:	2112      	movs	r1, #18
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f000 fa1c 	bl	800e784 <SDMMC_GetCmdResp1>
 800e34c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e34e:	69fb      	ldr	r3, [r7, #28]
}
 800e350:	4618      	mov	r0, r3
 800e352:	3720      	adds	r7, #32
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b088      	sub	sp, #32
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e362:	2300      	movs	r3, #0
 800e364:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e36a:	2318      	movs	r3, #24
 800e36c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e36e:	2340      	movs	r3, #64	; 0x40
 800e370:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e372:	2300      	movs	r3, #0
 800e374:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e37a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e37c:	f107 0308 	add.w	r3, r7, #8
 800e380:	4619      	mov	r1, r3
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f7ff ff04 	bl	800e190 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e388:	f241 3288 	movw	r2, #5000	; 0x1388
 800e38c:	2118      	movs	r1, #24
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f000 f9f8 	bl	800e784 <SDMMC_GetCmdResp1>
 800e394:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e396:	69fb      	ldr	r3, [r7, #28]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3720      	adds	r7, #32
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b088      	sub	sp, #32
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e3b2:	2319      	movs	r3, #25
 800e3b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3b6:	2340      	movs	r3, #64	; 0x40
 800e3b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3c2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3c4:	f107 0308 	add.w	r3, r7, #8
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f7ff fee0 	bl	800e190 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e3d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3d4:	2119      	movs	r1, #25
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 f9d4 	bl	800e784 <SDMMC_GetCmdResp1>
 800e3dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3de:	69fb      	ldr	r3, [r7, #28]
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3720      	adds	r7, #32
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b088      	sub	sp, #32
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e3f8:	230c      	movs	r3, #12
 800e3fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3fc:	2340      	movs	r3, #64	; 0x40
 800e3fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e400:	2300      	movs	r3, #0
 800e402:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e408:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e40a:	f107 0308 	add.w	r3, r7, #8
 800e40e:	4619      	mov	r1, r3
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f7ff febd 	bl	800e190 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 800e416:	4a05      	ldr	r2, [pc, #20]	; (800e42c <SDMMC_CmdStopTransfer+0x44>)
 800e418:	210c      	movs	r1, #12
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f000 f9b2 	bl	800e784 <SDMMC_GetCmdResp1>
 800e420:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e422:	69fb      	ldr	r3, [r7, #28]
}
 800e424:	4618      	mov	r0, r3
 800e426:	3720      	adds	r7, #32
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	05f5e100 	.word	0x05f5e100

0800e430 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b08a      	sub	sp, #40	; 0x28
 800e434:	af00      	add	r7, sp, #0
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e43c:	2300      	movs	r3, #0
 800e43e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e444:	2307      	movs	r3, #7
 800e446:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e448:	2340      	movs	r3, #64	; 0x40
 800e44a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e44c:	2300      	movs	r3, #0
 800e44e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e454:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e456:	f107 0310 	add.w	r3, r7, #16
 800e45a:	4619      	mov	r1, r3
 800e45c:	68f8      	ldr	r0, [r7, #12]
 800e45e:	f7ff fe97 	bl	800e190 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e462:	f241 3288 	movw	r2, #5000	; 0x1388
 800e466:	2107      	movs	r1, #7
 800e468:	68f8      	ldr	r0, [r7, #12]
 800e46a:	f000 f98b 	bl	800e784 <SDMMC_GetCmdResp1>
 800e46e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e472:	4618      	mov	r0, r3
 800e474:	3728      	adds	r7, #40	; 0x28
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}

0800e47a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e47a:	b580      	push	{r7, lr}
 800e47c:	b088      	sub	sp, #32
 800e47e:	af00      	add	r7, sp, #0
 800e480:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e482:	2300      	movs	r3, #0
 800e484:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800e486:	2300      	movs	r3, #0
 800e488:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e48a:	2300      	movs	r3, #0
 800e48c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e48e:	2300      	movs	r3, #0
 800e490:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e492:	2300      	movs	r3, #0
 800e494:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e49a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e49c:	f107 0308 	add.w	r3, r7, #8
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f7ff fe74 	bl	800e190 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f000 f941 	bl	800e730 <SDMMC_GetCmdError>
 800e4ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4b0:	69fb      	ldr	r3, [r7, #28]
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3720      	adds	r7, #32
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}

0800e4ba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e4ba:	b580      	push	{r7, lr}
 800e4bc:	b088      	sub	sp, #32
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e4c6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e4ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e4cc:	2308      	movs	r3, #8
 800e4ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4d0:	2340      	movs	r3, #64	; 0x40
 800e4d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4dc:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4de:	f107 0308 	add.w	r3, r7, #8
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f7ff fe53 	bl	800e190 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f000 fb12 	bl	800eb14 <SDMMC_GetCmdResp7>
 800e4f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4f2:	69fb      	ldr	r3, [r7, #28]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3720      	adds	r7, #32
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b088      	sub	sp, #32
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e506:	2300      	movs	r3, #0
 800e508:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e50e:	2337      	movs	r3, #55	; 0x37
 800e510:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e512:	2340      	movs	r3, #64	; 0x40
 800e514:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e516:	2300      	movs	r3, #0
 800e518:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e51a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e51e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e520:	f107 0308 	add.w	r3, r7, #8
 800e524:	4619      	mov	r1, r3
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f7ff fe32 	bl	800e190 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e52c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e530:	2137      	movs	r1, #55	; 0x37
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f000 f926 	bl	800e784 <SDMMC_GetCmdResp1>
 800e538:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e53a:	69fb      	ldr	r3, [r7, #28]
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3720      	adds	r7, #32
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b088      	sub	sp, #32
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e54e:	2300      	movs	r3, #0
 800e550:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800e552:	683a      	ldr	r2, [r7, #0]
 800e554:	4b0d      	ldr	r3, [pc, #52]	; (800e58c <SDMMC_CmdAppOperCommand+0x48>)
 800e556:	4313      	orrs	r3, r2
 800e558:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e55a:	2329      	movs	r3, #41	; 0x29
 800e55c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e55e:	2340      	movs	r3, #64	; 0x40
 800e560:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e562:	2300      	movs	r3, #0
 800e564:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e56a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e56c:	f107 0308 	add.w	r3, r7, #8
 800e570:	4619      	mov	r1, r3
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f7ff fe0c 	bl	800e190 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 fa29 	bl	800e9d0 <SDMMC_GetCmdResp3>
 800e57e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e580:	69fb      	ldr	r3, [r7, #28]
}
 800e582:	4618      	mov	r0, r3
 800e584:	3720      	adds	r7, #32
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
 800e58a:	bf00      	nop
 800e58c:	80100000 	.word	0x80100000

0800e590 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b088      	sub	sp, #32
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e59a:	2300      	movs	r3, #0
 800e59c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e5a2:	2306      	movs	r3, #6
 800e5a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5a6:	2340      	movs	r3, #64	; 0x40
 800e5a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5b2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5b4:	f107 0308 	add.w	r3, r7, #8
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f7ff fde8 	bl	800e190 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e5c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5c4:	2106      	movs	r1, #6
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f000 f8dc 	bl	800e784 <SDMMC_GetCmdResp1>
 800e5cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5ce:	69fb      	ldr	r3, [r7, #28]
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3720      	adds	r7, #32
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b088      	sub	sp, #32
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e5e8:	2333      	movs	r3, #51	; 0x33
 800e5ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5ec:	2340      	movs	r3, #64	; 0x40
 800e5ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5f8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5fa:	f107 0308 	add.w	r3, r7, #8
 800e5fe:	4619      	mov	r1, r3
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f7ff fdc5 	bl	800e190 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e606:	f241 3288 	movw	r2, #5000	; 0x1388
 800e60a:	2133      	movs	r1, #51	; 0x33
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f000 f8b9 	bl	800e784 <SDMMC_GetCmdResp1>
 800e612:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e614:	69fb      	ldr	r3, [r7, #28]
}
 800e616:	4618      	mov	r0, r3
 800e618:	3720      	adds	r7, #32
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}

0800e61e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e61e:	b580      	push	{r7, lr}
 800e620:	b088      	sub	sp, #32
 800e622:	af00      	add	r7, sp, #0
 800e624:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e626:	2300      	movs	r3, #0
 800e628:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800e62a:	2300      	movs	r3, #0
 800e62c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e62e:	2302      	movs	r3, #2
 800e630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e632:	23c0      	movs	r3, #192	; 0xc0
 800e634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e636:	2300      	movs	r3, #0
 800e638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e63a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e63e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e640:	f107 0308 	add.w	r3, r7, #8
 800e644:	4619      	mov	r1, r3
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f7ff fda2 	bl	800e190 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f000 f97f 	bl	800e950 <SDMMC_GetCmdResp2>
 800e652:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e654:	69fb      	ldr	r3, [r7, #28]
}
 800e656:	4618      	mov	r0, r3
 800e658:	3720      	adds	r7, #32
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e65e:	b580      	push	{r7, lr}
 800e660:	b088      	sub	sp, #32
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
 800e666:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e668:	2300      	movs	r3, #0
 800e66a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e670:	2309      	movs	r3, #9
 800e672:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e674:	23c0      	movs	r3, #192	; 0xc0
 800e676:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e678:	2300      	movs	r3, #0
 800e67a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e67c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e680:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e682:	f107 0308 	add.w	r3, r7, #8
 800e686:	4619      	mov	r1, r3
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f7ff fd81 	bl	800e190 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f000 f95e 	bl	800e950 <SDMMC_GetCmdResp2>
 800e694:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e696:	69fb      	ldr	r3, [r7, #28]
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3720      	adds	r7, #32
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b088      	sub	sp, #32
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e6b2:	2303      	movs	r3, #3
 800e6b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6b6:	2340      	movs	r3, #64	; 0x40
 800e6b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6c2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6c4:	f107 0308 	add.w	r3, r7, #8
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f7ff fd60 	bl	800e190 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e6d0:	683a      	ldr	r2, [r7, #0]
 800e6d2:	2103      	movs	r1, #3
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 f9af 	bl	800ea38 <SDMMC_GetCmdResp6>
 800e6da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6dc:	69fb      	ldr	r3, [r7, #28]
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3720      	adds	r7, #32
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}

0800e6e6 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e6e6:	b580      	push	{r7, lr}
 800e6e8:	b088      	sub	sp, #32
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	6078      	str	r0, [r7, #4]
 800e6ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e6f8:	230d      	movs	r3, #13
 800e6fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6fc:	2340      	movs	r3, #64	; 0x40
 800e6fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e700:	2300      	movs	r3, #0
 800e702:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e708:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e70a:	f107 0308 	add.w	r3, r7, #8
 800e70e:	4619      	mov	r1, r3
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f7ff fd3d 	bl	800e190 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e716:	f241 3288 	movw	r2, #5000	; 0x1388
 800e71a:	210d      	movs	r1, #13
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f000 f831 	bl	800e784 <SDMMC_GetCmdResp1>
 800e722:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e724:	69fb      	ldr	r3, [r7, #28]
}
 800e726:	4618      	mov	r0, r3
 800e728:	3720      	adds	r7, #32
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}
	...

0800e730 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e730:	b490      	push	{r4, r7}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800e738:	4b10      	ldr	r3, [pc, #64]	; (800e77c <SDMMC_GetCmdError+0x4c>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	4a10      	ldr	r2, [pc, #64]	; (800e780 <SDMMC_GetCmdError+0x50>)
 800e73e:	fba2 2303 	umull	r2, r3, r2, r3
 800e742:	0a5b      	lsrs	r3, r3, #9
 800e744:	f241 3288 	movw	r2, #5000	; 0x1388
 800e748:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800e74c:	4623      	mov	r3, r4
 800e74e:	1e5c      	subs	r4, r3, #1
 800e750:	2b00      	cmp	r3, #0
 800e752:	d102      	bne.n	800e75a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e754:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e758:	e00a      	b.n	800e770 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e75e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e762:	2b00      	cmp	r3, #0
 800e764:	d0f2      	beq.n	800e74c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e76c:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e76e:	2300      	movs	r3, #0
}
 800e770:	4618      	mov	r0, r3
 800e772:	3708      	adds	r7, #8
 800e774:	46bd      	mov	sp, r7
 800e776:	bc90      	pop	{r4, r7}
 800e778:	4770      	bx	lr
 800e77a:	bf00      	nop
 800e77c:	20000000 	.word	0x20000000
 800e780:	10624dd3 	.word	0x10624dd3

0800e784 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e784:	b590      	push	{r4, r7, lr}
 800e786:	b087      	sub	sp, #28
 800e788:	af00      	add	r7, sp, #0
 800e78a:	60f8      	str	r0, [r7, #12]
 800e78c:	460b      	mov	r3, r1
 800e78e:	607a      	str	r2, [r7, #4]
 800e790:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800e792:	4b6c      	ldr	r3, [pc, #432]	; (800e944 <SDMMC_GetCmdResp1+0x1c0>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	4a6c      	ldr	r2, [pc, #432]	; (800e948 <SDMMC_GetCmdResp1+0x1c4>)
 800e798:	fba2 2303 	umull	r2, r3, r2, r3
 800e79c:	0a5b      	lsrs	r3, r3, #9
 800e79e:	687a      	ldr	r2, [r7, #4]
 800e7a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800e7a4:	4623      	mov	r3, r4
 800e7a6:	1e5c      	subs	r4, r3, #1
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d102      	bne.n	800e7b2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e7ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e7b0:	e0c3      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d0f2      	beq.n	800e7a4 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7c2:	f003 0304 	and.w	r3, r3, #4
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d004      	beq.n	800e7d4 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2204      	movs	r2, #4
 800e7ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7d0:	2304      	movs	r3, #4
 800e7d2:	e0b2      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7d8:	f003 0301 	and.w	r3, r3, #1
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d004      	beq.n	800e7ea <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	e0a7      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e7ea:	68f8      	ldr	r0, [r7, #12]
 800e7ec:	f7ff fcfa 	bl	800e1e4 <SDMMC_GetCommandResponse>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	7afb      	ldrb	r3, [r7, #11]
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d001      	beq.n	800e7fe <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	e09d      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e804:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e806:	2100      	movs	r1, #0
 800e808:	68f8      	ldr	r0, [r7, #12]
 800e80a:	f7ff fcf8 	bl	800e1fe <SDMMC_GetResponse>
 800e80e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e810:	697a      	ldr	r2, [r7, #20]
 800e812:	4b4e      	ldr	r3, [pc, #312]	; (800e94c <SDMMC_GetCmdResp1+0x1c8>)
 800e814:	4013      	ands	r3, r2
 800e816:	2b00      	cmp	r3, #0
 800e818:	d101      	bne.n	800e81e <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800e81a:	2300      	movs	r3, #0
 800e81c:	e08d      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	2b00      	cmp	r3, #0
 800e822:	da02      	bge.n	800e82a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e824:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e828:	e087      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e830:	2b00      	cmp	r3, #0
 800e832:	d001      	beq.n	800e838 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e834:	2340      	movs	r3, #64	; 0x40
 800e836:	e080      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d001      	beq.n	800e846 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e842:	2380      	movs	r3, #128	; 0x80
 800e844:	e079      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d002      	beq.n	800e856 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e850:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e854:	e071      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d002      	beq.n	800e866 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e860:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e864:	e069      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d002      	beq.n	800e876 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e874:	e061      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d002      	beq.n	800e886 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e880:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e884:	e059      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d002      	beq.n	800e896 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e894:	e051      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d002      	beq.n	800e8a6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e8a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e8a4:	e049      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d002      	beq.n	800e8b6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e8b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e8b4:	e041      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d002      	beq.n	800e8c6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800e8c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8c4:	e039      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d002      	beq.n	800e8d6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e8d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e8d4:	e031      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d002      	beq.n	800e8e6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e8e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e8e4:	e029      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d002      	beq.n	800e8f6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e8f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e8f4:	e021      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d002      	beq.n	800e906 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e900:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e904:	e019      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d002      	beq.n	800e916 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e910:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e914:	e011      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d002      	beq.n	800e926 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e920:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e924:	e009      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	f003 0308 	and.w	r3, r3, #8
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d002      	beq.n	800e936 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e930:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e934:	e001      	b.n	800e93a <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e936:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	371c      	adds	r7, #28
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd90      	pop	{r4, r7, pc}
 800e942:	bf00      	nop
 800e944:	20000000 	.word	0x20000000
 800e948:	10624dd3 	.word	0x10624dd3
 800e94c:	fdffe008 	.word	0xfdffe008

0800e950 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e950:	b490      	push	{r4, r7}
 800e952:	b082      	sub	sp, #8
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800e958:	4b1b      	ldr	r3, [pc, #108]	; (800e9c8 <SDMMC_GetCmdResp2+0x78>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	4a1b      	ldr	r2, [pc, #108]	; (800e9cc <SDMMC_GetCmdResp2+0x7c>)
 800e95e:	fba2 2303 	umull	r2, r3, r2, r3
 800e962:	0a5b      	lsrs	r3, r3, #9
 800e964:	f241 3288 	movw	r2, #5000	; 0x1388
 800e968:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800e96c:	4623      	mov	r3, r4
 800e96e:	1e5c      	subs	r4, r3, #1
 800e970:	2b00      	cmp	r3, #0
 800e972:	d102      	bne.n	800e97a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e974:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e978:	e020      	b.n	800e9bc <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e97e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e982:	2b00      	cmp	r3, #0
 800e984:	d0f2      	beq.n	800e96c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e98a:	f003 0304 	and.w	r3, r3, #4
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d004      	beq.n	800e99c <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2204      	movs	r2, #4
 800e996:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e998:	2304      	movs	r3, #4
 800e99a:	e00f      	b.n	800e9bc <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9a0:	f003 0301 	and.w	r3, r3, #1
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d004      	beq.n	800e9b2 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	e004      	b.n	800e9bc <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e9b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e9ba:	2300      	movs	r3, #0
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3708      	adds	r7, #8
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bc90      	pop	{r4, r7}
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop
 800e9c8:	20000000 	.word	0x20000000
 800e9cc:	10624dd3 	.word	0x10624dd3

0800e9d0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e9d0:	b490      	push	{r4, r7}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800e9d8:	4b15      	ldr	r3, [pc, #84]	; (800ea30 <SDMMC_GetCmdResp3+0x60>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4a15      	ldr	r2, [pc, #84]	; (800ea34 <SDMMC_GetCmdResp3+0x64>)
 800e9de:	fba2 2303 	umull	r2, r3, r2, r3
 800e9e2:	0a5b      	lsrs	r3, r3, #9
 800e9e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800e9ec:	4623      	mov	r3, r4
 800e9ee:	1e5c      	subs	r4, r3, #1
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d102      	bne.n	800e9fa <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e9f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e9f8:	e015      	b.n	800ea26 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d0f2      	beq.n	800e9ec <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea0a:	f003 0304 	and.w	r3, r3, #4
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d004      	beq.n	800ea1c <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2204      	movs	r2, #4
 800ea16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea18:	2304      	movs	r3, #4
 800ea1a:	e004      	b.n	800ea26 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ea22:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ea24:	2300      	movs	r3, #0
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3708      	adds	r7, #8
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bc90      	pop	{r4, r7}
 800ea2e:	4770      	bx	lr
 800ea30:	20000000 	.word	0x20000000
 800ea34:	10624dd3 	.word	0x10624dd3

0800ea38 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ea38:	b590      	push	{r4, r7, lr}
 800ea3a:	b087      	sub	sp, #28
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	460b      	mov	r3, r1
 800ea42:	607a      	str	r2, [r7, #4]
 800ea44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800ea46:	4b31      	ldr	r3, [pc, #196]	; (800eb0c <SDMMC_GetCmdResp6+0xd4>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	4a31      	ldr	r2, [pc, #196]	; (800eb10 <SDMMC_GetCmdResp6+0xd8>)
 800ea4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ea50:	0a5b      	lsrs	r3, r3, #9
 800ea52:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea56:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800ea5a:	4623      	mov	r3, r4
 800ea5c:	1e5c      	subs	r4, r3, #1
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d102      	bne.n	800ea68 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ea62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea66:	e04c      	b.n	800eb02 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea6c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d0f2      	beq.n	800ea5a <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea78:	f003 0304 	and.w	r3, r3, #4
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d004      	beq.n	800ea8a <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	2204      	movs	r2, #4
 800ea84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea86:	2304      	movs	r3, #4
 800ea88:	e03b      	b.n	800eb02 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea8e:	f003 0301 	and.w	r3, r3, #1
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d004      	beq.n	800eaa0 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2201      	movs	r2, #1
 800ea9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	e030      	b.n	800eb02 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800eaa0:	68f8      	ldr	r0, [r7, #12]
 800eaa2:	f7ff fb9f 	bl	800e1e4 <SDMMC_GetCommandResponse>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	461a      	mov	r2, r3
 800eaaa:	7afb      	ldrb	r3, [r7, #11]
 800eaac:	4293      	cmp	r3, r2
 800eaae:	d001      	beq.n	800eab4 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eab0:	2301      	movs	r3, #1
 800eab2:	e026      	b.n	800eb02 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800eaba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800eabc:	2100      	movs	r1, #0
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f7ff fb9d 	bl	800e1fe <SDMMC_GetResponse>
 800eac4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d106      	bne.n	800eade <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	0c1b      	lsrs	r3, r3, #16
 800ead4:	b29a      	uxth	r2, r3
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800eada:	2300      	movs	r3, #0
 800eadc:	e011      	b.n	800eb02 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d002      	beq.n	800eaee <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eaec:	e009      	b.n	800eb02 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d002      	beq.n	800eafe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800eaf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eafc:	e001      	b.n	800eb02 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eafe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	371c      	adds	r7, #28
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd90      	pop	{r4, r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	20000000 	.word	0x20000000
 800eb10:	10624dd3 	.word	0x10624dd3

0800eb14 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800eb14:	b490      	push	{r4, r7}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800eb1c:	4b18      	ldr	r3, [pc, #96]	; (800eb80 <SDMMC_GetCmdResp7+0x6c>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	4a18      	ldr	r2, [pc, #96]	; (800eb84 <SDMMC_GetCmdResp7+0x70>)
 800eb22:	fba2 2303 	umull	r2, r3, r2, r3
 800eb26:	0a5b      	lsrs	r3, r3, #9
 800eb28:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb2c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800eb30:	4623      	mov	r3, r4
 800eb32:	1e5c      	subs	r4, r3, #1
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d102      	bne.n	800eb3e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb3c:	e01a      	b.n	800eb74 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb42:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d0f2      	beq.n	800eb30 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb4e:	f003 0304 	and.w	r3, r3, #4
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d004      	beq.n	800eb60 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2240      	movs	r2, #64	; 0x40
 800eb5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb5c:	2304      	movs	r3, #4
 800eb5e:	e009      	b.n	800eb74 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d002      	beq.n	800eb72 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2240      	movs	r2, #64	; 0x40
 800eb70:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800eb72:	2300      	movs	r3, #0
  
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3708      	adds	r7, #8
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bc90      	pop	{r4, r7}
 800eb7c:	4770      	bx	lr
 800eb7e:	bf00      	nop
 800eb80:	20000000 	.word	0x20000000
 800eb84:	10624dd3 	.word	0x10624dd3

0800eb88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eb88:	b084      	sub	sp, #16
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	b084      	sub	sp, #16
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
 800eb92:	f107 001c 	add.w	r0, r7, #28
 800eb96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d120      	bne.n	800ebe2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eba4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	68da      	ldr	r2, [r3, #12]
 800ebb0:	4b20      	ldr	r3, [pc, #128]	; (800ec34 <USB_CoreInit+0xac>)
 800ebb2:	4013      	ands	r3, r2
 800ebb4:	687a      	ldr	r2, [r7, #4]
 800ebb6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	68db      	ldr	r3, [r3, #12]
 800ebbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ebc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebc6:	2b01      	cmp	r3, #1
 800ebc8:	d105      	bne.n	800ebd6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	68db      	ldr	r3, [r3, #12]
 800ebce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f000 f942 	bl	800ee60 <USB_CoreReset>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	73fb      	strb	r3, [r7, #15]
 800ebe0:	e010      	b.n	800ec04 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	68db      	ldr	r3, [r3, #12]
 800ebe6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 f936 	bl	800ee60 <USB_CoreReset>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebfc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800ec04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	d10b      	bne.n	800ec22 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	689b      	ldr	r3, [r3, #8]
 800ec0e:	f043 0206 	orr.w	r2, r3, #6
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	689b      	ldr	r3, [r3, #8]
 800ec1a:	f043 0220 	orr.w	r2, r3, #32
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ec22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3710      	adds	r7, #16
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ec2e:	b004      	add	sp, #16
 800ec30:	4770      	bx	lr
 800ec32:	bf00      	nop
 800ec34:	ffbdffbf 	.word	0xffbdffbf

0800ec38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b083      	sub	sp, #12
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	689b      	ldr	r3, [r3, #8]
 800ec44:	f043 0201 	orr.w	r2, r3, #1
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ec4c:	2300      	movs	r3, #0
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	370c      	adds	r7, #12
 800ec52:	46bd      	mov	sp, r7
 800ec54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec58:	4770      	bx	lr

0800ec5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ec5a:	b480      	push	{r7}
 800ec5c:	b083      	sub	sp, #12
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	689b      	ldr	r3, [r3, #8]
 800ec66:	f023 0201 	bic.w	r2, r3, #1
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ec6e:	2300      	movs	r3, #0
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	370c      	adds	r7, #12
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	460b      	mov	r3, r1
 800ec86:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ec94:	78fb      	ldrb	r3, [r7, #3]
 800ec96:	2b01      	cmp	r3, #1
 800ec98:	d106      	bne.n	800eca8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	68db      	ldr	r3, [r3, #12]
 800ec9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	60da      	str	r2, [r3, #12]
 800eca6:	e00b      	b.n	800ecc0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800eca8:	78fb      	ldrb	r3, [r7, #3]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d106      	bne.n	800ecbc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	68db      	ldr	r3, [r3, #12]
 800ecb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	60da      	str	r2, [r3, #12]
 800ecba:	e001      	b.n	800ecc0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	e003      	b.n	800ecc8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ecc0:	2032      	movs	r0, #50	; 0x32
 800ecc2:	f7f4 ff91 	bl	8003be8 <HAL_Delay>

  return HAL_OK;
 800ecc6:	2300      	movs	r3, #0
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3708      	adds	r7, #8
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b085      	sub	sp, #20
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	019b      	lsls	r3, r3, #6
 800ece2:	f043 0220 	orr.w	r2, r3, #32
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	3301      	adds	r3, #1
 800ecee:	60fb      	str	r3, [r7, #12]
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	4a09      	ldr	r2, [pc, #36]	; (800ed18 <USB_FlushTxFifo+0x48>)
 800ecf4:	4293      	cmp	r3, r2
 800ecf6:	d901      	bls.n	800ecfc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ecf8:	2303      	movs	r3, #3
 800ecfa:	e006      	b.n	800ed0a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	691b      	ldr	r3, [r3, #16]
 800ed00:	f003 0320 	and.w	r3, r3, #32
 800ed04:	2b20      	cmp	r3, #32
 800ed06:	d0f0      	beq.n	800ecea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ed08:	2300      	movs	r3, #0
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3714      	adds	r7, #20
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed14:	4770      	bx	lr
 800ed16:	bf00      	nop
 800ed18:	00030d40 	.word	0x00030d40

0800ed1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b085      	sub	sp, #20
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ed24:	2300      	movs	r3, #0
 800ed26:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2210      	movs	r2, #16
 800ed2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	3301      	adds	r3, #1
 800ed32:	60fb      	str	r3, [r7, #12]
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	4a09      	ldr	r2, [pc, #36]	; (800ed5c <USB_FlushRxFifo+0x40>)
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d901      	bls.n	800ed40 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ed3c:	2303      	movs	r3, #3
 800ed3e:	e006      	b.n	800ed4e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	691b      	ldr	r3, [r3, #16]
 800ed44:	f003 0310 	and.w	r3, r3, #16
 800ed48:	2b10      	cmp	r3, #16
 800ed4a:	d0f0      	beq.n	800ed2e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ed4c:	2300      	movs	r3, #0
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3714      	adds	r7, #20
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr
 800ed5a:	bf00      	nop
 800ed5c:	00030d40 	.word	0x00030d40

0800ed60 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b089      	sub	sp, #36	; 0x24
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	60b9      	str	r1, [r7, #8]
 800ed6a:	4611      	mov	r1, r2
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	460b      	mov	r3, r1
 800ed70:	71fb      	strb	r3, [r7, #7]
 800ed72:	4613      	mov	r3, r2
 800ed74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ed7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d11a      	bne.n	800edbc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ed86:	88bb      	ldrh	r3, [r7, #4]
 800ed88:	3303      	adds	r3, #3
 800ed8a:	089b      	lsrs	r3, r3, #2
 800ed8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ed8e:	2300      	movs	r3, #0
 800ed90:	61bb      	str	r3, [r7, #24]
 800ed92:	e00f      	b.n	800edb4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800ed94:	79fb      	ldrb	r3, [r7, #7]
 800ed96:	031a      	lsls	r2, r3, #12
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	4413      	add	r3, r2
 800ed9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eda0:	461a      	mov	r2, r3
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800eda8:	69fb      	ldr	r3, [r7, #28]
 800edaa:	3304      	adds	r3, #4
 800edac:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800edae:	69bb      	ldr	r3, [r7, #24]
 800edb0:	3301      	adds	r3, #1
 800edb2:	61bb      	str	r3, [r7, #24]
 800edb4:	69ba      	ldr	r2, [r7, #24]
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d3eb      	bcc.n	800ed94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800edbc:	2300      	movs	r3, #0
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3724      	adds	r7, #36	; 0x24
 800edc2:	46bd      	mov	sp, r7
 800edc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc8:	4770      	bx	lr

0800edca <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800edca:	b480      	push	{r7}
 800edcc:	b089      	sub	sp, #36	; 0x24
 800edce:	af00      	add	r7, sp, #0
 800edd0:	60f8      	str	r0, [r7, #12]
 800edd2:	60b9      	str	r1, [r7, #8]
 800edd4:	4613      	mov	r3, r2
 800edd6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ede0:	88fb      	ldrh	r3, [r7, #6]
 800ede2:	3303      	adds	r3, #3
 800ede4:	089b      	lsrs	r3, r3, #2
 800ede6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ede8:	2300      	movs	r3, #0
 800edea:	61bb      	str	r3, [r7, #24]
 800edec:	e00b      	b.n	800ee06 <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	69fb      	ldr	r3, [r7, #28]
 800edf8:	601a      	str	r2, [r3, #0]
    pDest++;
 800edfa:	69fb      	ldr	r3, [r7, #28]
 800edfc:	3304      	adds	r3, #4
 800edfe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ee00:	69bb      	ldr	r3, [r7, #24]
 800ee02:	3301      	adds	r3, #1
 800ee04:	61bb      	str	r3, [r7, #24]
 800ee06:	69ba      	ldr	r2, [r7, #24]
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d3ef      	bcc.n	800edee <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ee0e:	69fb      	ldr	r3, [r7, #28]
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3724      	adds	r7, #36	; 0x24
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr

0800ee1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b085      	sub	sp, #20
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	695b      	ldr	r3, [r3, #20]
 800ee28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	699b      	ldr	r3, [r3, #24]
 800ee2e:	68fa      	ldr	r2, [r7, #12]
 800ee30:	4013      	ands	r3, r2
 800ee32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ee34:	68fb      	ldr	r3, [r7, #12]
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3714      	adds	r7, #20
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee40:	4770      	bx	lr

0800ee42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ee42:	b480      	push	{r7}
 800ee44:	b083      	sub	sp, #12
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	695b      	ldr	r3, [r3, #20]
 800ee4e:	f003 0301 	and.w	r3, r3, #1
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	370c      	adds	r7, #12
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr
	...

0800ee60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b085      	sub	sp, #20
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	3301      	adds	r3, #1
 800ee70:	60fb      	str	r3, [r7, #12]
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	4a13      	ldr	r2, [pc, #76]	; (800eec4 <USB_CoreReset+0x64>)
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d901      	bls.n	800ee7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ee7a:	2303      	movs	r3, #3
 800ee7c:	e01b      	b.n	800eeb6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	691b      	ldr	r3, [r3, #16]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	daf2      	bge.n	800ee6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ee86:	2300      	movs	r3, #0
 800ee88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	691b      	ldr	r3, [r3, #16]
 800ee8e:	f043 0201 	orr.w	r2, r3, #1
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	60fb      	str	r3, [r7, #12]
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	4a09      	ldr	r2, [pc, #36]	; (800eec4 <USB_CoreReset+0x64>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d901      	bls.n	800eea8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800eea4:	2303      	movs	r3, #3
 800eea6:	e006      	b.n	800eeb6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	691b      	ldr	r3, [r3, #16]
 800eeac:	f003 0301 	and.w	r3, r3, #1
 800eeb0:	2b01      	cmp	r3, #1
 800eeb2:	d0f0      	beq.n	800ee96 <USB_CoreReset+0x36>

  return HAL_OK;
 800eeb4:	2300      	movs	r3, #0
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3714      	adds	r7, #20
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr
 800eec2:	bf00      	nop
 800eec4:	00030d40 	.word	0x00030d40

0800eec8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eec8:	b084      	sub	sp, #16
 800eeca:	b580      	push	{r7, lr}
 800eecc:	b084      	sub	sp, #16
 800eece:	af00      	add	r7, sp, #0
 800eed0:	6078      	str	r0, [r7, #4]
 800eed2:	f107 001c 	add.w	r0, r7, #28
 800eed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eee4:	461a      	mov	r2, r3
 800eee6:	2300      	movs	r3, #0
 800eee8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eefa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d018      	beq.n	800ef34 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800ef02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef04:	2b03      	cmp	r3, #3
 800ef06:	d10a      	bne.n	800ef1e <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	68ba      	ldr	r2, [r7, #8]
 800ef12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ef16:	f043 0304 	orr.w	r3, r3, #4
 800ef1a:	6013      	str	r3, [r2, #0]
 800ef1c:	e014      	b.n	800ef48 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	68ba      	ldr	r2, [r7, #8]
 800ef28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ef2c:	f023 0304 	bic.w	r3, r3, #4
 800ef30:	6013      	str	r3, [r2, #0]
 800ef32:	e009      	b.n	800ef48 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	68ba      	ldr	r2, [r7, #8]
 800ef3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ef42:	f023 0304 	bic.w	r3, r3, #4
 800ef46:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800ef48:	2110      	movs	r1, #16
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f7ff fec0 	bl	800ecd0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f7ff fee3 	bl	800ed1c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ef56:	2300      	movs	r3, #0
 800ef58:	60fb      	str	r3, [r7, #12]
 800ef5a:	e015      	b.n	800ef88 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	015a      	lsls	r2, r3, #5
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	4413      	add	r3, r2
 800ef64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ef68:	461a      	mov	r2, r3
 800ef6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef6e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	015a      	lsls	r2, r3, #5
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	4413      	add	r3, r2
 800ef78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	2300      	movs	r3, #0
 800ef80:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	3301      	adds	r3, #1
 800ef86:	60fb      	str	r3, [r7, #12]
 800ef88:	6a3b      	ldr	r3, [r7, #32]
 800ef8a:	68fa      	ldr	r2, [r7, #12]
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d3e5      	bcc.n	800ef5c <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800ef90:	2101      	movs	r1, #1
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f000 f8ac 	bl	800f0f0 <USB_DriveVbus>

  HAL_Delay(200U);
 800ef98:	20c8      	movs	r0, #200	; 0xc8
 800ef9a:	f7f4 fe25 	bl	8003be8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2200      	movs	r2, #0
 800efa2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f04f 32ff 	mov.w	r2, #4294967295
 800efaa:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d00b      	beq.n	800efd0 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efbe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	4a14      	ldr	r2, [pc, #80]	; (800f014 <USB_HostInit+0x14c>)
 800efc4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	4a13      	ldr	r2, [pc, #76]	; (800f018 <USB_HostInit+0x150>)
 800efca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800efce:	e009      	b.n	800efe4 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2280      	movs	r2, #128	; 0x80
 800efd4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	4a10      	ldr	r2, [pc, #64]	; (800f01c <USB_HostInit+0x154>)
 800efda:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	4a10      	ldr	r2, [pc, #64]	; (800f020 <USB_HostInit+0x158>)
 800efe0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800efe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d105      	bne.n	800eff6 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	699b      	ldr	r3, [r3, #24]
 800efee:	f043 0210 	orr.w	r2, r3, #16
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	699a      	ldr	r2, [r3, #24]
 800effa:	4b0a      	ldr	r3, [pc, #40]	; (800f024 <USB_HostInit+0x15c>)
 800effc:	4313      	orrs	r3, r2
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800f002:	2300      	movs	r3, #0
}
 800f004:	4618      	mov	r0, r3
 800f006:	3710      	adds	r7, #16
 800f008:	46bd      	mov	sp, r7
 800f00a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f00e:	b004      	add	sp, #16
 800f010:	4770      	bx	lr
 800f012:	bf00      	nop
 800f014:	01000200 	.word	0x01000200
 800f018:	00e00300 	.word	0x00e00300
 800f01c:	00600080 	.word	0x00600080
 800f020:	004000e0 	.word	0x004000e0
 800f024:	a3200008 	.word	0xa3200008

0800f028 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800f028:	b480      	push	{r7}
 800f02a:	b085      	sub	sp, #20
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	460b      	mov	r3, r1
 800f032:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	68fa      	ldr	r2, [r7, #12]
 800f042:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f046:	f023 0303 	bic.w	r3, r3, #3
 800f04a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f052:	681a      	ldr	r2, [r3, #0]
 800f054:	78fb      	ldrb	r3, [r7, #3]
 800f056:	f003 0303 	and.w	r3, r3, #3
 800f05a:	68f9      	ldr	r1, [r7, #12]
 800f05c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f060:	4313      	orrs	r3, r2
 800f062:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800f064:	78fb      	ldrb	r3, [r7, #3]
 800f066:	2b01      	cmp	r3, #1
 800f068:	d107      	bne.n	800f07a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f070:	461a      	mov	r2, r3
 800f072:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f076:	6053      	str	r3, [r2, #4]
 800f078:	e009      	b.n	800f08e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800f07a:	78fb      	ldrb	r3, [r7, #3]
 800f07c:	2b02      	cmp	r3, #2
 800f07e:	d106      	bne.n	800f08e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f086:	461a      	mov	r2, r3
 800f088:	f241 7370 	movw	r3, #6000	; 0x1770
 800f08c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800f08e:	2300      	movs	r3, #0
}
 800f090:	4618      	mov	r0, r3
 800f092:	3714      	adds	r7, #20
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr

0800f09c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800f0bc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	68fa      	ldr	r2, [r7, #12]
 800f0c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f0c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f0ca:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800f0cc:	2064      	movs	r0, #100	; 0x64
 800f0ce:	f7f4 fd8b 	bl	8003be8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	68fa      	ldr	r2, [r7, #12]
 800f0d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f0da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0de:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800f0e0:	200a      	movs	r0, #10
 800f0e2:	f7f4 fd81 	bl	8003be8 <HAL_Delay>

  return HAL_OK;
 800f0e6:	2300      	movs	r3, #0
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3710      	adds	r7, #16
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b085      	sub	sp, #20
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	460b      	mov	r3, r1
 800f0fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800f100:	2300      	movs	r3, #0
 800f102:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800f114:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d109      	bne.n	800f134 <USB_DriveVbus+0x44>
 800f120:	78fb      	ldrb	r3, [r7, #3]
 800f122:	2b01      	cmp	r3, #1
 800f124:	d106      	bne.n	800f134 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	68fa      	ldr	r2, [r7, #12]
 800f12a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f12e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f132:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f13a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f13e:	d109      	bne.n	800f154 <USB_DriveVbus+0x64>
 800f140:	78fb      	ldrb	r3, [r7, #3]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d106      	bne.n	800f154 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	68fa      	ldr	r2, [r7, #12]
 800f14a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f14e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f152:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800f154:	2300      	movs	r3, #0
}
 800f156:	4618      	mov	r0, r3
 800f158:	3714      	adds	r7, #20
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr

0800f162 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f162:	b480      	push	{r7}
 800f164:	b085      	sub	sp, #20
 800f166:	af00      	add	r7, sp, #0
 800f168:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800f16e:	2300      	movs	r3, #0
 800f170:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	0c5b      	lsrs	r3, r3, #17
 800f180:	f003 0303 	and.w	r3, r3, #3
}
 800f184:	4618      	mov	r0, r3
 800f186:	3714      	adds	r7, #20
 800f188:	46bd      	mov	sp, r7
 800f18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18e:	4770      	bx	lr

0800f190 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800f190:	b480      	push	{r7}
 800f192:	b085      	sub	sp, #20
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f1a2:	689b      	ldr	r3, [r3, #8]
 800f1a4:	b29b      	uxth	r3, r3
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3714      	adds	r7, #20
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr
	...

0800f1b4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b087      	sub	sp, #28
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	4608      	mov	r0, r1
 800f1be:	4611      	mov	r1, r2
 800f1c0:	461a      	mov	r2, r3
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	70fb      	strb	r3, [r7, #3]
 800f1c6:	460b      	mov	r3, r1
 800f1c8:	70bb      	strb	r3, [r7, #2]
 800f1ca:	4613      	mov	r3, r2
 800f1cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800f1d6:	78fb      	ldrb	r3, [r7, #3]
 800f1d8:	015a      	lsls	r2, r3, #5
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	4413      	add	r3, r2
 800f1de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f1e2:	461a      	mov	r2, r3
 800f1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f1e8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800f1ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f1ee:	2b03      	cmp	r3, #3
 800f1f0:	d87e      	bhi.n	800f2f0 <USB_HC_Init+0x13c>
 800f1f2:	a201      	add	r2, pc, #4	; (adr r2, 800f1f8 <USB_HC_Init+0x44>)
 800f1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1f8:	0800f209 	.word	0x0800f209
 800f1fc:	0800f2b3 	.word	0x0800f2b3
 800f200:	0800f209 	.word	0x0800f209
 800f204:	0800f275 	.word	0x0800f275
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f208:	78fb      	ldrb	r3, [r7, #3]
 800f20a:	015a      	lsls	r2, r3, #5
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	4413      	add	r3, r2
 800f210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f214:	461a      	mov	r2, r3
 800f216:	f240 439d 	movw	r3, #1181	; 0x49d
 800f21a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800f21c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f220:	2b00      	cmp	r3, #0
 800f222:	da10      	bge.n	800f246 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800f224:	78fb      	ldrb	r3, [r7, #3]
 800f226:	015a      	lsls	r2, r3, #5
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	4413      	add	r3, r2
 800f22c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f230:	68db      	ldr	r3, [r3, #12]
 800f232:	78fa      	ldrb	r2, [r7, #3]
 800f234:	0151      	lsls	r1, r2, #5
 800f236:	68ba      	ldr	r2, [r7, #8]
 800f238:	440a      	add	r2, r1
 800f23a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f23e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f242:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800f244:	e057      	b.n	800f2f6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f24a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d051      	beq.n	800f2f6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800f252:	78fb      	ldrb	r3, [r7, #3]
 800f254:	015a      	lsls	r2, r3, #5
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	4413      	add	r3, r2
 800f25a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f25e:	68db      	ldr	r3, [r3, #12]
 800f260:	78fa      	ldrb	r2, [r7, #3]
 800f262:	0151      	lsls	r1, r2, #5
 800f264:	68ba      	ldr	r2, [r7, #8]
 800f266:	440a      	add	r2, r1
 800f268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f26c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800f270:	60d3      	str	r3, [r2, #12]
      break;
 800f272:	e040      	b.n	800f2f6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f274:	78fb      	ldrb	r3, [r7, #3]
 800f276:	015a      	lsls	r2, r3, #5
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	4413      	add	r3, r2
 800f27c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f280:	461a      	mov	r2, r3
 800f282:	f240 639d 	movw	r3, #1693	; 0x69d
 800f286:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800f288:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	da34      	bge.n	800f2fa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800f290:	78fb      	ldrb	r3, [r7, #3]
 800f292:	015a      	lsls	r2, r3, #5
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	4413      	add	r3, r2
 800f298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f29c:	68db      	ldr	r3, [r3, #12]
 800f29e:	78fa      	ldrb	r2, [r7, #3]
 800f2a0:	0151      	lsls	r1, r2, #5
 800f2a2:	68ba      	ldr	r2, [r7, #8]
 800f2a4:	440a      	add	r2, r1
 800f2a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f2aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f2ae:	60d3      	str	r3, [r2, #12]
      }

      break;
 800f2b0:	e023      	b.n	800f2fa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f2b2:	78fb      	ldrb	r3, [r7, #3]
 800f2b4:	015a      	lsls	r2, r3, #5
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	4413      	add	r3, r2
 800f2ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f2be:	461a      	mov	r2, r3
 800f2c0:	f240 2325 	movw	r3, #549	; 0x225
 800f2c4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800f2c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	da17      	bge.n	800f2fe <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800f2ce:	78fb      	ldrb	r3, [r7, #3]
 800f2d0:	015a      	lsls	r2, r3, #5
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	4413      	add	r3, r2
 800f2d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f2da:	68db      	ldr	r3, [r3, #12]
 800f2dc:	78fa      	ldrb	r2, [r7, #3]
 800f2de:	0151      	lsls	r1, r2, #5
 800f2e0:	68ba      	ldr	r2, [r7, #8]
 800f2e2:	440a      	add	r2, r1
 800f2e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f2e8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800f2ec:	60d3      	str	r3, [r2, #12]
      }
      break;
 800f2ee:	e006      	b.n	800f2fe <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	75fb      	strb	r3, [r7, #23]
      break;
 800f2f4:	e004      	b.n	800f300 <USB_HC_Init+0x14c>
      break;
 800f2f6:	bf00      	nop
 800f2f8:	e002      	b.n	800f300 <USB_HC_Init+0x14c>
      break;
 800f2fa:	bf00      	nop
 800f2fc:	e000      	b.n	800f300 <USB_HC_Init+0x14c>
      break;
 800f2fe:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f306:	699a      	ldr	r2, [r3, #24]
 800f308:	78fb      	ldrb	r3, [r7, #3]
 800f30a:	f003 030f 	and.w	r3, r3, #15
 800f30e:	2101      	movs	r1, #1
 800f310:	fa01 f303 	lsl.w	r3, r1, r3
 800f314:	68b9      	ldr	r1, [r7, #8]
 800f316:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f31a:	4313      	orrs	r3, r2
 800f31c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	699b      	ldr	r3, [r3, #24]
 800f322:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800f32a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	da03      	bge.n	800f33a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800f332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f336:	613b      	str	r3, [r7, #16]
 800f338:	e001      	b.n	800f33e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800f33a:	2300      	movs	r3, #0
 800f33c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800f33e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f342:	2b02      	cmp	r3, #2
 800f344:	d103      	bne.n	800f34e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800f346:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f34a:	60fb      	str	r3, [r7, #12]
 800f34c:	e001      	b.n	800f352 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800f34e:	2300      	movs	r3, #0
 800f350:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f352:	787b      	ldrb	r3, [r7, #1]
 800f354:	059b      	lsls	r3, r3, #22
 800f356:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800f35a:	78bb      	ldrb	r3, [r7, #2]
 800f35c:	02db      	lsls	r3, r3, #11
 800f35e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f362:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800f364:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f368:	049b      	lsls	r3, r3, #18
 800f36a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800f36e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800f370:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f372:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800f376:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f37c:	78fb      	ldrb	r3, [r7, #3]
 800f37e:	0159      	lsls	r1, r3, #5
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	440b      	add	r3, r1
 800f384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f388:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f38e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800f390:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f394:	2b03      	cmp	r3, #3
 800f396:	d10f      	bne.n	800f3b8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800f398:	78fb      	ldrb	r3, [r7, #3]
 800f39a:	015a      	lsls	r2, r3, #5
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	4413      	add	r3, r2
 800f3a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	78fa      	ldrb	r2, [r7, #3]
 800f3a8:	0151      	lsls	r1, r2, #5
 800f3aa:	68ba      	ldr	r2, [r7, #8]
 800f3ac:	440a      	add	r2, r1
 800f3ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f3b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f3b6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800f3b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	371c      	adds	r7, #28
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c4:	4770      	bx	lr
 800f3c6:	bf00      	nop

0800f3c8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b08c      	sub	sp, #48	; 0x30
 800f3cc:	af02      	add	r7, sp, #8
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	4613      	mov	r3, r2
 800f3d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	785b      	ldrb	r3, [r3, #1]
 800f3de:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800f3e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f3e4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d028      	beq.n	800f444 <USB_HC_StartXfer+0x7c>
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	791b      	ldrb	r3, [r3, #4]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d124      	bne.n	800f444 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800f3fa:	79fb      	ldrb	r3, [r7, #7]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d10b      	bne.n	800f418 <USB_HC_StartXfer+0x50>
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	795b      	ldrb	r3, [r3, #5]
 800f404:	2b01      	cmp	r3, #1
 800f406:	d107      	bne.n	800f418 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	785b      	ldrb	r3, [r3, #1]
 800f40c:	4619      	mov	r1, r3
 800f40e:	68f8      	ldr	r0, [r7, #12]
 800f410:	f000 fa2e 	bl	800f870 <USB_DoPing>
      return HAL_OK;
 800f414:	2300      	movs	r3, #0
 800f416:	e112      	b.n	800f63e <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800f418:	79fb      	ldrb	r3, [r7, #7]
 800f41a:	2b01      	cmp	r3, #1
 800f41c:	d112      	bne.n	800f444 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	015a      	lsls	r2, r3, #5
 800f422:	6a3b      	ldr	r3, [r7, #32]
 800f424:	4413      	add	r3, r2
 800f426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f42a:	68db      	ldr	r3, [r3, #12]
 800f42c:	69fa      	ldr	r2, [r7, #28]
 800f42e:	0151      	lsls	r1, r2, #5
 800f430:	6a3a      	ldr	r2, [r7, #32]
 800f432:	440a      	add	r2, r1
 800f434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f438:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800f43c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	2200      	movs	r2, #0
 800f442:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	691b      	ldr	r3, [r3, #16]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d018      	beq.n	800f47e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	691b      	ldr	r3, [r3, #16]
 800f450:	68ba      	ldr	r2, [r7, #8]
 800f452:	8912      	ldrh	r2, [r2, #8]
 800f454:	4413      	add	r3, r2
 800f456:	3b01      	subs	r3, #1
 800f458:	68ba      	ldr	r2, [r7, #8]
 800f45a:	8912      	ldrh	r2, [r2, #8]
 800f45c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f460:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800f462:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f464:	8b7b      	ldrh	r3, [r7, #26]
 800f466:	429a      	cmp	r2, r3
 800f468:	d90b      	bls.n	800f482 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800f46a:	8b7b      	ldrh	r3, [r7, #26]
 800f46c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800f46e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f470:	68ba      	ldr	r2, [r7, #8]
 800f472:	8912      	ldrh	r2, [r2, #8]
 800f474:	fb02 f203 	mul.w	r2, r2, r3
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	611a      	str	r2, [r3, #16]
 800f47c:	e001      	b.n	800f482 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800f47e:	2301      	movs	r3, #1
 800f480:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	78db      	ldrb	r3, [r3, #3]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d006      	beq.n	800f498 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800f48a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f48c:	68ba      	ldr	r2, [r7, #8]
 800f48e:	8912      	ldrh	r2, [r2, #8]
 800f490:	fb02 f203 	mul.w	r2, r2, r3
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	691b      	ldr	r3, [r3, #16]
 800f49c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f4a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f4a2:	04d9      	lsls	r1, r3, #19
 800f4a4:	4b68      	ldr	r3, [pc, #416]	; (800f648 <USB_HC_StartXfer+0x280>)
 800f4a6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800f4a8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	7a9b      	ldrb	r3, [r3, #10]
 800f4ae:	075b      	lsls	r3, r3, #29
 800f4b0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800f4b4:	69f9      	ldr	r1, [r7, #28]
 800f4b6:	0148      	lsls	r0, r1, #5
 800f4b8:	6a39      	ldr	r1, [r7, #32]
 800f4ba:	4401      	add	r1, r0
 800f4bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f4c0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800f4c2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800f4c4:	79fb      	ldrb	r3, [r7, #7]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d009      	beq.n	800f4de <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	68d9      	ldr	r1, [r3, #12]
 800f4ce:	69fb      	ldr	r3, [r7, #28]
 800f4d0:	015a      	lsls	r2, r3, #5
 800f4d2:	6a3b      	ldr	r3, [r7, #32]
 800f4d4:	4413      	add	r3, r2
 800f4d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f4da:	460a      	mov	r2, r1
 800f4dc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800f4de:	6a3b      	ldr	r3, [r7, #32]
 800f4e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f4e4:	689b      	ldr	r3, [r3, #8]
 800f4e6:	f003 0301 	and.w	r3, r3, #1
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	bf0c      	ite	eq
 800f4ee:	2301      	moveq	r3, #1
 800f4f0:	2300      	movne	r3, #0
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800f4f6:	69fb      	ldr	r3, [r7, #28]
 800f4f8:	015a      	lsls	r2, r3, #5
 800f4fa:	6a3b      	ldr	r3, [r7, #32]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	69fa      	ldr	r2, [r7, #28]
 800f506:	0151      	lsls	r1, r2, #5
 800f508:	6a3a      	ldr	r2, [r7, #32]
 800f50a:	440a      	add	r2, r1
 800f50c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f510:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f514:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800f516:	69fb      	ldr	r3, [r7, #28]
 800f518:	015a      	lsls	r2, r3, #5
 800f51a:	6a3b      	ldr	r3, [r7, #32]
 800f51c:	4413      	add	r3, r2
 800f51e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	7e7b      	ldrb	r3, [r7, #25]
 800f526:	075b      	lsls	r3, r3, #29
 800f528:	69f9      	ldr	r1, [r7, #28]
 800f52a:	0148      	lsls	r0, r1, #5
 800f52c:	6a39      	ldr	r1, [r7, #32]
 800f52e:	4401      	add	r1, r0
 800f530:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800f534:	4313      	orrs	r3, r2
 800f536:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800f538:	69fb      	ldr	r3, [r7, #28]
 800f53a:	015a      	lsls	r2, r3, #5
 800f53c:	6a3b      	ldr	r3, [r7, #32]
 800f53e:	4413      	add	r3, r2
 800f540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	4a41      	ldr	r2, [pc, #260]	; (800f64c <USB_HC_StartXfer+0x284>)
 800f548:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f54a:	4b40      	ldr	r3, [pc, #256]	; (800f64c <USB_HC_StartXfer+0x284>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f552:	4a3e      	ldr	r2, [pc, #248]	; (800f64c <USB_HC_StartXfer+0x284>)
 800f554:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	78db      	ldrb	r3, [r3, #3]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d006      	beq.n	800f56c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800f55e:	4b3b      	ldr	r3, [pc, #236]	; (800f64c <USB_HC_StartXfer+0x284>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f566:	4a39      	ldr	r2, [pc, #228]	; (800f64c <USB_HC_StartXfer+0x284>)
 800f568:	6013      	str	r3, [r2, #0]
 800f56a:	e005      	b.n	800f578 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800f56c:	4b37      	ldr	r3, [pc, #220]	; (800f64c <USB_HC_StartXfer+0x284>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f574:	4a35      	ldr	r2, [pc, #212]	; (800f64c <USB_HC_StartXfer+0x284>)
 800f576:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f578:	4b34      	ldr	r3, [pc, #208]	; (800f64c <USB_HC_StartXfer+0x284>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f580:	4a32      	ldr	r2, [pc, #200]	; (800f64c <USB_HC_StartXfer+0x284>)
 800f582:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	015a      	lsls	r2, r3, #5
 800f588:	6a3b      	ldr	r3, [r7, #32]
 800f58a:	4413      	add	r3, r2
 800f58c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f590:	461a      	mov	r2, r3
 800f592:	4b2e      	ldr	r3, [pc, #184]	; (800f64c <USB_HC_StartXfer+0x284>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800f598:	79fb      	ldrb	r3, [r7, #7]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d14e      	bne.n	800f63c <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	78db      	ldrb	r3, [r3, #3]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d14a      	bne.n	800f63c <USB_HC_StartXfer+0x274>
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	691b      	ldr	r3, [r3, #16]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d046      	beq.n	800f63c <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	79db      	ldrb	r3, [r3, #7]
 800f5b2:	2b03      	cmp	r3, #3
 800f5b4:	d830      	bhi.n	800f618 <USB_HC_StartXfer+0x250>
 800f5b6:	a201      	add	r2, pc, #4	; (adr r2, 800f5bc <USB_HC_StartXfer+0x1f4>)
 800f5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5bc:	0800f5cd 	.word	0x0800f5cd
 800f5c0:	0800f5f1 	.word	0x0800f5f1
 800f5c4:	0800f5cd 	.word	0x0800f5cd
 800f5c8:	0800f5f1 	.word	0x0800f5f1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	691b      	ldr	r3, [r3, #16]
 800f5d0:	3303      	adds	r3, #3
 800f5d2:	089b      	lsrs	r3, r3, #2
 800f5d4:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800f5d6:	8afa      	ldrh	r2, [r7, #22]
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d91c      	bls.n	800f61c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	699b      	ldr	r3, [r3, #24]
 800f5e6:	f043 0220 	orr.w	r2, r3, #32
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	619a      	str	r2, [r3, #24]
          }
          break;
 800f5ee:	e015      	b.n	800f61c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	691b      	ldr	r3, [r3, #16]
 800f5f4:	3303      	adds	r3, #3
 800f5f6:	089b      	lsrs	r3, r3, #2
 800f5f8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800f5fa:	8afa      	ldrh	r2, [r7, #22]
 800f5fc:	6a3b      	ldr	r3, [r7, #32]
 800f5fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f602:	691b      	ldr	r3, [r3, #16]
 800f604:	b29b      	uxth	r3, r3
 800f606:	429a      	cmp	r2, r3
 800f608:	d90a      	bls.n	800f620 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	699b      	ldr	r3, [r3, #24]
 800f60e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	619a      	str	r2, [r3, #24]
          }
          break;
 800f616:	e003      	b.n	800f620 <USB_HC_StartXfer+0x258>

        default:
          break;
 800f618:	bf00      	nop
 800f61a:	e002      	b.n	800f622 <USB_HC_StartXfer+0x25a>
          break;
 800f61c:	bf00      	nop
 800f61e:	e000      	b.n	800f622 <USB_HC_StartXfer+0x25a>
          break;
 800f620:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	68d9      	ldr	r1, [r3, #12]
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	785a      	ldrb	r2, [r3, #1]
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	691b      	ldr	r3, [r3, #16]
 800f62e:	b298      	uxth	r0, r3
 800f630:	2300      	movs	r3, #0
 800f632:	9300      	str	r3, [sp, #0]
 800f634:	4603      	mov	r3, r0
 800f636:	68f8      	ldr	r0, [r7, #12]
 800f638:	f7ff fb92 	bl	800ed60 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800f63c:	2300      	movs	r3, #0
}
 800f63e:	4618      	mov	r0, r3
 800f640:	3728      	adds	r7, #40	; 0x28
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}
 800f646:	bf00      	nop
 800f648:	1ff80000 	.word	0x1ff80000
 800f64c:	200009bc 	.word	0x200009bc

0800f650 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f650:	b480      	push	{r7}
 800f652:	b085      	sub	sp, #20
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f662:	695b      	ldr	r3, [r3, #20]
 800f664:	b29b      	uxth	r3, r3
}
 800f666:	4618      	mov	r0, r3
 800f668:	3714      	adds	r7, #20
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr

0800f672 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800f672:	b480      	push	{r7}
 800f674:	b087      	sub	sp, #28
 800f676:	af00      	add	r7, sp, #0
 800f678:	6078      	str	r0, [r7, #4]
 800f67a:	460b      	mov	r3, r1
 800f67c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800f682:	78fb      	ldrb	r3, [r7, #3]
 800f684:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800f686:	2300      	movs	r3, #0
 800f688:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	015a      	lsls	r2, r3, #5
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	4413      	add	r3, r2
 800f692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	0c9b      	lsrs	r3, r3, #18
 800f69a:	f003 0303 	and.w	r3, r3, #3
 800f69e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d002      	beq.n	800f6ac <USB_HC_Halt+0x3a>
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	2b02      	cmp	r3, #2
 800f6aa:	d16c      	bne.n	800f786 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	015a      	lsls	r2, r3, #5
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	68fa      	ldr	r2, [r7, #12]
 800f6bc:	0151      	lsls	r1, r2, #5
 800f6be:	693a      	ldr	r2, [r7, #16]
 800f6c0:	440a      	add	r2, r1
 800f6c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f6c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f6ca:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d143      	bne.n	800f760 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	015a      	lsls	r2, r3, #5
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	4413      	add	r3, r2
 800f6e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	68fa      	ldr	r2, [r7, #12]
 800f6e8:	0151      	lsls	r1, r2, #5
 800f6ea:	693a      	ldr	r2, [r7, #16]
 800f6ec:	440a      	add	r2, r1
 800f6ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f6f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f6f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	015a      	lsls	r2, r3, #5
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	4413      	add	r3, r2
 800f700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	68fa      	ldr	r2, [r7, #12]
 800f708:	0151      	lsls	r1, r2, #5
 800f70a:	693a      	ldr	r2, [r7, #16]
 800f70c:	440a      	add	r2, r1
 800f70e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f716:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	015a      	lsls	r2, r3, #5
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	4413      	add	r3, r2
 800f720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	68fa      	ldr	r2, [r7, #12]
 800f728:	0151      	lsls	r1, r2, #5
 800f72a:	693a      	ldr	r2, [r7, #16]
 800f72c:	440a      	add	r2, r1
 800f72e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f732:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f736:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	3301      	adds	r3, #1
 800f73c:	617b      	str	r3, [r7, #20]
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f744:	d81d      	bhi.n	800f782 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	015a      	lsls	r2, r3, #5
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	4413      	add	r3, r2
 800f74e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f758:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f75c:	d0ec      	beq.n	800f738 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800f75e:	e080      	b.n	800f862 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	015a      	lsls	r2, r3, #5
 800f764:	693b      	ldr	r3, [r7, #16]
 800f766:	4413      	add	r3, r2
 800f768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	68fa      	ldr	r2, [r7, #12]
 800f770:	0151      	lsls	r1, r2, #5
 800f772:	693a      	ldr	r2, [r7, #16]
 800f774:	440a      	add	r2, r1
 800f776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f77a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f77e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800f780:	e06f      	b.n	800f862 <USB_HC_Halt+0x1f0>
          break;
 800f782:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800f784:	e06d      	b.n	800f862 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	015a      	lsls	r2, r3, #5
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	4413      	add	r3, r2
 800f78e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	68fa      	ldr	r2, [r7, #12]
 800f796:	0151      	lsls	r1, r2, #5
 800f798:	693a      	ldr	r2, [r7, #16]
 800f79a:	440a      	add	r2, r1
 800f79c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f7a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f7a4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f7ac:	691b      	ldr	r3, [r3, #16]
 800f7ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d143      	bne.n	800f83e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	015a      	lsls	r2, r3, #5
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	4413      	add	r3, r2
 800f7be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	68fa      	ldr	r2, [r7, #12]
 800f7c6:	0151      	lsls	r1, r2, #5
 800f7c8:	693a      	ldr	r2, [r7, #16]
 800f7ca:	440a      	add	r2, r1
 800f7cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f7d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f7d4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	015a      	lsls	r2, r3, #5
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	4413      	add	r3, r2
 800f7de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	68fa      	ldr	r2, [r7, #12]
 800f7e6:	0151      	lsls	r1, r2, #5
 800f7e8:	693a      	ldr	r2, [r7, #16]
 800f7ea:	440a      	add	r2, r1
 800f7ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f7f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f7f4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	015a      	lsls	r2, r3, #5
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	68fa      	ldr	r2, [r7, #12]
 800f806:	0151      	lsls	r1, r2, #5
 800f808:	693a      	ldr	r2, [r7, #16]
 800f80a:	440a      	add	r2, r1
 800f80c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f810:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f814:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	3301      	adds	r3, #1
 800f81a:	617b      	str	r3, [r7, #20]
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f822:	d81d      	bhi.n	800f860 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	015a      	lsls	r2, r3, #5
 800f828:	693b      	ldr	r3, [r7, #16]
 800f82a:	4413      	add	r3, r2
 800f82c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f83a:	d0ec      	beq.n	800f816 <USB_HC_Halt+0x1a4>
 800f83c:	e011      	b.n	800f862 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	015a      	lsls	r2, r3, #5
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	4413      	add	r3, r2
 800f846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	68fa      	ldr	r2, [r7, #12]
 800f84e:	0151      	lsls	r1, r2, #5
 800f850:	693a      	ldr	r2, [r7, #16]
 800f852:	440a      	add	r2, r1
 800f854:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f858:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f85c:	6013      	str	r3, [r2, #0]
 800f85e:	e000      	b.n	800f862 <USB_HC_Halt+0x1f0>
          break;
 800f860:	bf00      	nop
    }
  }

  return HAL_OK;
 800f862:	2300      	movs	r3, #0
}
 800f864:	4618      	mov	r0, r3
 800f866:	371c      	adds	r7, #28
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr

0800f870 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800f870:	b480      	push	{r7}
 800f872:	b087      	sub	sp, #28
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	460b      	mov	r3, r1
 800f87a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800f880:	78fb      	ldrb	r3, [r7, #3]
 800f882:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800f884:	2301      	movs	r3, #1
 800f886:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	04da      	lsls	r2, r3, #19
 800f88c:	4b15      	ldr	r3, [pc, #84]	; (800f8e4 <USB_DoPing+0x74>)
 800f88e:	4013      	ands	r3, r2
 800f890:	693a      	ldr	r2, [r7, #16]
 800f892:	0151      	lsls	r1, r2, #5
 800f894:	697a      	ldr	r2, [r7, #20]
 800f896:	440a      	add	r2, r1
 800f898:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f89c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f8a0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	015a      	lsls	r2, r3, #5
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	4413      	add	r3, r2
 800f8aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f8b8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f8c0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	015a      	lsls	r2, r3, #5
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	4413      	add	r3, r2
 800f8ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800f8d4:	2300      	movs	r3, #0
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	371c      	adds	r7, #28
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e0:	4770      	bx	lr
 800f8e2:	bf00      	nop
 800f8e4:	1ff80000 	.word	0x1ff80000

0800f8e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b086      	sub	sp, #24
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f7ff f9ae 	bl	800ec5a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800f8fe:	2110      	movs	r1, #16
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f7ff f9e5 	bl	800ecd0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f7ff fa08 	bl	800ed1c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800f90c:	2300      	movs	r3, #0
 800f90e:	613b      	str	r3, [r7, #16]
 800f910:	e01f      	b.n	800f952 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800f912:	693b      	ldr	r3, [r7, #16]
 800f914:	015a      	lsls	r2, r3, #5
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	4413      	add	r3, r2
 800f91a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f928:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f930:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f938:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	015a      	lsls	r2, r3, #5
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	4413      	add	r3, r2
 800f942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f946:	461a      	mov	r2, r3
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	3301      	adds	r3, #1
 800f950:	613b      	str	r3, [r7, #16]
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	2b0f      	cmp	r3, #15
 800f956:	d9dc      	bls.n	800f912 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800f958:	2300      	movs	r3, #0
 800f95a:	613b      	str	r3, [r7, #16]
 800f95c:	e034      	b.n	800f9c8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800f95e:	693b      	ldr	r3, [r7, #16]
 800f960:	015a      	lsls	r2, r3, #5
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	4413      	add	r3, r2
 800f966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f974:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f97c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f984:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	015a      	lsls	r2, r3, #5
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	4413      	add	r3, r2
 800f98e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f992:	461a      	mov	r2, r3
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	3301      	adds	r3, #1
 800f99c:	617b      	str	r3, [r7, #20]
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f9a4:	d80c      	bhi.n	800f9c0 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	015a      	lsls	r2, r3, #5
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	4413      	add	r3, r2
 800f9ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f9b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f9bc:	d0ec      	beq.n	800f998 <USB_StopHost+0xb0>
 800f9be:	e000      	b.n	800f9c2 <USB_StopHost+0xda>
        break;
 800f9c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	3301      	adds	r3, #1
 800f9c6:	613b      	str	r3, [r7, #16]
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	2b0f      	cmp	r3, #15
 800f9cc:	d9c7      	bls.n	800f95e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800f9da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f04f 32ff 	mov.w	r2, #4294967295
 800f9e2:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7ff f927 	bl	800ec38 <USB_EnableGlobalInt>

  return HAL_OK;
 800f9ea:	2300      	movs	r3, #0
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3718      	adds	r7, #24
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f9f8:	4904      	ldr	r1, [pc, #16]	; (800fa0c <MX_FATFS_Init+0x18>)
 800f9fa:	4805      	ldr	r0, [pc, #20]	; (800fa10 <MX_FATFS_Init+0x1c>)
 800f9fc:	f008 fda8 	bl	8018550 <FATFS_LinkDriver>
 800fa00:	4603      	mov	r3, r0
 800fa02:	461a      	mov	r2, r3
 800fa04:	4b03      	ldr	r3, [pc, #12]	; (800fa14 <MX_FATFS_Init+0x20>)
 800fa06:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800fa08:	bf00      	nop
 800fa0a:	bd80      	pop	{r7, pc}
 800fa0c:	2000d5c4 	.word	0x2000d5c4
 800fa10:	0802ca60 	.word	0x0802ca60
 800fa14:	2000d5c8 	.word	0x2000d5c8

0800fa18 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fa22:	f000 f87b 	bl	800fb1c <BSP_SD_IsDetected>
 800fa26:	4603      	mov	r3, r0
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d001      	beq.n	800fa30 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fa2c:	2302      	movs	r3, #2
 800fa2e:	e012      	b.n	800fa56 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fa30:	480b      	ldr	r0, [pc, #44]	; (800fa60 <BSP_SD_Init+0x48>)
 800fa32:	f7fb f8dd 	bl	800abf0 <HAL_SD_Init>
 800fa36:	4603      	mov	r3, r0
 800fa38:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800fa3a:	79fb      	ldrb	r3, [r7, #7]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d109      	bne.n	800fa54 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800fa40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fa44:	4806      	ldr	r0, [pc, #24]	; (800fa60 <BSP_SD_Init+0x48>)
 800fa46:	f7fb fd5d 	bl	800b504 <HAL_SD_ConfigWideBusOperation>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d001      	beq.n	800fa54 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800fa50:	2301      	movs	r3, #1
 800fa52:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800fa54:	79fb      	ldrb	r3, [r7, #7]
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3708      	adds	r7, #8
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}
 800fa5e:	bf00      	nop
 800fa60:	20000618 	.word	0x20000618

0800fa64 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b086      	sub	sp, #24
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	60f8      	str	r0, [r7, #12]
 800fa6c:	60b9      	str	r1, [r7, #8]
 800fa6e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fa70:	2300      	movs	r3, #0
 800fa72:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	68ba      	ldr	r2, [r7, #8]
 800fa78:	68f9      	ldr	r1, [r7, #12]
 800fa7a:	4806      	ldr	r0, [pc, #24]	; (800fa94 <BSP_SD_ReadBlocks_DMA+0x30>)
 800fa7c:	f7fb f948 	bl	800ad10 <HAL_SD_ReadBlocks_DMA>
 800fa80:	4603      	mov	r3, r0
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d001      	beq.n	800fa8a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fa86:	2301      	movs	r3, #1
 800fa88:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800fa8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3718      	adds	r7, #24
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	20000618 	.word	0x20000618

0800fa98 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b086      	sub	sp, #24
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	60f8      	str	r0, [r7, #12]
 800faa0:	60b9      	str	r1, [r7, #8]
 800faa2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800faa4:	2300      	movs	r3, #0
 800faa6:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	68ba      	ldr	r2, [r7, #8]
 800faac:	68f9      	ldr	r1, [r7, #12]
 800faae:	4806      	ldr	r0, [pc, #24]	; (800fac8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800fab0:	f7fb f9fc 	bl	800aeac <HAL_SD_WriteBlocks_DMA>
 800fab4:	4603      	mov	r3, r0
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d001      	beq.n	800fabe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800faba:	2301      	movs	r3, #1
 800fabc:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800fabe:	7dfb      	ldrb	r3, [r7, #23]
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	3718      	adds	r7, #24
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}
 800fac8:	20000618 	.word	0x20000618

0800facc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800facc:	b580      	push	{r7, lr}
 800face:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fad0:	4805      	ldr	r0, [pc, #20]	; (800fae8 <BSP_SD_GetCardState+0x1c>)
 800fad2:	f7fb fd93 	bl	800b5fc <HAL_SD_GetCardState>
 800fad6:	4603      	mov	r3, r0
 800fad8:	2b04      	cmp	r3, #4
 800fada:	bf14      	ite	ne
 800fadc:	2301      	movne	r3, #1
 800fade:	2300      	moveq	r3, #0
 800fae0:	b2db      	uxtb	r3, r3
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	bd80      	pop	{r7, pc}
 800fae6:	bf00      	nop
 800fae8:	20000618 	.word	0x20000618

0800faec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800faf4:	6879      	ldr	r1, [r7, #4]
 800faf6:	4803      	ldr	r0, [pc, #12]	; (800fb04 <BSP_SD_GetCardInfo+0x18>)
 800faf8:	f7fb fcd8 	bl	800b4ac <HAL_SD_GetCardInfo>
}
 800fafc:	bf00      	nop
 800fafe:	3708      	adds	r7, #8
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	20000618 	.word	0x20000618

0800fb08 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fb10:	f000 fa32 	bl	800ff78 <BSP_SD_ReadCpltCallback>
}
 800fb14:	bf00      	nop
 800fb16:	3708      	adds	r7, #8
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}

0800fb1c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fb22:	2301      	movs	r3, #1
 800fb24:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800fb26:	f000 f80b 	bl	800fb40 <BSP_PlatformIsDetected>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d101      	bne.n	800fb34 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fb30:	2300      	movs	r3, #0
 800fb32:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fb34:	79fb      	ldrb	r3, [r7, #7]
 800fb36:	b2db      	uxtb	r3, r3
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3708      	adds	r7, #8
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fb46:	2301      	movs	r3, #1
 800fb48:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fb4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fb4e:	4806      	ldr	r0, [pc, #24]	; (800fb68 <BSP_PlatformIsDetected+0x28>)
 800fb50:	f7f5 fd24 	bl	800559c <HAL_GPIO_ReadPin>
 800fb54:	4603      	mov	r3, r0
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d001      	beq.n	800fb5e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800fb5e:	79fb      	ldrb	r3, [r7, #7]
}  
 800fb60:	4618      	mov	r0, r3
 800fb62:	3708      	adds	r7, #8
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	40020800 	.word	0x40020800

0800fb6c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 800fb74:	f008 fd38 	bl	80185e8 <osKernelSysTick>
 800fb78:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 800fb7a:	e006      	b.n	800fb8a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fb7c:	f7ff ffa6 	bl	800facc <BSP_SD_GetCardState>
 800fb80:	4603      	mov	r3, r0
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d101      	bne.n	800fb8a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fb86:	2300      	movs	r3, #0
 800fb88:	e009      	b.n	800fb9e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800fb8a:	f008 fd2d 	bl	80185e8 <osKernelSysTick>
 800fb8e:	4602      	mov	r2, r0
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	1ad3      	subs	r3, r2, r3
 800fb94:	687a      	ldr	r2, [r7, #4]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d8f0      	bhi.n	800fb7c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800fb9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3710      	adds	r7, #16
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
	...

0800fba8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b082      	sub	sp, #8
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	4603      	mov	r3, r0
 800fbb0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fbb2:	4b0b      	ldr	r3, [pc, #44]	; (800fbe0 <SD_CheckStatus+0x38>)
 800fbb4:	2201      	movs	r2, #1
 800fbb6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fbb8:	f7ff ff88 	bl	800facc <BSP_SD_GetCardState>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d107      	bne.n	800fbd2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fbc2:	4b07      	ldr	r3, [pc, #28]	; (800fbe0 <SD_CheckStatus+0x38>)
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	f023 0301 	bic.w	r3, r3, #1
 800fbcc:	b2da      	uxtb	r2, r3
 800fbce:	4b04      	ldr	r3, [pc, #16]	; (800fbe0 <SD_CheckStatus+0x38>)
 800fbd0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fbd2:	4b03      	ldr	r3, [pc, #12]	; (800fbe0 <SD_CheckStatus+0x38>)
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	b2db      	uxtb	r3, r3
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3708      	adds	r7, #8
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	2000002d 	.word	0x2000002d

0800fbe4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fbe4:	b590      	push	{r4, r7, lr}
 800fbe6:	b087      	sub	sp, #28
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	4603      	mov	r3, r0
 800fbec:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800fbee:	4b1a      	ldr	r3, [pc, #104]	; (800fc58 <SD_initialize+0x74>)
 800fbf0:	2201      	movs	r2, #1
 800fbf2:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 800fbf4:	f008 fcec 	bl	80185d0 <osKernelRunning>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d024      	beq.n	800fc48 <SD_initialize+0x64>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800fbfe:	f7ff ff0b 	bl	800fa18 <BSP_SD_Init>
 800fc02:	4603      	mov	r3, r0
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d107      	bne.n	800fc18 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800fc08:	79fb      	ldrb	r3, [r7, #7]
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7ff ffcc 	bl	800fba8 <SD_CheckStatus>
 800fc10:	4603      	mov	r3, r0
 800fc12:	461a      	mov	r2, r3
 800fc14:	4b10      	ldr	r3, [pc, #64]	; (800fc58 <SD_initialize+0x74>)
 800fc16:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 800fc18:	4b0f      	ldr	r3, [pc, #60]	; (800fc58 <SD_initialize+0x74>)
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	b2db      	uxtb	r3, r3
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d012      	beq.n	800fc48 <SD_initialize+0x64>
 800fc22:	4b0e      	ldr	r3, [pc, #56]	; (800fc5c <SD_initialize+0x78>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d10e      	bne.n	800fc48 <SD_initialize+0x64>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800fc2a:	4b0d      	ldr	r3, [pc, #52]	; (800fc60 <SD_initialize+0x7c>)
 800fc2c:	f107 0408 	add.w	r4, r7, #8
 800fc30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800fc36:	f107 0308 	add.w	r3, r7, #8
 800fc3a:	2100      	movs	r1, #0
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f008 fd43 	bl	80186c8 <osMessageCreate>
 800fc42:	4602      	mov	r2, r0
 800fc44:	4b05      	ldr	r3, [pc, #20]	; (800fc5c <SD_initialize+0x78>)
 800fc46:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 800fc48:	4b03      	ldr	r3, [pc, #12]	; (800fc58 <SD_initialize+0x74>)
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	b2db      	uxtb	r3, r3
}
 800fc4e:	4618      	mov	r0, r3
 800fc50:	371c      	adds	r7, #28
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd90      	pop	{r4, r7, pc}
 800fc56:	bf00      	nop
 800fc58:	2000002d 	.word	0x2000002d
 800fc5c:	20000bc0 	.word	0x20000bc0
 800fc60:	0802c138 	.word	0x0802c138

0800fc64 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fc6e:	79fb      	ldrb	r3, [r7, #7]
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7ff ff99 	bl	800fba8 <SD_CheckStatus>
 800fc76:	4603      	mov	r3, r0
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3708      	adds	r7, #8
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b08e      	sub	sp, #56	; 0x38
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	61b9      	str	r1, [r7, #24]
 800fc88:	617a      	str	r2, [r7, #20]
 800fc8a:	613b      	str	r3, [r7, #16]
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 800fc90:	2301      	movs	r3, #1
 800fc92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fc96:	f247 5030 	movw	r0, #30000	; 0x7530
 800fc9a:	f7ff ff67 	bl	800fb6c <SD_CheckStatusWithTimeout>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	da02      	bge.n	800fcaa <SD_read+0x2a>
  {
    return res;
 800fca4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fca8:	e06c      	b.n	800fd84 <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	f003 0303 	and.w	r3, r3, #3
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d11e      	bne.n	800fcf2 <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800fcb4:	693a      	ldr	r2, [r7, #16]
 800fcb6:	6979      	ldr	r1, [r7, #20]
 800fcb8:	69b8      	ldr	r0, [r7, #24]
 800fcba:	f7ff fed3 	bl	800fa64 <BSP_SD_ReadBlocks_DMA>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 800fcc4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d159      	bne.n	800fd80 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800fccc:	4b2f      	ldr	r3, [pc, #188]	; (800fd8c <SD_read+0x10c>)
 800fcce:	6819      	ldr	r1, [r3, #0]
 800fcd0:	f107 0320 	add.w	r3, r7, #32
 800fcd4:	f247 5230 	movw	r2, #30000	; 0x7530
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f008 fd5f 	bl	801879c <osMessageGet>
      if (event.status == osEventMessage) {
 800fcde:	6a3b      	ldr	r3, [r7, #32]
 800fce0:	2b10      	cmp	r3, #16
 800fce2:	d14d      	bne.n	800fd80 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 800fce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce6:	2b01      	cmp	r3, #1
 800fce8:	d14a      	bne.n	800fd80 <SD_read+0x100>
          res = RES_OK;
 800fcea:	2300      	movs	r3, #0
 800fcec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fcf0:	e046      	b.n	800fd80 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	633b      	str	r3, [r7, #48]	; 0x30
 800fcf6:	e032      	b.n	800fd5e <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	1c5a      	adds	r2, r3, #1
 800fcfc:	617a      	str	r2, [r7, #20]
 800fcfe:	2201      	movs	r2, #1
 800fd00:	4619      	mov	r1, r3
 800fd02:	4823      	ldr	r0, [pc, #140]	; (800fd90 <SD_read+0x110>)
 800fd04:	f7ff feae 	bl	800fa64 <BSP_SD_ReadBlocks_DMA>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 800fd0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d128      	bne.n	800fd68 <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800fd16:	4b1d      	ldr	r3, [pc, #116]	; (800fd8c <SD_read+0x10c>)
 800fd18:	6819      	ldr	r1, [r3, #0]
 800fd1a:	463b      	mov	r3, r7
 800fd1c:	f247 5230 	movw	r2, #30000	; 0x7530
 800fd20:	4618      	mov	r0, r3
 800fd22:	f008 fd3b 	bl	801879c <osMessageGet>
 800fd26:	f107 0320 	add.w	r3, r7, #32
 800fd2a:	463a      	mov	r2, r7
 800fd2c:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 800fd32:	6a3b      	ldr	r3, [r7, #32]
 800fd34:	2b10      	cmp	r3, #16
 800fd36:	d10f      	bne.n	800fd58 <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 800fd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	d10c      	bne.n	800fd58 <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 800fd3e:	69bb      	ldr	r3, [r7, #24]
 800fd40:	4a13      	ldr	r2, [pc, #76]	; (800fd90 <SD_read+0x110>)
 800fd42:	4618      	mov	r0, r3
 800fd44:	4611      	mov	r1, r2
 800fd46:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd4a:	461a      	mov	r2, r3
 800fd4c:	f01b fa44 	bl	802b1d8 <memcpy>
            buff += BLOCKSIZE;
 800fd50:	69bb      	ldr	r3, [r7, #24]
 800fd52:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800fd56:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 800fd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd5a:	3301      	adds	r3, #1
 800fd5c:	633b      	str	r3, [r7, #48]	; 0x30
 800fd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd60:	693a      	ldr	r2, [r7, #16]
 800fd62:	429a      	cmp	r2, r3
 800fd64:	d8c8      	bhi.n	800fcf8 <SD_read+0x78>
 800fd66:	e000      	b.n	800fd6a <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 800fd68:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 800fd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6c:	693a      	ldr	r2, [r7, #16]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d106      	bne.n	800fd80 <SD_read+0x100>
 800fd72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d102      	bne.n	800fd80 <SD_read+0x100>
      res = RES_OK;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 800fd80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 800fd84:	4618      	mov	r0, r3
 800fd86:	3738      	adds	r7, #56	; 0x38
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}
 800fd8c:	20000bc0 	.word	0x20000bc0
 800fd90:	200009c0 	.word	0x200009c0

0800fd94 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b090      	sub	sp, #64	; 0x40
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	61b9      	str	r1, [r7, #24]
 800fd9c:	617a      	str	r2, [r7, #20]
 800fd9e:	613b      	str	r3, [r7, #16]
 800fda0:	4603      	mov	r3, r0
 800fda2:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 800fda4:	2301      	movs	r3, #1
 800fda6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fdaa:	f247 5030 	movw	r0, #30000	; 0x7530
 800fdae:	f7ff fedd 	bl	800fb6c <SD_CheckStatusWithTimeout>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	da02      	bge.n	800fdbe <SD_write+0x2a>
  {
    return res;
 800fdb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fdbc:	e07c      	b.n	800feb8 <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800fdbe:	69bb      	ldr	r3, [r7, #24]
 800fdc0:	f003 0303 	and.w	r3, r3, #3
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d12e      	bne.n	800fe26 <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800fdc8:	693a      	ldr	r2, [r7, #16]
 800fdca:	6979      	ldr	r1, [r7, #20]
 800fdcc:	69b8      	ldr	r0, [r7, #24]
 800fdce:	f7ff fe63 	bl	800fa98 <BSP_SD_WriteBlocks_DMA>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d16d      	bne.n	800feb4 <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800fdd8:	4b39      	ldr	r3, [pc, #228]	; (800fec0 <SD_write+0x12c>)
 800fdda:	6819      	ldr	r1, [r3, #0]
 800fddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fde0:	f247 5230 	movw	r2, #30000	; 0x7530
 800fde4:	4618      	mov	r0, r3
 800fde6:	f008 fcd9 	bl	801879c <osMessageGet>

      if (event.status == osEventMessage)
 800fdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdec:	2b10      	cmp	r3, #16
 800fdee:	d161      	bne.n	800feb4 <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 800fdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf2:	2b02      	cmp	r3, #2
 800fdf4:	d15e      	bne.n	800feb4 <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 800fdf6:	f008 fbf7 	bl	80185e8 <osKernelSysTick>
 800fdfa:	4602      	mov	r2, r0
 800fdfc:	f247 5330 	movw	r3, #30000	; 0x7530
 800fe00:	4413      	add	r3, r2
 800fe02:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 800fe04:	e008      	b.n	800fe18 <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fe06:	f7ff fe61 	bl	800facc <BSP_SD_GetCardState>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d103      	bne.n	800fe18 <SD_write+0x84>
            {
              res = RES_OK;
 800fe10:	2300      	movs	r3, #0
 800fe12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 800fe16:	e04d      	b.n	800feb4 <SD_write+0x120>
          while(timer > osKernelSysTick())
 800fe18:	f008 fbe6 	bl	80185e8 <osKernelSysTick>
 800fe1c:	4602      	mov	r2, r0
 800fe1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe20:	4293      	cmp	r3, r2
 800fe22:	d8f0      	bhi.n	800fe06 <SD_write+0x72>
 800fe24:	e046      	b.n	800feb4 <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 800fe26:	2300      	movs	r3, #0
 800fe28:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe2a:	e032      	b.n	800fe92 <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	1c5a      	adds	r2, r3, #1
 800fe30:	617a      	str	r2, [r7, #20]
 800fe32:	2201      	movs	r2, #1
 800fe34:	4619      	mov	r1, r3
 800fe36:	4823      	ldr	r0, [pc, #140]	; (800fec4 <SD_write+0x130>)
 800fe38:	f7ff fe2e 	bl	800fa98 <BSP_SD_WriteBlocks_DMA>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 800fe42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d128      	bne.n	800fe9c <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800fe4a:	4b1d      	ldr	r3, [pc, #116]	; (800fec0 <SD_write+0x12c>)
 800fe4c:	6819      	ldr	r1, [r3, #0]
 800fe4e:	463b      	mov	r3, r7
 800fe50:	f247 5230 	movw	r2, #30000	; 0x7530
 800fe54:	4618      	mov	r0, r3
 800fe56:	f008 fca1 	bl	801879c <osMessageGet>
 800fe5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe5e:	463a      	mov	r2, r7
 800fe60:	ca07      	ldmia	r2, {r0, r1, r2}
 800fe62:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 800fe66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe68:	2b10      	cmp	r3, #16
 800fe6a:	d10f      	bne.n	800fe8c <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 800fe6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe6e:	2b02      	cmp	r3, #2
 800fe70:	d10c      	bne.n	800fe8c <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800fe72:	69bb      	ldr	r3, [r7, #24]
 800fe74:	4a13      	ldr	r2, [pc, #76]	; (800fec4 <SD_write+0x130>)
 800fe76:	4618      	mov	r0, r3
 800fe78:	4611      	mov	r1, r2
 800fe7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe7e:	461a      	mov	r2, r3
 800fe80:	f01b f9aa 	bl	802b1d8 <memcpy>
            buff += BLOCKSIZE;
 800fe84:	69bb      	ldr	r3, [r7, #24]
 800fe86:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800fe8a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 800fe8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe8e:	3301      	adds	r3, #1
 800fe90:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe94:	693a      	ldr	r2, [r7, #16]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d8c8      	bhi.n	800fe2c <SD_write+0x98>
 800fe9a:	e000      	b.n	800fe9e <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 800fe9c:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 800fe9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea0:	693a      	ldr	r2, [r7, #16]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d106      	bne.n	800feb4 <SD_write+0x120>
 800fea6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d102      	bne.n	800feb4 <SD_write+0x120>
      res = RES_OK;
 800feae:	2300      	movs	r3, #0
 800feb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 800feb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 800feb8:	4618      	mov	r0, r3
 800feba:	3740      	adds	r7, #64	; 0x40
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}
 800fec0:	20000bc0 	.word	0x20000bc0
 800fec4:	200009c0 	.word	0x200009c0

0800fec8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b08c      	sub	sp, #48	; 0x30
 800fecc:	af00      	add	r7, sp, #0
 800fece:	4603      	mov	r3, r0
 800fed0:	603a      	str	r2, [r7, #0]
 800fed2:	71fb      	strb	r3, [r7, #7]
 800fed4:	460b      	mov	r3, r1
 800fed6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800fed8:	2301      	movs	r3, #1
 800feda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fede:	4b25      	ldr	r3, [pc, #148]	; (800ff74 <SD_ioctl+0xac>)
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	b2db      	uxtb	r3, r3
 800fee4:	f003 0301 	and.w	r3, r3, #1
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d001      	beq.n	800fef0 <SD_ioctl+0x28>
 800feec:	2303      	movs	r3, #3
 800feee:	e03c      	b.n	800ff6a <SD_ioctl+0xa2>

  switch (cmd)
 800fef0:	79bb      	ldrb	r3, [r7, #6]
 800fef2:	2b03      	cmp	r3, #3
 800fef4:	d834      	bhi.n	800ff60 <SD_ioctl+0x98>
 800fef6:	a201      	add	r2, pc, #4	; (adr r2, 800fefc <SD_ioctl+0x34>)
 800fef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fefc:	0800ff0d 	.word	0x0800ff0d
 800ff00:	0800ff15 	.word	0x0800ff15
 800ff04:	0800ff2d 	.word	0x0800ff2d
 800ff08:	0800ff47 	.word	0x0800ff47
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ff12:	e028      	b.n	800ff66 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ff14:	f107 030c 	add.w	r3, r7, #12
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7ff fde7 	bl	800faec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ff1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ff24:	2300      	movs	r3, #0
 800ff26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ff2a:	e01c      	b.n	800ff66 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ff2c:	f107 030c 	add.w	r3, r7, #12
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7ff fddb 	bl	800faec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ff36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff38:	b29a      	uxth	r2, r3
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ff44:	e00f      	b.n	800ff66 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ff46:	f107 030c 	add.w	r3, r7, #12
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7ff fdce 	bl	800faec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ff50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff52:	0a5a      	lsrs	r2, r3, #9
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ff5e:	e002      	b.n	800ff66 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ff60:	2304      	movs	r3, #4
 800ff62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ff66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3730      	adds	r7, #48	; 0x30
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}
 800ff72:	bf00      	nop
 800ff74:	2000002d 	.word	0x2000002d

0800ff78 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 800ff7c:	4b04      	ldr	r3, [pc, #16]	; (800ff90 <BSP_SD_ReadCpltCallback+0x18>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f04f 32ff 	mov.w	r2, #4294967295
 800ff84:	2101      	movs	r1, #1
 800ff86:	4618      	mov	r0, r3
 800ff88:	f008 fbc8 	bl	801871c <osMessagePut>
}
 800ff8c:	bf00      	nop
 800ff8e:	bd80      	pop	{r7, pc}
 800ff90:	20000bc0 	.word	0x20000bc0

0800ff94 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800ff94:	b590      	push	{r4, r7, lr}
 800ff96:	b089      	sub	sp, #36	; 0x24
 800ff98:	af04      	add	r7, sp, #16
 800ff9a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800ff9c:	2302      	movs	r3, #2
 800ff9e:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	2202      	movs	r2, #2
 800ffa4:	2102      	movs	r1, #2
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 fc8c 	bl	80108c4 <USBH_FindInterface>
 800ffac:	4603      	mov	r3, r0
 800ffae:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800ffb0:	7bbb      	ldrb	r3, [r7, #14]
 800ffb2:	2bff      	cmp	r3, #255	; 0xff
 800ffb4:	f000 812a 	beq.w	801020c <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800ffb8:	7bbb      	ldrb	r3, [r7, #14]
 800ffba:	4619      	mov	r1, r3
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f000 fc65 	bl	801088c <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800ffc8:	2050      	movs	r0, #80	; 0x50
 800ffca:	f01b f8f5 	bl	802b1b8 <malloc>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ffd8:	69db      	ldr	r3, [r3, #28]
 800ffda:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800ffdc:	7bbb      	ldrb	r3, [r7, #14]
 800ffde:	687a      	ldr	r2, [r7, #4]
 800ffe0:	211a      	movs	r1, #26
 800ffe2:	fb01 f303 	mul.w	r3, r1, r3
 800ffe6:	4413      	add	r3, r2
 800ffe8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800ffec:	781b      	ldrb	r3, [r3, #0]
 800ffee:	b25b      	sxtb	r3, r3
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	da15      	bge.n	8010020 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800fff4:	7bbb      	ldrb	r3, [r7, #14]
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	211a      	movs	r1, #26
 800fffa:	fb01 f303 	mul.w	r3, r1, r3
 800fffe:	4413      	add	r3, r2
 8010000:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8010004:	781a      	ldrb	r2, [r3, #0]
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801000a:	7bbb      	ldrb	r3, [r7, #14]
 801000c:	687a      	ldr	r2, [r7, #4]
 801000e:	211a      	movs	r1, #26
 8010010:	fb01 f303 	mul.w	r3, r1, r3
 8010014:	4413      	add	r3, r2
 8010016:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 801001a:	881a      	ldrh	r2, [r3, #0]
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	785b      	ldrb	r3, [r3, #1]
 8010024:	4619      	mov	r1, r3
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f001 ff2f 	bl	8011e8a <USBH_AllocPipe>
 801002c:	4603      	mov	r3, r0
 801002e:	461a      	mov	r2, r3
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	7819      	ldrb	r1, [r3, #0]
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	7858      	ldrb	r0, [r3, #1]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010048:	68ba      	ldr	r2, [r7, #8]
 801004a:	8952      	ldrh	r2, [r2, #10]
 801004c:	9202      	str	r2, [sp, #8]
 801004e:	2203      	movs	r2, #3
 8010050:	9201      	str	r2, [sp, #4]
 8010052:	9300      	str	r3, [sp, #0]
 8010054:	4623      	mov	r3, r4
 8010056:	4602      	mov	r2, r0
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f001 fee7 	bl	8011e2c <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	781b      	ldrb	r3, [r3, #0]
 8010062:	2200      	movs	r2, #0
 8010064:	4619      	mov	r1, r3
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f011 fd86 	bl	8021b78 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 801006c:	2300      	movs	r3, #0
 801006e:	2200      	movs	r2, #0
 8010070:	210a      	movs	r1, #10
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 fc26 	bl	80108c4 <USBH_FindInterface>
 8010078:	4603      	mov	r3, r0
 801007a:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 801007c:	7bbb      	ldrb	r3, [r7, #14]
 801007e:	2bff      	cmp	r3, #255	; 0xff
 8010080:	f000 80c4 	beq.w	801020c <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8010084:	7bbb      	ldrb	r3, [r7, #14]
 8010086:	687a      	ldr	r2, [r7, #4]
 8010088:	211a      	movs	r1, #26
 801008a:	fb01 f303 	mul.w	r3, r1, r3
 801008e:	4413      	add	r3, r2
 8010090:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8010094:	781b      	ldrb	r3, [r3, #0]
 8010096:	b25b      	sxtb	r3, r3
 8010098:	2b00      	cmp	r3, #0
 801009a:	da16      	bge.n	80100ca <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801009c:	7bbb      	ldrb	r3, [r7, #14]
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	211a      	movs	r1, #26
 80100a2:	fb01 f303 	mul.w	r3, r1, r3
 80100a6:	4413      	add	r3, r2
 80100a8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80100ac:	781a      	ldrb	r2, [r3, #0]
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80100b2:	7bbb      	ldrb	r3, [r7, #14]
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	211a      	movs	r1, #26
 80100b8:	fb01 f303 	mul.w	r3, r1, r3
 80100bc:	4413      	add	r3, r2
 80100be:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80100c2:	881a      	ldrh	r2, [r3, #0]
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	835a      	strh	r2, [r3, #26]
 80100c8:	e015      	b.n	80100f6 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80100ca:	7bbb      	ldrb	r3, [r7, #14]
 80100cc:	687a      	ldr	r2, [r7, #4]
 80100ce:	211a      	movs	r1, #26
 80100d0:	fb01 f303 	mul.w	r3, r1, r3
 80100d4:	4413      	add	r3, r2
 80100d6:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80100da:	781a      	ldrb	r2, [r3, #0]
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80100e0:	7bbb      	ldrb	r3, [r7, #14]
 80100e2:	687a      	ldr	r2, [r7, #4]
 80100e4:	211a      	movs	r1, #26
 80100e6:	fb01 f303 	mul.w	r3, r1, r3
 80100ea:	4413      	add	r3, r2
 80100ec:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80100f0:	881a      	ldrh	r2, [r3, #0]
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80100f6:	7bbb      	ldrb	r3, [r7, #14]
 80100f8:	687a      	ldr	r2, [r7, #4]
 80100fa:	211a      	movs	r1, #26
 80100fc:	fb01 f303 	mul.w	r3, r1, r3
 8010100:	4413      	add	r3, r2
 8010102:	f203 3352 	addw	r3, r3, #850	; 0x352
 8010106:	781b      	ldrb	r3, [r3, #0]
 8010108:	b25b      	sxtb	r3, r3
 801010a:	2b00      	cmp	r3, #0
 801010c:	da16      	bge.n	801013c <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 801010e:	7bbb      	ldrb	r3, [r7, #14]
 8010110:	687a      	ldr	r2, [r7, #4]
 8010112:	211a      	movs	r1, #26
 8010114:	fb01 f303 	mul.w	r3, r1, r3
 8010118:	4413      	add	r3, r2
 801011a:	f203 3352 	addw	r3, r3, #850	; 0x352
 801011e:	781a      	ldrb	r2, [r3, #0]
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8010124:	7bbb      	ldrb	r3, [r7, #14]
 8010126:	687a      	ldr	r2, [r7, #4]
 8010128:	211a      	movs	r1, #26
 801012a:	fb01 f303 	mul.w	r3, r1, r3
 801012e:	4413      	add	r3, r2
 8010130:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8010134:	881a      	ldrh	r2, [r3, #0]
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	835a      	strh	r2, [r3, #26]
 801013a:	e015      	b.n	8010168 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 801013c:	7bbb      	ldrb	r3, [r7, #14]
 801013e:	687a      	ldr	r2, [r7, #4]
 8010140:	211a      	movs	r1, #26
 8010142:	fb01 f303 	mul.w	r3, r1, r3
 8010146:	4413      	add	r3, r2
 8010148:	f203 3352 	addw	r3, r3, #850	; 0x352
 801014c:	781a      	ldrb	r2, [r3, #0]
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8010152:	7bbb      	ldrb	r3, [r7, #14]
 8010154:	687a      	ldr	r2, [r7, #4]
 8010156:	211a      	movs	r1, #26
 8010158:	fb01 f303 	mul.w	r3, r1, r3
 801015c:	4413      	add	r3, r2
 801015e:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8010162:	881a      	ldrh	r2, [r3, #0]
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	7b9b      	ldrb	r3, [r3, #14]
 801016c:	4619      	mov	r1, r3
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f001 fe8b 	bl	8011e8a <USBH_AllocPipe>
 8010174:	4603      	mov	r3, r0
 8010176:	461a      	mov	r2, r3
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	7bdb      	ldrb	r3, [r3, #15]
 8010180:	4619      	mov	r1, r3
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f001 fe81 	bl	8011e8a <USBH_AllocPipe>
 8010188:	4603      	mov	r3, r0
 801018a:	461a      	mov	r2, r3
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	7b59      	ldrb	r1, [r3, #13]
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	7b98      	ldrb	r0, [r3, #14]
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80101a4:	68ba      	ldr	r2, [r7, #8]
 80101a6:	8b12      	ldrh	r2, [r2, #24]
 80101a8:	9202      	str	r2, [sp, #8]
 80101aa:	2202      	movs	r2, #2
 80101ac:	9201      	str	r2, [sp, #4]
 80101ae:	9300      	str	r3, [sp, #0]
 80101b0:	4623      	mov	r3, r4
 80101b2:	4602      	mov	r2, r0
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f001 fe39 	bl	8011e2c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	7b19      	ldrb	r1, [r3, #12]
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	7bd8      	ldrb	r0, [r3, #15]
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80101ce:	68ba      	ldr	r2, [r7, #8]
 80101d0:	8b52      	ldrh	r2, [r2, #26]
 80101d2:	9202      	str	r2, [sp, #8]
 80101d4:	2202      	movs	r2, #2
 80101d6:	9201      	str	r2, [sp, #4]
 80101d8:	9300      	str	r3, [sp, #0]
 80101da:	4623      	mov	r3, r4
 80101dc:	4602      	mov	r2, r0
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f001 fe24 	bl	8011e2c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	2200      	movs	r2, #0
 80101e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	7b5b      	ldrb	r3, [r3, #13]
 80101f0:	2200      	movs	r2, #0
 80101f2:	4619      	mov	r1, r3
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f011 fcbf 	bl	8021b78 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	7b1b      	ldrb	r3, [r3, #12]
 80101fe:	2200      	movs	r2, #0
 8010200:	4619      	mov	r1, r3
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f011 fcb8 	bl	8021b78 <USBH_LL_SetToggle>
      status = USBH_OK;
 8010208:	2300      	movs	r3, #0
 801020a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 801020c:	7bfb      	ldrb	r3, [r7, #15]
}
 801020e:	4618      	mov	r0, r3
 8010210:	3714      	adds	r7, #20
 8010212:	46bd      	mov	sp, r7
 8010214:	bd90      	pop	{r4, r7, pc}

08010216 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8010216:	b580      	push	{r7, lr}
 8010218:	b084      	sub	sp, #16
 801021a:	af00      	add	r7, sp, #0
 801021c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8010224:	69db      	ldr	r3, [r3, #28]
 8010226:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d00e      	beq.n	801024e <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	4619      	mov	r1, r3
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f001 fe17 	bl	8011e6a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	4619      	mov	r1, r3
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f001 fe3f 	bl	8011ec6 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	2200      	movs	r2, #0
 801024c:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	7b1b      	ldrb	r3, [r3, #12]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d00e      	beq.n	8010274 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	7b1b      	ldrb	r3, [r3, #12]
 801025a:	4619      	mov	r1, r3
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f001 fe04 	bl	8011e6a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	7b1b      	ldrb	r3, [r3, #12]
 8010266:	4619      	mov	r1, r3
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f001 fe2c 	bl	8011ec6 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	2200      	movs	r2, #0
 8010272:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	7b5b      	ldrb	r3, [r3, #13]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d00e      	beq.n	801029a <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	7b5b      	ldrb	r3, [r3, #13]
 8010280:	4619      	mov	r1, r3
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f001 fdf1 	bl	8011e6a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	7b5b      	ldrb	r3, [r3, #13]
 801028c:	4619      	mov	r1, r3
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f001 fe19 	bl	8011ec6 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2200      	movs	r2, #0
 8010298:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80102a0:	69db      	ldr	r3, [r3, #28]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d00b      	beq.n	80102be <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80102ac:	69db      	ldr	r3, [r3, #28]
 80102ae:	4618      	mov	r0, r3
 80102b0:	f01a ff8a 	bl	802b1c8 <free>
    phost->pActiveClass->pData = 0U;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80102ba:	2200      	movs	r2, #0
 80102bc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80102be:	2300      	movs	r3, #0
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	3710      	adds	r7, #16
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}

080102c8 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b084      	sub	sp, #16
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80102d0:	2302      	movs	r3, #2
 80102d2:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80102da:	69db      	ldr	r3, [r3, #28]
 80102dc:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	3340      	adds	r3, #64	; 0x40
 80102e2:	4619      	mov	r1, r3
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f000 f8b2 	bl	801044e <GetLineCoding>
 80102ea:	4603      	mov	r3, r0
 80102ec:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80102ee:	7bfb      	ldrb	r3, [r7, #15]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d105      	bne.n	8010300 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80102fa:	2102      	movs	r1, #2
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	4798      	blx	r3
  }
  return status;
 8010300:	7bfb      	ldrb	r3, [r7, #15]
}
 8010302:	4618      	mov	r0, r3
 8010304:	3710      	adds	r7, #16
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
	...

0801030c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b084      	sub	sp, #16
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8010314:	2301      	movs	r3, #1
 8010316:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8010318:	2300      	movs	r3, #0
 801031a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8010322:	69db      	ldr	r3, [r3, #28]
 8010324:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801032c:	2b04      	cmp	r3, #4
 801032e:	d877      	bhi.n	8010420 <USBH_CDC_Process+0x114>
 8010330:	a201      	add	r2, pc, #4	; (adr r2, 8010338 <USBH_CDC_Process+0x2c>)
 8010332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010336:	bf00      	nop
 8010338:	0801034d 	.word	0x0801034d
 801033c:	08010353 	.word	0x08010353
 8010340:	08010383 	.word	0x08010383
 8010344:	080103f7 	.word	0x080103f7
 8010348:	08010405 	.word	0x08010405
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 801034c:	2300      	movs	r3, #0
 801034e:	73fb      	strb	r3, [r7, #15]
    break;
 8010350:	e06d      	b.n	801042e <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010356:	4619      	mov	r1, r3
 8010358:	6878      	ldr	r0, [r7, #4]
 801035a:	f000 f897 	bl	801048c <SetLineCoding>
 801035e:	4603      	mov	r3, r0
 8010360:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8010362:	7bbb      	ldrb	r3, [r7, #14]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d104      	bne.n	8010372 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	2202      	movs	r2, #2
 801036c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8010370:	e058      	b.n	8010424 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8010372:	7bbb      	ldrb	r3, [r7, #14]
 8010374:	2b01      	cmp	r3, #1
 8010376:	d055      	beq.n	8010424 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	2204      	movs	r2, #4
 801037c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8010380:	e050      	b.n	8010424 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	3340      	adds	r3, #64	; 0x40
 8010386:	4619      	mov	r1, r3
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f000 f860 	bl	801044e <GetLineCoding>
 801038e:	4603      	mov	r3, r0
 8010390:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8010392:	7bbb      	ldrb	r3, [r7, #14]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d126      	bne.n	80103e6 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	2200      	movs	r2, #0
 801039c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103aa:	791b      	ldrb	r3, [r3, #4]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d13b      	bne.n	8010428 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103ba:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80103bc:	429a      	cmp	r2, r3
 80103be:	d133      	bne.n	8010428 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103ca:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d12b      	bne.n	8010428 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103d8:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80103da:	429a      	cmp	r2, r3
 80103dc:	d124      	bne.n	8010428 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f000 f984 	bl	80106ec <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80103e4:	e020      	b.n	8010428 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80103e6:	7bbb      	ldrb	r3, [r7, #14]
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d01d      	beq.n	8010428 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	2204      	movs	r2, #4
 80103f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80103f4:	e018      	b.n	8010428 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f000 f867 	bl	80104ca <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f000 f8f8 	bl	80105f2 <CDC_ProcessReception>
    break;
 8010402:	e014      	b.n	801042e <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8010404:	2100      	movs	r1, #0
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f000 fffa 	bl	8011400 <USBH_ClrFeature>
 801040c:	4603      	mov	r3, r0
 801040e:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8010410:	7bbb      	ldrb	r3, [r7, #14]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d10a      	bne.n	801042c <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	2200      	movs	r2, #0
 801041a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 801041e:	e005      	b.n	801042c <USBH_CDC_Process+0x120>

  default:
    break;
 8010420:	bf00      	nop
 8010422:	e004      	b.n	801042e <USBH_CDC_Process+0x122>
    break;
 8010424:	bf00      	nop
 8010426:	e002      	b.n	801042e <USBH_CDC_Process+0x122>
    break;
 8010428:	bf00      	nop
 801042a:	e000      	b.n	801042e <USBH_CDC_Process+0x122>
    break;
 801042c:	bf00      	nop

  }

  return status;
 801042e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010430:	4618      	mov	r0, r3
 8010432:	3710      	adds	r7, #16
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}

08010438 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8010438:	b480      	push	{r7}
 801043a:	b083      	sub	sp, #12
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8010440:	2300      	movs	r3, #0
}
 8010442:	4618      	mov	r0, r3
 8010444:	370c      	adds	r7, #12
 8010446:	46bd      	mov	sp, r7
 8010448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044c:	4770      	bx	lr

0801044e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 801044e:	b580      	push	{r7, lr}
 8010450:	b082      	sub	sp, #8
 8010452:	af00      	add	r7, sp, #0
 8010454:	6078      	str	r0, [r7, #4]
 8010456:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	22a1      	movs	r2, #161	; 0xa1
 801045c:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2221      	movs	r2, #33	; 0x21
 8010462:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2200      	movs	r2, #0
 8010468:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2200      	movs	r2, #0
 801046e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2207      	movs	r2, #7
 8010474:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	2207      	movs	r2, #7
 801047a:	4619      	mov	r1, r3
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f001 f99f 	bl	80117c0 <USBH_CtlReq>
 8010482:	4603      	mov	r3, r0
}
 8010484:	4618      	mov	r0, r3
 8010486:	3708      	adds	r7, #8
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2221      	movs	r2, #33	; 0x21
 801049a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2220      	movs	r2, #32
 80104a0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2200      	movs	r2, #0
 80104a6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2200      	movs	r2, #0
 80104ac:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2207      	movs	r2, #7
 80104b2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	2207      	movs	r2, #7
 80104b8:	4619      	mov	r1, r3
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f001 f980 	bl	80117c0 <USBH_CtlReq>
 80104c0:	4603      	mov	r3, r0
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	3708      	adds	r7, #8
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}

080104ca <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80104ca:	b580      	push	{r7, lr}
 80104cc:	b086      	sub	sp, #24
 80104ce:	af02      	add	r7, sp, #8
 80104d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80104d8:	69db      	ldr	r3, [r3, #28]
 80104da:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80104dc:	2300      	movs	r3, #0
 80104de:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80104e6:	2b01      	cmp	r3, #1
 80104e8:	d002      	beq.n	80104f0 <CDC_ProcessTransmission+0x26>
 80104ea:	2b02      	cmp	r3, #2
 80104ec:	d025      	beq.n	801053a <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80104ee:	e07c      	b.n	80105ea <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104f4:	68fa      	ldr	r2, [r7, #12]
 80104f6:	8b12      	ldrh	r2, [r2, #24]
 80104f8:	4293      	cmp	r3, r2
 80104fa:	d90c      	bls.n	8010516 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	69d9      	ldr	r1, [r3, #28]
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	8b1a      	ldrh	r2, [r3, #24]
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	7b58      	ldrb	r0, [r3, #13]
 8010508:	2301      	movs	r3, #1
 801050a:	9300      	str	r3, [sp, #0]
 801050c:	4603      	mov	r3, r0
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f001 fc49 	bl	8011da6 <USBH_BulkSendData>
 8010514:	e00c      	b.n	8010530 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 801051e:	b29a      	uxth	r2, r3
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	7b58      	ldrb	r0, [r3, #13]
 8010524:	2301      	movs	r3, #1
 8010526:	9300      	str	r3, [sp, #0]
 8010528:	4603      	mov	r3, r0
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f001 fc3b 	bl	8011da6 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2202      	movs	r2, #2
 8010534:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8010538:	e057      	b.n	80105ea <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	7b5b      	ldrb	r3, [r3, #13]
 801053e:	4619      	mov	r1, r3
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f011 faef 	bl	8021b24 <USBH_LL_GetURBState>
 8010546:	4603      	mov	r3, r0
 8010548:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 801054a:	7afb      	ldrb	r3, [r7, #11]
 801054c:	2b01      	cmp	r3, #1
 801054e:	d136      	bne.n	80105be <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010554:	68fa      	ldr	r2, [r7, #12]
 8010556:	8b12      	ldrh	r2, [r2, #24]
 8010558:	4293      	cmp	r3, r2
 801055a:	d90e      	bls.n	801057a <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010560:	68fa      	ldr	r2, [r7, #12]
 8010562:	8b12      	ldrh	r2, [r2, #24]
 8010564:	1a9a      	subs	r2, r3, r2
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	69db      	ldr	r3, [r3, #28]
 801056e:	68fa      	ldr	r2, [r7, #12]
 8010570:	8b12      	ldrh	r2, [r2, #24]
 8010572:	441a      	add	r2, r3
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	61da      	str	r2, [r3, #28]
 8010578:	e002      	b.n	8010580 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	2200      	movs	r2, #0
 801057e:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010584:	2b00      	cmp	r3, #0
 8010586:	d004      	beq.n	8010592 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	2201      	movs	r2, #1
 801058c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8010590:	e006      	b.n	80105a0 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	2200      	movs	r2, #0
 8010596:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f000 f892 	bl	80106c4 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2204      	movs	r2, #4
 80105a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80105b4:	2200      	movs	r2, #0
 80105b6:	4619      	mov	r1, r3
 80105b8:	f008 f8b0 	bl	801871c <osMessagePut>
    break;
 80105bc:	e014      	b.n	80105e8 <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 80105be:	7afb      	ldrb	r3, [r7, #11]
 80105c0:	2b02      	cmp	r3, #2
 80105c2:	d111      	bne.n	80105e8 <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2201      	movs	r2, #1
 80105c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2204      	movs	r2, #4
 80105d0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80105e0:	2200      	movs	r2, #0
 80105e2:	4619      	mov	r1, r3
 80105e4:	f008 f89a 	bl	801871c <osMessagePut>
    break;
 80105e8:	bf00      	nop
  }
}
 80105ea:	bf00      	nop
 80105ec:	3710      	adds	r7, #16
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}

080105f2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80105f2:	b580      	push	{r7, lr}
 80105f4:	b086      	sub	sp, #24
 80105f6:	af00      	add	r7, sp, #0
 80105f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8010600:	69db      	ldr	r3, [r3, #28]
 8010602:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010604:	2300      	movs	r3, #0
 8010606:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801060e:	2b03      	cmp	r3, #3
 8010610:	d002      	beq.n	8010618 <CDC_ProcessReception+0x26>
 8010612:	2b04      	cmp	r3, #4
 8010614:	d00e      	beq.n	8010634 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8010616:	e051      	b.n	80106bc <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	6a19      	ldr	r1, [r3, #32]
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	8b5a      	ldrh	r2, [r3, #26]
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	7b1b      	ldrb	r3, [r3, #12]
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f001 fbe3 	bl	8011df0 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	2204      	movs	r2, #4
 801062e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8010632:	e043      	b.n	80106bc <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	7b1b      	ldrb	r3, [r3, #12]
 8010638:	4619      	mov	r1, r3
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f011 fa72 	bl	8021b24 <USBH_LL_GetURBState>
 8010640:	4603      	mov	r3, r0
 8010642:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8010644:	7cfb      	ldrb	r3, [r7, #19]
 8010646:	2b01      	cmp	r3, #1
 8010648:	d137      	bne.n	80106ba <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 801064a:	697b      	ldr	r3, [r7, #20]
 801064c:	7b1b      	ldrb	r3, [r3, #12]
 801064e:	4619      	mov	r1, r3
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f011 f9d5 	bl	8021a00 <USBH_LL_GetLastXferSize>
 8010656:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801065c:	68fa      	ldr	r2, [r7, #12]
 801065e:	429a      	cmp	r2, r3
 8010660:	d016      	beq.n	8010690 <CDC_ProcessReception+0x9e>
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	8b5b      	ldrh	r3, [r3, #26]
 8010666:	461a      	mov	r2, r3
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	4293      	cmp	r3, r2
 801066c:	d910      	bls.n	8010690 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	1ad2      	subs	r2, r2, r3
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	6a1a      	ldr	r2, [r3, #32]
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	441a      	add	r2, r3
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	2203      	movs	r2, #3
 801068a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801068e:	e006      	b.n	801069e <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	2200      	movs	r2, #0
 8010694:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f000 f81d 	bl	80106d8 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2204      	movs	r2, #4
 80106a2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80106b2:	2200      	movs	r2, #0
 80106b4:	4619      	mov	r1, r3
 80106b6:	f008 f831 	bl	801871c <osMessagePut>
    break;
 80106ba:	bf00      	nop
  }
}
 80106bc:	bf00      	nop
 80106be:	3718      	adds	r7, #24
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}

080106c4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80106c4:	b480      	push	{r7}
 80106c6:	b083      	sub	sp, #12
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]

}
 80106cc:	bf00      	nop
 80106ce:	370c      	adds	r7, #12
 80106d0:	46bd      	mov	sp, r7
 80106d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d6:	4770      	bx	lr

080106d8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80106d8:	b480      	push	{r7}
 80106da:	b083      	sub	sp, #12
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]

}
 80106e0:	bf00      	nop
 80106e2:	370c      	adds	r7, #12
 80106e4:	46bd      	mov	sp, r7
 80106e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ea:	4770      	bx	lr

080106ec <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80106ec:	b480      	push	{r7}
 80106ee:	b083      	sub	sp, #12
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]

}
 80106f4:	bf00      	nop
 80106f6:	370c      	adds	r7, #12
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr

08010700 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8010700:	b5b0      	push	{r4, r5, r7, lr}
 8010702:	b090      	sub	sp, #64	; 0x40
 8010704:	af00      	add	r7, sp, #0
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	60b9      	str	r1, [r7, #8]
 801070a:	4613      	mov	r3, r2
 801070c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d101      	bne.n	8010718 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8010714:	2302      	movs	r3, #2
 8010716:	e03d      	b.n	8010794 <USBH_Init+0x94>
  }

  /* Set DRiver ID */
  phost->id = id;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	79fa      	ldrb	r2, [r7, #7]
 801071c:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	2200      	movs	r2, #0
 8010724:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2200      	movs	r2, #0
 801072c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8010730:	68f8      	ldr	r0, [r7, #12]
 8010732:	f000 f837 	bl	80107a4 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d003      	beq.n	8010744 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	68ba      	ldr	r2, [r7, #8]
 8010740:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8010744:	4b15      	ldr	r3, [pc, #84]	; (801079c <USBH_Init+0x9c>)
 8010746:	f107 0430 	add.w	r4, r7, #48	; 0x30
 801074a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801074c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 8010750:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010754:	2100      	movs	r1, #0
 8010756:	4618      	mov	r0, r3
 8010758:	f007 ffb6 	bl	80186c8 <osMessageCreate>
 801075c:	4602      	mov	r2, r0
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8010764:	4b0e      	ldr	r3, [pc, #56]	; (80107a0 <USBH_Init+0xa0>)
 8010766:	f107 0414 	add.w	r4, r7, #20
 801076a:	461d      	mov	r5, r3
 801076c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801076e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010770:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010774:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 8010778:	f107 0314 	add.w	r3, r7, #20
 801077c:	68f9      	ldr	r1, [r7, #12]
 801077e:	4618      	mov	r0, r3
 8010780:	f007 ff42 	bl	8018608 <osThreadCreate>
 8010784:	4602      	mov	r2, r0
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 801078c:	68f8      	ldr	r0, [r7, #12]
 801078e:	f011 f885 	bl	802189c <USBH_LL_Init>

  return USBH_OK;
 8010792:	2300      	movs	r3, #0
}
 8010794:	4618      	mov	r0, r3
 8010796:	3740      	adds	r7, #64	; 0x40
 8010798:	46bd      	mov	sp, r7
 801079a:	bdb0      	pop	{r4, r5, r7, pc}
 801079c:	0802c14c 	.word	0x0802c14c
 80107a0:	0802c168 	.word	0x0802c168

080107a4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80107a4:	b480      	push	{r7}
 80107a6:	b085      	sub	sp, #20
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80107ac:	2300      	movs	r3, #0
 80107ae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80107b0:	e008      	b.n	80107c4 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	68fa      	ldr	r2, [r7, #12]
 80107b6:	32e0      	adds	r2, #224	; 0xe0
 80107b8:	2100      	movs	r1, #0
 80107ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	3301      	adds	r3, #1
 80107c2:	60fb      	str	r3, [r7, #12]
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2b0e      	cmp	r3, #14
 80107c8:	d9f3      	bls.n	80107b2 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80107ca:	2300      	movs	r3, #0
 80107cc:	60fb      	str	r3, [r7, #12]
 80107ce:	e009      	b.n	80107e4 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 80107d0:	687a      	ldr	r2, [r7, #4]
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	4413      	add	r3, r2
 80107d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80107da:	2200      	movs	r2, #0
 80107dc:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	3301      	adds	r3, #1
 80107e2:	60fb      	str	r3, [r7, #12]
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80107ea:	d3f1      	bcc.n	80107d0 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2200      	movs	r2, #0
 80107f0:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2201      	movs	r2, #1
 80107fc:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2200      	movs	r2, #0
 8010802:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2201      	movs	r2, #1
 801080a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2240      	movs	r2, #64	; 0x40
 8010810:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2200      	movs	r2, #0
 8010816:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2200      	movs	r2, #0
 801081c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2201      	movs	r2, #1
 8010824:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8010828:	2300      	movs	r3, #0
}
 801082a:	4618      	mov	r0, r3
 801082c:	3714      	adds	r7, #20
 801082e:	46bd      	mov	sp, r7
 8010830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010834:	4770      	bx	lr

08010836 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8010836:	b480      	push	{r7}
 8010838:	b085      	sub	sp, #20
 801083a:	af00      	add	r7, sp, #0
 801083c:	6078      	str	r0, [r7, #4]
 801083e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8010840:	2300      	movs	r3, #0
 8010842:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d017      	beq.n	801087a <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010850:	2b00      	cmp	r3, #0
 8010852:	d10f      	bne.n	8010874 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801085a:	1c59      	adds	r1, r3, #1
 801085c:	687a      	ldr	r2, [r7, #4]
 801085e:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8010862:	687a      	ldr	r2, [r7, #4]
 8010864:	33dc      	adds	r3, #220	; 0xdc
 8010866:	009b      	lsls	r3, r3, #2
 8010868:	4413      	add	r3, r2
 801086a:	683a      	ldr	r2, [r7, #0]
 801086c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 801086e:	2300      	movs	r3, #0
 8010870:	73fb      	strb	r3, [r7, #15]
 8010872:	e004      	b.n	801087e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8010874:	2302      	movs	r3, #2
 8010876:	73fb      	strb	r3, [r7, #15]
 8010878:	e001      	b.n	801087e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 801087a:	2302      	movs	r3, #2
 801087c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801087e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010880:	4618      	mov	r0, r3
 8010882:	3714      	adds	r7, #20
 8010884:	46bd      	mov	sp, r7
 8010886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088a:	4770      	bx	lr

0801088c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 801088c:	b480      	push	{r7}
 801088e:	b085      	sub	sp, #20
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	460b      	mov	r3, r1
 8010896:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8010898:	2300      	movs	r3, #0
 801089a:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80108a2:	78fa      	ldrb	r2, [r7, #3]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d204      	bcs.n	80108b2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	78fa      	ldrb	r2, [r7, #3]
 80108ac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80108b0:	e001      	b.n	80108b6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80108b2:	2302      	movs	r3, #2
 80108b4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80108b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3714      	adds	r7, #20
 80108bc:	46bd      	mov	sp, r7
 80108be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c2:	4770      	bx	lr

080108c4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b087      	sub	sp, #28
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	4608      	mov	r0, r1
 80108ce:	4611      	mov	r1, r2
 80108d0:	461a      	mov	r2, r3
 80108d2:	4603      	mov	r3, r0
 80108d4:	70fb      	strb	r3, [r7, #3]
 80108d6:	460b      	mov	r3, r1
 80108d8:	70bb      	strb	r3, [r7, #2]
 80108da:	4613      	mov	r3, r2
 80108dc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 80108de:	2300      	movs	r3, #0
 80108e0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80108e2:	2300      	movs	r3, #0
 80108e4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80108ec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80108ee:	e025      	b.n	801093c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80108f0:	7dfb      	ldrb	r3, [r7, #23]
 80108f2:	221a      	movs	r2, #26
 80108f4:	fb02 f303 	mul.w	r3, r2, r3
 80108f8:	3308      	adds	r3, #8
 80108fa:	68fa      	ldr	r2, [r7, #12]
 80108fc:	4413      	add	r3, r2
 80108fe:	3302      	adds	r3, #2
 8010900:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8010902:	693b      	ldr	r3, [r7, #16]
 8010904:	795b      	ldrb	r3, [r3, #5]
 8010906:	78fa      	ldrb	r2, [r7, #3]
 8010908:	429a      	cmp	r2, r3
 801090a:	d002      	beq.n	8010912 <USBH_FindInterface+0x4e>
 801090c:	78fb      	ldrb	r3, [r7, #3]
 801090e:	2bff      	cmp	r3, #255	; 0xff
 8010910:	d111      	bne.n	8010936 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8010912:	693b      	ldr	r3, [r7, #16]
 8010914:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8010916:	78ba      	ldrb	r2, [r7, #2]
 8010918:	429a      	cmp	r2, r3
 801091a:	d002      	beq.n	8010922 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 801091c:	78bb      	ldrb	r3, [r7, #2]
 801091e:	2bff      	cmp	r3, #255	; 0xff
 8010920:	d109      	bne.n	8010936 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8010926:	787a      	ldrb	r2, [r7, #1]
 8010928:	429a      	cmp	r2, r3
 801092a:	d002      	beq.n	8010932 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801092c:	787b      	ldrb	r3, [r7, #1]
 801092e:	2bff      	cmp	r3, #255	; 0xff
 8010930:	d101      	bne.n	8010936 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8010932:	7dfb      	ldrb	r3, [r7, #23]
 8010934:	e006      	b.n	8010944 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8010936:	7dfb      	ldrb	r3, [r7, #23]
 8010938:	3301      	adds	r3, #1
 801093a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801093c:	7dfb      	ldrb	r3, [r7, #23]
 801093e:	2b01      	cmp	r3, #1
 8010940:	d9d6      	bls.n	80108f0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8010942:	23ff      	movs	r3, #255	; 0xff
}
 8010944:	4618      	mov	r0, r3
 8010946:	371c      	adds	r7, #28
 8010948:	46bd      	mov	sp, r7
 801094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094e:	4770      	bx	lr

08010950 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b082      	sub	sp, #8
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f010 ffdb 	bl	8021914 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 801095e:	2101      	movs	r1, #1
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f011 f8f2 	bl	8021b4a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8010966:	2300      	movs	r3, #0
}
 8010968:	4618      	mov	r0, r3
 801096a:	3708      	adds	r7, #8
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}

08010970 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b088      	sub	sp, #32
 8010974:	af04      	add	r7, sp, #16
 8010976:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8010978:	2302      	movs	r3, #2
 801097a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 801097c:	2300      	movs	r3, #0
 801097e:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f000 fb7e 	bl	8011082 <USBH_IsPortEnabled>
 8010986:	4603      	mov	r3, r0
 8010988:	2b00      	cmp	r3, #0
 801098a:	d10c      	bne.n	80109a6 <USBH_Process+0x36>
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	b2db      	uxtb	r3, r3
 8010992:	2b00      	cmp	r3, #0
 8010994:	d007      	beq.n	80109a6 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	b2db      	uxtb	r3, r3
 801099c:	2b03      	cmp	r3, #3
 801099e:	d002      	beq.n	80109a6 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	2203      	movs	r2, #3
 80109a4:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	b2db      	uxtb	r3, r3
 80109ac:	2b0b      	cmp	r3, #11
 80109ae:	f200 81ab 	bhi.w	8010d08 <USBH_Process+0x398>
 80109b2:	a201      	add	r2, pc, #4	; (adr r2, 80109b8 <USBH_Process+0x48>)
 80109b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109b8:	080109e9 	.word	0x080109e9
 80109bc:	08010a27 	.word	0x08010a27
 80109c0:	08010a3b 	.word	0x08010a3b
 80109c4:	08010ce3 	.word	0x08010ce3
 80109c8:	08010d09 	.word	0x08010d09
 80109cc:	08010ae5 	.word	0x08010ae5
 80109d0:	08010c7d 	.word	0x08010c7d
 80109d4:	08010b15 	.word	0x08010b15
 80109d8:	08010b51 	.word	0x08010b51
 80109dc:	08010b8b 	.word	0x08010b8b
 80109e0:	08010bd3 	.word	0x08010bd3
 80109e4:	08010ccb 	.word	0x08010ccb
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80109ee:	b2db      	uxtb	r3, r3
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	f000 818b 	beq.w	8010d0c <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2201      	movs	r2, #1
 80109fa:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 80109fc:	20c8      	movs	r0, #200	; 0xc8
 80109fe:	f011 f8ee 	bl	8021bde <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f010 ffe1 	bl	80219ca <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2201      	movs	r2, #1
 8010a0c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	4619      	mov	r1, r3
 8010a20:	f007 fe7c 	bl	801871c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8010a24:	e172      	b.n	8010d0c <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8010a2c:	2b01      	cmp	r3, #1
 8010a2e:	f040 816f 	bne.w	8010d10 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2202      	movs	r2, #2
 8010a36:	701a      	strb	r2, [r3, #0]
    }
    break;
 8010a38:	e16a      	b.n	8010d10 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8010a3a:	2064      	movs	r0, #100	; 0x64
 8010a3c:	f011 f8cf 	bl	8021bde <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f010 ff9d 	bl	8021980 <USBH_LL_GetSpeed>
 8010a46:	4603      	mov	r3, r0
 8010a48:	461a      	mov	r2, r3
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2205      	movs	r2, #5
 8010a54:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8010a56:	2100      	movs	r1, #0
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f001 fa16 	bl	8011e8a <USBH_AllocPipe>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	461a      	mov	r2, r3
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8010a66:	2180      	movs	r1, #128	; 0x80
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f001 fa0e 	bl	8011e8a <USBH_AllocPipe>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	461a      	mov	r2, r3
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	7919      	ldrb	r1, [r3, #4]
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8010a86:	687a      	ldr	r2, [r7, #4]
 8010a88:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8010a8a:	b292      	uxth	r2, r2
 8010a8c:	9202      	str	r2, [sp, #8]
 8010a8e:	2200      	movs	r2, #0
 8010a90:	9201      	str	r2, [sp, #4]
 8010a92:	9300      	str	r3, [sp, #0]
 8010a94:	4603      	mov	r3, r0
 8010a96:	2280      	movs	r2, #128	; 0x80
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f001 f9c7 	bl	8011e2c <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	7959      	ldrb	r1, [r3, #5]
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8010aae:	687a      	ldr	r2, [r7, #4]
 8010ab0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8010ab2:	b292      	uxth	r2, r2
 8010ab4:	9202      	str	r2, [sp, #8]
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	9201      	str	r2, [sp, #4]
 8010aba:	9300      	str	r3, [sp, #0]
 8010abc:	4603      	mov	r3, r0
 8010abe:	2200      	movs	r2, #0
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f001 f9b3 	bl	8011e2c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2201      	movs	r2, #1
 8010aca:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010ada:	2200      	movs	r2, #0
 8010adc:	4619      	mov	r1, r3
 8010ade:	f007 fe1d 	bl	801871c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8010ae2:	e120      	b.n	8010d26 <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f000 f923 	bl	8010d30 <USBH_HandleEnum>
 8010aea:	4603      	mov	r3, r0
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	f040 8111 	bne.w	8010d14 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2200      	movs	r2, #0
 8010af6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8010b00:	2b01      	cmp	r3, #1
 8010b02:	d103      	bne.n	8010b0c <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2208      	movs	r2, #8
 8010b08:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8010b0a:	e103      	b.n	8010d14 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2207      	movs	r2, #7
 8010b10:	701a      	strb	r2, [r3, #0]
    break;
 8010b12:	e0ff      	b.n	8010d14 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	f000 80fc 	beq.w	8010d18 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010b26:	2101      	movs	r1, #1
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2208      	movs	r2, #8
 8010b30:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2205      	movs	r2, #5
 8010b36:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010b46:	2200      	movs	r2, #0
 8010b48:	4619      	mov	r1, r3
 8010b4a:	f007 fde7 	bl	801871c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8010b4e:	e0e3      	b.n	8010d18 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	4619      	mov	r1, r3
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f000 fc09 	bl	8011372 <USBH_SetCfg>
 8010b60:	4603      	mov	r3, r0
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d102      	bne.n	8010b6c <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2209      	movs	r2, #9
 8010b6a:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2201      	movs	r2, #1
 8010b70:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010b80:	2200      	movs	r2, #0
 8010b82:	4619      	mov	r1, r3
 8010b84:	f007 fdca 	bl	801871c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8010b88:	e0cd      	b.n	8010d26 <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8010b90:	f003 0320 	and.w	r3, r3, #32
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d00a      	beq.n	8010bae <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8010b98:	2101      	movs	r1, #1
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f000 fc0c 	bl	80113b8 <USBH_SetFeature>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d106      	bne.n	8010bb4 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	220a      	movs	r2, #10
 8010baa:	701a      	strb	r2, [r3, #0]
 8010bac:	e002      	b.n	8010bb4 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	220a      	movs	r2, #10
 8010bb2:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2201      	movs	r2, #1
 8010bb8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010bc8:	2200      	movs	r2, #0
 8010bca:	4619      	mov	r1, r3
 8010bcc:	f007 fda6 	bl	801871c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8010bd0:	e0a9      	b.n	8010d26 <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d040      	beq.n	8010c5e <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2200      	movs	r2, #0
 8010be0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010be4:	2300      	movs	r3, #0
 8010be6:	73fb      	strb	r3, [r7, #15]
 8010be8:	e017      	b.n	8010c1a <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8010bea:	7bfb      	ldrb	r3, [r7, #15]
 8010bec:	687a      	ldr	r2, [r7, #4]
 8010bee:	33dc      	adds	r3, #220	; 0xdc
 8010bf0:	009b      	lsls	r3, r3, #2
 8010bf2:	4413      	add	r3, r2
 8010bf4:	685b      	ldr	r3, [r3, #4]
 8010bf6:	791a      	ldrb	r2, [r3, #4]
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d108      	bne.n	8010c14 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 8010c02:	7bfb      	ldrb	r3, [r7, #15]
 8010c04:	687a      	ldr	r2, [r7, #4]
 8010c06:	33dc      	adds	r3, #220	; 0xdc
 8010c08:	009b      	lsls	r3, r3, #2
 8010c0a:	4413      	add	r3, r2
 8010c0c:	685a      	ldr	r2, [r3, #4]
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010c14:	7bfb      	ldrb	r3, [r7, #15]
 8010c16:	3301      	adds	r3, #1
 8010c18:	73fb      	strb	r3, [r7, #15]
 8010c1a:	7bfb      	ldrb	r3, [r7, #15]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d0e4      	beq.n	8010bea <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d016      	beq.n	8010c58 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8010c30:	689b      	ldr	r3, [r3, #8]
 8010c32:	6878      	ldr	r0, [r7, #4]
 8010c34:	4798      	blx	r3
 8010c36:	4603      	mov	r3, r0
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d109      	bne.n	8010c50 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2206      	movs	r2, #6
 8010c40:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010c48:	2103      	movs	r1, #3
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	4798      	blx	r3
 8010c4e:	e006      	b.n	8010c5e <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	220d      	movs	r2, #13
 8010c54:	701a      	strb	r2, [r3, #0]
 8010c56:	e002      	b.n	8010c5e <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	220d      	movs	r2, #13
 8010c5c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2205      	movs	r2, #5
 8010c62:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010c72:	2200      	movs	r2, #0
 8010c74:	4619      	mov	r1, r3
 8010c76:	f007 fd51 	bl	801871c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8010c7a:	e054      	b.n	8010d26 <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d00f      	beq.n	8010ca6 <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8010c8c:	691b      	ldr	r3, [r3, #16]
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	4798      	blx	r3
 8010c92:	4603      	mov	r3, r0
 8010c94:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8010c96:	7bbb      	ldrb	r3, [r7, #14]
 8010c98:	b2db      	uxtb	r3, r3
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d13e      	bne.n	8010d1c <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	220b      	movs	r2, #11
 8010ca2:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8010ca4:	e03a      	b.n	8010d1c <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	220d      	movs	r2, #13
 8010caa:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2205      	movs	r2, #5
 8010cb0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	4619      	mov	r1, r3
 8010cc4:	f007 fd2a 	bl	801871c <osMessagePut>
    break;
 8010cc8:	e028      	b.n	8010d1c <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d025      	beq.n	8010d20 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8010cda:	695b      	ldr	r3, [r3, #20]
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	4798      	blx	r3
    }
    break;
 8010ce0:	e01e      	b.n	8010d20 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8010ce2:	6878      	ldr	r0, [r7, #4]
 8010ce4:	f7ff fd5e 	bl	80107a4 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d018      	beq.n	8010d24 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2200      	movs	r2, #0
 8010d02:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8010d06:	e00d      	b.n	8010d24 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 8010d08:	bf00      	nop
 8010d0a:	e00c      	b.n	8010d26 <USBH_Process+0x3b6>
    break;
 8010d0c:	bf00      	nop
 8010d0e:	e00a      	b.n	8010d26 <USBH_Process+0x3b6>
    break;
 8010d10:	bf00      	nop
 8010d12:	e008      	b.n	8010d26 <USBH_Process+0x3b6>
    break;
 8010d14:	bf00      	nop
 8010d16:	e006      	b.n	8010d26 <USBH_Process+0x3b6>
    break;
 8010d18:	bf00      	nop
 8010d1a:	e004      	b.n	8010d26 <USBH_Process+0x3b6>
    break;
 8010d1c:	bf00      	nop
 8010d1e:	e002      	b.n	8010d26 <USBH_Process+0x3b6>
    break;
 8010d20:	bf00      	nop
 8010d22:	e000      	b.n	8010d26 <USBH_Process+0x3b6>
    break;
 8010d24:	bf00      	nop
  }
 return USBH_OK;
 8010d26:	2300      	movs	r3, #0
}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	3710      	adds	r7, #16
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}

08010d30 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b088      	sub	sp, #32
 8010d34:	af04      	add	r7, sp, #16
 8010d36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8010d38:	2301      	movs	r3, #1
 8010d3a:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	785b      	ldrb	r3, [r3, #1]
 8010d40:	2b07      	cmp	r3, #7
 8010d42:	f200 8132 	bhi.w	8010faa <USBH_HandleEnum+0x27a>
 8010d46:	a201      	add	r2, pc, #4	; (adr r2, 8010d4c <USBH_HandleEnum+0x1c>)
 8010d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d4c:	08010d6d 	.word	0x08010d6d
 8010d50:	08010ddf 	.word	0x08010ddf
 8010d54:	08010df7 	.word	0x08010df7
 8010d58:	08010e6d 	.word	0x08010e6d
 8010d5c:	08010e85 	.word	0x08010e85
 8010d60:	08010ea3 	.word	0x08010ea3
 8010d64:	08010f0f 	.word	0x08010f0f
 8010d68:	08010f5f 	.word	0x08010f5f
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8010d6c:	2108      	movs	r1, #8
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f000 fa2f 	bl	80111d2 <USBH_Get_DevDesc>
 8010d74:	4603      	mov	r3, r0
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	f040 8119 	bne.w	8010fae <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2201      	movs	r2, #1
 8010d8a:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	7919      	ldrb	r1, [r3, #4]
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8010d9c:	687a      	ldr	r2, [r7, #4]
 8010d9e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8010da0:	b292      	uxth	r2, r2
 8010da2:	9202      	str	r2, [sp, #8]
 8010da4:	2200      	movs	r2, #0
 8010da6:	9201      	str	r2, [sp, #4]
 8010da8:	9300      	str	r3, [sp, #0]
 8010daa:	4603      	mov	r3, r0
 8010dac:	2280      	movs	r2, #128	; 0x80
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f001 f83c 	bl	8011e2c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	7959      	ldrb	r1, [r3, #5]
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8010dc4:	687a      	ldr	r2, [r7, #4]
 8010dc6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8010dc8:	b292      	uxth	r2, r2
 8010dca:	9202      	str	r2, [sp, #8]
 8010dcc:	2200      	movs	r2, #0
 8010dce:	9201      	str	r2, [sp, #4]
 8010dd0:	9300      	str	r3, [sp, #0]
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f001 f828 	bl	8011e2c <USBH_OpenPipe>

    }
    break;
 8010ddc:	e0e7      	b.n	8010fae <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8010dde:	2112      	movs	r1, #18
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f000 f9f6 	bl	80111d2 <USBH_Get_DevDesc>
 8010de6:	4603      	mov	r3, r0
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	f040 80e2 	bne.w	8010fb2 <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2202      	movs	r2, #2
 8010df2:	705a      	strb	r2, [r3, #1]

    }
    break;
 8010df4:	e0dd      	b.n	8010fb2 <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8010df6:	2101      	movs	r1, #1
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f000 fa96 	bl	801132a <USBH_SetAddress>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	f040 80d8 	bne.w	8010fb6 <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 8010e06:	2002      	movs	r0, #2
 8010e08:	f010 fee9 	bl	8021bde <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2201      	movs	r2, #1
 8010e10:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2203      	movs	r2, #3
 8010e18:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	7919      	ldrb	r1, [r3, #4]
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8010e2a:	687a      	ldr	r2, [r7, #4]
 8010e2c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8010e2e:	b292      	uxth	r2, r2
 8010e30:	9202      	str	r2, [sp, #8]
 8010e32:	2200      	movs	r2, #0
 8010e34:	9201      	str	r2, [sp, #4]
 8010e36:	9300      	str	r3, [sp, #0]
 8010e38:	4603      	mov	r3, r0
 8010e3a:	2280      	movs	r2, #128	; 0x80
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f000 fff5 	bl	8011e2c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	7959      	ldrb	r1, [r3, #5]
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8010e52:	687a      	ldr	r2, [r7, #4]
 8010e54:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8010e56:	b292      	uxth	r2, r2
 8010e58:	9202      	str	r2, [sp, #8]
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	9201      	str	r2, [sp, #4]
 8010e5e:	9300      	str	r3, [sp, #0]
 8010e60:	4603      	mov	r3, r0
 8010e62:	2200      	movs	r2, #0
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f000 ffe1 	bl	8011e2c <USBH_OpenPipe>
    }
    break;
 8010e6a:	e0a4      	b.n	8010fb6 <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8010e6c:	2109      	movs	r1, #9
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f000 f9d7 	bl	8011222 <USBH_Get_CfgDesc>
 8010e74:	4603      	mov	r3, r0
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	f040 809f 	bne.w	8010fba <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2204      	movs	r2, #4
 8010e80:	705a      	strb	r2, [r3, #1]
    }
    break;
 8010e82:	e09a      	b.n	8010fba <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8010e8a:	4619      	mov	r1, r3
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f000 f9c8 	bl	8011222 <USBH_Get_CfgDesc>
 8010e92:	4603      	mov	r3, r0
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	f040 8092 	bne.w	8010fbe <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2205      	movs	r2, #5
 8010e9e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8010ea0:	e08d      	b.n	8010fbe <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d01e      	beq.n	8010eea <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8010eb8:	23ff      	movs	r3, #255	; 0xff
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f000 f9d5 	bl	801126a <USBH_Get_StringDesc>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d17d      	bne.n	8010fc2 <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2206      	movs	r2, #6
 8010eca:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2205      	movs	r2, #5
 8010ed0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	f007 fc1a 	bl	801871c <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8010ee8:	e06b      	b.n	8010fc2 <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2206      	movs	r2, #6
 8010eee:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2205      	movs	r2, #5
 8010ef4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010f04:	2200      	movs	r2, #0
 8010f06:	4619      	mov	r1, r3
 8010f08:	f007 fc08 	bl	801871c <osMessagePut>
    break;
 8010f0c:	e059      	b.n	8010fc2 <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d010      	beq.n	8010f3a <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8010f24:	23ff      	movs	r3, #255	; 0xff
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f000 f99f 	bl	801126a <USBH_Get_StringDesc>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d149      	bne.n	8010fc6 <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2207      	movs	r2, #7
 8010f36:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8010f38:	e045      	b.n	8010fc6 <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2207      	movs	r2, #7
 8010f3e:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2205      	movs	r2, #5
 8010f44:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010f54:	2200      	movs	r2, #0
 8010f56:	4619      	mov	r1, r3
 8010f58:	f007 fbe0 	bl	801871c <osMessagePut>
    break;
 8010f5c:	e033      	b.n	8010fc6 <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00f      	beq.n	8010f88 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8010f74:	23ff      	movs	r3, #255	; 0xff
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	f000 f977 	bl	801126a <USBH_Get_StringDesc>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d123      	bne.n	8010fca <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8010f82:	2300      	movs	r3, #0
 8010f84:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8010f86:	e020      	b.n	8010fca <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2205      	movs	r2, #5
 8010f90:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	f007 fbba 	bl	801871c <osMessagePut>
    break;
 8010fa8:	e00f      	b.n	8010fca <USBH_HandleEnum+0x29a>

  default:
    break;
 8010faa:	bf00      	nop
 8010fac:	e00e      	b.n	8010fcc <USBH_HandleEnum+0x29c>
    break;
 8010fae:	bf00      	nop
 8010fb0:	e00c      	b.n	8010fcc <USBH_HandleEnum+0x29c>
    break;
 8010fb2:	bf00      	nop
 8010fb4:	e00a      	b.n	8010fcc <USBH_HandleEnum+0x29c>
    break;
 8010fb6:	bf00      	nop
 8010fb8:	e008      	b.n	8010fcc <USBH_HandleEnum+0x29c>
    break;
 8010fba:	bf00      	nop
 8010fbc:	e006      	b.n	8010fcc <USBH_HandleEnum+0x29c>
    break;
 8010fbe:	bf00      	nop
 8010fc0:	e004      	b.n	8010fcc <USBH_HandleEnum+0x29c>
    break;
 8010fc2:	bf00      	nop
 8010fc4:	e002      	b.n	8010fcc <USBH_HandleEnum+0x29c>
    break;
 8010fc6:	bf00      	nop
 8010fc8:	e000      	b.n	8010fcc <USBH_HandleEnum+0x29c>
    break;
 8010fca:	bf00      	nop
  }
  return Status;
 8010fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3710      	adds	r7, #16
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
 8010fd6:	bf00      	nop

08010fd8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8010fd8:	b480      	push	{r7}
 8010fda:	b083      	sub	sp, #12
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
 8010fe0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	683a      	ldr	r2, [r7, #0]
 8010fe6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8010fea:	bf00      	nop
 8010fec:	370c      	adds	r7, #12
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff4:	4770      	bx	lr

08010ff6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8010ff6:	b580      	push	{r7, lr}
 8010ff8:	b082      	sub	sp, #8
 8010ffa:	af00      	add	r7, sp, #0
 8010ffc:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8011004:	1c5a      	adds	r2, r3, #1
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f000 f804 	bl	801101a <USBH_HandleSof>
}
 8011012:	bf00      	nop
 8011014:	3708      	adds	r7, #8
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}

0801101a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 801101a:	b580      	push	{r7, lr}
 801101c:	b082      	sub	sp, #8
 801101e:	af00      	add	r7, sp, #0
 8011020:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	b2db      	uxtb	r3, r3
 8011028:	2b0b      	cmp	r3, #11
 801102a:	d10a      	bne.n	8011042 <USBH_HandleSof+0x28>
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8011032:	2b00      	cmp	r3, #0
 8011034:	d005      	beq.n	8011042 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 801103c:	699b      	ldr	r3, [r3, #24]
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	4798      	blx	r3
  }
}
 8011042:	bf00      	nop
 8011044:	3708      	adds	r7, #8
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}

0801104a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 801104a:	b480      	push	{r7}
 801104c:	b083      	sub	sp, #12
 801104e:	af00      	add	r7, sp, #0
 8011050:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	2201      	movs	r2, #1
 8011056:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 801105a:	bf00      	nop
}
 801105c:	370c      	adds	r7, #12
 801105e:	46bd      	mov	sp, r7
 8011060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011064:	4770      	bx	lr

08011066 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8011066:	b480      	push	{r7}
 8011068:	b083      	sub	sp, #12
 801106a:	af00      	add	r7, sp, #0
 801106c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2200      	movs	r2, #0
 8011072:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8011076:	bf00      	nop
}
 8011078:	370c      	adds	r7, #12
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr

08011082 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8011082:	b480      	push	{r7}
 8011084:	b083      	sub	sp, #12
 8011086:	af00      	add	r7, sp, #0
 8011088:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8011090:	4618      	mov	r0, r3
 8011092:	370c      	adds	r7, #12
 8011094:	46bd      	mov	sp, r7
 8011096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109a:	4770      	bx	lr

0801109c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	b2db      	uxtb	r3, r3
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d10f      	bne.n	80110ce <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	2201      	movs	r2, #1
 80110b2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d00e      	beq.n	80110de <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80110c6:	2104      	movs	r1, #4
 80110c8:	6878      	ldr	r0, [r7, #4]
 80110ca:	4798      	blx	r3
 80110cc:	e007      	b.n	80110de <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80110d4:	2b01      	cmp	r3, #1
 80110d6:	d102      	bne.n	80110de <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2202      	movs	r2, #2
 80110dc:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2201      	movs	r2, #1
 80110e2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80110f2:	2200      	movs	r2, #0
 80110f4:	4619      	mov	r1, r3
 80110f6:	f007 fb11 	bl	801871c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80110fa:	2300      	movs	r3, #0
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	3708      	adds	r7, #8
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}

08011104 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b082      	sub	sp, #8
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f010 fc1c 	bl	802194a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	791b      	ldrb	r3, [r3, #4]
 8011116:	4619      	mov	r1, r3
 8011118:	6878      	ldr	r0, [r7, #4]
 801111a:	f000 fed4 	bl	8011ec6 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	795b      	ldrb	r3, [r3, #5]
 8011122:	4619      	mov	r1, r3
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f000 fece 	bl	8011ec6 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	2200      	movs	r2, #0
 801112e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8011138:	2b00      	cmp	r3, #0
 801113a:	d005      	beq.n	8011148 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8011142:	2105      	movs	r1, #5
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f010 fbe3 	bl	8021914 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2203      	movs	r2, #3
 8011152:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2201      	movs	r2, #1
 8011158:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011168:	2200      	movs	r2, #0
 801116a:	4619      	mov	r1, r3
 801116c:	f007 fad6 	bl	801871c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8011170:	2300      	movs	r3, #0
}
 8011172:	4618      	mov	r0, r3
 8011174:	3708      	adds	r7, #8
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}

0801117a <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 801117a:	b580      	push	{r7, lr}
 801117c:	b086      	sub	sp, #24
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 8011188:	f107 030c 	add.w	r3, r7, #12
 801118c:	f04f 32ff 	mov.w	r2, #4294967295
 8011190:	4618      	mov	r0, r3
 8011192:	f007 fb03 	bl	801879c <osMessageGet>
    if(event.status == osEventMessage)
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	2b10      	cmp	r3, #16
 801119a:	d1f2      	bne.n	8011182 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f7ff fbe7 	bl	8010970 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80111a2:	e7ee      	b.n	8011182 <USBH_Process_OS+0x8>

080111a4 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b082      	sub	sp, #8
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2201      	movs	r2, #1
 80111b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80111c0:	2200      	movs	r2, #0
 80111c2:	4619      	mov	r1, r3
 80111c4:	f007 faaa 	bl	801871c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 80111c8:	2300      	movs	r3, #0
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	3708      	adds	r7, #8
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}

080111d2 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80111d2:	b580      	push	{r7, lr}
 80111d4:	b086      	sub	sp, #24
 80111d6:	af02      	add	r7, sp, #8
 80111d8:	6078      	str	r0, [r7, #4]
 80111da:	460b      	mov	r3, r1
 80111dc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80111e4:	78fb      	ldrb	r3, [r7, #3]
 80111e6:	b29b      	uxth	r3, r3
 80111e8:	9300      	str	r3, [sp, #0]
 80111ea:	4613      	mov	r3, r2
 80111ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80111f0:	2100      	movs	r1, #0
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	f000 f864 	bl	80112c0 <USBH_GetDescriptor>
 80111f8:	4603      	mov	r3, r0
 80111fa:	73fb      	strb	r3, [r7, #15]
 80111fc:	7bfb      	ldrb	r3, [r7, #15]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d10a      	bne.n	8011218 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f203 3022 	addw	r0, r3, #802	; 0x322
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801120e:	78fa      	ldrb	r2, [r7, #3]
 8011210:	b292      	uxth	r2, r2
 8011212:	4619      	mov	r1, r3
 8011214:	f000 f918 	bl	8011448 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8011218:	7bfb      	ldrb	r3, [r7, #15]
}
 801121a:	4618      	mov	r0, r3
 801121c:	3710      	adds	r7, #16
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}

08011222 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8011222:	b580      	push	{r7, lr}
 8011224:	b086      	sub	sp, #24
 8011226:	af02      	add	r7, sp, #8
 8011228:	6078      	str	r0, [r7, #4]
 801122a:	460b      	mov	r3, r1
 801122c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	331c      	adds	r3, #28
 8011232:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8011234:	887b      	ldrh	r3, [r7, #2]
 8011236:	9300      	str	r3, [sp, #0]
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801123e:	2100      	movs	r1, #0
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f000 f83d 	bl	80112c0 <USBH_GetDescriptor>
 8011246:	4603      	mov	r3, r0
 8011248:	72fb      	strb	r3, [r7, #11]
 801124a:	7afb      	ldrb	r3, [r7, #11]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d107      	bne.n	8011260 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8011256:	887a      	ldrh	r2, [r7, #2]
 8011258:	68f9      	ldr	r1, [r7, #12]
 801125a:	4618      	mov	r0, r3
 801125c:	f000 f964 	bl	8011528 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8011260:	7afb      	ldrb	r3, [r7, #11]
}
 8011262:	4618      	mov	r0, r3
 8011264:	3710      	adds	r7, #16
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}

0801126a <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 801126a:	b580      	push	{r7, lr}
 801126c:	b088      	sub	sp, #32
 801126e:	af02      	add	r7, sp, #8
 8011270:	60f8      	str	r0, [r7, #12]
 8011272:	607a      	str	r2, [r7, #4]
 8011274:	461a      	mov	r2, r3
 8011276:	460b      	mov	r3, r1
 8011278:	72fb      	strb	r3, [r7, #11]
 801127a:	4613      	mov	r3, r2
 801127c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 801127e:	7afb      	ldrb	r3, [r7, #11]
 8011280:	b29b      	uxth	r3, r3
 8011282:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8011286:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 801128e:	893b      	ldrh	r3, [r7, #8]
 8011290:	9300      	str	r3, [sp, #0]
 8011292:	460b      	mov	r3, r1
 8011294:	2100      	movs	r1, #0
 8011296:	68f8      	ldr	r0, [r7, #12]
 8011298:	f000 f812 	bl	80112c0 <USBH_GetDescriptor>
 801129c:	4603      	mov	r3, r0
 801129e:	75fb      	strb	r3, [r7, #23]
 80112a0:	7dfb      	ldrb	r3, [r7, #23]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d107      	bne.n	80112b6 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80112ac:	893a      	ldrh	r2, [r7, #8]
 80112ae:	6879      	ldr	r1, [r7, #4]
 80112b0:	4618      	mov	r0, r3
 80112b2:	f000 fa37 	bl	8011724 <USBH_ParseStringDesc>
  }
  return status;
 80112b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3718      	adds	r7, #24
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}

080112c0 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b084      	sub	sp, #16
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	60f8      	str	r0, [r7, #12]
 80112c8:	607b      	str	r3, [r7, #4]
 80112ca:	460b      	mov	r3, r1
 80112cc:	72fb      	strb	r3, [r7, #11]
 80112ce:	4613      	mov	r3, r2
 80112d0:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	789b      	ldrb	r3, [r3, #2]
 80112d6:	2b01      	cmp	r3, #1
 80112d8:	d11c      	bne.n	8011314 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80112da:	7afb      	ldrb	r3, [r7, #11]
 80112dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80112e0:	b2da      	uxtb	r2, r3
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2206      	movs	r2, #6
 80112ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	893a      	ldrh	r2, [r7, #8]
 80112f0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80112f2:	893b      	ldrh	r3, [r7, #8]
 80112f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80112f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80112fc:	d104      	bne.n	8011308 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	f240 4209 	movw	r2, #1033	; 0x409
 8011304:	829a      	strh	r2, [r3, #20]
 8011306:	e002      	b.n	801130e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	2200      	movs	r2, #0
 801130c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	8b3a      	ldrh	r2, [r7, #24]
 8011312:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8011314:	8b3b      	ldrh	r3, [r7, #24]
 8011316:	461a      	mov	r2, r3
 8011318:	6879      	ldr	r1, [r7, #4]
 801131a:	68f8      	ldr	r0, [r7, #12]
 801131c:	f000 fa50 	bl	80117c0 <USBH_CtlReq>
 8011320:	4603      	mov	r3, r0
}
 8011322:	4618      	mov	r0, r3
 8011324:	3710      	adds	r7, #16
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}

0801132a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801132a:	b580      	push	{r7, lr}
 801132c:	b082      	sub	sp, #8
 801132e:	af00      	add	r7, sp, #0
 8011330:	6078      	str	r0, [r7, #4]
 8011332:	460b      	mov	r3, r1
 8011334:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	789b      	ldrb	r3, [r3, #2]
 801133a:	2b01      	cmp	r3, #1
 801133c:	d10f      	bne.n	801135e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2200      	movs	r2, #0
 8011342:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2205      	movs	r2, #5
 8011348:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801134a:	78fb      	ldrb	r3, [r7, #3]
 801134c:	b29a      	uxth	r2, r3
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2200      	movs	r2, #0
 8011356:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2200      	movs	r2, #0
 801135c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 801135e:	2200      	movs	r2, #0
 8011360:	2100      	movs	r1, #0
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f000 fa2c 	bl	80117c0 <USBH_CtlReq>
 8011368:	4603      	mov	r3, r0
}
 801136a:	4618      	mov	r0, r3
 801136c:	3708      	adds	r7, #8
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}

08011372 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8011372:	b580      	push	{r7, lr}
 8011374:	b082      	sub	sp, #8
 8011376:	af00      	add	r7, sp, #0
 8011378:	6078      	str	r0, [r7, #4]
 801137a:	460b      	mov	r3, r1
 801137c:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	789b      	ldrb	r3, [r3, #2]
 8011382:	2b01      	cmp	r3, #1
 8011384:	d10e      	bne.n	80113a4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2200      	movs	r2, #0
 801138a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2209      	movs	r2, #9
 8011390:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	887a      	ldrh	r2, [r7, #2]
 8011396:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2200      	movs	r2, #0
 801139c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	2200      	movs	r2, #0
 80113a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80113a4:	2200      	movs	r2, #0
 80113a6:	2100      	movs	r1, #0
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f000 fa09 	bl	80117c0 <USBH_CtlReq>
 80113ae:	4603      	mov	r3, r0
}
 80113b0:	4618      	mov	r0, r3
 80113b2:	3708      	adds	r7, #8
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}

080113b8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
 80113c0:	460b      	mov	r3, r1
 80113c2:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	789b      	ldrb	r3, [r3, #2]
 80113c8:	2b01      	cmp	r3, #1
 80113ca:	d10f      	bne.n	80113ec <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	2200      	movs	r2, #0
 80113d0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	2203      	movs	r2, #3
 80113d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80113d8:	78fb      	ldrb	r3, [r7, #3]
 80113da:	b29a      	uxth	r2, r3
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2200      	movs	r2, #0
 80113e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2200      	movs	r2, #0
 80113ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80113ec:	2200      	movs	r2, #0
 80113ee:	2100      	movs	r1, #0
 80113f0:	6878      	ldr	r0, [r7, #4]
 80113f2:	f000 f9e5 	bl	80117c0 <USBH_CtlReq>
 80113f6:	4603      	mov	r3, r0
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3708      	adds	r7, #8
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b082      	sub	sp, #8
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	460b      	mov	r3, r1
 801140a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	789b      	ldrb	r3, [r3, #2]
 8011410:	2b01      	cmp	r3, #1
 8011412:	d10f      	bne.n	8011434 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2202      	movs	r2, #2
 8011418:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2201      	movs	r2, #1
 801141e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	2200      	movs	r2, #0
 8011424:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8011426:	78fb      	ldrb	r3, [r7, #3]
 8011428:	b29a      	uxth	r2, r3
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2200      	movs	r2, #0
 8011432:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8011434:	2200      	movs	r2, #0
 8011436:	2100      	movs	r1, #0
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f000 f9c1 	bl	80117c0 <USBH_CtlReq>
 801143e:	4603      	mov	r3, r0
}
 8011440:	4618      	mov	r0, r3
 8011442:	3708      	adds	r7, #8
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}

08011448 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8011448:	b480      	push	{r7}
 801144a:	b085      	sub	sp, #20
 801144c:	af00      	add	r7, sp, #0
 801144e:	60f8      	str	r0, [r7, #12]
 8011450:	60b9      	str	r1, [r7, #8]
 8011452:	4613      	mov	r3, r2
 8011454:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	781a      	ldrb	r2, [r3, #0]
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	785a      	ldrb	r2, [r3, #1]
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	3302      	adds	r3, #2
 801146a:	781b      	ldrb	r3, [r3, #0]
 801146c:	b29a      	uxth	r2, r3
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	3303      	adds	r3, #3
 8011472:	781b      	ldrb	r3, [r3, #0]
 8011474:	b29b      	uxth	r3, r3
 8011476:	021b      	lsls	r3, r3, #8
 8011478:	b29b      	uxth	r3, r3
 801147a:	4313      	orrs	r3, r2
 801147c:	b29a      	uxth	r2, r3
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8011482:	68bb      	ldr	r3, [r7, #8]
 8011484:	791a      	ldrb	r2, [r3, #4]
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	795a      	ldrb	r2, [r3, #5]
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	799a      	ldrb	r2, [r3, #6]
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	79da      	ldrb	r2, [r3, #7]
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80114a2:	88fb      	ldrh	r3, [r7, #6]
 80114a4:	2b08      	cmp	r3, #8
 80114a6:	d939      	bls.n	801151c <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	3308      	adds	r3, #8
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	b29a      	uxth	r2, r3
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	3309      	adds	r3, #9
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	b29b      	uxth	r3, r3
 80114b8:	021b      	lsls	r3, r3, #8
 80114ba:	b29b      	uxth	r3, r3
 80114bc:	4313      	orrs	r3, r2
 80114be:	b29a      	uxth	r2, r3
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	330a      	adds	r3, #10
 80114c8:	781b      	ldrb	r3, [r3, #0]
 80114ca:	b29a      	uxth	r2, r3
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	330b      	adds	r3, #11
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	b29b      	uxth	r3, r3
 80114d4:	021b      	lsls	r3, r3, #8
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	4313      	orrs	r3, r2
 80114da:	b29a      	uxth	r2, r3
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	330c      	adds	r3, #12
 80114e4:	781b      	ldrb	r3, [r3, #0]
 80114e6:	b29a      	uxth	r2, r3
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	330d      	adds	r3, #13
 80114ec:	781b      	ldrb	r3, [r3, #0]
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	021b      	lsls	r3, r3, #8
 80114f2:	b29b      	uxth	r3, r3
 80114f4:	4313      	orrs	r3, r2
 80114f6:	b29a      	uxth	r2, r3
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	7b9a      	ldrb	r2, [r3, #14]
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	7bda      	ldrb	r2, [r3, #15]
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	7c1a      	ldrb	r2, [r3, #16]
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	7c5a      	ldrb	r2, [r3, #17]
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	745a      	strb	r2, [r3, #17]
  }
}
 801151c:	bf00      	nop
 801151e:	3714      	adds	r7, #20
 8011520:	46bd      	mov	sp, r7
 8011522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011526:	4770      	bx	lr

08011528 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b08a      	sub	sp, #40	; 0x28
 801152c:	af00      	add	r7, sp, #0
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	4613      	mov	r3, r2
 8011534:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 801153a:	2300      	movs	r3, #0
 801153c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8011540:	2300      	movs	r3, #0
 8011542:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	781a      	ldrb	r2, [r3, #0]
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	785a      	ldrb	r2, [r3, #1]
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	3302      	adds	r3, #2
 801155e:	781b      	ldrb	r3, [r3, #0]
 8011560:	b29a      	uxth	r2, r3
 8011562:	68bb      	ldr	r3, [r7, #8]
 8011564:	3303      	adds	r3, #3
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	b29b      	uxth	r3, r3
 801156a:	021b      	lsls	r3, r3, #8
 801156c:	b29b      	uxth	r3, r3
 801156e:	4313      	orrs	r3, r2
 8011570:	b29a      	uxth	r2, r3
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	791a      	ldrb	r2, [r3, #4]
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	795a      	ldrb	r2, [r3, #5]
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	799a      	ldrb	r2, [r3, #6]
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	79da      	ldrb	r2, [r3, #7]
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	7a1a      	ldrb	r2, [r3, #8]
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 801159e:	88fb      	ldrh	r3, [r7, #6]
 80115a0:	2b09      	cmp	r3, #9
 80115a2:	d95f      	bls.n	8011664 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80115a4:	2309      	movs	r3, #9
 80115a6:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80115a8:	2300      	movs	r3, #0
 80115aa:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80115ac:	e051      	b.n	8011652 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80115ae:	f107 0316 	add.w	r3, r7, #22
 80115b2:	4619      	mov	r1, r3
 80115b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80115b6:	f000 f8e8 	bl	801178a <USBH_GetNextDesc>
 80115ba:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80115bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115be:	785b      	ldrb	r3, [r3, #1]
 80115c0:	2b04      	cmp	r3, #4
 80115c2:	d146      	bne.n	8011652 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80115c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80115c8:	221a      	movs	r2, #26
 80115ca:	fb02 f303 	mul.w	r3, r2, r3
 80115ce:	3308      	adds	r3, #8
 80115d0:	68fa      	ldr	r2, [r7, #12]
 80115d2:	4413      	add	r3, r2
 80115d4:	3302      	adds	r3, #2
 80115d6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 80115d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80115da:	69f8      	ldr	r0, [r7, #28]
 80115dc:	f000 f846 	bl	801166c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80115e0:	2300      	movs	r3, #0
 80115e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80115e6:	2300      	movs	r3, #0
 80115e8:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80115ea:	e022      	b.n	8011632 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80115ec:	f107 0316 	add.w	r3, r7, #22
 80115f0:	4619      	mov	r1, r3
 80115f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80115f4:	f000 f8c9 	bl	801178a <USBH_GetNextDesc>
 80115f8:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80115fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115fc:	785b      	ldrb	r3, [r3, #1]
 80115fe:	2b05      	cmp	r3, #5
 8011600:	d117      	bne.n	8011632 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8011602:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011606:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801160a:	3201      	adds	r2, #1
 801160c:	00d2      	lsls	r2, r2, #3
 801160e:	211a      	movs	r1, #26
 8011610:	fb01 f303 	mul.w	r3, r1, r3
 8011614:	4413      	add	r3, r2
 8011616:	3308      	adds	r3, #8
 8011618:	68fa      	ldr	r2, [r7, #12]
 801161a:	4413      	add	r3, r2
 801161c:	3304      	adds	r3, #4
 801161e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8011620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011622:	69b8      	ldr	r0, [r7, #24]
 8011624:	f000 f851 	bl	80116ca <USBH_ParseEPDesc>
            ep_ix++;
 8011628:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801162c:	3301      	adds	r3, #1
 801162e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011632:	69fb      	ldr	r3, [r7, #28]
 8011634:	791b      	ldrb	r3, [r3, #4]
 8011636:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801163a:	429a      	cmp	r2, r3
 801163c:	d204      	bcs.n	8011648 <USBH_ParseCfgDesc+0x120>
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	885a      	ldrh	r2, [r3, #2]
 8011642:	8afb      	ldrh	r3, [r7, #22]
 8011644:	429a      	cmp	r2, r3
 8011646:	d8d1      	bhi.n	80115ec <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8011648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801164c:	3301      	adds	r3, #1
 801164e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011652:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011656:	2b01      	cmp	r3, #1
 8011658:	d804      	bhi.n	8011664 <USBH_ParseCfgDesc+0x13c>
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	885a      	ldrh	r2, [r3, #2]
 801165e:	8afb      	ldrh	r3, [r7, #22]
 8011660:	429a      	cmp	r2, r3
 8011662:	d8a4      	bhi.n	80115ae <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8011664:	bf00      	nop
 8011666:	3728      	adds	r7, #40	; 0x28
 8011668:	46bd      	mov	sp, r7
 801166a:	bd80      	pop	{r7, pc}

0801166c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 801166c:	b480      	push	{r7}
 801166e:	b083      	sub	sp, #12
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
 8011674:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	781a      	ldrb	r2, [r3, #0]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	785a      	ldrb	r2, [r3, #1]
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	789a      	ldrb	r2, [r3, #2]
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	78da      	ldrb	r2, [r3, #3]
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8011696:	683b      	ldr	r3, [r7, #0]
 8011698:	791a      	ldrb	r2, [r3, #4]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	795a      	ldrb	r2, [r3, #5]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	799a      	ldrb	r2, [r3, #6]
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	79da      	ldrb	r2, [r3, #7]
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	7a1a      	ldrb	r2, [r3, #8]
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	721a      	strb	r2, [r3, #8]
}
 80116be:	bf00      	nop
 80116c0:	370c      	adds	r7, #12
 80116c2:	46bd      	mov	sp, r7
 80116c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c8:	4770      	bx	lr

080116ca <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 80116ca:	b480      	push	{r7}
 80116cc:	b083      	sub	sp, #12
 80116ce:	af00      	add	r7, sp, #0
 80116d0:	6078      	str	r0, [r7, #4]
 80116d2:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	781a      	ldrb	r2, [r3, #0]
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	785a      	ldrb	r2, [r3, #1]
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	789a      	ldrb	r2, [r3, #2]
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	78da      	ldrb	r2, [r3, #3]
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	3304      	adds	r3, #4
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	b29a      	uxth	r2, r3
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	3305      	adds	r3, #5
 8011700:	781b      	ldrb	r3, [r3, #0]
 8011702:	b29b      	uxth	r3, r3
 8011704:	021b      	lsls	r3, r3, #8
 8011706:	b29b      	uxth	r3, r3
 8011708:	4313      	orrs	r3, r2
 801170a:	b29a      	uxth	r2, r3
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	799a      	ldrb	r2, [r3, #6]
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	719a      	strb	r2, [r3, #6]
}
 8011718:	bf00      	nop
 801171a:	370c      	adds	r7, #12
 801171c:	46bd      	mov	sp, r7
 801171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011722:	4770      	bx	lr

08011724 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8011724:	b480      	push	{r7}
 8011726:	b087      	sub	sp, #28
 8011728:	af00      	add	r7, sp, #0
 801172a:	60f8      	str	r0, [r7, #12]
 801172c:	60b9      	str	r1, [r7, #8]
 801172e:	4613      	mov	r3, r2
 8011730:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	3301      	adds	r3, #1
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	2b03      	cmp	r3, #3
 801173a:	d120      	bne.n	801177e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	1e9a      	subs	r2, r3, #2
 8011742:	88fb      	ldrh	r3, [r7, #6]
 8011744:	4293      	cmp	r3, r2
 8011746:	bf28      	it	cs
 8011748:	4613      	movcs	r3, r2
 801174a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	3302      	adds	r3, #2
 8011750:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8011752:	2300      	movs	r3, #0
 8011754:	82fb      	strh	r3, [r7, #22]
 8011756:	e00b      	b.n	8011770 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8011758:	8afb      	ldrh	r3, [r7, #22]
 801175a:	68fa      	ldr	r2, [r7, #12]
 801175c:	4413      	add	r3, r2
 801175e:	781a      	ldrb	r2, [r3, #0]
 8011760:	68bb      	ldr	r3, [r7, #8]
 8011762:	701a      	strb	r2, [r3, #0]
      pdest++;
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	3301      	adds	r3, #1
 8011768:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 801176a:	8afb      	ldrh	r3, [r7, #22]
 801176c:	3302      	adds	r3, #2
 801176e:	82fb      	strh	r3, [r7, #22]
 8011770:	8afa      	ldrh	r2, [r7, #22]
 8011772:	8abb      	ldrh	r3, [r7, #20]
 8011774:	429a      	cmp	r2, r3
 8011776:	d3ef      	bcc.n	8011758 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	2200      	movs	r2, #0
 801177c:	701a      	strb	r2, [r3, #0]
  }
}
 801177e:	bf00      	nop
 8011780:	371c      	adds	r7, #28
 8011782:	46bd      	mov	sp, r7
 8011784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011788:	4770      	bx	lr

0801178a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 801178a:	b480      	push	{r7}
 801178c:	b085      	sub	sp, #20
 801178e:	af00      	add	r7, sp, #0
 8011790:	6078      	str	r0, [r7, #4]
 8011792:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	881a      	ldrh	r2, [r3, #0]
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	b29b      	uxth	r3, r3
 801179e:	4413      	add	r3, r2
 80117a0:	b29a      	uxth	r2, r3
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	4413      	add	r3, r2
 80117b0:	60fb      	str	r3, [r7, #12]

  return(pnext);
 80117b2:	68fb      	ldr	r3, [r7, #12]
}
 80117b4:	4618      	mov	r0, r3
 80117b6:	3714      	adds	r7, #20
 80117b8:	46bd      	mov	sp, r7
 80117ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117be:	4770      	bx	lr

080117c0 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b086      	sub	sp, #24
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	60f8      	str	r0, [r7, #12]
 80117c8:	60b9      	str	r1, [r7, #8]
 80117ca:	4613      	mov	r3, r2
 80117cc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80117ce:	2301      	movs	r3, #1
 80117d0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	789b      	ldrb	r3, [r3, #2]
 80117d6:	2b01      	cmp	r3, #1
 80117d8:	d002      	beq.n	80117e0 <USBH_CtlReq+0x20>
 80117da:	2b02      	cmp	r3, #2
 80117dc:	d01d      	beq.n	801181a <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 80117de:	e042      	b.n	8011866 <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	68ba      	ldr	r2, [r7, #8]
 80117e4:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	88fa      	ldrh	r2, [r7, #6]
 80117ea:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	2201      	movs	r2, #1
 80117f0:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	2202      	movs	r2, #2
 80117f6:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 80117f8:	2301      	movs	r3, #1
 80117fa:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	2203      	movs	r2, #3
 8011800:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011810:	2200      	movs	r2, #0
 8011812:	4619      	mov	r1, r3
 8011814:	f006 ff82 	bl	801871c <osMessagePut>
    break;
 8011818:	e025      	b.n	8011866 <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 801181a:	68f8      	ldr	r0, [r7, #12]
 801181c:	f000 f828 	bl	8011870 <USBH_HandleControl>
 8011820:	4603      	mov	r3, r0
 8011822:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8011824:	7dfb      	ldrb	r3, [r7, #23]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d108      	bne.n	801183c <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	2201      	movs	r2, #1
 801182e:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	2200      	movs	r2, #0
 8011834:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8011836:	2300      	movs	r3, #0
 8011838:	75fb      	strb	r3, [r7, #23]
    break;
 801183a:	e013      	b.n	8011864 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 801183c:	7dfb      	ldrb	r3, [r7, #23]
 801183e:	2b03      	cmp	r3, #3
 8011840:	d108      	bne.n	8011854 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	2201      	movs	r2, #1
 8011846:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	2200      	movs	r2, #0
 801184c:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 801184e:	2303      	movs	r3, #3
 8011850:	75fb      	strb	r3, [r7, #23]
    break;
 8011852:	e007      	b.n	8011864 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 8011854:	7dfb      	ldrb	r3, [r7, #23]
 8011856:	2b02      	cmp	r3, #2
 8011858:	d104      	bne.n	8011864 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	2201      	movs	r2, #1
 801185e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8011860:	2302      	movs	r3, #2
 8011862:	75fb      	strb	r3, [r7, #23]
    break;
 8011864:	bf00      	nop
  }
  return status;
 8011866:	7dfb      	ldrb	r3, [r7, #23]
}
 8011868:	4618      	mov	r0, r3
 801186a:	3718      	adds	r7, #24
 801186c:	46bd      	mov	sp, r7
 801186e:	bd80      	pop	{r7, pc}

08011870 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b086      	sub	sp, #24
 8011874:	af02      	add	r7, sp, #8
 8011876:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8011878:	2301      	movs	r3, #1
 801187a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801187c:	2300      	movs	r3, #0
 801187e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	7e1b      	ldrb	r3, [r3, #24]
 8011884:	3b01      	subs	r3, #1
 8011886:	2b0a      	cmp	r3, #10
 8011888:	f200 821f 	bhi.w	8011cca <USBH_HandleControl+0x45a>
 801188c:	a201      	add	r2, pc, #4	; (adr r2, 8011894 <USBH_HandleControl+0x24>)
 801188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011892:	bf00      	nop
 8011894:	080118c1 	.word	0x080118c1
 8011898:	080118db 	.word	0x080118db
 801189c:	0801197d 	.word	0x0801197d
 80118a0:	080119a3 	.word	0x080119a3
 80118a4:	08011a2f 	.word	0x08011a2f
 80118a8:	08011a5b 	.word	0x08011a5b
 80118ac:	08011b1d 	.word	0x08011b1d
 80118b0:	08011b3f 	.word	0x08011b3f
 80118b4:	08011bd1 	.word	0x08011bd1
 80118b8:	08011bf9 	.word	0x08011bf9
 80118bc:	08011c8b 	.word	0x08011c8b
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f103 0110 	add.w	r1, r3, #16
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	795b      	ldrb	r3, [r3, #5]
 80118ca:	461a      	mov	r2, r3
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	f000 fa0d 	bl	8011cec <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2202      	movs	r2, #2
 80118d6:	761a      	strb	r2, [r3, #24]
    break;
 80118d8:	e202      	b.n	8011ce0 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	795b      	ldrb	r3, [r3, #5]
 80118de:	4619      	mov	r1, r3
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f010 f91f 	bl	8021b24 <USBH_LL_GetURBState>
 80118e6:	4603      	mov	r3, r0
 80118e8:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 80118ea:	7bbb      	ldrb	r3, [r7, #14]
 80118ec:	2b01      	cmp	r3, #1
 80118ee:	d12c      	bne.n	801194a <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	7c1b      	ldrb	r3, [r3, #16]
 80118f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80118f8:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	8adb      	ldrh	r3, [r3, #22]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d00a      	beq.n	8011918 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8011902:	7b7b      	ldrb	r3, [r7, #13]
 8011904:	2b80      	cmp	r3, #128	; 0x80
 8011906:	d103      	bne.n	8011910 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2203      	movs	r2, #3
 801190c:	761a      	strb	r2, [r3, #24]
 801190e:	e00d      	b.n	801192c <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2205      	movs	r2, #5
 8011914:	761a      	strb	r2, [r3, #24]
 8011916:	e009      	b.n	801192c <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8011918:	7b7b      	ldrb	r3, [r7, #13]
 801191a:	2b80      	cmp	r3, #128	; 0x80
 801191c:	d103      	bne.n	8011926 <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	2209      	movs	r2, #9
 8011922:	761a      	strb	r2, [r3, #24]
 8011924:	e002      	b.n	801192c <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2207      	movs	r2, #7
 801192a:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2203      	movs	r2, #3
 8011930:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011940:	2200      	movs	r2, #0
 8011942:	4619      	mov	r1, r3
 8011944:	f006 feea 	bl	801871c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8011948:	e1c1      	b.n	8011cce <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801194a:	7bbb      	ldrb	r3, [r7, #14]
 801194c:	2b04      	cmp	r3, #4
 801194e:	d003      	beq.n	8011958 <USBH_HandleControl+0xe8>
 8011950:	7bbb      	ldrb	r3, [r7, #14]
 8011952:	2b02      	cmp	r3, #2
 8011954:	f040 81bb 	bne.w	8011cce <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	220b      	movs	r2, #11
 801195c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2203      	movs	r2, #3
 8011962:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011972:	2200      	movs	r2, #0
 8011974:	4619      	mov	r1, r3
 8011976:	f006 fed1 	bl	801871c <osMessagePut>
    break;
 801197a:	e1a8      	b.n	8011cce <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8011982:	b29a      	uxth	r2, r3
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6899      	ldr	r1, [r3, #8]
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	899a      	ldrh	r2, [r3, #12]
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	791b      	ldrb	r3, [r3, #4]
 8011994:	6878      	ldr	r0, [r7, #4]
 8011996:	f000 f9e8 	bl	8011d6a <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2204      	movs	r2, #4
 801199e:	761a      	strb	r2, [r3, #24]
    break;
 80119a0:	e19e      	b.n	8011ce0 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	791b      	ldrb	r3, [r3, #4]
 80119a6:	4619      	mov	r1, r3
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f010 f8bb 	bl	8021b24 <USBH_LL_GetURBState>
 80119ae:	4603      	mov	r3, r0
 80119b0:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 80119b2:	7bbb      	ldrb	r3, [r7, #14]
 80119b4:	2b01      	cmp	r3, #1
 80119b6:	d110      	bne.n	80119da <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2209      	movs	r2, #9
 80119bc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2203      	movs	r2, #3
 80119c2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80119d2:	2200      	movs	r2, #0
 80119d4:	4619      	mov	r1, r3
 80119d6:	f006 fea1 	bl	801871c <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80119da:	7bbb      	ldrb	r3, [r7, #14]
 80119dc:	2b05      	cmp	r3, #5
 80119de:	d110      	bne.n	8011a02 <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 80119e0:	2303      	movs	r3, #3
 80119e2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2203      	movs	r2, #3
 80119e8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80119f8:	2200      	movs	r2, #0
 80119fa:	4619      	mov	r1, r3
 80119fc:	f006 fe8e 	bl	801871c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8011a00:	e167      	b.n	8011cd2 <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 8011a02:	7bbb      	ldrb	r3, [r7, #14]
 8011a04:	2b04      	cmp	r3, #4
 8011a06:	f040 8164 	bne.w	8011cd2 <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	220b      	movs	r2, #11
 8011a0e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2203      	movs	r2, #3
 8011a14:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011a24:	2200      	movs	r2, #0
 8011a26:	4619      	mov	r1, r3
 8011a28:	f006 fe78 	bl	801871c <osMessagePut>
    break;
 8011a2c:	e151      	b.n	8011cd2 <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6899      	ldr	r1, [r3, #8]
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	899a      	ldrh	r2, [r3, #12]
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	7958      	ldrb	r0, [r3, #5]
 8011a3a:	2301      	movs	r3, #1
 8011a3c:	9300      	str	r3, [sp, #0]
 8011a3e:	4603      	mov	r3, r0
 8011a40:	6878      	ldr	r0, [r7, #4]
 8011a42:	f000 f96d 	bl	8011d20 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8011a4c:	b29a      	uxth	r2, r3
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2206      	movs	r2, #6
 8011a56:	761a      	strb	r2, [r3, #24]
    break;
 8011a58:	e142      	b.n	8011ce0 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	795b      	ldrb	r3, [r3, #5]
 8011a5e:	4619      	mov	r1, r3
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f010 f85f 	bl	8021b24 <USBH_LL_GetURBState>
 8011a66:	4603      	mov	r3, r0
 8011a68:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8011a6a:	7bbb      	ldrb	r3, [r7, #14]
 8011a6c:	2b01      	cmp	r3, #1
 8011a6e:	d111      	bne.n	8011a94 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2207      	movs	r2, #7
 8011a74:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2203      	movs	r2, #3
 8011a7a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	4619      	mov	r1, r3
 8011a8e:	f006 fe45 	bl	801871c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8011a92:	e120      	b.n	8011cd6 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 8011a94:	7bbb      	ldrb	r3, [r7, #14]
 8011a96:	2b05      	cmp	r3, #5
 8011a98:	d113      	bne.n	8011ac2 <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	220c      	movs	r2, #12
 8011a9e:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8011aa0:	2303      	movs	r3, #3
 8011aa2:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2203      	movs	r2, #3
 8011aa8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011ab8:	2200      	movs	r2, #0
 8011aba:	4619      	mov	r1, r3
 8011abc:	f006 fe2e 	bl	801871c <osMessagePut>
    break;
 8011ac0:	e109      	b.n	8011cd6 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8011ac2:	7bbb      	ldrb	r3, [r7, #14]
 8011ac4:	2b02      	cmp	r3, #2
 8011ac6:	d111      	bne.n	8011aec <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2205      	movs	r2, #5
 8011acc:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2203      	movs	r2, #3
 8011ad2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	4619      	mov	r1, r3
 8011ae6:	f006 fe19 	bl	801871c <osMessagePut>
    break;
 8011aea:	e0f4      	b.n	8011cd6 <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 8011aec:	7bbb      	ldrb	r3, [r7, #14]
 8011aee:	2b04      	cmp	r3, #4
 8011af0:	f040 80f1 	bne.w	8011cd6 <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	220b      	movs	r2, #11
 8011af8:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8011afa:	2302      	movs	r3, #2
 8011afc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	2203      	movs	r2, #3
 8011b02:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011b12:	2200      	movs	r2, #0
 8011b14:	4619      	mov	r1, r3
 8011b16:	f006 fe01 	bl	801871c <osMessagePut>
    break;
 8011b1a:	e0dc      	b.n	8011cd6 <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	791b      	ldrb	r3, [r3, #4]
 8011b20:	2200      	movs	r2, #0
 8011b22:	2100      	movs	r1, #0
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	f000 f920 	bl	8011d6a <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8011b30:	b29a      	uxth	r2, r3
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2208      	movs	r2, #8
 8011b3a:	761a      	strb	r2, [r3, #24]

    break;
 8011b3c:	e0d0      	b.n	8011ce0 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	791b      	ldrb	r3, [r3, #4]
 8011b42:	4619      	mov	r1, r3
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f00f ffed 	bl	8021b24 <USBH_LL_GetURBState>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8011b4e:	7bbb      	ldrb	r3, [r7, #14]
 8011b50:	2b01      	cmp	r3, #1
 8011b52:	d113      	bne.n	8011b7c <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	220d      	movs	r2, #13
 8011b58:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2203      	movs	r2, #3
 8011b62:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011b72:	2200      	movs	r2, #0
 8011b74:	4619      	mov	r1, r3
 8011b76:	f006 fdd1 	bl	801871c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8011b7a:	e0ae      	b.n	8011cda <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 8011b7c:	7bbb      	ldrb	r3, [r7, #14]
 8011b7e:	2b04      	cmp	r3, #4
 8011b80:	d111      	bne.n	8011ba6 <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	220b      	movs	r2, #11
 8011b86:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2203      	movs	r2, #3
 8011b8c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	4619      	mov	r1, r3
 8011ba0:	f006 fdbc 	bl	801871c <osMessagePut>
    break;
 8011ba4:	e099      	b.n	8011cda <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 8011ba6:	7bbb      	ldrb	r3, [r7, #14]
 8011ba8:	2b05      	cmp	r3, #5
 8011baa:	f040 8096 	bne.w	8011cda <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 8011bae:	2303      	movs	r3, #3
 8011bb0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2203      	movs	r2, #3
 8011bb6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	4619      	mov	r1, r3
 8011bca:	f006 fda7 	bl	801871c <osMessagePut>
    break;
 8011bce:	e084      	b.n	8011cda <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	795a      	ldrb	r2, [r3, #5]
 8011bd4:	2301      	movs	r3, #1
 8011bd6:	9300      	str	r3, [sp, #0]
 8011bd8:	4613      	mov	r3, r2
 8011bda:	2200      	movs	r2, #0
 8011bdc:	2100      	movs	r1, #0
 8011bde:	6878      	ldr	r0, [r7, #4]
 8011be0:	f000 f89e 	bl	8011d20 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8011bea:	b29a      	uxth	r2, r3
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	220a      	movs	r2, #10
 8011bf4:	761a      	strb	r2, [r3, #24]
    break;
 8011bf6:	e073      	b.n	8011ce0 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	795b      	ldrb	r3, [r3, #5]
 8011bfc:	4619      	mov	r1, r3
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f00f ff90 	bl	8021b24 <USBH_LL_GetURBState>
 8011c04:	4603      	mov	r3, r0
 8011c06:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8011c08:	7bbb      	ldrb	r3, [r7, #14]
 8011c0a:	2b01      	cmp	r3, #1
 8011c0c:	d113      	bne.n	8011c36 <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	220d      	movs	r2, #13
 8011c16:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	2203      	movs	r2, #3
 8011c1c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	4619      	mov	r1, r3
 8011c30:	f006 fd74 	bl	801871c <osMessagePut>
#endif
#endif
      }

    }
    break;
 8011c34:	e053      	b.n	8011cde <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8011c36:	7bbb      	ldrb	r3, [r7, #14]
 8011c38:	2b02      	cmp	r3, #2
 8011c3a:	d111      	bne.n	8011c60 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2209      	movs	r2, #9
 8011c40:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	2203      	movs	r2, #3
 8011c46:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011c56:	2200      	movs	r2, #0
 8011c58:	4619      	mov	r1, r3
 8011c5a:	f006 fd5f 	bl	801871c <osMessagePut>
    break;
 8011c5e:	e03e      	b.n	8011cde <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 8011c60:	7bbb      	ldrb	r3, [r7, #14]
 8011c62:	2b04      	cmp	r3, #4
 8011c64:	d13b      	bne.n	8011cde <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	220b      	movs	r2, #11
 8011c6a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	2203      	movs	r2, #3
 8011c70:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011c80:	2200      	movs	r2, #0
 8011c82:	4619      	mov	r1, r3
 8011c84:	f006 fd4a 	bl	801871c <osMessagePut>
    break;
 8011c88:	e029      	b.n	8011cde <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	7e5b      	ldrb	r3, [r3, #25]
 8011c8e:	3301      	adds	r3, #1
 8011c90:	b2da      	uxtb	r2, r3
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	765a      	strb	r2, [r3, #25]
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	7e5b      	ldrb	r3, [r3, #25]
 8011c9a:	2b02      	cmp	r3, #2
 8011c9c:	d809      	bhi.n	8011cb2 <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8011c9e:	6878      	ldr	r0, [r7, #4]
 8011ca0:	f00f fe53 	bl	802194a <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	2201      	movs	r2, #1
 8011ca8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2201      	movs	r2, #1
 8011cae:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8011cb0:	e016      	b.n	8011ce0 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8011cb8:	2106      	movs	r1, #6
 8011cba:	6878      	ldr	r0, [r7, #4]
 8011cbc:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8011cc4:	2302      	movs	r3, #2
 8011cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8011cc8:	e00a      	b.n	8011ce0 <USBH_HandleControl+0x470>

  default:
    break;
 8011cca:	bf00      	nop
 8011ccc:	e008      	b.n	8011ce0 <USBH_HandleControl+0x470>
    break;
 8011cce:	bf00      	nop
 8011cd0:	e006      	b.n	8011ce0 <USBH_HandleControl+0x470>
    break;
 8011cd2:	bf00      	nop
 8011cd4:	e004      	b.n	8011ce0 <USBH_HandleControl+0x470>
    break;
 8011cd6:	bf00      	nop
 8011cd8:	e002      	b.n	8011ce0 <USBH_HandleControl+0x470>
    break;
 8011cda:	bf00      	nop
 8011cdc:	e000      	b.n	8011ce0 <USBH_HandleControl+0x470>
    break;
 8011cde:	bf00      	nop
  }
  return status;
 8011ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3710      	adds	r7, #16
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
 8011cea:	bf00      	nop

08011cec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b088      	sub	sp, #32
 8011cf0:	af04      	add	r7, sp, #16
 8011cf2:	60f8      	str	r0, [r7, #12]
 8011cf4:	60b9      	str	r1, [r7, #8]
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8011cfa:	79f9      	ldrb	r1, [r7, #7]
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	9303      	str	r3, [sp, #12]
 8011d00:	2308      	movs	r3, #8
 8011d02:	9302      	str	r3, [sp, #8]
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	9301      	str	r3, [sp, #4]
 8011d08:	2300      	movs	r3, #0
 8011d0a:	9300      	str	r3, [sp, #0]
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	2200      	movs	r2, #0
 8011d10:	68f8      	ldr	r0, [r7, #12]
 8011d12:	f00f fed6 	bl	8021ac2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8011d16:	2300      	movs	r3, #0
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3710      	adds	r7, #16
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}

08011d20 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b088      	sub	sp, #32
 8011d24:	af04      	add	r7, sp, #16
 8011d26:	60f8      	str	r0, [r7, #12]
 8011d28:	60b9      	str	r1, [r7, #8]
 8011d2a:	4611      	mov	r1, r2
 8011d2c:	461a      	mov	r2, r3
 8011d2e:	460b      	mov	r3, r1
 8011d30:	80fb      	strh	r3, [r7, #6]
 8011d32:	4613      	mov	r3, r2
 8011d34:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d001      	beq.n	8011d44 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8011d40:	2300      	movs	r3, #0
 8011d42:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8011d44:	7979      	ldrb	r1, [r7, #5]
 8011d46:	7e3b      	ldrb	r3, [r7, #24]
 8011d48:	9303      	str	r3, [sp, #12]
 8011d4a:	88fb      	ldrh	r3, [r7, #6]
 8011d4c:	9302      	str	r3, [sp, #8]
 8011d4e:	68bb      	ldr	r3, [r7, #8]
 8011d50:	9301      	str	r3, [sp, #4]
 8011d52:	2301      	movs	r3, #1
 8011d54:	9300      	str	r3, [sp, #0]
 8011d56:	2300      	movs	r3, #0
 8011d58:	2200      	movs	r2, #0
 8011d5a:	68f8      	ldr	r0, [r7, #12]
 8011d5c:	f00f feb1 	bl	8021ac2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8011d60:	2300      	movs	r3, #0
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	3710      	adds	r7, #16
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd80      	pop	{r7, pc}

08011d6a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8011d6a:	b580      	push	{r7, lr}
 8011d6c:	b088      	sub	sp, #32
 8011d6e:	af04      	add	r7, sp, #16
 8011d70:	60f8      	str	r0, [r7, #12]
 8011d72:	60b9      	str	r1, [r7, #8]
 8011d74:	4611      	mov	r1, r2
 8011d76:	461a      	mov	r2, r3
 8011d78:	460b      	mov	r3, r1
 8011d7a:	80fb      	strh	r3, [r7, #6]
 8011d7c:	4613      	mov	r3, r2
 8011d7e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8011d80:	7979      	ldrb	r1, [r7, #5]
 8011d82:	2300      	movs	r3, #0
 8011d84:	9303      	str	r3, [sp, #12]
 8011d86:	88fb      	ldrh	r3, [r7, #6]
 8011d88:	9302      	str	r3, [sp, #8]
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	9301      	str	r3, [sp, #4]
 8011d8e:	2301      	movs	r3, #1
 8011d90:	9300      	str	r3, [sp, #0]
 8011d92:	2300      	movs	r3, #0
 8011d94:	2201      	movs	r2, #1
 8011d96:	68f8      	ldr	r0, [r7, #12]
 8011d98:	f00f fe93 	bl	8021ac2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011d9c:	2300      	movs	r3, #0

}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3710      	adds	r7, #16
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}

08011da6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8011da6:	b580      	push	{r7, lr}
 8011da8:	b088      	sub	sp, #32
 8011daa:	af04      	add	r7, sp, #16
 8011dac:	60f8      	str	r0, [r7, #12]
 8011dae:	60b9      	str	r1, [r7, #8]
 8011db0:	4611      	mov	r1, r2
 8011db2:	461a      	mov	r2, r3
 8011db4:	460b      	mov	r3, r1
 8011db6:	80fb      	strh	r3, [r7, #6]
 8011db8:	4613      	mov	r3, r2
 8011dba:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d001      	beq.n	8011dca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8011dca:	7979      	ldrb	r1, [r7, #5]
 8011dcc:	7e3b      	ldrb	r3, [r7, #24]
 8011dce:	9303      	str	r3, [sp, #12]
 8011dd0:	88fb      	ldrh	r3, [r7, #6]
 8011dd2:	9302      	str	r3, [sp, #8]
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	9301      	str	r3, [sp, #4]
 8011dd8:	2301      	movs	r3, #1
 8011dda:	9300      	str	r3, [sp, #0]
 8011ddc:	2302      	movs	r3, #2
 8011dde:	2200      	movs	r2, #0
 8011de0:	68f8      	ldr	r0, [r7, #12]
 8011de2:	f00f fe6e 	bl	8021ac2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8011de6:	2300      	movs	r3, #0
}
 8011de8:	4618      	mov	r0, r3
 8011dea:	3710      	adds	r7, #16
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bd80      	pop	{r7, pc}

08011df0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b088      	sub	sp, #32
 8011df4:	af04      	add	r7, sp, #16
 8011df6:	60f8      	str	r0, [r7, #12]
 8011df8:	60b9      	str	r1, [r7, #8]
 8011dfa:	4611      	mov	r1, r2
 8011dfc:	461a      	mov	r2, r3
 8011dfe:	460b      	mov	r3, r1
 8011e00:	80fb      	strh	r3, [r7, #6]
 8011e02:	4613      	mov	r3, r2
 8011e04:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8011e06:	7979      	ldrb	r1, [r7, #5]
 8011e08:	2300      	movs	r3, #0
 8011e0a:	9303      	str	r3, [sp, #12]
 8011e0c:	88fb      	ldrh	r3, [r7, #6]
 8011e0e:	9302      	str	r3, [sp, #8]
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	9301      	str	r3, [sp, #4]
 8011e14:	2301      	movs	r3, #1
 8011e16:	9300      	str	r3, [sp, #0]
 8011e18:	2302      	movs	r3, #2
 8011e1a:	2201      	movs	r2, #1
 8011e1c:	68f8      	ldr	r0, [r7, #12]
 8011e1e:	f00f fe50 	bl	8021ac2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011e22:	2300      	movs	r3, #0
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3710      	adds	r7, #16
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}

08011e2c <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b086      	sub	sp, #24
 8011e30:	af04      	add	r7, sp, #16
 8011e32:	6078      	str	r0, [r7, #4]
 8011e34:	4608      	mov	r0, r1
 8011e36:	4611      	mov	r1, r2
 8011e38:	461a      	mov	r2, r3
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	70fb      	strb	r3, [r7, #3]
 8011e3e:	460b      	mov	r3, r1
 8011e40:	70bb      	strb	r3, [r7, #2]
 8011e42:	4613      	mov	r3, r2
 8011e44:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8011e46:	7878      	ldrb	r0, [r7, #1]
 8011e48:	78ba      	ldrb	r2, [r7, #2]
 8011e4a:	78f9      	ldrb	r1, [r7, #3]
 8011e4c:	8b3b      	ldrh	r3, [r7, #24]
 8011e4e:	9302      	str	r3, [sp, #8]
 8011e50:	7d3b      	ldrb	r3, [r7, #20]
 8011e52:	9301      	str	r3, [sp, #4]
 8011e54:	7c3b      	ldrb	r3, [r7, #16]
 8011e56:	9300      	str	r3, [sp, #0]
 8011e58:	4603      	mov	r3, r0
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	f00f fde3 	bl	8021a26 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8011e60:	2300      	movs	r3, #0

}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3708      	adds	r7, #8
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}

08011e6a <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8011e6a:	b580      	push	{r7, lr}
 8011e6c:	b082      	sub	sp, #8
 8011e6e:	af00      	add	r7, sp, #0
 8011e70:	6078      	str	r0, [r7, #4]
 8011e72:	460b      	mov	r3, r1
 8011e74:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8011e76:	78fb      	ldrb	r3, [r7, #3]
 8011e78:	4619      	mov	r1, r3
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f00f fe02 	bl	8021a84 <USBH_LL_ClosePipe>

  return USBH_OK;
 8011e80:	2300      	movs	r3, #0

}
 8011e82:	4618      	mov	r0, r3
 8011e84:	3708      	adds	r7, #8
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}

08011e8a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8011e8a:	b580      	push	{r7, lr}
 8011e8c:	b084      	sub	sp, #16
 8011e8e:	af00      	add	r7, sp, #0
 8011e90:	6078      	str	r0, [r7, #4]
 8011e92:	460b      	mov	r3, r1
 8011e94:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f000 f831 	bl	8011efe <USBH_GetFreePipe>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8011ea0:	89fb      	ldrh	r3, [r7, #14]
 8011ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ea6:	4293      	cmp	r3, r2
 8011ea8:	d007      	beq.n	8011eba <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8011eaa:	78fb      	ldrb	r3, [r7, #3]
 8011eac:	89fa      	ldrh	r2, [r7, #14]
 8011eae:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	32e0      	adds	r2, #224	; 0xe0
 8011eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8011eba:	89fb      	ldrh	r3, [r7, #14]
 8011ebc:	b2db      	uxtb	r3, r3
}
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	3710      	adds	r7, #16
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd80      	pop	{r7, pc}

08011ec6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8011ec6:	b480      	push	{r7}
 8011ec8:	b083      	sub	sp, #12
 8011eca:	af00      	add	r7, sp, #0
 8011ecc:	6078      	str	r0, [r7, #4]
 8011ece:	460b      	mov	r3, r1
 8011ed0:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8011ed2:	78fb      	ldrb	r3, [r7, #3]
 8011ed4:	2b0a      	cmp	r3, #10
 8011ed6:	d80b      	bhi.n	8011ef0 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8011ed8:	78fa      	ldrb	r2, [r7, #3]
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	32e0      	adds	r2, #224	; 0xe0
 8011ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ee2:	78fa      	ldrb	r2, [r7, #3]
 8011ee4:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	32e0      	adds	r2, #224	; 0xe0
 8011eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8011ef0:	2300      	movs	r3, #0
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	370c      	adds	r7, #12
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efc:	4770      	bx	lr

08011efe <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8011efe:	b480      	push	{r7}
 8011f00:	b085      	sub	sp, #20
 8011f02:	af00      	add	r7, sp, #0
 8011f04:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8011f06:	2300      	movs	r3, #0
 8011f08:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	73fb      	strb	r3, [r7, #15]
 8011f0e:	e00e      	b.n	8011f2e <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8011f10:	7bfa      	ldrb	r2, [r7, #15]
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	32e0      	adds	r2, #224	; 0xe0
 8011f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d102      	bne.n	8011f28 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8011f22:	7bfb      	ldrb	r3, [r7, #15]
 8011f24:	b29b      	uxth	r3, r3
 8011f26:	e007      	b.n	8011f38 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8011f28:	7bfb      	ldrb	r3, [r7, #15]
 8011f2a:	3301      	adds	r3, #1
 8011f2c:	73fb      	strb	r3, [r7, #15]
 8011f2e:	7bfb      	ldrb	r3, [r7, #15]
 8011f30:	2b0a      	cmp	r3, #10
 8011f32:	d9ed      	bls.n	8011f10 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8011f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3714      	adds	r7, #20
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f42:	4770      	bx	lr

08011f44 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8011f44:	b480      	push	{r7}
 8011f46:	b083      	sub	sp, #12
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
    {
 8011f4c:	4a04      	ldr	r2, [pc, #16]	; (8011f60 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	601a      	str	r2, [r3, #0]
    }
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	4618      	mov	r0, r3
 8011f56:	370c      	adds	r7, #12
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr
 8011f60:	0802ca7c 	.word	0x0802ca7c

08011f64 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b082      	sub	sp, #8
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
    }
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f7ff ffe9 	bl	8011f44 <_ZN8touchgfx15TouchControllerD1Ev>
 8011f72:	2104      	movs	r1, #4
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f018 fad4 	bl	802a522 <_ZdlPvj>
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3708      	adds	r7, #8
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}

08011f84 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8011f84:	b480      	push	{r7}
 8011f86:	b083      	sub	sp, #12
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2200      	movs	r2, #0
 8011f90:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	2200      	movs	r2, #0
 8011f96:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	80da      	strh	r2, [r3, #6]
    }
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	370c      	adds	r7, #12
 8011faa:	46bd      	mov	sp, r7
 8011fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb0:	4770      	bx	lr

08011fb2 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 8011fb2:	b480      	push	{r7}
 8011fb4:	b083      	sub	sp, #12
 8011fb6:	af00      	add	r7, sp, #0
 8011fb8:	6078      	str	r0, [r7, #4]
 8011fba:	460b      	mov	r3, r1
 8011fbc:	807b      	strh	r3, [r7, #2]
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	887a      	ldrh	r2, [r7, #2]
 8011fc2:	801a      	strh	r2, [r3, #0]
    {
    }
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	370c      	adds	r7, #12
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd0:	4770      	bx	lr
	...

08011fd4 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 8011fd4:	b480      	push	{r7}
 8011fd6:	b083      	sub	sp, #12
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
 8011fdc:	4a04      	ldr	r2, [pc, #16]	; (8011ff0 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	601a      	str	r2, [r3, #0]
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	370c      	adds	r7, #12
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fee:	4770      	bx	lr
 8011ff0:	0802f114 	.word	0x0802f114

08011ff4 <_ZN8touchgfx8DrawableD0Ev>:
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b082      	sub	sp, #8
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	f7ff ffe9 	bl	8011fd4 <_ZN8touchgfx8DrawableD1Ev>
 8012002:	2128      	movs	r1, #40	; 0x28
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f018 fa8c 	bl	802a522 <_ZdlPvj>
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	4618      	mov	r0, r3
 801200e:	3708      	adds	r7, #8
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}

08012014 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8012014:	b580      	push	{r7, lr}
 8012016:	b084      	sub	sp, #16
 8012018:	af00      	add	r7, sp, #0
 801201a:	60f8      	str	r0, [r7, #12]
 801201c:	4608      	mov	r0, r1
 801201e:	4611      	mov	r1, r2
 8012020:	461a      	mov	r2, r3
 8012022:	4603      	mov	r3, r0
 8012024:	817b      	strh	r3, [r7, #10]
 8012026:	460b      	mov	r3, r1
 8012028:	813b      	strh	r3, [r7, #8]
 801202a:	4613      	mov	r3, r2
 801202c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	3334      	adds	r3, #52	; 0x34
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801203a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801203e:	68f8      	ldr	r0, [r7, #12]
 8012040:	4798      	blx	r3
        setWidth(width);
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	3338      	adds	r3, #56	; 0x38
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801204e:	4611      	mov	r1, r2
 8012050:	68f8      	ldr	r0, [r7, #12]
 8012052:	4798      	blx	r3
        setHeight(height);
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	333c      	adds	r3, #60	; 0x3c
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8012060:	4611      	mov	r1, r2
 8012062:	68f8      	ldr	r0, [r7, #12]
 8012064:	4798      	blx	r3
    };
 8012066:	bf00      	nop
 8012068:	3710      	adds	r7, #16
 801206a:	46bd      	mov	sp, r7
 801206c:	bd80      	pop	{r7, pc}

0801206e <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 801206e:	b480      	push	{r7}
 8012070:	b083      	sub	sp, #12
 8012072:	af00      	add	r7, sp, #0
 8012074:	6078      	str	r0, [r7, #4]
 8012076:	460b      	mov	r3, r1
 8012078:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	887a      	ldrh	r2, [r7, #2]
 801207e:	809a      	strh	r2, [r3, #4]
    }
 8012080:	bf00      	nop
 8012082:	370c      	adds	r7, #12
 8012084:	46bd      	mov	sp, r7
 8012086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208a:	4770      	bx	lr

0801208c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 801208c:	b480      	push	{r7}
 801208e:	b083      	sub	sp, #12
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
 8012094:	460b      	mov	r3, r1
 8012096:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	887a      	ldrh	r2, [r7, #2]
 801209c:	80da      	strh	r2, [r3, #6]
    }
 801209e:	bf00      	nop
 80120a0:	370c      	adds	r7, #12
 80120a2:	46bd      	mov	sp, r7
 80120a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a8:	4770      	bx	lr

080120aa <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 80120aa:	b580      	push	{r7, lr}
 80120ac:	b082      	sub	sp, #8
 80120ae:	af00      	add	r7, sp, #0
 80120b0:	6078      	str	r0, [r7, #4]
 80120b2:	460b      	mov	r3, r1
 80120b4:	807b      	strh	r3, [r7, #2]
 80120b6:	4613      	mov	r3, r2
 80120b8:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	332c      	adds	r3, #44	; 0x2c
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80120c6:	4611      	mov	r1, r2
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	4798      	blx	r3
        setY(y);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	3330      	adds	r3, #48	; 0x30
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80120d8:	4611      	mov	r1, r2
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	4798      	blx	r3
    }
 80120de:	bf00      	nop
 80120e0:	3708      	adds	r7, #8
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}

080120e6 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 80120e6:	b480      	push	{r7}
 80120e8:	b083      	sub	sp, #12
 80120ea:	af00      	add	r7, sp, #0
 80120ec:	6078      	str	r0, [r7, #4]
 80120ee:	460b      	mov	r3, r1
 80120f0:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	887a      	ldrh	r2, [r7, #2]
 80120f6:	811a      	strh	r2, [r3, #8]
    }
 80120f8:	bf00      	nop
 80120fa:	370c      	adds	r7, #12
 80120fc:	46bd      	mov	sp, r7
 80120fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012102:	4770      	bx	lr

08012104 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 8012104:	b480      	push	{r7}
 8012106:	b083      	sub	sp, #12
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
 801210c:	460b      	mov	r3, r1
 801210e:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	887a      	ldrh	r2, [r7, #2]
 8012114:	815a      	strh	r2, [r3, #10]
    }
 8012116:	bf00      	nop
 8012118:	370c      	adds	r7, #12
 801211a:	46bd      	mov	sp, r7
 801211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012120:	4770      	bx	lr

08012122 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 8012122:	b480      	push	{r7}
 8012124:	b083      	sub	sp, #12
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]
 801212a:	bf00      	nop
 801212c:	370c      	adds	r7, #12
 801212e:	46bd      	mov	sp, r7
 8012130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012134:	4770      	bx	lr

08012136 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8012136:	b480      	push	{r7}
 8012138:	b083      	sub	sp, #12
 801213a:	af00      	add	r7, sp, #0
 801213c:	6078      	str	r0, [r7, #4]
 801213e:	6039      	str	r1, [r7, #0]
 8012140:	bf00      	nop
 8012142:	370c      	adds	r7, #12
 8012144:	46bd      	mov	sp, r7
 8012146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214a:	4770      	bx	lr

0801214c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 801214c:	b480      	push	{r7}
 801214e:	b083      	sub	sp, #12
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
 8012154:	6039      	str	r1, [r7, #0]
 8012156:	bf00      	nop
 8012158:	370c      	adds	r7, #12
 801215a:	46bd      	mov	sp, r7
 801215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012160:	4770      	bx	lr

08012162 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 8012162:	b480      	push	{r7}
 8012164:	b083      	sub	sp, #12
 8012166:	af00      	add	r7, sp, #0
 8012168:	6078      	str	r0, [r7, #4]
 801216a:	6039      	str	r1, [r7, #0]
 801216c:	bf00      	nop
 801216e:	370c      	adds	r7, #12
 8012170:	46bd      	mov	sp, r7
 8012172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012176:	4770      	bx	lr

08012178 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8012178:	b480      	push	{r7}
 801217a:	b083      	sub	sp, #12
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
 8012180:	bf00      	nop
 8012182:	370c      	adds	r7, #12
 8012184:	46bd      	mov	sp, r7
 8012186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218a:	4770      	bx	lr

0801218c <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 801218c:	b480      	push	{r7}
 801218e:	b083      	sub	sp, #12
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 801219a:	4618      	mov	r0, r3
 801219c:	370c      	adds	r7, #12
 801219e:	46bd      	mov	sp, r7
 80121a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a4:	4770      	bx	lr

080121a6 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80121a6:	b480      	push	{r7}
 80121a8:	b083      	sub	sp, #12
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80121b4:	4618      	mov	r0, r3
 80121b6:	370c      	adds	r7, #12
 80121b8:	46bd      	mov	sp, r7
 80121ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121be:	4770      	bx	lr

080121c0 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b082      	sub	sp, #8
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	460b      	mov	r3, r1
 80121ca:	807b      	strh	r3, [r7, #2]
 80121cc:	4613      	mov	r3, r2
 80121ce:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	3354      	adds	r3, #84	; 0x54
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	8879      	ldrh	r1, [r7, #2]
 80121da:	687a      	ldr	r2, [r7, #4]
 80121dc:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80121e0:	b292      	uxth	r2, r2
 80121e2:	1a8a      	subs	r2, r1, r2
 80121e4:	b292      	uxth	r2, r2
 80121e6:	b210      	sxth	r0, r2
 80121e8:	8839      	ldrh	r1, [r7, #0]
 80121ea:	687a      	ldr	r2, [r7, #4]
 80121ec:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80121f0:	b292      	uxth	r2, r2
 80121f2:	1a8a      	subs	r2, r1, r2
 80121f4:	b292      	uxth	r2, r2
 80121f6:	b212      	sxth	r2, r2
 80121f8:	4601      	mov	r1, r0
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	4798      	blx	r3
    }
 80121fe:	bf00      	nop
 8012200:	3708      	adds	r7, #8
 8012202:	46bd      	mov	sp, r7
 8012204:	bd80      	pop	{r7, pc}

08012206 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8012206:	b480      	push	{r7}
 8012208:	b083      	sub	sp, #12
 801220a:	af00      	add	r7, sp, #0
 801220c:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012214:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801221c:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012224:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8012226:	bf00      	nop
 8012228:	370c      	adds	r7, #12
 801222a:	46bd      	mov	sp, r7
 801222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012230:	4770      	bx	lr

08012232 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8012232:	b580      	push	{r7, lr}
 8012234:	b084      	sub	sp, #16
 8012236:	af00      	add	r7, sp, #0
 8012238:	60f8      	str	r0, [r7, #12]
 801223a:	60b9      	str	r1, [r7, #8]
 801223c:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 801223e:	68f8      	ldr	r0, [r7, #12]
 8012240:	f7ff ffe1 	bl	8012206 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681a      	ldr	r2, [r3, #0]
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	68fa      	ldr	r2, [r7, #12]
 8012250:	601a      	str	r2, [r3, #0]
    }
 8012252:	bf00      	nop
 8012254:	3710      	adds	r7, #16
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}
	...

0801225c <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 801225c:	b580      	push	{r7, lr}
 801225e:	b082      	sub	sp, #8
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
 8012264:	4a05      	ldr	r2, [pc, #20]	; (801227c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	601a      	str	r2, [r3, #0]
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	4618      	mov	r0, r3
 801226e:	f7ff feb1 	bl	8011fd4 <_ZN8touchgfx8DrawableD1Ev>
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	4618      	mov	r0, r3
 8012276:	3708      	adds	r7, #8
 8012278:	46bd      	mov	sp, r7
 801227a:	bd80      	pop	{r7, pc}
 801227c:	0802ca94 	.word	0x0802ca94

08012280 <_ZN8touchgfx6WidgetD0Ev>:
 8012280:	b580      	push	{r7, lr}
 8012282:	b082      	sub	sp, #8
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f7ff ffe7 	bl	801225c <_ZN8touchgfx6WidgetD1Ev>
 801228e:	2128      	movs	r1, #40	; 0x28
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f018 f946 	bl	802a522 <_ZdlPvj>
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	4618      	mov	r0, r3
 801229a:	3708      	adds	r7, #8
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}

080122a0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b084      	sub	sp, #16
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	60f8      	str	r0, [r7, #12]
 80122a8:	607b      	str	r3, [r7, #4]
 80122aa:	460b      	mov	r3, r1
 80122ac:	817b      	strh	r3, [r7, #10]
 80122ae:	4613      	mov	r3, r2
 80122b0:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7ff ff69 	bl	801218c <_ZNK8touchgfx8Drawable9isVisibleEv>
 80122ba:	4603      	mov	r3, r0
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d008      	beq.n	80122d2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7ff ff6f 	bl	80121a6 <_ZNK8touchgfx8Drawable11isTouchableEv>
 80122c8:	4603      	mov	r3, r0
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d001      	beq.n	80122d2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80122ce:	2301      	movs	r3, #1
 80122d0:	e000      	b.n	80122d4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80122d2:	2300      	movs	r3, #0
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d002      	beq.n	80122de <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80122d8:	68fa      	ldr	r2, [r7, #12]
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	601a      	str	r2, [r3, #0]
        }
    }
 80122de:	bf00      	nop
 80122e0:	3710      	adds	r7, #16
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}

080122e6 <_ZNK8touchgfx6Widget7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_WIDGET.
     */
    virtual uint16_t getType() const
 80122e6:	b480      	push	{r7}
 80122e8:	b083      	sub	sp, #12
 80122ea:	af00      	add	r7, sp, #0
 80122ec:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_WIDGET;
 80122ee:	2301      	movs	r3, #1
    }
 80122f0:	4618      	mov	r0, r3
 80122f2:	370c      	adds	r7, #12
 80122f4:	46bd      	mov	sp, r7
 80122f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fa:	4770      	bx	lr

080122fc <_ZNK8touchgfx5Image7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_IMAGE.
     */
    virtual uint16_t getType() const
 80122fc:	b480      	push	{r7}
 80122fe:	b083      	sub	sp, #12
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_IMAGE;
 8012304:	2308      	movs	r3, #8
    }
 8012306:	4618      	mov	r0, r3
 8012308:	370c      	adds	r7, #12
 801230a:	46bd      	mov	sp, r7
 801230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012310:	4770      	bx	lr
	...

08012314 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	4a05      	ldr	r2, [pc, #20]	; (8012334 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	601a      	str	r2, [r3, #0]
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	4618      	mov	r0, r3
 8012326:	f7ff fe55 	bl	8011fd4 <_ZN8touchgfx8DrawableD1Ev>
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	4618      	mov	r0, r3
 801232e:	3708      	adds	r7, #8
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}
 8012334:	0802cb00 	.word	0x0802cb00

08012338 <_ZN8touchgfx9ContainerD0Ev>:
 8012338:	b580      	push	{r7, lr}
 801233a:	b082      	sub	sp, #8
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	6878      	ldr	r0, [r7, #4]
 8012342:	f7ff ffe7 	bl	8012314 <_ZN8touchgfx9ContainerD1Ev>
 8012346:	212c      	movs	r1, #44	; 0x2c
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f018 f8ea 	bl	802a522 <_ZdlPvj>
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	4618      	mov	r0, r3
 8012352:	3708      	adds	r7, #8
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}

08012358 <_ZNK8touchgfx9Container7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_CONTAINER.
     */
    virtual uint16_t getType() const
 8012358:	b480      	push	{r7}
 801235a:	b083      	sub	sp, #12
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_CONTAINER;
 8012360:	2312      	movs	r3, #18
    }
 8012362:	4618      	mov	r0, r3
 8012364:	370c      	adds	r7, #12
 8012366:	46bd      	mov	sp, r7
 8012368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236c:	4770      	bx	lr
	...

08012370 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8012370:	b580      	push	{r7, lr}
 8012372:	b082      	sub	sp, #8
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
 8012378:	4a05      	ldr	r2, [pc, #20]	; (8012390 <_ZN8touchgfx5ImageD1Ev+0x20>)
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	601a      	str	r2, [r3, #0]
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	4618      	mov	r0, r3
 8012382:	f7ff ff6b 	bl	801225c <_ZN8touchgfx6WidgetD1Ev>
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	4618      	mov	r0, r3
 801238a:	3708      	adds	r7, #8
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}
 8012390:	0802d088 	.word	0x0802d088

08012394 <_ZN8touchgfx5ImageD0Ev>:
 8012394:	b580      	push	{r7, lr}
 8012396:	b082      	sub	sp, #8
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f7ff ffe7 	bl	8012370 <_ZN8touchgfx5ImageD1Ev>
 80123a2:	212c      	movs	r1, #44	; 0x2c
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f018 f8bc 	bl	802a522 <_ZdlPvj>
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	4618      	mov	r0, r3
 80123ae:	3708      	adds	r7, #8
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 80123b4:	b480      	push	{r7}
 80123b6:	af00      	add	r7, sp, #0
    {
        return instance;
 80123b8:	4b03      	ldr	r3, [pc, #12]	; (80123c8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80123ba:	681b      	ldr	r3, [r3, #0]
    }
 80123bc:	4618      	mov	r0, r3
 80123be:	46bd      	mov	sp, r7
 80123c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c4:	4770      	bx	lr
 80123c6:	bf00      	nop
 80123c8:	2000cf78 	.word	0x2000cf78

080123cc <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 80123cc:	b480      	push	{r7}
 80123ce:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80123d0:	4b0b      	ldr	r3, [pc, #44]	; (8012400 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d008      	beq.n	80123ee <_ZN8touchgfx3HAL3lcdEv+0x22>
 80123dc:	4b08      	ldr	r3, [pc, #32]	; (8012400 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d003      	beq.n	80123ee <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 80123e6:	4b06      	ldr	r3, [pc, #24]	; (8012400 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123ec:	e002      	b.n	80123f4 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 80123ee:	4b04      	ldr	r3, [pc, #16]	; (8012400 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	689b      	ldr	r3, [r3, #8]
        }
    }
 80123f4:	4618      	mov	r0, r3
 80123f6:	46bd      	mov	sp, r7
 80123f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fc:	4770      	bx	lr
 80123fe:	bf00      	nop
 8012400:	2000cf78 	.word	0x2000cf78

08012404 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
     *
     *        Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 8012404:	b480      	push	{r7}
 8012406:	b083      	sub	sp, #12
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8012410:	4618      	mov	r0, r3
 8012412:	370c      	adds	r7, #12
 8012414:	46bd      	mov	sp, r7
 8012416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241a:	4770      	bx	lr

0801241c <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 801241c:	b480      	push	{r7}
 801241e:	b085      	sub	sp, #20
 8012420:	af00      	add	r7, sp, #0
 8012422:	60f8      	str	r0, [r7, #12]
 8012424:	4608      	mov	r0, r1
 8012426:	4611      	mov	r1, r2
 8012428:	461a      	mov	r2, r3
 801242a:	4603      	mov	r3, r0
 801242c:	817b      	strh	r3, [r7, #10]
 801242e:	460b      	mov	r3, r1
 8012430:	813b      	strh	r3, [r7, #8]
 8012432:	4613      	mov	r3, r2
 8012434:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	897a      	ldrh	r2, [r7, #10]
 801243a:	801a      	strh	r2, [r3, #0]
        this->y = y;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	893a      	ldrh	r2, [r7, #8]
 8012440:	805a      	strh	r2, [r3, #2]
        this->width = width;
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	88fa      	ldrh	r2, [r7, #6]
 8012446:	809a      	strh	r2, [r3, #4]
        this->height = height;
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	8b3a      	ldrh	r2, [r7, #24]
 801244c:	80da      	strh	r2, [r3, #6]
    }
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	4618      	mov	r0, r3
 8012452:	3714      	adds	r7, #20
 8012454:	46bd      	mov	sp, r7
 8012456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245a:	4770      	bx	lr

0801245c <_ZNK8touchgfx4Rect5rightEv>:
     *
     *        Gets the x coordinate of the right edge of the Rect.
     *
     * @return x coordinate of the right edge.
     */
    inline int16_t right() const
 801245c:	b480      	push	{r7}
 801245e:	b083      	sub	sp, #12
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
    {
        return x + width;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f9b3 3000 	ldrsh.w	r3, [r3]
 801246a:	b29a      	uxth	r2, r3
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012472:	b29b      	uxth	r3, r3
 8012474:	4413      	add	r3, r2
 8012476:	b29b      	uxth	r3, r3
 8012478:	b21b      	sxth	r3, r3
    }
 801247a:	4618      	mov	r0, r3
 801247c:	370c      	adds	r7, #12
 801247e:	46bd      	mov	sp, r7
 8012480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012484:	4770      	bx	lr

08012486 <_ZNK8touchgfx4Rect6bottomEv>:
     *
     *        Gets the y coordinate of the bottom edge of the Rect.
     *
     * @return y coordinate of the buttom edge.
     */
    inline int16_t bottom() const
 8012486:	b480      	push	{r7}
 8012488:	b083      	sub	sp, #12
 801248a:	af00      	add	r7, sp, #0
 801248c:	6078      	str	r0, [r7, #4]
    {
        return y + height;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012494:	b29a      	uxth	r2, r3
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801249c:	b29b      	uxth	r3, r3
 801249e:	4413      	add	r3, r2
 80124a0:	b29b      	uxth	r3, r3
 80124a2:	b21b      	sxth	r3, r3
    }
 80124a4:	4618      	mov	r0, r3
 80124a6:	370c      	adds	r7, #12
 80124a8:	46bd      	mov	sp, r7
 80124aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ae:	4770      	bx	lr

080124b0 <_ZNK8touchgfx4Rect9intersectEss>:
     * @param otherX The x coordinate of the point.
     * @param otherY The y coordinate of the point.
     *
     * @return true if point lies inside rectangle.
     */
    bool intersect(int16_t otherX, int16_t otherY) const
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b082      	sub	sp, #8
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
 80124b8:	460b      	mov	r3, r1
 80124ba:	807b      	strh	r3, [r7, #2]
 80124bc:	4613      	mov	r3, r2
 80124be:	803b      	strh	r3, [r7, #0]
    {
        return (otherX >= x && otherX < right() &&
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f9b3 3000 	ldrsh.w	r3, [r3]
                otherY >= y && otherY < bottom());
 80124c6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80124ca:	429a      	cmp	r2, r3
 80124cc:	db1a      	blt.n	8012504 <_ZNK8touchgfx4Rect9intersectEss+0x54>
        return (otherX >= x && otherX < right() &&
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f7ff ffc4 	bl	801245c <_ZNK8touchgfx4Rect5rightEv>
 80124d4:	4603      	mov	r3, r0
 80124d6:	461a      	mov	r2, r3
 80124d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80124dc:	4293      	cmp	r3, r2
 80124de:	da11      	bge.n	8012504 <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return (otherX >= x && otherX < right() &&
 80124e6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80124ea:	429a      	cmp	r2, r3
 80124ec:	db0a      	blt.n	8012504 <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f7ff ffc9 	bl	8012486 <_ZNK8touchgfx4Rect6bottomEv>
 80124f4:	4603      	mov	r3, r0
 80124f6:	461a      	mov	r2, r3
 80124f8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80124fc:	4293      	cmp	r3, r2
 80124fe:	da01      	bge.n	8012504 <_ZNK8touchgfx4Rect9intersectEss+0x54>
 8012500:	2301      	movs	r3, #1
 8012502:	e000      	b.n	8012506 <_ZNK8touchgfx4Rect9intersectEss+0x56>
 8012504:	2300      	movs	r3, #0
    }
 8012506:	4618      	mov	r0, r3
 8012508:	3708      	adds	r7, #8
 801250a:	46bd      	mov	sp, r7
 801250c:	bd80      	pop	{r7, pc}

0801250e <_ZNK8touchgfx4Rect9intersectERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return true if the two rectangles intersect.
     */
    bool intersect(const Rect& other) const
 801250e:	b590      	push	{r4, r7, lr}
 8012510:	b083      	sub	sp, #12
 8012512:	af00      	add	r7, sp, #0
 8012514:	6078      	str	r0, [r7, #4]
 8012516:	6039      	str	r1, [r7, #0]
    {
        return !(x >= other.right() || right() <= other.x ||
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	f9b3 4000 	ldrsh.w	r4, [r3]
 801251e:	6838      	ldr	r0, [r7, #0]
 8012520:	f7ff ff9c 	bl	801245c <_ZNK8touchgfx4Rect5rightEv>
 8012524:	4603      	mov	r3, r0
 8012526:	429c      	cmp	r4, r3
 8012528:	da1e      	bge.n	8012568 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f7ff ff96 	bl	801245c <_ZNK8touchgfx4Rect5rightEv>
 8012530:	4603      	mov	r3, r0
 8012532:	461a      	mov	r2, r3
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	f9b3 3000 	ldrsh.w	r3, [r3]
 801253a:	429a      	cmp	r2, r3
 801253c:	dd14      	ble.n	8012568 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8012544:	6838      	ldr	r0, [r7, #0]
 8012546:	f7ff ff9e 	bl	8012486 <_ZNK8touchgfx4Rect6bottomEv>
 801254a:	4603      	mov	r3, r0
        return !(x >= other.right() || right() <= other.x ||
 801254c:	429c      	cmp	r4, r3
 801254e:	da0b      	bge.n	8012568 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 8012550:	6878      	ldr	r0, [r7, #4]
 8012552:	f7ff ff98 	bl	8012486 <_ZNK8touchgfx4Rect6bottomEv>
 8012556:	4603      	mov	r3, r0
 8012558:	461a      	mov	r2, r3
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return !(x >= other.right() || right() <= other.x ||
 8012560:	429a      	cmp	r2, r3
 8012562:	dd01      	ble.n	8012568 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 8012564:	2301      	movs	r3, #1
 8012566:	e000      	b.n	801256a <_ZNK8touchgfx4Rect9intersectERKS0_+0x5c>
 8012568:	2300      	movs	r3, #0
    }
 801256a:	4618      	mov	r0, r3
 801256c:	370c      	adds	r7, #12
 801256e:	46bd      	mov	sp, r7
 8012570:	bd90      	pop	{r4, r7, pc}

08012572 <_ZNK8touchgfx4RectanERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return Intersecting rectangle or Rect(0, 0, 0, 0) in case of no intersection.
     */
    Rect operator &(const Rect& other) const
 8012572:	b580      	push	{r7, lr}
 8012574:	b084      	sub	sp, #16
 8012576:	af00      	add	r7, sp, #0
 8012578:	60f8      	str	r0, [r7, #12]
 801257a:	60b9      	str	r1, [r7, #8]
 801257c:	607a      	str	r2, [r7, #4]
    {
        Rect r = *this;
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	68ba      	ldr	r2, [r7, #8]
 8012582:	6811      	ldr	r1, [r2, #0]
 8012584:	6852      	ldr	r2, [r2, #4]
 8012586:	6019      	str	r1, [r3, #0]
 8012588:	605a      	str	r2, [r3, #4]
        r &= other;
 801258a:	6879      	ldr	r1, [r7, #4]
 801258c:	68f8      	ldr	r0, [r7, #12]
 801258e:	f000 f805 	bl	801259c <_ZN8touchgfx4RectaNERKS0_>
        return r;
 8012592:	bf00      	nop
    }
 8012594:	68f8      	ldr	r0, [r7, #12]
 8012596:	3710      	adds	r7, #16
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}

0801259c <_ZN8touchgfx4RectaNERKS0_>:
     *        Assigns this Rect to the intersection of the current Rect and the assigned Rect.
     *        The assignment will result in a Rect(0, 0, 0, 0) if they do not intersect.
     *
     * @param other The rect to intersect with.
     */
    void operator &=(const Rect& other)
 801259c:	b590      	push	{r4, r7, lr}
 801259e:	b085      	sub	sp, #20
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6039      	str	r1, [r7, #0]
    {
        if (intersect(other))
 80125a6:	6839      	ldr	r1, [r7, #0]
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f7ff ffb0 	bl	801250e <_ZNK8touchgfx4Rect9intersectERKS0_>
 80125ae:	4603      	mov	r3, r0
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d05f      	beq.n	8012674 <_ZN8touchgfx4RectaNERKS0_+0xd8>
        {
            int16_t newX = MAX(x, other.x);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125c0:	429a      	cmp	r2, r3
 80125c2:	dd03      	ble.n	80125cc <_ZN8touchgfx4RectaNERKS0_+0x30>
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125ca:	e002      	b.n	80125d2 <_ZN8touchgfx4RectaNERKS0_+0x36>
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125d2:	81fb      	strh	r3, [r7, #14]
            int16_t newY = MAX(y, other.y);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80125e0:	429a      	cmp	r2, r3
 80125e2:	dd04      	ble.n	80125ee <_ZN8touchgfx4RectaNERKS0_+0x52>
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	3302      	adds	r3, #2
 80125e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125ec:	e002      	b.n	80125f4 <_ZN8touchgfx4RectaNERKS0_+0x58>
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80125f4:	81bb      	strh	r3, [r7, #12]

            width = MIN(right(), other.right()) - newX;
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f7ff ff30 	bl	801245c <_ZNK8touchgfx4Rect5rightEv>
 80125fc:	4603      	mov	r3, r0
 80125fe:	461c      	mov	r4, r3
 8012600:	6838      	ldr	r0, [r7, #0]
 8012602:	f7ff ff2b 	bl	801245c <_ZNK8touchgfx4Rect5rightEv>
 8012606:	4603      	mov	r3, r0
 8012608:	429c      	cmp	r4, r3
 801260a:	da05      	bge.n	8012618 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f7ff ff25 	bl	801245c <_ZNK8touchgfx4Rect5rightEv>
 8012612:	4603      	mov	r3, r0
 8012614:	b29b      	uxth	r3, r3
 8012616:	e004      	b.n	8012622 <_ZN8touchgfx4RectaNERKS0_+0x86>
 8012618:	6838      	ldr	r0, [r7, #0]
 801261a:	f7ff ff1f 	bl	801245c <_ZNK8touchgfx4Rect5rightEv>
 801261e:	4603      	mov	r3, r0
 8012620:	b29b      	uxth	r3, r3
 8012622:	89fa      	ldrh	r2, [r7, #14]
 8012624:	1a9b      	subs	r3, r3, r2
 8012626:	b29b      	uxth	r3, r3
 8012628:	b21a      	sxth	r2, r3
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	809a      	strh	r2, [r3, #4]
            height = MIN(bottom(), other.bottom()) - newY;
 801262e:	6878      	ldr	r0, [r7, #4]
 8012630:	f7ff ff29 	bl	8012486 <_ZNK8touchgfx4Rect6bottomEv>
 8012634:	4603      	mov	r3, r0
 8012636:	461c      	mov	r4, r3
 8012638:	6838      	ldr	r0, [r7, #0]
 801263a:	f7ff ff24 	bl	8012486 <_ZNK8touchgfx4Rect6bottomEv>
 801263e:	4603      	mov	r3, r0
 8012640:	429c      	cmp	r4, r3
 8012642:	da05      	bge.n	8012650 <_ZN8touchgfx4RectaNERKS0_+0xb4>
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	f7ff ff1e 	bl	8012486 <_ZNK8touchgfx4Rect6bottomEv>
 801264a:	4603      	mov	r3, r0
 801264c:	b29b      	uxth	r3, r3
 801264e:	e004      	b.n	801265a <_ZN8touchgfx4RectaNERKS0_+0xbe>
 8012650:	6838      	ldr	r0, [r7, #0]
 8012652:	f7ff ff18 	bl	8012486 <_ZNK8touchgfx4Rect6bottomEv>
 8012656:	4603      	mov	r3, r0
 8012658:	b29b      	uxth	r3, r3
 801265a:	89ba      	ldrh	r2, [r7, #12]
 801265c:	1a9b      	subs	r3, r3, r2
 801265e:	b29b      	uxth	r3, r3
 8012660:	b21a      	sxth	r2, r3
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	80da      	strh	r2, [r3, #6]
            x = newX;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	89fa      	ldrh	r2, [r7, #14]
 801266a:	801a      	strh	r2, [r3, #0]
            y = newY;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	89ba      	ldrh	r2, [r7, #12]
 8012670:	805a      	strh	r2, [r3, #2]
            x = 0;
            y = 0;
            width = 0;
            height = 0;
        }
    }
 8012672:	e00b      	b.n	801268c <_ZN8touchgfx4RectaNERKS0_+0xf0>
            x = 0;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2200      	movs	r2, #0
 8012678:	801a      	strh	r2, [r3, #0]
            y = 0;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2200      	movs	r2, #0
 801267e:	805a      	strh	r2, [r3, #2]
            width = 0;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2200      	movs	r2, #0
 8012684:	809a      	strh	r2, [r3, #4]
            height = 0;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	2200      	movs	r2, #0
 801268a:	80da      	strh	r2, [r3, #6]
    }
 801268c:	bf00      	nop
 801268e:	3714      	adds	r7, #20
 8012690:	46bd      	mov	sp, r7
 8012692:	bd90      	pop	{r4, r7, pc}

08012694 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
     *        Increases the area covered by this rectangle to encompass the area covered by
     *        supplied rectangle.
     *
     * @param other The other rectangle.
     */
    void expandToFit(const Rect& other)
 8012694:	b590      	push	{r4, r7, lr}
 8012696:	b085      	sub	sp, #20
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
 801269c:	6039      	str	r1, [r7, #0]
    {
        if (!other.isEmpty())
 801269e:	6838      	ldr	r0, [r7, #0]
 80126a0:	f000 f884 	bl	80127ac <_ZNK8touchgfx4Rect7isEmptyEv>
 80126a4:	4603      	mov	r3, r0
 80126a6:	f083 0301 	eor.w	r3, r3, #1
 80126aa:	b2db      	uxtb	r3, r3
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d079      	beq.n	80127a4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
        {
            if (isEmpty())
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	f000 f87b 	bl	80127ac <_ZNK8touchgfx4Rect7isEmptyEv>
 80126b6:	4603      	mov	r3, r0
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d014      	beq.n	80126e6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x52>
            {
                x = other.x;
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	801a      	strh	r2, [r3, #0]
                y = other.y;
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	805a      	strh	r2, [r3, #2]
                width = other.width;
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	809a      	strh	r2, [r3, #4]
                height = other.height;
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	80da      	strh	r2, [r3, #6]
                y = newY;
                width = endPointX - newX;
                height = endPointY - newY;
            }
        }
    }
 80126e4:	e05e      	b.n	80127a4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
                int16_t newX = MIN(x, other.x);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126f2:	429a      	cmp	r2, r3
 80126f4:	da03      	bge.n	80126fe <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6a>
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126fc:	e002      	b.n	8012704 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 80126fe:	683b      	ldr	r3, [r7, #0]
 8012700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012704:	81fb      	strh	r3, [r7, #14]
                int16_t newY = MIN(y, other.y);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012712:	429a      	cmp	r2, r3
 8012714:	da04      	bge.n	8012720 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x8c>
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	3302      	adds	r3, #2
 801271a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801271e:	e002      	b.n	8012726 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x92>
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012726:	81bb      	strh	r3, [r7, #12]
                int16_t endPointX = MAX(right(), other.right());
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f7ff fe97 	bl	801245c <_ZNK8touchgfx4Rect5rightEv>
 801272e:	4603      	mov	r3, r0
 8012730:	461c      	mov	r4, r3
 8012732:	6838      	ldr	r0, [r7, #0]
 8012734:	f7ff fe92 	bl	801245c <_ZNK8touchgfx4Rect5rightEv>
 8012738:	4603      	mov	r3, r0
 801273a:	429c      	cmp	r4, r3
 801273c:	dd04      	ble.n	8012748 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xb4>
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f7ff fe8c 	bl	801245c <_ZNK8touchgfx4Rect5rightEv>
 8012744:	4603      	mov	r3, r0
 8012746:	e003      	b.n	8012750 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xbc>
 8012748:	6838      	ldr	r0, [r7, #0]
 801274a:	f7ff fe87 	bl	801245c <_ZNK8touchgfx4Rect5rightEv>
 801274e:	4603      	mov	r3, r0
 8012750:	817b      	strh	r3, [r7, #10]
                int16_t endPointY = MAX(bottom(), other.bottom());
 8012752:	6878      	ldr	r0, [r7, #4]
 8012754:	f7ff fe97 	bl	8012486 <_ZNK8touchgfx4Rect6bottomEv>
 8012758:	4603      	mov	r3, r0
 801275a:	461c      	mov	r4, r3
 801275c:	6838      	ldr	r0, [r7, #0]
 801275e:	f7ff fe92 	bl	8012486 <_ZNK8touchgfx4Rect6bottomEv>
 8012762:	4603      	mov	r3, r0
 8012764:	429c      	cmp	r4, r3
 8012766:	dd04      	ble.n	8012772 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xde>
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f7ff fe8c 	bl	8012486 <_ZNK8touchgfx4Rect6bottomEv>
 801276e:	4603      	mov	r3, r0
 8012770:	e003      	b.n	801277a <_ZN8touchgfx4Rect11expandToFitERKS0_+0xe6>
 8012772:	6838      	ldr	r0, [r7, #0]
 8012774:	f7ff fe87 	bl	8012486 <_ZNK8touchgfx4Rect6bottomEv>
 8012778:	4603      	mov	r3, r0
 801277a:	813b      	strh	r3, [r7, #8]
                x = newX;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	89fa      	ldrh	r2, [r7, #14]
 8012780:	801a      	strh	r2, [r3, #0]
                y = newY;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	89ba      	ldrh	r2, [r7, #12]
 8012786:	805a      	strh	r2, [r3, #2]
                width = endPointX - newX;
 8012788:	897a      	ldrh	r2, [r7, #10]
 801278a:	89fb      	ldrh	r3, [r7, #14]
 801278c:	1ad3      	subs	r3, r2, r3
 801278e:	b29b      	uxth	r3, r3
 8012790:	b21a      	sxth	r2, r3
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	809a      	strh	r2, [r3, #4]
                height = endPointY - newY;
 8012796:	893a      	ldrh	r2, [r7, #8]
 8012798:	89bb      	ldrh	r3, [r7, #12]
 801279a:	1ad3      	subs	r3, r2, r3
 801279c:	b29b      	uxth	r3, r3
 801279e:	b21a      	sxth	r2, r3
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	80da      	strh	r2, [r3, #6]
    }
 80127a4:	bf00      	nop
 80127a6:	3714      	adds	r7, #20
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd90      	pop	{r4, r7, pc}

080127ac <_ZNK8touchgfx4Rect7isEmptyEv>:
     *
     *        Query if this object is empty.
     *
     * @return true if any of the dimensions are 0.
     */
    bool isEmpty() const
 80127ac:	b480      	push	{r7}
 80127ae:	b083      	sub	sp, #12
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
    {
        return ((width == 0) || (height == 0));
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d004      	beq.n	80127c8 <_ZNK8touchgfx4Rect7isEmptyEv+0x1c>
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d101      	bne.n	80127cc <_ZNK8touchgfx4Rect7isEmptyEv+0x20>
 80127c8:	2301      	movs	r3, #1
 80127ca:	e000      	b.n	80127ce <_ZNK8touchgfx4Rect7isEmptyEv+0x22>
 80127cc:	2300      	movs	r3, #0
    }
 80127ce:	4618      	mov	r0, r3
 80127d0:	370c      	adds	r7, #12
 80127d2:	46bd      	mov	sp, r7
 80127d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d8:	4770      	bx	lr

080127da <_ZNK8touchgfx8Drawable7getRectEv>:
    const Rect& getRect() const
 80127da:	b480      	push	{r7}
 80127dc:	b083      	sub	sp, #12
 80127de:	af00      	add	r7, sp, #0
 80127e0:	6078      	str	r0, [r7, #4]
        return rect;
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	3304      	adds	r3, #4
    }
 80127e6:	4618      	mov	r0, r3
 80127e8:	370c      	adds	r7, #12
 80127ea:	46bd      	mov	sp, r7
 80127ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f0:	4770      	bx	lr

080127f2 <_ZNK8touchgfx8Drawable4getXEv>:
    int16_t getX() const
 80127f2:	b480      	push	{r7}
 80127f4:	b083      	sub	sp, #12
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	6078      	str	r0, [r7, #4]
        return rect.x;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8012800:	4618      	mov	r0, r3
 8012802:	370c      	adds	r7, #12
 8012804:	46bd      	mov	sp, r7
 8012806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280a:	4770      	bx	lr

0801280c <_ZNK8touchgfx8Drawable4getYEv>:
    int16_t getY() const
 801280c:	b480      	push	{r7}
 801280e:	b083      	sub	sp, #12
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
        return rect.y;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 801281a:	4618      	mov	r0, r3
 801281c:	370c      	adds	r7, #12
 801281e:	46bd      	mov	sp, r7
 8012820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012824:	4770      	bx	lr

08012826 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
#include <touchgfx/Screen.hpp>

namespace touchgfx
{
bool Container::contains(const Drawable& d)
{
 8012826:	b480      	push	{r7}
 8012828:	b085      	sub	sp, #20
 801282a:	af00      	add	r7, sp, #0
 801282c:	6078      	str	r0, [r7, #4]
 801282e:	6039      	str	r1, [r7, #0]
    bool found = false;
 8012830:	2300      	movs	r3, #0
 8012832:	73fb      	strb	r3, [r7, #15]
    Drawable* head = firstChild;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012838:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 801283a:	68bb      	ldr	r3, [r7, #8]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d00d      	beq.n	801285c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
 8012840:	7bfb      	ldrb	r3, [r7, #15]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d10a      	bne.n	801285c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
    {
        found = (head == &d);
 8012846:	68ba      	ldr	r2, [r7, #8]
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	429a      	cmp	r2, r3
 801284c:	bf0c      	ite	eq
 801284e:	2301      	moveq	r3, #1
 8012850:	2300      	movne	r3, #0
 8012852:	73fb      	strb	r3, [r7, #15]
        head = head->nextSibling;
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	699b      	ldr	r3, [r3, #24]
 8012858:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 801285a:	e7ee      	b.n	801283a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x14>
    }
    return found;
 801285c:	7bfb      	ldrb	r3, [r7, #15]
}
 801285e:	4618      	mov	r0, r3
 8012860:	3714      	adds	r7, #20
 8012862:	46bd      	mov	sp, r7
 8012864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012868:	4770      	bx	lr
	...

0801286c <_ZN8touchgfx9Container3addERNS_8DrawableE>:

void Container::add(Drawable& d)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b084      	sub	sp, #16
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	6039      	str	r1, [r7, #0]
    assert(&d != this && "Cannot add Drawable to self");
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	683a      	ldr	r2, [r7, #0]
 801287a:	429a      	cmp	r2, r3
 801287c:	d105      	bne.n	801288a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801287e:	4b22      	ldr	r3, [pc, #136]	; (8012908 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x9c>)
 8012880:	4a22      	ldr	r2, [pc, #136]	; (801290c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 8012882:	2123      	movs	r1, #35	; 0x23
 8012884:	4822      	ldr	r0, [pc, #136]	; (8012910 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 8012886:	f018 fc37 	bl	802b0f8 <__assert_func>
    assert(d.parent == 0 && "Cannot add Drawable multiple times");
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	695b      	ldr	r3, [r3, #20]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d005      	beq.n	801289e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x32>
 8012892:	4b20      	ldr	r3, [pc, #128]	; (8012914 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa8>)
 8012894:	4a1d      	ldr	r2, [pc, #116]	; (801290c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 8012896:	2124      	movs	r1, #36	; 0x24
 8012898:	481d      	ldr	r0, [pc, #116]	; (8012910 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 801289a:	f018 fc2d 	bl	802b0f8 <__assert_func>

    // Initialize d to have this as parent and no sibling.
    d.parent = this;
 801289e:	687a      	ldr	r2, [r7, #4]
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	615a      	str	r2, [r3, #20]
    d.nextSibling = 0;
 80128a4:	683b      	ldr	r3, [r7, #0]
 80128a6:	2200      	movs	r2, #0
 80128a8:	619a      	str	r2, [r3, #24]

    // Check if d is the first child to be added (container is empty)
    if (!firstChild)
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d103      	bne.n	80128ba <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4e>
    {
        firstChild = &d;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	683a      	ldr	r2, [r7, #0]
 80128b6:	629a      	str	r2, [r3, #40]	; 0x28
        }
        assert(head != &d && "Cannot add Drawable multiple times");
        // Make last child now point to d.
        head->nextSibling = &d;
    }
}
 80128b8:	e021      	b.n	80128fe <_ZN8touchgfx9Container3addERNS_8DrawableE+0x92>
        Drawable* head = firstChild;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128be:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	699b      	ldr	r3, [r3, #24]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d00d      	beq.n	80128e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x78>
            assert(head != &d && "Cannot add Drawable multiple times");
 80128c8:	68fa      	ldr	r2, [r7, #12]
 80128ca:	683b      	ldr	r3, [r7, #0]
 80128cc:	429a      	cmp	r2, r3
 80128ce:	d105      	bne.n	80128dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x70>
 80128d0:	4b11      	ldr	r3, [pc, #68]	; (8012918 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 80128d2:	4a0e      	ldr	r2, [pc, #56]	; (801290c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 80128d4:	2135      	movs	r1, #53	; 0x35
 80128d6:	480e      	ldr	r0, [pc, #56]	; (8012910 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 80128d8:	f018 fc0e 	bl	802b0f8 <__assert_func>
            head = head->nextSibling;
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	699b      	ldr	r3, [r3, #24]
 80128e0:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 80128e2:	e7ed      	b.n	80128c0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>
        assert(head != &d && "Cannot add Drawable multiple times");
 80128e4:	68fa      	ldr	r2, [r7, #12]
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	429a      	cmp	r2, r3
 80128ea:	d105      	bne.n	80128f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x8c>
 80128ec:	4b0a      	ldr	r3, [pc, #40]	; (8012918 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 80128ee:	4a07      	ldr	r2, [pc, #28]	; (801290c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 80128f0:	2138      	movs	r1, #56	; 0x38
 80128f2:	4807      	ldr	r0, [pc, #28]	; (8012910 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 80128f4:	f018 fc00 	bl	802b0f8 <__assert_func>
        head->nextSibling = &d;
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	683a      	ldr	r2, [r7, #0]
 80128fc:	619a      	str	r2, [r3, #24]
}
 80128fe:	bf00      	nop
 8012900:	3710      	adds	r7, #16
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}
 8012906:	bf00      	nop
 8012908:	0802c184 	.word	0x0802c184
 801290c:	0802cb88 	.word	0x0802cb88
 8012910:	0802c1b0 	.word	0x0802c1b0
 8012914:	0802c208 	.word	0x0802c208
 8012918:	0802c240 	.word	0x0802c240

0801291c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:

void Container::remove(Drawable& d)
{
 801291c:	b480      	push	{r7}
 801291e:	b085      	sub	sp, #20
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	6039      	str	r1, [r7, #0]
    if (!firstChild)
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801292a:	2b00      	cmp	r3, #0
 801292c:	d031      	beq.n	8012992 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x76>
    {
        // No children
        return;
    }

    if (&d == firstChild)
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012932:	683a      	ldr	r2, [r7, #0]
 8012934:	429a      	cmp	r2, r3
 8012936:	d112      	bne.n	801295e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x42>
    {
        // d is first child.
        d.parent = 0;
 8012938:	683b      	ldr	r3, [r7, #0]
 801293a:	2200      	movs	r2, #0
 801293c:	615a      	str	r2, [r3, #20]
        if (!d.nextSibling)
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	699b      	ldr	r3, [r3, #24]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d103      	bne.n	801294e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x32>
        {
            // d was only child, so now this container is empty
            firstChild = 0;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	2200      	movs	r2, #0
 801294a:	629a      	str	r2, [r3, #40]	; 0x28
        else
        {
            firstChild = d.nextSibling;
            d.nextSibling = 0;
        }
        return;
 801294c:	e022      	b.n	8012994 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
            firstChild = d.nextSibling;
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	699a      	ldr	r2, [r3, #24]
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	629a      	str	r2, [r3, #40]	; 0x28
            d.nextSibling = 0;
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	2200      	movs	r2, #0
 801295a:	619a      	str	r2, [r3, #24]
        return;
 801295c:	e01a      	b.n	8012994 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    }
    Drawable* tmp = firstChild;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012962:	60fb      	str	r3, [r7, #12]

    while (tmp)
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d014      	beq.n	8012994 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    {
        if (tmp->nextSibling == &d)
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	699b      	ldr	r3, [r3, #24]
 801296e:	683a      	ldr	r2, [r7, #0]
 8012970:	429a      	cmp	r2, r3
 8012972:	d10a      	bne.n	801298a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x6e>
        {
            tmp->nextSibling = d.nextSibling;
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	699a      	ldr	r2, [r3, #24]
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	619a      	str	r2, [r3, #24]
            d.parent = 0;
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	2200      	movs	r2, #0
 8012980:	615a      	str	r2, [r3, #20]
            d.nextSibling = 0;
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	2200      	movs	r2, #0
 8012986:	619a      	str	r2, [r3, #24]
            return;
 8012988:	e004      	b.n	8012994 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
        }
        else
        {
            tmp = tmp->nextSibling;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	699b      	ldr	r3, [r3, #24]
 801298e:	60fb      	str	r3, [r7, #12]
    while (tmp)
 8012990:	e7e8      	b.n	8012964 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x48>
        return;
 8012992:	bf00      	nop
        }
    }
}
 8012994:	3714      	adds	r7, #20
 8012996:	46bd      	mov	sp, r7
 8012998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299c:	4770      	bx	lr

0801299e <_ZN8touchgfx9Container9removeAllEv>:

void Container::removeAll()
{
 801299e:	b480      	push	{r7}
 80129a0:	b085      	sub	sp, #20
 80129a2:	af00      	add	r7, sp, #0
 80129a4:	6078      	str	r0, [r7, #4]
    while (firstChild)
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d00e      	beq.n	80129cc <_ZN8touchgfx9Container9removeAllEv+0x2e>
    {
        Drawable* d = firstChild;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129b2:	60fb      	str	r3, [r7, #12]
        firstChild = firstChild->nextSibling;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129b8:	699a      	ldr	r2, [r3, #24]
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	629a      	str	r2, [r3, #40]	; 0x28
        d->parent = 0;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	2200      	movs	r2, #0
 80129c2:	615a      	str	r2, [r3, #20]
        d->nextSibling = 0;
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	2200      	movs	r2, #0
 80129c8:	619a      	str	r2, [r3, #24]
    while (firstChild)
 80129ca:	e7ec      	b.n	80129a6 <_ZN8touchgfx9Container9removeAllEv+0x8>
    }
}
 80129cc:	bf00      	nop
 80129ce:	3714      	adds	r7, #20
 80129d0:	46bd      	mov	sp, r7
 80129d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d6:	4770      	bx	lr

080129d8 <_ZN8touchgfx9Container6unlinkEv>:

void Container::unlink()
{
 80129d8:	b480      	push	{r7}
 80129da:	b083      	sub	sp, #12
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
    firstChild = 0;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	2200      	movs	r2, #0
 80129e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80129e6:	bf00      	nop
 80129e8:	370c      	adds	r7, #12
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr

080129f2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:

void Container::draw(const Rect& invalidatedArea) const
{
 80129f2:	b580      	push	{r7, lr}
 80129f4:	b088      	sub	sp, #32
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	6078      	str	r0, [r7, #4]
 80129fa:	6039      	str	r1, [r7, #0]
    // The draw function of Container is not normally used. Containers do not per default
    // appear in the draw chain, since they are normally invisible themselves. However,
    // if someone decides to call draw on a container, at least do something useful (draw children).
    if (!isVisible() || !firstChild)
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	4618      	mov	r0, r3
 8012a00:	f7ff fbc4 	bl	801218c <_ZNK8touchgfx8Drawable9isVisibleEv>
 8012a04:	4603      	mov	r3, r0
 8012a06:	f083 0301 	eor.w	r3, r3, #1
 8012a0a:	b2db      	uxtb	r3, r3
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d103      	bne.n	8012a18 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x26>
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d101      	bne.n	8012a1c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2a>
 8012a18:	2301      	movs	r3, #1
 8012a1a:	e000      	b.n	8012a1e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2c>
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d14e      	bne.n	8012ac0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xce>
    {
        // Nothing to draw
        return;
    }

    Rect tmp = invalidatedArea;
 8012a22:	683a      	ldr	r2, [r7, #0]
 8012a24:	f107 0314 	add.w	r3, r7, #20
 8012a28:	6810      	ldr	r0, [r2, #0]
 8012a2a:	6851      	ldr	r1, [r2, #4]
 8012a2c:	c303      	stmia	r3!, {r0, r1}
    Drawable* d = firstChild;
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a32:	61fb      	str	r3, [r7, #28]
    while (d)
 8012a34:	69fb      	ldr	r3, [r7, #28]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d043      	beq.n	8012ac2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xd0>
    {
        if (d->isVisible())
 8012a3a:	69f8      	ldr	r0, [r7, #28]
 8012a3c:	f7ff fba6 	bl	801218c <_ZNK8touchgfx8Drawable9isVisibleEv>
 8012a40:	4603      	mov	r3, r0
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d038      	beq.n	8012ab8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
        {
            Rect drawableRegion = tmp & d->getRect();
 8012a46:	69f8      	ldr	r0, [r7, #28]
 8012a48:	f7ff fec7 	bl	80127da <_ZNK8touchgfx8Drawable7getRectEv>
 8012a4c:	4602      	mov	r2, r0
 8012a4e:	f107 030c 	add.w	r3, r7, #12
 8012a52:	f107 0114 	add.w	r1, r7, #20
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7ff fd8b 	bl	8012572 <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 8012a5c:	f107 030c 	add.w	r3, r7, #12
 8012a60:	4618      	mov	r0, r3
 8012a62:	f7ff fea3 	bl	80127ac <_ZNK8touchgfx4Rect7isEmptyEv>
 8012a66:	4603      	mov	r3, r0
 8012a68:	f083 0301 	eor.w	r3, r3, #1
 8012a6c:	b2db      	uxtb	r3, r3
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d022      	beq.n	8012ab8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
            {
                // This child has a non-empty intersection with the invalidated area.
                // Convert region to the Drawable's coordinate system and draw.
                drawableRegion.x -= d->getX();
 8012a72:	69f8      	ldr	r0, [r7, #28]
 8012a74:	f7ff febd 	bl	80127f2 <_ZNK8touchgfx8Drawable4getXEv>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	4619      	mov	r1, r3
 8012a7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012a80:	b29a      	uxth	r2, r3
 8012a82:	b28b      	uxth	r3, r1
 8012a84:	1ad3      	subs	r3, r2, r3
 8012a86:	b29b      	uxth	r3, r3
 8012a88:	b21b      	sxth	r3, r3
 8012a8a:	81bb      	strh	r3, [r7, #12]
                drawableRegion.y -= d->getY();
 8012a8c:	69f8      	ldr	r0, [r7, #28]
 8012a8e:	f7ff febd 	bl	801280c <_ZNK8touchgfx8Drawable4getYEv>
 8012a92:	4603      	mov	r3, r0
 8012a94:	4619      	mov	r1, r3
 8012a96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a9a:	b29a      	uxth	r2, r3
 8012a9c:	b28b      	uxth	r3, r1
 8012a9e:	1ad3      	subs	r3, r2, r3
 8012aa0:	b29b      	uxth	r3, r3
 8012aa2:	b21b      	sxth	r3, r3
 8012aa4:	81fb      	strh	r3, [r7, #14]
                d->draw(drawableRegion);
 8012aa6:	69fb      	ldr	r3, [r7, #28]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	3308      	adds	r3, #8
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	f107 020c 	add.w	r2, r7, #12
 8012ab2:	4611      	mov	r1, r2
 8012ab4:	69f8      	ldr	r0, [r7, #28]
 8012ab6:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 8012ab8:	69fb      	ldr	r3, [r7, #28]
 8012aba:	699b      	ldr	r3, [r3, #24]
 8012abc:	61fb      	str	r3, [r7, #28]
    while (d)
 8012abe:	e7b9      	b.n	8012a34 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x42>
        return;
 8012ac0:	bf00      	nop
    }
}
 8012ac2:	3720      	adds	r7, #32
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}

08012ac8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:

void Container::getLastChild(int16_t x, int16_t y, Drawable** last)
{
 8012ac8:	b590      	push	{r4, r7, lr}
 8012aca:	b087      	sub	sp, #28
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	60f8      	str	r0, [r7, #12]
 8012ad0:	607b      	str	r3, [r7, #4]
 8012ad2:	460b      	mov	r3, r1
 8012ad4:	817b      	strh	r3, [r7, #10]
 8012ad6:	4613      	mov	r3, r2
 8012ad8:	813b      	strh	r3, [r7, #8]
    // This function is used to obtain the drawable that should receive a click/drag/gesture event.
    // Find the last child (ie. the last child that was added, ie. the "front-most" drawable) covering
    // the specified coords.
    if (isTouchable())
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	4618      	mov	r0, r3
 8012ade:	f7ff fb62 	bl	80121a6 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d002      	beq.n	8012aee <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x26>
    {
        // If the container itself is touchable, result so far is "this". Might be overridden by a child.
        *last = this;
 8012ae8:	68fa      	ldr	r2, [r7, #12]
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	601a      	str	r2, [r3, #0]
    }

    Drawable* d = firstChild;
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012af2:	617b      	str	r3, [r7, #20]
    while (d)
 8012af4:	697b      	ldr	r3, [r7, #20]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d038      	beq.n	8012b6c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0xa4>
    {
        // Iterate over children.
        if (d->isVisible() && d->getRect().intersect(x, y))
 8012afa:	6978      	ldr	r0, [r7, #20]
 8012afc:	f7ff fb46 	bl	801218c <_ZNK8touchgfx8Drawable9isVisibleEv>
 8012b00:	4603      	mov	r3, r0
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d00e      	beq.n	8012b24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8012b06:	6978      	ldr	r0, [r7, #20]
 8012b08:	f7ff fe67 	bl	80127da <_ZNK8touchgfx8Drawable7getRectEv>
 8012b0c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012b10:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012b14:	4619      	mov	r1, r3
 8012b16:	f7ff fccb 	bl	80124b0 <_ZNK8touchgfx4Rect9intersectEss>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d001      	beq.n	8012b24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8012b20:	2301      	movs	r3, #1
 8012b22:	e000      	b.n	8012b26 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 8012b24:	2300      	movs	r3, #0
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d01c      	beq.n	8012b64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x9c>
        {
            int16_t xadj = x - d->getX();
 8012b2a:	897c      	ldrh	r4, [r7, #10]
 8012b2c:	6978      	ldr	r0, [r7, #20]
 8012b2e:	f7ff fe60 	bl	80127f2 <_ZNK8touchgfx8Drawable4getXEv>
 8012b32:	4603      	mov	r3, r0
 8012b34:	b29b      	uxth	r3, r3
 8012b36:	1ae3      	subs	r3, r4, r3
 8012b38:	b29b      	uxth	r3, r3
 8012b3a:	827b      	strh	r3, [r7, #18]
            int16_t yadj = y - d->getY();
 8012b3c:	893c      	ldrh	r4, [r7, #8]
 8012b3e:	6978      	ldr	r0, [r7, #20]
 8012b40:	f7ff fe64 	bl	801280c <_ZNK8touchgfx8Drawable4getYEv>
 8012b44:	4603      	mov	r3, r0
 8012b46:	b29b      	uxth	r3, r3
 8012b48:	1ae3      	subs	r3, r4, r3
 8012b4a:	b29b      	uxth	r3, r3
 8012b4c:	823b      	strh	r3, [r7, #16]
            d->getLastChild(xadj, yadj, last);
 8012b4e:	697b      	ldr	r3, [r7, #20]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	331c      	adds	r3, #28
 8012b54:	681c      	ldr	r4, [r3, #0]
 8012b56:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8012b5a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	6978      	ldr	r0, [r7, #20]
 8012b62:	47a0      	blx	r4
        }
        d = d->nextSibling;
 8012b64:	697b      	ldr	r3, [r7, #20]
 8012b66:	699b      	ldr	r3, [r3, #24]
 8012b68:	617b      	str	r3, [r7, #20]
    while (d)
 8012b6a:	e7c3      	b.n	8012af4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x2c>
    }
}
 8012b6c:	bf00      	nop
 8012b6e:	371c      	adds	r7, #28
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd90      	pop	{r4, r7, pc}

08012b74 <_ZNK8touchgfx9Container12getSolidRectEv>:

Rect Container::getSolidRect() const
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b084      	sub	sp, #16
 8012b78:	af02      	add	r7, sp, #8
 8012b7a:	6078      	str	r0, [r7, #4]
 8012b7c:	6039      	str	r1, [r7, #0]
    return Rect(0, 0, 0, 0);
 8012b7e:	2300      	movs	r3, #0
 8012b80:	9300      	str	r3, [sp, #0]
 8012b82:	2300      	movs	r3, #0
 8012b84:	2200      	movs	r2, #0
 8012b86:	2100      	movs	r1, #0
 8012b88:	6878      	ldr	r0, [r7, #4]
 8012b8a:	f7ff fc47 	bl	801241c <_ZN8touchgfx4RectC1Essss>
}
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	3708      	adds	r7, #8
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}

08012b96 <_ZNK8touchgfx9Container16getContainedAreaEv>:

Rect Container::getContainedArea() const
{
 8012b96:	b580      	push	{r7, lr}
 8012b98:	b086      	sub	sp, #24
 8012b9a:	af02      	add	r7, sp, #8
 8012b9c:	6078      	str	r0, [r7, #4]
 8012b9e:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 8012ba0:	683b      	ldr	r3, [r7, #0]
 8012ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ba4:	60fb      	str	r3, [r7, #12]
    Rect contained(0, 0, 0, 0);
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	9300      	str	r3, [sp, #0]
 8012baa:	2300      	movs	r3, #0
 8012bac:	2200      	movs	r2, #0
 8012bae:	2100      	movs	r1, #0
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f7ff fc33 	bl	801241c <_ZN8touchgfx4RectC1Essss>
    while (d)
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d00b      	beq.n	8012bd4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x3e>
    {
        contained.expandToFit(d->getRect());
 8012bbc:	68f8      	ldr	r0, [r7, #12]
 8012bbe:	f7ff fe0c 	bl	80127da <_ZNK8touchgfx8Drawable7getRectEv>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	4619      	mov	r1, r3
 8012bc6:	6878      	ldr	r0, [r7, #4]
 8012bc8:	f7ff fd64 	bl	8012694 <_ZN8touchgfx4Rect11expandToFitERKS0_>
        d = d->nextSibling;
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	699b      	ldr	r3, [r3, #24]
 8012bd0:	60fb      	str	r3, [r7, #12]
    while (d)
 8012bd2:	e7f0      	b.n	8012bb6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x20>
    }
    return contained;
 8012bd4:	bf00      	nop
}
 8012bd6:	6878      	ldr	r0, [r7, #4]
 8012bd8:	3710      	adds	r7, #16
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}

08012bde <_ZN8touchgfx9Container20moveChildrenRelativeEss>:

void Container::moveChildrenRelative(int16_t deltaX, int16_t deltaY)
{
 8012bde:	b580      	push	{r7, lr}
 8012be0:	b084      	sub	sp, #16
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	6078      	str	r0, [r7, #4]
 8012be6:	460b      	mov	r3, r1
 8012be8:	807b      	strh	r3, [r7, #2]
 8012bea:	4613      	mov	r3, r2
 8012bec:	803b      	strh	r3, [r7, #0]
    Drawable* d = firstChild;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bf2:	60fb      	str	r3, [r7, #12]
    while (d)
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d00d      	beq.n	8012c16 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x38>
    {
        d->moveRelative(deltaX, deltaY);
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	3354      	adds	r3, #84	; 0x54
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012c06:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8012c0a:	68f8      	ldr	r0, [r7, #12]
 8012c0c:	4798      	blx	r3
        d = d->nextSibling;
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	699b      	ldr	r3, [r3, #24]
 8012c12:	60fb      	str	r3, [r7, #12]
    while (d)
 8012c14:	e7ee      	b.n	8012bf4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x16>
    }
}
 8012c16:	bf00      	nop
 8012c18:	3710      	adds	r7, #16
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd80      	pop	{r7, pc}

08012c1e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:

void Container::forEachChild(GenericCallback<Drawable&>* function)
{
 8012c1e:	b580      	push	{r7, lr}
 8012c20:	b084      	sub	sp, #16
 8012c22:	af00      	add	r7, sp, #0
 8012c24:	6078      	str	r0, [r7, #4]
 8012c26:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c2c:	60fb      	str	r3, [r7, #12]
    while (d)
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d00a      	beq.n	8012c4a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x2c>
    {
        function->execute(*d);
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	3308      	adds	r3, #8
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	68f9      	ldr	r1, [r7, #12]
 8012c3e:	6838      	ldr	r0, [r7, #0]
 8012c40:	4798      	blx	r3
        d = d->nextSibling;
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	699b      	ldr	r3, [r3, #24]
 8012c46:	60fb      	str	r3, [r7, #12]
    while (d)
 8012c48:	e7f1      	b.n	8012c2e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x10>
    }
}
 8012c4a:	bf00      	nop
 8012c4c:	3710      	adds	r7, #16
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}

08012c52 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:

void Container::insert(Drawable* previous, Drawable& d)
{
 8012c52:	b580      	push	{r7, lr}
 8012c54:	b086      	sub	sp, #24
 8012c56:	af00      	add	r7, sp, #0
 8012c58:	60f8      	str	r0, [r7, #12]
 8012c5a:	60b9      	str	r1, [r7, #8]
 8012c5c:	607a      	str	r2, [r7, #4]
    if (!firstChild)
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d107      	bne.n	8012c76 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x24>
    {
        // Insert as only element
        add(d);
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	3364      	adds	r3, #100	; 0x64
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	6879      	ldr	r1, [r7, #4]
 8012c70:	68f8      	ldr	r0, [r7, #12]
 8012c72:	4798      	blx	r3
        return;
 8012c74:	e026      	b.n	8012cc4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else if (!previous)
 8012c76:	68bb      	ldr	r3, [r7, #8]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d10a      	bne.n	8012c92 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x40>
    {
        // Insert as head element
        d.nextSibling = firstChild;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	619a      	str	r2, [r3, #24]
        firstChild = &d;
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	687a      	ldr	r2, [r7, #4]
 8012c88:	629a      	str	r2, [r3, #40]	; 0x28
        d.parent = this;
 8012c8a:	68fa      	ldr	r2, [r7, #12]
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	615a      	str	r2, [r3, #20]
 8012c90:	e018      	b.n	8012cc4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else
    {
        Drawable* tmp = firstChild;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c96:	617b      	str	r3, [r7, #20]
        while (tmp)
 8012c98:	697b      	ldr	r3, [r7, #20]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d012      	beq.n	8012cc4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
        {
            if (tmp == previous)
 8012c9e:	697a      	ldr	r2, [r7, #20]
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	429a      	cmp	r2, r3
 8012ca4:	d10a      	bne.n	8012cbc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x6a>
            {
                d.nextSibling = tmp->nextSibling;
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	699a      	ldr	r2, [r3, #24]
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	619a      	str	r2, [r3, #24]
                tmp->nextSibling = &d;
 8012cae:	697b      	ldr	r3, [r7, #20]
 8012cb0:	687a      	ldr	r2, [r7, #4]
 8012cb2:	619a      	str	r2, [r3, #24]
                d.parent = this;
 8012cb4:	68fa      	ldr	r2, [r7, #12]
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	615a      	str	r2, [r3, #20]
                return;
 8012cba:	e003      	b.n	8012cc4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
            }
            tmp = tmp->nextSibling;
 8012cbc:	697b      	ldr	r3, [r7, #20]
 8012cbe:	699b      	ldr	r3, [r3, #24]
 8012cc0:	617b      	str	r3, [r7, #20]
        while (tmp)
 8012cc2:	e7e9      	b.n	8012c98 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x46>
        }
    }
}
 8012cc4:	3718      	adds	r7, #24
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}

08012cca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:

void Container::setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
{
 8012cca:	b580      	push	{r7, lr}
 8012ccc:	b088      	sub	sp, #32
 8012cce:	af00      	add	r7, sp, #0
 8012cd0:	60f8      	str	r0, [r7, #12]
 8012cd2:	60b9      	str	r1, [r7, #8]
 8012cd4:	607a      	str	r2, [r7, #4]
    // This function adds the children of this container to the list of drawables to draw.
    if (!isVisible())
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f7ff fa57 	bl	801218c <_ZNK8touchgfx8Drawable9isVisibleEv>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	f083 0301 	eor.w	r3, r3, #1
 8012ce4:	b2db      	uxtb	r3, r3
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d14b      	bne.n	8012d82 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb8>
    {
        // If this container itself is not visible, do not add anyone to draw chain.
        return;
    }

    if (!firstChild)
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d049      	beq.n	8012d86 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbc>
    {
        // If this container is empty, do not add anyone.
        return;
    }
    Drawable* d = firstChild;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cf6:	61fb      	str	r3, [r7, #28]
    while (d)
 8012cf8:	69fb      	ldr	r3, [r7, #28]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d044      	beq.n	8012d88 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
    {
        if (d->isVisible())
 8012cfe:	69f8      	ldr	r0, [r7, #28]
 8012d00:	f7ff fa44 	bl	801218c <_ZNK8touchgfx8Drawable9isVisibleEv>
 8012d04:	4603      	mov	r3, r0
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d037      	beq.n	8012d7a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
        {
            // Only drawables intersecting with the specified invalidated area will be added.
            Rect drawableRegion = invalidatedArea & d->getRect();
 8012d0a:	69f8      	ldr	r0, [r7, #28]
 8012d0c:	f7ff fd65 	bl	80127da <_ZNK8touchgfx8Drawable7getRectEv>
 8012d10:	4602      	mov	r2, r0
 8012d12:	f107 0314 	add.w	r3, r7, #20
 8012d16:	68b9      	ldr	r1, [r7, #8]
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f7ff fc2a 	bl	8012572 <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 8012d1e:	f107 0314 	add.w	r3, r7, #20
 8012d22:	4618      	mov	r0, r3
 8012d24:	f7ff fd42 	bl	80127ac <_ZNK8touchgfx4Rect7isEmptyEv>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	f083 0301 	eor.w	r3, r3, #1
 8012d2e:	b2db      	uxtb	r3, r3
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d022      	beq.n	8012d7a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
            {
                drawableRegion.x -= d->getX();
 8012d34:	69f8      	ldr	r0, [r7, #28]
 8012d36:	f7ff fd5c 	bl	80127f2 <_ZNK8touchgfx8Drawable4getXEv>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012d42:	b29a      	uxth	r2, r3
 8012d44:	b28b      	uxth	r3, r1
 8012d46:	1ad3      	subs	r3, r2, r3
 8012d48:	b29b      	uxth	r3, r3
 8012d4a:	b21b      	sxth	r3, r3
 8012d4c:	82bb      	strh	r3, [r7, #20]
                drawableRegion.y -= d->getY();
 8012d4e:	69f8      	ldr	r0, [r7, #28]
 8012d50:	f7ff fd5c 	bl	801280c <_ZNK8touchgfx8Drawable4getYEv>
 8012d54:	4603      	mov	r3, r0
 8012d56:	4619      	mov	r1, r3
 8012d58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012d5c:	b29a      	uxth	r2, r3
 8012d5e:	b28b      	uxth	r3, r1
 8012d60:	1ad3      	subs	r3, r2, r3
 8012d62:	b29b      	uxth	r3, r3
 8012d64:	b21b      	sxth	r3, r3
 8012d66:	82fb      	strh	r3, [r7, #22]
                d->setupDrawChain(drawableRegion, nextPreviousElement);
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	3360      	adds	r3, #96	; 0x60
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	f107 0114 	add.w	r1, r7, #20
 8012d74:	687a      	ldr	r2, [r7, #4]
 8012d76:	69f8      	ldr	r0, [r7, #28]
 8012d78:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 8012d7a:	69fb      	ldr	r3, [r7, #28]
 8012d7c:	699b      	ldr	r3, [r3, #24]
 8012d7e:	61fb      	str	r3, [r7, #28]
    while (d)
 8012d80:	e7ba      	b.n	8012cf8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x2e>
        return;
 8012d82:	bf00      	nop
 8012d84:	e000      	b.n	8012d88 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
        return;
 8012d86:	bf00      	nop
    }
}
 8012d88:	3720      	adds	r7, #32
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}

08012d8e <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8012d8e:	b480      	push	{r7}
 8012d90:	b083      	sub	sp, #12
 8012d92:	af00      	add	r7, sp, #0
 8012d94:	6078      	str	r0, [r7, #4]
 8012d96:	6039      	str	r1, [r7, #0]
        color = col;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	683a      	ldr	r2, [r7, #0]
 8012d9c:	601a      	str	r2, [r3, #0]
    }
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	4618      	mov	r0, r3
 8012da2:	370c      	adds	r7, #12
 8012da4:	46bd      	mov	sp, r7
 8012da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012daa:	4770      	bx	lr

08012dac <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b084      	sub	sp, #16
 8012db0:	af02      	add	r7, sp, #8
 8012db2:	6078      	str	r0, [r7, #4]
        visible(true)
 8012db4:	4a13      	ldr	r2, [pc, #76]	; (8012e04 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	601a      	str	r2, [r3, #0]
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	1d18      	adds	r0, r3, #4
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	9300      	str	r3, [sp, #0]
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	2100      	movs	r1, #0
 8012dc8:	f7ff fb28 	bl	801241c <_ZN8touchgfx4RectC1Essss>
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	330c      	adds	r3, #12
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7ff f8d7 	bl	8011f84 <_ZN8touchgfx4RectC1Ev>
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	2200      	movs	r2, #0
 8012dda:	615a      	str	r2, [r3, #20]
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2200      	movs	r2, #0
 8012de0:	619a      	str	r2, [r3, #24]
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2200      	movs	r2, #0
 8012de6:	61da      	str	r2, [r3, #28]
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2200      	movs	r2, #0
 8012dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2201      	movs	r2, #1
 8012df4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	3708      	adds	r7, #8
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}
 8012e02:	bf00      	nop
 8012e04:	0802f114 	.word	0x0802f114

08012e08 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8012e08:	b480      	push	{r7}
 8012e0a:	b083      	sub	sp, #12
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
        return rect.width;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8012e16:	4618      	mov	r0, r3
 8012e18:	370c      	adds	r7, #12
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e20:	4770      	bx	lr

08012e22 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8012e22:	b480      	push	{r7}
 8012e24:	b083      	sub	sp, #12
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	6078      	str	r0, [r7, #4]
        return rect.height;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8012e30:	4618      	mov	r0, r3
 8012e32:	370c      	adds	r7, #12
 8012e34:	46bd      	mov	sp, r7
 8012e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3a:	4770      	bx	lr

08012e3c <_ZN8touchgfx9ContainerC1Ev>:
    Container() : Drawable(),
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b082      	sub	sp, #8
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
        firstChild(0)
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	4618      	mov	r0, r3
 8012e48:	f7ff ffb0 	bl	8012dac <_ZN8touchgfx8DrawableC1Ev>
 8012e4c:	4a05      	ldr	r2, [pc, #20]	; (8012e64 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	601a      	str	r2, [r3, #0]
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	2200      	movs	r2, #0
 8012e56:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	3708      	adds	r7, #8
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd80      	pop	{r7, pc}
 8012e62:	bf00      	nop
 8012e64:	0802cb00 	.word	0x0802cb00

08012e68 <_ZN8touchgfx6WidgetC1Ev>:
    Widget() : Drawable() { }
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b082      	sub	sp, #8
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	4618      	mov	r0, r3
 8012e74:	f7ff ff9a 	bl	8012dac <_ZN8touchgfx8DrawableC1Ev>
 8012e78:	4a03      	ldr	r2, [pc, #12]	; (8012e88 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	601a      	str	r2, [r3, #0]
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	4618      	mov	r0, r3
 8012e82:	3708      	adds	r7, #8
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}
 8012e88:	0802ca94 	.word	0x0802ca94

08012e8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b082      	sub	sp, #8
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
 8012e94:	6039      	str	r1, [r7, #0]
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f7ff ffe5 	bl	8012e68 <_ZN8touchgfx6WidgetC1Ev>
 8012e9e:	4a0b      	ldr	r2, [pc, #44]	; (8012ecc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	601a      	str	r2, [r3, #0]
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	3326      	adds	r3, #38	; 0x26
 8012ea8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7ff f880 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	22ff      	movs	r2, #255	; 0xff
 8012eb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        setBitmap(bmp);
 8012eba:	6839      	ldr	r1, [r7, #0]
 8012ebc:	6878      	ldr	r0, [r7, #4]
 8012ebe:	f001 fc01 	bl	80146c4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3708      	adds	r7, #8
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}
 8012ecc:	0802d088 	.word	0x0802d088

08012ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ev>:
        /**
         * @fn Q5::Q5()
         *
         * @brief Default constructor.
         */
        Q5() : v(0) { }
 8012ed0:	b480      	push	{r7}
 8012ed2:	b083      	sub	sp, #12
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	2200      	movs	r2, #0
 8012edc:	601a      	str	r2, [r3, #0]
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	370c      	adds	r7, #12
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eea:	4770      	bx	lr

08012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 8012eec:	b480      	push	{r7}
 8012eee:	b083      	sub	sp, #12
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
 8012ef4:	6039      	str	r1, [r7, #0]
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	683a      	ldr	r2, [r7, #0]
 8012efa:	601a      	str	r2, [r3, #0]
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	4618      	mov	r0, r3
 8012f00:	370c      	adds	r7, #12
 8012f02:	46bd      	mov	sp, r7
 8012f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f08:	4770      	bx	lr

08012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8012f0a:	b480      	push	{r7}
 8012f0c:	b083      	sub	sp, #12
 8012f0e:	af00      	add	r7, sp, #0
 8012f10:	6078      	str	r0, [r7, #4]
        {
            return v;
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	681b      	ldr	r3, [r3, #0]
        }
 8012f16:	4618      	mov	r0, r3
 8012f18:	370c      	adds	r7, #12
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f20:	4770      	bx	lr

08012f22 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
     *
     *        Sets the alpha channel for the CanvasWidget.
     *
     * @param alpha The alpha value. 255 = completely solid.
     */
    virtual void setAlpha(uint8_t alpha)
 8012f22:	b480      	push	{r7}
 8012f24:	b083      	sub	sp, #12
 8012f26:	af00      	add	r7, sp, #0
 8012f28:	6078      	str	r0, [r7, #4]
 8012f2a:	460b      	mov	r3, r1
 8012f2c:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	78fa      	ldrb	r2, [r7, #3]
 8012f32:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
 8012f36:	bf00      	nop
 8012f38:	370c      	adds	r7, #12
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f40:	4770      	bx	lr

08012f42 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
     *
     *        Gets the current alpha value.
     *
     * @return The current alpha value.
     */
    virtual uint8_t getAlpha() const
 8012f42:	b480      	push	{r7}
 8012f44:	b083      	sub	sp, #12
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    }
 8012f50:	4618      	mov	r0, r3
 8012f52:	370c      	adds	r7, #12
 8012f54:	46bd      	mov	sp, r7
 8012f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5a:	4770      	bx	lr

08012f5c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
    AbstractPainterRGB565()
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
    }

    virtual ~AbstractPainterRGB565() {}
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
 8012f64:	4a05      	ldr	r2, [pc, #20]	; (8012f7c <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	601a      	str	r2, [r3, #0]
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f003 f833 	bl	8015fd8 <_ZN8touchgfx15AbstractPainterD1Ev>
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	4618      	mov	r0, r3
 8012f76:	3708      	adds	r7, #8
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}
 8012f7c:	0802d284 	.word	0x0802d284

08012f80 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b082      	sub	sp, #8
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
 8012f88:	6878      	ldr	r0, [r7, #4]
 8012f8a:	f7ff ffe7 	bl	8012f5c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 8012f8e:	2114      	movs	r1, #20
 8012f90:	6878      	ldr	r0, [r7, #4]
 8012f92:	f017 fac6 	bl	802a522 <_ZdlPvj>
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	4618      	mov	r0, r3
 8012f9a:	3708      	adds	r7, #8
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd80      	pop	{r7, pc}

08012fa0 <_ZN8touchgfx5ShapeILt3EEC1Ev>:
 * @tparam T      The type of the points used for the shape. Must be int or float.
 *
 * @see CanvasWidget
 */
template <uint16_t POINTS>
class Shape : public AbstractShape
 8012fa0:	b5b0      	push	{r4, r5, r7, lr}
 8012fa2:	b082      	sub	sp, #8
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	4618      	mov	r0, r3
 8012fac:	f003 fb40 	bl	8016630 <_ZN8touchgfx13AbstractShapeC1Ev>
 8012fb0:	4a1b      	ldr	r2, [pc, #108]	; (8013020 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x80>)
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	601a      	str	r2, [r3, #0]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	334c      	adds	r3, #76	; 0x4c
 8012fba:	2402      	movs	r4, #2
 8012fbc:	461d      	mov	r5, r3
 8012fbe:	2c00      	cmp	r4, #0
 8012fc0:	db05      	blt.n	8012fce <_ZN8touchgfx5ShapeILt3EEC1Ev+0x2e>
 8012fc2:	4628      	mov	r0, r5
 8012fc4:	f7ff ff84 	bl	8012ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8012fc8:	3504      	adds	r5, #4
 8012fca:	3c01      	subs	r4, #1
 8012fcc:	e7f7      	b.n	8012fbe <_ZN8touchgfx5ShapeILt3EEC1Ev+0x1e>
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	3358      	adds	r3, #88	; 0x58
 8012fd2:	2402      	movs	r4, #2
 8012fd4:	461d      	mov	r5, r3
 8012fd6:	2c00      	cmp	r4, #0
 8012fd8:	db05      	blt.n	8012fe6 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x46>
 8012fda:	4628      	mov	r0, r5
 8012fdc:	f7ff ff78 	bl	8012ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8012fe0:	3504      	adds	r5, #4
 8012fe2:	3c01      	subs	r4, #1
 8012fe4:	e7f7      	b.n	8012fd6 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x36>
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	3364      	adds	r3, #100	; 0x64
 8012fea:	2402      	movs	r4, #2
 8012fec:	461d      	mov	r5, r3
 8012fee:	2c00      	cmp	r4, #0
 8012ff0:	db05      	blt.n	8012ffe <_ZN8touchgfx5ShapeILt3EEC1Ev+0x5e>
 8012ff2:	4628      	mov	r0, r5
 8012ff4:	f7ff ff6c 	bl	8012ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8012ff8:	3504      	adds	r5, #4
 8012ffa:	3c01      	subs	r4, #1
 8012ffc:	e7f7      	b.n	8012fee <_ZN8touchgfx5ShapeILt3EEC1Ev+0x4e>
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	3370      	adds	r3, #112	; 0x70
 8013002:	2402      	movs	r4, #2
 8013004:	461d      	mov	r5, r3
 8013006:	2c00      	cmp	r4, #0
 8013008:	db05      	blt.n	8013016 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x76>
 801300a:	4628      	mov	r0, r5
 801300c:	f7ff ff60 	bl	8012ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8013010:	3504      	adds	r5, #4
 8013012:	3c01      	subs	r4, #1
 8013014:	e7f7      	b.n	8013006 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x66>
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	4618      	mov	r0, r3
 801301a:	3708      	adds	r7, #8
 801301c:	46bd      	mov	sp, r7
 801301e:	bdb0      	pop	{r4, r5, r7, pc}
 8013020:	0802cd9c 	.word	0x0802cd9c

08013024 <_ZN5Gauge6NeedleC1Ev>:
     * @sa Shape
     */
    class Needle : public Shape<3>
    {
    public:
        Needle() {
 8013024:	b5b0      	push	{r4, r5, r7, lr}
 8013026:	b088      	sub	sp, #32
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	4618      	mov	r0, r3
 8013030:	f7ff ffb6 	bl	8012fa0 <_ZN8touchgfx5ShapeILt3EEC1Ev>
 8013034:	4a0c      	ldr	r2, [pc, #48]	; (8013068 <_ZN5Gauge6NeedleC1Ev+0x44>)
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	601a      	str	r2, [r3, #0]
            ShapePoint<float> points[3] = { {-2.5f,0}, {0.0f, -90}, {2.5f, 0} };
 801303a:	4b0c      	ldr	r3, [pc, #48]	; (801306c <_ZN5Gauge6NeedleC1Ev+0x48>)
 801303c:	f107 0408 	add.w	r4, r7, #8
 8013040:	461d      	mov	r5, r3
 8013042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013046:	e895 0003 	ldmia.w	r5, {r0, r1}
 801304a:	e884 0003 	stmia.w	r4, {r0, r1}
            setShape(points);
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	f107 0208 	add.w	r2, r7, #8
 8013054:	4611      	mov	r1, r2
 8013056:	4618      	mov	r0, r3
 8013058:	f000 fa7c 	bl	8013554 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPNS0_10ShapePointIT_EE>
        }
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	4618      	mov	r0, r3
 8013060:	3720      	adds	r7, #32
 8013062:	46bd      	mov	sp, r7
 8013064:	bdb0      	pop	{r4, r5, r7, pc}
 8013066:	bf00      	nop
 8013068:	0802ccfc 	.word	0x0802ccfc
 801306c:	0802c274 	.word	0x0802c274

08013070 <_ZN5Gauge12NeedleShadowC1Ev>:
     * @sa Shape
     */
    class NeedleShadow : public Shape<3>
    {
    public:
        NeedleShadow() {
 8013070:	b5b0      	push	{r4, r5, r7, lr}
 8013072:	b088      	sub	sp, #32
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	4618      	mov	r0, r3
 801307c:	f7ff ff90 	bl	8012fa0 <_ZN8touchgfx5ShapeILt3EEC1Ev>
 8013080:	4a0c      	ldr	r2, [pc, #48]	; (80130b4 <_ZN5Gauge12NeedleShadowC1Ev+0x44>)
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	601a      	str	r2, [r3, #0]
            ShapePoint<float> points[3] = { {-4,0}, {0.0f, -120}, {4, 0} };
 8013086:	4b0c      	ldr	r3, [pc, #48]	; (80130b8 <_ZN5Gauge12NeedleShadowC1Ev+0x48>)
 8013088:	f107 0408 	add.w	r4, r7, #8
 801308c:	461d      	mov	r5, r3
 801308e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013092:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013096:	e884 0003 	stmia.w	r4, {r0, r1}
            setShape(points);
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	f107 0208 	add.w	r2, r7, #8
 80130a0:	4611      	mov	r1, r2
 80130a2:	4618      	mov	r0, r3
 80130a4:	f000 fa56 	bl	8013554 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPNS0_10ShapePointIT_EE>
        }
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	4618      	mov	r0, r3
 80130ac:	3720      	adds	r7, #32
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bdb0      	pop	{r4, r5, r7, pc}
 80130b2:	bf00      	nop
 80130b4:	0802cc5c 	.word	0x0802cc5c
 80130b8:	0802c28c 	.word	0x0802c28c

080130bc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 80130bc:	b590      	push	{r4, r7, lr}
 80130be:	b083      	sub	sp, #12
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	4603      	mov	r3, r0
 80130c4:	71fb      	strb	r3, [r7, #7]
 80130c6:	460b      	mov	r3, r1
 80130c8:	71bb      	strb	r3, [r7, #6]
 80130ca:	4613      	mov	r3, r2
 80130cc:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 80130ce:	f7ff f971 	bl	80123b4 <_ZN8touchgfx3HAL11getInstanceEv>
 80130d2:	4603      	mov	r3, r0
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d105      	bne.n	80130e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 80130d8:	4b0a      	ldr	r3, [pc, #40]	; (8013104 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 80130da:	4a0b      	ldr	r2, [pc, #44]	; (8013108 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 80130dc:	2138      	movs	r1, #56	; 0x38
 80130de:	480b      	ldr	r0, [pc, #44]	; (801310c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 80130e0:	f018 f80a 	bl	802b0f8 <__assert_func>
 80130e4:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 80130e6:	f7ff f971 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 80130ea:	6803      	ldr	r3, [r0, #0]
 80130ec:	332c      	adds	r3, #44	; 0x2c
 80130ee:	681c      	ldr	r4, [r3, #0]
 80130f0:	797b      	ldrb	r3, [r7, #5]
 80130f2:	79ba      	ldrb	r2, [r7, #6]
 80130f4:	79f9      	ldrb	r1, [r7, #7]
 80130f6:	47a0      	blx	r4
 80130f8:	4603      	mov	r3, r0
    }
 80130fa:	4618      	mov	r0, r3
 80130fc:	370c      	adds	r7, #12
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd90      	pop	{r4, r7, pc}
 8013102:	bf00      	nop
 8013104:	0802c2a4 	.word	0x0802c2a4
 8013108:	0802ce34 	.word	0x0802ce34
 801310c:	0802c2e8 	.word	0x0802c2e8

08013110 <_ZN5GaugeC1Ev>:
#include <touchgfx/containers/Gauge.hpp>
#include <touchgfx/Color.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


Gauge::Gauge() :
 8013110:	b590      	push	{r4, r7, lr}
 8013112:	b087      	sub	sp, #28
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
    gaugeAnimationRunning(false),
    gaugeAnimationDuration(10),
    easingEquation(EasingEquations::backEaseOut)
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	4618      	mov	r0, r3
 801311c:	f7ff fe8e 	bl	8012e3c <_ZN8touchgfx9ContainerC1Ev>
 8013120:	4a3b      	ldr	r2, [pc, #236]	; (8013210 <_ZN5GaugeC1Ev+0x100>)
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	601a      	str	r2, [r3, #0]
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801312c:	f107 0308 	add.w	r3, r7, #8
 8013130:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013134:	4618      	mov	r0, r3
 8013136:	f7fe ff3c 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801313a:	f107 0308 	add.w	r3, r7, #8
 801313e:	4619      	mov	r1, r3
 8013140:	4620      	mov	r0, r4
 8013142:	f7ff fea3 	bl	8012e8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	f103 0458 	add.w	r4, r3, #88	; 0x58
 801314c:	f107 030c 	add.w	r3, r7, #12
 8013150:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013154:	4618      	mov	r0, r3
 8013156:	f7fe ff2c 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801315a:	f107 030c 	add.w	r3, r7, #12
 801315e:	4619      	mov	r1, r3
 8013160:	4620      	mov	r0, r4
 8013162:	f7ff fe93 	bl	8012e8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	3384      	adds	r3, #132	; 0x84
 801316a:	4618      	mov	r0, r3
 801316c:	f7ff ff5a 	bl	8013024 <_ZN5Gauge6NeedleC1Ev>
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013176:	4618      	mov	r0, r3
 8013178:	f7ff ff7a 	bl	8013070 <_ZN5Gauge12NeedleShadowC1Ev>
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 8013182:	f107 0310 	add.w	r3, r7, #16
 8013186:	2100      	movs	r1, #0
 8013188:	4618      	mov	r0, r3
 801318a:	f7ff fe00 	bl	8012d8e <_ZN8touchgfx9colortypeC1Em>
 801318e:	22ff      	movs	r2, #255	; 0xff
 8013190:	6939      	ldr	r1, [r7, #16]
 8013192:	4620      	mov	r0, r4
 8013194:	f004 feea 	bl	8017f6c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh>
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	f503 74ce 	add.w	r4, r3, #412	; 0x19c
 801319e:	f107 0314 	add.w	r3, r7, #20
 80131a2:	2100      	movs	r1, #0
 80131a4:	4618      	mov	r0, r3
 80131a6:	f7ff fdf2 	bl	8012d8e <_ZN8touchgfx9colortypeC1Em>
 80131aa:	22ff      	movs	r2, #255	; 0xff
 80131ac:	6979      	ldr	r1, [r7, #20]
 80131ae:	4620      	mov	r0, r4
 80131b0:	f004 fedc 	bl	8017f6c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh>
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2200      	movs	r2, #0
 80131b8:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	220a      	movs	r2, #10
 80131c0:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	4a13      	ldr	r2, [pc, #76]	; (8013214 <_ZN5GaugeC1Ev+0x104>)
 80131c8:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
{
    add(background);
 80131cc:	687a      	ldr	r2, [r7, #4]
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	332c      	adds	r3, #44	; 0x2c
 80131d2:	4619      	mov	r1, r3
 80131d4:	4610      	mov	r0, r2
 80131d6:	f7ff fb49 	bl	801286c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(needleShadow);
 80131da:	687a      	ldr	r2, [r7, #4]
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80131e2:	4619      	mov	r1, r3
 80131e4:	4610      	mov	r0, r2
 80131e6:	f7ff fb41 	bl	801286c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(needle);
 80131ea:	687a      	ldr	r2, [r7, #4]
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	3384      	adds	r3, #132	; 0x84
 80131f0:	4619      	mov	r1, r3
 80131f2:	4610      	mov	r0, r2
 80131f4:	f7ff fb3a 	bl	801286c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(center);
 80131f8:	687a      	ldr	r2, [r7, #4]
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	3358      	adds	r3, #88	; 0x58
 80131fe:	4619      	mov	r1, r3
 8013200:	4610      	mov	r0, r2
 8013202:	f7ff fb33 	bl	801286c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	4618      	mov	r0, r3
 801320a:	371c      	adds	r7, #28
 801320c:	46bd      	mov	sp, r7
 801320e:	bd90      	pop	{r4, r7, pc}
 8013210:	0802cbcc 	.word	0x0802cbcc
 8013214:	080258f5 	.word	0x080258f5

08013218 <_ZN5GaugeD1Ev>:

Gauge::~Gauge()
 8013218:	b580      	push	{r7, lr}
 801321a:	b082      	sub	sp, #8
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
 8013220:	4a16      	ldr	r2, [pc, #88]	; (801327c <_ZN5GaugeD1Ev+0x64>)
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	601a      	str	r2, [r3, #0]
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 801322c:	4618      	mov	r0, r3
 801322e:	f000 fac7 	bl	80137c0 <_ZN8touchgfx13PainterRGB565D1Ev>
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8013238:	4618      	mov	r0, r3
 801323a:	f000 fac1 	bl	80137c0 <_ZN8touchgfx13PainterRGB565D1Ev>
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013244:	4618      	mov	r0, r3
 8013246:	f000 fa77 	bl	8013738 <_ZN5Gauge12NeedleShadowD1Ev>
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	3384      	adds	r3, #132	; 0x84
 801324e:	4618      	mov	r0, r3
 8013250:	f000 fa94 	bl	801377c <_ZN5Gauge6NeedleD1Ev>
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	3358      	adds	r3, #88	; 0x58
 8013258:	4618      	mov	r0, r3
 801325a:	f7ff f889 	bl	8012370 <_ZN8touchgfx5ImageD1Ev>
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	332c      	adds	r3, #44	; 0x2c
 8013262:	4618      	mov	r0, r3
 8013264:	f7ff f884 	bl	8012370 <_ZN8touchgfx5ImageD1Ev>
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	4618      	mov	r0, r3
 801326c:	f7ff f852 	bl	8012314 <_ZN8touchgfx9ContainerD1Ev>
{
}
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	4618      	mov	r0, r3
 8013274:	3708      	adds	r7, #8
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}
 801327a:	bf00      	nop
 801327c:	0802cbcc 	.word	0x0802cbcc

08013280 <_ZN5GaugeD0Ev>:
Gauge::~Gauge()
 8013280:	b580      	push	{r7, lr}
 8013282:	b082      	sub	sp, #8
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
}
 8013288:	6878      	ldr	r0, [r7, #4]
 801328a:	f7ff ffc5 	bl	8013218 <_ZN5GaugeD1Ev>
 801328e:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8013292:	6878      	ldr	r0, [r7, #4]
 8013294:	f017 f945 	bl	802a522 <_ZdlPvj>
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	4618      	mov	r0, r3
 801329c:	3708      	adds	r7, #8
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}

080132a2 <_ZN5Gauge10setBitmapsEN8touchgfx6BitmapE>:


void Gauge::setBitmaps(Bitmap backgroundBmp)
{
 80132a2:	b5b0      	push	{r4, r5, r7, lr}
 80132a4:	b084      	sub	sp, #16
 80132a6:	af02      	add	r7, sp, #8
 80132a8:	6078      	str	r0, [r7, #4]
 80132aa:	8039      	strh	r1, [r7, #0]
    background.setBitmap(backgroundBmp);
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	332c      	adds	r3, #44	; 0x2c
 80132b0:	463a      	mov	r2, r7
 80132b2:	4611      	mov	r1, r2
 80132b4:	4618      	mov	r0, r3
 80132b6:	f001 fa05 	bl	80146c4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    background.setXY(0, 0);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	332c      	adds	r3, #44	; 0x2c
 80132be:	2200      	movs	r2, #0
 80132c0:	2100      	movs	r1, #0
 80132c2:	4618      	mov	r0, r3
 80132c4:	f7fe fef1 	bl	80120aa <_ZN8touchgfx8Drawable5setXYEss>

//    center.setBitmap(centerBmp);
//    center.setXY((background.getWidth() - center.getWidth())/2, (background.getHeight() - center.getHeight())/2);

    colorPainter.setColor(Color::getColorFrom24BitRGB(0xFF, 0x0, 0x0));
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 80132ce:	2200      	movs	r2, #0
 80132d0:	2100      	movs	r1, #0
 80132d2:	20ff      	movs	r0, #255	; 0xff
 80132d4:	f7ff fef2 	bl	80130bc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80132d8:	4603      	mov	r3, r0
 80132da:	22ff      	movs	r2, #255	; 0xff
 80132dc:	4619      	mov	r1, r3
 80132de:	4620      	mov	r0, r4
 80132e0:	f004 fe60 	bl	8017fa4 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeEh>
    needle.setPosition(0, 0, background.getWidth(), background.getHeight());
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	f103 0484 	add.w	r4, r3, #132	; 0x84
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	332c      	adds	r3, #44	; 0x2c
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7ff fd8a 	bl	8012e08 <_ZNK8touchgfx8Drawable8getWidthEv>
 80132f4:	4603      	mov	r3, r0
 80132f6:	461d      	mov	r5, r3
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	332c      	adds	r3, #44	; 0x2c
 80132fc:	4618      	mov	r0, r3
 80132fe:	f7ff fd90 	bl	8012e22 <_ZNK8touchgfx8Drawable9getHeightEv>
 8013302:	4603      	mov	r3, r0
 8013304:	9300      	str	r3, [sp, #0]
 8013306:	462b      	mov	r3, r5
 8013308:	2200      	movs	r2, #0
 801330a:	2100      	movs	r1, #0
 801330c:	4620      	mov	r0, r4
 801330e:	f7fe fe81 	bl	8012014 <_ZN8touchgfx8Drawable11setPositionEssss>
    needle.setOrigin(background.getWidth() / 2, background.getHeight() / 2);
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	332c      	adds	r3, #44	; 0x2c
 801331c:	4618      	mov	r0, r3
 801331e:	f7ff fd73 	bl	8012e08 <_ZNK8touchgfx8Drawable8getWidthEv>
 8013322:	4603      	mov	r3, r0
 8013324:	2b00      	cmp	r3, #0
 8013326:	da00      	bge.n	801332a <_ZN5Gauge10setBitmapsEN8touchgfx6BitmapE+0x88>
 8013328:	3301      	adds	r3, #1
 801332a:	105b      	asrs	r3, r3, #1
 801332c:	b21b      	sxth	r3, r3
 801332e:	461d      	mov	r5, r3
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	332c      	adds	r3, #44	; 0x2c
 8013334:	4618      	mov	r0, r3
 8013336:	f7ff fd74 	bl	8012e22 <_ZNK8touchgfx8Drawable9getHeightEv>
 801333a:	4603      	mov	r3, r0
 801333c:	2b00      	cmp	r3, #0
 801333e:	da00      	bge.n	8013342 <_ZN5Gauge10setBitmapsEN8touchgfx6BitmapE+0xa0>
 8013340:	3301      	adds	r3, #1
 8013342:	105b      	asrs	r3, r3, #1
 8013344:	b21b      	sxth	r3, r3
 8013346:	461a      	mov	r2, r3
 8013348:	4629      	mov	r1, r5
 801334a:	4620      	mov	r0, r4
 801334c:	f000 f956 	bl	80135fc <_ZN8touchgfx13AbstractShape9setOriginIiEEvT_S2_>
    needle.setPainter(colorPainter);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801335c:	4619      	mov	r1, r3
 801335e:	4610      	mov	r0, r2
 8013360:	f004 fc54 	bl	8017c0c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
//    needleShadow.setPosition(0, 0, background.getWidth(), background.getHeight());
//    needleShadow.setOrigin(background.getWidth() / 2, background.getHeight() / 2);
//    needleShadow.setPainter(shadowPainter);


    setWidth(background.getWidth());
 8013364:	687d      	ldr	r5, [r7, #4]
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	3338      	adds	r3, #56	; 0x38
 801336c:	681c      	ldr	r4, [r3, #0]
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	332c      	adds	r3, #44	; 0x2c
 8013372:	4618      	mov	r0, r3
 8013374:	f7ff fd48 	bl	8012e08 <_ZNK8touchgfx8Drawable8getWidthEv>
 8013378:	4603      	mov	r3, r0
 801337a:	4619      	mov	r1, r3
 801337c:	4628      	mov	r0, r5
 801337e:	47a0      	blx	r4
    setHeight(background.getHeight());
 8013380:	687d      	ldr	r5, [r7, #4]
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	333c      	adds	r3, #60	; 0x3c
 8013388:	681c      	ldr	r4, [r3, #0]
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	332c      	adds	r3, #44	; 0x2c
 801338e:	4618      	mov	r0, r3
 8013390:	f7ff fd47 	bl	8012e22 <_ZNK8touchgfx8Drawable9getHeightEv>
 8013394:	4603      	mov	r3, r0
 8013396:	4619      	mov	r1, r3
 8013398:	4628      	mov	r0, r5
 801339a:	47a0      	blx	r4
}
 801339c:	bf00      	nop
 801339e:	3708      	adds	r7, #8
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bdb0      	pop	{r4, r5, r7, pc}

080133a4 <_ZN5Gauge9setLimitsEiiii>:

void Gauge::setLimits(int newMinValue, int newMaxValue, int newMinDegree, int newMaxDegree)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b084      	sub	sp, #16
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	60f8      	str	r0, [r7, #12]
 80133ac:	60b9      	str	r1, [r7, #8]
 80133ae:	607a      	str	r2, [r7, #4]
 80133b0:	603b      	str	r3, [r7, #0]
    minValue = newMinValue;
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	68ba      	ldr	r2, [r7, #8]
 80133b6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    maxValue = newMaxValue;
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	687a      	ldr	r2, [r7, #4]
 80133be:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    minDegree = newMinDegree;
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	683a      	ldr	r2, [r7, #0]
 80133c6:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
    maxDegree = newMaxDegree;
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	69ba      	ldr	r2, [r7, #24]
 80133ce:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8

    degreesPerValue = ( (maxDegree - minDegree) / ((float)maxValue - minValue) );
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80133de:	1ad3      	subs	r3, r2, r3
 80133e0:	ee07 3a90 	vmov	s15, r3
 80133e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80133ee:	ee07 3a90 	vmov	s15, r3
 80133f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80133fc:	ee07 3a90 	vmov	s15, r3
 8013400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013404:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	edc3 7a75 	vstr	s15, [r3, #468]	; 0x1d4

    currentValue = minValue;
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
    needle.updateAngle((int) ((currentValue - minValue) * degreesPerValue) + minDegree);
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	f103 0084 	add.w	r0, r3, #132	; 0x84
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8013430:	1ad3      	subs	r3, r2, r3
 8013432:	ee07 3a90 	vmov	s15, r3
 8013436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8013440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013448:	ee17 2a90 	vmov	r2, s15
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8013452:	4413      	add	r3, r2
 8013454:	4619      	mov	r1, r3
 8013456:	f000 f91e 	bl	8013696 <_ZN8touchgfx13AbstractShape11updateAngleIiEEvT_>
//    needleShadow.updateAngle((int) ((currentValue - minValue) * degreesPerValue) + minDegree);
}
 801345a:	bf00      	nop
 801345c:	3710      	adds	r7, #16
 801345e:	46bd      	mov	sp, r7
 8013460:	bd80      	pop	{r7, pc}

08013462 <_ZN5Gauge8setValueEi>:

void Gauge::setValue(int newValue)
{
 8013462:	b580      	push	{r7, lr}
 8013464:	b082      	sub	sp, #8
 8013466:	af00      	add	r7, sp, #0
 8013468:	6078      	str	r0, [r7, #4]
 801346a:	6039      	str	r1, [r7, #0]
    currentValue = newValue;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	683a      	ldr	r2, [r7, #0]
 8013470:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
//    deltaValue = newValue - currentValue;

    Application::getInstance()->registerTimerWidget(this);
 8013474:	f011 f8a8 	bl	80245c8 <_ZN8touchgfx11Application11getInstanceEv>
 8013478:	4602      	mov	r2, r0
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	4619      	mov	r1, r3
 801347e:	4610      	mov	r0, r2
 8013480:	f011 f8a8 	bl	80245d4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
//    gaugeAnimationRunning = true;
//    gaugeAnimationCounter = 0;
}
 8013484:	bf00      	nop
 8013486:	3708      	adds	r7, #8
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}

0801348c <_ZN5Gauge15handleTickEventEv>:
{
    easingEquation = newEasingEquation;
}

void Gauge::handleTickEvent()
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b082      	sub	sp, #8
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
//        if (gaugeAnimationCounter <= gaugeAnimationDuration)
//        {
//            int16_t delta = easingEquation(gaugeAnimationCounter, 0, deltaValue, gaugeAnimationDuration);
//
//            needle.updateAngle((int) (((currentValue + delta ) - minValue) * degreesPerValue)  + minDegree);
			if(currentValue <= minValue)
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80134a0:	429a      	cmp	r2, r3
 80134a2:	dc0a      	bgt.n	80134ba <_ZN5Gauge15handleTickEventEv+0x2e>
			{
				needle.updateAngle(minDegree);
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80134b0:	4619      	mov	r1, r3
 80134b2:	4610      	mov	r0, r2
 80134b4:	f000 f8ef 	bl	8013696 <_ZN8touchgfx13AbstractShape11updateAngleIiEEvT_>
//            Application::getInstance()->unregisterTimerWidget(this);
//
//            currentValue = currentValue + deltaValue;
//        }
//    }
}
 80134b8:	e025      	b.n	8013506 <_ZN5Gauge15handleTickEventEv+0x7a>
			else if(currentValue >= maxValue)
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80134c6:	429a      	cmp	r2, r3
 80134c8:	db0a      	blt.n	80134e0 <_ZN5Gauge15handleTickEventEv+0x54>
				needle.updateAngle(maxDegree);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80134d6:	4619      	mov	r1, r3
 80134d8:	4610      	mov	r0, r2
 80134da:	f000 f8dc 	bl	8013696 <_ZN8touchgfx13AbstractShape11updateAngleIiEEvT_>
}
 80134de:	e012      	b.n	8013506 <_ZN5Gauge15handleTickEventEv+0x7a>
				needle.updateAngle((int) ((currentValue * maxDegree) / maxValue));
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	f103 0084 	add.w	r0, r3, #132	; 0x84
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80134ec:	687a      	ldr	r2, [r7, #4]
 80134ee:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
 80134f2:	fb02 f203 	mul.w	r2, r2, r3
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80134fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8013500:	4619      	mov	r1, r3
 8013502:	f000 f8c8 	bl	8013696 <_ZN8touchgfx13AbstractShape11updateAngleIiEEvT_>
}
 8013506:	bf00      	nop
 8013508:	3708      	adds	r7, #8
 801350a:	46bd      	mov	sp, r7
 801350c:	bd80      	pop	{r7, pc}
	...

08013510 <_ZN8touchgfx5ShapeILt3EED1Ev>:
     *
     * @brief Virtual Destructor.
     *
     *        Virtual Destructor.
     */
    virtual ~Shape()
 8013510:	b580      	push	{r7, lr}
 8013512:	b082      	sub	sp, #8
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
    {
    }
 8013518:	4a05      	ldr	r2, [pc, #20]	; (8013530 <_ZN8touchgfx5ShapeILt3EED1Ev+0x20>)
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	601a      	str	r2, [r3, #0]
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	4618      	mov	r0, r3
 8013522:	f003 f8d5 	bl	80166d0 <_ZN8touchgfx13AbstractShapeD1Ev>
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	4618      	mov	r0, r3
 801352a:	3708      	adds	r7, #8
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}
 8013530:	0802cd9c 	.word	0x0802cd9c

08013534 <_ZN8touchgfx5ShapeILt3EED0Ev>:
    virtual ~Shape()
 8013534:	b580      	push	{r7, lr}
 8013536:	b082      	sub	sp, #8
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
    }
 801353c:	6878      	ldr	r0, [r7, #4]
 801353e:	f7ff ffe7 	bl	8013510 <_ZN8touchgfx5ShapeILt3EED1Ev>
 8013542:	217c      	movs	r1, #124	; 0x7c
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f016 ffec 	bl	802a522 <_ZdlPvj>
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	4618      	mov	r0, r3
 801354e:	3708      	adds	r7, #8
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}

08013554 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPNS0_10ShapePointIT_EE>:
     * @param [in] points The points that make up the shape.
     *
     * @note The area containing the shape is not invalidated.
     */
    template <typename T>
    void setShape(ShapePoint<T>* points)
 8013554:	b5b0      	push	{r4, r5, r7, lr}
 8013556:	b088      	sub	sp, #32
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
 801355c:	6039      	str	r1, [r7, #0]
    {
        int numPoints = getNumPoints();
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	337c      	adds	r3, #124	; 0x7c
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	6878      	ldr	r0, [r7, #4]
 8013568:	4798      	blx	r3
 801356a:	61b8      	str	r0, [r7, #24]
        for (int i = 0; i < numPoints; i++)
 801356c:	2300      	movs	r3, #0
 801356e:	61fb      	str	r3, [r7, #28]
 8013570:	69fa      	ldr	r2, [r7, #28]
 8013572:	69bb      	ldr	r3, [r7, #24]
 8013574:	429a      	cmp	r2, r3
 8013576:	da38      	bge.n	80135ea <_ZN8touchgfx13AbstractShape8setShapeIfEEvPNS0_10ShapePointIT_EE+0x96>
        {
            setCorner(i, CWRUtil::toQ5<T>(points[i].x), CWRUtil::toQ5<T>(points[i].y));
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	3380      	adds	r3, #128	; 0x80
 801357e:	681c      	ldr	r4, [r3, #0]
 8013580:	69fb      	ldr	r3, [r7, #28]
 8013582:	00db      	lsls	r3, r3, #3
 8013584:	683a      	ldr	r2, [r7, #0]
 8013586:	4413      	add	r3, r2
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	613b      	str	r3, [r7, #16]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 801358c:	edd7 7a04 	vldr	s15, [r7, #16]
 8013590:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80135f8 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPNS0_10ShapePointIT_EE+0xa4>
 8013594:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801359c:	f107 030c 	add.w	r3, r7, #12
 80135a0:	ee17 1a90 	vmov	r1, s15
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7ff fca1 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	461d      	mov	r5, r3
 80135ae:	69fb      	ldr	r3, [r7, #28]
 80135b0:	00db      	lsls	r3, r3, #3
 80135b2:	683a      	ldr	r2, [r7, #0]
 80135b4:	4413      	add	r3, r2
 80135b6:	685b      	ldr	r3, [r3, #4]
 80135b8:	617b      	str	r3, [r7, #20]
 80135ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80135be:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80135f8 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPNS0_10ShapePointIT_EE+0xa4>
 80135c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80135c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80135ca:	f107 0308 	add.w	r3, r7, #8
 80135ce:	ee17 1a90 	vmov	r1, s15
 80135d2:	4618      	mov	r0, r3
 80135d4:	f7ff fc8a 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80135d8:	68bb      	ldr	r3, [r7, #8]
 80135da:	462a      	mov	r2, r5
 80135dc:	69f9      	ldr	r1, [r7, #28]
 80135de:	6878      	ldr	r0, [r7, #4]
 80135e0:	47a0      	blx	r4
        for (int i = 0; i < numPoints; i++)
 80135e2:	69fb      	ldr	r3, [r7, #28]
 80135e4:	3301      	adds	r3, #1
 80135e6:	61fb      	str	r3, [r7, #28]
 80135e8:	e7c2      	b.n	8013570 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPNS0_10ShapePointIT_EE+0x1c>
        }
        updateAbstractShapeCache();
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f003 f8ea 	bl	80167c4 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 80135f0:	bf00      	nop
 80135f2:	3720      	adds	r7, #32
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bdb0      	pop	{r4, r5, r7, pc}
 80135f8:	42000000 	.word	0x42000000

080135fc <_ZN8touchgfx13AbstractShape9setOriginIiEEvT_S2_>:
     * @note The area containing the AbstractShape is not invalidated.
     *
     * @see moveOrigin()
     */
    template <typename T>
    void setOrigin(T x, T y)
 80135fc:	b590      	push	{r4, r7, lr}
 80135fe:	b08b      	sub	sp, #44	; 0x2c
 8013600:	af00      	add	r7, sp, #0
 8013602:	60f8      	str	r0, [r7, #12]
 8013604:	60b9      	str	r1, [r7, #8]
 8013606:	607a      	str	r2, [r7, #4]
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	623b      	str	r3, [r7, #32]
 801360c:	6a3b      	ldr	r3, [r7, #32]
 801360e:	015a      	lsls	r2, r3, #5
 8013610:	f107 031c 	add.w	r3, r7, #28
 8013614:	4611      	mov	r1, r2
 8013616:	4618      	mov	r0, r3
 8013618:	f7ff fc68 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801361c:	69fb      	ldr	r3, [r7, #28]
    {
        CWRUtil::Q5 dxNew = CWRUtil::toQ5<T>(x);
 801361e:	617b      	str	r3, [r7, #20]
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	627b      	str	r3, [r7, #36]	; 0x24
 8013624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013626:	015a      	lsls	r2, r3, #5
 8013628:	f107 0318 	add.w	r3, r7, #24
 801362c:	4611      	mov	r1, r2
 801362e:	4618      	mov	r0, r3
 8013630:	f7ff fc5c 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013634:	69bb      	ldr	r3, [r7, #24]
        CWRUtil::Q5 dyNew = CWRUtil::toQ5<T>(y);
 8013636:	613b      	str	r3, [r7, #16]

        if (dx == dxNew && dy == dyNew)
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	3330      	adds	r3, #48	; 0x30
 801363c:	4618      	mov	r0, r3
 801363e:	f7ff fc64 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8013642:	4604      	mov	r4, r0
 8013644:	f107 0314 	add.w	r3, r7, #20
 8013648:	4618      	mov	r0, r3
 801364a:	f7ff fc5e 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801364e:	4603      	mov	r3, r0
 8013650:	429c      	cmp	r4, r3
 8013652:	d10f      	bne.n	8013674 <_ZN8touchgfx13AbstractShape9setOriginIiEEvT_S2_+0x78>
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	3334      	adds	r3, #52	; 0x34
 8013658:	4618      	mov	r0, r3
 801365a:	f7ff fc56 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801365e:	4604      	mov	r4, r0
 8013660:	f107 0310 	add.w	r3, r7, #16
 8013664:	4618      	mov	r0, r3
 8013666:	f7ff fc50 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801366a:	4603      	mov	r3, r0
 801366c:	429c      	cmp	r4, r3
 801366e:	d101      	bne.n	8013674 <_ZN8touchgfx13AbstractShape9setOriginIiEEvT_S2_+0x78>
 8013670:	2301      	movs	r3, #1
 8013672:	e000      	b.n	8013676 <_ZN8touchgfx13AbstractShape9setOriginIiEEvT_S2_+0x7a>
 8013674:	2300      	movs	r3, #0
 8013676:	2b00      	cmp	r3, #0
 8013678:	d109      	bne.n	801368e <_ZN8touchgfx13AbstractShape9setOriginIiEEvT_S2_+0x92>
        {
            return;
        }

        dx = dxNew;
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	697a      	ldr	r2, [r7, #20]
 801367e:	631a      	str	r2, [r3, #48]	; 0x30
        dy = dyNew;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	693a      	ldr	r2, [r7, #16]
 8013684:	635a      	str	r2, [r3, #52]	; 0x34

        updateAbstractShapeCache();
 8013686:	68f8      	ldr	r0, [r7, #12]
 8013688:	f003 f89c 	bl	80167c4 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
 801368c:	e000      	b.n	8013690 <_ZN8touchgfx13AbstractShape9setOriginIiEEvT_S2_+0x94>
            return;
 801368e:	bf00      	nop
    }
 8013690:	372c      	adds	r7, #44	; 0x2c
 8013692:	46bd      	mov	sp, r7
 8013694:	bd90      	pop	{r4, r7, pc}

08013696 <_ZN8touchgfx13AbstractShape11updateAngleIiEEvT_>:
     * @note The area containing the AbstractShape is invalidated before and after the change.
     *
     * @see setAngle()
     */
    template <typename T>
    void updateAngle(T angle)
 8013696:	b590      	push	{r4, r7, lr}
 8013698:	b08b      	sub	sp, #44	; 0x2c
 801369a:	af00      	add	r7, sp, #0
 801369c:	6078      	str	r0, [r7, #4]
 801369e:	6039      	str	r1, [r7, #0]
 80136a0:	683b      	ldr	r3, [r7, #0]
 80136a2:	627b      	str	r3, [r7, #36]	; 0x24
 80136a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136a6:	015a      	lsls	r2, r3, #5
 80136a8:	f107 0320 	add.w	r3, r7, #32
 80136ac:	4611      	mov	r1, r2
 80136ae:	4618      	mov	r0, r3
 80136b0:	f7ff fc1c 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80136b4:	6a3b      	ldr	r3, [r7, #32]
    {
        CWRUtil::Q5 angleQ5 = CWRUtil::toQ5<T>(angle);
 80136b6:	61fb      	str	r3, [r7, #28]
        if (shapeAngle != angleQ5)
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	3338      	adds	r3, #56	; 0x38
 80136bc:	4618      	mov	r0, r3
 80136be:	f7ff fc24 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80136c2:	4604      	mov	r4, r0
 80136c4:	f107 031c 	add.w	r3, r7, #28
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7ff fc1e 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80136ce:	4603      	mov	r3, r0
 80136d0:	429c      	cmp	r4, r3
 80136d2:	bf14      	ite	ne
 80136d4:	2301      	movne	r3, #1
 80136d6:	2300      	moveq	r3, #0
 80136d8:	b2db      	uxtb	r3, r3
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d028      	beq.n	8013730 <_ZN8touchgfx13AbstractShape11updateAngleIiEEvT_+0x9a>
        {
            Rect rectBefore = getMinimalRect();
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	3374      	adds	r3, #116	; 0x74
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	f107 0214 	add.w	r2, r7, #20
 80136ea:	6879      	ldr	r1, [r7, #4]
 80136ec:	4610      	mov	r0, r2
 80136ee:	4798      	blx	r3

            shapeAngle = angleQ5;
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	69fa      	ldr	r2, [r7, #28]
 80136f4:	639a      	str	r2, [r3, #56]	; 0x38
            updateAbstractShapeCache();
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f003 f864 	bl	80167c4 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>

            Rect rectAfter = getMinimalRect();
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	3374      	adds	r3, #116	; 0x74
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	f107 020c 	add.w	r2, r7, #12
 8013708:	6879      	ldr	r1, [r7, #4]
 801370a:	4610      	mov	r0, r2
 801370c:	4798      	blx	r3
            rectBefore.expandToFit(rectAfter);
 801370e:	f107 020c 	add.w	r2, r7, #12
 8013712:	f107 0314 	add.w	r3, r7, #20
 8013716:	4611      	mov	r1, r2
 8013718:	4618      	mov	r0, r3
 801371a:	f7fe ffbb 	bl	8012694 <_ZN8touchgfx4Rect11expandToFitERKS0_>
            invalidateRect(rectBefore);
 801371e:	687a      	ldr	r2, [r7, #4]
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	3310      	adds	r3, #16
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	f107 0114 	add.w	r1, r7, #20
 801372c:	4610      	mov	r0, r2
 801372e:	4798      	blx	r3
        }
    }
 8013730:	bf00      	nop
 8013732:	372c      	adds	r7, #44	; 0x2c
 8013734:	46bd      	mov	sp, r7
 8013736:	bd90      	pop	{r4, r7, pc}

08013738 <_ZN5Gauge12NeedleShadowD1Ev>:
    class NeedleShadow : public Shape<3>
 8013738:	b580      	push	{r7, lr}
 801373a:	b082      	sub	sp, #8
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
 8013740:	4a05      	ldr	r2, [pc, #20]	; (8013758 <_ZN5Gauge12NeedleShadowD1Ev+0x20>)
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	601a      	str	r2, [r3, #0]
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	4618      	mov	r0, r3
 801374a:	f7ff fee1 	bl	8013510 <_ZN8touchgfx5ShapeILt3EED1Ev>
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	4618      	mov	r0, r3
 8013752:	3708      	adds	r7, #8
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}
 8013758:	0802cc5c 	.word	0x0802cc5c

0801375c <_ZN5Gauge12NeedleShadowD0Ev>:
 801375c:	b580      	push	{r7, lr}
 801375e:	b082      	sub	sp, #8
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
 8013764:	6878      	ldr	r0, [r7, #4]
 8013766:	f7ff ffe7 	bl	8013738 <_ZN5Gauge12NeedleShadowD1Ev>
 801376a:	217c      	movs	r1, #124	; 0x7c
 801376c:	6878      	ldr	r0, [r7, #4]
 801376e:	f016 fed8 	bl	802a522 <_ZdlPvj>
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	4618      	mov	r0, r3
 8013776:	3708      	adds	r7, #8
 8013778:	46bd      	mov	sp, r7
 801377a:	bd80      	pop	{r7, pc}

0801377c <_ZN5Gauge6NeedleD1Ev>:
    class Needle : public Shape<3>
 801377c:	b580      	push	{r7, lr}
 801377e:	b082      	sub	sp, #8
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
 8013784:	4a05      	ldr	r2, [pc, #20]	; (801379c <_ZN5Gauge6NeedleD1Ev+0x20>)
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	601a      	str	r2, [r3, #0]
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	4618      	mov	r0, r3
 801378e:	f7ff febf 	bl	8013510 <_ZN8touchgfx5ShapeILt3EED1Ev>
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	4618      	mov	r0, r3
 8013796:	3708      	adds	r7, #8
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}
 801379c:	0802ccfc 	.word	0x0802ccfc

080137a0 <_ZN5Gauge6NeedleD0Ev>:
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b082      	sub	sp, #8
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
 80137a8:	6878      	ldr	r0, [r7, #4]
 80137aa:	f7ff ffe7 	bl	801377c <_ZN5Gauge6NeedleD1Ev>
 80137ae:	217c      	movs	r1, #124	; 0x7c
 80137b0:	6878      	ldr	r0, [r7, #4]
 80137b2:	f016 feb6 	bl	802a522 <_ZdlPvj>
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	4618      	mov	r0, r3
 80137ba:	3708      	adds	r7, #8
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}

080137c0 <_ZN8touchgfx13PainterRGB565D1Ev>:
 *        The PainterRGB565 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB565 : public AbstractPainterRGB565
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b082      	sub	sp, #8
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
 80137c8:	4a05      	ldr	r2, [pc, #20]	; (80137e0 <_ZN8touchgfx13PainterRGB565D1Ev+0x20>)
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	601a      	str	r2, [r3, #0]
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7ff fbc3 	bl	8012f5c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	4618      	mov	r0, r3
 80137da:	3708      	adds	r7, #8
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}
 80137e0:	0802d540 	.word	0x0802d540

080137e4 <_ZN8touchgfx13PainterRGB565D0Ev>:
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b082      	sub	sp, #8
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
 80137ec:	6878      	ldr	r0, [r7, #4]
 80137ee:	f7ff ffe7 	bl	80137c0 <_ZN8touchgfx13PainterRGB565D1Ev>
 80137f2:	2120      	movs	r1, #32
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	f016 fe94 	bl	802a522 <_ZdlPvj>
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	4618      	mov	r0, r3
 80137fe:	3708      	adds	r7, #8
 8013800:	46bd      	mov	sp, r7
 8013802:	bd80      	pop	{r7, pc}

08013804 <_ZNK8touchgfx5ShapeILt3EE12getNumPointsEv>:
     *
     *        Gets number points used to make up the shape.
     *
     * @return The number points.
     */
    virtual int getNumPoints() const
 8013804:	b480      	push	{r7}
 8013806:	b083      	sub	sp, #12
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
    {
        return POINTS;
 801380c:	2303      	movs	r3, #3
    }
 801380e:	4618      	mov	r0, r3
 8013810:	370c      	adds	r7, #12
 8013812:	46bd      	mov	sp, r7
 8013814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013818:	4770      	bx	lr

0801381a <_ZN8touchgfx5ShapeILt3EE9setCornerEiNS_7CWRUtil2Q5ES3_>:
     *
     * @param i Zero-based index of the corner.
     * @param x The x coordinate in Q5 format.
     * @param y The y coordinate in Q5 format.
     */
    virtual void setCorner(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 801381a:	b480      	push	{r7}
 801381c:	b085      	sub	sp, #20
 801381e:	af00      	add	r7, sp, #0
 8013820:	60f8      	str	r0, [r7, #12]
 8013822:	60b9      	str	r1, [r7, #8]
 8013824:	607a      	str	r2, [r7, #4]
 8013826:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8013828:	68bb      	ldr	r3, [r7, #8]
 801382a:	2b00      	cmp	r3, #0
 801382c:	db0f      	blt.n	801384e <_ZN8touchgfx5ShapeILt3EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x34>
 801382e:	68bb      	ldr	r3, [r7, #8]
 8013830:	2b02      	cmp	r3, #2
 8013832:	dc0c      	bgt.n	801384e <_ZN8touchgfx5ShapeILt3EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x34>
        {
            xCorner[i] = x, yCorner[i] = y;
 8013834:	68fa      	ldr	r2, [r7, #12]
 8013836:	68bb      	ldr	r3, [r7, #8]
 8013838:	3312      	adds	r3, #18
 801383a:	009b      	lsls	r3, r3, #2
 801383c:	4413      	add	r3, r2
 801383e:	687a      	ldr	r2, [r7, #4]
 8013840:	605a      	str	r2, [r3, #4]
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	68ba      	ldr	r2, [r7, #8]
 8013846:	3216      	adds	r2, #22
 8013848:	6839      	ldr	r1, [r7, #0]
 801384a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
 801384e:	bf00      	nop
 8013850:	3714      	adds	r7, #20
 8013852:	46bd      	mov	sp, r7
 8013854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013858:	4770      	bx	lr

0801385a <_ZNK8touchgfx5ShapeILt3EE10getCornerXEi>:
     *
     * @param i Zero-based index of the corner.
     *
     * @return The corner x coordinate.
     */
    virtual CWRUtil::Q5 getCornerX(int i) const
 801385a:	b580      	push	{r7, lr}
 801385c:	b084      	sub	sp, #16
 801385e:	af00      	add	r7, sp, #0
 8013860:	6078      	str	r0, [r7, #4]
 8013862:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8013864:	683b      	ldr	r3, [r7, #0]
 8013866:	2b00      	cmp	r3, #0
 8013868:	db09      	blt.n	801387e <_ZNK8touchgfx5ShapeILt3EE10getCornerXEi+0x24>
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	2b02      	cmp	r3, #2
 801386e:	dc06      	bgt.n	801387e <_ZNK8touchgfx5ShapeILt3EE10getCornerXEi+0x24>
        {
            return xCorner[i];
 8013870:	687a      	ldr	r2, [r7, #4]
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	3312      	adds	r3, #18
 8013876:	009b      	lsls	r3, r3, #2
 8013878:	4413      	add	r3, r2
 801387a:	685b      	ldr	r3, [r3, #4]
 801387c:	e00b      	b.n	8013896 <_ZNK8touchgfx5ShapeILt3EE10getCornerXEi+0x3c>
 801387e:	2300      	movs	r3, #0
 8013880:	60fb      	str	r3, [r7, #12]
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	015a      	lsls	r2, r3, #5
 8013886:	f107 0308 	add.w	r3, r7, #8
 801388a:	4611      	mov	r1, r2
 801388c:	4618      	mov	r0, r3
 801388e:	f7ff fb2d 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013892:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8013894:	bf00      	nop
    }
 8013896:	4618      	mov	r0, r3
 8013898:	3710      	adds	r7, #16
 801389a:	46bd      	mov	sp, r7
 801389c:	bd80      	pop	{r7, pc}

0801389e <_ZNK8touchgfx5ShapeILt3EE10getCornerYEi>:
     *
     * @param i Zero-based index of the corner.
     *
     * @return The corner y coordinate.
     */
    virtual CWRUtil::Q5 getCornerY(int i) const
 801389e:	b580      	push	{r7, lr}
 80138a0:	b084      	sub	sp, #16
 80138a2:	af00      	add	r7, sp, #0
 80138a4:	6078      	str	r0, [r7, #4]
 80138a6:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	db08      	blt.n	80138c0 <_ZNK8touchgfx5ShapeILt3EE10getCornerYEi+0x22>
 80138ae:	683b      	ldr	r3, [r7, #0]
 80138b0:	2b02      	cmp	r3, #2
 80138b2:	dc05      	bgt.n	80138c0 <_ZNK8touchgfx5ShapeILt3EE10getCornerYEi+0x22>
        {
            return yCorner[i];
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	683a      	ldr	r2, [r7, #0]
 80138b8:	3216      	adds	r2, #22
 80138ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138be:	e00b      	b.n	80138d8 <_ZNK8touchgfx5ShapeILt3EE10getCornerYEi+0x3a>
 80138c0:	2300      	movs	r3, #0
 80138c2:	60fb      	str	r3, [r7, #12]
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	015a      	lsls	r2, r3, #5
 80138c8:	f107 0308 	add.w	r3, r7, #8
 80138cc:	4611      	mov	r1, r2
 80138ce:	4618      	mov	r0, r3
 80138d0:	f7ff fb0c 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80138d4:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 80138d6:	bf00      	nop
    }
 80138d8:	4618      	mov	r0, r3
 80138da:	3710      	adds	r7, #16
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd80      	pop	{r7, pc}

080138e0 <_ZN8touchgfx5ShapeILt3EE8setCacheEiNS_7CWRUtil2Q5ES3_>:
     *
     * @param i Zero-based index of the corner.
     * @param x The x coordinate.
     * @param y The y coordinate.
     */
    virtual void setCache(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 80138e0:	b480      	push	{r7}
 80138e2:	b085      	sub	sp, #20
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	60f8      	str	r0, [r7, #12]
 80138e8:	60b9      	str	r1, [r7, #8]
 80138ea:	607a      	str	r2, [r7, #4]
 80138ec:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 80138ee:	68bb      	ldr	r3, [r7, #8]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	db0f      	blt.n	8013914 <_ZN8touchgfx5ShapeILt3EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x34>
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	2b02      	cmp	r3, #2
 80138f8:	dc0c      	bgt.n	8013914 <_ZN8touchgfx5ShapeILt3EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x34>
        {
            xCache[i] = x, yCache[i] = y;
 80138fa:	68fa      	ldr	r2, [r7, #12]
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	3318      	adds	r3, #24
 8013900:	009b      	lsls	r3, r3, #2
 8013902:	4413      	add	r3, r2
 8013904:	687a      	ldr	r2, [r7, #4]
 8013906:	605a      	str	r2, [r3, #4]
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	68ba      	ldr	r2, [r7, #8]
 801390c:	321c      	adds	r2, #28
 801390e:	6839      	ldr	r1, [r7, #0]
 8013910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
 8013914:	bf00      	nop
 8013916:	3714      	adds	r7, #20
 8013918:	46bd      	mov	sp, r7
 801391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391e:	4770      	bx	lr

08013920 <_ZNK8touchgfx5ShapeILt3EE9getCacheXEi>:
     *
     * @param i Zero-based index of the corner.
     *
     * @return The cached x coordinate.
     */
    virtual CWRUtil::Q5 getCacheX(int i) const
 8013920:	b580      	push	{r7, lr}
 8013922:	b084      	sub	sp, #16
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
 8013928:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	2b00      	cmp	r3, #0
 801392e:	db09      	blt.n	8013944 <_ZNK8touchgfx5ShapeILt3EE9getCacheXEi+0x24>
 8013930:	683b      	ldr	r3, [r7, #0]
 8013932:	2b02      	cmp	r3, #2
 8013934:	dc06      	bgt.n	8013944 <_ZNK8touchgfx5ShapeILt3EE9getCacheXEi+0x24>
        {
            return xCache[i];
 8013936:	687a      	ldr	r2, [r7, #4]
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	3318      	adds	r3, #24
 801393c:	009b      	lsls	r3, r3, #2
 801393e:	4413      	add	r3, r2
 8013940:	685b      	ldr	r3, [r3, #4]
 8013942:	e00b      	b.n	801395c <_ZNK8touchgfx5ShapeILt3EE9getCacheXEi+0x3c>
 8013944:	2300      	movs	r3, #0
 8013946:	60fb      	str	r3, [r7, #12]
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	015a      	lsls	r2, r3, #5
 801394c:	f107 0308 	add.w	r3, r7, #8
 8013950:	4611      	mov	r1, r2
 8013952:	4618      	mov	r0, r3
 8013954:	f7ff faca 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013958:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 801395a:	bf00      	nop
    }
 801395c:	4618      	mov	r0, r3
 801395e:	3710      	adds	r7, #16
 8013960:	46bd      	mov	sp, r7
 8013962:	bd80      	pop	{r7, pc}

08013964 <_ZNK8touchgfx5ShapeILt3EE9getCacheYEi>:
     *
     * @param i Zero-based index of the corner.
     *
     * @return The cached y coordinate.
     */
    virtual CWRUtil::Q5 getCacheY(int i) const
 8013964:	b580      	push	{r7, lr}
 8013966:	b084      	sub	sp, #16
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
 801396c:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 801396e:	683b      	ldr	r3, [r7, #0]
 8013970:	2b00      	cmp	r3, #0
 8013972:	db08      	blt.n	8013986 <_ZNK8touchgfx5ShapeILt3EE9getCacheYEi+0x22>
 8013974:	683b      	ldr	r3, [r7, #0]
 8013976:	2b02      	cmp	r3, #2
 8013978:	dc05      	bgt.n	8013986 <_ZNK8touchgfx5ShapeILt3EE9getCacheYEi+0x22>
        {
            return yCache[i];
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	683a      	ldr	r2, [r7, #0]
 801397e:	321c      	adds	r2, #28
 8013980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013984:	e00b      	b.n	801399e <_ZNK8touchgfx5ShapeILt3EE9getCacheYEi+0x3a>
 8013986:	2300      	movs	r3, #0
 8013988:	60fb      	str	r3, [r7, #12]
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	015a      	lsls	r2, r3, #5
 801398e:	f107 0308 	add.w	r3, r7, #8
 8013992:	4611      	mov	r1, r2
 8013994:	4618      	mov	r0, r3
 8013996:	f7ff faa9 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801399a:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 801399c:	bf00      	nop
    }
 801399e:	4618      	mov	r0, r3
 80139a0:	3710      	adds	r7, #16
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}
	...

080139a8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
 *       taking zero, one, two or three arguments.
 *
 * @tparam T1 The type of the first argument in the member function, or void if none.
 */
template <class T1>
class GenericCallback<T1, void, void>
 80139a8:	b480      	push	{r7}
 80139aa:	b083      	sub	sp, #12
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
 80139b0:	4a04      	ldr	r2, [pc, #16]	; (80139c4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	601a      	str	r2, [r3, #0]
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	4618      	mov	r0, r3
 80139ba:	370c      	adds	r7, #12
 80139bc:	46bd      	mov	sp, r7
 80139be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c2:	4770      	bx	lr
 80139c4:	0802ce98 	.word	0x0802ce98

080139c8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 80139c8:	b480      	push	{r7}
 80139ca:	b083      	sub	sp, #12
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
    {
    }
 80139d0:	4a04      	ldr	r2, [pc, #16]	; (80139e4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	601a      	str	r2, [r3, #0]
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	4618      	mov	r0, r3
 80139da:	370c      	adds	r7, #12
 80139dc:	46bd      	mov	sp, r7
 80139de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e2:	4770      	bx	lr
 80139e4:	0802ce98 	.word	0x0802ce98

080139e8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b082      	sub	sp, #8
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
    }
 80139f0:	6878      	ldr	r0, [r7, #4]
 80139f2:	f7ff ffe9 	bl	80139c8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 80139f6:	2104      	movs	r1, #4
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f016 fd92 	bl	802a522 <_ZdlPvj>
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	4618      	mov	r0, r3
 8013a02:	3708      	adds	r7, #8
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}

08013a08 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 8013a08:	b480      	push	{r7}
 8013a0a:	b083      	sub	sp, #12
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
 8013a10:	460b      	mov	r3, r1
 8013a12:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	78fa      	ldrb	r2, [r7, #3]
 8013a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8013a1c:	bf00      	nop
 8013a1e:	370c      	adds	r7, #12
 8013a20:	46bd      	mov	sp, r7
 8013a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a26:	4770      	bx	lr

08013a28 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b082      	sub	sp, #8
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7ff fa18 	bl	8012e68 <_ZN8touchgfx6WidgetC1Ev>
 8013a38:	4a0a      	ldr	r2, [pc, #40]	; (8013a64 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	601a      	str	r2, [r3, #0]
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	22ff      	movs	r2, #255	; 0xff
 8013a42:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	3328      	adds	r3, #40	; 0x28
 8013a4a:	2100      	movs	r1, #0
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7ff f99e 	bl	8012d8e <_ZN8touchgfx9colortypeC1Em>
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	2200      	movs	r2, #0
 8013a56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	3708      	adds	r7, #8
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bd80      	pop	{r7, pc}
 8013a64:	0802cfa8 	.word	0x0802cfa8

08013a68 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b082      	sub	sp, #8
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
 8013a70:	4a05      	ldr	r2, [pc, #20]	; (8013a88 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	601a      	str	r2, [r3, #0]
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7fe fbef 	bl	801225c <_ZN8touchgfx6WidgetD1Ev>
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	4618      	mov	r0, r3
 8013a82:	3708      	adds	r7, #8
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}
 8013a88:	0802cfa8 	.word	0x0802cfa8

08013a8c <_ZN8touchgfx3BoxD0Ev>:
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f7ff ffe7 	bl	8013a68 <_ZN8touchgfx3BoxD1Ev>
 8013a9a:	2130      	movs	r1, #48	; 0x30
 8013a9c:	6878      	ldr	r0, [r7, #4]
 8013a9e:	f016 fd40 	bl	802a522 <_ZdlPvj>
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	3708      	adds	r7, #8
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bd80      	pop	{r7, pc}

08013aac <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 8013aac:	b480      	push	{r7}
 8013aae:	b083      	sub	sp, #12
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
 8013ab4:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	683a      	ldr	r2, [r7, #0]
 8013aba:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8013abc:	bf00      	nop
 8013abe:	370c      	adds	r7, #12
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac6:	4770      	bx	lr

08013ac8 <_ZN8touchgfx5EventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Event() { }
 8013ac8:	b480      	push	{r7}
 8013aca:	b083      	sub	sp, #12
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	4a04      	ldr	r2, [pc, #16]	; (8013ae4 <_ZN8touchgfx5EventD1Ev+0x1c>)
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	601a      	str	r2, [r3, #0]
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	4618      	mov	r0, r3
 8013ada:	370c      	adds	r7, #12
 8013adc:	46bd      	mov	sp, r7
 8013ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae2:	4770      	bx	lr
 8013ae4:	0802ced8 	.word	0x0802ced8

08013ae8 <_ZN8touchgfx5EventD0Ev>:
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b082      	sub	sp, #8
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
 8013af0:	6878      	ldr	r0, [r7, #4]
 8013af2:	f7ff ffe9 	bl	8013ac8 <_ZN8touchgfx5EventD1Ev>
 8013af6:	2104      	movs	r1, #4
 8013af8:	6878      	ldr	r0, [r7, #4]
 8013afa:	f016 fd12 	bl	802a522 <_ZdlPvj>
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	4618      	mov	r0, r3
 8013b02:	3708      	adds	r7, #8
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}

08013b08 <_ZN8touchgfx10ClickEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ClickEvent() { }
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b082      	sub	sp, #8
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
 8013b10:	4a05      	ldr	r2, [pc, #20]	; (8013b28 <_ZN8touchgfx10ClickEventD1Ev+0x20>)
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	601a      	str	r2, [r3, #0]
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f7ff ffd5 	bl	8013ac8 <_ZN8touchgfx5EventD1Ev>
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	4618      	mov	r0, r3
 8013b22:	3708      	adds	r7, #8
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}
 8013b28:	0802cec4 	.word	0x0802cec4

08013b2c <_ZN8touchgfx10ClickEventD0Ev>:
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b082      	sub	sp, #8
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f7ff ffe7 	bl	8013b08 <_ZN8touchgfx10ClickEventD1Ev>
 8013b3a:	210c      	movs	r1, #12
 8013b3c:	6878      	ldr	r0, [r7, #4]
 8013b3e:	f016 fcf0 	bl	802a522 <_ZdlPvj>
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	4618      	mov	r0, r3
 8013b46:	3708      	adds	r7, #8
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd80      	pop	{r7, pc}

08013b4c <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 8013b4c:	b480      	push	{r7}
 8013b4e:	b083      	sub	sp, #12
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
    {
        return _type;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	791b      	ldrb	r3, [r3, #4]
    }
 8013b58:	4618      	mov	r0, r3
 8013b5a:	370c      	adds	r7, #12
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b62:	4770      	bx	lr

08013b64 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 8013b64:	b480      	push	{r7}
 8013b66:	b083      	sub	sp, #12
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_CLICK;
 8013b6c:	2300      	movs	r3, #0
    }
 8013b6e:	4618      	mov	r0, r3
 8013b70:	370c      	adds	r7, #12
 8013b72:	46bd      	mov	sp, r7
 8013b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b78:	4770      	bx	lr
	...

08013b7c <_ZN8touchgfx9DragEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DragEvent() { }
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b082      	sub	sp, #8
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
 8013b84:	4a05      	ldr	r2, [pc, #20]	; (8013b9c <_ZN8touchgfx9DragEventD1Ev+0x20>)
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	601a      	str	r2, [r3, #0]
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f7ff ff9b 	bl	8013ac8 <_ZN8touchgfx5EventD1Ev>
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	4618      	mov	r0, r3
 8013b96:	3708      	adds	r7, #8
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bd80      	pop	{r7, pc}
 8013b9c:	0802ceb0 	.word	0x0802ceb0

08013ba0 <_ZN8touchgfx9DragEventD0Ev>:
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b082      	sub	sp, #8
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f7ff ffe7 	bl	8013b7c <_ZN8touchgfx9DragEventD1Ev>
 8013bae:	2110      	movs	r1, #16
 8013bb0:	6878      	ldr	r0, [r7, #4]
 8013bb2:	f016 fcb6 	bl	802a522 <_ZdlPvj>
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	4618      	mov	r0, r3
 8013bba:	3708      	adds	r7, #8
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd80      	pop	{r7, pc}

08013bc0 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 8013bc0:	b480      	push	{r7}
 8013bc2:	b083      	sub	sp, #12
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_DRAG;
 8013bc8:	2301      	movs	r3, #1
    }
 8013bca:	4618      	mov	r0, r3
 8013bcc:	370c      	adds	r7, #12
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd4:	4770      	bx	lr
	...

08013bd8 <_ZN8touchgfx14AbstractButtonC1Ev>:
     * @brief Constructor.
     *
     *        Constructs an AbstractButton instance in released state without an associated
     *        action.
     */
    AbstractButton() : Widget(), action(), pressed(false)
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b082      	sub	sp, #8
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	4618      	mov	r0, r3
 8013be4:	f7ff f940 	bl	8012e68 <_ZN8touchgfx6WidgetC1Ev>
 8013be8:	4a09      	ldr	r2, [pc, #36]	; (8013c10 <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	601a      	str	r2, [r3, #0]
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	629a      	str	r2, [r3, #40]	; 0x28
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	2101      	movs	r1, #1
 8013c00:	4618      	mov	r0, r3
 8013c02:	f7ff ff01 	bl	8013a08 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	4618      	mov	r0, r3
 8013c0a:	3708      	adds	r7, #8
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd80      	pop	{r7, pc}
 8013c10:	0802cf38 	.word	0x0802cf38

08013c14 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 8013c14:	b480      	push	{r7}
 8013c16:	b083      	sub	sp, #12
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
 8013c1c:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	683a      	ldr	r2, [r7, #0]
 8013c22:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8013c24:	bf00      	nop
 8013c26:	370c      	adds	r7, #12
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2e:	4770      	bx	lr

08013c30 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b082      	sub	sp, #8
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	4a05      	ldr	r2, [pc, #20]	; (8013c50 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	601a      	str	r2, [r3, #0]
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	4618      	mov	r0, r3
 8013c42:	f7fe fb0b 	bl	801225c <_ZN8touchgfx6WidgetD1Ev>
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	4618      	mov	r0, r3
 8013c4a:	3708      	adds	r7, #8
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}
 8013c50:	0802cf38 	.word	0x0802cf38

08013c54 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b082      	sub	sp, #8
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
 8013c5c:	6878      	ldr	r0, [r7, #4]
 8013c5e:	f7ff ffe7 	bl	8013c30 <_ZN8touchgfx14AbstractButtonD1Ev>
 8013c62:	2130      	movs	r1, #48	; 0x30
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f016 fc5c 	bl	802a522 <_ZdlPvj>
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3708      	adds	r7, #8
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}

08013c74 <_ZN8touchgfx6ButtonC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b082      	sub	sp, #8
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f7ff ffaa 	bl	8013bd8 <_ZN8touchgfx14AbstractButtonC1Ev>
 8013c84:	4a0c      	ldr	r2, [pc, #48]	; (8013cb8 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	601a      	str	r2, [r3, #0]
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	332e      	adds	r3, #46	; 0x2e
 8013c8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7fe f98d 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	3330      	adds	r3, #48	; 0x30
 8013c9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7fe f986 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	22ff      	movs	r2, #255	; 0xff
 8013caa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	3708      	adds	r7, #8
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}
 8013cb8:	0802d014 	.word	0x0802d014

08013cbc <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b082      	sub	sp, #8
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
 8013cc4:	4a05      	ldr	r2, [pc, #20]	; (8013cdc <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	601a      	str	r2, [r3, #0]
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f7ff ffaf 	bl	8013c30 <_ZN8touchgfx14AbstractButtonD1Ev>
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3708      	adds	r7, #8
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}
 8013cdc:	0802d014 	.word	0x0802d014

08013ce0 <_ZN8touchgfx6ButtonD0Ev>:
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b082      	sub	sp, #8
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
 8013ce8:	6878      	ldr	r0, [r7, #4]
 8013cea:	f7ff ffe7 	bl	8013cbc <_ZN8touchgfx6ButtonD1Ev>
 8013cee:	2134      	movs	r1, #52	; 0x34
 8013cf0:	6878      	ldr	r0, [r7, #4]
 8013cf2:	f016 fc16 	bl	802a522 <_ZdlPvj>
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	3708      	adds	r7, #8
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bd80      	pop	{r7, pc}

08013d00 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8013d00:	b480      	push	{r7}
 8013d02:	b083      	sub	sp, #12
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
 8013d08:	4a04      	ldr	r2, [pc, #16]	; (8013d1c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	601a      	str	r2, [r3, #0]
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	4618      	mov	r0, r3
 8013d12:	370c      	adds	r7, #12
 8013d14:	46bd      	mov	sp, r7
 8013d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1a:	4770      	bx	lr
 8013d1c:	0802ceec 	.word	0x0802ceec

08013d20 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8013d20:	b480      	push	{r7}
 8013d22:	b083      	sub	sp, #12
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
    }
 8013d28:	4a04      	ldr	r2, [pc, #16]	; (8013d3c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	601a      	str	r2, [r3, #0]
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	4618      	mov	r0, r3
 8013d32:	370c      	adds	r7, #12
 8013d34:	46bd      	mov	sp, r7
 8013d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3a:	4770      	bx	lr
 8013d3c:	0802ceec 	.word	0x0802ceec

08013d40 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b082      	sub	sp, #8
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
    }
 8013d48:	6878      	ldr	r0, [r7, #4]
 8013d4a:	f7ff ffe9 	bl	8013d20 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8013d4e:	2104      	movs	r1, #4
 8013d50:	6878      	ldr	r0, [r7, #4]
 8013d52:	f016 fbe6 	bl	802a522 <_ZdlPvj>
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	4618      	mov	r0, r3
 8013d5a:	3708      	adds	r7, #8
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}

08013d60 <_ZNK8touchgfx6Bitmap5getIdEv>:
     *
     *        Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b082      	sub	sp, #8
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 8013d68:	4b07      	ldr	r3, [pc, #28]	; (8013d88 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d105      	bne.n	8013d7c <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 8013d70:	4b06      	ldr	r3, [pc, #24]	; (8013d8c <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 8013d72:	4a07      	ldr	r2, [pc, #28]	; (8013d90 <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 8013d74:	21b6      	movs	r1, #182	; 0xb6
 8013d76:	4807      	ldr	r0, [pc, #28]	; (8013d94 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 8013d78:	f017 f9be 	bl	802b0f8 <__assert_func>
        return bitmapId;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	881b      	ldrh	r3, [r3, #0]
    }
 8013d80:	4618      	mov	r0, r3
 8013d82:	3708      	adds	r7, #8
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}
 8013d88:	2000d034 	.word	0x2000d034
 8013d8c:	0802c334 	.word	0x0802c334
 8013d90:	0802cefc 	.word	0x0802cefc
 8013d94:	0802c370 	.word	0x0802c370

08013d98 <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
     *
     *        Updates the z coordinate angle described by zAngle.
     *
     * @param zAngle The new z angle.
     */
    virtual void updateZAngle(float zAngle)
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b082      	sub	sp, #8
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	ed87 0a00 	vstr	s0, [r7]
    {
        updateAngles(xAngle, yAngle, zAngle);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	3370      	adds	r3, #112	; 0x70
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	687a      	ldr	r2, [r7, #4]
 8013dae:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8013db2:	687a      	ldr	r2, [r7, #4]
 8013db4:	ed92 7a0e 	vldr	s14, [r2, #56]	; 0x38
 8013db8:	ed97 1a00 	vldr	s2, [r7]
 8013dbc:	eef0 0a47 	vmov.f32	s1, s14
 8013dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8013dc4:	6878      	ldr	r0, [r7, #4]
 8013dc6:	4798      	blx	r3
    }
 8013dc8:	bf00      	nop
 8013dca:	3708      	adds	r7, #8
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bd80      	pop	{r7, pc}

08013dd0 <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
     *
     *        Get z angle.
     *
     * @return The z angle.
     */
    virtual float getZAngle() const
 8013dd0:	b480      	push	{r7}
 8013dd2:	b083      	sub	sp, #12
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
    {
        return zAngle;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ddc:	ee07 3a90 	vmov	s15, r3
    }
 8013de0:	eeb0 0a67 	vmov.f32	s0, s15
 8013de4:	370c      	adds	r7, #12
 8013de6:	46bd      	mov	sp, r7
 8013de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dec:	4770      	bx	lr

08013dee <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 8013dee:	b480      	push	{r7}
 8013df0:	b083      	sub	sp, #12
 8013df2:	af00      	add	r7, sp, #0
 8013df4:	6078      	str	r0, [r7, #4]
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	2200      	movs	r2, #0
 8013dfa:	601a      	str	r2, [r3, #0]
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	4618      	mov	r0, r3
 8013e00:	370c      	adds	r7, #12
 8013e02:	46bd      	mov	sp, r7
 8013e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e08:	4770      	bx	lr

08013e0a <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>:
        Q5 operator+(const Q5& q5) const
 8013e0a:	b580      	push	{r7, lr}
 8013e0c:	b084      	sub	sp, #16
 8013e0e:	af00      	add	r7, sp, #0
 8013e10:	6078      	str	r0, [r7, #4]
 8013e12:	6039      	str	r1, [r7, #0]
            return Q5(v + q5.v);
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	681a      	ldr	r2, [r3, #0]
 8013e18:	683b      	ldr	r3, [r7, #0]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	441a      	add	r2, r3
 8013e1e:	f107 030c 	add.w	r3, r7, #12
 8013e22:	4611      	mov	r1, r2
 8013e24:	4618      	mov	r0, r3
 8013e26:	f7ff f861 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013e2a:	68fb      	ldr	r3, [r7, #12]
        }
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3710      	adds	r7, #16
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}

08013e34 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>:
        Q5 operator-(const Q5& q5) const
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b084      	sub	sp, #16
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
 8013e3c:	6039      	str	r1, [r7, #0]
            return Q5(v - q5.v);
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	681a      	ldr	r2, [r3, #0]
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	1ad2      	subs	r2, r2, r3
 8013e48:	f107 030c 	add.w	r3, r7, #12
 8013e4c:	4611      	mov	r1, r2
 8013e4e:	4618      	mov	r0, r3
 8013e50:	f7ff f84c 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013e54:	68fb      	ldr	r3, [r7, #12]
        }
 8013e56:	4618      	mov	r0, r3
 8013e58:	3710      	adds	r7, #16
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}

08013e5e <_ZNK8touchgfx7CWRUtil2Q52toIiEET_v>:
        T to() const
 8013e5e:	b480      	push	{r7}
 8013e60:	b083      	sub	sp, #12
 8013e62:	af00      	add	r7, sp, #0
 8013e64:	6078      	str	r0, [r7, #4]
            return (T)v / (T)Rasterizer::POLY_BASE_SIZE;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	da00      	bge.n	8013e70 <_ZNK8touchgfx7CWRUtil2Q52toIiEET_v+0x12>
 8013e6e:	331f      	adds	r3, #31
 8013e70:	115b      	asrs	r3, r3, #5
        }
 8013e72:	4618      	mov	r0, r3
 8013e74:	370c      	adds	r7, #12
 8013e76:	46bd      	mov	sp, r7
 8013e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7c:	4770      	bx	lr

08013e7e <_ZN8touchgfx7CWRUtil3Q10C1Ei>:
        explicit Q10(int i) : v(i) { }
 8013e7e:	b480      	push	{r7}
 8013e80:	b083      	sub	sp, #12
 8013e82:	af00      	add	r7, sp, #0
 8013e84:	6078      	str	r0, [r7, #4]
 8013e86:	6039      	str	r1, [r7, #0]
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	683a      	ldr	r2, [r7, #0]
 8013e8c:	601a      	str	r2, [r3, #0]
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	4618      	mov	r0, r3
 8013e92:	370c      	adds	r7, #12
 8013e94:	46bd      	mov	sp, r7
 8013e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9a:	4770      	bx	lr

08013e9c <_ZNK8touchgfx7CWRUtil3Q10cviEv>:
        operator int() const
 8013e9c:	b480      	push	{r7}
 8013e9e:	b083      	sub	sp, #12
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
            return v;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	681b      	ldr	r3, [r3, #0]
        }
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	370c      	adds	r7, #12
 8013eac:	46bd      	mov	sp, r7
 8013eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb2:	4770      	bx	lr

08013eb4 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
     *
     *        Function to determine whether this AbstractButton is currently pressed.
     *
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
 8013eb4:	b480      	push	{r7}
 8013eb6:	b083      	sub	sp, #12
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	370c      	adds	r7, #12
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ecc:	4770      	bx	lr

08013ece <_ZNK8touchgfx14AbstractButton7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_ABSTRACTBUTTON.
     */
    virtual uint16_t getType() const
 8013ece:	b480      	push	{r7}
 8013ed0:	b083      	sub	sp, #12
 8013ed2:	af00      	add	r7, sp, #0
 8013ed4:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_ABSTRACTBUTTON;
 8013ed6:	2302      	movs	r3, #2
    }
 8013ed8:	4618      	mov	r0, r3
 8013eda:	370c      	adds	r7, #12
 8013edc:	46bd      	mov	sp, r7
 8013ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee2:	4770      	bx	lr

08013ee4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
#include <touchgfx/widgets/AbstractButton.hpp>

namespace touchgfx
{
void AbstractButton::handleClickEvent(const ClickEvent& event)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b084      	sub	sp, #16
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
 8013eec:	6039      	str	r1, [r7, #0]
    bool wasPressed = pressed;
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013ef4:	73fb      	strb	r3, [r7, #15]
    pressed = (event.getType() == ClickEvent::PRESSED);
 8013ef6:	6838      	ldr	r0, [r7, #0]
 8013ef8:	f7ff fe28 	bl	8013b4c <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8013efc:	4603      	mov	r3, r0
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	bf0c      	ite	eq
 8013f02:	2301      	moveq	r3, #1
 8013f04:	2300      	movne	r3, #0
 8013f06:	b2da      	uxtb	r2, r3
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if ((pressed && !wasPressed) || (!pressed && wasPressed))
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d005      	beq.n	8013f24 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x40>
 8013f18:	7bfb      	ldrb	r3, [r7, #15]
 8013f1a:	f083 0301 	eor.w	r3, r3, #1
 8013f1e:	b2db      	uxtb	r3, r3
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d10a      	bne.n	8013f3a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x56>
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013f2a:	f083 0301 	eor.w	r3, r3, #1
 8013f2e:	b2db      	uxtb	r3, r3
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d009      	beq.n	8013f48 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x64>
 8013f34:	7bfb      	ldrb	r3, [r7, #15]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d006      	beq.n	8013f48 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x64>
    {
        // Pressed state changed, so invalidate
        invalidate();
 8013f3a:	687a      	ldr	r2, [r7, #4]
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	3314      	adds	r3, #20
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	4610      	mov	r0, r2
 8013f46:	4798      	blx	r3
    }
    if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 8013f48:	7bfb      	ldrb	r3, [r7, #15]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d00b      	beq.n	8013f66 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 8013f4e:	6838      	ldr	r0, [r7, #0]
 8013f50:	f7ff fdfc 	bl	8013b4c <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8013f54:	4603      	mov	r3, r0
 8013f56:	2b01      	cmp	r3, #1
 8013f58:	d105      	bne.n	8013f66 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d001      	beq.n	8013f66 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 8013f62:	2301      	movs	r3, #1
 8013f64:	e000      	b.n	8013f68 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x84>
 8013f66:	2300      	movs	r3, #0
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d015      	beq.n	8013f98 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0xb4>
    {
        // This is a click. Fire callback.
        if (action->isValid())
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	330c      	adds	r3, #12
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	4610      	mov	r0, r2
 8013f7c:	4798      	blx	r3
 8013f7e:	4603      	mov	r3, r0
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d009      	beq.n	8013f98 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0xb4>
        {
            action->execute(*this);
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	3308      	adds	r3, #8
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	6879      	ldr	r1, [r7, #4]
 8013f94:	4610      	mov	r0, r2
 8013f96:	4798      	blx	r3
        }
    }
}
 8013f98:	bf00      	nop
 8013f9a:	3710      	adds	r7, #16
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}

08013fa0 <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
    virtual void setRenderingAlgorithm(RenderingAlgorithm algorithm)
 8013fa0:	b480      	push	{r7}
 8013fa2:	b083      	sub	sp, #12
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
 8013fa8:	460b      	mov	r3, r1
 8013faa:	70fb      	strb	r3, [r7, #3]
        currentRenderingAlgorithm = algorithm;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	78fa      	ldrb	r2, [r7, #3]
 8013fb0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    };
 8013fb4:	bf00      	nop
 8013fb6:	370c      	adds	r7, #12
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fbe:	4770      	bx	lr

08013fc0 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
    virtual RenderingAlgorithm getRenderingAlgorithm() const
 8013fc0:	b480      	push	{r7}
 8013fc2:	b083      	sub	sp, #12
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
        return currentRenderingAlgorithm;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    }
 8013fce:	4618      	mov	r0, r3
 8013fd0:	370c      	adds	r7, #12
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd8:	4770      	bx	lr

08013fda <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
    virtual void updateXAngle(float xAngle)
 8013fda:	b580      	push	{r7, lr}
 8013fdc:	b082      	sub	sp, #8
 8013fde:	af00      	add	r7, sp, #0
 8013fe0:	6078      	str	r0, [r7, #4]
 8013fe2:	ed87 0a00 	vstr	s0, [r7]
        updateAngles(xAngle, yAngle, zAngle);
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	3370      	adds	r3, #112	; 0x70
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	687a      	ldr	r2, [r7, #4]
 8013ff0:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8013ff4:	687a      	ldr	r2, [r7, #4]
 8013ff6:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 8013ffa:	eeb0 1a47 	vmov.f32	s2, s14
 8013ffe:	eef0 0a67 	vmov.f32	s1, s15
 8014002:	ed97 0a00 	vldr	s0, [r7]
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	4798      	blx	r3
    }
 801400a:	bf00      	nop
 801400c:	3708      	adds	r7, #8
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}

08014012 <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
    virtual void updateYAngle(float yAngle)
 8014012:	b580      	push	{r7, lr}
 8014014:	b082      	sub	sp, #8
 8014016:	af00      	add	r7, sp, #0
 8014018:	6078      	str	r0, [r7, #4]
 801401a:	ed87 0a00 	vstr	s0, [r7]
        updateAngles(xAngle, yAngle, zAngle);
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	3370      	adds	r3, #112	; 0x70
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	687a      	ldr	r2, [r7, #4]
 8014028:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801402c:	687a      	ldr	r2, [r7, #4]
 801402e:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 8014032:	eeb0 1a47 	vmov.f32	s2, s14
 8014036:	edd7 0a00 	vldr	s1, [r7]
 801403a:	eeb0 0a67 	vmov.f32	s0, s15
 801403e:	6878      	ldr	r0, [r7, #4]
 8014040:	4798      	blx	r3
    }
 8014042:	bf00      	nop
 8014044:	3708      	adds	r7, #8
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}

0801404a <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
    virtual float getXAngle() const
 801404a:	b480      	push	{r7}
 801404c:	b083      	sub	sp, #12
 801404e:	af00      	add	r7, sp, #0
 8014050:	6078      	str	r0, [r7, #4]
        return xAngle;
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014056:	ee07 3a90 	vmov	s15, r3
    }
 801405a:	eeb0 0a67 	vmov.f32	s0, s15
 801405e:	370c      	adds	r7, #12
 8014060:	46bd      	mov	sp, r7
 8014062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014066:	4770      	bx	lr

08014068 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
    virtual float getYAngle() const
 8014068:	b480      	push	{r7}
 801406a:	b083      	sub	sp, #12
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
        return yAngle;
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014074:	ee07 3a90 	vmov	s15, r3
    }
 8014078:	eeb0 0a67 	vmov.f32	s0, s15
 801407c:	370c      	adds	r7, #12
 801407e:	46bd      	mov	sp, r7
 8014080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014084:	4770      	bx	lr

08014086 <_ZNK8touchgfx13TextureMapper8getScaleEv>:
     *
     *        Gets the scale.
     *
     * @return The scale.
     */
    virtual float getScale() const
 8014086:	b480      	push	{r7}
 8014088:	b083      	sub	sp, #12
 801408a:	af00      	add	r7, sp, #0
 801408c:	6078      	str	r0, [r7, #4]
    {
        return scale;
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014092:	ee07 3a90 	vmov	s15, r3
    }
 8014096:	eeb0 0a67 	vmov.f32	s0, s15
 801409a:	370c      	adds	r7, #12
 801409c:	46bd      	mov	sp, r7
 801409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a2:	4770      	bx	lr

080140a4 <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
     *
     * @param x The x coordinate.
     * @param y The y coordinate.
     * @param z The z coordinate.
     */
    virtual void setOrigo(float x, float y, float z)
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b084      	sub	sp, #16
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	60f8      	str	r0, [r7, #12]
 80140ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80140b0:	edc7 0a01 	vstr	s1, [r7, #4]
 80140b4:	ed87 1a00 	vstr	s2, [r7]
    {
        xOrigo = x;
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	68ba      	ldr	r2, [r7, #8]
 80140bc:	645a      	str	r2, [r3, #68]	; 0x44
        yOrigo = y;
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	687a      	ldr	r2, [r7, #4]
 80140c2:	649a      	str	r2, [r3, #72]	; 0x48
        zOrigo = z;
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	683a      	ldr	r2, [r7, #0]
 80140c8:	64da      	str	r2, [r3, #76]	; 0x4c
        applyTransformation();
 80140ca:	68f8      	ldr	r0, [r7, #12]
 80140cc:	f000 fed2 	bl	8014e74 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
    }
 80140d0:	bf00      	nop
 80140d2:	3710      	adds	r7, #16
 80140d4:	46bd      	mov	sp, r7
 80140d6:	bd80      	pop	{r7, pc}

080140d8 <_ZN8touchgfx13TextureMapper8setOrigoEff>:
     *        Sets the transformation origo.
     *
     * @param x The x coordinate.
     * @param y The y coordinate.
     */
    virtual void setOrigo(float x, float y)
 80140d8:	b580      	push	{r7, lr}
 80140da:	b084      	sub	sp, #16
 80140dc:	af00      	add	r7, sp, #0
 80140de:	60f8      	str	r0, [r7, #12]
 80140e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80140e4:	edc7 0a01 	vstr	s1, [r7, #4]
    {
        xOrigo = x;
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	68ba      	ldr	r2, [r7, #8]
 80140ec:	645a      	str	r2, [r3, #68]	; 0x44
        yOrigo = y;
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	687a      	ldr	r2, [r7, #4]
 80140f2:	649a      	str	r2, [r3, #72]	; 0x48
        applyTransformation();
 80140f4:	68f8      	ldr	r0, [r7, #12]
 80140f6:	f000 febd 	bl	8014e74 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
    }
 80140fa:	bf00      	nop
 80140fc:	3710      	adds	r7, #16
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}

08014102 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
     *
     *        Gets transformation origo x coordinate.
     *
     * @return The transformation origo x coordinate.
     */
    virtual float getOrigoX() const
 8014102:	b480      	push	{r7}
 8014104:	b083      	sub	sp, #12
 8014106:	af00      	add	r7, sp, #0
 8014108:	6078      	str	r0, [r7, #4]
    {
        return xOrigo;
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801410e:	ee07 3a90 	vmov	s15, r3
    }
 8014112:	eeb0 0a67 	vmov.f32	s0, s15
 8014116:	370c      	adds	r7, #12
 8014118:	46bd      	mov	sp, r7
 801411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411e:	4770      	bx	lr

08014120 <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
     *
     *        Gets transformation origo y coordinate.
     *
     * @return The transformation origo y coordinate.
     */
    virtual float getOrigoY() const
 8014120:	b480      	push	{r7}
 8014122:	b083      	sub	sp, #12
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
    {
        return yOrigo;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801412c:	ee07 3a90 	vmov	s15, r3
    }
 8014130:	eeb0 0a67 	vmov.f32	s0, s15
 8014134:	370c      	adds	r7, #12
 8014136:	46bd      	mov	sp, r7
 8014138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413c:	4770      	bx	lr

0801413e <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
     *
     *        Gets transformation origo z coordinate.
     *
     * @return The transformation origo z coordinate.
     */
    virtual float getOrigoZ() const
 801413e:	b480      	push	{r7}
 8014140:	b083      	sub	sp, #12
 8014142:	af00      	add	r7, sp, #0
 8014144:	6078      	str	r0, [r7, #4]
    {
        return zOrigo;
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801414a:	ee07 3a90 	vmov	s15, r3
    }
 801414e:	eeb0 0a67 	vmov.f32	s0, s15
 8014152:	370c      	adds	r7, #12
 8014154:	46bd      	mov	sp, r7
 8014156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415a:	4770      	bx	lr

0801415c <_ZN8touchgfx13TextureMapper9setCameraEff>:
     *        Sets the camera coordinate.
     *
     * @param x The x coordinate for the camera.
     * @param y The y coordinate for the camera.
     */
    virtual void setCamera(float x, float y)
 801415c:	b580      	push	{r7, lr}
 801415e:	b084      	sub	sp, #16
 8014160:	af00      	add	r7, sp, #0
 8014162:	60f8      	str	r0, [r7, #12]
 8014164:	ed87 0a02 	vstr	s0, [r7, #8]
 8014168:	edc7 0a01 	vstr	s1, [r7, #4]
    {
        xCamera = x;
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	68ba      	ldr	r2, [r7, #8]
 8014170:	651a      	str	r2, [r3, #80]	; 0x50
        yCamera = y;
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	687a      	ldr	r2, [r7, #4]
 8014176:	655a      	str	r2, [r3, #84]	; 0x54
        applyTransformation();
 8014178:	68f8      	ldr	r0, [r7, #12]
 801417a:	f000 fe7b 	bl	8014e74 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
    }
 801417e:	bf00      	nop
 8014180:	3710      	adds	r7, #16
 8014182:	46bd      	mov	sp, r7
 8014184:	bd80      	pop	{r7, pc}

08014186 <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
     *
     *        Gets camera x coordinate.
     *
     * @return The camera x coordinate.
     */
    virtual float getCameraX() const
 8014186:	b480      	push	{r7}
 8014188:	b083      	sub	sp, #12
 801418a:	af00      	add	r7, sp, #0
 801418c:	6078      	str	r0, [r7, #4]
    {
        return xCamera;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014192:	ee07 3a90 	vmov	s15, r3
    }
 8014196:	eeb0 0a67 	vmov.f32	s0, s15
 801419a:	370c      	adds	r7, #12
 801419c:	46bd      	mov	sp, r7
 801419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a2:	4770      	bx	lr

080141a4 <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
     *
     *        Gets camera y coordinate.
     *
     * @return The camera y coordinate.
     */
    virtual float getCameraY() const
 80141a4:	b480      	push	{r7}
 80141a6:	b083      	sub	sp, #12
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
    {
        return yCamera;
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141b0:	ee07 3a90 	vmov	s15, r3
    }
 80141b4:	eeb0 0a67 	vmov.f32	s0, s15
 80141b8:	370c      	adds	r7, #12
 80141ba:	46bd      	mov	sp, r7
 80141bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c0:	4770      	bx	lr

080141c2 <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
     *        Sets camera distance. Minimal allowed distance is MINIMAL_CAMERA_DISTANCE. Values
     *        below will be set to MINIMAL_CAMERA_DISTANCE.
     *
     * @param d The new camera distance.
     */
    virtual void setCameraDistance(float d)
 80141c2:	b580      	push	{r7, lr}
 80141c4:	b082      	sub	sp, #8
 80141c6:	af00      	add	r7, sp, #0
 80141c8:	6078      	str	r0, [r7, #4]
 80141ca:	ed87 0a00 	vstr	s0, [r7]
    {
        cameraDistance = MAX(d, MINIMAL_CAMERA_DISTANCE);
 80141ce:	edd7 7a00 	vldr	s15, [r7]
 80141d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80141d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80141da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141de:	dd01      	ble.n	80141e4 <_ZN8touchgfx13TextureMapper17setCameraDistanceEf+0x22>
 80141e0:	683b      	ldr	r3, [r7, #0]
 80141e2:	e001      	b.n	80141e8 <_ZN8touchgfx13TextureMapper17setCameraDistanceEf+0x26>
 80141e4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80141e8:	687a      	ldr	r2, [r7, #4]
 80141ea:	6593      	str	r3, [r2, #88]	; 0x58
        applyTransformation();
 80141ec:	6878      	ldr	r0, [r7, #4]
 80141ee:	f000 fe41 	bl	8014e74 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
    }
 80141f2:	bf00      	nop
 80141f4:	3708      	adds	r7, #8
 80141f6:	46bd      	mov	sp, r7
 80141f8:	bd80      	pop	{r7, pc}

080141fa <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
     *
     *        Gets camera distance.
     *
     * @return The camera distance.
     */
    virtual float getCameraDistance() const
 80141fa:	b480      	push	{r7}
 80141fc:	b083      	sub	sp, #12
 80141fe:	af00      	add	r7, sp, #0
 8014200:	6078      	str	r0, [r7, #4]
    {
        return cameraDistance;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014206:	ee07 3a90 	vmov	s15, r3
    }
 801420a:	eeb0 0a67 	vmov.f32	s0, s15
 801420e:	370c      	adds	r7, #12
 8014210:	46bd      	mov	sp, r7
 8014212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014216:	4770      	bx	lr

08014218 <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
     *        against the dimensions of the TextureMapper.
     *
     * @param x The x coordinate.
     * @param y The y coordinate.
     */
    virtual void setBitmapPosition(float x, float y)
 8014218:	b580      	push	{r7, lr}
 801421a:	b084      	sub	sp, #16
 801421c:	af00      	add	r7, sp, #0
 801421e:	60f8      	str	r0, [r7, #12]
 8014220:	ed87 0a02 	vstr	s0, [r7, #8]
 8014224:	edc7 0a01 	vstr	s1, [r7, #4]
    {
        xBitmapPosition = x;
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	68ba      	ldr	r2, [r7, #8]
 801422c:	62da      	str	r2, [r3, #44]	; 0x2c
        yBitmapPosition = y;
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	687a      	ldr	r2, [r7, #4]
 8014232:	631a      	str	r2, [r3, #48]	; 0x30
        applyTransformation();
 8014234:	68f8      	ldr	r0, [r7, #12]
 8014236:	f000 fe1d 	bl	8014e74 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
    }
 801423a:	bf00      	nop
 801423c:	3710      	adds	r7, #16
 801423e:	46bd      	mov	sp, r7
 8014240:	bd80      	pop	{r7, pc}

08014242 <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
     *        against the dimensions of the TextureMapper.
     *
     * @param x The x coordinate.
     * @param y The y coordinate.
     */
    virtual void setBitmapPosition(int x, int y)
 8014242:	b580      	push	{r7, lr}
 8014244:	b084      	sub	sp, #16
 8014246:	af00      	add	r7, sp, #0
 8014248:	60f8      	str	r0, [r7, #12]
 801424a:	60b9      	str	r1, [r7, #8]
 801424c:	607a      	str	r2, [r7, #4]
    {
        setBitmapPosition((float)x, (float)y);
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	33bc      	adds	r3, #188	; 0xbc
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	68ba      	ldr	r2, [r7, #8]
 8014258:	ee07 2a90 	vmov	s15, r2
 801425c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014260:	687a      	ldr	r2, [r7, #4]
 8014262:	ee07 2a10 	vmov	s14, r2
 8014266:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801426a:	eef0 0a47 	vmov.f32	s1, s14
 801426e:	eeb0 0a67 	vmov.f32	s0, s15
 8014272:	68f8      	ldr	r0, [r7, #12]
 8014274:	4798      	blx	r3
    }
 8014276:	bf00      	nop
 8014278:	3710      	adds	r7, #16
 801427a:	46bd      	mov	sp, r7
 801427c:	bd80      	pop	{r7, pc}

0801427e <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
     *
     *        Gets bitmap position x coordinate.
     *
     * @return The bitmap position x coordinate.
     */
    virtual float getBitmapPositionX() const
 801427e:	b480      	push	{r7}
 8014280:	b083      	sub	sp, #12
 8014282:	af00      	add	r7, sp, #0
 8014284:	6078      	str	r0, [r7, #4]
    {
        return xBitmapPosition;
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801428a:	ee07 3a90 	vmov	s15, r3
    }
 801428e:	eeb0 0a67 	vmov.f32	s0, s15
 8014292:	370c      	adds	r7, #12
 8014294:	46bd      	mov	sp, r7
 8014296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429a:	4770      	bx	lr

0801429c <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
     *
     *        Gets bitmap position y coordinate.
     *
     * @return The bitmap position y coordinate.
     */
    virtual float getBitmapPositionY() const
 801429c:	b480      	push	{r7}
 801429e:	b083      	sub	sp, #12
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
    {
        return yBitmapPosition;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142a8:	ee07 3a90 	vmov	s15, r3
    }
 80142ac:	eeb0 0a67 	vmov.f32	s0, s15
 80142b0:	370c      	adds	r7, #12
 80142b2:	46bd      	mov	sp, r7
 80142b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b8:	4770      	bx	lr

080142ba <_ZNK8touchgfx13TextureMapper5getX0Ev>:
     *
     *        Get the x coordinate of the top left corner of the transformed bitmap.
     *
     * @return The X0 coordinate.
     */
    virtual float getX0() const
 80142ba:	b480      	push	{r7}
 80142bc:	b083      	sub	sp, #12
 80142be:	af00      	add	r7, sp, #0
 80142c0:	6078      	str	r0, [r7, #4]
    {
        return imageX0;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80142c6:	ee07 3a90 	vmov	s15, r3
    }
 80142ca:	eeb0 0a67 	vmov.f32	s0, s15
 80142ce:	370c      	adds	r7, #12
 80142d0:	46bd      	mov	sp, r7
 80142d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d6:	4770      	bx	lr

080142d8 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
     *
     *        Get the x coordinate of the top right corner of the transformed bitmap.
     *
     * @return The X1 coordinate.
     */
    virtual float getX1() const
 80142d8:	b480      	push	{r7}
 80142da:	b083      	sub	sp, #12
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
    {
        return imageX1;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80142e4:	ee07 3a90 	vmov	s15, r3
    }
 80142e8:	eeb0 0a67 	vmov.f32	s0, s15
 80142ec:	370c      	adds	r7, #12
 80142ee:	46bd      	mov	sp, r7
 80142f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f4:	4770      	bx	lr

080142f6 <_ZNK8touchgfx13TextureMapper5getX2Ev>:
     *
     *        Get the x coordinate of the bottom right of the transformed bitmap.
     *
     * @return The X2 coordinate.
     */
    virtual float getX2() const
 80142f6:	b480      	push	{r7}
 80142f8:	b083      	sub	sp, #12
 80142fa:	af00      	add	r7, sp, #0
 80142fc:	6078      	str	r0, [r7, #4]
    {
        return imageX2;
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014302:	ee07 3a90 	vmov	s15, r3
    }
 8014306:	eeb0 0a67 	vmov.f32	s0, s15
 801430a:	370c      	adds	r7, #12
 801430c:	46bd      	mov	sp, r7
 801430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014312:	4770      	bx	lr

08014314 <_ZNK8touchgfx13TextureMapper5getX3Ev>:
     *
     *        Get the x coordinate of the bottom left corner of the transformed bitmap.
     *
     * @return The X3 coordinate.
     */
    virtual float getX3() const
 8014314:	b480      	push	{r7}
 8014316:	b083      	sub	sp, #12
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
    {
        return imageX3;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014322:	ee07 3a90 	vmov	s15, r3
    }
 8014326:	eeb0 0a67 	vmov.f32	s0, s15
 801432a:	370c      	adds	r7, #12
 801432c:	46bd      	mov	sp, r7
 801432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014332:	4770      	bx	lr

08014334 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
     *
     *        Get the y coordinate of the top left corner of the transformed bitmap.
     *
     * @return The Y0 coordinate.
     */
    virtual float getY0() const
 8014334:	b480      	push	{r7}
 8014336:	b083      	sub	sp, #12
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
    {
        return imageY0;
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014340:	ee07 3a90 	vmov	s15, r3
    }
 8014344:	eeb0 0a67 	vmov.f32	s0, s15
 8014348:	370c      	adds	r7, #12
 801434a:	46bd      	mov	sp, r7
 801434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014350:	4770      	bx	lr

08014352 <_ZNK8touchgfx13TextureMapper5getY1Ev>:
     *
     *        Get the y coordinate of the top right corner of the transformed bitmap.
     *
     * @return The Y1 coordinate.
     */
    virtual float getY1() const
 8014352:	b480      	push	{r7}
 8014354:	b083      	sub	sp, #12
 8014356:	af00      	add	r7, sp, #0
 8014358:	6078      	str	r0, [r7, #4]
    {
        return imageY1;
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801435e:	ee07 3a90 	vmov	s15, r3
    }
 8014362:	eeb0 0a67 	vmov.f32	s0, s15
 8014366:	370c      	adds	r7, #12
 8014368:	46bd      	mov	sp, r7
 801436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436e:	4770      	bx	lr

08014370 <_ZNK8touchgfx13TextureMapper5getY2Ev>:
     *
     *        Get the y coordinate of the bottom right corner of the transformed bitmap.
     *
     * @return The Y2 coordinate.
     */
    virtual float getY2() const
 8014370:	b480      	push	{r7}
 8014372:	b083      	sub	sp, #12
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
    {
        return imageY2;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801437c:	ee07 3a90 	vmov	s15, r3
    }
 8014380:	eeb0 0a67 	vmov.f32	s0, s15
 8014384:	370c      	adds	r7, #12
 8014386:	46bd      	mov	sp, r7
 8014388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438c:	4770      	bx	lr

0801438e <_ZNK8touchgfx13TextureMapper5getY3Ev>:
     *
     *        Get the y coordinate of the bottom left corner of the transformed bitmap.
     *
     * @return The Y3 coordinate.
     */
    virtual float getY3() const
 801438e:	b480      	push	{r7}
 8014390:	b083      	sub	sp, #12
 8014392:	af00      	add	r7, sp, #0
 8014394:	6078      	str	r0, [r7, #4]
    {
        return imageY3;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801439c:	ee07 3a90 	vmov	s15, r3
    }
 80143a0:	eeb0 0a67 	vmov.f32	s0, s15
 80143a4:	370c      	adds	r7, #12
 80143a6:	46bd      	mov	sp, r7
 80143a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ac:	4770      	bx	lr

080143ae <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
     *
     *        Get the z coordinate of the top left corner of the transformed bitmap.
     *
     * @return The Z0 coordinate.
     */
    virtual float getZ0() const
 80143ae:	b480      	push	{r7}
 80143b0:	b083      	sub	sp, #12
 80143b2:	af00      	add	r7, sp, #0
 80143b4:	6078      	str	r0, [r7, #4]
    {
        return imageZ0;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80143ba:	ee07 3a90 	vmov	s15, r3
    }
 80143be:	eeb0 0a67 	vmov.f32	s0, s15
 80143c2:	370c      	adds	r7, #12
 80143c4:	46bd      	mov	sp, r7
 80143c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ca:	4770      	bx	lr

080143cc <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
     *
     *        Get the z coordinate of the top right corner of the transformed bitmap.
     *
     * @return The Z1 coordinate.
     */
    virtual float getZ1() const
 80143cc:	b480      	push	{r7}
 80143ce:	b083      	sub	sp, #12
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
    {
        return imageZ1;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143d8:	ee07 3a90 	vmov	s15, r3
    }
 80143dc:	eeb0 0a67 	vmov.f32	s0, s15
 80143e0:	370c      	adds	r7, #12
 80143e2:	46bd      	mov	sp, r7
 80143e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e8:	4770      	bx	lr

080143ea <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
     *
     *        Get the z coordinate of the bottom right corner of the transformed bitmap.
     *
     * @return The Z2 coordinate.
     */
    virtual float getZ2() const
 80143ea:	b480      	push	{r7}
 80143ec:	b083      	sub	sp, #12
 80143ee:	af00      	add	r7, sp, #0
 80143f0:	6078      	str	r0, [r7, #4]
    {
        return imageZ2;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80143f6:	ee07 3a90 	vmov	s15, r3
    }
 80143fa:	eeb0 0a67 	vmov.f32	s0, s15
 80143fe:	370c      	adds	r7, #12
 8014400:	46bd      	mov	sp, r7
 8014402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014406:	4770      	bx	lr

08014408 <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
     *
     *        Get the z coordinate of the bottom left corner of the transformed bitmap.
     *
     * @return The Z3 coordinate.
     */
    virtual float getZ3() const
 8014408:	b480      	push	{r7}
 801440a:	b083      	sub	sp, #12
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
    {
        return imageZ3;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014416:	ee07 3a90 	vmov	s15, r3
    }
 801441a:	eeb0 0a67 	vmov.f32	s0, s15
 801441e:	370c      	adds	r7, #12
 8014420:	46bd      	mov	sp, r7
 8014422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014426:	4770      	bx	lr

08014428 <_ZNK8touchgfx13TextureMapper7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_TEXTUREMAPPER.
     */
    virtual uint16_t getType() const
 8014428:	b480      	push	{r7}
 801442a:	b083      	sub	sp, #12
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_TEXTUREMAPPER;
 8014430:	2317      	movs	r3, #23
    }
 8014432:	4618      	mov	r0, r3
 8014434:	370c      	adds	r7, #12
 8014436:	46bd      	mov	sp, r7
 8014438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443c:	4770      	bx	lr

0801443e <_ZNK8touchgfx3Box7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BOX.
     */
    virtual uint16_t getType() const
 801443e:	b480      	push	{r7}
 8014440:	b083      	sub	sp, #12
 8014442:	af00      	add	r7, sp, #0
 8014444:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BOX;
 8014446:	2304      	movs	r3, #4
    }
 8014448:	4618      	mov	r0, r3
 801444a:	370c      	adds	r7, #12
 801444c:	46bd      	mov	sp, r7
 801444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014452:	4770      	bx	lr

08014454 <_ZNK8touchgfx3Box12getSolidRectEv>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
Rect Box::getSolidRect() const
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b084      	sub	sp, #16
 8014458:	af02      	add	r7, sp, #8
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	6039      	str	r1, [r7, #0]
    Rect solidRect(0, 0, 0, 0);
 801445e:	2300      	movs	r3, #0
 8014460:	9300      	str	r3, [sp, #0]
 8014462:	2300      	movs	r3, #0
 8014464:	2200      	movs	r2, #0
 8014466:	2100      	movs	r1, #0
 8014468:	6878      	ldr	r0, [r7, #4]
 801446a:	f7fd ffd7 	bl	801241c <_ZN8touchgfx4RectC1Essss>
    if (reportAsSolid || alpha == 255)
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014474:	2b00      	cmp	r3, #0
 8014476:	d104      	bne.n	8014482 <_ZNK8touchgfx3Box12getSolidRectEv+0x2e>
 8014478:	683b      	ldr	r3, [r7, #0]
 801447a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801447e:	2bff      	cmp	r3, #255	; 0xff
 8014480:	d109      	bne.n	8014496 <_ZNK8touchgfx3Box12getSolidRectEv+0x42>
    {
        solidRect.width = rect.width;
 8014482:	683b      	ldr	r3, [r7, #0]
 8014484:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	809a      	strh	r2, [r3, #4]
        solidRect.height = rect.height;
 801448c:	683b      	ldr	r3, [r7, #0]
 801448e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	80da      	strh	r2, [r3, #6]
    }
    return solidRect;
 8014496:	bf00      	nop
}
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	3708      	adds	r7, #8
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}

080144a0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:

void Box::draw(const Rect& area) const
{
 80144a0:	b590      	push	{r4, r7, lr}
 80144a2:	b085      	sub	sp, #20
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	6039      	str	r1, [r7, #0]
    Rect dirty = area;
 80144aa:	683a      	ldr	r2, [r7, #0]
 80144ac:	f107 0308 	add.w	r3, r7, #8
 80144b0:	6810      	ldr	r0, [r2, #0]
 80144b2:	6851      	ldr	r1, [r2, #4]
 80144b4:	c303      	stmia	r3!, {r0, r1}
    translateRectToAbsolute(dirty);
 80144b6:	687a      	ldr	r2, [r7, #4]
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	3324      	adds	r3, #36	; 0x24
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	f107 0108 	add.w	r1, r7, #8
 80144c4:	4610      	mov	r0, r2
 80144c6:	4798      	blx	r3
    HAL::lcd().fillRect(dirty, color, alpha);
 80144c8:	f7fd ff80 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 80144cc:	6803      	ldr	r3, [r0, #0]
 80144ce:	331c      	adds	r3, #28
 80144d0:	681c      	ldr	r4, [r3, #0]
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80144d8:	687a      	ldr	r2, [r7, #4]
 80144da:	f107 0108 	add.w	r1, r7, #8
 80144de:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80144e0:	47a0      	blx	r4
}
 80144e2:	bf00      	nop
 80144e4:	3714      	adds	r7, #20
 80144e6:	46bd      	mov	sp, r7
 80144e8:	bd90      	pop	{r4, r7, pc}

080144ea <_ZNK8touchgfx6Button7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTON.
     */
    virtual uint16_t getType() const
 80144ea:	b480      	push	{r7}
 80144ec:	b083      	sub	sp, #12
 80144ee:	af00      	add	r7, sp, #0
 80144f0:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BUTTON;
 80144f2:	2305      	movs	r3, #5
    }
 80144f4:	4618      	mov	r0, r3
 80144f6:	370c      	adds	r7, #12
 80144f8:	46bd      	mov	sp, r7
 80144fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144fe:	4770      	bx	lr

08014500 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
void Button::draw(const Rect& invalidatedArea) const
{
 8014500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014502:	b08d      	sub	sp, #52	; 0x34
 8014504:	af04      	add	r7, sp, #16
 8014506:	6078      	str	r0, [r7, #4]
 8014508:	6039      	str	r1, [r7, #0]
    Bitmap bmp(AbstractButton::pressed ? down : up);
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014510:	2b00      	cmp	r3, #0
 8014512:	d002      	beq.n	801451a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x1a>
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	3330      	adds	r3, #48	; 0x30
 8014518:	e001      	b.n	801451e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x1e>
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	332e      	adds	r3, #46	; 0x2e
 801451e:	881b      	ldrh	r3, [r3, #0]
 8014520:	83bb      	strh	r3, [r7, #28]
    Rect dirty(0, 0, bmp.getWidth(), bmp.getHeight());
 8014522:	f107 031c 	add.w	r3, r7, #28
 8014526:	4618      	mov	r0, r3
 8014528:	f012 faba 	bl	8026aa0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801452c:	4603      	mov	r3, r0
 801452e:	b21c      	sxth	r4, r3
 8014530:	f107 031c 	add.w	r3, r7, #28
 8014534:	4618      	mov	r0, r3
 8014536:	f012 faed 	bl	8026b14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801453a:	4603      	mov	r3, r0
 801453c:	b21b      	sxth	r3, r3
 801453e:	f107 0014 	add.w	r0, r7, #20
 8014542:	9300      	str	r3, [sp, #0]
 8014544:	4623      	mov	r3, r4
 8014546:	2200      	movs	r2, #0
 8014548:	2100      	movs	r1, #0
 801454a:	f7fd ff67 	bl	801241c <_ZN8touchgfx4RectC1Essss>
    dirty &= invalidatedArea;
 801454e:	f107 0314 	add.w	r3, r7, #20
 8014552:	6839      	ldr	r1, [r7, #0]
 8014554:	4618      	mov	r0, r3
 8014556:	f7fe f821 	bl	801259c <_ZN8touchgfx4RectaNERKS0_>
    if ((bmp.getId() != BITMAP_INVALID) && !dirty.isEmpty())
 801455a:	f107 031c 	add.w	r3, r7, #28
 801455e:	4618      	mov	r0, r3
 8014560:	f7ff fbfe 	bl	8013d60 <_ZNK8touchgfx6Bitmap5getIdEv>
 8014564:	4603      	mov	r3, r0
 8014566:	461a      	mov	r2, r3
 8014568:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801456c:	429a      	cmp	r2, r3
 801456e:	d00c      	beq.n	801458a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8014570:	f107 0314 	add.w	r3, r7, #20
 8014574:	4618      	mov	r0, r3
 8014576:	f7fe f919 	bl	80127ac <_ZNK8touchgfx4Rect7isEmptyEv>
 801457a:	4603      	mov	r3, r0
 801457c:	f083 0301 	eor.w	r3, r3, #1
 8014580:	b2db      	uxtb	r3, r3
 8014582:	2b00      	cmp	r3, #0
 8014584:	d001      	beq.n	801458a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8014586:	2301      	movs	r3, #1
 8014588:	e000      	b.n	801458c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8c>
 801458a:	2300      	movs	r3, #0
 801458c:	2b00      	cmp	r3, #0
 801458e:	d024      	beq.n	80145da <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
    {
        Rect r;
 8014590:	f107 030c 	add.w	r3, r7, #12
 8014594:	4618      	mov	r0, r3
 8014596:	f7fd fcf5 	bl	8011f84 <_ZN8touchgfx4RectC1Ev>
        translateRectToAbsolute(r);
 801459a:	687a      	ldr	r2, [r7, #4]
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	3324      	adds	r3, #36	; 0x24
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	f107 010c 	add.w	r1, r7, #12
 80145a8:	4610      	mov	r0, r2
 80145aa:	4798      	blx	r3
        HAL::lcd().drawPartialBitmap(bmp, r.x, r.y, dirty, alpha);
 80145ac:	f7fd ff0e 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 80145b0:	6803      	ldr	r3, [r0, #0]
 80145b2:	330c      	adds	r3, #12
 80145b4:	681c      	ldr	r4, [r3, #0]
 80145b6:	f9b7 500c 	ldrsh.w	r5, [r7, #12]
 80145ba:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80145c4:	f107 011c 	add.w	r1, r7, #28
 80145c8:	2201      	movs	r2, #1
 80145ca:	9202      	str	r2, [sp, #8]
 80145cc:	9301      	str	r3, [sp, #4]
 80145ce:	f107 0314 	add.w	r3, r7, #20
 80145d2:	9300      	str	r3, [sp, #0]
 80145d4:	4633      	mov	r3, r6
 80145d6:	462a      	mov	r2, r5
 80145d8:	47a0      	blx	r4
    }
}
 80145da:	bf00      	nop
 80145dc:	3724      	adds	r7, #36	; 0x24
 80145de:	46bd      	mov	sp, r7
 80145e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080145e2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:

void Button::setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
{
 80145e2:	b590      	push	{r4, r7, lr}
 80145e4:	b085      	sub	sp, #20
 80145e6:	af00      	add	r7, sp, #0
 80145e8:	60f8      	str	r0, [r7, #12]
 80145ea:	60b9      	str	r1, [r7, #8]
 80145ec:	607a      	str	r2, [r7, #4]
    up = bmpReleased;
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	68ba      	ldr	r2, [r7, #8]
 80145f2:	8812      	ldrh	r2, [r2, #0]
 80145f4:	85da      	strh	r2, [r3, #46]	; 0x2e
    down = bmpPressed;
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	687a      	ldr	r2, [r7, #4]
 80145fa:	8812      	ldrh	r2, [r2, #0]
 80145fc:	861a      	strh	r2, [r3, #48]	; 0x30
    // Adjust width and height of this widget to match bitmap. It is assumed
    // that the two bitmaps have same dimensions.
    Drawable::setWidth(down.getWidth());
 80145fe:	68fc      	ldr	r4, [r7, #12]
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	3330      	adds	r3, #48	; 0x30
 8014604:	4618      	mov	r0, r3
 8014606:	f012 fa4b 	bl	8026aa0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801460a:	4603      	mov	r3, r0
 801460c:	b21b      	sxth	r3, r3
 801460e:	4619      	mov	r1, r3
 8014610:	4620      	mov	r0, r4
 8014612:	f7fd fd68 	bl	80120e6 <_ZN8touchgfx8Drawable8setWidthEs>
    Drawable::setHeight(down.getHeight());
 8014616:	68fc      	ldr	r4, [r7, #12]
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	3330      	adds	r3, #48	; 0x30
 801461c:	4618      	mov	r0, r3
 801461e:	f012 fa79 	bl	8026b14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014622:	4603      	mov	r3, r0
 8014624:	b21b      	sxth	r3, r3
 8014626:	4619      	mov	r1, r3
 8014628:	4620      	mov	r0, r4
 801462a:	f7fd fd6b 	bl	8012104 <_ZN8touchgfx8Drawable9setHeightEs>
}
 801462e:	bf00      	nop
 8014630:	3714      	adds	r7, #20
 8014632:	46bd      	mov	sp, r7
 8014634:	bd90      	pop	{r4, r7, pc}

08014636 <_ZNK8touchgfx6Button12getSolidRectEv>:

Rect Button::getSolidRect() const
{
 8014636:	b580      	push	{r7, lr}
 8014638:	b084      	sub	sp, #16
 801463a:	af02      	add	r7, sp, #8
 801463c:	6078      	str	r0, [r7, #4]
 801463e:	6039      	str	r1, [r7, #0]
    if (alpha < 255)
 8014640:	683b      	ldr	r3, [r7, #0]
 8014642:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8014646:	2bff      	cmp	r3, #255	; 0xff
 8014648:	d008      	beq.n	801465c <_ZNK8touchgfx6Button12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 801464a:	2300      	movs	r3, #0
 801464c:	9300      	str	r3, [sp, #0]
 801464e:	2300      	movs	r3, #0
 8014650:	2200      	movs	r2, #0
 8014652:	2100      	movs	r1, #0
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f7fd fee1 	bl	801241c <_ZN8touchgfx4RectC1Essss>
 801465a:	e015      	b.n	8014688 <_ZNK8touchgfx6Button12getSolidRectEv+0x52>
    }

    return (AbstractButton::pressed ? down.getSolidRect() : up.getSolidRect());
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014662:	2b00      	cmp	r3, #0
 8014664:	d008      	beq.n	8014678 <_ZNK8touchgfx6Button12getSolidRectEv+0x42>
 8014666:	683b      	ldr	r3, [r7, #0]
 8014668:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	4611      	mov	r1, r2
 8014670:	4618      	mov	r0, r3
 8014672:	f012 fa89 	bl	8026b88 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8014676:	e007      	b.n	8014688 <_ZNK8touchgfx6Button12getSolidRectEv+0x52>
 8014678:	683b      	ldr	r3, [r7, #0]
 801467a:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	4611      	mov	r1, r2
 8014682:	4618      	mov	r0, r3
 8014684:	f012 fa80 	bl	8026b88 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
}
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	3708      	adds	r7, #8
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}

08014690 <_ZNK8touchgfx6Bitmap7getRectEv>:
     *
     *        Gets the rectangle describing the dimensions of the Bitmap.
     *
     * @return a Rect describing the dimensions of this bitmap.
     */
    Rect getRect() const
 8014690:	b590      	push	{r4, r7, lr}
 8014692:	b085      	sub	sp, #20
 8014694:	af02      	add	r7, sp, #8
 8014696:	6078      	str	r0, [r7, #4]
 8014698:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 801469a:	6838      	ldr	r0, [r7, #0]
 801469c:	f012 fa00 	bl	8026aa0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80146a0:	4603      	mov	r3, r0
 80146a2:	b21c      	sxth	r4, r3
 80146a4:	6838      	ldr	r0, [r7, #0]
 80146a6:	f012 fa35 	bl	8026b14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80146aa:	4603      	mov	r3, r0
 80146ac:	b21b      	sxth	r3, r3
 80146ae:	9300      	str	r3, [sp, #0]
 80146b0:	4623      	mov	r3, r4
 80146b2:	2200      	movs	r2, #0
 80146b4:	2100      	movs	r1, #0
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f7fd feb0 	bl	801241c <_ZN8touchgfx4RectC1Essss>
    }
 80146bc:	6878      	ldr	r0, [r7, #4]
 80146be:	370c      	adds	r7, #12
 80146c0:	46bd      	mov	sp, r7
 80146c2:	bd90      	pop	{r4, r7, pc}

080146c4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
void Image::setBitmap(const Bitmap& bmp)
{
 80146c4:	b5b0      	push	{r4, r5, r7, lr}
 80146c6:	b082      	sub	sp, #8
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
 80146cc:	6039      	str	r1, [r7, #0]
    bitmap = bmp;
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	683a      	ldr	r2, [r7, #0]
 80146d2:	8812      	ldrh	r2, [r2, #0]
 80146d4:	84da      	strh	r2, [r3, #38]	; 0x26
    // When setting bitmap, adjust size of this widget to match.
    setWidth(bitmap.getWidth());
 80146d6:	687d      	ldr	r5, [r7, #4]
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	3338      	adds	r3, #56	; 0x38
 80146de:	681c      	ldr	r4, [r3, #0]
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	3326      	adds	r3, #38	; 0x26
 80146e4:	4618      	mov	r0, r3
 80146e6:	f012 f9db 	bl	8026aa0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80146ea:	4603      	mov	r3, r0
 80146ec:	b21b      	sxth	r3, r3
 80146ee:	4619      	mov	r1, r3
 80146f0:	4628      	mov	r0, r5
 80146f2:	47a0      	blx	r4
    setHeight(bitmap.getHeight());
 80146f4:	687d      	ldr	r5, [r7, #4]
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	333c      	adds	r3, #60	; 0x3c
 80146fc:	681c      	ldr	r4, [r3, #0]
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	3326      	adds	r3, #38	; 0x26
 8014702:	4618      	mov	r0, r3
 8014704:	f012 fa06 	bl	8026b14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014708:	4603      	mov	r3, r0
 801470a:	b21b      	sxth	r3, r3
 801470c:	4619      	mov	r1, r3
 801470e:	4628      	mov	r0, r5
 8014710:	47a0      	blx	r4

    // This bool is no longer used, but maintained for backwards compat.
    hasTransparentPixels = bitmap.hasTransparentPixels();
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	3326      	adds	r3, #38	; 0x26
 8014716:	4618      	mov	r0, r3
 8014718:	f012 fa90 	bl	8026c3c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801471c:	4603      	mov	r3, r0
 801471e:	461a      	mov	r2, r3
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8014726:	bf00      	nop
 8014728:	3708      	adds	r7, #8
 801472a:	46bd      	mov	sp, r7
 801472c:	bdb0      	pop	{r4, r5, r7, pc}

0801472e <_ZNK8touchgfx5Image4drawERKNS_4RectE>:

void Image::draw(const Rect& invalidatedArea) const
{
 801472e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014730:	b08d      	sub	sp, #52	; 0x34
 8014732:	af04      	add	r7, sp, #16
 8014734:	6078      	str	r0, [r7, #4]
 8014736:	6039      	str	r1, [r7, #0]
    Rect meAbs;
 8014738:	f107 0310 	add.w	r3, r7, #16
 801473c:	4618      	mov	r0, r3
 801473e:	f7fd fc21 	bl	8011f84 <_ZN8touchgfx4RectC1Ev>
    translateRectToAbsolute(meAbs); //To find our x and y coords in absolute.
 8014742:	687a      	ldr	r2, [r7, #4]
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	3324      	adds	r3, #36	; 0x24
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	f107 0110 	add.w	r1, r7, #16
 8014750:	4610      	mov	r0, r2
 8014752:	4798      	blx	r3

    // Calculate intersection between bitmap rect and invalidated area.
    Rect dirtyBitmapArea = bitmap.getRect() & invalidatedArea;
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801475a:	f107 0318 	add.w	r3, r7, #24
 801475e:	4611      	mov	r1, r2
 8014760:	4618      	mov	r0, r3
 8014762:	f7ff ff95 	bl	8014690 <_ZNK8touchgfx6Bitmap7getRectEv>
 8014766:	f107 0308 	add.w	r3, r7, #8
 801476a:	f107 0118 	add.w	r1, r7, #24
 801476e:	683a      	ldr	r2, [r7, #0]
 8014770:	4618      	mov	r0, r3
 8014772:	f7fd fefe 	bl	8012572 <_ZNK8touchgfx4RectanERKS0_>

    if (!dirtyBitmapArea.isEmpty())
 8014776:	f107 0308 	add.w	r3, r7, #8
 801477a:	4618      	mov	r0, r3
 801477c:	f7fe f816 	bl	80127ac <_ZNK8touchgfx4Rect7isEmptyEv>
 8014780:	4603      	mov	r3, r0
 8014782:	f083 0301 	eor.w	r3, r3, #1
 8014786:	b2db      	uxtb	r3, r3
 8014788:	2b00      	cmp	r3, #0
 801478a:	d017      	beq.n	80147bc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x8e>
    {
        HAL::lcd().drawPartialBitmap(bitmap, meAbs.x, meAbs.y, dirtyBitmapArea, alpha);
 801478c:	f7fd fe1e 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 8014790:	6803      	ldr	r3, [r0, #0]
 8014792:	330c      	adds	r3, #12
 8014794:	681c      	ldr	r4, [r3, #0]
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801479c:	f9b7 5010 	ldrsh.w	r5, [r7, #16]
 80147a0:	f9b7 6012 	ldrsh.w	r6, [r7, #18]
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80147aa:	2201      	movs	r2, #1
 80147ac:	9202      	str	r2, [sp, #8]
 80147ae:	9301      	str	r3, [sp, #4]
 80147b0:	f107 0308 	add.w	r3, r7, #8
 80147b4:	9300      	str	r3, [sp, #0]
 80147b6:	4633      	mov	r3, r6
 80147b8:	462a      	mov	r2, r5
 80147ba:	47a0      	blx	r4
    }
}
 80147bc:	bf00      	nop
 80147be:	3724      	adds	r7, #36	; 0x24
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080147c4 <_ZNK8touchgfx5Image12getSolidRectEv>:

Rect Image::getSolidRect() const
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b084      	sub	sp, #16
 80147c8:	af02      	add	r7, sp, #8
 80147ca:	6078      	str	r0, [r7, #4]
 80147cc:	6039      	str	r1, [r7, #0]
    // If alpha is less than solid, we have an empty solid rect.
    if (alpha < 255)
 80147ce:	683b      	ldr	r3, [r7, #0]
 80147d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80147d4:	2bff      	cmp	r3, #255	; 0xff
 80147d6:	d008      	beq.n	80147ea <_ZNK8touchgfx5Image12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 80147d8:	2300      	movs	r3, #0
 80147da:	9300      	str	r3, [sp, #0]
 80147dc:	2300      	movs	r3, #0
 80147de:	2200      	movs	r2, #0
 80147e0:	2100      	movs	r1, #0
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f7fd fe1a 	bl	801241c <_ZN8touchgfx4RectC1Essss>
 80147e8:	e007      	b.n	80147fa <_ZNK8touchgfx5Image12getSolidRectEv+0x36>
    }
    // Return solid rect from bitmap (precalculated).
    return bitmap.getSolidRect();
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	4611      	mov	r1, r2
 80147f4:	4618      	mov	r0, r3
 80147f6:	f012 f9c7 	bl	8026b88 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
}
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	3708      	adds	r7, #8
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}

08014802 <_ZN8touchgfx16floatToFixed28_4Ef>:
 * @param value The value.
 *
 * @return The value as fixed28_4.
 */
inline fixed28_4 floatToFixed28_4(float value)
{
 8014802:	b480      	push	{r7}
 8014804:	b083      	sub	sp, #12
 8014806:	af00      	add	r7, sp, #0
 8014808:	ed87 0a01 	vstr	s0, [r7, #4]
    return (fixed28_4)(value * 16);
 801480c:	edd7 7a01 	vldr	s15, [r7, #4]
 8014810:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8014814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801481c:	ee17 3a90 	vmov	r3, s15
}
 8014820:	4618      	mov	r0, r3
 8014822:	370c      	adds	r7, #12
 8014824:	46bd      	mov	sp, r7
 8014826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482a:	4770      	bx	lr

0801482c <_ZNK8touchgfx14SnapshotWidget7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_SNAPSHOTWIDGET.
     */
    virtual uint16_t getType() const
 801482c:	b480      	push	{r7}
 801482e:	b083      	sub	sp, #12
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_SNAPSHOTWIDGET;
 8014834:	230c      	movs	r3, #12
    }
 8014836:	4618      	mov	r0, r3
 8014838:	370c      	adds	r7, #12
 801483a:	46bd      	mov	sp, r7
 801483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014840:	4770      	bx	lr
	...

08014844 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
#include <touchgfx/widgets/SnapshotWidget.hpp>
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
SnapshotWidget::SnapshotWidget() : Widget(), bitmapId(BITMAP_INVALID), alpha(255)
 8014844:	b580      	push	{r7, lr}
 8014846:	b082      	sub	sp, #8
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	4618      	mov	r0, r3
 8014850:	f7fe fb0a 	bl	8012e68 <_ZN8touchgfx6WidgetC1Ev>
 8014854:	4a07      	ldr	r2, [pc, #28]	; (8014874 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x30>)
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	601a      	str	r2, [r3, #0]
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014860:	84da      	strh	r2, [r3, #38]	; 0x26
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	22ff      	movs	r2, #255	; 0xff
 8014866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
{
}
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	4618      	mov	r0, r3
 801486e:	3708      	adds	r7, #8
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}
 8014874:	0802d0f8 	.word	0x0802d0f8

08014878 <_ZN8touchgfx14SnapshotWidgetD1Ev>:

SnapshotWidget::~SnapshotWidget()
 8014878:	b580      	push	{r7, lr}
 801487a:	b082      	sub	sp, #8
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]
 8014880:	4a05      	ldr	r2, [pc, #20]	; (8014898 <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	601a      	str	r2, [r3, #0]
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	4618      	mov	r0, r3
 801488a:	f7fd fce7 	bl	801225c <_ZN8touchgfx6WidgetD1Ev>
{
}
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	4618      	mov	r0, r3
 8014892:	3708      	adds	r7, #8
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}
 8014898:	0802d0f8 	.word	0x0802d0f8

0801489c <_ZN8touchgfx14SnapshotWidgetD0Ev>:
SnapshotWidget::~SnapshotWidget()
 801489c:	b580      	push	{r7, lr}
 801489e:	b082      	sub	sp, #8
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
}
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f7ff ffe7 	bl	8014878 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 80148aa:	212c      	movs	r1, #44	; 0x2c
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f015 fe38 	bl	802a522 <_ZdlPvj>
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	4618      	mov	r0, r3
 80148b6:	3708      	adds	r7, #8
 80148b8:	46bd      	mov	sp, r7
 80148ba:	bd80      	pop	{r7, pc}

080148bc <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:

void SnapshotWidget::draw(const Rect& invalidatedArea) const
{
 80148bc:	b5b0      	push	{r4, r5, r7, lr}
 80148be:	b088      	sub	sp, #32
 80148c0:	af02      	add	r7, sp, #8
 80148c2:	6078      	str	r0, [r7, #4]
 80148c4:	6039      	str	r1, [r7, #0]
    if (alpha == 0 || bitmapId == BITMAP_INVALID)
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d049      	beq.n	8014964 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0xa8>
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80148d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80148d8:	4293      	cmp	r3, r2
 80148da:	d043      	beq.n	8014964 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0xa8>
    {
        return;
    }

    Rect absRect(0, 0, Bitmap(bitmapId).getWidth(), rect.height);
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80148e0:	f107 0310 	add.w	r3, r7, #16
 80148e4:	4611      	mov	r1, r2
 80148e6:	4618      	mov	r0, r3
 80148e8:	f7fd fb63 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 80148ec:	f107 0310 	add.w	r3, r7, #16
 80148f0:	4618      	mov	r0, r3
 80148f2:	f012 f8d5 	bl	8026aa0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80148f6:	4603      	mov	r3, r0
 80148f8:	b21a      	sxth	r2, r3
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8014900:	f107 0008 	add.w	r0, r7, #8
 8014904:	9300      	str	r3, [sp, #0]
 8014906:	4613      	mov	r3, r2
 8014908:	2200      	movs	r2, #0
 801490a:	2100      	movs	r1, #0
 801490c:	f7fd fd86 	bl	801241c <_ZN8touchgfx4RectC1Essss>
    translateRectToAbsolute(absRect);
 8014910:	687a      	ldr	r2, [r7, #4]
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	3324      	adds	r3, #36	; 0x24
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	f107 0108 	add.w	r1, r7, #8
 801491e:	4610      	mov	r0, r2
 8014920:	4798      	blx	r3
    HAL::lcd().blitCopy((const uint16_t*)Bitmap(bitmapId).getData(), absRect, invalidatedArea, alpha, false);
 8014922:	f7fd fd53 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 8014926:	4605      	mov	r5, r0
 8014928:	682b      	ldr	r3, [r5, #0]
 801492a:	3310      	adds	r3, #16
 801492c:	681c      	ldr	r4, [r3, #0]
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8014932:	f107 0314 	add.w	r3, r7, #20
 8014936:	4611      	mov	r1, r2
 8014938:	4618      	mov	r0, r3
 801493a:	f7fd fb3a 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801493e:	f107 0314 	add.w	r3, r7, #20
 8014942:	4618      	mov	r0, r3
 8014944:	f012 f9b4 	bl	8026cb0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801494e:	f107 0108 	add.w	r1, r7, #8
 8014952:	2200      	movs	r2, #0
 8014954:	9201      	str	r2, [sp, #4]
 8014956:	9300      	str	r3, [sp, #0]
 8014958:	683b      	ldr	r3, [r7, #0]
 801495a:	460a      	mov	r2, r1
 801495c:	4601      	mov	r1, r0
 801495e:	4628      	mov	r0, r5
 8014960:	47a0      	blx	r4
 8014962:	e000      	b.n	8014966 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0xaa>
        return;
 8014964:	bf00      	nop
}
 8014966:	3718      	adds	r7, #24
 8014968:	46bd      	mov	sp, r7
 801496a:	bdb0      	pop	{r4, r5, r7, pc}

0801496c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:

Rect SnapshotWidget::getSolidRect() const
{
 801496c:	b590      	push	{r4, r7, lr}
 801496e:	b085      	sub	sp, #20
 8014970:	af02      	add	r7, sp, #8
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	6039      	str	r1, [r7, #0]
    if (alpha < 255 || bitmapId == BITMAP_INVALID)
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801497c:	2bff      	cmp	r3, #255	; 0xff
 801497e:	d105      	bne.n	801498c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 8014980:	683b      	ldr	r3, [r7, #0]
 8014982:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014988:	4293      	cmp	r3, r2
 801498a:	d108      	bne.n	801499e <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x32>
    {
        return Rect(0, 0, 0, 0);
 801498c:	2300      	movs	r3, #0
 801498e:	9300      	str	r3, [sp, #0]
 8014990:	2300      	movs	r3, #0
 8014992:	2200      	movs	r2, #0
 8014994:	2100      	movs	r1, #0
 8014996:	6878      	ldr	r0, [r7, #4]
 8014998:	f7fd fd40 	bl	801241c <_ZN8touchgfx4RectC1Essss>
 801499c:	e011      	b.n	80149c2 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x56>
    }
    else
    {
        return Rect(0, 0, getWidth(), getHeight());
 801499e:	683b      	ldr	r3, [r7, #0]
 80149a0:	4618      	mov	r0, r3
 80149a2:	f7fe fa31 	bl	8012e08 <_ZNK8touchgfx8Drawable8getWidthEv>
 80149a6:	4603      	mov	r3, r0
 80149a8:	461c      	mov	r4, r3
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	4618      	mov	r0, r3
 80149ae:	f7fe fa38 	bl	8012e22 <_ZNK8touchgfx8Drawable9getHeightEv>
 80149b2:	4603      	mov	r3, r0
 80149b4:	9300      	str	r3, [sp, #0]
 80149b6:	4623      	mov	r3, r4
 80149b8:	2200      	movs	r2, #0
 80149ba:	2100      	movs	r1, #0
 80149bc:	6878      	ldr	r0, [r7, #4]
 80149be:	f7fd fd2d 	bl	801241c <_ZN8touchgfx4RectC1Essss>
    }
}
 80149c2:	6878      	ldr	r0, [r7, #4]
 80149c4:	370c      	adds	r7, #12
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bd90      	pop	{r4, r7, pc}

080149ca <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:

void SnapshotWidget::makeSnapshot()
{
 80149ca:	b580      	push	{r7, lr}
 80149cc:	b082      	sub	sp, #8
 80149ce:	af00      	add	r7, sp, #0
 80149d0:	6078      	str	r0, [r7, #4]
    makeSnapshot(BITMAP_ANIMATION_STORAGE);
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	3368      	adds	r3, #104	; 0x68
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80149de:	6878      	ldr	r0, [r7, #4]
 80149e0:	4798      	blx	r3
}
 80149e2:	bf00      	nop
 80149e4:	3708      	adds	r7, #8
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}

080149ea <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:

void SnapshotWidget::makeSnapshot(const BitmapId bmp)
{
 80149ea:	b590      	push	{r4, r7, lr}
 80149ec:	b089      	sub	sp, #36	; 0x24
 80149ee:	af02      	add	r7, sp, #8
 80149f0:	6078      	str	r0, [r7, #4]
 80149f2:	460b      	mov	r3, r1
 80149f4:	807b      	strh	r3, [r7, #2]
    Rect visRect(0, 0, rect.width, rect.height);
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8014a02:	f107 0010 	add.w	r0, r7, #16
 8014a06:	9300      	str	r3, [sp, #0]
 8014a08:	4613      	mov	r3, r2
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	2100      	movs	r1, #0
 8014a0e:	f7fd fd05 	bl	801241c <_ZN8touchgfx4RectC1Essss>
    getVisibleRect(visRect);
 8014a12:	687a      	ldr	r2, [r7, #4]
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	3320      	adds	r3, #32
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	f107 0110 	add.w	r1, r7, #16
 8014a20:	4610      	mov	r0, r2
 8014a22:	4798      	blx	r3
    Rect absRect = getAbsoluteRect();
 8014a24:	687a      	ldr	r2, [r7, #4]
 8014a26:	f107 0308 	add.w	r3, r7, #8
 8014a2a:	4611      	mov	r1, r2
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f010 fb06 	bl	802503e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
    bitmapId = (HAL::lcd().copyFrameBufferRegionToMemory(visRect, absRect, bmp)) ? bmp : BITMAP_INVALID;
 8014a32:	f7fd fccb 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 8014a36:	6803      	ldr	r3, [r0, #0]
 8014a38:	3318      	adds	r3, #24
 8014a3a:	681c      	ldr	r4, [r3, #0]
 8014a3c:	887b      	ldrh	r3, [r7, #2]
 8014a3e:	f107 0208 	add.w	r2, r7, #8
 8014a42:	f107 0110 	add.w	r1, r7, #16
 8014a46:	47a0      	blx	r4
 8014a48:	4603      	mov	r3, r0
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d001      	beq.n	8014a52 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt+0x68>
 8014a4e:	887a      	ldrh	r2, [r7, #2]
 8014a50:	e001      	b.n	8014a56 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt+0x6c>
 8014a52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8014a5a:	bf00      	nop
 8014a5c:	371c      	adds	r7, #28
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd90      	pop	{r4, r7, pc}

08014a62 <_ZNK8touchgfx9Quadruple4getXEv>:
     *
     *        Get x coordinate.
     *
     * @return The x coordinate.
     */
    inline float getX() const
 8014a62:	b480      	push	{r7}
 8014a64:	b083      	sub	sp, #12
 8014a66:	af00      	add	r7, sp, #0
 8014a68:	6078      	str	r0, [r7, #4]
    {
        return elements[0];
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	ee07 3a90 	vmov	s15, r3
    }
 8014a72:	eeb0 0a67 	vmov.f32	s0, s15
 8014a76:	370c      	adds	r7, #12
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7e:	4770      	bx	lr

08014a80 <_ZNK8touchgfx9Quadruple4getYEv>:
     *
     *        Get y coordinate.
     *
     * @return The y coordinate.
     */
    inline float getY() const
 8014a80:	b480      	push	{r7}
 8014a82:	b083      	sub	sp, #12
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
    {
        return elements[1];
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	685b      	ldr	r3, [r3, #4]
 8014a8c:	ee07 3a90 	vmov	s15, r3
    }
 8014a90:	eeb0 0a67 	vmov.f32	s0, s15
 8014a94:	370c      	adds	r7, #12
 8014a96:	46bd      	mov	sp, r7
 8014a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9c:	4770      	bx	lr

08014a9e <_ZNK8touchgfx9Quadruple4getZEv>:
     *
     *        Get z coordinate.
     *
     * @return The z coordinate.
     */
    inline float getZ() const
 8014a9e:	b480      	push	{r7}
 8014aa0:	b083      	sub	sp, #12
 8014aa2:	af00      	add	r7, sp, #0
 8014aa4:	6078      	str	r0, [r7, #4]
    {
        return elements[2];
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	689b      	ldr	r3, [r3, #8]
 8014aaa:	ee07 3a90 	vmov	s15, r3
    }
 8014aae:	eeb0 0a67 	vmov.f32	s0, s15
 8014ab2:	370c      	adds	r7, #12
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aba:	4770      	bx	lr

08014abc <_ZN8touchgfx9QuadrupleC1Effff>:
     * @param x The x value.
     * @param y The y value.
     * @param z The z value.
     * @param w The w value.
     */
    inline Quadruple(float x, float y, float z, float w)
 8014abc:	b480      	push	{r7}
 8014abe:	b087      	sub	sp, #28
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6178      	str	r0, [r7, #20]
 8014ac4:	ed87 0a04 	vstr	s0, [r7, #16]
 8014ac8:	edc7 0a03 	vstr	s1, [r7, #12]
 8014acc:	ed87 1a02 	vstr	s2, [r7, #8]
 8014ad0:	edc7 1a01 	vstr	s3, [r7, #4]
    {
        elements[0] = x;
 8014ad4:	697b      	ldr	r3, [r7, #20]
 8014ad6:	693a      	ldr	r2, [r7, #16]
 8014ad8:	601a      	str	r2, [r3, #0]
        elements[1] = y;
 8014ada:	697b      	ldr	r3, [r7, #20]
 8014adc:	68fa      	ldr	r2, [r7, #12]
 8014ade:	605a      	str	r2, [r3, #4]
        elements[2] = z;
 8014ae0:	697b      	ldr	r3, [r7, #20]
 8014ae2:	68ba      	ldr	r2, [r7, #8]
 8014ae4:	609a      	str	r2, [r3, #8]
        elements[3] = w;
 8014ae6:	697b      	ldr	r3, [r7, #20]
 8014ae8:	687a      	ldr	r2, [r7, #4]
 8014aea:	60da      	str	r2, [r3, #12]
    }
 8014aec:	697b      	ldr	r3, [r7, #20]
 8014aee:	4618      	mov	r0, r3
 8014af0:	371c      	adds	r7, #28
 8014af2:	46bd      	mov	sp, r7
 8014af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af8:	4770      	bx	lr
	...

08014afc <_ZN8touchgfx6Point4C1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    inline Point4() : Quadruple(0, 0, 0, 1) {}
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b082      	sub	sp, #8
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8014b0a:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8014b28 <_ZN8touchgfx6Point4C1Ev+0x2c>
 8014b0e:	eddf 0a06 	vldr	s1, [pc, #24]	; 8014b28 <_ZN8touchgfx6Point4C1Ev+0x2c>
 8014b12:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8014b28 <_ZN8touchgfx6Point4C1Ev+0x2c>
 8014b16:	4618      	mov	r0, r3
 8014b18:	f7ff ffd0 	bl	8014abc <_ZN8touchgfx9QuadrupleC1Effff>
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	4618      	mov	r0, r3
 8014b20:	3708      	adds	r7, #8
 8014b22:	46bd      	mov	sp, r7
 8014b24:	bd80      	pop	{r7, pc}
 8014b26:	bf00      	nop
 8014b28:	00000000 	.word	0x00000000

08014b2c <_ZN8touchgfx6Point4C1Efff>:
     *
     * @param x The x value.
     * @param y The y value.
     * @param z The z value.
     */
    inline Point4(float x, float y, float z) : Quadruple(x, y, z, 1) {}
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b084      	sub	sp, #16
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	60f8      	str	r0, [r7, #12]
 8014b34:	ed87 0a02 	vstr	s0, [r7, #8]
 8014b38:	edc7 0a01 	vstr	s1, [r7, #4]
 8014b3c:	ed87 1a00 	vstr	s2, [r7]
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8014b46:	ed97 1a00 	vldr	s2, [r7]
 8014b4a:	edd7 0a01 	vldr	s1, [r7, #4]
 8014b4e:	ed97 0a02 	vldr	s0, [r7, #8]
 8014b52:	4618      	mov	r0, r3
 8014b54:	f7ff ffb2 	bl	8014abc <_ZN8touchgfx9QuadrupleC1Effff>
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	3710      	adds	r7, #16
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bd80      	pop	{r7, pc}
	...

08014b64 <_ZN8touchgfx7Vector4C1Efff>:
     *
     * @param x The x value.
     * @param y The y value.
     * @param z The z value.
     */
    inline Vector4(float x, float y, float z) : Quadruple(x, y, z, 0) {}
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b084      	sub	sp, #16
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	60f8      	str	r0, [r7, #12]
 8014b6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8014b70:	edc7 0a01 	vstr	s1, [r7, #4]
 8014b74:	ed87 1a00 	vstr	s2, [r7]
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	eddf 1a08 	vldr	s3, [pc, #32]	; 8014b9c <_ZN8touchgfx7Vector4C1Efff+0x38>
 8014b7e:	ed97 1a00 	vldr	s2, [r7]
 8014b82:	edd7 0a01 	vldr	s1, [r7, #4]
 8014b86:	ed97 0a02 	vldr	s0, [r7, #8]
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	f7ff ff96 	bl	8014abc <_ZN8touchgfx9QuadrupleC1Effff>
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	4618      	mov	r0, r3
 8014b94:	3710      	adds	r7, #16
 8014b96:	46bd      	mov	sp, r7
 8014b98:	bd80      	pop	{r7, pc}
 8014b9a:	bf00      	nop
 8014b9c:	00000000 	.word	0x00000000

08014ba0 <_ZN8touchgfx7Vector412crossProductERKS0_>:
     *
     * @param operand The second operand.
     *
     * @return The result of the operation.
     */
    inline Vector4 crossProduct(const Vector4& operand)
 8014ba0:	b590      	push	{r4, r7, lr}
 8014ba2:	ed2d 8b02 	vpush	{d8}
 8014ba6:	b093      	sub	sp, #76	; 0x4c
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6178      	str	r0, [r7, #20]
 8014bac:	6139      	str	r1, [r7, #16]
    {
        float X = getY() * operand.getZ() - getZ() * operand.getY();
 8014bae:	697b      	ldr	r3, [r7, #20]
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	f7ff ff65 	bl	8014a80 <_ZNK8touchgfx9Quadruple4getYEv>
 8014bb6:	eeb0 8a40 	vmov.f32	s16, s0
 8014bba:	693b      	ldr	r3, [r7, #16]
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	f7ff ff6e 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 8014bc2:	eef0 7a40 	vmov.f32	s15, s0
 8014bc6:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014bca:	697b      	ldr	r3, [r7, #20]
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f7ff ff66 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 8014bd2:	eef0 8a40 	vmov.f32	s17, s0
 8014bd6:	693b      	ldr	r3, [r7, #16]
 8014bd8:	4618      	mov	r0, r3
 8014bda:	f7ff ff51 	bl	8014a80 <_ZNK8touchgfx9Quadruple4getYEv>
 8014bde:	eef0 7a40 	vmov.f32	s15, s0
 8014be2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014be6:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014bea:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        float Y = getZ() * operand.getX() - getX() * operand.getZ();
 8014bee:	697b      	ldr	r3, [r7, #20]
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f7ff ff54 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 8014bf6:	eeb0 8a40 	vmov.f32	s16, s0
 8014bfa:	693b      	ldr	r3, [r7, #16]
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f7ff ff30 	bl	8014a62 <_ZNK8touchgfx9Quadruple4getXEv>
 8014c02:	eef0 7a40 	vmov.f32	s15, s0
 8014c06:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014c0a:	697b      	ldr	r3, [r7, #20]
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	f7ff ff28 	bl	8014a62 <_ZNK8touchgfx9Quadruple4getXEv>
 8014c12:	eef0 8a40 	vmov.f32	s17, s0
 8014c16:	693b      	ldr	r3, [r7, #16]
 8014c18:	4618      	mov	r0, r3
 8014c1a:	f7ff ff40 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 8014c1e:	eef0 7a40 	vmov.f32	s15, s0
 8014c22:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014c26:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014c2a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        float Z = getX() * operand.getY() - getY() * operand.getX();
 8014c2e:	697b      	ldr	r3, [r7, #20]
 8014c30:	4618      	mov	r0, r3
 8014c32:	f7ff ff16 	bl	8014a62 <_ZNK8touchgfx9Quadruple4getXEv>
 8014c36:	eeb0 8a40 	vmov.f32	s16, s0
 8014c3a:	693b      	ldr	r3, [r7, #16]
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f7ff ff1f 	bl	8014a80 <_ZNK8touchgfx9Quadruple4getYEv>
 8014c42:	eef0 7a40 	vmov.f32	s15, s0
 8014c46:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014c4a:	697b      	ldr	r3, [r7, #20]
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	f7ff ff17 	bl	8014a80 <_ZNK8touchgfx9Quadruple4getYEv>
 8014c52:	eef0 8a40 	vmov.f32	s17, s0
 8014c56:	693b      	ldr	r3, [r7, #16]
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f7ff ff02 	bl	8014a62 <_ZNK8touchgfx9Quadruple4getXEv>
 8014c5e:	eef0 7a40 	vmov.f32	s15, s0
 8014c62:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014c66:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014c6a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        return Vector4(X, Y, Z);
 8014c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014c72:	ed97 1a0f 	vldr	s2, [r7, #60]	; 0x3c
 8014c76:	edd7 0a10 	vldr	s1, [r7, #64]	; 0x40
 8014c7a:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8014c7e:	4618      	mov	r0, r3
 8014c80:	f7ff ff70 	bl	8014b64 <_ZN8touchgfx7Vector4C1Efff>
 8014c84:	f107 041c 	add.w	r4, r7, #28
 8014c88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014c8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014c8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014c92:	69f8      	ldr	r0, [r7, #28]
 8014c94:	6a39      	ldr	r1, [r7, #32]
 8014c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c9a:	ee06 0a10 	vmov	s12, r0
 8014c9e:	ee06 1a90 	vmov	s13, r1
 8014ca2:	ee07 2a10 	vmov	s14, r2
 8014ca6:	ee07 3a90 	vmov	s15, r3
    }
 8014caa:	eeb0 0a46 	vmov.f32	s0, s12
 8014cae:	eef0 0a66 	vmov.f32	s1, s13
 8014cb2:	eeb0 1a47 	vmov.f32	s2, s14
 8014cb6:	eef0 1a67 	vmov.f32	s3, s15
 8014cba:	374c      	adds	r7, #76	; 0x4c
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	ecbd 8b02 	vpop	{d8}
 8014cc2:	bd90      	pop	{r4, r7, pc}

08014cc4 <_ZN8touchgfx13TextureMapperC1Ev>:
#include <touchgfx/TextureMapTypes.hpp>
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
TextureMapper::TextureMapper() :
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b082      	sub	sp, #8
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
    imageY2(0.0f),
    imageZ2(1.0f),
    imageX3(0.0f),
    imageY3(0.0f),
    imageZ3(1.0f),
    subDivisionSize(12)
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f7fe f8ca 	bl	8012e68 <_ZN8touchgfx6WidgetC1Ev>
 8014cd4:	4a3d      	ldr	r2, [pc, #244]	; (8014dcc <_ZN8touchgfx13TextureMapperC1Ev+0x108>)
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	601a      	str	r2, [r3, #0]
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	2200      	movs	r2, #0
 8014cde:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	3328      	adds	r3, #40	; 0x28
 8014ce6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014cea:	4618      	mov	r0, r3
 8014cec:	f7fd f961 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	22ff      	movs	r2, #255	; 0xff
 8014cf4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f04f 0200 	mov.w	r2, #0
 8014cfe:	62da      	str	r2, [r3, #44]	; 0x2c
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	f04f 0200 	mov.w	r2, #0
 8014d06:	631a      	str	r2, [r3, #48]	; 0x30
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f04f 0200 	mov.w	r2, #0
 8014d0e:	635a      	str	r2, [r3, #52]	; 0x34
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	f04f 0200 	mov.w	r2, #0
 8014d16:	639a      	str	r2, [r3, #56]	; 0x38
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	f04f 0200 	mov.w	r2, #0
 8014d1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8014d26:	641a      	str	r2, [r3, #64]	; 0x40
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	f04f 0200 	mov.w	r2, #0
 8014d2e:	645a      	str	r2, [r3, #68]	; 0x44
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	f04f 0200 	mov.w	r2, #0
 8014d36:	649a      	str	r2, [r3, #72]	; 0x48
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	4a25      	ldr	r2, [pc, #148]	; (8014dd0 <_ZN8touchgfx13TextureMapperC1Ev+0x10c>)
 8014d3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	f04f 0200 	mov.w	r2, #0
 8014d44:	651a      	str	r2, [r3, #80]	; 0x50
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	f04f 0200 	mov.w	r2, #0
 8014d4c:	655a      	str	r2, [r3, #84]	; 0x54
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	4a1f      	ldr	r2, [pc, #124]	; (8014dd0 <_ZN8touchgfx13TextureMapperC1Ev+0x10c>)
 8014d52:	659a      	str	r2, [r3, #88]	; 0x58
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	f04f 0200 	mov.w	r2, #0
 8014d5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	f04f 0200 	mov.w	r2, #0
 8014d62:	661a      	str	r2, [r3, #96]	; 0x60
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8014d6a:	665a      	str	r2, [r3, #100]	; 0x64
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	f04f 0200 	mov.w	r2, #0
 8014d72:	669a      	str	r2, [r3, #104]	; 0x68
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	f04f 0200 	mov.w	r2, #0
 8014d7a:	66da      	str	r2, [r3, #108]	; 0x6c
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8014d82:	671a      	str	r2, [r3, #112]	; 0x70
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f04f 0200 	mov.w	r2, #0
 8014d8a:	675a      	str	r2, [r3, #116]	; 0x74
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	f04f 0200 	mov.w	r2, #0
 8014d92:	679a      	str	r2, [r3, #120]	; 0x78
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8014d9a:	67da      	str	r2, [r3, #124]	; 0x7c
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f04f 0200 	mov.w	r2, #0
 8014da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	f04f 0200 	mov.w	r2, #0
 8014dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8014db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	220c      	movs	r2, #12
 8014dbe:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
{
}
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	3708      	adds	r7, #8
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}
 8014dcc:	0802d16c 	.word	0x0802d16c
 8014dd0:	447a0000 	.word	0x447a0000

08014dd4 <_ZN8touchgfx13TextureMapperD1Ev>:

TextureMapper::~TextureMapper()
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b082      	sub	sp, #8
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
 8014ddc:	4a05      	ldr	r2, [pc, #20]	; (8014df4 <_ZN8touchgfx13TextureMapperD1Ev+0x20>)
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	601a      	str	r2, [r3, #0]
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	4618      	mov	r0, r3
 8014de6:	f7fd fa39 	bl	801225c <_ZN8touchgfx6WidgetD1Ev>
{
}
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	4618      	mov	r0, r3
 8014dee:	3708      	adds	r7, #8
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}
 8014df4:	0802d16c 	.word	0x0802d16c

08014df8 <_ZN8touchgfx13TextureMapperD0Ev>:
TextureMapper::~TextureMapper()
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b082      	sub	sp, #8
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	6078      	str	r0, [r7, #4]
}
 8014e00:	6878      	ldr	r0, [r7, #4]
 8014e02:	f7ff ffe7 	bl	8014dd4 <_ZN8touchgfx13TextureMapperD1Ev>
 8014e06:	2190      	movs	r1, #144	; 0x90
 8014e08:	6878      	ldr	r0, [r7, #4]
 8014e0a:	f015 fb8a 	bl	802a522 <_ZdlPvj>
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	4618      	mov	r0, r3
 8014e12:	3708      	adds	r7, #8
 8014e14:	46bd      	mov	sp, r7
 8014e16:	bd80      	pop	{r7, pc}

08014e18 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:

void TextureMapper::setBitmap(const Bitmap& bmp)
{
 8014e18:	b5b0      	push	{r4, r5, r7, lr}
 8014e1a:	b082      	sub	sp, #8
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
 8014e20:	6039      	str	r1, [r7, #0]
    bitmap = bmp;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	683a      	ldr	r2, [r7, #0]
 8014e26:	8812      	ldrh	r2, [r2, #0]
 8014e28:	851a      	strh	r2, [r3, #40]	; 0x28
    setWidth(bitmap.getWidth());
 8014e2a:	687d      	ldr	r5, [r7, #4]
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	3338      	adds	r3, #56	; 0x38
 8014e32:	681c      	ldr	r4, [r3, #0]
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	3328      	adds	r3, #40	; 0x28
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f011 fe31 	bl	8026aa0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014e3e:	4603      	mov	r3, r0
 8014e40:	b21b      	sxth	r3, r3
 8014e42:	4619      	mov	r1, r3
 8014e44:	4628      	mov	r0, r5
 8014e46:	47a0      	blx	r4
    setHeight(bitmap.getHeight());
 8014e48:	687d      	ldr	r5, [r7, #4]
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	333c      	adds	r3, #60	; 0x3c
 8014e50:	681c      	ldr	r4, [r3, #0]
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	3328      	adds	r3, #40	; 0x28
 8014e56:	4618      	mov	r0, r3
 8014e58:	f011 fe5c 	bl	8026b14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	b21b      	sxth	r3, r3
 8014e60:	4619      	mov	r1, r3
 8014e62:	4628      	mov	r0, r5
 8014e64:	47a0      	blx	r4
    applyTransformation();
 8014e66:	6878      	ldr	r0, [r7, #4]
 8014e68:	f000 f804 	bl	8014e74 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
}
 8014e6c:	bf00      	nop
 8014e6e:	3708      	adds	r7, #8
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bdb0      	pop	{r4, r5, r7, pc}

08014e74 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:

void TextureMapper::applyTransformation()
{
 8014e74:	b5b0      	push	{r4, r5, r7, lr}
 8014e76:	ed2d 8b02 	vpush	{d8}
 8014e7a:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 8014e7e:	af00      	add	r7, sp, #0
 8014e80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014e84:	6018      	str	r0, [r3, #0]
    const uint8_t n = 4;
 8014e86:	2304      	movs	r3, #4
 8014e88:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb

    int imgWidth = Bitmap(bitmap).getWidth();
 8014e8c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014e90:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8014e94:	6812      	ldr	r2, [r2, #0]
 8014e96:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8014e98:	801a      	strh	r2, [r3, #0]
 8014e9a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f011 fdfe 	bl	8026aa0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
    int imgHeight = Bitmap(bitmap).getHeight();
 8014eaa:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8014eae:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8014eb2:	6812      	ldr	r2, [r2, #0]
 8014eb4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8014eb6:	801a      	strh	r2, [r3, #0]
 8014eb8:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f011 fe29 	bl	8026b14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
    {
        touchgfx::Point4(xBitmapPosition,          yBitmapPosition,           cameraDistance),
        touchgfx::Point4(xBitmapPosition + imgWidth, yBitmapPosition,           cameraDistance),
        touchgfx::Point4(xBitmapPosition + imgWidth, yBitmapPosition + imgHeight, cameraDistance),
        touchgfx::Point4(xBitmapPosition,          yBitmapPosition + imgHeight, cameraDistance),
    };
 8014ec8:	f507 7426 	add.w	r4, r7, #664	; 0x298
 8014ecc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8014ed6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8014ee0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8014eea:	eeb0 1a66 	vmov.f32	s2, s13
 8014eee:	eef0 0a47 	vmov.f32	s1, s14
 8014ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8014ef6:	4620      	mov	r0, r4
 8014ef8:	f7ff fe18 	bl	8014b2c <_ZN8touchgfx6Point4C1Efff>
 8014efc:	3410      	adds	r4, #16
        touchgfx::Point4(xBitmapPosition + imgWidth, yBitmapPosition,           cameraDistance),
 8014efe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
    };
 8014f08:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8014f0c:	ee07 3a90 	vmov	s15, r3
 8014f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8014f22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8014f2c:	eeb0 1a66 	vmov.f32	s2, s13
 8014f30:	eef0 0a47 	vmov.f32	s1, s14
 8014f34:	eeb0 0a67 	vmov.f32	s0, s15
 8014f38:	4620      	mov	r0, r4
 8014f3a:	f7ff fdf7 	bl	8014b2c <_ZN8touchgfx6Point4C1Efff>
 8014f3e:	3410      	adds	r4, #16
        touchgfx::Point4(xBitmapPosition + imgWidth, yBitmapPosition + imgHeight, cameraDistance),
 8014f40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
    };
 8014f4a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8014f4e:	ee07 3a90 	vmov	s15, r3
 8014f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f56:	ee77 6a27 	vadd.f32	s13, s14, s15
        touchgfx::Point4(xBitmapPosition + imgWidth, yBitmapPosition + imgHeight, cameraDistance),
 8014f5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
    };
 8014f64:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8014f68:	ee07 3a90 	vmov	s15, r3
 8014f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8014f7e:	eeb0 1a47 	vmov.f32	s2, s14
 8014f82:	eef0 0a67 	vmov.f32	s1, s15
 8014f86:	eeb0 0a66 	vmov.f32	s0, s13
 8014f8a:	4620      	mov	r0, r4
 8014f8c:	f7ff fdce 	bl	8014b2c <_ZN8touchgfx6Point4C1Efff>
 8014f90:	f104 0210 	add.w	r2, r4, #16
 8014f94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
        touchgfx::Point4(xBitmapPosition,          yBitmapPosition + imgHeight, cameraDistance),
 8014f9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
    };
 8014fa8:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8014fac:	ee07 3a90 	vmov	s15, r3
 8014fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014fb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8014fc2:	eeb0 1a47 	vmov.f32	s2, s14
 8014fc6:	eef0 0a67 	vmov.f32	s1, s15
 8014fca:	eeb0 0a66 	vmov.f32	s0, s13
 8014fce:	4610      	mov	r0, r2
 8014fd0:	f7ff fdac 	bl	8014b2c <_ZN8touchgfx6Point4C1Efff>
    touchgfx::Point4 transformed[n];
 8014fd4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8014fd8:	2403      	movs	r4, #3
 8014fda:	461d      	mov	r5, r3
 8014fdc:	2c00      	cmp	r4, #0
 8014fde:	db05      	blt.n	8014fec <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x178>
 8014fe0:	4628      	mov	r0, r5
 8014fe2:	f7ff fd8b 	bl	8014afc <_ZN8touchgfx6Point4C1Ev>
 8014fe6:	3510      	adds	r5, #16
 8014fe8:	3c01      	subs	r4, #1
 8014fea:	e7f7      	b.n	8014fdc <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x168>

    Vector4 center(xOrigo, yOrigo, zOrigo);
 8014fec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8014ff6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8015000:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 801500a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801500e:	eeb0 1a66 	vmov.f32	s2, s13
 8015012:	eef0 0a47 	vmov.f32	s1, s14
 8015016:	eeb0 0a67 	vmov.f32	s0, s15
 801501a:	4618      	mov	r0, r3
 801501c:	f7ff fda2 	bl	8014b64 <_ZN8touchgfx7Vector4C1Efff>

    Matrix4x4 translateToCenter;
 8015020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015024:	4618      	mov	r0, r3
 8015026:	f011 f93b 	bl	80262a0 <_ZN8touchgfx9Matrix4x4C1Ev>
    translateToCenter.concatenateXTranslation(-center.getX()).concatenateYTranslation(-center.getY()).concatenateZTranslation(-center.getZ());
 801502a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801502e:	4618      	mov	r0, r3
 8015030:	f7ff fd17 	bl	8014a62 <_ZNK8touchgfx9Quadruple4getXEv>
 8015034:	eef0 7a40 	vmov.f32	s15, s0
 8015038:	eef1 7a67 	vneg.f32	s15, s15
 801503c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015040:	eeb0 0a67 	vmov.f32	s0, s15
 8015044:	4618      	mov	r0, r3
 8015046:	f011 f9fb 	bl	8026440 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801504a:	4604      	mov	r4, r0
 801504c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8015050:	4618      	mov	r0, r3
 8015052:	f7ff fd15 	bl	8014a80 <_ZNK8touchgfx9Quadruple4getYEv>
 8015056:	eef0 7a40 	vmov.f32	s15, s0
 801505a:	eef1 7a67 	vneg.f32	s15, s15
 801505e:	eeb0 0a67 	vmov.f32	s0, s15
 8015062:	4620      	mov	r0, r4
 8015064:	f011 f9fa 	bl	802645c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8015068:	4604      	mov	r4, r0
 801506a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801506e:	4618      	mov	r0, r3
 8015070:	f7ff fd15 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 8015074:	eef0 7a40 	vmov.f32	s15, s0
 8015078:	eef1 7a67 	vneg.f32	s15, s15
 801507c:	eeb0 0a67 	vmov.f32	s0, s15
 8015080:	4620      	mov	r0, r4
 8015082:	f011 f9fa 	bl	802647a <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>

    Matrix4x4 rotateAroundCenter;
 8015086:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801508a:	4618      	mov	r0, r3
 801508c:	f011 f908 	bl	80262a0 <_ZN8touchgfx9Matrix4x4C1Ev>
    rotateAroundCenter.concatenateXRotation(xAngle).concatenateYRotation(yAngle).concatenateZRotation(zAngle);
 8015090:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801509a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801509e:	eeb0 0a67 	vmov.f32	s0, s15
 80150a2:	4618      	mov	r0, r3
 80150a4:	f011 f950 	bl	8026348 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 80150a8:	4602      	mov	r2, r0
 80150aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80150b4:	eeb0 0a67 	vmov.f32	s0, s15
 80150b8:	4610      	mov	r0, r2
 80150ba:	f011 f96f 	bl	802639c <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 80150be:	4602      	mov	r2, r0
 80150c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80150ca:	eeb0 0a67 	vmov.f32	s0, s15
 80150ce:	4610      	mov	r0, r2
 80150d0:	f011 f98d 	bl	80263ee <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>

    Matrix4x4 scaleAroundCenter;
 80150d4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80150d8:	4618      	mov	r0, r3
 80150da:	f011 f8e1 	bl	80262a0 <_ZN8touchgfx9Matrix4x4C1Ev>
    scaleAroundCenter.concatenateXScale(scale).concatenateYScale(scale).concatenateZScale(scale);
 80150de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80150e8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80150ec:	eeb0 0a67 	vmov.f32	s0, s15
 80150f0:	4618      	mov	r0, r3
 80150f2:	f011 f9d1 	bl	8026498 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 80150f6:	4602      	mov	r2, r0
 80150f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8015102:	eeb0 0a67 	vmov.f32	s0, s15
 8015106:	4610      	mov	r0, r2
 8015108:	f011 f9d2 	bl	80264b0 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 801510c:	4602      	mov	r2, r0
 801510e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8015118:	eeb0 0a67 	vmov.f32	s0, s15
 801511c:	4610      	mov	r0, r2
 801511e:	f011 f9d4 	bl	80264ca <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>

    Matrix4x4 translateFromCenter;
 8015122:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015126:	4618      	mov	r0, r3
 8015128:	f011 f8ba 	bl	80262a0 <_ZN8touchgfx9Matrix4x4C1Ev>
    translateFromCenter.concatenateXTranslation(center.getX()).concatenateYTranslation(center.getY()).concatenateZTranslation(center.getZ());
 801512c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8015130:	4618      	mov	r0, r3
 8015132:	f7ff fc96 	bl	8014a62 <_ZNK8touchgfx9Quadruple4getXEv>
 8015136:	eef0 7a40 	vmov.f32	s15, s0
 801513a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801513e:	eeb0 0a67 	vmov.f32	s0, s15
 8015142:	4618      	mov	r0, r3
 8015144:	f011 f97c 	bl	8026440 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8015148:	4604      	mov	r4, r0
 801514a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801514e:	4618      	mov	r0, r3
 8015150:	f7ff fc96 	bl	8014a80 <_ZNK8touchgfx9Quadruple4getYEv>
 8015154:	eef0 7a40 	vmov.f32	s15, s0
 8015158:	eeb0 0a67 	vmov.f32	s0, s15
 801515c:	4620      	mov	r0, r4
 801515e:	f011 f97d 	bl	802645c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8015162:	4604      	mov	r4, r0
 8015164:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8015168:	4618      	mov	r0, r3
 801516a:	f7ff fc98 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 801516e:	eef0 7a40 	vmov.f32	s15, s0
 8015172:	eeb0 0a67 	vmov.f32	s0, s15
 8015176:	4620      	mov	r0, r4
 8015178:	f011 f97f 	bl	802647a <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>

    Matrix4x4 transform = translateFromCenter * scaleAroundCenter * rotateAroundCenter * translateToCenter;
 801517c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8015180:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8015184:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8015188:	4618      	mov	r0, r3
 801518a:	f011 f8a3 	bl	80262d4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801518e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8015192:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8015196:	f507 7148 	add.w	r1, r7, #800	; 0x320
 801519a:	4618      	mov	r0, r3
 801519c:	f011 f89a 	bl	80262d4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80151a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80151a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80151a8:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 80151ac:	4618      	mov	r0, r3
 80151ae:	f011 f891 	bl	80262d4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>

    Matrix4x4 translateToCamera;
 80151b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80151b6:	4618      	mov	r0, r3
 80151b8:	f011 f872 	bl	80262a0 <_ZN8touchgfx9Matrix4x4C1Ev>
    translateToCamera.concatenateXTranslation(-xCamera);
 80151bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80151c6:	eef1 7a67 	vneg.f32	s15, s15
 80151ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80151ce:	eeb0 0a67 	vmov.f32	s0, s15
 80151d2:	4618      	mov	r0, r3
 80151d4:	f011 f934 	bl	8026440 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
    translateToCamera.concatenateYTranslation(-yCamera);
 80151d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80151e2:	eef1 7a67 	vneg.f32	s15, s15
 80151e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80151ea:	eeb0 0a67 	vmov.f32	s0, s15
 80151ee:	4618      	mov	r0, r3
 80151f0:	f011 f934 	bl	802645c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>

    Matrix4x4 perspectiveProject;
 80151f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80151f8:	4618      	mov	r0, r3
 80151fa:	f011 f851 	bl	80262a0 <_ZN8touchgfx9Matrix4x4C1Ev>
    perspectiveProject.setViewDistance(cameraDistance);
 80151fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8015208:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801520c:	eeb0 0a67 	vmov.f32	s0, s15
 8015210:	4618      	mov	r0, r3
 8015212:	f011 f889 	bl	8026328 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>

    Matrix4x4 translateFromCamera;
 8015216:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801521a:	4618      	mov	r0, r3
 801521c:	f011 f840 	bl	80262a0 <_ZN8touchgfx9Matrix4x4C1Ev>
    translateFromCamera.concatenateXTranslation(xCamera).concatenateYTranslation(yCamera);
 8015220:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 801522a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801522e:	eeb0 0a67 	vmov.f32	s0, s15
 8015232:	4618      	mov	r0, r3
 8015234:	f011 f904 	bl	8026440 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8015238:	4602      	mov	r2, r0
 801523a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8015244:	eeb0 0a67 	vmov.f32	s0, s15
 8015248:	4610      	mov	r0, r2
 801524a:	f011 f907 	bl	802645c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>

    transform = translateFromCamera * perspectiveProject * translateToCamera * transform;
 801524e:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8015252:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8015256:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801525a:	4618      	mov	r0, r3
 801525c:	f011 f83a 	bl	80262d4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8015260:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8015264:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8015268:	f507 7168 	add.w	r1, r7, #928	; 0x3a0
 801526c:	4618      	mov	r0, r3
 801526e:	f011 f831 	bl	80262d4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8015272:	f507 7484 	add.w	r4, r7, #264	; 0x108
 8015276:	463b      	mov	r3, r7
 8015278:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801527c:	f507 7158 	add.w	r1, r7, #864	; 0x360
 8015280:	4618      	mov	r0, r3
 8015282:	f011 f827 	bl	80262d4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8015286:	463b      	mov	r3, r7
 8015288:	461d      	mov	r5, r3
 801528a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801528c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801528e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015296:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801529a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    for (int i = 0; i < n; i++)
 801529e:	2300      	movs	r3, #0
 80152a0:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 80152a4:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80152a8:	2b03      	cmp	r3, #3
 80152aa:	dc26      	bgt.n	80152fa <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x486>
    {
        transformed[i] = transform * vertices[i];
 80152ac:	f507 7226 	add.w	r2, r7, #664	; 0x298
 80152b0:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80152b4:	011b      	lsls	r3, r3, #4
 80152b6:	18d1      	adds	r1, r2, r3
 80152b8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80152bc:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80152c0:	011b      	lsls	r3, r3, #4
 80152c2:	18d4      	adds	r4, r2, r3
 80152c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80152c8:	4618      	mov	r0, r3
 80152ca:	f010 ffb9 	bl	8026240 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 80152ce:	eeb0 6a40 	vmov.f32	s12, s0
 80152d2:	eef0 6a60 	vmov.f32	s13, s1
 80152d6:	eeb0 7a41 	vmov.f32	s14, s2
 80152da:	eef0 7a61 	vmov.f32	s15, s3
 80152de:	ed84 6a00 	vstr	s12, [r4]
 80152e2:	edc4 6a01 	vstr	s13, [r4, #4]
 80152e6:	ed84 7a02 	vstr	s14, [r4, #8]
 80152ea:	edc4 7a03 	vstr	s15, [r4, #12]
    for (int i = 0; i < n; i++)
 80152ee:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80152f2:	3301      	adds	r3, #1
 80152f4:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 80152f8:	e7d4      	b.n	80152a4 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x430>
    }

    imageX0 = ((float)transformed[0].getX() * cameraDistance / (float)transformed[0].getZ());
 80152fa:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80152fe:	4618      	mov	r0, r3
 8015300:	f7ff fbaf 	bl	8014a62 <_ZNK8touchgfx9Quadruple4getXEv>
 8015304:	eeb0 7a40 	vmov.f32	s14, s0
 8015308:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8015312:	ee27 8a27 	vmul.f32	s16, s14, s15
 8015316:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801531a:	4618      	mov	r0, r3
 801531c:	f7ff fbbf 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 8015320:	eeb0 7a40 	vmov.f32	s14, s0
 8015324:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8015328:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    imageY0 = ((float)transformed[0].getY() * cameraDistance / (float)transformed[0].getZ());
 8015332:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015336:	4618      	mov	r0, r3
 8015338:	f7ff fba2 	bl	8014a80 <_ZNK8touchgfx9Quadruple4getYEv>
 801533c:	eeb0 7a40 	vmov.f32	s14, s0
 8015340:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 801534a:	ee27 8a27 	vmul.f32	s16, s14, s15
 801534e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015352:	4618      	mov	r0, r3
 8015354:	f7ff fba3 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 8015358:	eeb0 7a40 	vmov.f32	s14, s0
 801535c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8015360:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    imageZ0 = ((float)transformed[0].getZ());
 801536a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801536e:	4618      	mov	r0, r3
 8015370:	f7ff fb95 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 8015374:	eef0 7a40 	vmov.f32	s15, s0
 8015378:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

    imageX1 = ((float)transformed[1].getX() * cameraDistance / (float)transformed[1].getZ());
 8015382:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015386:	3310      	adds	r3, #16
 8015388:	4618      	mov	r0, r3
 801538a:	f7ff fb6a 	bl	8014a62 <_ZNK8touchgfx9Quadruple4getXEv>
 801538e:	eeb0 7a40 	vmov.f32	s14, s0
 8015392:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 801539c:	ee27 8a27 	vmul.f32	s16, s14, s15
 80153a0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80153a4:	3310      	adds	r3, #16
 80153a6:	4618      	mov	r0, r3
 80153a8:	f7ff fb79 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 80153ac:	eeb0 7a40 	vmov.f32	s14, s0
 80153b0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80153b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
    imageY1 = ((float)transformed[1].getY() * cameraDistance / (float)transformed[1].getZ());
 80153be:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80153c2:	3310      	adds	r3, #16
 80153c4:	4618      	mov	r0, r3
 80153c6:	f7ff fb5b 	bl	8014a80 <_ZNK8touchgfx9Quadruple4getYEv>
 80153ca:	eeb0 7a40 	vmov.f32	s14, s0
 80153ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80153d8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80153dc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80153e0:	3310      	adds	r3, #16
 80153e2:	4618      	mov	r0, r3
 80153e4:	f7ff fb5b 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 80153e8:	eeb0 7a40 	vmov.f32	s14, s0
 80153ec:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80153f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
    imageZ1 = ((float)transformed[1].getZ());
 80153fa:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80153fe:	3310      	adds	r3, #16
 8015400:	4618      	mov	r0, r3
 8015402:	f7ff fb4c 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 8015406:	eef0 7a40 	vmov.f32	s15, s0
 801540a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

    imageX2 = ((float)transformed[2].getX() * cameraDistance / (float)transformed[2].getZ());
 8015414:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015418:	3320      	adds	r3, #32
 801541a:	4618      	mov	r0, r3
 801541c:	f7ff fb21 	bl	8014a62 <_ZNK8touchgfx9Quadruple4getXEv>
 8015420:	eeb0 7a40 	vmov.f32	s14, s0
 8015424:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 801542e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8015432:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015436:	3320      	adds	r3, #32
 8015438:	4618      	mov	r0, r3
 801543a:	f7ff fb30 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 801543e:	eeb0 7a40 	vmov.f32	s14, s0
 8015442:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8015446:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    imageY2 = ((float)transformed[2].getY() * cameraDistance / (float)transformed[2].getZ());
 8015450:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015454:	3320      	adds	r3, #32
 8015456:	4618      	mov	r0, r3
 8015458:	f7ff fb12 	bl	8014a80 <_ZNK8touchgfx9Quadruple4getYEv>
 801545c:	eeb0 7a40 	vmov.f32	s14, s0
 8015460:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 801546a:	ee27 8a27 	vmul.f32	s16, s14, s15
 801546e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015472:	3320      	adds	r3, #32
 8015474:	4618      	mov	r0, r3
 8015476:	f7ff fb12 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 801547a:	eeb0 7a40 	vmov.f32	s14, s0
 801547e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8015482:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
    imageZ2 = ((float)transformed[2].getZ());
 801548c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015490:	3320      	adds	r3, #32
 8015492:	4618      	mov	r0, r3
 8015494:	f7ff fb03 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 8015498:	eef0 7a40 	vmov.f32	s15, s0
 801549c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

    imageX3 = ((float)transformed[3].getX() * cameraDistance / (float)transformed[3].getZ());
 80154a6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80154aa:	3330      	adds	r3, #48	; 0x30
 80154ac:	4618      	mov	r0, r3
 80154ae:	f7ff fad8 	bl	8014a62 <_ZNK8touchgfx9Quadruple4getXEv>
 80154b2:	eeb0 7a40 	vmov.f32	s14, s0
 80154b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80154c0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80154c4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80154c8:	3330      	adds	r3, #48	; 0x30
 80154ca:	4618      	mov	r0, r3
 80154cc:	f7ff fae7 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 80154d0:	eeb0 7a40 	vmov.f32	s14, s0
 80154d4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80154d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    imageY3 = ((float)transformed[3].getY() * cameraDistance / (float)transformed[3].getZ());
 80154e2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80154e6:	3330      	adds	r3, #48	; 0x30
 80154e8:	4618      	mov	r0, r3
 80154ea:	f7ff fac9 	bl	8014a80 <_ZNK8touchgfx9Quadruple4getYEv>
 80154ee:	eeb0 7a40 	vmov.f32	s14, s0
 80154f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80154fc:	ee27 8a27 	vmul.f32	s16, s14, s15
 8015500:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015504:	3330      	adds	r3, #48	; 0x30
 8015506:	4618      	mov	r0, r3
 8015508:	f7ff fac9 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 801550c:	eeb0 7a40 	vmov.f32	s14, s0
 8015510:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8015514:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    imageZ3 = ((float)transformed[3].getZ());
 801551e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015522:	3330      	adds	r3, #48	; 0x30
 8015524:	4618      	mov	r0, r3
 8015526:	f7ff faba 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 801552a:	eef0 7a40 	vmov.f32	s15, s0
 801552e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
}
 8015538:	bf00      	nop
 801553a:	f507 777c 	add.w	r7, r7, #1008	; 0x3f0
 801553e:	46bd      	mov	sp, r7
 8015540:	ecbd 8b02 	vpop	{d8}
 8015544:	bdb0      	pop	{r4, r5, r7, pc}

08015546 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:

Rect TextureMapper::getBoundingRect() const
{
 8015546:	b580      	push	{r7, lr}
 8015548:	b08c      	sub	sp, #48	; 0x30
 801554a:	af02      	add	r7, sp, #8
 801554c:	6078      	str	r0, [r7, #4]
 801554e:	6039      	str	r1, [r7, #0]
    // MIN and MAX are macros so do not insert them into each other
    float minXf = MIN(imageX0, imageX1);
 8015550:	683b      	ldr	r3, [r7, #0]
 8015552:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8015556:	683b      	ldr	r3, [r7, #0]
 8015558:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 801555c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015564:	d502      	bpl.n	801556c <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x26>
 8015566:	683b      	ldr	r3, [r7, #0]
 8015568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801556a:	e001      	b.n	8015570 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x2a>
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015570:	623b      	str	r3, [r7, #32]
    minXf = MIN(minXf, imageX2);
 8015572:	683b      	ldr	r3, [r7, #0]
 8015574:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8015578:	edd7 7a08 	vldr	s15, [r7, #32]
 801557c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015584:	dd01      	ble.n	801558a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x44>
 8015586:	6a3b      	ldr	r3, [r7, #32]
 8015588:	e001      	b.n	801558e <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x48>
 801558a:	683b      	ldr	r3, [r7, #0]
 801558c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801558e:	623b      	str	r3, [r7, #32]
    minXf = floorf(MIN(minXf, imageX3));
 8015590:	683b      	ldr	r3, [r7, #0]
 8015592:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8015596:	edd7 7a08 	vldr	s15, [r7, #32]
 801559a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801559e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155a2:	dd02      	ble.n	80155aa <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x64>
 80155a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80155a8:	e002      	b.n	80155b0 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x6a>
 80155aa:	683b      	ldr	r3, [r7, #0]
 80155ac:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80155b0:	eeb0 0a67 	vmov.f32	s0, s15
 80155b4:	f015 f84c 	bl	802a650 <floorf>
 80155b8:	eef0 7a40 	vmov.f32	s15, s0
 80155bc:	edc7 7a08 	vstr	s15, [r7, #32]
    int16_t minX = (int16_t)(MAX(0, minXf));
 80155c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80155c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80155c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155cc:	d501      	bpl.n	80155d2 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x8c>
 80155ce:	2300      	movs	r3, #0
 80155d0:	e006      	b.n	80155e0 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x9a>
 80155d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80155d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80155da:	ee17 3a90 	vmov	r3, s15
 80155de:	b21b      	sxth	r3, r3
 80155e0:	84fb      	strh	r3, [r7, #38]	; 0x26

    float maxXf = MAX(imageX0, imageX1);
 80155e2:	683b      	ldr	r3, [r7, #0]
 80155e4:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80155ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80155f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155f6:	dd02      	ble.n	80155fe <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0xb8>
 80155f8:	683b      	ldr	r3, [r7, #0]
 80155fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80155fc:	e001      	b.n	8015602 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0xbc>
 80155fe:	683b      	ldr	r3, [r7, #0]
 8015600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015602:	61fb      	str	r3, [r7, #28]
    maxXf = MAX(maxXf, imageX2);
 8015604:	683b      	ldr	r3, [r7, #0]
 8015606:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 801560a:	edd7 7a07 	vldr	s15, [r7, #28]
 801560e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015616:	d501      	bpl.n	801561c <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0xd6>
 8015618:	69fb      	ldr	r3, [r7, #28]
 801561a:	e001      	b.n	8015620 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0xda>
 801561c:	683b      	ldr	r3, [r7, #0]
 801561e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015620:	61fb      	str	r3, [r7, #28]
    maxXf = ceilf(MAX(maxXf, imageX3));
 8015622:	683b      	ldr	r3, [r7, #0]
 8015624:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8015628:	edd7 7a07 	vldr	s15, [r7, #28]
 801562c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015634:	d502      	bpl.n	801563c <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0xf6>
 8015636:	edd7 7a07 	vldr	s15, [r7, #28]
 801563a:	e002      	b.n	8015642 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0xfc>
 801563c:	683b      	ldr	r3, [r7, #0]
 801563e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8015642:	eeb0 0a67 	vmov.f32	s0, s15
 8015646:	f014 ff83 	bl	802a550 <ceilf>
 801564a:	eef0 7a40 	vmov.f32	s15, s0
 801564e:	edc7 7a07 	vstr	s15, [r7, #28]
    int16_t maxX = getWidth();
 8015652:	683b      	ldr	r3, [r7, #0]
 8015654:	4618      	mov	r0, r3
 8015656:	f7fd fbd7 	bl	8012e08 <_ZNK8touchgfx8Drawable8getWidthEv>
 801565a:	4603      	mov	r3, r0
 801565c:	837b      	strh	r3, [r7, #26]
    maxX = (int16_t)(MIN(maxX, maxXf));
 801565e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015662:	ee07 3a90 	vmov	s15, r3
 8015666:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801566a:	edd7 7a07 	vldr	s15, [r7, #28]
 801566e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015676:	d50b      	bpl.n	8015690 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x14a>
 8015678:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801567c:	ee07 3a90 	vmov	s15, r3
 8015680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015688:	ee17 3a90 	vmov	r3, s15
 801568c:	b21b      	sxth	r3, r3
 801568e:	e006      	b.n	801569e <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x158>
 8015690:	edd7 7a07 	vldr	s15, [r7, #28]
 8015694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015698:	ee17 3a90 	vmov	r3, s15
 801569c:	b21b      	sxth	r3, r3
 801569e:	837b      	strh	r3, [r7, #26]

    float minYf = MIN(imageY0, imageY1);
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80156a6:	683b      	ldr	r3, [r7, #0]
 80156a8:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80156ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80156b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156b4:	d502      	bpl.n	80156bc <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x176>
 80156b6:	683b      	ldr	r3, [r7, #0]
 80156b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80156ba:	e001      	b.n	80156c0 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x17a>
 80156bc:	683b      	ldr	r3, [r7, #0]
 80156be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156c0:	617b      	str	r3, [r7, #20]
    minYf = MIN(minYf, imageY2);
 80156c2:	683b      	ldr	r3, [r7, #0]
 80156c4:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80156c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80156cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80156d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156d4:	dd01      	ble.n	80156da <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x194>
 80156d6:	697b      	ldr	r3, [r7, #20]
 80156d8:	e001      	b.n	80156de <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x198>
 80156da:	683b      	ldr	r3, [r7, #0]
 80156dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80156de:	617b      	str	r3, [r7, #20]
    minYf = floorf(MIN(minYf, imageY3));
 80156e0:	683b      	ldr	r3, [r7, #0]
 80156e2:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80156e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80156ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80156ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156f2:	dd02      	ble.n	80156fa <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x1b4>
 80156f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80156f8:	e002      	b.n	8015700 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x1ba>
 80156fa:	683b      	ldr	r3, [r7, #0]
 80156fc:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8015700:	eeb0 0a67 	vmov.f32	s0, s15
 8015704:	f014 ffa4 	bl	802a650 <floorf>
 8015708:	eef0 7a40 	vmov.f32	s15, s0
 801570c:	edc7 7a05 	vstr	s15, [r7, #20]
    int16_t minY = (int16_t)(MAX(0, minYf));
 8015710:	edd7 7a05 	vldr	s15, [r7, #20]
 8015714:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801571c:	d501      	bpl.n	8015722 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x1dc>
 801571e:	2300      	movs	r3, #0
 8015720:	e006      	b.n	8015730 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x1ea>
 8015722:	edd7 7a05 	vldr	s15, [r7, #20]
 8015726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801572a:	ee17 3a90 	vmov	r3, s15
 801572e:	b21b      	sxth	r3, r3
 8015730:	84bb      	strh	r3, [r7, #36]	; 0x24

    float maxYf = MAX(imageY0, imageY1);
 8015732:	683b      	ldr	r3, [r7, #0]
 8015734:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8015738:	683b      	ldr	r3, [r7, #0]
 801573a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 801573e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015746:	dd02      	ble.n	801574e <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x208>
 8015748:	683b      	ldr	r3, [r7, #0]
 801574a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801574c:	e001      	b.n	8015752 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x20c>
 801574e:	683b      	ldr	r3, [r7, #0]
 8015750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015752:	613b      	str	r3, [r7, #16]
    maxYf = MAX(maxYf, imageY2);
 8015754:	683b      	ldr	r3, [r7, #0]
 8015756:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 801575a:	edd7 7a04 	vldr	s15, [r7, #16]
 801575e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015766:	d501      	bpl.n	801576c <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x226>
 8015768:	693b      	ldr	r3, [r7, #16]
 801576a:	e001      	b.n	8015770 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x22a>
 801576c:	683b      	ldr	r3, [r7, #0]
 801576e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015770:	613b      	str	r3, [r7, #16]
    maxYf = ceilf(MAX(maxYf, imageY3));
 8015772:	683b      	ldr	r3, [r7, #0]
 8015774:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8015778:	edd7 7a04 	vldr	s15, [r7, #16]
 801577c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015784:	d502      	bpl.n	801578c <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x246>
 8015786:	edd7 7a04 	vldr	s15, [r7, #16]
 801578a:	e002      	b.n	8015792 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x24c>
 801578c:	683b      	ldr	r3, [r7, #0]
 801578e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8015792:	eeb0 0a67 	vmov.f32	s0, s15
 8015796:	f014 fedb 	bl	802a550 <ceilf>
 801579a:	eef0 7a40 	vmov.f32	s15, s0
 801579e:	edc7 7a04 	vstr	s15, [r7, #16]
    int16_t maxY = getHeight();
 80157a2:	683b      	ldr	r3, [r7, #0]
 80157a4:	4618      	mov	r0, r3
 80157a6:	f7fd fb3c 	bl	8012e22 <_ZNK8touchgfx8Drawable9getHeightEv>
 80157aa:	4603      	mov	r3, r0
 80157ac:	81fb      	strh	r3, [r7, #14]
    maxY = (int16_t)(MIN(maxY, maxYf));
 80157ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80157b2:	ee07 3a90 	vmov	s15, r3
 80157b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80157ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80157be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80157c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157c6:	d50b      	bpl.n	80157e0 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x29a>
 80157c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80157cc:	ee07 3a90 	vmov	s15, r3
 80157d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80157d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80157d8:	ee17 3a90 	vmov	r3, s15
 80157dc:	b21b      	sxth	r3, r3
 80157de:	e006      	b.n	80157ee <_ZNK8touchgfx13TextureMapper15getBoundingRectEv+0x2a8>
 80157e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80157e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80157e8:	ee17 3a90 	vmov	r3, s15
 80157ec:	b21b      	sxth	r3, r3
 80157ee:	81fb      	strh	r3, [r7, #14]

    return Rect(minX, minY, maxX - minX, maxY - minY);
 80157f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80157f4:	b29a      	uxth	r2, r3
 80157f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80157f8:	1ad3      	subs	r3, r2, r3
 80157fa:	b29b      	uxth	r3, r3
 80157fc:	b218      	sxth	r0, r3
 80157fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015802:	b29a      	uxth	r2, r3
 8015804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015806:	1ad3      	subs	r3, r2, r3
 8015808:	b29b      	uxth	r3, r3
 801580a:	b21b      	sxth	r3, r3
 801580c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8015810:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 8015814:	9300      	str	r3, [sp, #0]
 8015816:	4603      	mov	r3, r0
 8015818:	6878      	ldr	r0, [r7, #4]
 801581a:	f7fc fdff 	bl	801241c <_ZN8touchgfx4RectC1Essss>
}
 801581e:	6878      	ldr	r0, [r7, #4]
 8015820:	3728      	adds	r7, #40	; 0x28
 8015822:	46bd      	mov	sp, r7
 8015824:	bd80      	pop	{r7, pc}

08015826 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:

void TextureMapper::updateAngles(float newXAngle, float newYAngle, float newZAngle)
{
 8015826:	b580      	push	{r7, lr}
 8015828:	b088      	sub	sp, #32
 801582a:	af00      	add	r7, sp, #0
 801582c:	60f8      	str	r0, [r7, #12]
 801582e:	ed87 0a02 	vstr	s0, [r7, #8]
 8015832:	edc7 0a01 	vstr	s1, [r7, #4]
 8015836:	ed87 1a00 	vstr	s2, [r7]
    Rect rBefore = getBoundingRect();
 801583a:	f107 0318 	add.w	r3, r7, #24
 801583e:	68f9      	ldr	r1, [r7, #12]
 8015840:	4618      	mov	r0, r3
 8015842:	f7ff fe80 	bl	8015546 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>

    this->xAngle = newXAngle;
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	68ba      	ldr	r2, [r7, #8]
 801584a:	635a      	str	r2, [r3, #52]	; 0x34
    this->yAngle = newYAngle;
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	687a      	ldr	r2, [r7, #4]
 8015850:	639a      	str	r2, [r3, #56]	; 0x38
    this->zAngle = newZAngle;
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	683a      	ldr	r2, [r7, #0]
 8015856:	63da      	str	r2, [r3, #60]	; 0x3c

    applyTransformation();
 8015858:	68f8      	ldr	r0, [r7, #12]
 801585a:	f7ff fb0b 	bl	8014e74 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

    Rect rAfter = getBoundingRect();
 801585e:	f107 0310 	add.w	r3, r7, #16
 8015862:	68f9      	ldr	r1, [r7, #12]
 8015864:	4618      	mov	r0, r3
 8015866:	f7ff fe6e 	bl	8015546 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
    rAfter.expandToFit(rBefore);
 801586a:	f107 0218 	add.w	r2, r7, #24
 801586e:	f107 0310 	add.w	r3, r7, #16
 8015872:	4611      	mov	r1, r2
 8015874:	4618      	mov	r0, r3
 8015876:	f7fc ff0d 	bl	8012694 <_ZN8touchgfx4Rect11expandToFitERKS0_>
    invalidateRect(rAfter);
 801587a:	68fa      	ldr	r2, [r7, #12]
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	3310      	adds	r3, #16
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	f107 0110 	add.w	r1, r7, #16
 8015888:	4610      	mov	r0, r2
 801588a:	4798      	blx	r3
}
 801588c:	bf00      	nop
 801588e:	3720      	adds	r7, #32
 8015890:	46bd      	mov	sp, r7
 8015892:	bd80      	pop	{r7, pc}

08015894 <_ZN8touchgfx13TextureMapper8setScaleEf>:

void TextureMapper::setScale(float _scale)
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b082      	sub	sp, #8
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
 801589c:	ed87 0a00 	vstr	s0, [r7]
    this->scale = _scale;
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	683a      	ldr	r2, [r7, #0]
 80158a4:	641a      	str	r2, [r3, #64]	; 0x40

    applyTransformation();
 80158a6:	6878      	ldr	r0, [r7, #4]
 80158a8:	f7ff fae4 	bl	8014e74 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
}
 80158ac:	bf00      	nop
 80158ae:	3708      	adds	r7, #8
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bd80      	pop	{r7, pc}

080158b4 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:

void TextureMapper::draw(const Rect& invalidatedArea) const
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b0ac      	sub	sp, #176	; 0xb0
 80158b8:	af04      	add	r7, sp, #16
 80158ba:	6078      	str	r0, [r7, #4]
 80158bc:	6039      	str	r1, [r7, #0]
    if (!alpha)
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	f000 81ce 	beq.w	8015c66 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x3b2>
    {
        return;
    }
    uint16_t* fb = HAL::getInstance()->lockFrameBuffer();
 80158ca:	f7fc fd73 	bl	80123b4 <_ZN8touchgfx3HAL11getInstanceEv>
 80158ce:	4602      	mov	r2, r0
 80158d0:	6813      	ldr	r3, [r2, #0]
 80158d2:	3320      	adds	r3, #32
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	4610      	mov	r0, r2
 80158d8:	4798      	blx	r3
 80158da:	67f8      	str	r0, [r7, #124]	; 0x7c

    // Setup texture coordinates
    float right = (float)(bitmap.getWidth() - 1);
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	3328      	adds	r3, #40	; 0x28
 80158e0:	4618      	mov	r0, r3
 80158e2:	f011 f8dd 	bl	8026aa0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80158e6:	4603      	mov	r3, r0
 80158e8:	3b01      	subs	r3, #1
 80158ea:	ee07 3a90 	vmov	s15, r3
 80158ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80158f2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    float bottom = (float)(bitmap.getHeight() - 1);
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	3328      	adds	r3, #40	; 0x28
 80158fa:	4618      	mov	r0, r3
 80158fc:	f011 f90a 	bl	8026b14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015900:	4603      	mov	r3, r0
 8015902:	3b01      	subs	r3, #1
 8015904:	ee07 3a90 	vmov	s15, r3
 8015908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801590c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    float textureU0 = 0.0f;
 8015910:	f04f 0300 	mov.w	r3, #0
 8015914:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    float textureV0 = 0.0f;
 8015918:	f04f 0300 	mov.w	r3, #0
 801591c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    float textureU1 = right;
 8015920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015922:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    float textureV1 = 0.0f;
 8015926:	f04f 0300 	mov.w	r3, #0
 801592a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float textureU2 = right;
 801592e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015930:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float textureV2 = bottom;
 8015934:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015936:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float textureU3 = 0.0f;
 801593a:	f04f 0300 	mov.w	r3, #0
 801593e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    float textureV3 = bottom;
 8015942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015944:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL::DISPLAY_ROTATION == rotate90)
 8015948:	4b9f      	ldr	r3, [pc, #636]	; (8015bc8 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x314>)
 801594a:	781b      	ldrb	r3, [r3, #0]
 801594c:	2b01      	cmp	r3, #1
 801594e:	d11b      	bne.n	8015988 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xd4>
    {
        textureU0 = 0.0f;
 8015950:	f04f 0300 	mov.w	r3, #0
 8015954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        textureV0 = right;
 8015958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801595a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        textureU1 = 0.0f;
 801595e:	f04f 0300 	mov.w	r3, #0
 8015962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        textureV1 = 0.0f;
 8015966:	f04f 0300 	mov.w	r3, #0
 801596a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        textureU2 = bottom;
 801596e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015970:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        textureV2 = 0.0f;
 8015974:	f04f 0300 	mov.w	r3, #0
 8015978:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        textureU3 = bottom;
 801597c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801597e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        textureV3 = right;
 8015982:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015984:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float triangleZs[3];
    float triangleUs[3];
    float triangleVs[3];

    // Determine winding order
    Vector4 zeroToOne(imageX1 - imageX0, imageY1 - imageY0, imageZ1 - imageZ0);
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8015994:	ee77 6a67 	vsub.f32	s13, s14, s15
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80159a4:	ee37 6a67 	vsub.f32	s12, s14, s15
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80159b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80159b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80159bc:	eeb0 1a67 	vmov.f32	s2, s15
 80159c0:	eef0 0a46 	vmov.f32	s1, s12
 80159c4:	eeb0 0a66 	vmov.f32	s0, s13
 80159c8:	4618      	mov	r0, r3
 80159ca:	f7ff f8cb 	bl	8014b64 <_ZN8touchgfx7Vector4C1Efff>
    Vector4 zeroToTwo(imageX2 - imageX0, imageY2 - imageY0, imageZ2 - imageZ0);
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80159da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80159ea:	ee37 6a67 	vsub.f32	s12, s14, s15
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80159fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80159fe:	f107 0318 	add.w	r3, r7, #24
 8015a02:	eeb0 1a67 	vmov.f32	s2, s15
 8015a06:	eef0 0a46 	vmov.f32	s1, s12
 8015a0a:	eeb0 0a66 	vmov.f32	s0, s13
 8015a0e:	4618      	mov	r0, r3
 8015a10:	f7ff f8a8 	bl	8014b64 <_ZN8touchgfx7Vector4C1Efff>
    Vector4 normal = zeroToOne.crossProduct(zeroToTwo);
 8015a14:	f107 0218 	add.w	r2, r7, #24
 8015a18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015a1c:	4611      	mov	r1, r2
 8015a1e:	4618      	mov	r0, r3
 8015a20:	f7ff f8be 	bl	8014ba0 <_ZN8touchgfx7Vector412crossProductERKS0_>
 8015a24:	eeb0 6a40 	vmov.f32	s12, s0
 8015a28:	eef0 6a60 	vmov.f32	s13, s1
 8015a2c:	eeb0 7a41 	vmov.f32	s14, s2
 8015a30:	eef0 7a61 	vmov.f32	s15, s3
 8015a34:	ed87 6a02 	vstr	s12, [r7, #8]
 8015a38:	edc7 6a03 	vstr	s13, [r7, #12]
 8015a3c:	ed87 7a04 	vstr	s14, [r7, #16]
 8015a40:	edc7 7a05 	vstr	s15, [r7, #20]

    if (normal.getZ() > 0)
 8015a44:	f107 0308 	add.w	r3, r7, #8
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f7ff f828 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 8015a4e:	eef0 7a40 	vmov.f32	s15, s0
 8015a52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a5a:	bfcc      	ite	gt
 8015a5c:	2301      	movgt	r3, #1
 8015a5e:	2300      	movle	r3, #0
 8015a60:	b2db      	uxtb	r3, r3
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d02d      	beq.n	8015ac2 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x20e>
    {
        triangleXs[0] = imageX0;
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015a6a:	66bb      	str	r3, [r7, #104]	; 0x68
        triangleXs[1] = imageX1;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015a70:	66fb      	str	r3, [r7, #108]	; 0x6c
        triangleXs[2] = imageX2;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015a76:	673b      	str	r3, [r7, #112]	; 0x70
        triangleYs[0] = imageY0;
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
        triangleYs[1] = imageY1;
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a82:	663b      	str	r3, [r7, #96]	; 0x60
        triangleYs[2] = imageY2;
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015a88:	667b      	str	r3, [r7, #100]	; 0x64
        triangleZs[0] = imageZ0;
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015a8e:	653b      	str	r3, [r7, #80]	; 0x50
        triangleZs[1] = imageZ1;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a94:	657b      	str	r3, [r7, #84]	; 0x54
        triangleZs[2] = imageZ2;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015a9a:	65bb      	str	r3, [r7, #88]	; 0x58

        triangleUs[0] = textureU0;
 8015a9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015aa0:	647b      	str	r3, [r7, #68]	; 0x44
        triangleUs[1] = textureU1;
 8015aa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015aa6:	64bb      	str	r3, [r7, #72]	; 0x48
        triangleUs[2] = textureU2;
 8015aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015aac:	64fb      	str	r3, [r7, #76]	; 0x4c
        triangleVs[0] = textureV0;
 8015aae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015ab2:	63bb      	str	r3, [r7, #56]	; 0x38
        triangleVs[1] = textureV1;
 8015ab4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        triangleVs[2] = textureV2;
 8015aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015abe:	643b      	str	r3, [r7, #64]	; 0x40
 8015ac0:	e02c      	b.n	8015b1c <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x268>
    }
    else
    {
        // invert due to the triangles winding order (showing backface of the triangle)
        triangleXs[1] = imageX0;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
        triangleXs[0] = imageX1;
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015acc:	66bb      	str	r3, [r7, #104]	; 0x68
        triangleXs[2] = imageX2;
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015ad2:	673b      	str	r3, [r7, #112]	; 0x70
        triangleYs[1] = imageY0;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015ad8:	663b      	str	r3, [r7, #96]	; 0x60
        triangleYs[0] = imageY1;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ade:	65fb      	str	r3, [r7, #92]	; 0x5c
        triangleYs[2] = imageY2;
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015ae4:	667b      	str	r3, [r7, #100]	; 0x64
        triangleZs[1] = imageZ0;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015aea:	657b      	str	r3, [r7, #84]	; 0x54
        triangleZs[0] = imageZ1;
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015af0:	653b      	str	r3, [r7, #80]	; 0x50
        triangleZs[2] = imageZ2;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015af6:	65bb      	str	r3, [r7, #88]	; 0x58

        triangleUs[1] = textureU0;
 8015af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015afc:	64bb      	str	r3, [r7, #72]	; 0x48
        triangleUs[0] = textureU1;
 8015afe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015b02:	647b      	str	r3, [r7, #68]	; 0x44
        triangleUs[2] = textureU2;
 8015b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015b08:	64fb      	str	r3, [r7, #76]	; 0x4c
        triangleVs[1] = textureV0;
 8015b0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        triangleVs[0] = textureV1;
 8015b10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015b14:	63bb      	str	r3, [r7, #56]	; 0x38
        triangleVs[2] = textureV2;
 8015b16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015b1a:	643b      	str	r3, [r7, #64]	; 0x40
    }

    drawTriangle(invalidatedArea, fb, triangleXs, triangleYs, triangleZs, triangleUs, triangleVs);
 8015b1c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8015b20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015b24:	9303      	str	r3, [sp, #12]
 8015b26:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015b2a:	9302      	str	r3, [sp, #8]
 8015b2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015b30:	9301      	str	r3, [sp, #4]
 8015b32:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015b36:	9300      	str	r3, [sp, #0]
 8015b38:	4613      	mov	r3, r2
 8015b3a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015b3c:	6839      	ldr	r1, [r7, #0]
 8015b3e:	6878      	ldr	r0, [r7, #4]
 8015b40:	f000 f896 	bl	8015c70 <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>

    if (normal.getZ() > 0)
 8015b44:	f107 0308 	add.w	r3, r7, #8
 8015b48:	4618      	mov	r0, r3
 8015b4a:	f7fe ffa8 	bl	8014a9e <_ZNK8touchgfx9Quadruple4getZEv>
 8015b4e:	eef0 7a40 	vmov.f32	s15, s0
 8015b52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b5a:	bfcc      	ite	gt
 8015b5c:	2301      	movgt	r3, #1
 8015b5e:	2300      	movle	r3, #0
 8015b60:	b2db      	uxtb	r3, r3
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d032      	beq.n	8015bcc <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x318>
    {
        triangleXs[0] = imageX0;
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015b6a:	66bb      	str	r3, [r7, #104]	; 0x68
        triangleXs[1] = imageX2;
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015b70:	66fb      	str	r3, [r7, #108]	; 0x6c
        triangleXs[2] = imageX3;
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015b78:	673b      	str	r3, [r7, #112]	; 0x70
        triangleYs[0] = imageY0;
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
        triangleYs[1] = imageY2;
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015b84:	663b      	str	r3, [r7, #96]	; 0x60
        triangleYs[2] = imageY3;
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015b8c:	667b      	str	r3, [r7, #100]	; 0x64
        triangleZs[0] = imageZ0;
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015b92:	653b      	str	r3, [r7, #80]	; 0x50
        triangleZs[1] = imageZ2;
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015b98:	657b      	str	r3, [r7, #84]	; 0x54
        triangleZs[2] = imageZ3;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015ba0:	65bb      	str	r3, [r7, #88]	; 0x58

        triangleUs[0] = textureU0;
 8015ba2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015ba6:	647b      	str	r3, [r7, #68]	; 0x44
        triangleUs[1] = textureU2;
 8015ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015bac:	64bb      	str	r3, [r7, #72]	; 0x48
        triangleUs[2] = textureU3;
 8015bae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
        triangleVs[0] = textureV0;
 8015bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015bb8:	63bb      	str	r3, [r7, #56]	; 0x38
        triangleVs[1] = textureV2;
 8015bba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        triangleVs[2] = textureV3;
 8015bc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015bc4:	643b      	str	r3, [r7, #64]	; 0x40
 8015bc6:	e031      	b.n	8015c2c <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x378>
 8015bc8:	2000cf6e 	.word	0x2000cf6e
    }
    else
    {
        triangleXs[1] = imageX0;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
        triangleXs[0] = imageX2;
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015bd6:	66bb      	str	r3, [r7, #104]	; 0x68
        triangleXs[2] = imageX3;
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015bde:	673b      	str	r3, [r7, #112]	; 0x70
        triangleYs[1] = imageY0;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015be4:	663b      	str	r3, [r7, #96]	; 0x60
        triangleYs[0] = imageY2;
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015bea:	65fb      	str	r3, [r7, #92]	; 0x5c
        triangleYs[2] = imageY3;
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015bf2:	667b      	str	r3, [r7, #100]	; 0x64
        triangleZs[1] = imageZ0;
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015bf8:	657b      	str	r3, [r7, #84]	; 0x54
        triangleZs[0] = imageZ2;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015bfe:	653b      	str	r3, [r7, #80]	; 0x50
        triangleZs[2] = imageZ3;
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015c06:	65bb      	str	r3, [r7, #88]	; 0x58

        triangleUs[1] = textureU0;
 8015c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015c0c:	64bb      	str	r3, [r7, #72]	; 0x48
        triangleUs[0] = textureU2;
 8015c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c12:	647b      	str	r3, [r7, #68]	; 0x44
        triangleUs[2] = textureU3;
 8015c14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015c18:	64fb      	str	r3, [r7, #76]	; 0x4c
        triangleVs[1] = textureV0;
 8015c1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        triangleVs[0] = textureV2;
 8015c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015c24:	63bb      	str	r3, [r7, #56]	; 0x38
        triangleVs[2] = textureV3;
 8015c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015c2a:	643b      	str	r3, [r7, #64]	; 0x40
    }

    drawTriangle(invalidatedArea, fb, triangleXs, triangleYs, triangleZs, triangleUs, triangleVs);
 8015c2c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8015c30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015c34:	9303      	str	r3, [sp, #12]
 8015c36:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015c3a:	9302      	str	r3, [sp, #8]
 8015c3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015c40:	9301      	str	r3, [sp, #4]
 8015c42:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015c46:	9300      	str	r3, [sp, #0]
 8015c48:	4613      	mov	r3, r2
 8015c4a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015c4c:	6839      	ldr	r1, [r7, #0]
 8015c4e:	6878      	ldr	r0, [r7, #4]
 8015c50:	f000 f80e 	bl	8015c70 <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>

    HAL::getInstance()->unlockFrameBuffer();
 8015c54:	f7fc fbae 	bl	80123b4 <_ZN8touchgfx3HAL11getInstanceEv>
 8015c58:	4602      	mov	r2, r0
 8015c5a:	6813      	ldr	r3, [r2, #0]
 8015c5c:	3324      	adds	r3, #36	; 0x24
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	4610      	mov	r0, r2
 8015c62:	4798      	blx	r3
 8015c64:	e000      	b.n	8015c68 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x3b4>
        return;
 8015c66:	bf00      	nop
}
 8015c68:	37a0      	adds	r7, #160	; 0xa0
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd80      	pop	{r7, pc}
 8015c6e:	bf00      	nop

08015c70 <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>:

void TextureMapper::drawTriangle(const Rect& invalidatedArea, uint16_t* fb, const float* triangleXs, const float* triangleYs, const float* triangleZs, const float* triangleUs, const float* triangleVs) const
{
 8015c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c72:	b0bf      	sub	sp, #252	; 0xfc
 8015c74:	af06      	add	r7, sp, #24
 8015c76:	60f8      	str	r0, [r7, #12]
 8015c78:	60b9      	str	r1, [r7, #8]
 8015c7a:	607a      	str	r2, [r7, #4]
 8015c7c:	603b      	str	r3, [r7, #0]
    // Area to redraw. Relative to the TextureMapper.
    Rect dirtyArea = Rect(0, 0, getWidth(), getHeight()) & invalidatedArea;
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	4618      	mov	r0, r3
 8015c82:	f7fd f8c1 	bl	8012e08 <_ZNK8touchgfx8Drawable8getWidthEv>
 8015c86:	4603      	mov	r3, r0
 8015c88:	461c      	mov	r4, r3
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f7fd f8c8 	bl	8012e22 <_ZNK8touchgfx8Drawable9getHeightEv>
 8015c92:	4603      	mov	r3, r0
 8015c94:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8015c98:	9300      	str	r3, [sp, #0]
 8015c9a:	4623      	mov	r3, r4
 8015c9c:	2200      	movs	r2, #0
 8015c9e:	2100      	movs	r1, #0
 8015ca0:	f7fc fbbc 	bl	801241c <_ZN8touchgfx4RectC1Essss>
 8015ca4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015ca8:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8015cac:	68ba      	ldr	r2, [r7, #8]
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f7fc fc5f 	bl	8012572 <_ZNK8touchgfx4RectanERKS0_>

    // Absolute position of the TextureMapper.
    Rect dirtyAreaAbsolute = dirtyArea;
 8015cb4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8015cb8:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8015cbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015cc0:	e883 0003 	stmia.w	r3, {r0, r1}
    translateRectToAbsolute(dirtyAreaAbsolute);
 8015cc4:	68fa      	ldr	r2, [r7, #12]
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	3324      	adds	r3, #36	; 0x24
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8015cd2:	4610      	mov	r0, r2
 8015cd4:	4798      	blx	r3

    Rect absoluteRect = getAbsoluteRect();
 8015cd6:	68fa      	ldr	r2, [r7, #12]
 8015cd8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015cdc:	4611      	mov	r1, r2
 8015cde:	4618      	mov	r0, r3
 8015ce0:	f00f f9ad 	bl	802503e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
    DisplayTransformation::transformDisplayToFrameBuffer(absoluteRect);
 8015ce4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015ce8:	4618      	mov	r0, r3
 8015cea:	f00e fb47 	bl	802437c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>

    // Transform rects to match framebuffer coordinates
    // This is needed if the display is rotated compared to the framebuffer
    DisplayTransformation::transformDisplayToFrameBuffer(dirtyArea, this->getRect());
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	f7fc fd72 	bl	80127da <_ZNK8touchgfx8Drawable7getRectEv>
 8015cf6:	4602      	mov	r2, r0
 8015cf8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015cfc:	4611      	mov	r1, r2
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f00e fb24 	bl	802434c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
    DisplayTransformation::transformDisplayToFrameBuffer(dirtyAreaAbsolute);
 8015d04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f00e fb37 	bl	802437c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>

    // Get a pointer to the bitmap data, return if no bitmap found
    const uint16_t* textmap = (const uint16_t*)bitmap.getData();
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	3328      	adds	r3, #40	; 0x28
 8015d12:	4618      	mov	r0, r3
 8015d14:	f010 ffcc 	bl	8026cb0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8015d18:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!textmap)
 8015d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	f000 80fc 	beq.w	8015f1e <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x2ae>
    {
        return;
    }

    float x0 = triangleXs[0];
 8015d26:	683b      	ldr	r3, [r7, #0]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    float x1 = triangleXs[1];
 8015d2e:	683b      	ldr	r3, [r7, #0]
 8015d30:	3304      	adds	r3, #4
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    float x2 = triangleXs[2];
 8015d38:	683b      	ldr	r3, [r7, #0]
 8015d3a:	3308      	adds	r3, #8
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    float y0 = triangleYs[0]; //lint !e578
 8015d42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    float y1 = triangleYs[1]; //lint !e578
 8015d4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8015d50:	3304      	adds	r3, #4
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    float y2 = triangleYs[2];
 8015d58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8015d5c:	3308      	adds	r3, #8
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    DisplayTransformation::transformDisplayToFrameBuffer(x0, y0, this->getRect());
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	4618      	mov	r0, r3
 8015d68:	f7fc fd37 	bl	80127da <_ZNK8touchgfx8Drawable7getRectEv>
 8015d6c:	4602      	mov	r2, r0
 8015d6e:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8015d72:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8015d76:	4618      	mov	r0, r3
 8015d78:	f00e facc 	bl	8024314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
    DisplayTransformation::transformDisplayToFrameBuffer(x1, y1, this->getRect());
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f7fc fd2b 	bl	80127da <_ZNK8touchgfx8Drawable7getRectEv>
 8015d84:	4602      	mov	r2, r0
 8015d86:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8015d8a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8015d8e:	4618      	mov	r0, r3
 8015d90:	f00e fac0 	bl	8024314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
    DisplayTransformation::transformDisplayToFrameBuffer(x2, y2, this->getRect());
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7fc fd1f 	bl	80127da <_ZNK8touchgfx8Drawable7getRectEv>
 8015d9c:	4602      	mov	r2, r0
 8015d9e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8015da2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015da6:	4618      	mov	r0, r3
 8015da8:	f00e fab4 	bl	8024314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>

    Point3D vertices[3];
    Point3D point0 = { floatToFixed28_4(x0), floatToFixed28_4(y0), (float)(triangleZs[0]), (float)(triangleUs[0]), (float)(triangleVs[0]) };
 8015dac:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8015db0:	eeb0 0a67 	vmov.f32	s0, s15
 8015db4:	f7fe fd25 	bl	8014802 <_ZN8touchgfx16floatToFixed28_4Ef>
 8015db8:	4603      	mov	r3, r0
 8015dba:	657b      	str	r3, [r7, #84]	; 0x54
 8015dbc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8015dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8015dc4:	f7fe fd1d 	bl	8014802 <_ZN8touchgfx16floatToFixed28_4Ef>
 8015dc8:	4603      	mov	r3, r0
 8015dca:	65bb      	str	r3, [r7, #88]	; 0x58
 8015dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015dd4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	663b      	str	r3, [r7, #96]	; 0x60
 8015ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	667b      	str	r3, [r7, #100]	; 0x64
    Point3D point1 = { floatToFixed28_4(x1), floatToFixed28_4(y1), (float)(triangleZs[1]), (float)(triangleUs[1]), (float)(triangleVs[1]) };
 8015de4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8015de8:	eeb0 0a67 	vmov.f32	s0, s15
 8015dec:	f7fe fd09 	bl	8014802 <_ZN8touchgfx16floatToFixed28_4Ef>
 8015df0:	4603      	mov	r3, r0
 8015df2:	643b      	str	r3, [r7, #64]	; 0x40
 8015df4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8015df8:	eeb0 0a67 	vmov.f32	s0, s15
 8015dfc:	f7fe fd01 	bl	8014802 <_ZN8touchgfx16floatToFixed28_4Ef>
 8015e00:	4603      	mov	r3, r0
 8015e02:	647b      	str	r3, [r7, #68]	; 0x44
 8015e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015e08:	3304      	adds	r3, #4
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8015e0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015e12:	3304      	adds	r3, #4
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015e1c:	3304      	adds	r3, #4
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	653b      	str	r3, [r7, #80]	; 0x50
    Point3D point2 = { floatToFixed28_4(x2), floatToFixed28_4(y2), (float)(triangleZs[2]), (float)(triangleUs[2]), (float)(triangleVs[2]) };
 8015e22:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015e26:	eeb0 0a67 	vmov.f32	s0, s15
 8015e2a:	f7fe fcea 	bl	8014802 <_ZN8touchgfx16floatToFixed28_4Ef>
 8015e2e:	4603      	mov	r3, r0
 8015e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015e32:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8015e36:	eeb0 0a67 	vmov.f32	s0, s15
 8015e3a:	f7fe fce2 	bl	8014802 <_ZN8touchgfx16floatToFixed28_4Ef>
 8015e3e:	4603      	mov	r3, r0
 8015e40:	633b      	str	r3, [r7, #48]	; 0x30
 8015e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015e46:	3308      	adds	r3, #8
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8015e4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015e50:	3308      	adds	r3, #8
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	63bb      	str	r3, [r7, #56]	; 0x38
 8015e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015e5a:	3308      	adds	r3, #8
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	63fb      	str	r3, [r7, #60]	; 0x3c

    vertices[0] = point0;
 8015e60:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8015e64:	f107 0554 	add.w	r5, r7, #84	; 0x54
 8015e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015e6c:	682b      	ldr	r3, [r5, #0]
 8015e6e:	6023      	str	r3, [r4, #0]
    vertices[1] = point1;
 8015e70:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8015e74:	f107 0540 	add.w	r5, r7, #64	; 0x40
 8015e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015e7c:	682b      	ldr	r3, [r5, #0]
 8015e7e:	6023      	str	r3, [r4, #0]
    vertices[2] = point2;
 8015e80:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8015e84:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8015e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015e8c:	682b      	ldr	r3, [r5, #0]
 8015e8e:	6023      	str	r3, [r4, #0]

    DrawingSurface dest = { fb, HAL::FRAME_BUFFER_WIDTH };
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	627b      	str	r3, [r7, #36]	; 0x24
 8015e94:	4b24      	ldr	r3, [pc, #144]	; (8015f28 <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x2b8>)
 8015e96:	881b      	ldrh	r3, [r3, #0]
 8015e98:	62bb      	str	r3, [r7, #40]	; 0x28
    TextureSurface src = { textmap, bitmap.getExtraData(), bitmap.getWidth(), bitmap.getHeight(), bitmap.getWidth() };
 8015e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015e9e:	613b      	str	r3, [r7, #16]
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	3328      	adds	r3, #40	; 0x28
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	f010 ff33 	bl	8026d10 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8015eaa:	4603      	mov	r3, r0
 8015eac:	617b      	str	r3, [r7, #20]
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	3328      	adds	r3, #40	; 0x28
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	f010 fdf4 	bl	8026aa0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015eb8:	4603      	mov	r3, r0
 8015eba:	61bb      	str	r3, [r7, #24]
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	3328      	adds	r3, #40	; 0x28
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	f010 fe27 	bl	8026b14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	61fb      	str	r3, [r7, #28]
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	3328      	adds	r3, #40	; 0x28
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f010 fde6 	bl	8026aa0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	623b      	str	r3, [r7, #32]

    HAL::lcd().drawTextureMapTriangle(dest, vertices, src, absoluteRect, dirtyAreaAbsolute, lookupRenderVariant(), alpha, subDivisionSize);
 8015ed8:	f7fc fa78 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 8015edc:	4606      	mov	r6, r0
 8015ede:	68f8      	ldr	r0, [r7, #12]
 8015ee0:	f000 f824 	bl	8015f2c <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	461d      	mov	r5, r3
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8015eee:	68fa      	ldr	r2, [r7, #12]
 8015ef0:	f8b2 208c 	ldrh.w	r2, [r2, #140]	; 0x8c
 8015ef4:	f107 0410 	add.w	r4, r7, #16
 8015ef8:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8015efc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8015f00:	9204      	str	r2, [sp, #16]
 8015f02:	9303      	str	r3, [sp, #12]
 8015f04:	9502      	str	r5, [sp, #8]
 8015f06:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8015f0a:	9301      	str	r3, [sp, #4]
 8015f0c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015f10:	9300      	str	r3, [sp, #0]
 8015f12:	4623      	mov	r3, r4
 8015f14:	4602      	mov	r2, r0
 8015f16:	4630      	mov	r0, r6
 8015f18:	f00d ffd4 	bl	8023ec4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 8015f1c:	e000      	b.n	8015f20 <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x2b0>
        return;
 8015f1e:	bf00      	nop
}
 8015f20:	37e4      	adds	r7, #228	; 0xe4
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f26:	bf00      	nop
 8015f28:	2000cf70 	.word	0x2000cf70

08015f2c <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:

RenderingVariant TextureMapper::lookupRenderVariant() const
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b084      	sub	sp, #16
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
    RenderingVariant renderVariant;
    if (currentRenderingAlgorithm == NEAREST_NEIGHBOR)
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d107      	bne.n	8015f4e <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0x22>
    {
        renderVariant = lookupNearestNeighborRenderVariant(bitmap);
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	3328      	adds	r3, #40	; 0x28
 8015f42:	4618      	mov	r0, r3
 8015f44:	f00f f8f4 	bl	8025130 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8015f48:	4603      	mov	r3, r0
 8015f4a:	81fb      	strh	r3, [r7, #14]
 8015f4c:	e006      	b.n	8015f5c <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0x30>
    }
    else
    {
        renderVariant = lookupBilinearRenderVariant(bitmap);
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	3328      	adds	r3, #40	; 0x28
 8015f52:	4618      	mov	r0, r3
 8015f54:	f00f f8fc 	bl	8025150 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
 8015f58:	4603      	mov	r3, r0
 8015f5a:	81fb      	strh	r3, [r7, #14]
    }
    return renderVariant;
 8015f5c:	89fb      	ldrh	r3, [r7, #14]
}
 8015f5e:	4618      	mov	r0, r3
 8015f60:	3710      	adds	r7, #16
 8015f62:	46bd      	mov	sp, r7
 8015f64:	bd80      	pop	{r7, pc}

08015f66 <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:

Rect TextureMapper::getSolidRect() const
{
 8015f66:	b580      	push	{r7, lr}
 8015f68:	b084      	sub	sp, #16
 8015f6a:	af02      	add	r7, sp, #8
 8015f6c:	6078      	str	r0, [r7, #4]
 8015f6e:	6039      	str	r1, [r7, #0]
    if (alpha < 255)
 8015f70:	683b      	ldr	r3, [r7, #0]
 8015f72:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8015f76:	2bff      	cmp	r3, #255	; 0xff
 8015f78:	d008      	beq.n	8015f8c <_ZNK8touchgfx13TextureMapper12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	9300      	str	r3, [sp, #0]
 8015f7e:	2300      	movs	r3, #0
 8015f80:	2200      	movs	r2, #0
 8015f82:	2100      	movs	r1, #0
 8015f84:	6878      	ldr	r0, [r7, #4]
 8015f86:	f7fc fa49 	bl	801241c <_ZN8touchgfx4RectC1Essss>
 8015f8a:	e007      	b.n	8015f9c <_ZNK8touchgfx13TextureMapper12getSolidRectEv+0x36>
    }
    return Rect(0, 0, 0, 0);
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	9300      	str	r3, [sp, #0]
 8015f90:	2300      	movs	r3, #0
 8015f92:	2200      	movs	r2, #0
 8015f94:	2100      	movs	r1, #0
 8015f96:	6878      	ldr	r0, [r7, #4]
 8015f98:	f7fc fa40 	bl	801241c <_ZN8touchgfx4RectC1Essss>
}
 8015f9c:	6878      	ldr	r0, [r7, #4]
 8015f9e:	3708      	adds	r7, #8
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	bd80      	pop	{r7, pc}

08015fa4 <_ZN8touchgfx15AbstractPainterC1Ev>:

#include <touchgfx/widgets/canvas/AbstractPainter.hpp>

namespace touchgfx
{
AbstractPainter::AbstractPainter() :
 8015fa4:	b480      	push	{r7}
 8015fa6:	b083      	sub	sp, #12
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
    areaOffsetX(0),
    areaOffsetY(0),
    widgetAlpha(255)
 8015fac:	4a09      	ldr	r2, [pc, #36]	; (8015fd4 <_ZN8touchgfx15AbstractPainterC1Ev+0x30>)
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	601a      	str	r2, [r3, #0]
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	2200      	movs	r2, #0
 8015fb6:	809a      	strh	r2, [r3, #4]
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	2200      	movs	r2, #0
 8015fbc:	80da      	strh	r2, [r3, #6]
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	22ff      	movs	r2, #255	; 0xff
 8015fc2:	721a      	strb	r2, [r3, #8]
{
}
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	370c      	adds	r7, #12
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd0:	4770      	bx	lr
 8015fd2:	bf00      	nop
 8015fd4:	0802d270 	.word	0x0802d270

08015fd8 <_ZN8touchgfx15AbstractPainterD1Ev>:

AbstractPainter::~AbstractPainter()
 8015fd8:	b480      	push	{r7}
 8015fda:	b083      	sub	sp, #12
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
 8015fe0:	4a04      	ldr	r2, [pc, #16]	; (8015ff4 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	601a      	str	r2, [r3, #0]
{
}
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	4618      	mov	r0, r3
 8015fea:	370c      	adds	r7, #12
 8015fec:	46bd      	mov	sp, r7
 8015fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff2:	4770      	bx	lr
 8015ff4:	0802d270 	.word	0x0802d270

08015ff8 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:

void AbstractPainter::setOffset(uint16_t offsetX, uint16_t offsetY)
{
 8015ff8:	b480      	push	{r7}
 8015ffa:	b083      	sub	sp, #12
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
 8016000:	460b      	mov	r3, r1
 8016002:	807b      	strh	r3, [r7, #2]
 8016004:	4613      	mov	r3, r2
 8016006:	803b      	strh	r3, [r7, #0]
    areaOffsetX = offsetX;
 8016008:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	809a      	strh	r2, [r3, #4]
    areaOffsetY = offsetY;
 8016010:	f9b7 2000 	ldrsh.w	r2, [r7]
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	80da      	strh	r2, [r3, #6]
}
 8016018:	bf00      	nop
 801601a:	370c      	adds	r7, #12
 801601c:	46bd      	mov	sp, r7
 801601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016022:	4770      	bx	lr

08016024 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:

void AbstractPainter::setWidgetAlpha(const uint8_t alpha)
{
 8016024:	b480      	push	{r7}
 8016026:	b083      	sub	sp, #12
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
 801602c:	460b      	mov	r3, r1
 801602e:	70fb      	strb	r3, [r7, #3]
    widgetAlpha = alpha;
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	78fa      	ldrb	r2, [r7, #3]
 8016034:	721a      	strb	r2, [r3, #8]
}
 8016036:	bf00      	nop
 8016038:	370c      	adds	r7, #12
 801603a:	46bd      	mov	sp, r7
 801603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016040:	4770      	bx	lr

08016042 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8016042:	b480      	push	{r7}
 8016044:	b083      	sub	sp, #12
 8016046:	af00      	add	r7, sp, #0
 8016048:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	b29b      	uxth	r3, r3
    }
 8016050:	4618      	mov	r0, r3
 8016052:	370c      	adds	r7, #12
 8016054:	46bd      	mov	sp, r7
 8016056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605a:	4770      	bx	lr

0801605c <_ZN8touchgfx21AbstractPainterRGB56510renderInitEv>:
     *
     *        Initialize rendering of a single scan line of pixels for the render.
     *
     * @return true if it succeeds, false if it fails.
     */
    virtual bool renderInit()
 801605c:	b480      	push	{r7}
 801605e:	b083      	sub	sp, #12
 8016060:	af00      	add	r7, sp, #0
 8016062:	6078      	str	r0, [r7, #4]
    {
        return true;
 8016064:	2301      	movs	r3, #1
    }
 8016066:	4618      	mov	r0, r3
 8016068:	370c      	adds	r7, #12
 801606a:	46bd      	mov	sp, r7
 801606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016070:	4770      	bx	lr

08016072 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh>:
                                   int x,
                                   int xAdjust,
                                   int y,
                                   unsigned count,
                                   const uint8_t* covers)
{
 8016072:	b5b0      	push	{r4, r5, r7, lr}
 8016074:	b08c      	sub	sp, #48	; 0x30
 8016076:	af02      	add	r7, sp, #8
 8016078:	60f8      	str	r0, [r7, #12]
 801607a:	60b9      	str	r1, [r7, #8]
 801607c:	607a      	str	r2, [r7, #4]
 801607e:	603b      	str	r3, [r7, #0]
    uint16_t* p = reinterpret_cast<uint16_t*>(ptr) + (x + xAdjust);
 8016080:	687a      	ldr	r2, [r7, #4]
 8016082:	683b      	ldr	r3, [r7, #0]
 8016084:	4413      	add	r3, r2
 8016086:	005b      	lsls	r3, r3, #1
 8016088:	68ba      	ldr	r2, [r7, #8]
 801608a:	4413      	add	r3, r2
 801608c:	627b      	str	r3, [r7, #36]	; 0x24

    currentX = x + areaOffsetX;
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016094:	461a      	mov	r2, r3
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	441a      	add	r2, r3
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	60da      	str	r2, [r3, #12]
    currentY = y + areaOffsetY;
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80160a4:	461a      	mov	r2, r3
 80160a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160a8:	441a      	add	r2, r3
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	611a      	str	r2, [r3, #16]
    if (renderInit())
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	330c      	adds	r3, #12
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	68f8      	ldr	r0, [r7, #12]
 80160b8:	4798      	blx	r3
 80160ba:	4603      	mov	r3, r0
 80160bc:	2b00      	cmp	r3, #0
 80160be:	f000 80d0 	beq.w	8016262 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x1f0>
    {
        do
        {
            uint8_t red, green, blue, alpha;
            if (renderNext(red, green, blue, alpha))
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	3310      	adds	r3, #16
 80160c8:	681c      	ldr	r4, [r3, #0]
 80160ca:	f107 0011 	add.w	r0, r7, #17
 80160ce:	f107 0212 	add.w	r2, r7, #18
 80160d2:	f107 0113 	add.w	r1, r7, #19
 80160d6:	f107 0310 	add.w	r3, r7, #16
 80160da:	9300      	str	r3, [sp, #0]
 80160dc:	4603      	mov	r3, r0
 80160de:	68f8      	ldr	r0, [r7, #12]
 80160e0:	47a0      	blx	r4
 80160e2:	4603      	mov	r3, r0
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	f000 80a8 	beq.w	801623a <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x1c8>
            {
                uint8_t combinedAlpha = LCD::div255((*covers) * LCD::div255(alpha * widgetAlpha));
 80160ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160ec:	781b      	ldrb	r3, [r3, #0]
 80160ee:	b29a      	uxth	r2, r3
 80160f0:	7c3b      	ldrb	r3, [r7, #16]
 80160f2:	b299      	uxth	r1, r3
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	7a1b      	ldrb	r3, [r3, #8]
 80160f8:	b29b      	uxth	r3, r3
 80160fa:	fb11 f303 	smulbb	r3, r1, r3
 80160fe:	b29b      	uxth	r3, r3
 8016100:	837b      	strh	r3, [r7, #26]
     *
     * @return The result of a division by 255.
     */
    FORCE_INLINE_FUNCTION static uint8_t div255(uint16_t num)
    {
        return (num + 1 + (num >> 8)) >> 8;
 8016102:	8b7b      	ldrh	r3, [r7, #26]
 8016104:	1c59      	adds	r1, r3, #1
 8016106:	8b7b      	ldrh	r3, [r7, #26]
 8016108:	121b      	asrs	r3, r3, #8
 801610a:	440b      	add	r3, r1
 801610c:	121b      	asrs	r3, r3, #8
 801610e:	b2db      	uxtb	r3, r3
 8016110:	b29b      	uxth	r3, r3
 8016112:	fb12 f303 	smulbb	r3, r2, r3
 8016116:	b29b      	uxth	r3, r3
 8016118:	83bb      	strh	r3, [r7, #28]
 801611a:	8bbb      	ldrh	r3, [r7, #28]
 801611c:	1c5a      	adds	r2, r3, #1
 801611e:	8bbb      	ldrh	r3, [r7, #28]
 8016120:	121b      	asrs	r3, r3, #8
 8016122:	4413      	add	r3, r2
 8016124:	121b      	asrs	r3, r3, #8
 8016126:	b2db      	uxtb	r3, r3
 8016128:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                covers++;
 801612c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801612e:	3301      	adds	r3, #1
 8016130:	643b      	str	r3, [r7, #64]	; 0x40

                if (combinedAlpha == 0xFF) // max alpha=0xFF on "*covers" and max alpha=0xFF on "widgetAlpha"
 8016132:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016136:	2bff      	cmp	r3, #255	; 0xff
 8016138:	d10c      	bne.n	8016154 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0xe2>
                {
                    // Render a solid pixel
                    renderPixel(p, red, green, blue);
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	3314      	adds	r3, #20
 8016140:	681c      	ldr	r4, [r3, #0]
 8016142:	7cfa      	ldrb	r2, [r7, #19]
 8016144:	7cb9      	ldrb	r1, [r7, #18]
 8016146:	7c7b      	ldrb	r3, [r7, #17]
 8016148:	9300      	str	r3, [sp, #0]
 801614a:	460b      	mov	r3, r1
 801614c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801614e:	68f8      	ldr	r0, [r7, #12]
 8016150:	47a0      	blx	r4
 8016152:	e072      	b.n	801623a <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x1c8>
                }
                else
                {
                    uint8_t ialpha = 0xFF - combinedAlpha;
 8016154:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016158:	43db      	mvns	r3, r3
 801615a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                    uint8_t p_red = (*p & RMASK) >> 8;
 801615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016160:	881b      	ldrh	r3, [r3, #0]
 8016162:	121b      	asrs	r3, r3, #8
 8016164:	b2db      	uxtb	r3, r3
 8016166:	f023 0307 	bic.w	r3, r3, #7
 801616a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                    uint8_t p_green = (*p & GMASK) >> 3;
 801616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016170:	881b      	ldrh	r3, [r3, #0]
 8016172:	10db      	asrs	r3, r3, #3
 8016174:	b2db      	uxtb	r3, r3
 8016176:	f023 0303 	bic.w	r3, r3, #3
 801617a:	f887 3020 	strb.w	r3, [r7, #32]
                    uint8_t p_blue = (*p & BMASK) << 3;
 801617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016180:	881b      	ldrh	r3, [r3, #0]
 8016182:	00db      	lsls	r3, r3, #3
 8016184:	77fb      	strb	r3, [r7, #31]
                    renderPixel(p,
                                LCD::div255(red * combinedAlpha + p_red * ialpha),
                                LCD::div255(green * combinedAlpha + p_green * ialpha),
                                LCD::div255(blue * combinedAlpha + p_blue * ialpha));
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	3314      	adds	r3, #20
 801618c:	681c      	ldr	r4, [r3, #0]
                                LCD::div255(red * combinedAlpha + p_red * ialpha),
 801618e:	7cfb      	ldrb	r3, [r7, #19]
 8016190:	b29a      	uxth	r2, r3
 8016192:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016196:	b29b      	uxth	r3, r3
 8016198:	fb12 f303 	smulbb	r3, r2, r3
 801619c:	b29a      	uxth	r2, r3
 801619e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80161a2:	b299      	uxth	r1, r3
 80161a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80161a8:	b29b      	uxth	r3, r3
 80161aa:	fb11 f303 	smulbb	r3, r1, r3
 80161ae:	b29b      	uxth	r3, r3
                    renderPixel(p,
 80161b0:	4413      	add	r3, r2
 80161b2:	b29b      	uxth	r3, r3
 80161b4:	82bb      	strh	r3, [r7, #20]
 80161b6:	8abb      	ldrh	r3, [r7, #20]
 80161b8:	1c5a      	adds	r2, r3, #1
 80161ba:	8abb      	ldrh	r3, [r7, #20]
 80161bc:	121b      	asrs	r3, r3, #8
 80161be:	4413      	add	r3, r2
 80161c0:	121b      	asrs	r3, r3, #8
 80161c2:	b2d8      	uxtb	r0, r3
                                LCD::div255(green * combinedAlpha + p_green * ialpha),
 80161c4:	7cbb      	ldrb	r3, [r7, #18]
 80161c6:	b29a      	uxth	r2, r3
 80161c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80161cc:	b29b      	uxth	r3, r3
 80161ce:	fb12 f303 	smulbb	r3, r2, r3
 80161d2:	b29a      	uxth	r2, r3
 80161d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80161d8:	b299      	uxth	r1, r3
 80161da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80161de:	b29b      	uxth	r3, r3
 80161e0:	fb11 f303 	smulbb	r3, r1, r3
 80161e4:	b29b      	uxth	r3, r3
                    renderPixel(p,
 80161e6:	4413      	add	r3, r2
 80161e8:	b29b      	uxth	r3, r3
 80161ea:	82fb      	strh	r3, [r7, #22]
 80161ec:	8afb      	ldrh	r3, [r7, #22]
 80161ee:	1c5a      	adds	r2, r3, #1
 80161f0:	8afb      	ldrh	r3, [r7, #22]
 80161f2:	121b      	asrs	r3, r3, #8
 80161f4:	4413      	add	r3, r2
 80161f6:	121b      	asrs	r3, r3, #8
 80161f8:	b2dd      	uxtb	r5, r3
                                LCD::div255(blue * combinedAlpha + p_blue * ialpha));
 80161fa:	7c7b      	ldrb	r3, [r7, #17]
 80161fc:	b29a      	uxth	r2, r3
 80161fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016202:	b29b      	uxth	r3, r3
 8016204:	fb12 f303 	smulbb	r3, r2, r3
 8016208:	b29a      	uxth	r2, r3
 801620a:	7ffb      	ldrb	r3, [r7, #31]
 801620c:	b299      	uxth	r1, r3
 801620e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016212:	b29b      	uxth	r3, r3
 8016214:	fb11 f303 	smulbb	r3, r1, r3
 8016218:	b29b      	uxth	r3, r3
                    renderPixel(p,
 801621a:	4413      	add	r3, r2
 801621c:	b29b      	uxth	r3, r3
 801621e:	833b      	strh	r3, [r7, #24]
 8016220:	8b3b      	ldrh	r3, [r7, #24]
 8016222:	1c5a      	adds	r2, r3, #1
 8016224:	8b3b      	ldrh	r3, [r7, #24]
 8016226:	121b      	asrs	r3, r3, #8
 8016228:	4413      	add	r3, r2
 801622a:	121b      	asrs	r3, r3, #8
 801622c:	b2db      	uxtb	r3, r3
 801622e:	9300      	str	r3, [sp, #0]
 8016230:	462b      	mov	r3, r5
 8016232:	4602      	mov	r2, r0
 8016234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016236:	68f8      	ldr	r0, [r7, #12]
 8016238:	47a0      	blx	r4
                }
            }
            p++;
 801623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801623c:	3302      	adds	r3, #2
 801623e:	627b      	str	r3, [r7, #36]	; 0x24
            currentX++;
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	68db      	ldr	r3, [r3, #12]
 8016244:	1c5a      	adds	r2, r3, #1
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	60da      	str	r2, [r3, #12]
        }
        while (--count != 0);
 801624a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801624c:	3b01      	subs	r3, #1
 801624e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016252:	2b00      	cmp	r3, #0
 8016254:	bf14      	ite	ne
 8016256:	2301      	movne	r3, #1
 8016258:	2300      	moveq	r3, #0
 801625a:	b2db      	uxtb	r3, r3
 801625c:	2b00      	cmp	r3, #0
 801625e:	d000      	beq.n	8016262 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x1f0>
        do
 8016260:	e72f      	b.n	80160c2 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x50>
    }
}
 8016262:	bf00      	nop
 8016264:	3728      	adds	r7, #40	; 0x28
 8016266:	46bd      	mov	sp, r7
 8016268:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801626c <_ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh>:

void AbstractPainterRGB565::renderPixel(uint16_t* p, uint8_t red, uint8_t green, uint8_t blue)
{
 801626c:	b480      	push	{r7}
 801626e:	b085      	sub	sp, #20
 8016270:	af00      	add	r7, sp, #0
 8016272:	60f8      	str	r0, [r7, #12]
 8016274:	60b9      	str	r1, [r7, #8]
 8016276:	4611      	mov	r1, r2
 8016278:	461a      	mov	r2, r3
 801627a:	460b      	mov	r3, r1
 801627c:	71fb      	strb	r3, [r7, #7]
 801627e:	4613      	mov	r3, r2
 8016280:	71bb      	strb	r3, [r7, #6]
    *p = ((red << 8) & RMASK) | ((green << 3) & GMASK) | ((blue >> 3) & BMASK);
 8016282:	79fb      	ldrb	r3, [r7, #7]
 8016284:	021b      	lsls	r3, r3, #8
 8016286:	b21a      	sxth	r2, r3
 8016288:	4b0c      	ldr	r3, [pc, #48]	; (80162bc <_ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh+0x50>)
 801628a:	4013      	ands	r3, r2
 801628c:	b21a      	sxth	r2, r3
 801628e:	79bb      	ldrb	r3, [r7, #6]
 8016290:	00db      	lsls	r3, r3, #3
 8016292:	b21b      	sxth	r3, r3
 8016294:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016298:	b21b      	sxth	r3, r3
 801629a:	4313      	orrs	r3, r2
 801629c:	b21a      	sxth	r2, r3
 801629e:	7e3b      	ldrb	r3, [r7, #24]
 80162a0:	08db      	lsrs	r3, r3, #3
 80162a2:	b2db      	uxtb	r3, r3
 80162a4:	b21b      	sxth	r3, r3
 80162a6:	4313      	orrs	r3, r2
 80162a8:	b21b      	sxth	r3, r3
 80162aa:	b29a      	uxth	r2, r3
 80162ac:	68bb      	ldr	r3, [r7, #8]
 80162ae:	801a      	strh	r2, [r3, #0]
}
 80162b0:	bf00      	nop
 80162b2:	3714      	adds	r7, #20
 80162b4:	46bd      	mov	sp, r7
 80162b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ba:	4770      	bx	lr
 80162bc:	fffff800 	.word	0xfffff800

080162c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
        Q5 operator*(const Q15& q15) const
 80162c0:	b590      	push	{r4, r7, lr}
 80162c2:	b085      	sub	sp, #20
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	6078      	str	r0, [r7, #4]
 80162c8:	6039      	str	r1, [r7, #0]
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	681c      	ldr	r4, [r3, #0]
 80162ce:	6838      	ldr	r0, [r7, #0]
 80162d0:	f000 f823 	bl	801631a <_ZNK8touchgfx7CWRUtil3Q15cviEv>
 80162d4:	4601      	mov	r1, r0
 80162d6:	f107 0308 	add.w	r3, r7, #8
 80162da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80162de:	4620      	mov	r0, r4
 80162e0:	f00e ff69 	bl	80251b6 <_ZN8touchgfx6muldivElllRl>
 80162e4:	4602      	mov	r2, r0
 80162e6:	f107 030c 	add.w	r3, r7, #12
 80162ea:	4611      	mov	r1, r2
 80162ec:	4618      	mov	r0, r3
 80162ee:	f7fc fdfd 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80162f2:	68fb      	ldr	r3, [r7, #12]
        }
 80162f4:	4618      	mov	r0, r3
 80162f6:	3714      	adds	r7, #20
 80162f8:	46bd      	mov	sp, r7
 80162fa:	bd90      	pop	{r4, r7, pc}

080162fc <_ZN8touchgfx7CWRUtil3Q15C1Ei>:
        explicit Q15(int i) : v(i) { }
 80162fc:	b480      	push	{r7}
 80162fe:	b083      	sub	sp, #12
 8016300:	af00      	add	r7, sp, #0
 8016302:	6078      	str	r0, [r7, #4]
 8016304:	6039      	str	r1, [r7, #0]
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	683a      	ldr	r2, [r7, #0]
 801630a:	601a      	str	r2, [r3, #0]
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	4618      	mov	r0, r3
 8016310:	370c      	adds	r7, #12
 8016312:	46bd      	mov	sp, r7
 8016314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016318:	4770      	bx	lr

0801631a <_ZNK8touchgfx7CWRUtil3Q15cviEv>:
        operator int() const
 801631a:	b480      	push	{r7}
 801631c:	b083      	sub	sp, #12
 801631e:	af00      	add	r7, sp, #0
 8016320:	6078      	str	r0, [r7, #4]
            return v;
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	681b      	ldr	r3, [r3, #0]
        }
 8016326:	4618      	mov	r0, r3
 8016328:	370c      	adds	r7, #12
 801632a:	46bd      	mov	sp, r7
 801632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016330:	4770      	bx	lr

08016332 <_ZNK8touchgfx7CWRUtil3Q15plERKS1_>:
        Q15 operator+(const Q15& q15) const
 8016332:	b580      	push	{r7, lr}
 8016334:	b084      	sub	sp, #16
 8016336:	af00      	add	r7, sp, #0
 8016338:	6078      	str	r0, [r7, #4]
 801633a:	6039      	str	r1, [r7, #0]
            return Q15(v + q15.v);
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681a      	ldr	r2, [r3, #0]
 8016340:	683b      	ldr	r3, [r7, #0]
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	441a      	add	r2, r3
 8016346:	f107 030c 	add.w	r3, r7, #12
 801634a:	4611      	mov	r1, r2
 801634c:	4618      	mov	r0, r3
 801634e:	f7ff ffd5 	bl	80162fc <_ZN8touchgfx7CWRUtil3Q15C1Ei>
 8016352:	68fb      	ldr	r3, [r7, #12]
        }
 8016354:	4618      	mov	r0, r3
 8016356:	3710      	adds	r7, #16
 8016358:	46bd      	mov	sp, r7
 801635a:	bd80      	pop	{r7, pc}

0801635c <_ZN8touchgfx7CWRUtil4sineEi>:
     * @param i the angle in degrees. The angle follows the angles of the clock, 0 being straight
     *          up and 90 being 3 o'clock.
     *
     * @return the value of sin(i) with 15 bits precision on the fractional part.
     */
    static Q15 sine(int i)
 801635c:	b580      	push	{r7, lr}
 801635e:	b086      	sub	sp, #24
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
            0x620E, 0x637A, 0x64DE, 0x663A, 0x678E, 0x68DA, 0x6A1E, 0x6B5A, 0x6C8D, 0x6DB8,
            0x6EDA, 0x6FF4, 0x7104, 0x720D, 0x730C, 0x7402, 0x74EF, 0x75D3, 0x76AE, 0x7780,
            0x7848, 0x7907, 0x79BC, 0x7A68, 0x7B0B, 0x7BA3, 0x7C33, 0x7CB8, 0x7D34, 0x7DA6,
            0x7E0E, 0x7E6D, 0x7EC1, 0x7F0C, 0x7F4C, 0x7F83, 0x7FB0, 0x7FD3, 0x7FEC, 0x7FFB, 0x8000
        };
        i = ((i % 360) + 360) % 360;
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	4a30      	ldr	r2, [pc, #192]	; (8016428 <_ZN8touchgfx7CWRUtil4sineEi+0xcc>)
 8016368:	fb82 1203 	smull	r1, r2, r2, r3
 801636c:	441a      	add	r2, r3
 801636e:	1211      	asrs	r1, r2, #8
 8016370:	17da      	asrs	r2, r3, #31
 8016372:	1a8a      	subs	r2, r1, r2
 8016374:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8016378:	fb01 f202 	mul.w	r2, r1, r2
 801637c:	1a9a      	subs	r2, r3, r2
 801637e:	f502 73b4 	add.w	r3, r2, #360	; 0x168
 8016382:	4a29      	ldr	r2, [pc, #164]	; (8016428 <_ZN8touchgfx7CWRUtil4sineEi+0xcc>)
 8016384:	fb82 1203 	smull	r1, r2, r2, r3
 8016388:	441a      	add	r2, r3
 801638a:	1211      	asrs	r1, r2, #8
 801638c:	17da      	asrs	r2, r3, #31
 801638e:	1a8a      	subs	r2, r1, r2
 8016390:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8016394:	fb01 f202 	mul.w	r2, r1, r2
 8016398:	1a9b      	subs	r3, r3, r2
 801639a:	607b      	str	r3, [r7, #4]
        if (i <= 90)
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	2b5a      	cmp	r3, #90	; 0x5a
 80163a0:	dc0c      	bgt.n	80163bc <_ZN8touchgfx7CWRUtil4sineEi+0x60>
        {
            return Q15(sineTable[i]);
 80163a2:	4a22      	ldr	r2, [pc, #136]	; (801642c <_ZN8touchgfx7CWRUtil4sineEi+0xd0>)
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80163aa:	461a      	mov	r2, r3
 80163ac:	f107 0308 	add.w	r3, r7, #8
 80163b0:	4611      	mov	r1, r2
 80163b2:	4618      	mov	r0, r3
 80163b4:	f7ff ffa2 	bl	80162fc <_ZN8touchgfx7CWRUtil3Q15C1Ei>
 80163b8:	68bb      	ldr	r3, [r7, #8]
 80163ba:	e031      	b.n	8016420 <_ZN8touchgfx7CWRUtil4sineEi+0xc4>
        }
        if (i <= 180)
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	2bb4      	cmp	r3, #180	; 0xb4
 80163c0:	dc0e      	bgt.n	80163e0 <_ZN8touchgfx7CWRUtil4sineEi+0x84>
        {
            return Q15(sineTable[180 - i]);
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80163c8:	4a18      	ldr	r2, [pc, #96]	; (801642c <_ZN8touchgfx7CWRUtil4sineEi+0xd0>)
 80163ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80163ce:	461a      	mov	r2, r3
 80163d0:	f107 030c 	add.w	r3, r7, #12
 80163d4:	4611      	mov	r1, r2
 80163d6:	4618      	mov	r0, r3
 80163d8:	f7ff ff90 	bl	80162fc <_ZN8touchgfx7CWRUtil3Q15C1Ei>
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	e01f      	b.n	8016420 <_ZN8touchgfx7CWRUtil4sineEi+0xc4>
        }
        if (i <= 270)
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80163e6:	dc0d      	bgt.n	8016404 <_ZN8touchgfx7CWRUtil4sineEi+0xa8>
        {
            return Q15(-int32_t(sineTable[i - 180]));
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	3bb4      	subs	r3, #180	; 0xb4
 80163ec:	4a0f      	ldr	r2, [pc, #60]	; (801642c <_ZN8touchgfx7CWRUtil4sineEi+0xd0>)
 80163ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80163f2:	425a      	negs	r2, r3
 80163f4:	f107 0310 	add.w	r3, r7, #16
 80163f8:	4611      	mov	r1, r2
 80163fa:	4618      	mov	r0, r3
 80163fc:	f7ff ff7e 	bl	80162fc <_ZN8touchgfx7CWRUtil3Q15C1Ei>
 8016400:	693b      	ldr	r3, [r7, #16]
 8016402:	e00d      	b.n	8016420 <_ZN8touchgfx7CWRUtil4sineEi+0xc4>
        }
        return Q15(-int32_t(sineTable[360 - i]));
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 801640a:	4a08      	ldr	r2, [pc, #32]	; (801642c <_ZN8touchgfx7CWRUtil4sineEi+0xd0>)
 801640c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016410:	425a      	negs	r2, r3
 8016412:	f107 0314 	add.w	r3, r7, #20
 8016416:	4611      	mov	r1, r2
 8016418:	4618      	mov	r0, r3
 801641a:	f7ff ff6f 	bl	80162fc <_ZN8touchgfx7CWRUtil3Q15C1Ei>
 801641e:	697b      	ldr	r3, [r7, #20]
    }
 8016420:	4618      	mov	r0, r3
 8016422:	3718      	adds	r7, #24
 8016424:	46bd      	mov	sp, r7
 8016426:	bd80      	pop	{r7, pc}
 8016428:	b60b60b7 	.word	0xb60b60b7
 801642c:	0802d29c 	.word	0x0802d29c

08016430 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
     * @param i the angle in degrees. The angle follows the angles of the clock, 0 being straight up
     *          and 90 being 3 o'clock.
     *
     * @return the value of sin(i) with 15 bits precision on the fractional part.
     */
    static Q15 sine(Q5 i)
 8016430:	b590      	push	{r4, r7, lr}
 8016432:	b08d      	sub	sp, #52	; 0x34
 8016434:	af00      	add	r7, sp, #0
 8016436:	6078      	str	r0, [r7, #4]
 8016438:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801643c:	62bb      	str	r3, [r7, #40]	; 0x28
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 801643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016440:	015a      	lsls	r2, r3, #5
 8016442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016446:	4611      	mov	r1, r2
 8016448:	4618      	mov	r0, r3
 801644a:	f7fc fd4f 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
        Q5 _360 = toQ5<int>(360);
 8016450:	61bb      	str	r3, [r7, #24]
        i = Q5(((i % _360) + _360) % _360);
 8016452:	1d3b      	adds	r3, r7, #4
 8016454:	4618      	mov	r0, r3
 8016456:	f7fc fd58 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801645a:	4604      	mov	r4, r0
 801645c:	f107 0318 	add.w	r3, r7, #24
 8016460:	4618      	mov	r0, r3
 8016462:	f7fc fd52 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8016466:	4603      	mov	r3, r0
 8016468:	fb94 f2f3 	sdiv	r2, r4, r3
 801646c:	fb03 f302 	mul.w	r3, r3, r2
 8016470:	1ae4      	subs	r4, r4, r3
 8016472:	f107 0318 	add.w	r3, r7, #24
 8016476:	4618      	mov	r0, r3
 8016478:	f7fc fd47 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801647c:	4603      	mov	r3, r0
 801647e:	441c      	add	r4, r3
 8016480:	f107 0318 	add.w	r3, r7, #24
 8016484:	4618      	mov	r0, r3
 8016486:	f7fc fd40 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801648a:	4603      	mov	r3, r0
 801648c:	fb94 f2f3 	sdiv	r2, r4, r3
 8016490:	fb03 f302 	mul.w	r3, r3, r2
 8016494:	1ae2      	subs	r2, r4, r3
 8016496:	f107 031c 	add.w	r3, r7, #28
 801649a:	4611      	mov	r1, r2
 801649c:	4618      	mov	r0, r3
 801649e:	f7fc fd25 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80164a2:	69fb      	ldr	r3, [r7, #28]
 80164a4:	607b      	str	r3, [r7, #4]
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 80164a6:	1d3b      	adds	r3, r7, #4
 80164a8:	4618      	mov	r0, r3
 80164aa:	f7fc fd2e 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80164ae:	4603      	mov	r3, r0
 80164b0:	425a      	negs	r2, r3
 80164b2:	f003 031f 	and.w	r3, r3, #31
 80164b6:	f002 021f 	and.w	r2, r2, #31
 80164ba:	bf58      	it	pl
 80164bc:	4253      	negpl	r3, r2
 80164be:	85fb      	strh	r3, [r7, #46]	; 0x2e
        Q15 sineLow = sine(i.to<int>());
 80164c0:	1d3b      	adds	r3, r7, #4
 80164c2:	4618      	mov	r0, r3
 80164c4:	f7fd fccb 	bl	8013e5e <_ZNK8touchgfx7CWRUtil2Q52toIiEET_v>
 80164c8:	4603      	mov	r3, r0
 80164ca:	4618      	mov	r0, r3
 80164cc:	f7ff ff46 	bl	801635c <_ZN8touchgfx7CWRUtil4sineEi>
 80164d0:	4603      	mov	r3, r0
 80164d2:	617b      	str	r3, [r7, #20]
        if (fraction == 0)
 80164d4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d101      	bne.n	80164e0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0xb0>
        {
            return sineLow;
 80164dc:	697b      	ldr	r3, [r7, #20]
 80164de:	e02e      	b.n	801653e <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x10e>
        }
        Q15 sineHigh = sine(i.to<int>() + 1);
 80164e0:	1d3b      	adds	r3, r7, #4
 80164e2:	4618      	mov	r0, r3
 80164e4:	f7fd fcbb 	bl	8013e5e <_ZNK8touchgfx7CWRUtil2Q52toIiEET_v>
 80164e8:	4603      	mov	r3, r0
 80164ea:	3301      	adds	r3, #1
 80164ec:	4618      	mov	r0, r3
 80164ee:	f7ff ff35 	bl	801635c <_ZN8touchgfx7CWRUtil4sineEi>
 80164f2:	4603      	mov	r3, r0
 80164f4:	613b      	str	r3, [r7, #16]
        int32_t remainder;
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 80164f6:	f107 0310 	add.w	r3, r7, #16
 80164fa:	4618      	mov	r0, r3
 80164fc:	f7ff ff0d 	bl	801631a <_ZNK8touchgfx7CWRUtil3Q15cviEv>
 8016500:	4604      	mov	r4, r0
 8016502:	f107 0314 	add.w	r3, r7, #20
 8016506:	4618      	mov	r0, r3
 8016508:	f7ff ff07 	bl	801631a <_ZNK8touchgfx7CWRUtil3Q15cviEv>
 801650c:	4603      	mov	r3, r0
 801650e:	1ae0      	subs	r0, r4, r3
 8016510:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8016514:	f107 030c 	add.w	r3, r7, #12
 8016518:	2220      	movs	r2, #32
 801651a:	f00e fe4c 	bl	80251b6 <_ZN8touchgfx6muldivElllRl>
 801651e:	4602      	mov	r2, r0
 8016520:	f107 0320 	add.w	r3, r7, #32
 8016524:	4611      	mov	r1, r2
 8016526:	4618      	mov	r0, r3
 8016528:	f7ff fee8 	bl	80162fc <_ZN8touchgfx7CWRUtil3Q15C1Ei>
 801652c:	f107 0214 	add.w	r2, r7, #20
 8016530:	f107 0320 	add.w	r3, r7, #32
 8016534:	4611      	mov	r1, r2
 8016536:	4618      	mov	r0, r3
 8016538:	f7ff fefb 	bl	8016332 <_ZNK8touchgfx7CWRUtil3Q15plERKS1_>
 801653c:	4603      	mov	r3, r0
    }
 801653e:	4618      	mov	r0, r3
 8016540:	3734      	adds	r7, #52	; 0x34
 8016542:	46bd      	mov	sp, r7
 8016544:	bd90      	pop	{r4, r7, pc}

08016546 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
     *
     * @return the value of cos(i) with 15 bits precision on the fractional part.
     *
     * @see sine()
     */
    static Q15 cosine(Q5 i)
 8016546:	b580      	push	{r7, lr}
 8016548:	b086      	sub	sp, #24
 801654a:	af00      	add	r7, sp, #0
 801654c:	6078      	str	r0, [r7, #4]
 801654e:	235a      	movs	r3, #90	; 0x5a
 8016550:	617b      	str	r3, [r7, #20]
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8016552:	697b      	ldr	r3, [r7, #20]
 8016554:	015a      	lsls	r2, r3, #5
 8016556:	f107 0310 	add.w	r3, r7, #16
 801655a:	4611      	mov	r1, r2
 801655c:	4618      	mov	r0, r3
 801655e:	f7fc fcc5 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8016562:	693b      	ldr	r3, [r7, #16]
    {
        return sine(CWRUtil::toQ5<int>(90) - i);
 8016564:	60fb      	str	r3, [r7, #12]
 8016566:	1d3a      	adds	r2, r7, #4
 8016568:	f107 030c 	add.w	r3, r7, #12
 801656c:	4611      	mov	r1, r2
 801656e:	4618      	mov	r0, r3
 8016570:	f7fd fc60 	bl	8013e34 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 8016574:	4603      	mov	r3, r0
 8016576:	4618      	mov	r0, r3
 8016578:	f7ff ff5a 	bl	8016430 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801657c:	4603      	mov	r3, r0
    }
 801657e:	4618      	mov	r0, r3
 8016580:	3718      	adds	r7, #24
 8016582:	46bd      	mov	sp, r7
 8016584:	bd80      	pop	{r7, pc}

08016586 <_ZN8touchgfx7CWRUtil9muldivQ10ENS0_3Q10ES1_S1_>:
     * @param factor2 The second factor.
     * @param divisor The divisor.
     *
     * @return factor1 * factor2 / divisor.
     */
    static Q5 muldivQ10(Q10 factor1, Q10 factor2, Q10 divisor)
 8016586:	b5b0      	push	{r4, r5, r7, lr}
 8016588:	b086      	sub	sp, #24
 801658a:	af00      	add	r7, sp, #0
 801658c:	60f8      	str	r0, [r7, #12]
 801658e:	60b9      	str	r1, [r7, #8]
 8016590:	607a      	str	r2, [r7, #4]
    {
        int32_t remainder;
        return Q5(muldiv(int(factor1), int(factor2), int(divisor), remainder) / Rasterizer::POLY_BASE_SIZE);
 8016592:	f107 030c 	add.w	r3, r7, #12
 8016596:	4618      	mov	r0, r3
 8016598:	f7fd fc80 	bl	8013e9c <_ZNK8touchgfx7CWRUtil3Q10cviEv>
 801659c:	4604      	mov	r4, r0
 801659e:	f107 0308 	add.w	r3, r7, #8
 80165a2:	4618      	mov	r0, r3
 80165a4:	f7fd fc7a 	bl	8013e9c <_ZNK8touchgfx7CWRUtil3Q10cviEv>
 80165a8:	4605      	mov	r5, r0
 80165aa:	1d3b      	adds	r3, r7, #4
 80165ac:	4618      	mov	r0, r3
 80165ae:	f7fd fc75 	bl	8013e9c <_ZNK8touchgfx7CWRUtil3Q10cviEv>
 80165b2:	4602      	mov	r2, r0
 80165b4:	f107 0310 	add.w	r3, r7, #16
 80165b8:	4629      	mov	r1, r5
 80165ba:	4620      	mov	r0, r4
 80165bc:	f00e fdfb 	bl	80251b6 <_ZN8touchgfx6muldivElllRl>
 80165c0:	4603      	mov	r3, r0
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	da00      	bge.n	80165c8 <_ZN8touchgfx7CWRUtil9muldivQ10ENS0_3Q10ES1_S1_+0x42>
 80165c6:	331f      	adds	r3, #31
 80165c8:	115b      	asrs	r3, r3, #5
 80165ca:	461a      	mov	r2, r3
 80165cc:	f107 0314 	add.w	r3, r7, #20
 80165d0:	4611      	mov	r1, r2
 80165d2:	4618      	mov	r0, r3
 80165d4:	f7fc fc8a 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80165d8:	697b      	ldr	r3, [r7, #20]
    }
 80165da:	4618      	mov	r0, r3
 80165dc:	3718      	adds	r7, #24
 80165de:	46bd      	mov	sp, r7
 80165e0:	bdb0      	pop	{r4, r5, r7, pc}

080165e2 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>:
     * @param factor1 The first factor.
     * @param factor2 The second factor.
     *
     * @return factor1 * factor2.
     */
    static Q5 mulQ5(Q5 factor1, Q10 factor2)
 80165e2:	b580      	push	{r7, lr}
 80165e4:	b086      	sub	sp, #24
 80165e6:	af00      	add	r7, sp, #0
 80165e8:	6078      	str	r0, [r7, #4]
 80165ea:	6039      	str	r1, [r7, #0]
    {
        return muldivQ10(Q10(int(factor1) * Rasterizer::POLY_BASE_SIZE), factor2, CWRUtil::toQ10<int>(1));
 80165ec:	1d3b      	adds	r3, r7, #4
 80165ee:	4618      	mov	r0, r3
 80165f0:	f7fc fc8b 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80165f4:	4603      	mov	r3, r0
 80165f6:	015a      	lsls	r2, r3, #5
 80165f8:	f107 030c 	add.w	r3, r7, #12
 80165fc:	4611      	mov	r1, r2
 80165fe:	4618      	mov	r0, r3
 8016600:	f7fd fc3d 	bl	8013e7e <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 8016604:	2301      	movs	r3, #1
 8016606:	617b      	str	r3, [r7, #20]
        return Q10(int(value * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE));
 8016608:	697b      	ldr	r3, [r7, #20]
 801660a:	029a      	lsls	r2, r3, #10
 801660c:	f107 0310 	add.w	r3, r7, #16
 8016610:	4611      	mov	r1, r2
 8016612:	4618      	mov	r0, r3
 8016614:	f7fd fc33 	bl	8013e7e <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 8016618:	693b      	ldr	r3, [r7, #16]
        return muldivQ10(Q10(int(factor1) * Rasterizer::POLY_BASE_SIZE), factor2, CWRUtil::toQ10<int>(1));
 801661a:	461a      	mov	r2, r3
 801661c:	6839      	ldr	r1, [r7, #0]
 801661e:	68f8      	ldr	r0, [r7, #12]
 8016620:	f7ff ffb1 	bl	8016586 <_ZN8touchgfx7CWRUtil9muldivQ10ENS0_3Q10ES1_S1_>
 8016624:	4603      	mov	r3, r0
    }
 8016626:	4618      	mov	r0, r3
 8016628:	3718      	adds	r7, #24
 801662a:	46bd      	mov	sp, r7
 801662c:	bd80      	pop	{r7, pc}
	...

08016630 <_ZN8touchgfx13AbstractShapeC1Ev>:
#include <touchgfx/widgets/canvas/AbstractShape.hpp>
#include <touchgfx/widgets/canvas/Canvas.hpp>

namespace touchgfx
{
AbstractShape::AbstractShape() : CanvasWidget(),
 8016630:	b580      	push	{r7, lr}
 8016632:	b086      	sub	sp, #24
 8016634:	af00      	add	r7, sp, #0
 8016636:	6078      	str	r0, [r7, #4]
    dx(0), dy(0), shapeAngle(0),
    xScale(CWRUtil::toQ10<int>(1)), yScale(CWRUtil::toQ10<int>(1)),
    minimalRect(Rect())
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	4618      	mov	r0, r3
 801663c:	f001 fab6 	bl	8017bac <_ZN8touchgfx12CanvasWidgetC1Ev>
 8016640:	4a22      	ldr	r2, [pc, #136]	; (80166cc <_ZN8touchgfx13AbstractShapeC1Ev+0x9c>)
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	601a      	str	r2, [r3, #0]
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	3330      	adds	r3, #48	; 0x30
 801664a:	2100      	movs	r1, #0
 801664c:	4618      	mov	r0, r3
 801664e:	f7fc fc4d 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	3334      	adds	r3, #52	; 0x34
 8016656:	2100      	movs	r1, #0
 8016658:	4618      	mov	r0, r3
 801665a:	f7fc fc47 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	3338      	adds	r3, #56	; 0x38
 8016662:	2100      	movs	r1, #0
 8016664:	4618      	mov	r0, r3
 8016666:	f7fc fc41 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801666a:	2301      	movs	r3, #1
 801666c:	613b      	str	r3, [r7, #16]
        return Q10(int(value * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE));
 801666e:	693b      	ldr	r3, [r7, #16]
 8016670:	029a      	lsls	r2, r3, #10
 8016672:	f107 030c 	add.w	r3, r7, #12
 8016676:	4611      	mov	r1, r2
 8016678:	4618      	mov	r0, r3
 801667a:	f7fd fc00 	bl	8013e7e <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	461a      	mov	r2, r3
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	63da      	str	r2, [r3, #60]	; 0x3c
 8016686:	2301      	movs	r3, #1
 8016688:	617b      	str	r3, [r7, #20]
 801668a:	697b      	ldr	r3, [r7, #20]
 801668c:	029a      	lsls	r2, r3, #10
 801668e:	f107 0308 	add.w	r3, r7, #8
 8016692:	4611      	mov	r1, r2
 8016694:	4618      	mov	r0, r3
 8016696:	f7fd fbf2 	bl	8013e7e <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 801669a:	68bb      	ldr	r3, [r7, #8]
 801669c:	461a      	mov	r2, r3
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	641a      	str	r2, [r3, #64]	; 0x40
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	3344      	adds	r3, #68	; 0x44
 80166a6:	4618      	mov	r0, r3
 80166a8:	f7fb fc6c 	bl	8011f84 <_ZN8touchgfx4RectC1Ev>
{
    Drawable::setWidth(0);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	2100      	movs	r1, #0
 80166b0:	4618      	mov	r0, r3
 80166b2:	f7fb fd18 	bl	80120e6 <_ZN8touchgfx8Drawable8setWidthEs>
    Drawable::setHeight(0);
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	2100      	movs	r1, #0
 80166ba:	4618      	mov	r0, r3
 80166bc:	f7fb fd22 	bl	8012104 <_ZN8touchgfx8Drawable9setHeightEs>
}
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	4618      	mov	r0, r3
 80166c4:	3718      	adds	r7, #24
 80166c6:	46bd      	mov	sp, r7
 80166c8:	bd80      	pop	{r7, pc}
 80166ca:	bf00      	nop
 80166cc:	0802d35c 	.word	0x0802d35c

080166d0 <_ZN8touchgfx13AbstractShapeD1Ev>:

AbstractShape::~AbstractShape()
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b082      	sub	sp, #8
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
 80166d8:	4a05      	ldr	r2, [pc, #20]	; (80166f0 <_ZN8touchgfx13AbstractShapeD1Ev+0x20>)
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	601a      	str	r2, [r3, #0]
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	4618      	mov	r0, r3
 80166e2:	f001 fa81 	bl	8017be8 <_ZN8touchgfx12CanvasWidgetD1Ev>
{
}
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	4618      	mov	r0, r3
 80166ea:	3708      	adds	r7, #8
 80166ec:	46bd      	mov	sp, r7
 80166ee:	bd80      	pop	{r7, pc}
 80166f0:	0802d35c 	.word	0x0802d35c

080166f4 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE>:

bool AbstractShape::drawCanvasWidget(const Rect& invalidatedArea) const
{
 80166f4:	b590      	push	{r4, r7, lr}
 80166f6:	b0b3      	sub	sp, #204	; 0xcc
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	6078      	str	r0, [r7, #4]
 80166fc:	6039      	str	r1, [r7, #0]
    Canvas canvas(this, invalidatedArea);
 80166fe:	6879      	ldr	r1, [r7, #4]
 8016700:	f107 0308 	add.w	r3, r7, #8
 8016704:	683a      	ldr	r2, [r7, #0]
 8016706:	4618      	mov	r0, r3
 8016708:	f000 fc0c 	bl	8016f24 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
    int numPoints = getNumPoints();
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	337c      	adds	r3, #124	; 0x7c
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	6878      	ldr	r0, [r7, #4]
 8016716:	4798      	blx	r3
 8016718:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
    if (numPoints == 0)
 801671c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016720:	2b00      	cmp	r3, #0
 8016722:	d101      	bne.n	8016728 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x34>
    {
        return true;
 8016724:	2401      	movs	r4, #1
 8016726:	e043      	b.n	80167b0 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0xbc>
    }

    canvas.moveTo(getCacheX(0), getCacheY(0));
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	3390      	adds	r3, #144	; 0x90
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	2100      	movs	r1, #0
 8016732:	6878      	ldr	r0, [r7, #4]
 8016734:	4798      	blx	r3
 8016736:	4604      	mov	r4, r0
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	3394      	adds	r3, #148	; 0x94
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	2100      	movs	r1, #0
 8016742:	6878      	ldr	r0, [r7, #4]
 8016744:	4798      	blx	r3
 8016746:	4602      	mov	r2, r0
 8016748:	f107 0308 	add.w	r3, r7, #8
 801674c:	4621      	mov	r1, r4
 801674e:	4618      	mov	r0, r3
 8016750:	f000 fe1a 	bl	8017388 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
    for (int i = 1; i < numPoints; i++)
 8016754:	2301      	movs	r3, #1
 8016756:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801675a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801675e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016762:	429a      	cmp	r2, r3
 8016764:	da1d      	bge.n	80167a2 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0xae>
    {
        canvas.lineTo(getCacheX(i), getCacheY(i));
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	3390      	adds	r3, #144	; 0x90
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8016772:	6878      	ldr	r0, [r7, #4]
 8016774:	4798      	blx	r3
 8016776:	4604      	mov	r4, r0
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	3394      	adds	r3, #148	; 0x94
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8016784:	6878      	ldr	r0, [r7, #4]
 8016786:	4798      	blx	r3
 8016788:	4602      	mov	r2, r0
 801678a:	f107 0308 	add.w	r3, r7, #8
 801678e:	4621      	mov	r1, r4
 8016790:	4618      	mov	r0, r3
 8016792:	f000 fe7d 	bl	8017490 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
    for (int i = 1; i < numPoints; i++)
 8016796:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801679a:	3301      	adds	r3, #1
 801679c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80167a0:	e7db      	b.n	801675a <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x66>
    }
    return canvas.render();
 80167a2:	f107 0308 	add.w	r3, r7, #8
 80167a6:	4618      	mov	r0, r3
 80167a8:	f000 ff37 	bl	801761a <_ZN8touchgfx6Canvas6renderEv>
 80167ac:	4603      	mov	r3, r0
 80167ae:	461c      	mov	r4, r3
    Canvas canvas(this, invalidatedArea);
 80167b0:	f107 0308 	add.w	r3, r7, #8
 80167b4:	4618      	mov	r0, r3
 80167b6:	f000 fdb7 	bl	8017328 <_ZN8touchgfx6CanvasD1Ev>
 80167ba:	4623      	mov	r3, r4
}
 80167bc:	4618      	mov	r0, r3
 80167be:	37cc      	adds	r7, #204	; 0xcc
 80167c0:	46bd      	mov	sp, r7
 80167c2:	bd90      	pop	{r4, r7, pc}

080167c4 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>:

void AbstractShape::updateAbstractShapeCache()
{
 80167c4:	b5b0      	push	{r4, r5, r7, lr}
 80167c6:	b09e      	sub	sp, #120	; 0x78
 80167c8:	af02      	add	r7, sp, #8
 80167ca:	6078      	str	r0, [r7, #4]
    int numPoints = getNumPoints();
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	337c      	adds	r3, #124	; 0x7c
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	6878      	ldr	r0, [r7, #4]
 80167d6:	4798      	blx	r3
 80167d8:	65b8      	str	r0, [r7, #88]	; 0x58

    int xMin = 0;
 80167da:	2300      	movs	r3, #0
 80167dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    int xMax = 0;
 80167de:	2300      	movs	r3, #0
 80167e0:	66bb      	str	r3, [r7, #104]	; 0x68
    int yMin = 0;
 80167e2:	2300      	movs	r3, #0
 80167e4:	667b      	str	r3, [r7, #100]	; 0x64
    int yMax = 0;
 80167e6:	2300      	movs	r3, #0
 80167e8:	663b      	str	r3, [r7, #96]	; 0x60

    for (int i = 0; i < numPoints; i++)
 80167ea:	2300      	movs	r3, #0
 80167ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80167ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80167f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80167f2:	429a      	cmp	r2, r3
 80167f4:	f280 8101 	bge.w	80169fa <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x236>
    {
        CWRUtil::Q5 xCorner = getCornerX(i);
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	3384      	adds	r3, #132	; 0x84
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8016802:	6878      	ldr	r0, [r7, #4]
 8016804:	4798      	blx	r3
 8016806:	4603      	mov	r3, r0
 8016808:	617b      	str	r3, [r7, #20]
        CWRUtil::Q5 yCorner = getCornerY(i);
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	3388      	adds	r3, #136	; 0x88
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8016814:	6878      	ldr	r0, [r7, #4]
 8016816:	4798      	blx	r3
 8016818:	4603      	mov	r3, r0
 801681a:	613b      	str	r3, [r7, #16]

        CWRUtil::Q5 xCache = dx + ((CWRUtil::mulQ5(xCorner, xScale) * CWRUtil::cosine(shapeAngle))) - ((CWRUtil::mulQ5(yCorner, yScale) * CWRUtil::sine(shapeAngle)));
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8016826:	6978      	ldr	r0, [r7, #20]
 8016828:	f7ff fedb 	bl	80165e2 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 801682c:	4603      	mov	r3, r0
 801682e:	623b      	str	r3, [r7, #32]
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016834:	f7ff fe87 	bl	8016546 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016838:	4603      	mov	r3, r0
 801683a:	627b      	str	r3, [r7, #36]	; 0x24
 801683c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8016840:	f107 0320 	add.w	r3, r7, #32
 8016844:	4611      	mov	r1, r2
 8016846:	4618      	mov	r0, r3
 8016848:	f7ff fd3a 	bl	80162c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801684c:	4603      	mov	r3, r0
 801684e:	61fb      	str	r3, [r7, #28]
 8016850:	f107 031c 	add.w	r3, r7, #28
 8016854:	4619      	mov	r1, r3
 8016856:	4620      	mov	r0, r4
 8016858:	f7fd fad7 	bl	8013e0a <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>
 801685c:	4603      	mov	r3, r0
 801685e:	61bb      	str	r3, [r7, #24]
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8016864:	6938      	ldr	r0, [r7, #16]
 8016866:	f7ff febc 	bl	80165e2 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 801686a:	4603      	mov	r3, r0
 801686c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016872:	f7ff fddd 	bl	8016430 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016876:	4603      	mov	r3, r0
 8016878:	633b      	str	r3, [r7, #48]	; 0x30
 801687a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801687e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016882:	4611      	mov	r1, r2
 8016884:	4618      	mov	r0, r3
 8016886:	f7ff fd1b 	bl	80162c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801688a:	4603      	mov	r3, r0
 801688c:	62bb      	str	r3, [r7, #40]	; 0x28
 801688e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016892:	f107 0318 	add.w	r3, r7, #24
 8016896:	4611      	mov	r1, r2
 8016898:	4618      	mov	r0, r3
 801689a:	f7fd facb 	bl	8013e34 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 801689e:	4603      	mov	r3, r0
 80168a0:	60fb      	str	r3, [r7, #12]
        if (i == 0 || xCache.to<int>() > xMax)
 80168a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d008      	beq.n	80168ba <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xf6>
 80168a8:	f107 030c 	add.w	r3, r7, #12
 80168ac:	4618      	mov	r0, r3
 80168ae:	f7fd fad6 	bl	8013e5e <_ZNK8touchgfx7CWRUtil2Q52toIiEET_v>
 80168b2:	4602      	mov	r2, r0
 80168b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80168b6:	4293      	cmp	r3, r2
 80168b8:	da01      	bge.n	80168be <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xfa>
 80168ba:	2301      	movs	r3, #1
 80168bc:	e000      	b.n	80168c0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xfc>
 80168be:	2300      	movs	r3, #0
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d005      	beq.n	80168d0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x10c>
        {
            xMax = xCache.to<int>();
 80168c4:	f107 030c 	add.w	r3, r7, #12
 80168c8:	4618      	mov	r0, r3
 80168ca:	f7fd fac8 	bl	8013e5e <_ZNK8touchgfx7CWRUtil2Q52toIiEET_v>
 80168ce:	66b8      	str	r0, [r7, #104]	; 0x68
        }
        if (i == 0 || xCache.to<int>() < xMin)
 80168d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d008      	beq.n	80168e8 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x124>
 80168d6:	f107 030c 	add.w	r3, r7, #12
 80168da:	4618      	mov	r0, r3
 80168dc:	f7fd fabf 	bl	8013e5e <_ZNK8touchgfx7CWRUtil2Q52toIiEET_v>
 80168e0:	4602      	mov	r2, r0
 80168e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80168e4:	4293      	cmp	r3, r2
 80168e6:	dd01      	ble.n	80168ec <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x128>
 80168e8:	2301      	movs	r3, #1
 80168ea:	e000      	b.n	80168ee <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x12a>
 80168ec:	2300      	movs	r3, #0
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d005      	beq.n	80168fe <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x13a>
        {
            xMin = xCache.to<int>();
 80168f2:	f107 030c 	add.w	r3, r7, #12
 80168f6:	4618      	mov	r0, r3
 80168f8:	f7fd fab1 	bl	8013e5e <_ZNK8touchgfx7CWRUtil2Q52toIiEET_v>
 80168fc:	66f8      	str	r0, [r7, #108]	; 0x6c
        }
        CWRUtil::Q5 yCache = dy + ((CWRUtil::mulQ5(yCorner, yScale) * CWRUtil::cosine(shapeAngle))) + ((CWRUtil::mulQ5(xCorner, xScale) * CWRUtil::sine(shapeAngle)));
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8016908:	6938      	ldr	r0, [r7, #16]
 801690a:	f7ff fe6a 	bl	80165e2 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 801690e:	4603      	mov	r3, r0
 8016910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016916:	f7ff fe16 	bl	8016546 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801691a:	4603      	mov	r3, r0
 801691c:	643b      	str	r3, [r7, #64]	; 0x40
 801691e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016922:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016926:	4611      	mov	r1, r2
 8016928:	4618      	mov	r0, r3
 801692a:	f7ff fcc9 	bl	80162c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801692e:	4603      	mov	r3, r0
 8016930:	63bb      	str	r3, [r7, #56]	; 0x38
 8016932:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016936:	4619      	mov	r1, r3
 8016938:	4620      	mov	r0, r4
 801693a:	f7fd fa66 	bl	8013e0a <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>
 801693e:	4603      	mov	r3, r0
 8016940:	637b      	str	r3, [r7, #52]	; 0x34
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8016946:	6978      	ldr	r0, [r7, #20]
 8016948:	f7ff fe4b 	bl	80165e2 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 801694c:	4603      	mov	r3, r0
 801694e:	64bb      	str	r3, [r7, #72]	; 0x48
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016954:	f7ff fd6c 	bl	8016430 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016958:	4603      	mov	r3, r0
 801695a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801695c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016960:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016964:	4611      	mov	r1, r2
 8016966:	4618      	mov	r0, r3
 8016968:	f7ff fcaa 	bl	80162c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801696c:	4603      	mov	r3, r0
 801696e:	647b      	str	r3, [r7, #68]	; 0x44
 8016970:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8016974:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016978:	4611      	mov	r1, r2
 801697a:	4618      	mov	r0, r3
 801697c:	f7fd fa45 	bl	8013e0a <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>
 8016980:	4603      	mov	r3, r0
 8016982:	60bb      	str	r3, [r7, #8]
        if (i == 0 || yCache.to<int>() > yMax)
 8016984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016986:	2b00      	cmp	r3, #0
 8016988:	d008      	beq.n	801699c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x1d8>
 801698a:	f107 0308 	add.w	r3, r7, #8
 801698e:	4618      	mov	r0, r3
 8016990:	f7fd fa65 	bl	8013e5e <_ZNK8touchgfx7CWRUtil2Q52toIiEET_v>
 8016994:	4602      	mov	r2, r0
 8016996:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016998:	4293      	cmp	r3, r2
 801699a:	da01      	bge.n	80169a0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x1dc>
 801699c:	2301      	movs	r3, #1
 801699e:	e000      	b.n	80169a2 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x1de>
 80169a0:	2300      	movs	r3, #0
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d005      	beq.n	80169b2 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x1ee>
        {
            yMax = yCache.to<int>();
 80169a6:	f107 0308 	add.w	r3, r7, #8
 80169aa:	4618      	mov	r0, r3
 80169ac:	f7fd fa57 	bl	8013e5e <_ZNK8touchgfx7CWRUtil2Q52toIiEET_v>
 80169b0:	6638      	str	r0, [r7, #96]	; 0x60
        }
        if (i == 0 || yCache.to<int>() < yMin)
 80169b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d008      	beq.n	80169ca <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x206>
 80169b8:	f107 0308 	add.w	r3, r7, #8
 80169bc:	4618      	mov	r0, r3
 80169be:	f7fd fa4e 	bl	8013e5e <_ZNK8touchgfx7CWRUtil2Q52toIiEET_v>
 80169c2:	4602      	mov	r2, r0
 80169c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80169c6:	4293      	cmp	r3, r2
 80169c8:	dd01      	ble.n	80169ce <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x20a>
 80169ca:	2301      	movs	r3, #1
 80169cc:	e000      	b.n	80169d0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x20c>
 80169ce:	2300      	movs	r3, #0
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d005      	beq.n	80169e0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x21c>
        {
            yMin = yCache.to<int>();
 80169d4:	f107 0308 	add.w	r3, r7, #8
 80169d8:	4618      	mov	r0, r3
 80169da:	f7fd fa40 	bl	8013e5e <_ZNK8touchgfx7CWRUtil2Q52toIiEET_v>
 80169de:	6678      	str	r0, [r7, #100]	; 0x64
        }
        setCache(i, xCache, yCache);
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	338c      	adds	r3, #140	; 0x8c
 80169e6:	681c      	ldr	r4, [r3, #0]
 80169e8:	68bb      	ldr	r3, [r7, #8]
 80169ea:	68fa      	ldr	r2, [r7, #12]
 80169ec:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80169ee:	6878      	ldr	r0, [r7, #4]
 80169f0:	47a0      	blx	r4
    for (int i = 0; i < numPoints; i++)
 80169f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80169f4:	3301      	adds	r3, #1
 80169f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80169f8:	e6f9      	b.n	80167ee <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x2a>
    }
    minimalRect = Rect(xMin, yMin, xMax - xMin + 1, yMax - yMin + 1);
 80169fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80169fc:	b219      	sxth	r1, r3
 80169fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016a00:	b21c      	sxth	r4, r3
 8016a02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016a04:	b29a      	uxth	r2, r3
 8016a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a08:	b29b      	uxth	r3, r3
 8016a0a:	1ad3      	subs	r3, r2, r3
 8016a0c:	b29b      	uxth	r3, r3
 8016a0e:	3301      	adds	r3, #1
 8016a10:	b29b      	uxth	r3, r3
 8016a12:	b21d      	sxth	r5, r3
 8016a14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016a16:	b29a      	uxth	r2, r3
 8016a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016a1a:	b29b      	uxth	r3, r3
 8016a1c:	1ad3      	subs	r3, r2, r3
 8016a1e:	b29b      	uxth	r3, r3
 8016a20:	3301      	adds	r3, #1
 8016a22:	b29b      	uxth	r3, r3
 8016a24:	b21b      	sxth	r3, r3
 8016a26:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8016a2a:	9300      	str	r3, [sp, #0]
 8016a2c:	462b      	mov	r3, r5
 8016a2e:	4622      	mov	r2, r4
 8016a30:	f7fb fcf4 	bl	801241c <_ZN8touchgfx4RectC1Essss>
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	3344      	adds	r3, #68	; 0x44
 8016a38:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8016a3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016a40:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8016a44:	bf00      	nop
 8016a46:	3770      	adds	r7, #112	; 0x70
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	bdb0      	pop	{r4, r5, r7, pc}

08016a4c <_ZNK8touchgfx13AbstractShape14getMinimalRectEv>:

Rect AbstractShape::getMinimalRect() const
{
 8016a4c:	b480      	push	{r7}
 8016a4e:	b083      	sub	sp, #12
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	6078      	str	r0, [r7, #4]
 8016a54:	6039      	str	r1, [r7, #0]
    return minimalRect;
 8016a56:	687a      	ldr	r2, [r7, #4]
 8016a58:	683b      	ldr	r3, [r7, #0]
 8016a5a:	3344      	adds	r3, #68	; 0x44
 8016a5c:	cb03      	ldmia	r3!, {r0, r1}
 8016a5e:	6010      	str	r0, [r2, #0]
 8016a60:	6051      	str	r1, [r2, #4]
}
 8016a62:	6878      	ldr	r0, [r7, #4]
 8016a64:	370c      	adds	r7, #12
 8016a66:	46bd      	mov	sp, r7
 8016a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a6c:	4770      	bx	lr

08016a6e <_ZNK8touchgfx4Cell11packedCoordEv>:
     *        Packed coordinates of the Cell. By packing the x coordinate and y coordinate into
     *        one int, it is possible to sort Cells using a single comparison.
     *
     * @return The packed coordinates with y in the high part and x in the low part.
     */
    int packedCoord() const
 8016a6e:	b480      	push	{r7}
 8016a70:	b083      	sub	sp, #12
 8016a72:	af00      	add	r7, sp, #0
 8016a74:	6078      	str	r0, [r7, #4]
    {
        return (y << 16) + x;
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016a7c:	041b      	lsls	r3, r3, #16
 8016a7e:	687a      	ldr	r2, [r7, #4]
 8016a80:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016a84:	4413      	add	r3, r2
    }
 8016a86:	4618      	mov	r0, r3
 8016a88:	370c      	adds	r7, #12
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a90:	4770      	bx	lr

08016a92 <_ZNK8touchgfx7Outline11getNumCellsEv>:
     *
     *        Gets number cells registered in the current drawn path for the Outline.
     *
     * @return The number of cells.
     */
    unsigned getNumCells() const
 8016a92:	b480      	push	{r7}
 8016a94:	b083      	sub	sp, #12
 8016a96:	af00      	add	r7, sp, #0
 8016a98:	6078      	str	r0, [r7, #4]
    {
        return numCells;
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	689b      	ldr	r3, [r3, #8]
    }
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	370c      	adds	r7, #12
 8016aa2:	46bd      	mov	sp, r7
 8016aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa8:	4770      	bx	lr

08016aaa <_ZN8touchgfx7Outline13setMaxRenderYEi>:
     *        Sets maximum render y coordinate. This is used to avoid registering any Cell that
     *        has a y coordinate less than zero of higher than the given y.
     *
     * @param y The max y coordinate to render for the Outline.
     */
    void setMaxRenderY(int y)
 8016aaa:	b480      	push	{r7}
 8016aac:	b083      	sub	sp, #12
 8016aae:	af00      	add	r7, sp, #0
 8016ab0:	6078      	str	r0, [r7, #4]
 8016ab2:	6039      	str	r1, [r7, #0]
    {
        maxRenderY = y;
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	683a      	ldr	r2, [r7, #0]
 8016ab8:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8016aba:	bf00      	nop
 8016abc:	370c      	adds	r7, #12
 8016abe:	46bd      	mov	sp, r7
 8016ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac4:	4770      	bx	lr

08016ac6 <_ZN8touchgfx7Outline20wasOutlineTooComplexEv>:
     *        Determines if there was enough memory to register the entire outline, of if the
     *        outline was too complex.
     *
     * @return false if the buffer for Outline Cell objects was too small.
     */
    bool wasOutlineTooComplex()
 8016ac6:	b480      	push	{r7}
 8016ac8:	b083      	sub	sp, #12
 8016aca:	af00      	add	r7, sp, #0
 8016acc:	6078      	str	r0, [r7, #4]
    {
        return outlineTooComplex;
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    }
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	370c      	adds	r7, #12
 8016ad8:	46bd      	mov	sp, r7
 8016ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ade:	4770      	bx	lr

08016ae0 <_ZNK8touchgfx15RenderingBuffer10getXAdjustEv>:
     *
     *        Gets x coordinate adjust.
     *
     * @return The x coordinate adjust.
     */
    unsigned char getXAdjust() const
 8016ae0:	b480      	push	{r7}
 8016ae2:	b083      	sub	sp, #12
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
    {
        return xAdjust;
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	791b      	ldrb	r3, [r3, #4]
    }
 8016aec:	4618      	mov	r0, r3
 8016aee:	370c      	adds	r7, #12
 8016af0:	46bd      	mov	sp, r7
 8016af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af6:	4770      	bx	lr

08016af8 <_ZNK8touchgfx15RenderingBuffer8getWidthEv>:
     *
     *        Gets the width.
     *
     * @return The width.
     */
    unsigned getWidth() const
 8016af8:	b480      	push	{r7}
 8016afa:	b083      	sub	sp, #12
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	6078      	str	r0, [r7, #4]
    {
        return width;
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	689b      	ldr	r3, [r3, #8]
    }
 8016b04:	4618      	mov	r0, r3
 8016b06:	370c      	adds	r7, #12
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b0e:	4770      	bx	lr

08016b10 <_ZNK8touchgfx15RenderingBuffer9getHeightEv>:
     *
     *        Gets the height.
     *
     * @return The height.
     */
    unsigned getHeight() const
 8016b10:	b480      	push	{r7}
 8016b12:	b083      	sub	sp, #12
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
    {
        return height;
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	68db      	ldr	r3, [r3, #12]
    }
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	370c      	adds	r7, #12
 8016b20:	46bd      	mov	sp, r7
 8016b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b26:	4770      	bx	lr

08016b28 <_ZN8touchgfx15RenderingBuffer3rowEj>:
     *
     * @param y The line number, ie the row.
     *
     * @return The pointer to the start of the given line in the RenderingBuffer.
     */
    unsigned char* row(unsigned y)
 8016b28:	b480      	push	{r7}
 8016b2a:	b083      	sub	sp, #12
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
 8016b30:	6039      	str	r1, [r7, #0]
    {
        return buf + stride * y;
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	681a      	ldr	r2, [r3, #0]
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	691b      	ldr	r3, [r3, #16]
 8016b3a:	4619      	mov	r1, r3
 8016b3c:	683b      	ldr	r3, [r7, #0]
 8016b3e:	fb03 f301 	mul.w	r3, r3, r1
 8016b42:	4413      	add	r3, r2
    }
 8016b44:	4618      	mov	r0, r3
 8016b46:	370c      	adds	r7, #12
 8016b48:	46bd      	mov	sp, r7
 8016b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4e:	4770      	bx	lr

08016b50 <_ZN8touchgfx8Scanline8iteratorC1ERKS0_>:
         *        Constructor. Creates an iterator to help go through all the Scanline parts of
         *        the polygon on a single Scanline.
         *
         * @param scanline The scanline to iterate.
         */
        iterator(const Scanline& scanline) :
 8016b50:	b480      	push	{r7}
 8016b52:	b083      	sub	sp, #12
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
 8016b58:	6039      	str	r1, [r7, #0]
            covers(scanline.covers),
 8016b5a:	683b      	ldr	r3, [r7, #0]
 8016b5c:	699a      	ldr	r2, [r3, #24]
            curCount(scanline.counts),
            curStartIndex(scanline.startIndices)
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	601a      	str	r2, [r3, #0]
            curCount(scanline.counts),
 8016b62:	683b      	ldr	r3, [r7, #0]
 8016b64:	6a1a      	ldr	r2, [r3, #32]
            curStartIndex(scanline.startIndices)
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	605a      	str	r2, [r3, #4]
 8016b6a:	683b      	ldr	r3, [r7, #0]
 8016b6c:	69da      	ldr	r2, [r3, #28]
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	609a      	str	r2, [r3, #8]
        {
        }
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	4618      	mov	r0, r3
 8016b76:	370c      	adds	r7, #12
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7e:	4770      	bx	lr

08016b80 <_ZN8touchgfx8Scanline8iterator4nextEv>:
         *
         *        Gets the next element on the Scanline.
         *
         * @return An the next index in the array of Scanline elements.
         */
        int next()
 8016b80:	b480      	push	{r7}
 8016b82:	b083      	sub	sp, #12
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
        {
            ++curCount;
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	685b      	ldr	r3, [r3, #4]
 8016b8c:	1c9a      	adds	r2, r3, #2
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	605a      	str	r2, [r3, #4]
            ++curStartIndex;
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	689b      	ldr	r3, [r3, #8]
 8016b96:	1c9a      	adds	r2, r3, #2
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	609a      	str	r2, [r3, #8]
            return int(*curStartIndex);
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	689b      	ldr	r3, [r3, #8]
 8016ba0:	881b      	ldrh	r3, [r3, #0]
        }
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	370c      	adds	r7, #12
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bac:	4770      	bx	lr

08016bae <_ZNK8touchgfx8Scanline8iterator9getNumPixEv>:
         *
         *        Gets number of consecutive pixels in the current run on the Scanline.
         *
         * @return The number of consecutive pixels.
         */
        int getNumPix() const
 8016bae:	b480      	push	{r7}
 8016bb0:	b083      	sub	sp, #12
 8016bb2:	af00      	add	r7, sp, #0
 8016bb4:	6078      	str	r0, [r7, #4]
        {
            return int(*curCount);
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	685b      	ldr	r3, [r3, #4]
 8016bba:	881b      	ldrh	r3, [r3, #0]
        }
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	370c      	adds	r7, #12
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc6:	4770      	bx	lr

08016bc8 <_ZNK8touchgfx8Scanline8iterator9getCoversEv>:
         *
         *        Gets the covers in the current run on the Scanline.
         *
         * @return array of covers of each individual pixel.
         */
        const uint8_t* getCovers() const
 8016bc8:	b480      	push	{r7}
 8016bca:	b083      	sub	sp, #12
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]
        {
            return covers + *curStartIndex;
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	687a      	ldr	r2, [r7, #4]
 8016bd6:	6892      	ldr	r2, [r2, #8]
 8016bd8:	8812      	ldrh	r2, [r2, #0]
 8016bda:	4413      	add	r3, r2
        }
 8016bdc:	4618      	mov	r0, r3
 8016bde:	370c      	adds	r7, #12
 8016be0:	46bd      	mov	sp, r7
 8016be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be6:	4770      	bx	lr

08016be8 <_ZN8touchgfx8ScanlineD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Scanline() { }
 8016be8:	b480      	push	{r7}
 8016bea:	b083      	sub	sp, #12
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	6078      	str	r0, [r7, #4]
 8016bf0:	4a04      	ldr	r2, [pc, #16]	; (8016c04 <_ZN8touchgfx8ScanlineD1Ev+0x1c>)
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	601a      	str	r2, [r3, #0]
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	370c      	adds	r7, #12
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c02:	4770      	bx	lr
 8016c04:	0802d40c 	.word	0x0802d40c

08016c08 <_ZN8touchgfx8ScanlineD0Ev>:
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b082      	sub	sp, #8
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
 8016c10:	6878      	ldr	r0, [r7, #4]
 8016c12:	f7ff ffe9 	bl	8016be8 <_ZN8touchgfx8ScanlineD1Ev>
 8016c16:	2124      	movs	r1, #36	; 0x24
 8016c18:	6878      	ldr	r0, [r7, #4]
 8016c1a:	f013 fc82 	bl	802a522 <_ZdlPvj>
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	4618      	mov	r0, r3
 8016c22:	3708      	adds	r7, #8
 8016c24:	46bd      	mov	sp, r7
 8016c26:	bd80      	pop	{r7, pc}

08016c28 <_ZNK8touchgfx8Scanline4getYEv>:
     *        Gets y coordinate, i.e. the vertical offset of the Scanline. This allows easy
     *        positioning of the Outline. The y coordinate is setup through function reset().
     *
     * @return The y coordinate.
     */
    int getY() const
 8016c28:	b480      	push	{r7}
 8016c2a:	b083      	sub	sp, #12
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
    {
        return lastY;
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	689b      	ldr	r3, [r3, #8]
    }
 8016c34:	4618      	mov	r0, r3
 8016c36:	370c      	adds	r7, #12
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3e:	4770      	bx	lr

08016c40 <_ZNK8touchgfx8Scanline11getNumSpansEv>:
     *
     *        Gets number spans in the Scanline.
     *
     * @return The number spans.
     */
    unsigned getNumSpans() const
 8016c40:	b480      	push	{r7}
 8016c42:	b083      	sub	sp, #12
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
    {
        return numSpans;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	68db      	ldr	r3, [r3, #12]
    }
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	370c      	adds	r7, #12
 8016c50:	46bd      	mov	sp, r7
 8016c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c56:	4770      	bx	lr

08016c58 <_ZN8touchgfx8RendererC1ERNS_15RenderingBufferERNS_15AbstractPainterE>:
     *
     * @param [in] renderingBuffer The screen buffer to render the polygon in.
     * @param [in] painter         The painter to use for drawing individual pixels in a
     *                             scanline.
     */
    Renderer(RenderingBuffer& renderingBuffer, AbstractPainter& painter)
 8016c58:	b480      	push	{r7}
 8016c5a:	b085      	sub	sp, #20
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	60f8      	str	r0, [r7, #12]
 8016c60:	60b9      	str	r1, [r7, #8]
 8016c62:	607a      	str	r2, [r7, #4]
        : renderingBuffer(&renderingBuffer), painter(&painter)
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	68ba      	ldr	r2, [r7, #8]
 8016c68:	601a      	str	r2, [r3, #0]
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	687a      	ldr	r2, [r7, #4]
 8016c6e:	605a      	str	r2, [r3, #4]
    {
    }
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	4618      	mov	r0, r3
 8016c74:	3714      	adds	r7, #20
 8016c76:	46bd      	mov	sp, r7
 8016c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7c:	4770      	bx	lr

08016c7e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
     *
     *        Render the given Scanline in the given color.
     *
     * @param scanline The Scanline.
     */
    void render(const Scanline& scanline)
 8016c7e:	b590      	push	{r4, r7, lr}
 8016c80:	b093      	sub	sp, #76	; 0x4c
 8016c82:	af04      	add	r7, sp, #16
 8016c84:	6078      	str	r0, [r7, #4]
 8016c86:	6039      	str	r1, [r7, #0]
    {
        if (scanline.getY() < 0 || scanline.getY() >= int(renderingBuffer->getHeight()))
 8016c88:	6838      	ldr	r0, [r7, #0]
 8016c8a:	f7ff ffcd 	bl	8016c28 <_ZNK8touchgfx8Scanline4getYEv>
 8016c8e:	4603      	mov	r3, r0
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	db0b      	blt.n	8016cac <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x2e>
 8016c94:	6838      	ldr	r0, [r7, #0]
 8016c96:	f7ff ffc7 	bl	8016c28 <_ZNK8touchgfx8Scanline4getYEv>
 8016c9a:	4604      	mov	r4, r0
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f7ff ff35 	bl	8016b10 <_ZNK8touchgfx15RenderingBuffer9getHeightEv>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	429c      	cmp	r4, r3
 8016caa:	db01      	blt.n	8016cb0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x32>
 8016cac:	2301      	movs	r3, #1
 8016cae:	e000      	b.n	8016cb2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x34>
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	f040 8083 	bne.w	8016dbe <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x140>
        {
            return;
        }

        unsigned numSpans = scanline.getNumSpans();
 8016cb8:	6838      	ldr	r0, [r7, #0]
 8016cba:	f7ff ffc1 	bl	8016c40 <_ZNK8touchgfx8Scanline11getNumSpansEv>
 8016cbe:	6378      	str	r0, [r7, #52]	; 0x34
        int baseX = 0;
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	627b      	str	r3, [r7, #36]	; 0x24
        int y = scanline.getY();
 8016cc4:	6838      	ldr	r0, [r7, #0]
 8016cc6:	f7ff ffaf 	bl	8016c28 <_ZNK8touchgfx8Scanline4getYEv>
 8016cca:	6238      	str	r0, [r7, #32]
        unsigned char* row = renderingBuffer->row(y);
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	6a3a      	ldr	r2, [r7, #32]
 8016cd2:	4611      	mov	r1, r2
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	f7ff ff27 	bl	8016b28 <_ZN8touchgfx15RenderingBuffer3rowEj>
 8016cda:	61f8      	str	r0, [r7, #28]
        Scanline::iterator spanIterator(scanline);
 8016cdc:	f107 030c 	add.w	r3, r7, #12
 8016ce0:	6839      	ldr	r1, [r7, #0]
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	f7ff ff34 	bl	8016b50 <_ZN8touchgfx8Scanline8iteratorC1ERKS0_>

        uint8_t xAdjust = renderingBuffer->getXAdjust();
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	4618      	mov	r0, r3
 8016cee:	f7ff fef7 	bl	8016ae0 <_ZNK8touchgfx15RenderingBuffer10getXAdjustEv>
 8016cf2:	4603      	mov	r3, r0
 8016cf4:	76fb      	strb	r3, [r7, #27]
        do
        {
            int x = spanIterator.next() + baseX;
 8016cf6:	f107 030c 	add.w	r3, r7, #12
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	f7ff ff40 	bl	8016b80 <_ZN8touchgfx8Scanline8iterator4nextEv>
 8016d00:	4602      	mov	r2, r0
 8016d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d04:	4413      	add	r3, r2
 8016d06:	633b      	str	r3, [r7, #48]	; 0x30
            const uint8_t* covers = spanIterator.getCovers();
 8016d08:	f107 030c 	add.w	r3, r7, #12
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	f7ff ff5b 	bl	8016bc8 <_ZNK8touchgfx8Scanline8iterator9getCoversEv>
 8016d12:	62f8      	str	r0, [r7, #44]	; 0x2c
            int numPix = spanIterator.getNumPix();
 8016d14:	f107 030c 	add.w	r3, r7, #12
 8016d18:	4618      	mov	r0, r3
 8016d1a:	f7ff ff48 	bl	8016bae <_ZNK8touchgfx8Scanline8iterator9getNumPixEv>
 8016d1e:	62b8      	str	r0, [r7, #40]	; 0x28
            if (x < 0)
 8016d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	da0d      	bge.n	8016d42 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0xc4>
            {
                numPix += x;
 8016d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d2a:	4413      	add	r3, r2
 8016d2c:	62bb      	str	r3, [r7, #40]	; 0x28
                if (numPix <= 0)
 8016d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	dd35      	ble.n	8016da0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x122>
                {
                    continue;
                }
                covers -= x;
 8016d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d36:	425b      	negs	r3, r3
 8016d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016d3a:	4413      	add	r3, r2
 8016d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
                x = 0;
 8016d3e:	2300      	movs	r3, #0
 8016d40:	633b      	str	r3, [r7, #48]	; 0x30
            }
            if (x + numPix >= int(renderingBuffer->getWidth()))
 8016d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d46:	18d4      	adds	r4, r2, r3
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	f7ff fed3 	bl	8016af8 <_ZNK8touchgfx15RenderingBuffer8getWidthEv>
 8016d52:	4603      	mov	r3, r0
 8016d54:	429c      	cmp	r4, r3
 8016d56:	bfac      	ite	ge
 8016d58:	2301      	movge	r3, #1
 8016d5a:	2300      	movlt	r3, #0
 8016d5c:	b2db      	uxtb	r3, r3
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d00b      	beq.n	8016d7a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0xfc>
            {
                numPix = renderingBuffer->getWidth() - x;
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	4618      	mov	r0, r3
 8016d68:	f7ff fec6 	bl	8016af8 <_ZNK8touchgfx15RenderingBuffer8getWidthEv>
 8016d6c:	4602      	mov	r2, r0
 8016d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d70:	1ad3      	subs	r3, r2, r3
 8016d72:	62bb      	str	r3, [r7, #40]	; 0x28
                if (numPix <= 0)
 8016d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	dd14      	ble.n	8016da4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x126>
                {
                    continue;
                }
            }
            painter->render(row, x, xAdjust, y, numPix, covers);
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	6858      	ldr	r0, [r3, #4]
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	685b      	ldr	r3, [r3, #4]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	3308      	adds	r3, #8
 8016d86:	681c      	ldr	r4, [r3, #0]
 8016d88:	7ef9      	ldrb	r1, [r7, #27]
 8016d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016d8e:	9202      	str	r2, [sp, #8]
 8016d90:	9301      	str	r3, [sp, #4]
 8016d92:	6a3b      	ldr	r3, [r7, #32]
 8016d94:	9300      	str	r3, [sp, #0]
 8016d96:	460b      	mov	r3, r1
 8016d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d9a:	69f9      	ldr	r1, [r7, #28]
 8016d9c:	47a0      	blx	r4
 8016d9e:	e002      	b.n	8016da6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x128>
                    continue;
 8016da0:	bf00      	nop
 8016da2:	e000      	b.n	8016da6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x128>
                    continue;
 8016da4:	bf00      	nop
        }
        while (--numSpans);
 8016da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016da8:	3b01      	subs	r3, #1
 8016daa:	637b      	str	r3, [r7, #52]	; 0x34
 8016dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	bf14      	ite	ne
 8016db2:	2301      	movne	r3, #1
 8016db4:	2300      	moveq	r3, #0
 8016db6:	b2db      	uxtb	r3, r3
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d001      	beq.n	8016dc0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x142>
        do
 8016dbc:	e79b      	b.n	8016cf6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x78>
            return;
 8016dbe:	bf00      	nop
    }
 8016dc0:	373c      	adds	r7, #60	; 0x3c
 8016dc2:	46bd      	mov	sp, r7
 8016dc4:	bd90      	pop	{r4, r7, pc}

08016dc6 <_ZN8touchgfx10RasterizerC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Rasterizer()
 8016dc6:	b580      	push	{r7, lr}
 8016dc8:	b082      	sub	sp, #8
 8016dca:	af00      	add	r7, sp, #0
 8016dcc:	6078      	str	r0, [r7, #4]
        : fillingRule(FILL_NON_ZERO)
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	f00b feef 	bl	8022bb4 <_ZN8touchgfx7OutlineC1Ev>
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	3348      	adds	r3, #72	; 0x48
 8016dda:	4618      	mov	r0, r3
 8016ddc:	f00c ff96 	bl	8023d0c <_ZN8touchgfx8ScanlineC1Ev>
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	2200      	movs	r2, #0
 8016de4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    {
    }
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	4618      	mov	r0, r3
 8016dec:	3708      	adds	r7, #8
 8016dee:	46bd      	mov	sp, r7
 8016df0:	bd80      	pop	{r7, pc}

08016df2 <_ZN8touchgfx10Rasterizer5resetEv>:
     *
     * @brief Resets this object.
     *
     *        Resets this object. Basically this is done by resetting the the Outline.
     */
    void reset()
 8016df2:	b580      	push	{r7, lr}
 8016df4:	b082      	sub	sp, #8
 8016df6:	af00      	add	r7, sp, #0
 8016df8:	6078      	str	r0, [r7, #4]
    {
        outline.reset();
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f00b feb5 	bl	8022b6c <_ZN8touchgfx7Outline5resetEv>
    }
 8016e02:	bf00      	nop
 8016e04:	3708      	adds	r7, #8
 8016e06:	46bd      	mov	sp, r7
 8016e08:	bd80      	pop	{r7, pc}

08016e0a <_ZN8touchgfx10Rasterizer6moveToEii>:
     *        Move to.
     *
     * @param x The x coordinate.
     * @param y The y coordinate.
     */
    void moveTo(int x, int y)
 8016e0a:	b580      	push	{r7, lr}
 8016e0c:	b084      	sub	sp, #16
 8016e0e:	af00      	add	r7, sp, #0
 8016e10:	60f8      	str	r0, [r7, #12]
 8016e12:	60b9      	str	r1, [r7, #8]
 8016e14:	607a      	str	r2, [r7, #4]
    {
#ifndef SIMULATOR
        if (!outline.wasOutlineTooComplex())
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	4618      	mov	r0, r3
 8016e1a:	f7ff fe54 	bl	8016ac6 <_ZN8touchgfx7Outline20wasOutlineTooComplexEv>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	f083 0301 	eor.w	r3, r3, #1
 8016e24:	b2db      	uxtb	r3, r3
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d005      	beq.n	8016e36 <_ZN8touchgfx10Rasterizer6moveToEii+0x2c>
#endif
        {
            outline.moveTo(x, y);
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	687a      	ldr	r2, [r7, #4]
 8016e2e:	68b9      	ldr	r1, [r7, #8]
 8016e30:	4618      	mov	r0, r3
 8016e32:	f00c fd22 	bl	802387a <_ZN8touchgfx7Outline6moveToEii>
        }
    }
 8016e36:	bf00      	nop
 8016e38:	3710      	adds	r7, #16
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}

08016e3e <_ZN8touchgfx10Rasterizer6lineToEii>:
     *        Line to.
     *
     * @param x The x coordinate.
     * @param y The y coordinate.
     */
    void lineTo(int x, int y)
 8016e3e:	b580      	push	{r7, lr}
 8016e40:	b084      	sub	sp, #16
 8016e42:	af00      	add	r7, sp, #0
 8016e44:	60f8      	str	r0, [r7, #12]
 8016e46:	60b9      	str	r1, [r7, #8]
 8016e48:	607a      	str	r2, [r7, #4]
    {
#ifndef SIMULATOR
        if (!outline.wasOutlineTooComplex())
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	f7ff fe3a 	bl	8016ac6 <_ZN8touchgfx7Outline20wasOutlineTooComplexEv>
 8016e52:	4603      	mov	r3, r0
 8016e54:	f083 0301 	eor.w	r3, r3, #1
 8016e58:	b2db      	uxtb	r3, r3
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d005      	beq.n	8016e6a <_ZN8touchgfx10Rasterizer6lineToEii+0x2c>
#endif
        {
            outline.lineTo(x, y);
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	687a      	ldr	r2, [r7, #4]
 8016e62:	68b9      	ldr	r1, [r7, #8]
 8016e64:	4618      	mov	r0, r3
 8016e66:	f00c fcd8 	bl	802381a <_ZN8touchgfx7Outline6lineToEii>
        }
    }
 8016e6a:	bf00      	nop
 8016e6c:	3710      	adds	r7, #16
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	bd80      	pop	{r7, pc}

08016e72 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi>:
     *
     * @param area The area.
     *
     * @return The calculated alpha.
     */
    unsigned calculateAlpha(int area) const
 8016e72:	b480      	push	{r7}
 8016e74:	b085      	sub	sp, #20
 8016e76:	af00      	add	r7, sp, #0
 8016e78:	6078      	str	r0, [r7, #4]
 8016e7a:	6039      	str	r1, [r7, #0]
    {
        int cover = area >> (Rasterizer::POLY_BASE_SHIFT * 2 + 1 - AA_SHIFT);
 8016e7c:	683b      	ldr	r3, [r7, #0]
 8016e7e:	10db      	asrs	r3, r3, #3
 8016e80:	60fb      	str	r3, [r7, #12]

        if (cover < 0)
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	da02      	bge.n	8016e8e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi+0x1c>
        {
            cover = -cover;
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	425b      	negs	r3, r3
 8016e8c:	60fb      	str	r3, [r7, #12]
        }
        if (fillingRule == FILL_EVEN_ODD)
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8016e94:	2b01      	cmp	r3, #1
 8016e96:	d10b      	bne.n	8016eb0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi+0x3e>
        {
            cover &= AA_2MASK;
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e9e:	60fb      	str	r3, [r7, #12]
            if (cover > AA_NUM)
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ea6:	dd03      	ble.n	8016eb0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi+0x3e>
            {
                cover = AA_2NUM - cover;
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8016eae:	60fb      	str	r3, [r7, #12]
            }
        }
        if (cover > AA_MASK)
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	2bff      	cmp	r3, #255	; 0xff
 8016eb4:	dd01      	ble.n	8016eba <_ZNK8touchgfx10Rasterizer14calculateAlphaEi+0x48>
        {
            cover = AA_MASK;
 8016eb6:	23ff      	movs	r3, #255	; 0xff
 8016eb8:	60fb      	str	r3, [r7, #12]
        }
        return cover;
 8016eba:	68fb      	ldr	r3, [r7, #12]
    }
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	3714      	adds	r7, #20
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec6:	4770      	bx	lr

08016ec8 <_ZN8touchgfx10Rasterizer13setMaxRenderYEi>:
     *        Sets maximum render y coordinate. This is passed to the Outline to avoid registering
     *        any Cell that has a y coordinate less than zero of higher than the given y.
     *
     * @param y The max y coordinate to render for the Outline.
     */
    void setMaxRenderY(int y)
 8016ec8:	b580      	push	{r7, lr}
 8016eca:	b082      	sub	sp, #8
 8016ecc:	af00      	add	r7, sp, #0
 8016ece:	6078      	str	r0, [r7, #4]
 8016ed0:	6039      	str	r1, [r7, #0]
    {
        outline.setMaxRenderY(y);
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	6839      	ldr	r1, [r7, #0]
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f7ff fde7 	bl	8016aaa <_ZN8touchgfx7Outline13setMaxRenderYEi>
    }
 8016edc:	bf00      	nop
 8016ede:	3708      	adds	r7, #8
 8016ee0:	46bd      	mov	sp, r7
 8016ee2:	bd80      	pop	{r7, pc}

08016ee4 <_ZN8touchgfx10Rasterizer20wasOutlineTooComplexEv>:
     *
     *        Determines if we the outline was too complex to draw completely.
     *
     * @return True if it was too complex, false if not.
     */
    bool wasOutlineTooComplex()
 8016ee4:	b580      	push	{r7, lr}
 8016ee6:	b082      	sub	sp, #8
 8016ee8:	af00      	add	r7, sp, #0
 8016eea:	6078      	str	r0, [r7, #4]
    {
        return outline.wasOutlineTooComplex();
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	4618      	mov	r0, r3
 8016ef0:	f7ff fde9 	bl	8016ac6 <_ZN8touchgfx7Outline20wasOutlineTooComplexEv>
 8016ef4:	4603      	mov	r3, r0
    }
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	3708      	adds	r7, #8
 8016efa:	46bd      	mov	sp, r7
 8016efc:	bd80      	pop	{r7, pc}

08016efe <_ZN8touchgfx10RasterizerD1Ev>:
class Rasterizer
 8016efe:	b580      	push	{r7, lr}
 8016f00:	b082      	sub	sp, #8
 8016f02:	af00      	add	r7, sp, #0
 8016f04:	6078      	str	r0, [r7, #4]
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	3348      	adds	r3, #72	; 0x48
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	f7ff fe6c 	bl	8016be8 <_ZN8touchgfx8ScanlineD1Ev>
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	4618      	mov	r0, r3
 8016f14:	f00b fe22 	bl	8022b5c <_ZN8touchgfx7OutlineD1Ev>
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	3708      	adds	r7, #8
 8016f1e:	46bd      	mov	sp, r7
 8016f20:	bd80      	pop	{r7, pc}
	...

08016f24 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:

#include <touchgfx/widgets/canvas/Canvas.hpp>

namespace touchgfx
{
Canvas::Canvas(const CanvasWidget* _widget, const Rect& invalidatedArea) : widget(_widget),
 8016f24:	b590      	push	{r4, r7, lr}
 8016f26:	b099      	sub	sp, #100	; 0x64
 8016f28:	af02      	add	r7, sp, #8
 8016f2a:	60f8      	str	r0, [r7, #12]
 8016f2c:	60b9      	str	r1, [r7, #8]
 8016f2e:	607a      	str	r2, [r7, #4]
    enoughMemory(false), penUp(true), penHasBeenDown(false), previousOutside(0), penDownOutside(0)
 8016f30:	4ac4      	ldr	r2, [pc, #784]	; (8017244 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x320>)
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	601a      	str	r2, [r3, #0]
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	68ba      	ldr	r2, [r7, #8]
 8016f3a:	605a      	str	r2, [r3, #4]
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	3308      	adds	r3, #8
 8016f40:	4618      	mov	r0, r3
 8016f42:	f7fb ffc5 	bl	8012ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	330c      	adds	r3, #12
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	f7fb ffc0 	bl	8012ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	3310      	adds	r3, #16
 8016f54:	4618      	mov	r0, r3
 8016f56:	f7fb ffbb 	bl	8012ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	3314      	adds	r3, #20
 8016f5e:	4618      	mov	r0, r3
 8016f60:	f7fb ffb6 	bl	8012ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	3318      	adds	r3, #24
 8016f68:	4618      	mov	r0, r3
 8016f6a:	f00c ff19 	bl	8023da0 <_ZN8touchgfx15RenderingBufferC1Ev>
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	332c      	adds	r3, #44	; 0x2c
 8016f72:	4618      	mov	r0, r3
 8016f74:	f7ff ff27 	bl	8016dc6 <_ZN8touchgfx10RasterizerC1Ev>
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	2200      	movs	r2, #0
 8016f7c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	2201      	movs	r2, #1
 8016f84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	33a4      	adds	r3, #164	; 0xa4
 8016f94:	4618      	mov	r0, r3
 8016f96:	f7fb ff9b 	bl	8012ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	33a8      	adds	r3, #168	; 0xa8
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	f7fb ff96 	bl	8012ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	2200      	movs	r2, #0
 8016fa8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	2200      	movs	r2, #0
 8016fb0:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	33b0      	adds	r3, #176	; 0xb0
 8016fb8:	4618      	mov	r0, r3
 8016fba:	f7fb ff89 	bl	8012ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	33b4      	adds	r3, #180	; 0xb4
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	f7fb ff84 	bl	8012ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
{
    assert(CanvasWidgetRenderer::hasBuffer() && "No buffer allocated for CanvasWidgetRenderer drawing");
 8016fc8:	f00c fe58 	bl	8023c7c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8016fcc:	4603      	mov	r3, r0
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d105      	bne.n	8016fde <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xba>
 8016fd2:	4b9d      	ldr	r3, [pc, #628]	; (8017248 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x324>)
 8016fd4:	4a9d      	ldr	r2, [pc, #628]	; (801724c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x328>)
 8016fd6:	2117      	movs	r1, #23
 8016fd8:	489d      	ldr	r0, [pc, #628]	; (8017250 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x32c>)
 8016fda:	f014 f88d 	bl	802b0f8 <__assert_func>
 8016fde:	bf00      	nop
    assert(Rasterizer::POLY_BASE_SHIFT == 5 && "CanvasWidget assumes Q5 but Rasterizer uses a different setting");

    // Area to redraw (relative coordinates)
    Rect dirtyArea = Rect(0, 0, widget->getWidth(), widget->getHeight()) & invalidatedArea;
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	685b      	ldr	r3, [r3, #4]
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	f7fb ff0f 	bl	8012e08 <_ZNK8touchgfx8Drawable8getWidthEv>
 8016fea:	4603      	mov	r3, r0
 8016fec:	461c      	mov	r4, r3
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	685b      	ldr	r3, [r3, #4]
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	f7fb ff15 	bl	8012e22 <_ZNK8touchgfx8Drawable9getHeightEv>
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8016ffe:	9300      	str	r3, [sp, #0]
 8017000:	4623      	mov	r3, r4
 8017002:	2200      	movs	r2, #0
 8017004:	2100      	movs	r1, #0
 8017006:	f7fb fa09 	bl	801241c <_ZN8touchgfx4RectC1Essss>
 801700a:	f107 031c 	add.w	r3, r7, #28
 801700e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8017012:	687a      	ldr	r2, [r7, #4]
 8017014:	4618      	mov	r0, r3
 8017016:	f7fb faac 	bl	8012572 <_ZNK8touchgfx4RectanERKS0_>

    // Absolute position of the scalableImage.
    Rect dirtyAreaAbsolute = dirtyArea;
 801701a:	f107 0314 	add.w	r3, r7, #20
 801701e:	f107 021c 	add.w	r2, r7, #28
 8017022:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017026:	e883 0003 	stmia.w	r3, {r0, r1}
    widget->translateRectToAbsolute(dirtyAreaAbsolute);
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	685b      	ldr	r3, [r3, #4]
 801702e:	4618      	mov	r0, r3
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	685b      	ldr	r3, [r3, #4]
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	3324      	adds	r3, #36	; 0x24
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	f107 0214 	add.w	r2, r7, #20
 801703e:	4611      	mov	r1, r2
 8017040:	4798      	blx	r3

    // Transform rects to match frame buffer coordinates
    // This is needed if the display is rotated compared to the frame buffer
    DisplayTransformation::transformDisplayToFrameBuffer(dirtyArea, widget->getRect());
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	685b      	ldr	r3, [r3, #4]
 8017046:	4618      	mov	r0, r3
 8017048:	f7fb fbc7 	bl	80127da <_ZNK8touchgfx8Drawable7getRectEv>
 801704c:	4602      	mov	r2, r0
 801704e:	f107 031c 	add.w	r3, r7, #28
 8017052:	4611      	mov	r1, r2
 8017054:	4618      	mov	r0, r3
 8017056:	f00d f979 	bl	802434c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
    DisplayTransformation::transformDisplayToFrameBuffer(dirtyAreaAbsolute);
 801705a:	f107 0314 	add.w	r3, r7, #20
 801705e:	4618      	mov	r0, r3
 8017060:	f00d f98c 	bl	802437c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>

    // Re-size buffers for optimum memory buffer layout.
    enoughMemory = CanvasWidgetRenderer::setScanlineWidth(dirtyArea.width);
 8017064:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017068:	4618      	mov	r0, r3
 801706a:	f00c fd95 	bl	8023b98 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 801706e:	4603      	mov	r3, r0
 8017070:	461a      	mov	r2, r3
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    ras.reset();
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	332c      	adds	r3, #44	; 0x2c
 801707c:	4618      	mov	r0, r3
 801707e:	f7ff feb8 	bl	8016df2 <_ZN8touchgfx10Rasterizer5resetEv>

    offsetX = dirtyArea.x;
 8017082:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    offsetY = dirtyArea.y;
 801708c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
    invalidatedAreaX = CWRUtil::toQ5<int>(dirtyArea.x);
 8017096:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801709a:	63fb      	str	r3, [r7, #60]	; 0x3c
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 801709c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801709e:	015a      	lsls	r2, r3, #5
 80170a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80170a4:	4611      	mov	r1, r2
 80170a6:	4618      	mov	r0, r3
 80170a8:	f7fb ff20 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80170ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ae:	461a      	mov	r2, r3
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	609a      	str	r2, [r3, #8]
    invalidatedAreaY = CWRUtil::toQ5<int>(dirtyArea.y);
 80170b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80170b8:	643b      	str	r3, [r7, #64]	; 0x40
 80170ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80170bc:	015a      	lsls	r2, r3, #5
 80170be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80170c2:	4611      	mov	r1, r2
 80170c4:	4618      	mov	r0, r3
 80170c6:	f7fb ff11 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80170ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170cc:	461a      	mov	r2, r3
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	60da      	str	r2, [r3, #12]
    invalidatedAreaWidth = CWRUtil::toQ5<int>(dirtyArea.width);
 80170d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80170d6:	647b      	str	r3, [r7, #68]	; 0x44
 80170d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80170da:	015a      	lsls	r2, r3, #5
 80170dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80170e0:	4611      	mov	r1, r2
 80170e2:	4618      	mov	r0, r3
 80170e4:	f7fb ff02 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80170e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ea:	461a      	mov	r2, r3
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	611a      	str	r2, [r3, #16]
    invalidatedAreaHeight = CWRUtil::toQ5<int>(dirtyArea.height);
 80170f0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80170f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80170f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80170f8:	015a      	lsls	r2, r3, #5
 80170fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80170fe:	4611      	mov	r1, r2
 8017100:	4618      	mov	r0, r3
 8017102:	f7fb fef3 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8017106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017108:	461a      	mov	r2, r3
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	615a      	str	r2, [r3, #20]

    // Create the rendering buffer
    uint8_t* RESTRICT buf = reinterpret_cast<uint8_t*>(HAL::getInstance()->lockFrameBuffer());
 801710e:	f7fb f951 	bl	80123b4 <_ZN8touchgfx3HAL11getInstanceEv>
 8017112:	4602      	mov	r2, r0
 8017114:	6813      	ldr	r3, [r2, #0]
 8017116:	3320      	adds	r3, #32
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	4610      	mov	r0, r2
 801711c:	4798      	blx	r3
 801711e:	6578      	str	r0, [r7, #84]	; 0x54
    int stride = HAL::lcd().framebufferStride();
 8017120:	f7fb f954 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 8017124:	4602      	mov	r2, r0
 8017126:	6813      	ldr	r3, [r2, #0]
 8017128:	3328      	adds	r3, #40	; 0x28
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	4610      	mov	r0, r2
 801712e:	4798      	blx	r3
 8017130:	4603      	mov	r3, r0
 8017132:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint8_t offset = 0;
 8017134:	2300      	movs	r3, #0
 8017136:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    switch (HAL::lcd().framebufferFormat())
 801713a:	f7fb f947 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 801713e:	4602      	mov	r2, r0
 8017140:	6813      	ldr	r3, [r2, #0]
 8017142:	3324      	adds	r3, #36	; 0x24
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	4610      	mov	r0, r2
 8017148:	4798      	blx	r3
 801714a:	4603      	mov	r3, r0
 801714c:	2b0b      	cmp	r3, #11
 801714e:	f200 80c6 	bhi.w	80172de <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x3ba>
 8017152:	a201      	add	r2, pc, #4	; (adr r2, 8017158 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x234>)
 8017154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017158:	08017255 	.word	0x08017255
 801715c:	08017273 	.word	0x08017273
 8017160:	080172b5 	.word	0x080172b5
 8017164:	08017189 	.word	0x08017189
 8017168:	080172d3 	.word	0x080172d3
 801716c:	080171c9 	.word	0x080171c9
 8017170:	08017209 	.word	0x08017209
 8017174:	08017297 	.word	0x08017297
 8017178:	08017297 	.word	0x08017297
 801717c:	08017297 	.word	0x08017297
 8017180:	08017297 	.word	0x08017297
 8017184:	08017297 	.word	0x08017297
    {
    case Bitmap::BW:
        buf += (dirtyAreaAbsolute.x / 8) + dirtyAreaAbsolute.y * stride;
 8017188:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801718c:	2b00      	cmp	r3, #0
 801718e:	da00      	bge.n	8017192 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x26e>
 8017190:	3307      	adds	r3, #7
 8017192:	10db      	asrs	r3, r3, #3
 8017194:	b21b      	sxth	r3, r3
 8017196:	461a      	mov	r2, r3
 8017198:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801719c:	4619      	mov	r1, r3
 801719e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171a0:	fb03 f301 	mul.w	r3, r3, r1
 80171a4:	4413      	add	r3, r2
 80171a6:	461a      	mov	r2, r3
 80171a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80171aa:	4413      	add	r3, r2
 80171ac:	657b      	str	r3, [r7, #84]	; 0x54
        offset = dirtyAreaAbsolute.x % 8;
 80171ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80171b2:	425a      	negs	r2, r3
 80171b4:	f003 0307 	and.w	r3, r3, #7
 80171b8:	f002 0207 	and.w	r2, r2, #7
 80171bc:	bf58      	it	pl
 80171be:	4253      	negpl	r3, r2
 80171c0:	b21b      	sxth	r3, r3
 80171c2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        break;
 80171c6:	e08a      	b.n	80172de <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x3ba>
    case Bitmap::GRAY2:
        buf += (dirtyAreaAbsolute.x / 4) + dirtyAreaAbsolute.y * stride;
 80171c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	da00      	bge.n	80171d2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x2ae>
 80171d0:	3303      	adds	r3, #3
 80171d2:	109b      	asrs	r3, r3, #2
 80171d4:	b21b      	sxth	r3, r3
 80171d6:	461a      	mov	r2, r3
 80171d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80171dc:	4619      	mov	r1, r3
 80171de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171e0:	fb03 f301 	mul.w	r3, r3, r1
 80171e4:	4413      	add	r3, r2
 80171e6:	461a      	mov	r2, r3
 80171e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80171ea:	4413      	add	r3, r2
 80171ec:	657b      	str	r3, [r7, #84]	; 0x54
        offset = dirtyAreaAbsolute.x % 4;
 80171ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80171f2:	425a      	negs	r2, r3
 80171f4:	f003 0303 	and.w	r3, r3, #3
 80171f8:	f002 0203 	and.w	r2, r2, #3
 80171fc:	bf58      	it	pl
 80171fe:	4253      	negpl	r3, r2
 8017200:	b21b      	sxth	r3, r3
 8017202:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        break;
 8017206:	e06a      	b.n	80172de <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x3ba>
    case Bitmap::GRAY4:
        buf += (dirtyAreaAbsolute.x / 2) + dirtyAreaAbsolute.y * stride;
 8017208:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801720c:	2b00      	cmp	r3, #0
 801720e:	da00      	bge.n	8017212 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x2ee>
 8017210:	3301      	adds	r3, #1
 8017212:	105b      	asrs	r3, r3, #1
 8017214:	b21b      	sxth	r3, r3
 8017216:	461a      	mov	r2, r3
 8017218:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801721c:	4619      	mov	r1, r3
 801721e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017220:	fb03 f301 	mul.w	r3, r3, r1
 8017224:	4413      	add	r3, r2
 8017226:	461a      	mov	r2, r3
 8017228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801722a:	4413      	add	r3, r2
 801722c:	657b      	str	r3, [r7, #84]	; 0x54
        offset = dirtyAreaAbsolute.x % 2;
 801722e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8017232:	2b00      	cmp	r3, #0
 8017234:	f003 0301 	and.w	r3, r3, #1
 8017238:	bfb8      	it	lt
 801723a:	425b      	neglt	r3, r3
 801723c:	b21b      	sxth	r3, r3
 801723e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        break;
 8017242:	e04c      	b.n	80172de <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x3ba>
 8017244:	0802d3fc 	.word	0x0802d3fc
 8017248:	0802c4e8 	.word	0x0802c4e8
 801724c:	0802d414 	.word	0x0802d414
 8017250:	0802c544 	.word	0x0802c544
    case Bitmap::RGB565:
        buf += dirtyAreaAbsolute.x * 2 + dirtyAreaAbsolute.y * stride;
 8017254:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8017258:	005a      	lsls	r2, r3, #1
 801725a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801725e:	4619      	mov	r1, r3
 8017260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017262:	fb03 f301 	mul.w	r3, r3, r1
 8017266:	4413      	add	r3, r2
 8017268:	461a      	mov	r2, r3
 801726a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801726c:	4413      	add	r3, r2
 801726e:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 8017270:	e035      	b.n	80172de <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x3ba>
    case Bitmap::RGB888:
        buf += dirtyAreaAbsolute.x * 3 + dirtyAreaAbsolute.y * stride;
 8017272:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8017276:	461a      	mov	r2, r3
 8017278:	4613      	mov	r3, r2
 801727a:	005b      	lsls	r3, r3, #1
 801727c:	441a      	add	r2, r3
 801727e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017282:	4619      	mov	r1, r3
 8017284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017286:	fb03 f301 	mul.w	r3, r3, r1
 801728a:	4413      	add	r3, r2
 801728c:	461a      	mov	r2, r3
 801728e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017290:	4413      	add	r3, r2
 8017292:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 8017294:	e023      	b.n	80172de <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x3ba>
    case Bitmap::RGBA2222:
    case Bitmap::BGRA2222:
    case Bitmap::ARGB2222:
    case Bitmap::ABGR2222:
    case Bitmap::L8:
        buf += dirtyAreaAbsolute.x + dirtyAreaAbsolute.y * stride;
 8017296:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801729a:	461a      	mov	r2, r3
 801729c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80172a0:	4619      	mov	r1, r3
 80172a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80172a4:	fb03 f301 	mul.w	r3, r3, r1
 80172a8:	4413      	add	r3, r2
 80172aa:	461a      	mov	r2, r3
 80172ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80172ae:	4413      	add	r3, r2
 80172b0:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 80172b2:	e014      	b.n	80172de <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x3ba>
    case Bitmap::ARGB8888:
        buf += dirtyAreaAbsolute.x * 4 + dirtyAreaAbsolute.y * stride;
 80172b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80172b8:	009a      	lsls	r2, r3, #2
 80172ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80172be:	4619      	mov	r1, r3
 80172c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80172c2:	fb03 f301 	mul.w	r3, r3, r1
 80172c6:	4413      	add	r3, r2
 80172c8:	461a      	mov	r2, r3
 80172ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80172cc:	4413      	add	r3, r2
 80172ce:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 80172d0:	e005      	b.n	80172de <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x3ba>
    case Bitmap::BW_RLE:
        assert(0 && "Unsupported bit depth");
 80172d2:	4b12      	ldr	r3, [pc, #72]	; (801731c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x3f8>)
 80172d4:	4a12      	ldr	r2, [pc, #72]	; (8017320 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x3fc>)
 80172d6:	2154      	movs	r1, #84	; 0x54
 80172d8:	4812      	ldr	r0, [pc, #72]	; (8017324 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x400>)
 80172da:	f013 ff0d 	bl	802b0f8 <__assert_func>
        break;
    }
    ras.setMaxRenderY(dirtyAreaAbsolute.height);
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	332c      	adds	r3, #44	; 0x2c
 80172e2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80172e6:	4611      	mov	r1, r2
 80172e8:	4618      	mov	r0, r3
 80172ea:	f7ff fded 	bl	8016ec8 <_ZN8touchgfx10Rasterizer13setMaxRenderYEi>
    rbuf.attach(buf, offset, dirtyAreaAbsolute.width, dirtyAreaAbsolute.height, stride);
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	f103 0018 	add.w	r0, r3, #24
 80172f4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80172f8:	461c      	mov	r4, r3
 80172fa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80172fe:	4619      	mov	r1, r3
 8017300:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8017304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017306:	9301      	str	r3, [sp, #4]
 8017308:	9100      	str	r1, [sp, #0]
 801730a:	4623      	mov	r3, r4
 801730c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801730e:	f00c fd4f 	bl	8023db0 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
}
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	4618      	mov	r0, r3
 8017316:	375c      	adds	r7, #92	; 0x5c
 8017318:	46bd      	mov	sp, r7
 801731a:	bd90      	pop	{r4, r7, pc}
 801731c:	0802c59c 	.word	0x0802c59c
 8017320:	0802d414 	.word	0x0802d414
 8017324:	0802c544 	.word	0x0802c544

08017328 <_ZN8touchgfx6CanvasD1Ev>:

Canvas::~Canvas()
 8017328:	b580      	push	{r7, lr}
 801732a:	b082      	sub	sp, #8
 801732c:	af00      	add	r7, sp, #0
 801732e:	6078      	str	r0, [r7, #4]
 8017330:	4a0c      	ldr	r2, [pc, #48]	; (8017364 <_ZN8touchgfx6CanvasD1Ev+0x3c>)
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	601a      	str	r2, [r3, #0]
{
    HAL::getInstance()->unlockFrameBuffer(); //lint !e1551
 8017336:	f7fb f83d 	bl	80123b4 <_ZN8touchgfx3HAL11getInstanceEv>
 801733a:	4602      	mov	r2, r0
 801733c:	6813      	ldr	r3, [r2, #0]
 801733e:	3324      	adds	r3, #36	; 0x24
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	4610      	mov	r0, r2
 8017344:	4798      	blx	r3
Canvas::~Canvas()
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	332c      	adds	r3, #44	; 0x2c
 801734a:	4618      	mov	r0, r3
 801734c:	f7ff fdd7 	bl	8016efe <_ZN8touchgfx10RasterizerD1Ev>
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	3318      	adds	r3, #24
 8017354:	4618      	mov	r0, r3
 8017356:	f00c fd2a 	bl	8023dae <_ZN8touchgfx15RenderingBufferD1Ev>
}
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	4618      	mov	r0, r3
 801735e:	3708      	adds	r7, #8
 8017360:	46bd      	mov	sp, r7
 8017362:	bd80      	pop	{r7, pc}
 8017364:	0802d3fc 	.word	0x0802d3fc

08017368 <_ZN8touchgfx6CanvasD0Ev>:
Canvas::~Canvas()
 8017368:	b580      	push	{r7, lr}
 801736a:	b082      	sub	sp, #8
 801736c:	af00      	add	r7, sp, #0
 801736e:	6078      	str	r0, [r7, #4]
}
 8017370:	6878      	ldr	r0, [r7, #4]
 8017372:	f7ff ffd9 	bl	8017328 <_ZN8touchgfx6CanvasD1Ev>
 8017376:	21b8      	movs	r1, #184	; 0xb8
 8017378:	6878      	ldr	r0, [r7, #4]
 801737a:	f013 f8d2 	bl	802a522 <_ZdlPvj>
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	4618      	mov	r0, r3
 8017382:	3708      	adds	r7, #8
 8017384:	46bd      	mov	sp, r7
 8017386:	bd80      	pop	{r7, pc}

08017388 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:

void Canvas::moveTo(CWRUtil::Q5 x, CWRUtil::Q5 y)
{
 8017388:	b5b0      	push	{r4, r5, r7, lr}
 801738a:	b088      	sub	sp, #32
 801738c:	af02      	add	r7, sp, #8
 801738e:	60f8      	str	r0, [r7, #12]
 8017390:	60b9      	str	r1, [r7, #8]
 8017392:	607a      	str	r2, [r7, #4]
    if (!enoughMemory)
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801739a:	f083 0301 	eor.w	r3, r3, #1
 801739e:	b2db      	uxtb	r3, r3
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d171      	bne.n	8017488 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x100>
    {
        return;
    }

    if (!penUp)
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80173aa:	f083 0301 	eor.w	r3, r3, #1
 80173ae:	b2db      	uxtb	r3, r3
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d002      	beq.n	80173ba <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x32>
    {
        close();
 80173b4:	68f8      	ldr	r0, [r7, #12]
 80173b6:	f000 fa35 	bl	8017824 <_ZN8touchgfx6Canvas5closeEv>
    }

    transformFrameBufferToDisplay(x, y);
 80173ba:	1d3a      	adds	r2, r7, #4
 80173bc:	f107 0308 	add.w	r3, r7, #8
 80173c0:	4619      	mov	r1, r3
 80173c2:	68f8      	ldr	r0, [r7, #12]
 80173c4:	f000 f9f8 	bl	80177b8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
    x = x - invalidatedAreaX;
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	f103 0208 	add.w	r2, r3, #8
 80173ce:	f107 0308 	add.w	r3, r7, #8
 80173d2:	4611      	mov	r1, r2
 80173d4:	4618      	mov	r0, r3
 80173d6:	f7fc fd2d 	bl	8013e34 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 80173da:	4603      	mov	r3, r0
 80173dc:	60bb      	str	r3, [r7, #8]
    y = y - invalidatedAreaY;
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	f103 020c 	add.w	r2, r3, #12
 80173e4:	1d3b      	adds	r3, r7, #4
 80173e6:	4611      	mov	r1, r2
 80173e8:	4618      	mov	r0, r3
 80173ea:	f7fc fd23 	bl	8013e34 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 80173ee:	4603      	mov	r3, r0
 80173f0:	607b      	str	r3, [r7, #4]

    uint8_t outside = isOutside(x, y, invalidatedAreaWidth, invalidatedAreaHeight);
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	f103 0010 	add.w	r0, r3, #16
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	3314      	adds	r3, #20
 80173fc:	1d3a      	adds	r2, r7, #4
 80173fe:	f107 0108 	add.w	r1, r7, #8
 8017402:	9300      	str	r3, [sp, #0]
 8017404:	4603      	mov	r3, r0
 8017406:	68f8      	ldr	r0, [r7, #12]
 8017408:	f000 f98b 	bl	8017722 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 801740c:	4603      	mov	r3, r0
 801740e:	75fb      	strb	r3, [r7, #23]

    if (outside)
 8017410:	7dfb      	ldrb	r3, [r7, #23]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d004      	beq.n	8017420 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x98>
    {
        penUp = true;
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	2201      	movs	r2, #1
 801741a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 801741e:	e01e      	b.n	801745e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xd6>
    }
    else
    {
        penDownOutside = outside;
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	7dfa      	ldrb	r2, [r7, #23]
 8017424:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
        ras.moveTo(x, y);
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801742e:	f107 0308 	add.w	r3, r7, #8
 8017432:	4618      	mov	r0, r3
 8017434:	f7fb fd69 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8017438:	4605      	mov	r5, r0
 801743a:	1d3b      	adds	r3, r7, #4
 801743c:	4618      	mov	r0, r3
 801743e:	f7fb fd64 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8017442:	4603      	mov	r3, r0
 8017444:	461a      	mov	r2, r3
 8017446:	4629      	mov	r1, r5
 8017448:	4620      	mov	r0, r4
 801744a:	f7ff fcde 	bl	8016e0a <_ZN8touchgfx10Rasterizer6moveToEii>
        penUp = false;
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	2200      	movs	r2, #0
 8017452:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        penHasBeenDown = true;
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	2201      	movs	r2, #1
 801745a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
    }

    initialX = x;
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	68ba      	ldr	r2, [r7, #8]
 8017462:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    initialY = y;
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	687a      	ldr	r2, [r7, #4]
 801746a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    previousX = x;
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	68ba      	ldr	r2, [r7, #8]
 8017472:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    previousY = y;
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	687a      	ldr	r2, [r7, #4]
 801747a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    previousOutside = outside;
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	7dfa      	ldrb	r2, [r7, #23]
 8017482:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8017486:	e000      	b.n	801748a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x102>
        return;
 8017488:	bf00      	nop
}
 801748a:	3718      	adds	r7, #24
 801748c:	46bd      	mov	sp, r7
 801748e:	bdb0      	pop	{r4, r5, r7, pc}

08017490 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:

void Canvas::lineTo(CWRUtil::Q5 x, CWRUtil::Q5 y)
{
 8017490:	b5b0      	push	{r4, r5, r7, lr}
 8017492:	b088      	sub	sp, #32
 8017494:	af02      	add	r7, sp, #8
 8017496:	60f8      	str	r0, [r7, #12]
 8017498:	60b9      	str	r1, [r7, #8]
 801749a:	607a      	str	r2, [r7, #4]
    if (!enoughMemory)
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80174a2:	f083 0301 	eor.w	r3, r3, #1
 80174a6:	b2db      	uxtb	r3, r3
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	f040 80b2 	bne.w	8017612 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x182>
    {
        return;
    }

    transformFrameBufferToDisplay(x, y);
 80174ae:	1d3a      	adds	r2, r7, #4
 80174b0:	f107 0308 	add.w	r3, r7, #8
 80174b4:	4619      	mov	r1, r3
 80174b6:	68f8      	ldr	r0, [r7, #12]
 80174b8:	f000 f97e 	bl	80177b8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
    x = x - invalidatedAreaX;
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	f103 0208 	add.w	r2, r3, #8
 80174c2:	f107 0308 	add.w	r3, r7, #8
 80174c6:	4611      	mov	r1, r2
 80174c8:	4618      	mov	r0, r3
 80174ca:	f7fc fcb3 	bl	8013e34 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 80174ce:	4603      	mov	r3, r0
 80174d0:	60bb      	str	r3, [r7, #8]
    y = y - invalidatedAreaY;
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	f103 020c 	add.w	r2, r3, #12
 80174d8:	1d3b      	adds	r3, r7, #4
 80174da:	4611      	mov	r1, r2
 80174dc:	4618      	mov	r0, r3
 80174de:	f7fc fca9 	bl	8013e34 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 80174e2:	4603      	mov	r3, r0
 80174e4:	607b      	str	r3, [r7, #4]

    uint8_t outside = isOutside(x, y, invalidatedAreaWidth, invalidatedAreaHeight);
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	f103 0010 	add.w	r0, r3, #16
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	3314      	adds	r3, #20
 80174f0:	1d3a      	adds	r2, r7, #4
 80174f2:	f107 0108 	add.w	r1, r7, #8
 80174f6:	9300      	str	r3, [sp, #0]
 80174f8:	4603      	mov	r3, r0
 80174fa:	68f8      	ldr	r0, [r7, #12]
 80174fc:	f000 f911 	bl	8017722 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8017500:	4603      	mov	r3, r0
 8017502:	75fb      	strb	r3, [r7, #23]

    if (!previousOutside)
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 801750a:	2b00      	cmp	r3, #0
 801750c:	d113      	bne.n	8017536 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
    {
        ras.lineTo(x, y);
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8017514:	f107 0308 	add.w	r3, r7, #8
 8017518:	4618      	mov	r0, r3
 801751a:	f7fb fcf6 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801751e:	4605      	mov	r5, r0
 8017520:	1d3b      	adds	r3, r7, #4
 8017522:	4618      	mov	r0, r3
 8017524:	f7fb fcf1 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8017528:	4603      	mov	r3, r0
 801752a:	461a      	mov	r2, r3
 801752c:	4629      	mov	r1, r5
 801752e:	4620      	mov	r0, r4
 8017530:	f7ff fc85 	bl	8016e3e <_ZN8touchgfx10Rasterizer6lineToEii>
 8017534:	e060      	b.n	80175f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x168>
    }
    else
    {
        if (!outside || !(previousOutside & outside))
 8017536:	7dfb      	ldrb	r3, [r7, #23]
 8017538:	2b00      	cmp	r3, #0
 801753a:	d007      	beq.n	801754c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xbc>
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8017542:	7dfb      	ldrb	r3, [r7, #23]
 8017544:	4013      	ands	r3, r2
 8017546:	b2db      	uxtb	r3, r3
 8017548:	2b00      	cmp	r3, #0
 801754a:	d14f      	bne.n	80175ec <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x15c>
        {
            // x,y is inside, or on another side compared to previous
            if (penUp)
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8017552:	2b00      	cmp	r3, #0
 8017554:	d022      	beq.n	801759c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x10c>
            {
                penDownOutside = previousOutside;
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
                ras.moveTo(previousX, previousY);
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	33a4      	adds	r3, #164	; 0xa4
 801756c:	4618      	mov	r0, r3
 801756e:	f7fb fccc 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8017572:	4605      	mov	r5, r0
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	33a8      	adds	r3, #168	; 0xa8
 8017578:	4618      	mov	r0, r3
 801757a:	f7fb fcc6 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801757e:	4603      	mov	r3, r0
 8017580:	461a      	mov	r2, r3
 8017582:	4629      	mov	r1, r5
 8017584:	4620      	mov	r0, r4
 8017586:	f7ff fc40 	bl	8016e0a <_ZN8touchgfx10Rasterizer6moveToEii>
                penUp = false;
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	2200      	movs	r2, #0
 801758e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                penHasBeenDown = true;
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	2201      	movs	r2, #1
 8017596:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 801759a:	e013      	b.n	80175c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x134>
            }
            else
            {
                ras.lineTo(previousX, previousY);
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	33a4      	adds	r3, #164	; 0xa4
 80175a6:	4618      	mov	r0, r3
 80175a8:	f7fb fcaf 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80175ac:	4605      	mov	r5, r0
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	33a8      	adds	r3, #168	; 0xa8
 80175b2:	4618      	mov	r0, r3
 80175b4:	f7fb fca9 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80175b8:	4603      	mov	r3, r0
 80175ba:	461a      	mov	r2, r3
 80175bc:	4629      	mov	r1, r5
 80175be:	4620      	mov	r0, r4
 80175c0:	f7ff fc3d 	bl	8016e3e <_ZN8touchgfx10Rasterizer6lineToEii>
            }
            ras.lineTo(x, y);
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80175ca:	f107 0308 	add.w	r3, r7, #8
 80175ce:	4618      	mov	r0, r3
 80175d0:	f7fb fc9b 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80175d4:	4605      	mov	r5, r0
 80175d6:	1d3b      	adds	r3, r7, #4
 80175d8:	4618      	mov	r0, r3
 80175da:	f7fb fc96 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80175de:	4603      	mov	r3, r0
 80175e0:	461a      	mov	r2, r3
 80175e2:	4629      	mov	r1, r5
 80175e4:	4620      	mov	r0, r4
 80175e6:	f7ff fc2a 	bl	8016e3e <_ZN8touchgfx10Rasterizer6lineToEii>
 80175ea:	e005      	b.n	80175f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x168>
        }
        else
        {
            // Restrict "outside" to the same side as previous point.
            outside &= previousOutside;
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 80175f2:	7dfb      	ldrb	r3, [r7, #23]
 80175f4:	4013      	ands	r3, r2
 80175f6:	75fb      	strb	r3, [r7, #23]
        }
    }
    previousX = x;
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	68ba      	ldr	r2, [r7, #8]
 80175fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    previousY = y;
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	687a      	ldr	r2, [r7, #4]
 8017604:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    previousOutside = outside;
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	7dfa      	ldrb	r2, [r7, #23]
 801760c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8017610:	e000      	b.n	8017614 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x184>
        return;
 8017612:	bf00      	nop
}
 8017614:	3718      	adds	r7, #24
 8017616:	46bd      	mov	sp, r7
 8017618:	bdb0      	pop	{r4, r5, r7, pc}

0801761a <_ZN8touchgfx6Canvas6renderEv>:

bool Canvas::render()
{
 801761a:	b590      	push	{r4, r7, lr}
 801761c:	b085      	sub	sp, #20
 801761e:	af00      	add	r7, sp, #0
 8017620:	6078      	str	r0, [r7, #4]
    // If the invalidated rect is too wide compared to the allocated buffer for CWR,
    // redrawing will not help. The CanvasWidget needs to know about this situation
    // and maybe try to divide the area vertically instead, but this has not been
    // implemented. And probably should not.
    if (!enoughMemory)
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8017628:	f083 0301 	eor.w	r3, r3, #1
 801762c:	b2db      	uxtb	r3, r3
 801762e:	2b00      	cmp	r3, #0
 8017630:	d001      	beq.n	8017636 <_ZN8touchgfx6Canvas6renderEv+0x1c>
    {
        return true; // Redrawing a rect with fewer scanlines will not help, fake "ok" to move on
 8017632:	2301      	movs	r3, #1
 8017634:	e071      	b.n	801771a <_ZN8touchgfx6Canvas6renderEv+0x100>
    }

    if (ras.wasOutlineTooComplex())
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	332c      	adds	r3, #44	; 0x2c
 801763a:	4618      	mov	r0, r3
 801763c:	f7ff fc52 	bl	8016ee4 <_ZN8touchgfx10Rasterizer20wasOutlineTooComplexEv>
 8017640:	4603      	mov	r3, r0
 8017642:	2b00      	cmp	r3, #0
 8017644:	d001      	beq.n	801764a <_ZN8touchgfx6Canvas6renderEv+0x30>
    {
        return false; // Try again with fewer scanlines
 8017646:	2300      	movs	r3, #0
 8017648:	e067      	b.n	801771a <_ZN8touchgfx6Canvas6renderEv+0x100>
    }

    if (!penHasBeenDown)
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8017650:	f083 0301 	eor.w	r3, r3, #1
 8017654:	b2db      	uxtb	r3, r3
 8017656:	2b00      	cmp	r3, #0
 8017658:	d001      	beq.n	801765e <_ZN8touchgfx6Canvas6renderEv+0x44>
    {
        return true; // Nothing drawn. Done
 801765a:	2301      	movs	r3, #1
 801765c:	e05d      	b.n	801771a <_ZN8touchgfx6Canvas6renderEv+0x100>
    }

    if (widget->getAlpha() == 0)
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	685a      	ldr	r2, [r3, #4]
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	685b      	ldr	r3, [r3, #4]
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	3370      	adds	r3, #112	; 0x70
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	4610      	mov	r0, r2
 801766e:	4798      	blx	r3
 8017670:	4603      	mov	r3, r0
 8017672:	2b00      	cmp	r3, #0
 8017674:	bf0c      	ite	eq
 8017676:	2301      	moveq	r3, #1
 8017678:	2300      	movne	r3, #0
 801767a:	b2db      	uxtb	r3, r3
 801767c:	2b00      	cmp	r3, #0
 801767e:	d001      	beq.n	8017684 <_ZN8touchgfx6Canvas6renderEv+0x6a>
    {
        return true; // Invisible. Done
 8017680:	2301      	movs	r3, #1
 8017682:	e04a      	b.n	801771a <_ZN8touchgfx6Canvas6renderEv+0x100>
    }

    close();
 8017684:	6878      	ldr	r0, [r7, #4]
 8017686:	f000 f8cd 	bl	8017824 <_ZN8touchgfx6Canvas5closeEv>

    widget->getPainter().setOffset(offsetX/*+widget->getX()*/, offsetY/*+widget->getY()*/);
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	685a      	ldr	r2, [r3, #4]
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	685b      	ldr	r3, [r3, #4]
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	3368      	adds	r3, #104	; 0x68
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	4610      	mov	r0, r2
 801769a:	4798      	blx	r3
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 80176a2:	b299      	uxth	r1, r3
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
 80176aa:	b29b      	uxth	r3, r3
 80176ac:	461a      	mov	r2, r3
 80176ae:	f7fe fca3 	bl	8015ff8 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
    widget->getPainter().setWidgetAlpha(widget->getAlpha());
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	685a      	ldr	r2, [r3, #4]
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	685b      	ldr	r3, [r3, #4]
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	3368      	adds	r3, #104	; 0x68
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	4610      	mov	r0, r2
 80176c2:	4798      	blx	r3
 80176c4:	4604      	mov	r4, r0
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	685a      	ldr	r2, [r3, #4]
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	685b      	ldr	r3, [r3, #4]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	3370      	adds	r3, #112	; 0x70
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	4610      	mov	r0, r2
 80176d6:	4798      	blx	r3
 80176d8:	4603      	mov	r3, r0
 80176da:	4619      	mov	r1, r3
 80176dc:	4620      	mov	r0, r4
 80176de:	f7fe fca1 	bl	8016024 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
    Renderer renderer(rbuf, widget->getPainter());
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	f103 0418 	add.w	r4, r3, #24
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	685a      	ldr	r2, [r3, #4]
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	685b      	ldr	r3, [r3, #4]
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	3368      	adds	r3, #104	; 0x68
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	4610      	mov	r0, r2
 80176f8:	4798      	blx	r3
 80176fa:	4602      	mov	r2, r0
 80176fc:	f107 0308 	add.w	r3, r7, #8
 8017700:	4621      	mov	r1, r4
 8017702:	4618      	mov	r0, r3
 8017704:	f7ff faa8 	bl	8016c58 <_ZN8touchgfx8RendererC1ERNS_15RenderingBufferERNS_15AbstractPainterE>
    return ras.render(renderer);
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	332c      	adds	r3, #44	; 0x2c
 801770c:	f107 0208 	add.w	r2, r7, #8
 8017710:	4611      	mov	r1, r2
 8017712:	4618      	mov	r0, r3
 8017714:	f000 f8d1 	bl	80178ba <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8017718:	4603      	mov	r3, r0
}
 801771a:	4618      	mov	r0, r3
 801771c:	3714      	adds	r7, #20
 801771e:	46bd      	mov	sp, r7
 8017720:	bd90      	pop	{r4, r7, pc}

08017722 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:

uint8_t Canvas::isOutside(const CWRUtil::Q5& x, const CWRUtil::Q5& y, const CWRUtil::Q5& width, const CWRUtil::Q5& height) const
{
 8017722:	b590      	push	{r4, r7, lr}
 8017724:	b087      	sub	sp, #28
 8017726:	af00      	add	r7, sp, #0
 8017728:	60f8      	str	r0, [r7, #12]
 801772a:	60b9      	str	r1, [r7, #8]
 801772c:	607a      	str	r2, [r7, #4]
 801772e:	603b      	str	r3, [r7, #0]
    uint8_t outside = 0;
 8017730:	2300      	movs	r3, #0
 8017732:	75fb      	strb	r3, [r7, #23]
    // Find out if (x,y) is above/below of current area
    if (y < 0)
 8017734:	6878      	ldr	r0, [r7, #4]
 8017736:	f7fb fbe8 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801773a:	4603      	mov	r3, r0
 801773c:	0fdb      	lsrs	r3, r3, #31
 801773e:	b2db      	uxtb	r3, r3
 8017740:	2b00      	cmp	r3, #0
 8017742:	d002      	beq.n	801774a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x28>
    {
        outside = POINT_IS_ABOVE;
 8017744:	2301      	movs	r3, #1
 8017746:	75fb      	strb	r3, [r7, #23]
 8017748:	e010      	b.n	801776c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x4a>
    }
    else if (y >= height)
 801774a:	6878      	ldr	r0, [r7, #4]
 801774c:	f7fb fbdd 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8017750:	4604      	mov	r4, r0
 8017752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017754:	f7fb fbd9 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8017758:	4603      	mov	r3, r0
 801775a:	429c      	cmp	r4, r3
 801775c:	bfac      	ite	ge
 801775e:	2301      	movge	r3, #1
 8017760:	2300      	movlt	r3, #0
 8017762:	b2db      	uxtb	r3, r3
 8017764:	2b00      	cmp	r3, #0
 8017766:	d001      	beq.n	801776c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x4a>
    {
        outside = POINT_IS_BELOW;
 8017768:	2302      	movs	r3, #2
 801776a:	75fb      	strb	r3, [r7, #23]
    }
    // Find out if (x,y) is left/right of current area
    if (x < 0)
 801776c:	68b8      	ldr	r0, [r7, #8]
 801776e:	f7fb fbcc 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8017772:	4603      	mov	r3, r0
 8017774:	0fdb      	lsrs	r3, r3, #31
 8017776:	b2db      	uxtb	r3, r3
 8017778:	2b00      	cmp	r3, #0
 801777a:	d004      	beq.n	8017786 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x64>
    {
        outside |= POINT_IS_LEFT;
 801777c:	7dfb      	ldrb	r3, [r7, #23]
 801777e:	f043 0304 	orr.w	r3, r3, #4
 8017782:	75fb      	strb	r3, [r7, #23]
 8017784:	e012      	b.n	80177ac <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x8a>
    }
    else if (x >= width)
 8017786:	68b8      	ldr	r0, [r7, #8]
 8017788:	f7fb fbbf 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801778c:	4604      	mov	r4, r0
 801778e:	6838      	ldr	r0, [r7, #0]
 8017790:	f7fb fbbb 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8017794:	4603      	mov	r3, r0
 8017796:	429c      	cmp	r4, r3
 8017798:	bfac      	ite	ge
 801779a:	2301      	movge	r3, #1
 801779c:	2300      	movlt	r3, #0
 801779e:	b2db      	uxtb	r3, r3
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d003      	beq.n	80177ac <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x8a>
    {
        outside |= POINT_IS_RIGHT;
 80177a4:	7dfb      	ldrb	r3, [r7, #23]
 80177a6:	f043 0308 	orr.w	r3, r3, #8
 80177aa:	75fb      	strb	r3, [r7, #23]
    }
    return outside;
 80177ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80177ae:	4618      	mov	r0, r3
 80177b0:	371c      	adds	r7, #28
 80177b2:	46bd      	mov	sp, r7
 80177b4:	bd90      	pop	{r4, r7, pc}
	...

080177b8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:

void Canvas::transformFrameBufferToDisplay(CWRUtil::Q5& x, CWRUtil::Q5& y) const
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b088      	sub	sp, #32
 80177bc:	af00      	add	r7, sp, #0
 80177be:	60f8      	str	r0, [r7, #12]
 80177c0:	60b9      	str	r1, [r7, #8]
 80177c2:	607a      	str	r2, [r7, #4]
    switch (HAL::DISPLAY_ROTATION)
 80177c4:	4b16      	ldr	r3, [pc, #88]	; (8017820 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x68>)
 80177c6:	781b      	ldrb	r3, [r3, #0]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d024      	beq.n	8017816 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x5e>
 80177cc:	2b01      	cmp	r3, #1
 80177ce:	d000      	beq.n	80177d2 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
        CWRUtil::Q5 tmpY = y;
        y = CWRUtil::toQ5<int>(widget->getWidth()) - x;
        x = tmpY;
        break;
    }
}
 80177d0:	e022      	b.n	8017818 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x60>
        CWRUtil::Q5 tmpY = y;
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	613b      	str	r3, [r7, #16]
        y = CWRUtil::toQ5<int>(widget->getWidth()) - x;
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	685b      	ldr	r3, [r3, #4]
 80177dc:	4618      	mov	r0, r3
 80177de:	f7fb fb13 	bl	8012e08 <_ZNK8touchgfx8Drawable8getWidthEv>
 80177e2:	4603      	mov	r3, r0
 80177e4:	61fb      	str	r3, [r7, #28]
 80177e6:	69fb      	ldr	r3, [r7, #28]
 80177e8:	015a      	lsls	r2, r3, #5
 80177ea:	f107 0318 	add.w	r3, r7, #24
 80177ee:	4611      	mov	r1, r2
 80177f0:	4618      	mov	r0, r3
 80177f2:	f7fb fb7b 	bl	8012eec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80177f6:	69bb      	ldr	r3, [r7, #24]
 80177f8:	617b      	str	r3, [r7, #20]
 80177fa:	f107 0314 	add.w	r3, r7, #20
 80177fe:	68b9      	ldr	r1, [r7, #8]
 8017800:	4618      	mov	r0, r3
 8017802:	f7fc fb17 	bl	8013e34 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 8017806:	4602      	mov	r2, r0
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	601a      	str	r2, [r3, #0]
        x = tmpY;
 801780c:	68bb      	ldr	r3, [r7, #8]
 801780e:	693a      	ldr	r2, [r7, #16]
 8017810:	601a      	str	r2, [r3, #0]
        break;
 8017812:	bf00      	nop
 8017814:	e000      	b.n	8017818 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x60>
        break;
 8017816:	bf00      	nop
}
 8017818:	bf00      	nop
 801781a:	3720      	adds	r7, #32
 801781c:	46bd      	mov	sp, r7
 801781e:	bd80      	pop	{r7, pc}
 8017820:	2000cf6e 	.word	0x2000cf6e

08017824 <_ZN8touchgfx6Canvas5closeEv>:

void Canvas::close()
{
 8017824:	b5b0      	push	{r4, r5, r7, lr}
 8017826:	b082      	sub	sp, #8
 8017828:	af00      	add	r7, sp, #0
 801782a:	6078      	str	r0, [r7, #4]
    if (!penUp)
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8017832:	f083 0301 	eor.w	r3, r3, #1
 8017836:	b2db      	uxtb	r3, r3
 8017838:	2b00      	cmp	r3, #0
 801783a:	d036      	beq.n	80178aa <_ZN8touchgfx6Canvas5closeEv+0x86>
    {
        if (previousOutside & penDownOutside)
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8017848:	4013      	ands	r3, r2
 801784a:	b2db      	uxtb	r3, r3
 801784c:	2b00      	cmp	r3, #0
 801784e:	d12c      	bne.n	80178aa <_ZN8touchgfx6Canvas5closeEv+0x86>
            //  to close the path, CWR will do this for us.
            //lineTo(penDownX, penDownY);
        }
        else
        {
            if (previousOutside)
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8017856:	2b00      	cmp	r3, #0
 8017858:	d013      	beq.n	8017882 <_ZN8touchgfx6Canvas5closeEv+0x5e>
            {
                ras.lineTo(previousX, previousY);
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	33a4      	adds	r3, #164	; 0xa4
 8017864:	4618      	mov	r0, r3
 8017866:	f7fb fb50 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801786a:	4605      	mov	r5, r0
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	33a8      	adds	r3, #168	; 0xa8
 8017870:	4618      	mov	r0, r3
 8017872:	f7fb fb4a 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8017876:	4603      	mov	r3, r0
 8017878:	461a      	mov	r2, r3
 801787a:	4629      	mov	r1, r5
 801787c:	4620      	mov	r0, r4
 801787e:	f7ff fade 	bl	8016e3e <_ZN8touchgfx10Rasterizer6lineToEii>
            }
            ras.lineTo(initialX, initialY);
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	33b0      	adds	r3, #176	; 0xb0
 801788c:	4618      	mov	r0, r3
 801788e:	f7fb fb3c 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8017892:	4605      	mov	r5, r0
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	33b4      	adds	r3, #180	; 0xb4
 8017898:	4618      	mov	r0, r3
 801789a:	f7fb fb36 	bl	8012f0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801789e:	4603      	mov	r3, r0
 80178a0:	461a      	mov	r2, r3
 80178a2:	4629      	mov	r1, r5
 80178a4:	4620      	mov	r0, r4
 80178a6:	f7ff faca 	bl	8016e3e <_ZN8touchgfx10Rasterizer6lineToEii>
        }
    }
    penUp = false;
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	2200      	movs	r2, #0
 80178ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 80178b2:	bf00      	nop
 80178b4:	3708      	adds	r7, #8
 80178b6:	46bd      	mov	sp, r7
 80178b8:	bdb0      	pop	{r4, r5, r7, pc}

080178ba <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
    bool render(Renderer& r)
 80178ba:	b580      	push	{r7, lr}
 80178bc:	b098      	sub	sp, #96	; 0x60
 80178be:	af02      	add	r7, sp, #8
 80178c0:	6078      	str	r0, [r7, #4]
 80178c2:	6039      	str	r1, [r7, #0]
        const Cell* cells = outline.getCells();
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	4618      	mov	r0, r3
 80178c8:	f00c f920 	bl	8023b0c <_ZN8touchgfx7Outline8getCellsEv>
 80178cc:	6578      	str	r0, [r7, #84]	; 0x54
        unsigned numCells = outline.getNumCells();
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	4618      	mov	r0, r3
 80178d2:	f7ff f8de 	bl	8016a92 <_ZNK8touchgfx7Outline11getNumCellsEv>
 80178d6:	6538      	str	r0, [r7, #80]	; 0x50
        if (numCells == 0)
 80178d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d101      	bne.n	80178e2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x28>
            return true;
 80178de:	2301      	movs	r3, #1
 80178e0:	e160      	b.n	8017ba4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x2ea>
        if (outline.wasOutlineTooComplex())
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	4618      	mov	r0, r3
 80178e6:	f7ff f8ee 	bl	8016ac6 <_ZN8touchgfx7Outline20wasOutlineTooComplexEv>
 80178ea:	4603      	mov	r3, r0
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d001      	beq.n	80178f4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3a>
            return false;
 80178f0:	2300      	movs	r3, #0
 80178f2:	e157      	b.n	8017ba4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x2ea>
        scanline.reset();
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	3348      	adds	r3, #72	; 0x48
 80178f8:	4618      	mov	r0, r3
 80178fa:	f00c f9f1 	bl	8023ce0 <_ZN8touchgfx8Scanline5resetEv>
        cover = 0;
 80178fe:	2300      	movs	r3, #0
 8017900:	64bb      	str	r3, [r7, #72]	; 0x48
        const Cell* curCell = cells++;
 8017902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017904:	f103 0208 	add.w	r2, r3, #8
 8017908:	657a      	str	r2, [r7, #84]	; 0x54
 801790a:	643b      	str	r3, [r7, #64]	; 0x40
        numCells--;
 801790c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801790e:	3b01      	subs	r3, #1
 8017910:	653b      	str	r3, [r7, #80]	; 0x50
            const Cell* startCell = curCell;
 8017912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017914:	63fb      	str	r3, [r7, #60]	; 0x3c
            int coord = curCell->packedCoord();
 8017916:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017918:	f7ff f8a9 	bl	8016a6e <_ZNK8touchgfx4Cell11packedCoordEv>
 801791c:	63b8      	str	r0, [r7, #56]	; 0x38
            x = curCell->x;
 801791e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017924:	64fb      	str	r3, [r7, #76]	; 0x4c
            y = curCell->y;
 8017926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017928:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801792c:	637b      	str	r3, [r7, #52]	; 0x34
            area = startCell->area;
 801792e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017930:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017934:	647b      	str	r3, [r7, #68]	; 0x44
            cover += startCell->cover;
 8017936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017938:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801793c:	461a      	mov	r2, r3
 801793e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017940:	4413      	add	r3, r2
 8017942:	64bb      	str	r3, [r7, #72]	; 0x48
            while (numCells-- > 0)
 8017944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017946:	1e5a      	subs	r2, r3, #1
 8017948:	653a      	str	r2, [r7, #80]	; 0x50
 801794a:	2b00      	cmp	r3, #0
 801794c:	bf14      	ite	ne
 801794e:	2301      	movne	r3, #1
 8017950:	2300      	moveq	r3, #0
 8017952:	b2db      	uxtb	r3, r3
 8017954:	2b00      	cmp	r3, #0
 8017956:	d020      	beq.n	801799a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xe0>
                curCell = cells++;
 8017958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801795a:	f103 0208 	add.w	r2, r3, #8
 801795e:	657a      	str	r2, [r7, #84]	; 0x54
 8017960:	643b      	str	r3, [r7, #64]	; 0x40
                if (curCell->packedCoord() != coord)
 8017962:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017964:	f7ff f883 	bl	8016a6e <_ZNK8touchgfx4Cell11packedCoordEv>
 8017968:	4602      	mov	r2, r0
 801796a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801796c:	4293      	cmp	r3, r2
 801796e:	bf14      	ite	ne
 8017970:	2301      	movne	r3, #1
 8017972:	2300      	moveq	r3, #0
 8017974:	b2db      	uxtb	r3, r3
 8017976:	2b00      	cmp	r3, #0
 8017978:	d10e      	bne.n	8017998 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xde>
                area += curCell->area;
 801797a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801797c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017980:	461a      	mov	r2, r3
 8017982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017984:	4413      	add	r3, r2
 8017986:	647b      	str	r3, [r7, #68]	; 0x44
                cover += curCell->cover;
 8017988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801798a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801798e:	461a      	mov	r2, r3
 8017990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017992:	4413      	add	r3, r2
 8017994:	64bb      	str	r3, [r7, #72]	; 0x48
            while (numCells-- > 0)
 8017996:	e7d5      	b.n	8017944 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x8a>
                    break;
 8017998:	bf00      	nop
            if (area)
 801799a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801799c:	2b00      	cmp	r3, #0
 801799e:	f000 808e 	beq.w	8017abe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x204>
                alpha = calculateAlpha((cover << (Rasterizer::POLY_BASE_SHIFT + 1)) - area);
 80179a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80179a4:	019a      	lsls	r2, r3, #6
 80179a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80179a8:	1ad3      	subs	r3, r2, r3
 80179aa:	4619      	mov	r1, r3
 80179ac:	6878      	ldr	r0, [r7, #4]
 80179ae:	f7ff fa60 	bl	8016e72 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi>
 80179b2:	4603      	mov	r3, r0
 80179b4:	633b      	str	r3, [r7, #48]	; 0x30
                if (alpha)
 80179b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d07d      	beq.n	8017ab8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1fe>
                    if (scanline.isReady(y))
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	3348      	adds	r3, #72	; 0x48
 80179c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80179c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179c4:	62bb      	str	r3, [r7, #40]	; 0x28
    lastY = y;
}

FORCE_INLINE_FUNCTION int Scanline::isReady(int y) const
{
    return numSpans && (y ^ lastY);
 80179c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179c8:	68db      	ldr	r3, [r3, #12]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d006      	beq.n	80179dc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x122>
 80179ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179d0:	689b      	ldr	r3, [r3, #8]
 80179d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80179d4:	429a      	cmp	r2, r3
 80179d6:	d001      	beq.n	80179dc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x122>
 80179d8:	2301      	movs	r3, #1
 80179da:	e000      	b.n	80179de <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 80179dc:	2300      	movs	r3, #0
 80179de:	2b00      	cmp	r3, #0
 80179e0:	bf14      	ite	ne
 80179e2:	2301      	movne	r3, #1
 80179e4:	2300      	moveq	r3, #0
 80179e6:	b2db      	uxtb	r3, r3
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d01b      	beq.n	8017a24 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x16a>
                        r.render(scanline);
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	3348      	adds	r3, #72	; 0x48
 80179f0:	4619      	mov	r1, r3
 80179f2:	6838      	ldr	r0, [r7, #0]
 80179f4:	f7ff f943 	bl	8016c7e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
                        scanline.resetSpans();
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	3348      	adds	r3, #72	; 0x48
 80179fc:	627b      	str	r3, [r7, #36]	; 0x24
    lastX = 0x7FFF;
 80179fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a00:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017a04:	605a      	str	r2, [r3, #4]
    lastY = 0x7FFF;
 8017a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a08:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017a0c:	609a      	str	r2, [r3, #8]
    curCount = counts;
 8017a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a10:	6a1a      	ldr	r2, [r3, #32]
 8017a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a14:	615a      	str	r2, [r3, #20]
    curStartIndex = startIndices;
 8017a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a18:	69da      	ldr	r2, [r3, #28]
 8017a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a1c:	611a      	str	r2, [r3, #16]
    numSpans = 0;
 8017a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a20:	2200      	movs	r2, #0
 8017a22:	60da      	str	r2, [r3, #12]
                    scanline.addCell(x, y, alpha);
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8017a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a2c:	623a      	str	r2, [r7, #32]
 8017a2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017a30:	61fa      	str	r2, [r7, #28]
 8017a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017a34:	61ba      	str	r2, [r7, #24]
 8017a36:	617b      	str	r3, [r7, #20]
    if (x < 0)
 8017a38:	69fb      	ldr	r3, [r7, #28]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	db3c      	blt.n	8017ab8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1fe>
    if (unsigned(x) >= CanvasWidgetRenderer::getScanlineWidth())
 8017a3e:	f00c f92b 	bl	8023c98 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8017a42:	4602      	mov	r2, r0
 8017a44:	69fb      	ldr	r3, [r7, #28]
 8017a46:	429a      	cmp	r2, r3
 8017a48:	bf94      	ite	ls
 8017a4a:	2301      	movls	r3, #1
 8017a4c:	2300      	movhi	r3, #0
 8017a4e:	b2db      	uxtb	r3, r3
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d131      	bne.n	8017ab8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1fe>
    covers[x] = (unsigned char)cover;
 8017a54:	6a3b      	ldr	r3, [r7, #32]
 8017a56:	699a      	ldr	r2, [r3, #24]
 8017a58:	69fb      	ldr	r3, [r7, #28]
 8017a5a:	4413      	add	r3, r2
 8017a5c:	697a      	ldr	r2, [r7, #20]
 8017a5e:	b2d2      	uxtb	r2, r2
 8017a60:	701a      	strb	r2, [r3, #0]
    if (x == lastX + 1)
 8017a62:	6a3b      	ldr	r3, [r7, #32]
 8017a64:	685b      	ldr	r3, [r3, #4]
 8017a66:	3301      	adds	r3, #1
 8017a68:	69fa      	ldr	r2, [r7, #28]
 8017a6a:	429a      	cmp	r2, r3
 8017a6c:	d106      	bne.n	8017a7c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c2>
        (*curCount)++;
 8017a6e:	6a3b      	ldr	r3, [r7, #32]
 8017a70:	695b      	ldr	r3, [r3, #20]
 8017a72:	881a      	ldrh	r2, [r3, #0]
 8017a74:	3201      	adds	r2, #1
 8017a76:	b292      	uxth	r2, r2
 8017a78:	801a      	strh	r2, [r3, #0]
 8017a7a:	e017      	b.n	8017aac <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1f2>
        *++curCount = 1;
 8017a7c:	6a3b      	ldr	r3, [r7, #32]
 8017a7e:	695b      	ldr	r3, [r3, #20]
 8017a80:	1c9a      	adds	r2, r3, #2
 8017a82:	6a3b      	ldr	r3, [r7, #32]
 8017a84:	615a      	str	r2, [r3, #20]
 8017a86:	6a3b      	ldr	r3, [r7, #32]
 8017a88:	695b      	ldr	r3, [r3, #20]
 8017a8a:	2201      	movs	r2, #1
 8017a8c:	801a      	strh	r2, [r3, #0]
        *++curStartIndex = x;
 8017a8e:	6a3b      	ldr	r3, [r7, #32]
 8017a90:	691b      	ldr	r3, [r3, #16]
 8017a92:	1c9a      	adds	r2, r3, #2
 8017a94:	6a3b      	ldr	r3, [r7, #32]
 8017a96:	611a      	str	r2, [r3, #16]
 8017a98:	6a3b      	ldr	r3, [r7, #32]
 8017a9a:	691b      	ldr	r3, [r3, #16]
 8017a9c:	69fa      	ldr	r2, [r7, #28]
 8017a9e:	b292      	uxth	r2, r2
 8017aa0:	801a      	strh	r2, [r3, #0]
        numSpans++;
 8017aa2:	6a3b      	ldr	r3, [r7, #32]
 8017aa4:	68db      	ldr	r3, [r3, #12]
 8017aa6:	1c5a      	adds	r2, r3, #1
 8017aa8:	6a3b      	ldr	r3, [r7, #32]
 8017aaa:	60da      	str	r2, [r3, #12]
    lastX = x;
 8017aac:	6a3b      	ldr	r3, [r7, #32]
 8017aae:	69fa      	ldr	r2, [r7, #28]
 8017ab0:	605a      	str	r2, [r3, #4]
    lastY = y;
 8017ab2:	6a3b      	ldr	r3, [r7, #32]
 8017ab4:	69ba      	ldr	r2, [r7, #24]
 8017ab6:	609a      	str	r2, [r3, #8]
                x++;
 8017ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017aba:	3301      	adds	r3, #1
 8017abc:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (numCells == unsigned(-1))
 8017abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ac4:	d059      	beq.n	8017b7a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x2c0>
            if (curCell->x > x)
 8017ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017acc:	461a      	mov	r2, r3
 8017ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017ad0:	4293      	cmp	r3, r2
 8017ad2:	f6bf af1e 	bge.w	8017912 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x58>
                alpha = calculateAlpha(cover << (Rasterizer::POLY_BASE_SHIFT + 1));
 8017ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017ad8:	019b      	lsls	r3, r3, #6
 8017ada:	4619      	mov	r1, r3
 8017adc:	6878      	ldr	r0, [r7, #4]
 8017ade:	f7ff f9c8 	bl	8016e72 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi>
 8017ae2:	4603      	mov	r3, r0
 8017ae4:	633b      	str	r3, [r7, #48]	; 0x30
                if (alpha)
 8017ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	f43f af12 	beq.w	8017912 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x58>
                    if (scanline.isReady(y))
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	3348      	adds	r3, #72	; 0x48
 8017af2:	613b      	str	r3, [r7, #16]
 8017af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017af6:	60fb      	str	r3, [r7, #12]
    return numSpans && (y ^ lastY);
 8017af8:	693b      	ldr	r3, [r7, #16]
 8017afa:	68db      	ldr	r3, [r3, #12]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d006      	beq.n	8017b0e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x254>
 8017b00:	693b      	ldr	r3, [r7, #16]
 8017b02:	689b      	ldr	r3, [r3, #8]
 8017b04:	68fa      	ldr	r2, [r7, #12]
 8017b06:	429a      	cmp	r2, r3
 8017b08:	d001      	beq.n	8017b0e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x254>
 8017b0a:	2301      	movs	r3, #1
 8017b0c:	e000      	b.n	8017b10 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x256>
 8017b0e:	2300      	movs	r3, #0
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	bf14      	ite	ne
 8017b14:	2301      	movne	r3, #1
 8017b16:	2300      	moveq	r3, #0
 8017b18:	b2db      	uxtb	r3, r3
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d01b      	beq.n	8017b56 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x29c>
                        r.render(scanline);
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	3348      	adds	r3, #72	; 0x48
 8017b22:	4619      	mov	r1, r3
 8017b24:	6838      	ldr	r0, [r7, #0]
 8017b26:	f7ff f8aa 	bl	8016c7e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
                        scanline.resetSpans();
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	3348      	adds	r3, #72	; 0x48
 8017b2e:	60bb      	str	r3, [r7, #8]
    lastX = 0x7FFF;
 8017b30:	68bb      	ldr	r3, [r7, #8]
 8017b32:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017b36:	605a      	str	r2, [r3, #4]
    lastY = 0x7FFF;
 8017b38:	68bb      	ldr	r3, [r7, #8]
 8017b3a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017b3e:	609a      	str	r2, [r3, #8]
    curCount = counts;
 8017b40:	68bb      	ldr	r3, [r7, #8]
 8017b42:	6a1a      	ldr	r2, [r3, #32]
 8017b44:	68bb      	ldr	r3, [r7, #8]
 8017b46:	615a      	str	r2, [r3, #20]
    curStartIndex = startIndices;
 8017b48:	68bb      	ldr	r3, [r7, #8]
 8017b4a:	69da      	ldr	r2, [r3, #28]
 8017b4c:	68bb      	ldr	r3, [r7, #8]
 8017b4e:	611a      	str	r2, [r3, #16]
    numSpans = 0;
 8017b50:	68bb      	ldr	r3, [r7, #8]
 8017b52:	2200      	movs	r2, #0
 8017b54:	60da      	str	r2, [r3, #12]
                    scanline.addSpan(x, y, curCell->x - x, alpha);
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	f103 0048 	add.w	r0, r3, #72	; 0x48
 8017b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017b62:	461a      	mov	r2, r3
 8017b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b66:	1ad3      	subs	r3, r2, r3
 8017b68:	461a      	mov	r2, r3
 8017b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b6c:	9300      	str	r3, [sp, #0]
 8017b6e:	4613      	mov	r3, r2
 8017b70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017b72:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8017b74:	f00c f8dc 	bl	8023d30 <_ZN8touchgfx8Scanline7addSpanEiijj>
        for (;;)
 8017b78:	e6cb      	b.n	8017912 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x58>
                break;
 8017b7a:	bf00      	nop
        if (scanline.getNumSpans())
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	3348      	adds	r3, #72	; 0x48
 8017b80:	4618      	mov	r0, r3
 8017b82:	f7ff f85d 	bl	8016c40 <_ZNK8touchgfx8Scanline11getNumSpansEv>
 8017b86:	4603      	mov	r3, r0
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	bf14      	ite	ne
 8017b8c:	2301      	movne	r3, #1
 8017b8e:	2300      	moveq	r3, #0
 8017b90:	b2db      	uxtb	r3, r3
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d005      	beq.n	8017ba2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x2e8>
            r.render(scanline);
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	3348      	adds	r3, #72	; 0x48
 8017b9a:	4619      	mov	r1, r3
 8017b9c:	6838      	ldr	r0, [r7, #0]
 8017b9e:	f7ff f86e 	bl	8016c7e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
        return true;
 8017ba2:	2301      	movs	r3, #1
    }
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	3758      	adds	r7, #88	; 0x58
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	bd80      	pop	{r7, pc}

08017bac <_ZN8touchgfx12CanvasWidgetC1Ev>:

#include <touchgfx/widgets/canvas/CanvasWidget.hpp>

namespace touchgfx
{
CanvasWidget::CanvasWidget() :
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b082      	sub	sp, #8
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	6078      	str	r0, [r7, #4]
    Widget(),
    canvasPainter(0),
    maxRenderLines(0x7FFF),
    alpha(255)
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	f7fb f956 	bl	8012e68 <_ZN8touchgfx6WidgetC1Ev>
 8017bbc:	4a09      	ldr	r2, [pc, #36]	; (8017be4 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	601a      	str	r2, [r3, #0]
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	2200      	movs	r2, #0
 8017bc6:	629a      	str	r2, [r3, #40]	; 0x28
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017bce:	859a      	strh	r2, [r3, #44]	; 0x2c
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	22ff      	movs	r2, #255	; 0xff
 8017bd4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
{
}
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	4618      	mov	r0, r3
 8017bdc:	3708      	adds	r7, #8
 8017bde:	46bd      	mov	sp, r7
 8017be0:	bd80      	pop	{r7, pc}
 8017be2:	bf00      	nop
 8017be4:	0802d46c 	.word	0x0802d46c

08017be8 <_ZN8touchgfx12CanvasWidgetD1Ev>:

CanvasWidget::~CanvasWidget()
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b082      	sub	sp, #8
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]
 8017bf0:	4a05      	ldr	r2, [pc, #20]	; (8017c08 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	601a      	str	r2, [r3, #0]
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	f7fa fb2f 	bl	801225c <_ZN8touchgfx6WidgetD1Ev>
{
}
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	4618      	mov	r0, r3
 8017c02:	3708      	adds	r7, #8
 8017c04:	46bd      	mov	sp, r7
 8017c06:	bd80      	pop	{r7, pc}
 8017c08:	0802d46c 	.word	0x0802d46c

08017c0c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:

void CanvasWidget::setPainter(AbstractPainter& painter)
{
 8017c0c:	b480      	push	{r7}
 8017c0e:	b083      	sub	sp, #12
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	6078      	str	r0, [r7, #4]
 8017c14:	6039      	str	r1, [r7, #0]
    canvasPainter = &painter;
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	683a      	ldr	r2, [r7, #0]
 8017c1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8017c1c:	bf00      	nop
 8017c1e:	370c      	adds	r7, #12
 8017c20:	46bd      	mov	sp, r7
 8017c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c26:	4770      	bx	lr

08017c28 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:

AbstractPainter& CanvasWidget::getPainter() const
{
 8017c28:	b580      	push	{r7, lr}
 8017c2a:	b082      	sub	sp, #8
 8017c2c:	af00      	add	r7, sp, #0
 8017c2e:	6078      	str	r0, [r7, #4]
    assert(canvasPainter != 0 && "No painter set");
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d105      	bne.n	8017c44 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>
 8017c38:	4b05      	ldr	r3, [pc, #20]	; (8017c50 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x28>)
 8017c3a:	4a06      	ldr	r2, [pc, #24]	; (8017c54 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x2c>)
 8017c3c:	2127      	movs	r1, #39	; 0x27
 8017c3e:	4806      	ldr	r0, [pc, #24]	; (8017c58 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x30>)
 8017c40:	f013 fa5a 	bl	802b0f8 <__assert_func>
    return *canvasPainter; //lint !e613
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
} //lint !e1763
 8017c48:	4618      	mov	r0, r3
 8017c4a:	3708      	adds	r7, #8
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	bd80      	pop	{r7, pc}
 8017c50:	0802c5bc 	.word	0x0802c5bc
 8017c54:	0802d4e8 	.word	0x0802d4e8
 8017c58:	0802c5e4 	.word	0x0802c5e4

08017c5c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:

void CanvasWidget::draw(const Rect& invalidatedArea) const
{
 8017c5c:	b590      	push	{r4, r7, lr}
 8017c5e:	b091      	sub	sp, #68	; 0x44
 8017c60:	af02      	add	r7, sp, #8
 8017c62:	6078      	str	r0, [r7, #4]
 8017c64:	6039      	str	r1, [r7, #0]
    Rect area = invalidatedArea;
 8017c66:	683a      	ldr	r2, [r7, #0]
 8017c68:	f107 031c 	add.w	r3, r7, #28
 8017c6c:	6810      	ldr	r0, [r2, #0]
 8017c6e:	6851      	ldr	r1, [r2, #4]
 8017c70:	c303      	stmia	r3!, {r0, r1}
    int16_t* width;
    int16_t* height;

    int16_t wantedRenderLines;

    switch (HAL::DISPLAY_ROTATION)
 8017c72:	4b60      	ldr	r3, [pc, #384]	; (8017df4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x198>)
 8017c74:	781b      	ldrb	r3, [r3, #0]
 8017c76:	2b01      	cmp	r3, #1
 8017c78:	d00f      	beq.n	8017c9a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x3e>
    {
    default:
    case rotate0:
        offset = &area.y;
 8017c7a:	f107 031c 	add.w	r3, r7, #28
 8017c7e:	3302      	adds	r3, #2
 8017c80:	637b      	str	r3, [r7, #52]	; 0x34
        lines = &area.height;
 8017c82:	f107 031c 	add.w	r3, r7, #28
 8017c86:	3306      	adds	r3, #6
 8017c88:	633b      	str	r3, [r7, #48]	; 0x30
        width = &area.width;
 8017c8a:	f107 031c 	add.w	r3, r7, #28
 8017c8e:	3304      	adds	r3, #4
 8017c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        height = &wantedRenderLines;
 8017c92:	f107 031a 	add.w	r3, r7, #26
 8017c96:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 8017c98:	e00e      	b.n	8017cb8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5c>
    case rotate90:
        offset = &area.x;
 8017c9a:	f107 031c 	add.w	r3, r7, #28
 8017c9e:	637b      	str	r3, [r7, #52]	; 0x34
        lines = &area.width;
 8017ca0:	f107 031c 	add.w	r3, r7, #28
 8017ca4:	3304      	adds	r3, #4
 8017ca6:	633b      	str	r3, [r7, #48]	; 0x30
        width = &wantedRenderLines;
 8017ca8:	f107 031a 	add.w	r3, r7, #26
 8017cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        height = &area.height;
 8017cae:	f107 031c 	add.w	r3, r7, #28
 8017cb2:	3306      	adds	r3, #6
 8017cb4:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 8017cb6:	bf00      	nop
    }

    Rect minimalRect = getMinimalRect();
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	3374      	adds	r3, #116	; 0x74
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	f107 0210 	add.w	r2, r7, #16
 8017cc4:	6879      	ldr	r1, [r7, #4]
 8017cc6:	4610      	mov	r0, r2
 8017cc8:	4798      	blx	r3

    bool failedAtLeastOnce = false;
 8017cca:	2300      	movs	r3, #0
 8017ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while (*lines)
 8017cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d078      	beq.n	8017dcc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x170>
    {
        wantedRenderLines = MIN(maxRenderLines, *lines);
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 8017ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ce6:	429a      	cmp	r2, r3
 8017ce8:	da03      	bge.n	8017cf2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x96>
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8017cf0:	e002      	b.n	8017cf8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8017cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017cf8:	837b      	strh	r3, [r7, #26]

        while (wantedRenderLines > 0)
 8017cfa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	dd35      	ble.n	8017d6e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x112>
        {
            Rect smallArea(area.x, area.y, *width, *height);
 8017d02:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8017d06:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8017d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d0c:	f9b3 4000 	ldrsh.w	r4, [r3]
 8017d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d16:	f107 0008 	add.w	r0, r7, #8
 8017d1a:	9300      	str	r3, [sp, #0]
 8017d1c:	4623      	mov	r3, r4
 8017d1e:	f7fa fb7d 	bl	801241c <_ZN8touchgfx4RectC1Essss>
            if (!smallArea.intersect(minimalRect))
 8017d22:	f107 0210 	add.w	r2, r7, #16
 8017d26:	f107 0308 	add.w	r3, r7, #8
 8017d2a:	4611      	mov	r1, r2
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	f7fa fbee 	bl	801250e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017d32:	4603      	mov	r3, r0
 8017d34:	f083 0301 	eor.w	r3, r3, #1
 8017d38:	b2db      	uxtb	r3, r3
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d114      	bne.n	8017d68 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x10c>
            {
                break;
            }
            if (drawCanvasWidget(smallArea))
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	3378      	adds	r3, #120	; 0x78
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	f107 0208 	add.w	r2, r7, #8
 8017d4a:	4611      	mov	r1, r2
 8017d4c:	6878      	ldr	r0, [r7, #4]
 8017d4e:	4798      	blx	r3
 8017d50:	4603      	mov	r3, r0
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d10a      	bne.n	8017d6c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x110>
                {
                    touchgfx_printf("CWR was unable to complete a draw operation due to limited memory.\n");
                }
            }
#endif
            wantedRenderLines >>= 1;
 8017d56:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8017d5a:	105b      	asrs	r3, r3, #1
 8017d5c:	b21b      	sxth	r3, r3
 8017d5e:	837b      	strh	r3, [r7, #26]
            failedAtLeastOnce = true;
 8017d60:	2301      	movs	r3, #1
 8017d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        while (wantedRenderLines > 0)
 8017d66:	e7c8      	b.n	8017cfa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9e>
                break;
 8017d68:	bf00      	nop
 8017d6a:	e000      	b.n	8017d6e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x112>
                break;
 8017d6c:	bf00      	nop
        }
        if (wantedRenderLines == 0)
 8017d6e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d102      	bne.n	8017d7c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x120>
        {
            // We did not manage to draw anything. Set wantedHeight to
            // one to skip a single raster line and try to render the
            // rest of the CanvasWidget.
            wantedRenderLines = 1;
 8017d76:	2301      	movs	r3, #1
 8017d78:	837b      	strh	r3, [r7, #26]
 8017d7a:	e00e      	b.n	8017d9a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x13e>
        }
        else
        {
            if (failedAtLeastOnce && maxRenderLines == 0x7FFF)
 8017d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d00a      	beq.n	8017d9a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x13e>
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8017d8a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017d8e:	4293      	cmp	r3, r2
 8017d90:	d103      	bne.n	8017d9a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x13e>
            {
                // Only adjust maxRenderLines if it is the first draw for the CanvasWidget
                maxRenderLines = wantedRenderLines;
 8017d92:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	859a      	strh	r2, [r3, #44]	; 0x2c
            }
        }
        *offset += wantedRenderLines;
 8017d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017da0:	b29a      	uxth	r2, r3
 8017da2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8017da6:	b29b      	uxth	r3, r3
 8017da8:	4413      	add	r3, r2
 8017daa:	b29b      	uxth	r3, r3
 8017dac:	b21a      	sxth	r2, r3
 8017dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017db0:	801a      	strh	r2, [r3, #0]
        *lines -= wantedRenderLines;
 8017db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017db8:	b29a      	uxth	r2, r3
 8017dba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8017dbe:	b29b      	uxth	r3, r3
 8017dc0:	1ad3      	subs	r3, r2, r3
 8017dc2:	b29b      	uxth	r3, r3
 8017dc4:	b21a      	sxth	r2, r3
 8017dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dc8:	801a      	strh	r2, [r3, #0]
    while (*lines)
 8017dca:	e781      	b.n	8017cd0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x74>
    }
    if (maxRenderLines == 0x7FFF)
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8017dd2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017dd6:	4293      	cmp	r3, r2
 8017dd8:	d108      	bne.n	8017dec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x190>
    {
        maxRenderLines--;    // 0x7FFF means first draw
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8017de0:	b29b      	uxth	r3, r3
 8017de2:	3b01      	subs	r3, #1
 8017de4:	b29b      	uxth	r3, r3
 8017de6:	b21a      	sxth	r2, r3
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
}
 8017dec:	bf00      	nop
 8017dee:	373c      	adds	r7, #60	; 0x3c
 8017df0:	46bd      	mov	sp, r7
 8017df2:	bd90      	pop	{r4, r7, pc}
 8017df4:	2000cf6e 	.word	0x2000cf6e

08017df8 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:

void CanvasWidget::invalidate() const
{
 8017df8:	b580      	push	{r7, lr}
 8017dfa:	b086      	sub	sp, #24
 8017dfc:	af00      	add	r7, sp, #0
 8017dfe:	6078      	str	r0, [r7, #4]
    Rect minimalRect = getMinimalRect();
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	3374      	adds	r3, #116	; 0x74
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	f107 0208 	add.w	r2, r7, #8
 8017e0c:	6879      	ldr	r1, [r7, #4]
 8017e0e:	4610      	mov	r0, r2
 8017e10:	4798      	blx	r3
    minimalRect.intersect(CanvasWidget::getMinimalRect());
 8017e12:	f107 0310 	add.w	r3, r7, #16
 8017e16:	6879      	ldr	r1, [r7, #4]
 8017e18:	4618      	mov	r0, r3
 8017e1a:	f000 f815 	bl	8017e48 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>
 8017e1e:	f107 0210 	add.w	r2, r7, #16
 8017e22:	f107 0308 	add.w	r3, r7, #8
 8017e26:	4611      	mov	r1, r2
 8017e28:	4618      	mov	r0, r3
 8017e2a:	f7fa fb70 	bl	801250e <_ZNK8touchgfx4Rect9intersectERKS0_>
    invalidateRect(minimalRect);
 8017e2e:	687a      	ldr	r2, [r7, #4]
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	3310      	adds	r3, #16
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	f107 0108 	add.w	r1, r7, #8
 8017e3c:	4610      	mov	r0, r2
 8017e3e:	4798      	blx	r3
}
 8017e40:	bf00      	nop
 8017e42:	3718      	adds	r7, #24
 8017e44:	46bd      	mov	sp, r7
 8017e46:	bd80      	pop	{r7, pc}

08017e48 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:

Rect CanvasWidget::getMinimalRect() const
{
 8017e48:	b590      	push	{r4, r7, lr}
 8017e4a:	b085      	sub	sp, #20
 8017e4c:	af02      	add	r7, sp, #8
 8017e4e:	6078      	str	r0, [r7, #4]
 8017e50:	6039      	str	r1, [r7, #0]
    return Rect(0, 0, getWidth(), getHeight());
 8017e52:	683b      	ldr	r3, [r7, #0]
 8017e54:	4618      	mov	r0, r3
 8017e56:	f7fa ffd7 	bl	8012e08 <_ZNK8touchgfx8Drawable8getWidthEv>
 8017e5a:	4603      	mov	r3, r0
 8017e5c:	461c      	mov	r4, r3
 8017e5e:	683b      	ldr	r3, [r7, #0]
 8017e60:	4618      	mov	r0, r3
 8017e62:	f7fa ffde 	bl	8012e22 <_ZNK8touchgfx8Drawable9getHeightEv>
 8017e66:	4603      	mov	r3, r0
 8017e68:	9300      	str	r3, [sp, #0]
 8017e6a:	4623      	mov	r3, r4
 8017e6c:	2200      	movs	r2, #0
 8017e6e:	2100      	movs	r1, #0
 8017e70:	6878      	ldr	r0, [r7, #4]
 8017e72:	f7fa fad3 	bl	801241c <_ZN8touchgfx4RectC1Essss>
}
 8017e76:	6878      	ldr	r0, [r7, #4]
 8017e78:	370c      	adds	r7, #12
 8017e7a:	46bd      	mov	sp, r7
 8017e7c:	bd90      	pop	{r4, r7, pc}

08017e7e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:

Rect CanvasWidget::getSolidRect() const
{
 8017e7e:	b580      	push	{r7, lr}
 8017e80:	b084      	sub	sp, #16
 8017e82:	af02      	add	r7, sp, #8
 8017e84:	6078      	str	r0, [r7, #4]
 8017e86:	6039      	str	r1, [r7, #0]
    return Rect(0, 0, 0, 0);
 8017e88:	2300      	movs	r3, #0
 8017e8a:	9300      	str	r3, [sp, #0]
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	2200      	movs	r2, #0
 8017e90:	2100      	movs	r1, #0
 8017e92:	6878      	ldr	r0, [r7, #4]
 8017e94:	f7fa fac2 	bl	801241c <_ZN8touchgfx4RectC1Essss>
}
 8017e98:	6878      	ldr	r0, [r7, #4]
 8017e9a:	3708      	adds	r7, #8
 8017e9c:	46bd      	mov	sp, r7
 8017e9e:	bd80      	pop	{r7, pc}

08017ea0 <_ZN8touchgfx15AbstractPainter21compatibleFramebufferENS_6Bitmap12BitmapFormatE>:
     *
     * @param format A bitmap format.
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    static inline bool compatibleFramebuffer(Bitmap::BitmapFormat format)
 8017ea0:	b580      	push	{r7, lr}
 8017ea2:	b084      	sub	sp, #16
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	71fb      	strb	r3, [r7, #7]
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8017eaa:	f7fa fa8f 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 8017eae:	4602      	mov	r2, r0
 8017eb0:	6813      	ldr	r3, [r2, #0]
 8017eb2:	3324      	adds	r3, #36	; 0x24
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	4610      	mov	r0, r2
 8017eb8:	4798      	blx	r3
 8017eba:	4603      	mov	r3, r0
 8017ebc:	461a      	mov	r2, r3
 8017ebe:	79fb      	ldrb	r3, [r7, #7]
 8017ec0:	4293      	cmp	r3, r2
 8017ec2:	bf0c      	ite	eq
 8017ec4:	2301      	moveq	r3, #1
 8017ec6:	2300      	movne	r3, #0
 8017ec8:	73fb      	strb	r3, [r7, #15]
        if (HAL::getInstance()->getAuxiliaryLCD())
 8017eca:	f7fa fa73 	bl	80123b4 <_ZN8touchgfx3HAL11getInstanceEv>
 8017ece:	4603      	mov	r3, r0
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	f7fa fa97 	bl	8012404 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	bf14      	ite	ne
 8017edc:	2301      	movne	r3, #1
 8017ede:	2300      	moveq	r3, #0
 8017ee0:	b2db      	uxtb	r3, r3
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d016      	beq.n	8017f14 <_ZN8touchgfx15AbstractPainter21compatibleFramebufferENS_6Bitmap12BitmapFormatE+0x74>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8017ee6:	f7fa fa65 	bl	80123b4 <_ZN8touchgfx3HAL11getInstanceEv>
 8017eea:	4603      	mov	r3, r0
 8017eec:	4618      	mov	r0, r3
 8017eee:	f7fa fa89 	bl	8012404 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8017ef2:	4602      	mov	r2, r0
 8017ef4:	6813      	ldr	r3, [r2, #0]
 8017ef6:	3324      	adds	r3, #36	; 0x24
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	4610      	mov	r0, r2
 8017efc:	4798      	blx	r3
 8017efe:	4603      	mov	r3, r0
 8017f00:	461a      	mov	r2, r3
 8017f02:	79fb      	ldrb	r3, [r7, #7]
 8017f04:	4293      	cmp	r3, r2
 8017f06:	bf0c      	ite	eq
 8017f08:	2301      	moveq	r3, #1
 8017f0a:	2300      	movne	r3, #0
 8017f0c:	b2da      	uxtb	r2, r3
 8017f0e:	7bfb      	ldrb	r3, [r7, #15]
 8017f10:	4313      	orrs	r3, r2
 8017f12:	73fb      	strb	r3, [r7, #15]
        }
        return compat;
 8017f14:	7bfb      	ldrb	r3, [r7, #15]
    }
 8017f16:	4618      	mov	r0, r3
 8017f18:	3710      	adds	r7, #16
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	bd80      	pop	{r7, pc}
	...

08017f20 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
    AbstractPainterRGB565()
 8017f20:	b580      	push	{r7, lr}
 8017f22:	b082      	sub	sp, #8
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
    {
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	f7fe f83a 	bl	8015fa4 <_ZN8touchgfx15AbstractPainterC1Ev>
 8017f30:	4a0a      	ldr	r2, [pc, #40]	; (8017f5c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x3c>)
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	601a      	str	r2, [r3, #0]
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 8017f36:	2000      	movs	r0, #0
 8017f38:	f7ff ffb2 	bl	8017ea0 <_ZN8touchgfx15AbstractPainter21compatibleFramebufferENS_6Bitmap12BitmapFormatE>
 8017f3c:	4603      	mov	r3, r0
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d105      	bne.n	8017f4e <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x2e>
 8017f42:	4b07      	ldr	r3, [pc, #28]	; (8017f60 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x40>)
 8017f44:	4a07      	ldr	r2, [pc, #28]	; (8017f64 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x44>)
 8017f46:	212d      	movs	r1, #45	; 0x2d
 8017f48:	4807      	ldr	r0, [pc, #28]	; (8017f68 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x48>)
 8017f4a:	f013 f8d5 	bl	802b0f8 <__assert_func>
 8017f4e:	bf00      	nop
    }
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	4618      	mov	r0, r3
 8017f54:	3708      	adds	r7, #8
 8017f56:	46bd      	mov	sp, r7
 8017f58:	bd80      	pop	{r7, pc}
 8017f5a:	bf00      	nop
 8017f5c:	0802d284 	.word	0x0802d284
 8017f60:	0802c644 	.word	0x0802c644
 8017f64:	0802d558 	.word	0x0802d558
 8017f68:	0802c6a4 	.word	0x0802c6a4

08017f6c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh>:
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/Color.hpp>

namespace touchgfx
{
PainterRGB565::PainterRGB565(colortype color, uint8_t alpha) :
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b084      	sub	sp, #16
 8017f70:	af00      	add	r7, sp, #0
 8017f72:	60f8      	str	r0, [r7, #12]
 8017f74:	60b9      	str	r1, [r7, #8]
 8017f76:	4613      	mov	r3, r2
 8017f78:	71fb      	strb	r3, [r7, #7]
    AbstractPainterRGB565()
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	f7ff ffcf 	bl	8017f20 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 8017f82:	4a07      	ldr	r2, [pc, #28]	; (8017fa0 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh+0x34>)
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	601a      	str	r2, [r3, #0]
{
    setColor(color, alpha);
 8017f88:	79fb      	ldrb	r3, [r7, #7]
 8017f8a:	461a      	mov	r2, r3
 8017f8c:	68b9      	ldr	r1, [r7, #8]
 8017f8e:	68f8      	ldr	r0, [r7, #12]
 8017f90:	f000 f808 	bl	8017fa4 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeEh>
}
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	4618      	mov	r0, r3
 8017f98:	3710      	adds	r7, #16
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	bd80      	pop	{r7, pc}
 8017f9e:	bf00      	nop
 8017fa0:	0802d540 	.word	0x0802d540

08017fa4 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeEh>:

void PainterRGB565::setColor(colortype color, uint8_t alpha)
{
 8017fa4:	b580      	push	{r7, lr}
 8017fa6:	b084      	sub	sp, #16
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	60f8      	str	r0, [r7, #12]
 8017fac:	60b9      	str	r1, [r7, #8]
 8017fae:	4613      	mov	r3, r2
 8017fb0:	71fb      	strb	r3, [r7, #7]
    painterColor = (uint16_t)color;
 8017fb2:	f107 0308 	add.w	r3, r7, #8
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	f7fe f843 	bl	8016042 <_ZNK8touchgfx9colortypecvtEv>
 8017fbc:	4603      	mov	r3, r0
 8017fbe:	461a      	mov	r2, r3
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	829a      	strh	r2, [r3, #20]
    painterRed = painterColor & RMASK;
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	8a9a      	ldrh	r2, [r3, #20]
 8017fc8:	4b0d      	ldr	r3, [pc, #52]	; (8018000 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeEh+0x5c>)
 8017fca:	4013      	ands	r3, r2
 8017fcc:	b29a      	uxth	r2, r3
 8017fce:	68fb      	ldr	r3, [r7, #12]
 8017fd0:	82da      	strh	r2, [r3, #22]
    painterGreen = painterColor & GMASK;
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	8a9b      	ldrh	r3, [r3, #20]
 8017fd6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8017fda:	b29a      	uxth	r2, r3
 8017fdc:	68fb      	ldr	r3, [r7, #12]
 8017fde:	831a      	strh	r2, [r3, #24]
    painterBlue = painterColor & BMASK;
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	8a9b      	ldrh	r3, [r3, #20]
 8017fe4:	f003 031f 	and.w	r3, r3, #31
 8017fe8:	b29a      	uxth	r2, r3
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	835a      	strh	r2, [r3, #26]
    setAlpha(alpha);
 8017fee:	79fb      	ldrb	r3, [r7, #7]
 8017ff0:	4619      	mov	r1, r3
 8017ff2:	68f8      	ldr	r0, [r7, #12]
 8017ff4:	f000 f806 	bl	8018004 <_ZN8touchgfx13PainterRGB5658setAlphaEh>
}
 8017ff8:	bf00      	nop
 8017ffa:	3710      	adds	r7, #16
 8017ffc:	46bd      	mov	sp, r7
 8017ffe:	bd80      	pop	{r7, pc}
 8018000:	fffff800 	.word	0xfffff800

08018004 <_ZN8touchgfx13PainterRGB5658setAlphaEh>:
{
    return painterColor;
}

void PainterRGB565::setAlpha(uint8_t alpha)
{
 8018004:	b480      	push	{r7}
 8018006:	b083      	sub	sp, #12
 8018008:	af00      	add	r7, sp, #0
 801800a:	6078      	str	r0, [r7, #4]
 801800c:	460b      	mov	r3, r1
 801800e:	70fb      	strb	r3, [r7, #3]
    painterAlpha = alpha;
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	78fa      	ldrb	r2, [r7, #3]
 8018014:	771a      	strb	r2, [r3, #28]
}
 8018016:	bf00      	nop
 8018018:	370c      	adds	r7, #12
 801801a:	46bd      	mov	sp, r7
 801801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018020:	4770      	bx	lr
	...

08018024 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh>:
{
    return painterAlpha;
}

void PainterRGB565::render(uint8_t* ptr, int x, int xAdjust, int /*y*/, unsigned count, const uint8_t* covers)
{
 8018024:	b490      	push	{r4, r7}
 8018026:	b090      	sub	sp, #64	; 0x40
 8018028:	af00      	add	r7, sp, #0
 801802a:	60f8      	str	r0, [r7, #12]
 801802c:	60b9      	str	r1, [r7, #8]
 801802e:	607a      	str	r2, [r7, #4]
 8018030:	603b      	str	r3, [r7, #0]
    uint16_t* p = reinterpret_cast<uint16_t*>(ptr) + (x + xAdjust);
 8018032:	687a      	ldr	r2, [r7, #4]
 8018034:	683b      	ldr	r3, [r7, #0]
 8018036:	4413      	add	r3, r2
 8018038:	005b      	lsls	r3, r3, #1
 801803a:	68ba      	ldr	r2, [r7, #8]
 801803c:	4413      	add	r3, r2
 801803e:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint8_t totalAlpha = LCD::div255(widgetAlpha * painterAlpha);
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	7a1b      	ldrb	r3, [r3, #8]
 8018044:	b29a      	uxth	r2, r3
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	7f1b      	ldrb	r3, [r3, #28]
 801804a:	b29b      	uxth	r3, r3
 801804c:	fb12 f303 	smulbb	r3, r2, r3
 8018050:	b29b      	uxth	r3, r3
 8018052:	86fb      	strh	r3, [r7, #54]	; 0x36
 8018054:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018056:	1c5a      	adds	r2, r3, #1
 8018058:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801805a:	121b      	asrs	r3, r3, #8
 801805c:	4413      	add	r3, r2
 801805e:	121b      	asrs	r3, r3, #8
 8018060:	b2db      	uxtb	r3, r3
 8018062:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (totalAlpha == 0xFF)
 8018066:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801806a:	2bff      	cmp	r3, #255	; 0xff
 801806c:	f040 808a 	bne.w	8018184 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x160>
    {
        do
        {
            uint8_t alpha = *covers;
 8018070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018072:	781b      	ldrb	r3, [r3, #0]
 8018074:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
            covers++;
 8018078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801807a:	3301      	adds	r3, #1
 801807c:	653b      	str	r3, [r7, #80]	; 0x50
            if (alpha == 0xFF)
 801807e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8018082:	2bff      	cmp	r3, #255	; 0xff
 8018084:	d104      	bne.n	8018090 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x6c>
            {
                *p = painterColor;
 8018086:	68fb      	ldr	r3, [r7, #12]
 8018088:	8a9a      	ldrh	r2, [r3, #20]
 801808a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801808c:	801a      	strh	r2, [r3, #0]
 801808e:	e069      	b.n	8018164 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x140>
            }
            else
            {
                *p = mixColors(painterRed, painterGreen, painterBlue, *p, alpha);
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	68fa      	ldr	r2, [r7, #12]
 8018094:	8ad4      	ldrh	r4, [r2, #22]
 8018096:	68fa      	ldr	r2, [r7, #12]
 8018098:	8b10      	ldrh	r0, [r2, #24]
 801809a:	68fa      	ldr	r2, [r7, #12]
 801809c:	8b51      	ldrh	r1, [r2, #26]
 801809e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80180a0:	8812      	ldrh	r2, [r2, #0]
 80180a2:	633b      	str	r3, [r7, #48]	; 0x30
 80180a4:	4623      	mov	r3, r4
 80180a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80180a8:	4603      	mov	r3, r0
 80180aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80180ac:	460b      	mov	r3, r1
 80180ae:	857b      	strh	r3, [r7, #42]	; 0x2a
 80180b0:	4613      	mov	r3, r2
 80180b2:	853b      	strh	r3, [r7, #40]	; 0x28
 80180b4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80180b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t ialpha = 0xFF - alpha;
 80180bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80180c0:	43db      	mvns	r3, r3
 80180c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 80180c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80180c8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80180cc:	fb02 f203 	mul.w	r2, r2, r3
 80180d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80180d2:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80180d6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80180da:	fb01 f303 	mul.w	r3, r1, r3
 80180de:	4413      	add	r3, r2
 80180e0:	4a72      	ldr	r2, [pc, #456]	; (80182ac <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x288>)
 80180e2:	fb82 1203 	smull	r1, r2, r2, r3
 80180e6:	441a      	add	r2, r3
 80180e8:	11d2      	asrs	r2, r2, #7
 80180ea:	17db      	asrs	r3, r3, #31
 80180ec:	1ad3      	subs	r3, r2, r3
 80180ee:	b21a      	sxth	r2, r3
 80180f0:	4b6f      	ldr	r3, [pc, #444]	; (80182b0 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x28c>)
 80180f2:	4013      	ands	r3, r2
 80180f4:	b21a      	sxth	r2, r3
               (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 80180f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80180f8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80180fc:	fb01 f103 	mul.w	r1, r1, r3
 8018100:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018102:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018106:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 801810a:	fb00 f303 	mul.w	r3, r0, r3
 801810e:	440b      	add	r3, r1
 8018110:	4966      	ldr	r1, [pc, #408]	; (80182ac <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x288>)
 8018112:	fb81 0103 	smull	r0, r1, r1, r3
 8018116:	4419      	add	r1, r3
 8018118:	11c9      	asrs	r1, r1, #7
 801811a:	17db      	asrs	r3, r3, #31
 801811c:	1acb      	subs	r3, r1, r3
 801811e:	b21b      	sxth	r3, r3
 8018120:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018124:	b21b      	sxth	r3, r3
        return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 8018126:	4313      	orrs	r3, r2
 8018128:	b21a      	sxth	r2, r3
               (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 801812a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801812c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8018130:	fb01 f103 	mul.w	r1, r1, r3
 8018134:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018136:	f003 031f 	and.w	r3, r3, #31
 801813a:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 801813e:	fb00 f303 	mul.w	r3, r0, r3
 8018142:	440b      	add	r3, r1
 8018144:	4959      	ldr	r1, [pc, #356]	; (80182ac <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x288>)
 8018146:	fb81 0103 	smull	r0, r1, r1, r3
 801814a:	4419      	add	r1, r3
 801814c:	11c9      	asrs	r1, r1, #7
 801814e:	17db      	asrs	r3, r3, #31
 8018150:	1acb      	subs	r3, r1, r3
 8018152:	b21b      	sxth	r3, r3
 8018154:	f003 031f 	and.w	r3, r3, #31
 8018158:	b21b      	sxth	r3, r3
               (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 801815a:	4313      	orrs	r3, r2
 801815c:	b21b      	sxth	r3, r3
               (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 801815e:	b29a      	uxth	r2, r3
 8018160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018162:	801a      	strh	r2, [r3, #0]
            }
            p++;
 8018164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018166:	3302      	adds	r3, #2
 8018168:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        while (--count != 0);
 801816a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801816c:	3b01      	subs	r3, #1
 801816e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018172:	2b00      	cmp	r3, #0
 8018174:	bf14      	ite	ne
 8018176:	2301      	movne	r3, #1
 8018178:	2300      	moveq	r3, #0
 801817a:	b2db      	uxtb	r3, r3
 801817c:	2b00      	cmp	r3, #0
 801817e:	f000 8090 	beq.w	80182a2 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x27e>
        do
 8018182:	e775      	b.n	8018070 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x4c>
    }
    else
    {
        do
        {
            uint8_t alpha = LCD::div255((*covers) * totalAlpha);
 8018184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018186:	781b      	ldrb	r3, [r3, #0]
 8018188:	b29a      	uxth	r2, r3
 801818a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801818e:	b29b      	uxth	r3, r3
 8018190:	fb12 f303 	smulbb	r3, r2, r3
 8018194:	b29b      	uxth	r3, r3
 8018196:	84bb      	strh	r3, [r7, #36]	; 0x24
 8018198:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801819a:	1c5a      	adds	r2, r3, #1
 801819c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801819e:	121b      	asrs	r3, r3, #8
 80181a0:	4413      	add	r3, r2
 80181a2:	121b      	asrs	r3, r3, #8
 80181a4:	b2db      	uxtb	r3, r3
 80181a6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            covers++;
 80181aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181ac:	3301      	adds	r3, #1
 80181ae:	653b      	str	r3, [r7, #80]	; 0x50
            if (alpha == 0xFF)
 80181b0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80181b4:	2bff      	cmp	r3, #255	; 0xff
 80181b6:	d104      	bne.n	80181c2 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x19e>
            {
                *p = painterColor;
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	8a9a      	ldrh	r2, [r3, #20]
 80181bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181be:	801a      	strh	r2, [r3, #0]
 80181c0:	e060      	b.n	8018284 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x260>
            }
            else
            {
                *p = mixColors(painterRed, painterGreen, painterBlue, *p, alpha);
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	68fa      	ldr	r2, [r7, #12]
 80181c6:	8ad4      	ldrh	r4, [r2, #22]
 80181c8:	68fa      	ldr	r2, [r7, #12]
 80181ca:	8b10      	ldrh	r0, [r2, #24]
 80181cc:	68fa      	ldr	r2, [r7, #12]
 80181ce:	8b51      	ldrh	r1, [r2, #26]
 80181d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80181d2:	8812      	ldrh	r2, [r2, #0]
 80181d4:	623b      	str	r3, [r7, #32]
 80181d6:	4623      	mov	r3, r4
 80181d8:	83fb      	strh	r3, [r7, #30]
 80181da:	4603      	mov	r3, r0
 80181dc:	83bb      	strh	r3, [r7, #28]
 80181de:	460b      	mov	r3, r1
 80181e0:	837b      	strh	r3, [r7, #26]
 80181e2:	4613      	mov	r3, r2
 80181e4:	833b      	strh	r3, [r7, #24]
 80181e6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80181ea:	75fb      	strb	r3, [r7, #23]
        uint8_t ialpha = 0xFF - alpha;
 80181ec:	7dfb      	ldrb	r3, [r7, #23]
 80181ee:	43db      	mvns	r3, r3
 80181f0:	75bb      	strb	r3, [r7, #22]
        return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 80181f2:	8bfb      	ldrh	r3, [r7, #30]
 80181f4:	7dfa      	ldrb	r2, [r7, #23]
 80181f6:	fb02 f203 	mul.w	r2, r2, r3
 80181fa:	8b3b      	ldrh	r3, [r7, #24]
 80181fc:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8018200:	7db9      	ldrb	r1, [r7, #22]
 8018202:	fb01 f303 	mul.w	r3, r1, r3
 8018206:	4413      	add	r3, r2
 8018208:	4a28      	ldr	r2, [pc, #160]	; (80182ac <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x288>)
 801820a:	fb82 1203 	smull	r1, r2, r2, r3
 801820e:	441a      	add	r2, r3
 8018210:	11d2      	asrs	r2, r2, #7
 8018212:	17db      	asrs	r3, r3, #31
 8018214:	1ad3      	subs	r3, r2, r3
 8018216:	b21a      	sxth	r2, r3
 8018218:	4b25      	ldr	r3, [pc, #148]	; (80182b0 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x28c>)
 801821a:	4013      	ands	r3, r2
 801821c:	b21a      	sxth	r2, r3
               (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 801821e:	8bbb      	ldrh	r3, [r7, #28]
 8018220:	7df9      	ldrb	r1, [r7, #23]
 8018222:	fb01 f103 	mul.w	r1, r1, r3
 8018226:	8b3b      	ldrh	r3, [r7, #24]
 8018228:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801822c:	7db8      	ldrb	r0, [r7, #22]
 801822e:	fb00 f303 	mul.w	r3, r0, r3
 8018232:	440b      	add	r3, r1
 8018234:	491d      	ldr	r1, [pc, #116]	; (80182ac <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x288>)
 8018236:	fb81 0103 	smull	r0, r1, r1, r3
 801823a:	4419      	add	r1, r3
 801823c:	11c9      	asrs	r1, r1, #7
 801823e:	17db      	asrs	r3, r3, #31
 8018240:	1acb      	subs	r3, r1, r3
 8018242:	b21b      	sxth	r3, r3
 8018244:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018248:	b21b      	sxth	r3, r3
        return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 801824a:	4313      	orrs	r3, r2
 801824c:	b21a      	sxth	r2, r3
               (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 801824e:	8b7b      	ldrh	r3, [r7, #26]
 8018250:	7df9      	ldrb	r1, [r7, #23]
 8018252:	fb01 f103 	mul.w	r1, r1, r3
 8018256:	8b3b      	ldrh	r3, [r7, #24]
 8018258:	f003 031f 	and.w	r3, r3, #31
 801825c:	7db8      	ldrb	r0, [r7, #22]
 801825e:	fb00 f303 	mul.w	r3, r0, r3
 8018262:	440b      	add	r3, r1
 8018264:	4911      	ldr	r1, [pc, #68]	; (80182ac <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x288>)
 8018266:	fb81 0103 	smull	r0, r1, r1, r3
 801826a:	4419      	add	r1, r3
 801826c:	11c9      	asrs	r1, r1, #7
 801826e:	17db      	asrs	r3, r3, #31
 8018270:	1acb      	subs	r3, r1, r3
 8018272:	b21b      	sxth	r3, r3
 8018274:	f003 031f 	and.w	r3, r3, #31
 8018278:	b21b      	sxth	r3, r3
               (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 801827a:	4313      	orrs	r3, r2
 801827c:	b21b      	sxth	r3, r3
               (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 801827e:	b29a      	uxth	r2, r3
 8018280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018282:	801a      	strh	r2, [r3, #0]
            }
            p++;
 8018284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018286:	3302      	adds	r3, #2
 8018288:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        while (--count != 0);
 801828a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801828c:	3b01      	subs	r3, #1
 801828e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018292:	2b00      	cmp	r3, #0
 8018294:	bf14      	ite	ne
 8018296:	2301      	movne	r3, #1
 8018298:	2300      	moveq	r3, #0
 801829a:	b2db      	uxtb	r3, r3
 801829c:	2b00      	cmp	r3, #0
 801829e:	d000      	beq.n	80182a2 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x27e>
        do
 80182a0:	e770      	b.n	8018184 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x160>
    }
}
 80182a2:	bf00      	nop
 80182a4:	3740      	adds	r7, #64	; 0x40
 80182a6:	46bd      	mov	sp, r7
 80182a8:	bc90      	pop	{r4, r7}
 80182aa:	4770      	bx	lr
 80182ac:	80808081 	.word	0x80808081
 80182b0:	fffff800 	.word	0xfffff800

080182b4 <_ZN8touchgfx13PainterRGB56510renderNextERhS1_S1_S1_>:

bool PainterRGB565::renderNext(uint8_t& red, uint8_t& green, uint8_t& blue, uint8_t& alpha)
{
 80182b4:	b480      	push	{r7}
 80182b6:	b085      	sub	sp, #20
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	60f8      	str	r0, [r7, #12]
 80182bc:	60b9      	str	r1, [r7, #8]
 80182be:	607a      	str	r2, [r7, #4]
 80182c0:	603b      	str	r3, [r7, #0]
    red = painterRed >> 8;
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	8adb      	ldrh	r3, [r3, #22]
 80182c6:	121b      	asrs	r3, r3, #8
 80182c8:	b2da      	uxtb	r2, r3
 80182ca:	68bb      	ldr	r3, [r7, #8]
 80182cc:	701a      	strb	r2, [r3, #0]
    green = painterGreen >> 3;
 80182ce:	68fb      	ldr	r3, [r7, #12]
 80182d0:	8b1b      	ldrh	r3, [r3, #24]
 80182d2:	10db      	asrs	r3, r3, #3
 80182d4:	b2da      	uxtb	r2, r3
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	701a      	strb	r2, [r3, #0]
    blue = painterBlue << 3;
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	8b5b      	ldrh	r3, [r3, #26]
 80182de:	b2db      	uxtb	r3, r3
 80182e0:	00db      	lsls	r3, r3, #3
 80182e2:	b2da      	uxtb	r2, r3
 80182e4:	683b      	ldr	r3, [r7, #0]
 80182e6:	701a      	strb	r2, [r3, #0]
    alpha = painterAlpha;
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	7f1a      	ldrb	r2, [r3, #28]
 80182ec:	69bb      	ldr	r3, [r7, #24]
 80182ee:	701a      	strb	r2, [r3, #0]
    return true;
 80182f0:	2301      	movs	r3, #1
}
 80182f2:	4618      	mov	r0, r3
 80182f4:	3714      	adds	r7, #20
 80182f6:	46bd      	mov	sp, r7
 80182f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182fc:	4770      	bx	lr
	...

08018300 <_ZN8touchgfx10OSWrappers10initializeEv>:

// Just a dummy value to insert in the VSYNC queue.
static uint8_t dummy = 0x5a;

void OSWrappers::initialize()
{
 8018300:	b580      	push	{r7, lr}
 8018302:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8018304:	2203      	movs	r2, #3
 8018306:	2100      	movs	r1, #0
 8018308:	2001      	movs	r0, #1
 801830a:	f000 fc55 	bl	8018bb8 <xQueueGenericCreate>
 801830e:	4602      	mov	r2, r0
 8018310:	4b0b      	ldr	r3, [pc, #44]	; (8018340 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8018312:	601a      	str	r2, [r3, #0]
 8018314:	4b0a      	ldr	r3, [pc, #40]	; (8018340 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d006      	beq.n	801832a <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 801831c:	4b08      	ldr	r3, [pc, #32]	; (8018340 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801831e:	6818      	ldr	r0, [r3, #0]
 8018320:	2300      	movs	r3, #0
 8018322:	2200      	movs	r2, #0
 8018324:	2100      	movs	r1, #0
 8018326:	f000 fca5 	bl	8018c74 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 801832a:	2200      	movs	r2, #0
 801832c:	2101      	movs	r1, #1
 801832e:	2001      	movs	r0, #1
 8018330:	f000 fc42 	bl	8018bb8 <xQueueGenericCreate>
 8018334:	4602      	mov	r2, r0
 8018336:	4b03      	ldr	r3, [pc, #12]	; (8018344 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8018338:	601a      	str	r2, [r3, #0]
}
 801833a:	bf00      	nop
 801833c:	bd80      	pop	{r7, pc}
 801833e:	bf00      	nop
 8018340:	20000bc4 	.word	0x20000bc4
 8018344:	20000bc8 	.word	0x20000bc8

08018348 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

void OSWrappers::takeFrameBufferSemaphore()
{
 8018348:	b580      	push	{r7, lr}
 801834a:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 801834c:	4b04      	ldr	r3, [pc, #16]	; (8018360 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	f04f 31ff 	mov.w	r1, #4294967295
 8018354:	4618      	mov	r0, r3
 8018356:	f000 ff9f 	bl	8019298 <xQueueSemaphoreTake>
}
 801835a:	bf00      	nop
 801835c:	bd80      	pop	{r7, pc}
 801835e:	bf00      	nop
 8018360:	20000bc4 	.word	0x20000bc4

08018364 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
void OSWrappers::giveFrameBufferSemaphore()
{
 8018364:	b580      	push	{r7, lr}
 8018366:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8018368:	4b04      	ldr	r3, [pc, #16]	; (801837c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 801836a:	6818      	ldr	r0, [r3, #0]
 801836c:	2300      	movs	r3, #0
 801836e:	2200      	movs	r2, #0
 8018370:	2100      	movs	r1, #0
 8018372:	f000 fc7f 	bl	8018c74 <xQueueGenericSend>
}
 8018376:	bf00      	nop
 8018378:	bd80      	pop	{r7, pc}
 801837a:	bf00      	nop
 801837c:	20000bc4 	.word	0x20000bc4

08018380 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:

void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8018380:	b580      	push	{r7, lr}
 8018382:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8018384:	4b03      	ldr	r3, [pc, #12]	; (8018394 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	2100      	movs	r1, #0
 801838a:	4618      	mov	r0, r3
 801838c:	f000 ff84 	bl	8019298 <xQueueSemaphoreTake>
}
 8018390:	bf00      	nop
 8018392:	bd80      	pop	{r7, pc}
 8018394:	20000bc4 	.word	0x20000bc4

08018398 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:

void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8018398:	b580      	push	{r7, lr}
 801839a:	b082      	sub	sp, #8
 801839c:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 801839e:	2300      	movs	r3, #0
 80183a0:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 80183a2:	4b0b      	ldr	r3, [pc, #44]	; (80183d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	1d3a      	adds	r2, r7, #4
 80183a8:	4611      	mov	r1, r2
 80183aa:	4618      	mov	r0, r3
 80183ac:	f000 fe00 	bl	8018fb0 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d007      	beq.n	80183c6 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 80183b6:	4b07      	ldr	r3, [pc, #28]	; (80183d4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 80183b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80183bc:	601a      	str	r2, [r3, #0]
 80183be:	f3bf 8f4f 	dsb	sy
 80183c2:	f3bf 8f6f 	isb	sy
}
 80183c6:	bf00      	nop
 80183c8:	3708      	adds	r7, #8
 80183ca:	46bd      	mov	sp, r7
 80183cc:	bd80      	pop	{r7, pc}
 80183ce:	bf00      	nop
 80183d0:	20000bc4 	.word	0x20000bc4
 80183d4:	e000ed04 	.word	0xe000ed04

080183d8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:

void OSWrappers::signalVSync()
{
 80183d8:	b580      	push	{r7, lr}
 80183da:	b082      	sub	sp, #8
 80183dc:	af00      	add	r7, sp, #0
    if (vsync_q)
 80183de:	4b0e      	ldr	r3, [pc, #56]	; (8018418 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d013      	beq.n	801840e <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 80183e6:	2300      	movs	r3, #0
 80183e8:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 80183ea:	4b0b      	ldr	r3, [pc, #44]	; (8018418 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 80183ec:	6818      	ldr	r0, [r3, #0]
 80183ee:	1d3a      	adds	r2, r7, #4
 80183f0:	2300      	movs	r3, #0
 80183f2:	490a      	ldr	r1, [pc, #40]	; (801841c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 80183f4:	f000 fd40 	bl	8018e78 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d007      	beq.n	801840e <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 80183fe:	4b08      	ldr	r3, [pc, #32]	; (8018420 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8018400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018404:	601a      	str	r2, [r3, #0]
 8018406:	f3bf 8f4f 	dsb	sy
 801840a:	f3bf 8f6f 	isb	sy
    }
}
 801840e:	bf00      	nop
 8018410:	3708      	adds	r7, #8
 8018412:	46bd      	mov	sp, r7
 8018414:	bd80      	pop	{r7, pc}
 8018416:	bf00      	nop
 8018418:	20000bc8 	.word	0x20000bc8
 801841c:	20000050 	.word	0x20000050
 8018420:	e000ed04 	.word	0xe000ed04

08018424 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:

void OSWrappers::waitForVSync()
{
 8018424:	b580      	push	{r7, lr}
 8018426:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8018428:	4b08      	ldr	r3, [pc, #32]	; (801844c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	2200      	movs	r2, #0
 801842e:	4908      	ldr	r1, [pc, #32]	; (8018450 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8018430:	4618      	mov	r0, r3
 8018432:	f000 fe4f 	bl	80190d4 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8018436:	4b05      	ldr	r3, [pc, #20]	; (801844c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	f04f 32ff 	mov.w	r2, #4294967295
 801843e:	4904      	ldr	r1, [pc, #16]	; (8018450 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8018440:	4618      	mov	r0, r3
 8018442:	f000 fe47 	bl	80190d4 <xQueueReceive>
}
 8018446:	bf00      	nop
 8018448:	bd80      	pop	{r7, pc}
 801844a:	bf00      	nop
 801844c:	20000bc8 	.word	0x20000bc8
 8018450:	20000050 	.word	0x20000050

08018454 <_ZL12IdleTaskHookPv>:
{
    vTaskDelay(ms);
}

static portBASE_TYPE IdleTaskHook(void* p)
{
 8018454:	b580      	push	{r7, lr}
 8018456:	b082      	sub	sp, #8
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
    if ((int)p) //idle task sched out
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	2b00      	cmp	r3, #0
 8018460:	d007      	beq.n	8018472 <_ZL12IdleTaskHookPv+0x1e>
    {
        touchgfx::HAL::getInstance()->setMCUActive(true);
 8018462:	f7f9 ffa7 	bl	80123b4 <_ZN8touchgfx3HAL11getInstanceEv>
 8018466:	4603      	mov	r3, r0
 8018468:	2101      	movs	r1, #1
 801846a:	4618      	mov	r0, r3
 801846c:	f00a fa42 	bl	80228f4 <_ZN8touchgfx3HAL12setMCUActiveEb>
 8018470:	e006      	b.n	8018480 <_ZL12IdleTaskHookPv+0x2c>
    }
    else //idle task sched in
    {
        touchgfx::HAL::getInstance()->setMCUActive(false);
 8018472:	f7f9 ff9f 	bl	80123b4 <_ZN8touchgfx3HAL11getInstanceEv>
 8018476:	4603      	mov	r3, r0
 8018478:	2100      	movs	r1, #0
 801847a:	4618      	mov	r0, r3
 801847c:	f00a fa3a 	bl	80228f4 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
    return pdTRUE;
 8018480:	2301      	movs	r3, #1
}
 8018482:	4618      	mov	r0, r3
 8018484:	3708      	adds	r7, #8
 8018486:	46bd      	mov	sp, r7
 8018488:	bd80      	pop	{r7, pc}

0801848a <vApplicationStackOverflowHook>:
// FreeRTOS specific handlers
extern "C"
{
    void vApplicationStackOverflowHook(xTaskHandle xTask,
                                       signed portCHAR* pcTaskName)
    {
 801848a:	b480      	push	{r7}
 801848c:	b083      	sub	sp, #12
 801848e:	af00      	add	r7, sp, #0
 8018490:	6078      	str	r0, [r7, #4]
 8018492:	6039      	str	r1, [r7, #0]
        while (1);
 8018494:	e7fe      	b.n	8018494 <vApplicationStackOverflowHook+0xa>

08018496 <vApplicationMallocFailedHook>:
    }

    void vApplicationMallocFailedHook(xTaskHandle xTask,
                                      signed portCHAR* pcTaskName)
    {
 8018496:	b480      	push	{r7}
 8018498:	b083      	sub	sp, #12
 801849a:	af00      	add	r7, sp, #0
 801849c:	6078      	str	r0, [r7, #4]
 801849e:	6039      	str	r1, [r7, #0]
        while (1);
 80184a0:	e7fe      	b.n	80184a0 <vApplicationMallocFailedHook+0xa>
	...

080184a4 <vApplicationIdleHook>:
    }

    void vApplicationIdleHook(void)
    {
 80184a4:	b580      	push	{r7, lr}
 80184a6:	af00      	add	r7, sp, #0
        // Set task tag in order to have the "IdleTaskHook" function called when the idle task is
        // switched in/out. Used solely for measuring MCU load, and can be removed if MCU load
        // readout is not needed.
        vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80184a8:	4902      	ldr	r1, [pc, #8]	; (80184b4 <vApplicationIdleHook+0x10>)
 80184aa:	2000      	movs	r0, #0
 80184ac:	f001 fd6c 	bl	8019f88 <vTaskSetApplicationTaskTag>
    }
 80184b0:	bf00      	nop
 80184b2:	bd80      	pop	{r7, pc}
 80184b4:	08018455 	.word	0x08018455

080184b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80184b8:	b480      	push	{r7}
 80184ba:	b087      	sub	sp, #28
 80184bc:	af00      	add	r7, sp, #0
 80184be:	60f8      	str	r0, [r7, #12]
 80184c0:	60b9      	str	r1, [r7, #8]
 80184c2:	4613      	mov	r3, r2
 80184c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80184c6:	2301      	movs	r3, #1
 80184c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80184ca:	2300      	movs	r3, #0
 80184cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80184ce:	4b1f      	ldr	r3, [pc, #124]	; (801854c <FATFS_LinkDriverEx+0x94>)
 80184d0:	7a5b      	ldrb	r3, [r3, #9]
 80184d2:	b2db      	uxtb	r3, r3
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d131      	bne.n	801853c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80184d8:	4b1c      	ldr	r3, [pc, #112]	; (801854c <FATFS_LinkDriverEx+0x94>)
 80184da:	7a5b      	ldrb	r3, [r3, #9]
 80184dc:	b2db      	uxtb	r3, r3
 80184de:	461a      	mov	r2, r3
 80184e0:	4b1a      	ldr	r3, [pc, #104]	; (801854c <FATFS_LinkDriverEx+0x94>)
 80184e2:	2100      	movs	r1, #0
 80184e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80184e6:	4b19      	ldr	r3, [pc, #100]	; (801854c <FATFS_LinkDriverEx+0x94>)
 80184e8:	7a5b      	ldrb	r3, [r3, #9]
 80184ea:	b2db      	uxtb	r3, r3
 80184ec:	4a17      	ldr	r2, [pc, #92]	; (801854c <FATFS_LinkDriverEx+0x94>)
 80184ee:	009b      	lsls	r3, r3, #2
 80184f0:	4413      	add	r3, r2
 80184f2:	68fa      	ldr	r2, [r7, #12]
 80184f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80184f6:	4b15      	ldr	r3, [pc, #84]	; (801854c <FATFS_LinkDriverEx+0x94>)
 80184f8:	7a5b      	ldrb	r3, [r3, #9]
 80184fa:	b2db      	uxtb	r3, r3
 80184fc:	461a      	mov	r2, r3
 80184fe:	4b13      	ldr	r3, [pc, #76]	; (801854c <FATFS_LinkDriverEx+0x94>)
 8018500:	4413      	add	r3, r2
 8018502:	79fa      	ldrb	r2, [r7, #7]
 8018504:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8018506:	4b11      	ldr	r3, [pc, #68]	; (801854c <FATFS_LinkDriverEx+0x94>)
 8018508:	7a5b      	ldrb	r3, [r3, #9]
 801850a:	b2db      	uxtb	r3, r3
 801850c:	1c5a      	adds	r2, r3, #1
 801850e:	b2d1      	uxtb	r1, r2
 8018510:	4a0e      	ldr	r2, [pc, #56]	; (801854c <FATFS_LinkDriverEx+0x94>)
 8018512:	7251      	strb	r1, [r2, #9]
 8018514:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8018516:	7dbb      	ldrb	r3, [r7, #22]
 8018518:	3330      	adds	r3, #48	; 0x30
 801851a:	b2da      	uxtb	r2, r3
 801851c:	68bb      	ldr	r3, [r7, #8]
 801851e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8018520:	68bb      	ldr	r3, [r7, #8]
 8018522:	3301      	adds	r3, #1
 8018524:	223a      	movs	r2, #58	; 0x3a
 8018526:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8018528:	68bb      	ldr	r3, [r7, #8]
 801852a:	3302      	adds	r3, #2
 801852c:	222f      	movs	r2, #47	; 0x2f
 801852e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8018530:	68bb      	ldr	r3, [r7, #8]
 8018532:	3303      	adds	r3, #3
 8018534:	2200      	movs	r2, #0
 8018536:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8018538:	2300      	movs	r3, #0
 801853a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801853c:	7dfb      	ldrb	r3, [r7, #23]
}
 801853e:	4618      	mov	r0, r3
 8018540:	371c      	adds	r7, #28
 8018542:	46bd      	mov	sp, r7
 8018544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018548:	4770      	bx	lr
 801854a:	bf00      	nop
 801854c:	20000bcc 	.word	0x20000bcc

08018550 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8018550:	b580      	push	{r7, lr}
 8018552:	b082      	sub	sp, #8
 8018554:	af00      	add	r7, sp, #0
 8018556:	6078      	str	r0, [r7, #4]
 8018558:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801855a:	2200      	movs	r2, #0
 801855c:	6839      	ldr	r1, [r7, #0]
 801855e:	6878      	ldr	r0, [r7, #4]
 8018560:	f7ff ffaa 	bl	80184b8 <FATFS_LinkDriverEx>
 8018564:	4603      	mov	r3, r0
}
 8018566:	4618      	mov	r0, r3
 8018568:	3708      	adds	r7, #8
 801856a:	46bd      	mov	sp, r7
 801856c:	bd80      	pop	{r7, pc}

0801856e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801856e:	b480      	push	{r7}
 8018570:	b085      	sub	sp, #20
 8018572:	af00      	add	r7, sp, #0
 8018574:	4603      	mov	r3, r0
 8018576:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8018578:	2300      	movs	r3, #0
 801857a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801857c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018580:	2b84      	cmp	r3, #132	; 0x84
 8018582:	d005      	beq.n	8018590 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8018584:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	4413      	add	r3, r2
 801858c:	3303      	adds	r3, #3
 801858e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8018590:	68fb      	ldr	r3, [r7, #12]
}
 8018592:	4618      	mov	r0, r3
 8018594:	3714      	adds	r7, #20
 8018596:	46bd      	mov	sp, r7
 8018598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801859c:	4770      	bx	lr

0801859e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801859e:	b480      	push	{r7}
 80185a0:	b083      	sub	sp, #12
 80185a2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80185a4:	f3ef 8305 	mrs	r3, IPSR
 80185a8:	607b      	str	r3, [r7, #4]
  return(result);
 80185aa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	bf14      	ite	ne
 80185b0:	2301      	movne	r3, #1
 80185b2:	2300      	moveq	r3, #0
 80185b4:	b2db      	uxtb	r3, r3
}
 80185b6:	4618      	mov	r0, r3
 80185b8:	370c      	adds	r7, #12
 80185ba:	46bd      	mov	sp, r7
 80185bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185c0:	4770      	bx	lr

080185c2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80185c2:	b580      	push	{r7, lr}
 80185c4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80185c6:	f001 faf1 	bl	8019bac <vTaskStartScheduler>
  
  return osOK;
 80185ca:	2300      	movs	r3, #0
}
 80185cc:	4618      	mov	r0, r3
 80185ce:	bd80      	pop	{r7, pc}

080185d0 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80185d0:	b580      	push	{r7, lr}
 80185d2:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80185d4:	f001 ff90 	bl	801a4f8 <xTaskGetSchedulerState>
 80185d8:	4603      	mov	r3, r0
 80185da:	2b01      	cmp	r3, #1
 80185dc:	d101      	bne.n	80185e2 <osKernelRunning+0x12>
    return 0;
 80185de:	2300      	movs	r3, #0
 80185e0:	e000      	b.n	80185e4 <osKernelRunning+0x14>
  else
    return 1;
 80185e2:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80185e4:	4618      	mov	r0, r3
 80185e6:	bd80      	pop	{r7, pc}

080185e8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80185ec:	f7ff ffd7 	bl	801859e <inHandlerMode>
 80185f0:	4603      	mov	r3, r0
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d003      	beq.n	80185fe <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80185f6:	f001 fbf7 	bl	8019de8 <xTaskGetTickCountFromISR>
 80185fa:	4603      	mov	r3, r0
 80185fc:	e002      	b.n	8018604 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80185fe:	f001 fbe3 	bl	8019dc8 <xTaskGetTickCount>
 8018602:	4603      	mov	r3, r0
  }
}
 8018604:	4618      	mov	r0, r3
 8018606:	bd80      	pop	{r7, pc}

08018608 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8018608:	b5f0      	push	{r4, r5, r6, r7, lr}
 801860a:	b089      	sub	sp, #36	; 0x24
 801860c:	af04      	add	r7, sp, #16
 801860e:	6078      	str	r0, [r7, #4]
 8018610:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	695b      	ldr	r3, [r3, #20]
 8018616:	2b00      	cmp	r3, #0
 8018618:	d020      	beq.n	801865c <osThreadCreate+0x54>
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	699b      	ldr	r3, [r3, #24]
 801861e:	2b00      	cmp	r3, #0
 8018620:	d01c      	beq.n	801865c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	685c      	ldr	r4, [r3, #4]
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	681d      	ldr	r5, [r3, #0]
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	691e      	ldr	r6, [r3, #16]
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018634:	4618      	mov	r0, r3
 8018636:	f7ff ff9a 	bl	801856e <makeFreeRtosPriority>
 801863a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	695b      	ldr	r3, [r3, #20]
 8018640:	687a      	ldr	r2, [r7, #4]
 8018642:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018644:	9202      	str	r2, [sp, #8]
 8018646:	9301      	str	r3, [sp, #4]
 8018648:	9100      	str	r1, [sp, #0]
 801864a:	683b      	ldr	r3, [r7, #0]
 801864c:	4632      	mov	r2, r6
 801864e:	4629      	mov	r1, r5
 8018650:	4620      	mov	r0, r4
 8018652:	f001 f8dc 	bl	801980e <xTaskCreateStatic>
 8018656:	4603      	mov	r3, r0
 8018658:	60fb      	str	r3, [r7, #12]
 801865a:	e01c      	b.n	8018696 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	685c      	ldr	r4, [r3, #4]
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018668:	b29e      	uxth	r6, r3
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018670:	4618      	mov	r0, r3
 8018672:	f7ff ff7c 	bl	801856e <makeFreeRtosPriority>
 8018676:	4602      	mov	r2, r0
 8018678:	f107 030c 	add.w	r3, r7, #12
 801867c:	9301      	str	r3, [sp, #4]
 801867e:	9200      	str	r2, [sp, #0]
 8018680:	683b      	ldr	r3, [r7, #0]
 8018682:	4632      	mov	r2, r6
 8018684:	4629      	mov	r1, r5
 8018686:	4620      	mov	r0, r4
 8018688:	f001 f920 	bl	80198cc <xTaskCreate>
 801868c:	4603      	mov	r3, r0
 801868e:	2b01      	cmp	r3, #1
 8018690:	d001      	beq.n	8018696 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8018692:	2300      	movs	r3, #0
 8018694:	e000      	b.n	8018698 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8018696:	68fb      	ldr	r3, [r7, #12]
}
 8018698:	4618      	mov	r0, r3
 801869a:	3714      	adds	r7, #20
 801869c:	46bd      	mov	sp, r7
 801869e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080186a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b084      	sub	sp, #16
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d001      	beq.n	80186b6 <osDelay+0x16>
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	e000      	b.n	80186b8 <osDelay+0x18>
 80186b6:	2301      	movs	r3, #1
 80186b8:	4618      	mov	r0, r3
 80186ba:	f001 fa41 	bl	8019b40 <vTaskDelay>
  
  return osOK;
 80186be:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80186c0:	4618      	mov	r0, r3
 80186c2:	3710      	adds	r7, #16
 80186c4:	46bd      	mov	sp, r7
 80186c6:	bd80      	pop	{r7, pc}

080186c8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80186c8:	b590      	push	{r4, r7, lr}
 80186ca:	b085      	sub	sp, #20
 80186cc:	af02      	add	r7, sp, #8
 80186ce:	6078      	str	r0, [r7, #4]
 80186d0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	689b      	ldr	r3, [r3, #8]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d012      	beq.n	8018700 <osMessageCreate+0x38>
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	68db      	ldr	r3, [r3, #12]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d00e      	beq.n	8018700 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	6818      	ldr	r0, [r3, #0]
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	6859      	ldr	r1, [r3, #4]
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	689a      	ldr	r2, [r3, #8]
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	68dc      	ldr	r4, [r3, #12]
 80186f2:	2300      	movs	r3, #0
 80186f4:	9300      	str	r3, [sp, #0]
 80186f6:	4623      	mov	r3, r4
 80186f8:	f000 f9e2 	bl	8018ac0 <xQueueGenericCreateStatic>
 80186fc:	4603      	mov	r3, r0
 80186fe:	e008      	b.n	8018712 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	6818      	ldr	r0, [r3, #0]
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	685b      	ldr	r3, [r3, #4]
 8018708:	2200      	movs	r2, #0
 801870a:	4619      	mov	r1, r3
 801870c:	f000 fa54 	bl	8018bb8 <xQueueGenericCreate>
 8018710:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8018712:	4618      	mov	r0, r3
 8018714:	370c      	adds	r7, #12
 8018716:	46bd      	mov	sp, r7
 8018718:	bd90      	pop	{r4, r7, pc}
	...

0801871c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801871c:	b580      	push	{r7, lr}
 801871e:	b086      	sub	sp, #24
 8018720:	af00      	add	r7, sp, #0
 8018722:	60f8      	str	r0, [r7, #12]
 8018724:	60b9      	str	r1, [r7, #8]
 8018726:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8018728:	2300      	movs	r3, #0
 801872a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8018730:	697b      	ldr	r3, [r7, #20]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d101      	bne.n	801873a <osMessagePut+0x1e>
    ticks = 1;
 8018736:	2301      	movs	r3, #1
 8018738:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801873a:	f7ff ff30 	bl	801859e <inHandlerMode>
 801873e:	4603      	mov	r3, r0
 8018740:	2b00      	cmp	r3, #0
 8018742:	d018      	beq.n	8018776 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8018744:	f107 0210 	add.w	r2, r7, #16
 8018748:	f107 0108 	add.w	r1, r7, #8
 801874c:	2300      	movs	r3, #0
 801874e:	68f8      	ldr	r0, [r7, #12]
 8018750:	f000 fb92 	bl	8018e78 <xQueueGenericSendFromISR>
 8018754:	4603      	mov	r3, r0
 8018756:	2b01      	cmp	r3, #1
 8018758:	d001      	beq.n	801875e <osMessagePut+0x42>
      return osErrorOS;
 801875a:	23ff      	movs	r3, #255	; 0xff
 801875c:	e018      	b.n	8018790 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801875e:	693b      	ldr	r3, [r7, #16]
 8018760:	2b00      	cmp	r3, #0
 8018762:	d014      	beq.n	801878e <osMessagePut+0x72>
 8018764:	4b0c      	ldr	r3, [pc, #48]	; (8018798 <osMessagePut+0x7c>)
 8018766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801876a:	601a      	str	r2, [r3, #0]
 801876c:	f3bf 8f4f 	dsb	sy
 8018770:	f3bf 8f6f 	isb	sy
 8018774:	e00b      	b.n	801878e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8018776:	f107 0108 	add.w	r1, r7, #8
 801877a:	2300      	movs	r3, #0
 801877c:	697a      	ldr	r2, [r7, #20]
 801877e:	68f8      	ldr	r0, [r7, #12]
 8018780:	f000 fa78 	bl	8018c74 <xQueueGenericSend>
 8018784:	4603      	mov	r3, r0
 8018786:	2b01      	cmp	r3, #1
 8018788:	d001      	beq.n	801878e <osMessagePut+0x72>
      return osErrorOS;
 801878a:	23ff      	movs	r3, #255	; 0xff
 801878c:	e000      	b.n	8018790 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801878e:	2300      	movs	r3, #0
}
 8018790:	4618      	mov	r0, r3
 8018792:	3718      	adds	r7, #24
 8018794:	46bd      	mov	sp, r7
 8018796:	bd80      	pop	{r7, pc}
 8018798:	e000ed04 	.word	0xe000ed04

0801879c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 801879c:	b590      	push	{r4, r7, lr}
 801879e:	b08b      	sub	sp, #44	; 0x2c
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	60f8      	str	r0, [r7, #12]
 80187a4:	60b9      	str	r1, [r7, #8]
 80187a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80187a8:	68bb      	ldr	r3, [r7, #8]
 80187aa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80187ac:	2300      	movs	r3, #0
 80187ae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80187b0:	68bb      	ldr	r3, [r7, #8]
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d10a      	bne.n	80187cc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80187b6:	2380      	movs	r3, #128	; 0x80
 80187b8:	617b      	str	r3, [r7, #20]
    return event;
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	461c      	mov	r4, r3
 80187be:	f107 0314 	add.w	r3, r7, #20
 80187c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80187c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80187ca:	e054      	b.n	8018876 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80187cc:	2300      	movs	r3, #0
 80187ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80187d0:	2300      	movs	r3, #0
 80187d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187da:	d103      	bne.n	80187e4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80187dc:	f04f 33ff 	mov.w	r3, #4294967295
 80187e0:	627b      	str	r3, [r7, #36]	; 0x24
 80187e2:	e009      	b.n	80187f8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d006      	beq.n	80187f8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80187ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d101      	bne.n	80187f8 <osMessageGet+0x5c>
      ticks = 1;
 80187f4:	2301      	movs	r3, #1
 80187f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80187f8:	f7ff fed1 	bl	801859e <inHandlerMode>
 80187fc:	4603      	mov	r3, r0
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d01c      	beq.n	801883c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8018802:	f107 0220 	add.w	r2, r7, #32
 8018806:	f107 0314 	add.w	r3, r7, #20
 801880a:	3304      	adds	r3, #4
 801880c:	4619      	mov	r1, r3
 801880e:	68b8      	ldr	r0, [r7, #8]
 8018810:	f000 fe52 	bl	80194b8 <xQueueReceiveFromISR>
 8018814:	4603      	mov	r3, r0
 8018816:	2b01      	cmp	r3, #1
 8018818:	d102      	bne.n	8018820 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801881a:	2310      	movs	r3, #16
 801881c:	617b      	str	r3, [r7, #20]
 801881e:	e001      	b.n	8018824 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8018820:	2300      	movs	r3, #0
 8018822:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8018824:	6a3b      	ldr	r3, [r7, #32]
 8018826:	2b00      	cmp	r3, #0
 8018828:	d01d      	beq.n	8018866 <osMessageGet+0xca>
 801882a:	4b15      	ldr	r3, [pc, #84]	; (8018880 <osMessageGet+0xe4>)
 801882c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018830:	601a      	str	r2, [r3, #0]
 8018832:	f3bf 8f4f 	dsb	sy
 8018836:	f3bf 8f6f 	isb	sy
 801883a:	e014      	b.n	8018866 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801883c:	f107 0314 	add.w	r3, r7, #20
 8018840:	3304      	adds	r3, #4
 8018842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018844:	4619      	mov	r1, r3
 8018846:	68b8      	ldr	r0, [r7, #8]
 8018848:	f000 fc44 	bl	80190d4 <xQueueReceive>
 801884c:	4603      	mov	r3, r0
 801884e:	2b01      	cmp	r3, #1
 8018850:	d102      	bne.n	8018858 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8018852:	2310      	movs	r3, #16
 8018854:	617b      	str	r3, [r7, #20]
 8018856:	e006      	b.n	8018866 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8018858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801885a:	2b00      	cmp	r3, #0
 801885c:	d101      	bne.n	8018862 <osMessageGet+0xc6>
 801885e:	2300      	movs	r3, #0
 8018860:	e000      	b.n	8018864 <osMessageGet+0xc8>
 8018862:	2340      	movs	r3, #64	; 0x40
 8018864:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	461c      	mov	r4, r3
 801886a:	f107 0314 	add.w	r3, r7, #20
 801886e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018872:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8018876:	68f8      	ldr	r0, [r7, #12]
 8018878:	372c      	adds	r7, #44	; 0x2c
 801887a:	46bd      	mov	sp, r7
 801887c:	bd90      	pop	{r4, r7, pc}
 801887e:	bf00      	nop
 8018880:	e000ed04 	.word	0xe000ed04

08018884 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8018884:	b480      	push	{r7}
 8018886:	b083      	sub	sp, #12
 8018888:	af00      	add	r7, sp, #0
 801888a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	f103 0208 	add.w	r2, r3, #8
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	f04f 32ff 	mov.w	r2, #4294967295
 801889c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	f103 0208 	add.w	r2, r3, #8
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	f103 0208 	add.w	r2, r3, #8
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	2200      	movs	r2, #0
 80188b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80188b8:	bf00      	nop
 80188ba:	370c      	adds	r7, #12
 80188bc:	46bd      	mov	sp, r7
 80188be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188c2:	4770      	bx	lr

080188c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80188c4:	b480      	push	{r7}
 80188c6:	b083      	sub	sp, #12
 80188c8:	af00      	add	r7, sp, #0
 80188ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	2200      	movs	r2, #0
 80188d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80188d2:	bf00      	nop
 80188d4:	370c      	adds	r7, #12
 80188d6:	46bd      	mov	sp, r7
 80188d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188dc:	4770      	bx	lr

080188de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80188de:	b480      	push	{r7}
 80188e0:	b085      	sub	sp, #20
 80188e2:	af00      	add	r7, sp, #0
 80188e4:	6078      	str	r0, [r7, #4]
 80188e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	685b      	ldr	r3, [r3, #4]
 80188ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80188ee:	683b      	ldr	r3, [r7, #0]
 80188f0:	68fa      	ldr	r2, [r7, #12]
 80188f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	689a      	ldr	r2, [r3, #8]
 80188f8:	683b      	ldr	r3, [r7, #0]
 80188fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	689b      	ldr	r3, [r3, #8]
 8018900:	683a      	ldr	r2, [r7, #0]
 8018902:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	683a      	ldr	r2, [r7, #0]
 8018908:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801890a:	683b      	ldr	r3, [r7, #0]
 801890c:	687a      	ldr	r2, [r7, #4]
 801890e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	1c5a      	adds	r2, r3, #1
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	601a      	str	r2, [r3, #0]
}
 801891a:	bf00      	nop
 801891c:	3714      	adds	r7, #20
 801891e:	46bd      	mov	sp, r7
 8018920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018924:	4770      	bx	lr

08018926 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018926:	b480      	push	{r7}
 8018928:	b085      	sub	sp, #20
 801892a:	af00      	add	r7, sp, #0
 801892c:	6078      	str	r0, [r7, #4]
 801892e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018930:	683b      	ldr	r3, [r7, #0]
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018936:	68bb      	ldr	r3, [r7, #8]
 8018938:	f1b3 3fff 	cmp.w	r3, #4294967295
 801893c:	d103      	bne.n	8018946 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	691b      	ldr	r3, [r3, #16]
 8018942:	60fb      	str	r3, [r7, #12]
 8018944:	e00c      	b.n	8018960 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	3308      	adds	r3, #8
 801894a:	60fb      	str	r3, [r7, #12]
 801894c:	e002      	b.n	8018954 <vListInsert+0x2e>
 801894e:	68fb      	ldr	r3, [r7, #12]
 8018950:	685b      	ldr	r3, [r3, #4]
 8018952:	60fb      	str	r3, [r7, #12]
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	685b      	ldr	r3, [r3, #4]
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	68ba      	ldr	r2, [r7, #8]
 801895c:	429a      	cmp	r2, r3
 801895e:	d2f6      	bcs.n	801894e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8018960:	68fb      	ldr	r3, [r7, #12]
 8018962:	685a      	ldr	r2, [r3, #4]
 8018964:	683b      	ldr	r3, [r7, #0]
 8018966:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018968:	683b      	ldr	r3, [r7, #0]
 801896a:	685b      	ldr	r3, [r3, #4]
 801896c:	683a      	ldr	r2, [r7, #0]
 801896e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018970:	683b      	ldr	r3, [r7, #0]
 8018972:	68fa      	ldr	r2, [r7, #12]
 8018974:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8018976:	68fb      	ldr	r3, [r7, #12]
 8018978:	683a      	ldr	r2, [r7, #0]
 801897a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801897c:	683b      	ldr	r3, [r7, #0]
 801897e:	687a      	ldr	r2, [r7, #4]
 8018980:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	1c5a      	adds	r2, r3, #1
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	601a      	str	r2, [r3, #0]
}
 801898c:	bf00      	nop
 801898e:	3714      	adds	r7, #20
 8018990:	46bd      	mov	sp, r7
 8018992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018996:	4770      	bx	lr

08018998 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8018998:	b480      	push	{r7}
 801899a:	b085      	sub	sp, #20
 801899c:	af00      	add	r7, sp, #0
 801899e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	691b      	ldr	r3, [r3, #16]
 80189a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	685b      	ldr	r3, [r3, #4]
 80189aa:	687a      	ldr	r2, [r7, #4]
 80189ac:	6892      	ldr	r2, [r2, #8]
 80189ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	689b      	ldr	r3, [r3, #8]
 80189b4:	687a      	ldr	r2, [r7, #4]
 80189b6:	6852      	ldr	r2, [r2, #4]
 80189b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	685b      	ldr	r3, [r3, #4]
 80189be:	687a      	ldr	r2, [r7, #4]
 80189c0:	429a      	cmp	r2, r3
 80189c2:	d103      	bne.n	80189cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	689a      	ldr	r2, [r3, #8]
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	2200      	movs	r2, #0
 80189d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	681b      	ldr	r3, [r3, #0]
 80189d6:	1e5a      	subs	r2, r3, #1
 80189d8:	68fb      	ldr	r3, [r7, #12]
 80189da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80189dc:	68fb      	ldr	r3, [r7, #12]
 80189de:	681b      	ldr	r3, [r3, #0]
}
 80189e0:	4618      	mov	r0, r3
 80189e2:	3714      	adds	r7, #20
 80189e4:	46bd      	mov	sp, r7
 80189e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189ea:	4770      	bx	lr

080189ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b084      	sub	sp, #16
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	6078      	str	r0, [r7, #4]
 80189f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80189fa:	68fb      	ldr	r3, [r7, #12]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d10b      	bne.n	8018a18 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8018a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a04:	b672      	cpsid	i
 8018a06:	f383 8811 	msr	BASEPRI, r3
 8018a0a:	f3bf 8f6f 	isb	sy
 8018a0e:	f3bf 8f4f 	dsb	sy
 8018a12:	b662      	cpsie	i
 8018a14:	60bb      	str	r3, [r7, #8]
 8018a16:	e7fe      	b.n	8018a16 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8018a18:	f002 f8be 	bl	801ab98 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	681a      	ldr	r2, [r3, #0]
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a24:	68f9      	ldr	r1, [r7, #12]
 8018a26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018a28:	fb01 f303 	mul.w	r3, r1, r3
 8018a2c:	441a      	add	r2, r3
 8018a2e:	68fb      	ldr	r3, [r7, #12]
 8018a30:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	2200      	movs	r2, #0
 8018a36:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018a38:	68fb      	ldr	r3, [r7, #12]
 8018a3a:	681a      	ldr	r2, [r3, #0]
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	681a      	ldr	r2, [r3, #0]
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a48:	3b01      	subs	r3, #1
 8018a4a:	68f9      	ldr	r1, [r7, #12]
 8018a4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018a4e:	fb01 f303 	mul.w	r3, r1, r3
 8018a52:	441a      	add	r2, r3
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	22ff      	movs	r2, #255	; 0xff
 8018a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	22ff      	movs	r2, #255	; 0xff
 8018a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8018a68:	683b      	ldr	r3, [r7, #0]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d114      	bne.n	8018a98 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	691b      	ldr	r3, [r3, #16]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d01a      	beq.n	8018aac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	3310      	adds	r3, #16
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	f001 fb76 	bl	801a16c <xTaskRemoveFromEventList>
 8018a80:	4603      	mov	r3, r0
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d012      	beq.n	8018aac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8018a86:	4b0d      	ldr	r3, [pc, #52]	; (8018abc <xQueueGenericReset+0xd0>)
 8018a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a8c:	601a      	str	r2, [r3, #0]
 8018a8e:	f3bf 8f4f 	dsb	sy
 8018a92:	f3bf 8f6f 	isb	sy
 8018a96:	e009      	b.n	8018aac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	3310      	adds	r3, #16
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	f7ff fef1 	bl	8018884 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018aa2:	68fb      	ldr	r3, [r7, #12]
 8018aa4:	3324      	adds	r3, #36	; 0x24
 8018aa6:	4618      	mov	r0, r3
 8018aa8:	f7ff feec 	bl	8018884 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8018aac:	f002 f8a6 	bl	801abfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8018ab0:	2301      	movs	r3, #1
}
 8018ab2:	4618      	mov	r0, r3
 8018ab4:	3710      	adds	r7, #16
 8018ab6:	46bd      	mov	sp, r7
 8018ab8:	bd80      	pop	{r7, pc}
 8018aba:	bf00      	nop
 8018abc:	e000ed04 	.word	0xe000ed04

08018ac0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	b08e      	sub	sp, #56	; 0x38
 8018ac4:	af02      	add	r7, sp, #8
 8018ac6:	60f8      	str	r0, [r7, #12]
 8018ac8:	60b9      	str	r1, [r7, #8]
 8018aca:	607a      	str	r2, [r7, #4]
 8018acc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018ace:	68fb      	ldr	r3, [r7, #12]
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d10b      	bne.n	8018aec <xQueueGenericCreateStatic+0x2c>
 8018ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ad8:	b672      	cpsid	i
 8018ada:	f383 8811 	msr	BASEPRI, r3
 8018ade:	f3bf 8f6f 	isb	sy
 8018ae2:	f3bf 8f4f 	dsb	sy
 8018ae6:	b662      	cpsie	i
 8018ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8018aea:	e7fe      	b.n	8018aea <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8018aec:	683b      	ldr	r3, [r7, #0]
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d10b      	bne.n	8018b0a <xQueueGenericCreateStatic+0x4a>
 8018af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018af6:	b672      	cpsid	i
 8018af8:	f383 8811 	msr	BASEPRI, r3
 8018afc:	f3bf 8f6f 	isb	sy
 8018b00:	f3bf 8f4f 	dsb	sy
 8018b04:	b662      	cpsie	i
 8018b06:	627b      	str	r3, [r7, #36]	; 0x24
 8018b08:	e7fe      	b.n	8018b08 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d002      	beq.n	8018b16 <xQueueGenericCreateStatic+0x56>
 8018b10:	68bb      	ldr	r3, [r7, #8]
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d001      	beq.n	8018b1a <xQueueGenericCreateStatic+0x5a>
 8018b16:	2301      	movs	r3, #1
 8018b18:	e000      	b.n	8018b1c <xQueueGenericCreateStatic+0x5c>
 8018b1a:	2300      	movs	r3, #0
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d10b      	bne.n	8018b38 <xQueueGenericCreateStatic+0x78>
 8018b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b24:	b672      	cpsid	i
 8018b26:	f383 8811 	msr	BASEPRI, r3
 8018b2a:	f3bf 8f6f 	isb	sy
 8018b2e:	f3bf 8f4f 	dsb	sy
 8018b32:	b662      	cpsie	i
 8018b34:	623b      	str	r3, [r7, #32]
 8018b36:	e7fe      	b.n	8018b36 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d102      	bne.n	8018b44 <xQueueGenericCreateStatic+0x84>
 8018b3e:	68bb      	ldr	r3, [r7, #8]
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d101      	bne.n	8018b48 <xQueueGenericCreateStatic+0x88>
 8018b44:	2301      	movs	r3, #1
 8018b46:	e000      	b.n	8018b4a <xQueueGenericCreateStatic+0x8a>
 8018b48:	2300      	movs	r3, #0
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d10b      	bne.n	8018b66 <xQueueGenericCreateStatic+0xa6>
 8018b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b52:	b672      	cpsid	i
 8018b54:	f383 8811 	msr	BASEPRI, r3
 8018b58:	f3bf 8f6f 	isb	sy
 8018b5c:	f3bf 8f4f 	dsb	sy
 8018b60:	b662      	cpsie	i
 8018b62:	61fb      	str	r3, [r7, #28]
 8018b64:	e7fe      	b.n	8018b64 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8018b66:	2348      	movs	r3, #72	; 0x48
 8018b68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8018b6a:	697b      	ldr	r3, [r7, #20]
 8018b6c:	2b48      	cmp	r3, #72	; 0x48
 8018b6e:	d00b      	beq.n	8018b88 <xQueueGenericCreateStatic+0xc8>
 8018b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b74:	b672      	cpsid	i
 8018b76:	f383 8811 	msr	BASEPRI, r3
 8018b7a:	f3bf 8f6f 	isb	sy
 8018b7e:	f3bf 8f4f 	dsb	sy
 8018b82:	b662      	cpsie	i
 8018b84:	61bb      	str	r3, [r7, #24]
 8018b86:	e7fe      	b.n	8018b86 <xQueueGenericCreateStatic+0xc6>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018b88:	683b      	ldr	r3, [r7, #0]
 8018b8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8018b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d00d      	beq.n	8018bae <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b94:	2201      	movs	r2, #1
 8018b96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018b9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8018b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ba0:	9300      	str	r3, [sp, #0]
 8018ba2:	4613      	mov	r3, r2
 8018ba4:	687a      	ldr	r2, [r7, #4]
 8018ba6:	68b9      	ldr	r1, [r7, #8]
 8018ba8:	68f8      	ldr	r0, [r7, #12]
 8018baa:	f000 f844 	bl	8018c36 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8018bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	3730      	adds	r7, #48	; 0x30
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	bd80      	pop	{r7, pc}

08018bb8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b08a      	sub	sp, #40	; 0x28
 8018bbc:	af02      	add	r7, sp, #8
 8018bbe:	60f8      	str	r0, [r7, #12]
 8018bc0:	60b9      	str	r1, [r7, #8]
 8018bc2:	4613      	mov	r3, r2
 8018bc4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d10b      	bne.n	8018be4 <xQueueGenericCreate+0x2c>
 8018bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bd0:	b672      	cpsid	i
 8018bd2:	f383 8811 	msr	BASEPRI, r3
 8018bd6:	f3bf 8f6f 	isb	sy
 8018bda:	f3bf 8f4f 	dsb	sy
 8018bde:	b662      	cpsie	i
 8018be0:	613b      	str	r3, [r7, #16]
 8018be2:	e7fe      	b.n	8018be2 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8018be4:	68bb      	ldr	r3, [r7, #8]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d102      	bne.n	8018bf0 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8018bea:	2300      	movs	r3, #0
 8018bec:	61fb      	str	r3, [r7, #28]
 8018bee:	e004      	b.n	8018bfa <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018bf0:	68fb      	ldr	r3, [r7, #12]
 8018bf2:	68ba      	ldr	r2, [r7, #8]
 8018bf4:	fb02 f303 	mul.w	r3, r2, r3
 8018bf8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8018bfa:	69fb      	ldr	r3, [r7, #28]
 8018bfc:	3348      	adds	r3, #72	; 0x48
 8018bfe:	4618      	mov	r0, r3
 8018c00:	f002 f8ec 	bl	801addc <pvPortMalloc>
 8018c04:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8018c06:	69bb      	ldr	r3, [r7, #24]
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d00f      	beq.n	8018c2c <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8018c0c:	69bb      	ldr	r3, [r7, #24]
 8018c0e:	3348      	adds	r3, #72	; 0x48
 8018c10:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8018c12:	69bb      	ldr	r3, [r7, #24]
 8018c14:	2200      	movs	r2, #0
 8018c16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018c1a:	79fa      	ldrb	r2, [r7, #7]
 8018c1c:	69bb      	ldr	r3, [r7, #24]
 8018c1e:	9300      	str	r3, [sp, #0]
 8018c20:	4613      	mov	r3, r2
 8018c22:	697a      	ldr	r2, [r7, #20]
 8018c24:	68b9      	ldr	r1, [r7, #8]
 8018c26:	68f8      	ldr	r0, [r7, #12]
 8018c28:	f000 f805 	bl	8018c36 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8018c2c:	69bb      	ldr	r3, [r7, #24]
	}
 8018c2e:	4618      	mov	r0, r3
 8018c30:	3720      	adds	r7, #32
 8018c32:	46bd      	mov	sp, r7
 8018c34:	bd80      	pop	{r7, pc}

08018c36 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018c36:	b580      	push	{r7, lr}
 8018c38:	b084      	sub	sp, #16
 8018c3a:	af00      	add	r7, sp, #0
 8018c3c:	60f8      	str	r0, [r7, #12]
 8018c3e:	60b9      	str	r1, [r7, #8]
 8018c40:	607a      	str	r2, [r7, #4]
 8018c42:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8018c44:	68bb      	ldr	r3, [r7, #8]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d103      	bne.n	8018c52 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018c4a:	69bb      	ldr	r3, [r7, #24]
 8018c4c:	69ba      	ldr	r2, [r7, #24]
 8018c4e:	601a      	str	r2, [r3, #0]
 8018c50:	e002      	b.n	8018c58 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018c52:	69bb      	ldr	r3, [r7, #24]
 8018c54:	687a      	ldr	r2, [r7, #4]
 8018c56:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8018c58:	69bb      	ldr	r3, [r7, #24]
 8018c5a:	68fa      	ldr	r2, [r7, #12]
 8018c5c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018c5e:	69bb      	ldr	r3, [r7, #24]
 8018c60:	68ba      	ldr	r2, [r7, #8]
 8018c62:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018c64:	2101      	movs	r1, #1
 8018c66:	69b8      	ldr	r0, [r7, #24]
 8018c68:	f7ff fec0 	bl	80189ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8018c6c:	bf00      	nop
 8018c6e:	3710      	adds	r7, #16
 8018c70:	46bd      	mov	sp, r7
 8018c72:	bd80      	pop	{r7, pc}

08018c74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b08e      	sub	sp, #56	; 0x38
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	60f8      	str	r0, [r7, #12]
 8018c7c:	60b9      	str	r1, [r7, #8]
 8018c7e:	607a      	str	r2, [r7, #4]
 8018c80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8018c82:	2300      	movs	r3, #0
 8018c84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8018c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d10b      	bne.n	8018ca8 <xQueueGenericSend+0x34>
 8018c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c94:	b672      	cpsid	i
 8018c96:	f383 8811 	msr	BASEPRI, r3
 8018c9a:	f3bf 8f6f 	isb	sy
 8018c9e:	f3bf 8f4f 	dsb	sy
 8018ca2:	b662      	cpsie	i
 8018ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8018ca6:	e7fe      	b.n	8018ca6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018ca8:	68bb      	ldr	r3, [r7, #8]
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d103      	bne.n	8018cb6 <xQueueGenericSend+0x42>
 8018cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d101      	bne.n	8018cba <xQueueGenericSend+0x46>
 8018cb6:	2301      	movs	r3, #1
 8018cb8:	e000      	b.n	8018cbc <xQueueGenericSend+0x48>
 8018cba:	2300      	movs	r3, #0
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d10b      	bne.n	8018cd8 <xQueueGenericSend+0x64>
 8018cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cc4:	b672      	cpsid	i
 8018cc6:	f383 8811 	msr	BASEPRI, r3
 8018cca:	f3bf 8f6f 	isb	sy
 8018cce:	f3bf 8f4f 	dsb	sy
 8018cd2:	b662      	cpsie	i
 8018cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8018cd6:	e7fe      	b.n	8018cd6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018cd8:	683b      	ldr	r3, [r7, #0]
 8018cda:	2b02      	cmp	r3, #2
 8018cdc:	d103      	bne.n	8018ce6 <xQueueGenericSend+0x72>
 8018cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ce2:	2b01      	cmp	r3, #1
 8018ce4:	d101      	bne.n	8018cea <xQueueGenericSend+0x76>
 8018ce6:	2301      	movs	r3, #1
 8018ce8:	e000      	b.n	8018cec <xQueueGenericSend+0x78>
 8018cea:	2300      	movs	r3, #0
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d10b      	bne.n	8018d08 <xQueueGenericSend+0x94>
 8018cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cf4:	b672      	cpsid	i
 8018cf6:	f383 8811 	msr	BASEPRI, r3
 8018cfa:	f3bf 8f6f 	isb	sy
 8018cfe:	f3bf 8f4f 	dsb	sy
 8018d02:	b662      	cpsie	i
 8018d04:	623b      	str	r3, [r7, #32]
 8018d06:	e7fe      	b.n	8018d06 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018d08:	f001 fbf6 	bl	801a4f8 <xTaskGetSchedulerState>
 8018d0c:	4603      	mov	r3, r0
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d102      	bne.n	8018d18 <xQueueGenericSend+0xa4>
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d101      	bne.n	8018d1c <xQueueGenericSend+0xa8>
 8018d18:	2301      	movs	r3, #1
 8018d1a:	e000      	b.n	8018d1e <xQueueGenericSend+0xaa>
 8018d1c:	2300      	movs	r3, #0
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d10b      	bne.n	8018d3a <xQueueGenericSend+0xc6>
 8018d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d26:	b672      	cpsid	i
 8018d28:	f383 8811 	msr	BASEPRI, r3
 8018d2c:	f3bf 8f6f 	isb	sy
 8018d30:	f3bf 8f4f 	dsb	sy
 8018d34:	b662      	cpsie	i
 8018d36:	61fb      	str	r3, [r7, #28]
 8018d38:	e7fe      	b.n	8018d38 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018d3a:	f001 ff2d 	bl	801ab98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d46:	429a      	cmp	r2, r3
 8018d48:	d302      	bcc.n	8018d50 <xQueueGenericSend+0xdc>
 8018d4a:	683b      	ldr	r3, [r7, #0]
 8018d4c:	2b02      	cmp	r3, #2
 8018d4e:	d129      	bne.n	8018da4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018d50:	683a      	ldr	r2, [r7, #0]
 8018d52:	68b9      	ldr	r1, [r7, #8]
 8018d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018d56:	f000 fc4a 	bl	80195ee <prvCopyDataToQueue>
 8018d5a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d010      	beq.n	8018d86 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d66:	3324      	adds	r3, #36	; 0x24
 8018d68:	4618      	mov	r0, r3
 8018d6a:	f001 f9ff 	bl	801a16c <xTaskRemoveFromEventList>
 8018d6e:	4603      	mov	r3, r0
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d013      	beq.n	8018d9c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018d74:	4b3f      	ldr	r3, [pc, #252]	; (8018e74 <xQueueGenericSend+0x200>)
 8018d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d7a:	601a      	str	r2, [r3, #0]
 8018d7c:	f3bf 8f4f 	dsb	sy
 8018d80:	f3bf 8f6f 	isb	sy
 8018d84:	e00a      	b.n	8018d9c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8018d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d007      	beq.n	8018d9c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8018d8c:	4b39      	ldr	r3, [pc, #228]	; (8018e74 <xQueueGenericSend+0x200>)
 8018d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d92:	601a      	str	r2, [r3, #0]
 8018d94:	f3bf 8f4f 	dsb	sy
 8018d98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8018d9c:	f001 ff2e 	bl	801abfc <vPortExitCritical>
				return pdPASS;
 8018da0:	2301      	movs	r3, #1
 8018da2:	e063      	b.n	8018e6c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d103      	bne.n	8018db2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018daa:	f001 ff27 	bl	801abfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8018dae:	2300      	movs	r3, #0
 8018db0:	e05c      	b.n	8018e6c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d106      	bne.n	8018dc6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018db8:	f107 0314 	add.w	r3, r7, #20
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	f001 fa39 	bl	801a234 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018dc2:	2301      	movs	r3, #1
 8018dc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018dc6:	f001 ff19 	bl	801abfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018dca:	f000 ff51 	bl	8019c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018dce:	f001 fee3 	bl	801ab98 <vPortEnterCritical>
 8018dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018dd8:	b25b      	sxtb	r3, r3
 8018dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018dde:	d103      	bne.n	8018de8 <xQueueGenericSend+0x174>
 8018de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018de2:	2200      	movs	r2, #0
 8018de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018dee:	b25b      	sxtb	r3, r3
 8018df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018df4:	d103      	bne.n	8018dfe <xQueueGenericSend+0x18a>
 8018df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018df8:	2200      	movs	r2, #0
 8018dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018dfe:	f001 fefd 	bl	801abfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018e02:	1d3a      	adds	r2, r7, #4
 8018e04:	f107 0314 	add.w	r3, r7, #20
 8018e08:	4611      	mov	r1, r2
 8018e0a:	4618      	mov	r0, r3
 8018e0c:	f001 fa28 	bl	801a260 <xTaskCheckForTimeOut>
 8018e10:	4603      	mov	r3, r0
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d124      	bne.n	8018e60 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018e16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018e18:	f000 fce1 	bl	80197de <prvIsQueueFull>
 8018e1c:	4603      	mov	r3, r0
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d018      	beq.n	8018e54 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8018e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e24:	3310      	adds	r3, #16
 8018e26:	687a      	ldr	r2, [r7, #4]
 8018e28:	4611      	mov	r1, r2
 8018e2a:	4618      	mov	r0, r3
 8018e2c:	f001 f978 	bl	801a120 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8018e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018e32:	f000 fc6c 	bl	801970e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8018e36:	f000 ff29 	bl	8019c8c <xTaskResumeAll>
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	f47f af7c 	bne.w	8018d3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8018e42:	4b0c      	ldr	r3, [pc, #48]	; (8018e74 <xQueueGenericSend+0x200>)
 8018e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018e48:	601a      	str	r2, [r3, #0]
 8018e4a:	f3bf 8f4f 	dsb	sy
 8018e4e:	f3bf 8f6f 	isb	sy
 8018e52:	e772      	b.n	8018d3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8018e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018e56:	f000 fc5a 	bl	801970e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018e5a:	f000 ff17 	bl	8019c8c <xTaskResumeAll>
 8018e5e:	e76c      	b.n	8018d3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8018e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018e62:	f000 fc54 	bl	801970e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018e66:	f000 ff11 	bl	8019c8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8018e6a:	2300      	movs	r3, #0
		}
	}
}
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	3738      	adds	r7, #56	; 0x38
 8018e70:	46bd      	mov	sp, r7
 8018e72:	bd80      	pop	{r7, pc}
 8018e74:	e000ed04 	.word	0xe000ed04

08018e78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8018e78:	b580      	push	{r7, lr}
 8018e7a:	b08e      	sub	sp, #56	; 0x38
 8018e7c:	af00      	add	r7, sp, #0
 8018e7e:	60f8      	str	r0, [r7, #12]
 8018e80:	60b9      	str	r1, [r7, #8]
 8018e82:	607a      	str	r2, [r7, #4]
 8018e84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8018e86:	68fb      	ldr	r3, [r7, #12]
 8018e88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8018e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d10b      	bne.n	8018ea8 <xQueueGenericSendFromISR+0x30>
 8018e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e94:	b672      	cpsid	i
 8018e96:	f383 8811 	msr	BASEPRI, r3
 8018e9a:	f3bf 8f6f 	isb	sy
 8018e9e:	f3bf 8f4f 	dsb	sy
 8018ea2:	b662      	cpsie	i
 8018ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8018ea6:	e7fe      	b.n	8018ea6 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018ea8:	68bb      	ldr	r3, [r7, #8]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d103      	bne.n	8018eb6 <xQueueGenericSendFromISR+0x3e>
 8018eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d101      	bne.n	8018eba <xQueueGenericSendFromISR+0x42>
 8018eb6:	2301      	movs	r3, #1
 8018eb8:	e000      	b.n	8018ebc <xQueueGenericSendFromISR+0x44>
 8018eba:	2300      	movs	r3, #0
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d10b      	bne.n	8018ed8 <xQueueGenericSendFromISR+0x60>
 8018ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ec4:	b672      	cpsid	i
 8018ec6:	f383 8811 	msr	BASEPRI, r3
 8018eca:	f3bf 8f6f 	isb	sy
 8018ece:	f3bf 8f4f 	dsb	sy
 8018ed2:	b662      	cpsie	i
 8018ed4:	623b      	str	r3, [r7, #32]
 8018ed6:	e7fe      	b.n	8018ed6 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018ed8:	683b      	ldr	r3, [r7, #0]
 8018eda:	2b02      	cmp	r3, #2
 8018edc:	d103      	bne.n	8018ee6 <xQueueGenericSendFromISR+0x6e>
 8018ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ee2:	2b01      	cmp	r3, #1
 8018ee4:	d101      	bne.n	8018eea <xQueueGenericSendFromISR+0x72>
 8018ee6:	2301      	movs	r3, #1
 8018ee8:	e000      	b.n	8018eec <xQueueGenericSendFromISR+0x74>
 8018eea:	2300      	movs	r3, #0
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d10b      	bne.n	8018f08 <xQueueGenericSendFromISR+0x90>
 8018ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ef4:	b672      	cpsid	i
 8018ef6:	f383 8811 	msr	BASEPRI, r3
 8018efa:	f3bf 8f6f 	isb	sy
 8018efe:	f3bf 8f4f 	dsb	sy
 8018f02:	b662      	cpsie	i
 8018f04:	61fb      	str	r3, [r7, #28]
 8018f06:	e7fe      	b.n	8018f06 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018f08:	f001 ff26 	bl	801ad58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018f0c:	f3ef 8211 	mrs	r2, BASEPRI
 8018f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f14:	b672      	cpsid	i
 8018f16:	f383 8811 	msr	BASEPRI, r3
 8018f1a:	f3bf 8f6f 	isb	sy
 8018f1e:	f3bf 8f4f 	dsb	sy
 8018f22:	b662      	cpsie	i
 8018f24:	61ba      	str	r2, [r7, #24]
 8018f26:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8018f28:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f34:	429a      	cmp	r2, r3
 8018f36:	d302      	bcc.n	8018f3e <xQueueGenericSendFromISR+0xc6>
 8018f38:	683b      	ldr	r3, [r7, #0]
 8018f3a:	2b02      	cmp	r3, #2
 8018f3c:	d12c      	bne.n	8018f98 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018f44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018f48:	683a      	ldr	r2, [r7, #0]
 8018f4a:	68b9      	ldr	r1, [r7, #8]
 8018f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018f4e:	f000 fb4e 	bl	80195ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8018f52:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8018f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f5a:	d112      	bne.n	8018f82 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d016      	beq.n	8018f92 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f66:	3324      	adds	r3, #36	; 0x24
 8018f68:	4618      	mov	r0, r3
 8018f6a:	f001 f8ff 	bl	801a16c <xTaskRemoveFromEventList>
 8018f6e:	4603      	mov	r3, r0
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d00e      	beq.n	8018f92 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d00b      	beq.n	8018f92 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	2201      	movs	r2, #1
 8018f7e:	601a      	str	r2, [r3, #0]
 8018f80:	e007      	b.n	8018f92 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018f82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018f86:	3301      	adds	r3, #1
 8018f88:	b2db      	uxtb	r3, r3
 8018f8a:	b25a      	sxtb	r2, r3
 8018f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8018f92:	2301      	movs	r3, #1
 8018f94:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8018f96:	e001      	b.n	8018f9c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018f98:	2300      	movs	r3, #0
 8018f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8018f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f9e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8018fa0:	693b      	ldr	r3, [r7, #16]
 8018fa2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018fa8:	4618      	mov	r0, r3
 8018faa:	3738      	adds	r7, #56	; 0x38
 8018fac:	46bd      	mov	sp, r7
 8018fae:	bd80      	pop	{r7, pc}

08018fb0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	b08e      	sub	sp, #56	; 0x38
 8018fb4:	af00      	add	r7, sp, #0
 8018fb6:	6078      	str	r0, [r7, #4]
 8018fb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8018fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d10b      	bne.n	8018fdc <xQueueGiveFromISR+0x2c>
	__asm volatile
 8018fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fc8:	b672      	cpsid	i
 8018fca:	f383 8811 	msr	BASEPRI, r3
 8018fce:	f3bf 8f6f 	isb	sy
 8018fd2:	f3bf 8f4f 	dsb	sy
 8018fd6:	b662      	cpsie	i
 8018fd8:	623b      	str	r3, [r7, #32]
 8018fda:	e7fe      	b.n	8018fda <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d00b      	beq.n	8018ffc <xQueueGiveFromISR+0x4c>
 8018fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fe8:	b672      	cpsid	i
 8018fea:	f383 8811 	msr	BASEPRI, r3
 8018fee:	f3bf 8f6f 	isb	sy
 8018ff2:	f3bf 8f4f 	dsb	sy
 8018ff6:	b662      	cpsie	i
 8018ff8:	61fb      	str	r3, [r7, #28]
 8018ffa:	e7fe      	b.n	8018ffa <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8018ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	2b00      	cmp	r3, #0
 8019002:	d103      	bne.n	801900c <xQueueGiveFromISR+0x5c>
 8019004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019006:	685b      	ldr	r3, [r3, #4]
 8019008:	2b00      	cmp	r3, #0
 801900a:	d101      	bne.n	8019010 <xQueueGiveFromISR+0x60>
 801900c:	2301      	movs	r3, #1
 801900e:	e000      	b.n	8019012 <xQueueGiveFromISR+0x62>
 8019010:	2300      	movs	r3, #0
 8019012:	2b00      	cmp	r3, #0
 8019014:	d10b      	bne.n	801902e <xQueueGiveFromISR+0x7e>
 8019016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801901a:	b672      	cpsid	i
 801901c:	f383 8811 	msr	BASEPRI, r3
 8019020:	f3bf 8f6f 	isb	sy
 8019024:	f3bf 8f4f 	dsb	sy
 8019028:	b662      	cpsie	i
 801902a:	61bb      	str	r3, [r7, #24]
 801902c:	e7fe      	b.n	801902c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801902e:	f001 fe93 	bl	801ad58 <vPortValidateInterruptPriority>
	__asm volatile
 8019032:	f3ef 8211 	mrs	r2, BASEPRI
 8019036:	f04f 0350 	mov.w	r3, #80	; 0x50
 801903a:	b672      	cpsid	i
 801903c:	f383 8811 	msr	BASEPRI, r3
 8019040:	f3bf 8f6f 	isb	sy
 8019044:	f3bf 8f4f 	dsb	sy
 8019048:	b662      	cpsie	i
 801904a:	617a      	str	r2, [r7, #20]
 801904c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801904e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019050:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019056:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8019058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801905a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801905c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801905e:	429a      	cmp	r2, r3
 8019060:	d22b      	bcs.n	80190ba <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801906e:	1c5a      	adds	r2, r3, #1
 8019070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019072:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019074:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019078:	f1b3 3fff 	cmp.w	r3, #4294967295
 801907c:	d112      	bne.n	80190a4 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019082:	2b00      	cmp	r3, #0
 8019084:	d016      	beq.n	80190b4 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019088:	3324      	adds	r3, #36	; 0x24
 801908a:	4618      	mov	r0, r3
 801908c:	f001 f86e 	bl	801a16c <xTaskRemoveFromEventList>
 8019090:	4603      	mov	r3, r0
 8019092:	2b00      	cmp	r3, #0
 8019094:	d00e      	beq.n	80190b4 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019096:	683b      	ldr	r3, [r7, #0]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d00b      	beq.n	80190b4 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801909c:	683b      	ldr	r3, [r7, #0]
 801909e:	2201      	movs	r2, #1
 80190a0:	601a      	str	r2, [r3, #0]
 80190a2:	e007      	b.n	80190b4 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80190a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80190a8:	3301      	adds	r3, #1
 80190aa:	b2db      	uxtb	r3, r3
 80190ac:	b25a      	sxtb	r2, r3
 80190ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80190b4:	2301      	movs	r3, #1
 80190b6:	637b      	str	r3, [r7, #52]	; 0x34
 80190b8:	e001      	b.n	80190be <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80190ba:	2300      	movs	r3, #0
 80190bc:	637b      	str	r3, [r7, #52]	; 0x34
 80190be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190c0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80190c2:	68fb      	ldr	r3, [r7, #12]
 80190c4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80190c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80190ca:	4618      	mov	r0, r3
 80190cc:	3738      	adds	r7, #56	; 0x38
 80190ce:	46bd      	mov	sp, r7
 80190d0:	bd80      	pop	{r7, pc}
	...

080190d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b08c      	sub	sp, #48	; 0x30
 80190d8:	af00      	add	r7, sp, #0
 80190da:	60f8      	str	r0, [r7, #12]
 80190dc:	60b9      	str	r1, [r7, #8]
 80190de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80190e0:	2300      	movs	r3, #0
 80190e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80190e4:	68fb      	ldr	r3, [r7, #12]
 80190e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80190e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d10b      	bne.n	8019106 <xQueueReceive+0x32>
	__asm volatile
 80190ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190f2:	b672      	cpsid	i
 80190f4:	f383 8811 	msr	BASEPRI, r3
 80190f8:	f3bf 8f6f 	isb	sy
 80190fc:	f3bf 8f4f 	dsb	sy
 8019100:	b662      	cpsie	i
 8019102:	623b      	str	r3, [r7, #32]
 8019104:	e7fe      	b.n	8019104 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019106:	68bb      	ldr	r3, [r7, #8]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d103      	bne.n	8019114 <xQueueReceive+0x40>
 801910c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801910e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019110:	2b00      	cmp	r3, #0
 8019112:	d101      	bne.n	8019118 <xQueueReceive+0x44>
 8019114:	2301      	movs	r3, #1
 8019116:	e000      	b.n	801911a <xQueueReceive+0x46>
 8019118:	2300      	movs	r3, #0
 801911a:	2b00      	cmp	r3, #0
 801911c:	d10b      	bne.n	8019136 <xQueueReceive+0x62>
 801911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019122:	b672      	cpsid	i
 8019124:	f383 8811 	msr	BASEPRI, r3
 8019128:	f3bf 8f6f 	isb	sy
 801912c:	f3bf 8f4f 	dsb	sy
 8019130:	b662      	cpsie	i
 8019132:	61fb      	str	r3, [r7, #28]
 8019134:	e7fe      	b.n	8019134 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019136:	f001 f9df 	bl	801a4f8 <xTaskGetSchedulerState>
 801913a:	4603      	mov	r3, r0
 801913c:	2b00      	cmp	r3, #0
 801913e:	d102      	bne.n	8019146 <xQueueReceive+0x72>
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	2b00      	cmp	r3, #0
 8019144:	d101      	bne.n	801914a <xQueueReceive+0x76>
 8019146:	2301      	movs	r3, #1
 8019148:	e000      	b.n	801914c <xQueueReceive+0x78>
 801914a:	2300      	movs	r3, #0
 801914c:	2b00      	cmp	r3, #0
 801914e:	d10b      	bne.n	8019168 <xQueueReceive+0x94>
 8019150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019154:	b672      	cpsid	i
 8019156:	f383 8811 	msr	BASEPRI, r3
 801915a:	f3bf 8f6f 	isb	sy
 801915e:	f3bf 8f4f 	dsb	sy
 8019162:	b662      	cpsie	i
 8019164:	61bb      	str	r3, [r7, #24]
 8019166:	e7fe      	b.n	8019166 <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8019168:	f001 fd16 	bl	801ab98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801916c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801916e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019170:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019174:	2b00      	cmp	r3, #0
 8019176:	d01f      	beq.n	80191b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019178:	68b9      	ldr	r1, [r7, #8]
 801917a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801917c:	f000 faa1 	bl	80196c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019182:	1e5a      	subs	r2, r3, #1
 8019184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019186:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801918a:	691b      	ldr	r3, [r3, #16]
 801918c:	2b00      	cmp	r3, #0
 801918e:	d00f      	beq.n	80191b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019192:	3310      	adds	r3, #16
 8019194:	4618      	mov	r0, r3
 8019196:	f000 ffe9 	bl	801a16c <xTaskRemoveFromEventList>
 801919a:	4603      	mov	r3, r0
 801919c:	2b00      	cmp	r3, #0
 801919e:	d007      	beq.n	80191b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80191a0:	4b3c      	ldr	r3, [pc, #240]	; (8019294 <xQueueReceive+0x1c0>)
 80191a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80191a6:	601a      	str	r2, [r3, #0]
 80191a8:	f3bf 8f4f 	dsb	sy
 80191ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80191b0:	f001 fd24 	bl	801abfc <vPortExitCritical>
				return pdPASS;
 80191b4:	2301      	movs	r3, #1
 80191b6:	e069      	b.n	801928c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d103      	bne.n	80191c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80191be:	f001 fd1d 	bl	801abfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80191c2:	2300      	movs	r3, #0
 80191c4:	e062      	b.n	801928c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80191c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d106      	bne.n	80191da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80191cc:	f107 0310 	add.w	r3, r7, #16
 80191d0:	4618      	mov	r0, r3
 80191d2:	f001 f82f 	bl	801a234 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80191d6:	2301      	movs	r3, #1
 80191d8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80191da:	f001 fd0f 	bl	801abfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80191de:	f000 fd47 	bl	8019c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80191e2:	f001 fcd9 	bl	801ab98 <vPortEnterCritical>
 80191e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80191ec:	b25b      	sxtb	r3, r3
 80191ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191f2:	d103      	bne.n	80191fc <xQueueReceive+0x128>
 80191f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191f6:	2200      	movs	r2, #0
 80191f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80191fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019202:	b25b      	sxtb	r3, r3
 8019204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019208:	d103      	bne.n	8019212 <xQueueReceive+0x13e>
 801920a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801920c:	2200      	movs	r2, #0
 801920e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019212:	f001 fcf3 	bl	801abfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019216:	1d3a      	adds	r2, r7, #4
 8019218:	f107 0310 	add.w	r3, r7, #16
 801921c:	4611      	mov	r1, r2
 801921e:	4618      	mov	r0, r3
 8019220:	f001 f81e 	bl	801a260 <xTaskCheckForTimeOut>
 8019224:	4603      	mov	r3, r0
 8019226:	2b00      	cmp	r3, #0
 8019228:	d123      	bne.n	8019272 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801922a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801922c:	f000 fac1 	bl	80197b2 <prvIsQueueEmpty>
 8019230:	4603      	mov	r3, r0
 8019232:	2b00      	cmp	r3, #0
 8019234:	d017      	beq.n	8019266 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019238:	3324      	adds	r3, #36	; 0x24
 801923a:	687a      	ldr	r2, [r7, #4]
 801923c:	4611      	mov	r1, r2
 801923e:	4618      	mov	r0, r3
 8019240:	f000 ff6e 	bl	801a120 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019246:	f000 fa62 	bl	801970e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801924a:	f000 fd1f 	bl	8019c8c <xTaskResumeAll>
 801924e:	4603      	mov	r3, r0
 8019250:	2b00      	cmp	r3, #0
 8019252:	d189      	bne.n	8019168 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8019254:	4b0f      	ldr	r3, [pc, #60]	; (8019294 <xQueueReceive+0x1c0>)
 8019256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801925a:	601a      	str	r2, [r3, #0]
 801925c:	f3bf 8f4f 	dsb	sy
 8019260:	f3bf 8f6f 	isb	sy
 8019264:	e780      	b.n	8019168 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8019266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019268:	f000 fa51 	bl	801970e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801926c:	f000 fd0e 	bl	8019c8c <xTaskResumeAll>
 8019270:	e77a      	b.n	8019168 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8019272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019274:	f000 fa4b 	bl	801970e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019278:	f000 fd08 	bl	8019c8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801927c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801927e:	f000 fa98 	bl	80197b2 <prvIsQueueEmpty>
 8019282:	4603      	mov	r3, r0
 8019284:	2b00      	cmp	r3, #0
 8019286:	f43f af6f 	beq.w	8019168 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801928a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801928c:	4618      	mov	r0, r3
 801928e:	3730      	adds	r7, #48	; 0x30
 8019290:	46bd      	mov	sp, r7
 8019292:	bd80      	pop	{r7, pc}
 8019294:	e000ed04 	.word	0xe000ed04

08019298 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8019298:	b580      	push	{r7, lr}
 801929a:	b08e      	sub	sp, #56	; 0x38
 801929c:	af00      	add	r7, sp, #0
 801929e:	6078      	str	r0, [r7, #4]
 80192a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80192a2:	2300      	movs	r3, #0
 80192a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80192aa:	2300      	movs	r3, #0
 80192ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80192ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d10b      	bne.n	80192cc <xQueueSemaphoreTake+0x34>
 80192b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192b8:	b672      	cpsid	i
 80192ba:	f383 8811 	msr	BASEPRI, r3
 80192be:	f3bf 8f6f 	isb	sy
 80192c2:	f3bf 8f4f 	dsb	sy
 80192c6:	b662      	cpsie	i
 80192c8:	623b      	str	r3, [r7, #32]
 80192ca:	e7fe      	b.n	80192ca <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80192cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d00b      	beq.n	80192ec <xQueueSemaphoreTake+0x54>
 80192d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192d8:	b672      	cpsid	i
 80192da:	f383 8811 	msr	BASEPRI, r3
 80192de:	f3bf 8f6f 	isb	sy
 80192e2:	f3bf 8f4f 	dsb	sy
 80192e6:	b662      	cpsie	i
 80192e8:	61fb      	str	r3, [r7, #28]
 80192ea:	e7fe      	b.n	80192ea <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80192ec:	f001 f904 	bl	801a4f8 <xTaskGetSchedulerState>
 80192f0:	4603      	mov	r3, r0
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d102      	bne.n	80192fc <xQueueSemaphoreTake+0x64>
 80192f6:	683b      	ldr	r3, [r7, #0]
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d101      	bne.n	8019300 <xQueueSemaphoreTake+0x68>
 80192fc:	2301      	movs	r3, #1
 80192fe:	e000      	b.n	8019302 <xQueueSemaphoreTake+0x6a>
 8019300:	2300      	movs	r3, #0
 8019302:	2b00      	cmp	r3, #0
 8019304:	d10b      	bne.n	801931e <xQueueSemaphoreTake+0x86>
 8019306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801930a:	b672      	cpsid	i
 801930c:	f383 8811 	msr	BASEPRI, r3
 8019310:	f3bf 8f6f 	isb	sy
 8019314:	f3bf 8f4f 	dsb	sy
 8019318:	b662      	cpsie	i
 801931a:	61bb      	str	r3, [r7, #24]
 801931c:	e7fe      	b.n	801931c <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801931e:	f001 fc3b 	bl	801ab98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019326:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8019328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801932a:	2b00      	cmp	r3, #0
 801932c:	d024      	beq.n	8019378 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801932e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019330:	1e5a      	subs	r2, r3, #1
 8019332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019334:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	2b00      	cmp	r3, #0
 801933c:	d104      	bne.n	8019348 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 801933e:	f001 faa9 	bl	801a894 <pvTaskIncrementMutexHeldCount>
 8019342:	4602      	mov	r2, r0
 8019344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019346:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801934a:	691b      	ldr	r3, [r3, #16]
 801934c:	2b00      	cmp	r3, #0
 801934e:	d00f      	beq.n	8019370 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019352:	3310      	adds	r3, #16
 8019354:	4618      	mov	r0, r3
 8019356:	f000 ff09 	bl	801a16c <xTaskRemoveFromEventList>
 801935a:	4603      	mov	r3, r0
 801935c:	2b00      	cmp	r3, #0
 801935e:	d007      	beq.n	8019370 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019360:	4b54      	ldr	r3, [pc, #336]	; (80194b4 <xQueueSemaphoreTake+0x21c>)
 8019362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019366:	601a      	str	r2, [r3, #0]
 8019368:	f3bf 8f4f 	dsb	sy
 801936c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019370:	f001 fc44 	bl	801abfc <vPortExitCritical>
				return pdPASS;
 8019374:	2301      	movs	r3, #1
 8019376:	e098      	b.n	80194aa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019378:	683b      	ldr	r3, [r7, #0]
 801937a:	2b00      	cmp	r3, #0
 801937c:	d112      	bne.n	80193a4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019380:	2b00      	cmp	r3, #0
 8019382:	d00b      	beq.n	801939c <xQueueSemaphoreTake+0x104>
 8019384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019388:	b672      	cpsid	i
 801938a:	f383 8811 	msr	BASEPRI, r3
 801938e:	f3bf 8f6f 	isb	sy
 8019392:	f3bf 8f4f 	dsb	sy
 8019396:	b662      	cpsie	i
 8019398:	617b      	str	r3, [r7, #20]
 801939a:	e7fe      	b.n	801939a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801939c:	f001 fc2e 	bl	801abfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80193a0:	2300      	movs	r3, #0
 80193a2:	e082      	b.n	80194aa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80193a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d106      	bne.n	80193b8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80193aa:	f107 030c 	add.w	r3, r7, #12
 80193ae:	4618      	mov	r0, r3
 80193b0:	f000 ff40 	bl	801a234 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80193b4:	2301      	movs	r3, #1
 80193b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80193b8:	f001 fc20 	bl	801abfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80193bc:	f000 fc58 	bl	8019c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80193c0:	f001 fbea 	bl	801ab98 <vPortEnterCritical>
 80193c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80193ca:	b25b      	sxtb	r3, r3
 80193cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193d0:	d103      	bne.n	80193da <xQueueSemaphoreTake+0x142>
 80193d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193d4:	2200      	movs	r2, #0
 80193d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80193da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80193e0:	b25b      	sxtb	r3, r3
 80193e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193e6:	d103      	bne.n	80193f0 <xQueueSemaphoreTake+0x158>
 80193e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193ea:	2200      	movs	r2, #0
 80193ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80193f0:	f001 fc04 	bl	801abfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80193f4:	463a      	mov	r2, r7
 80193f6:	f107 030c 	add.w	r3, r7, #12
 80193fa:	4611      	mov	r1, r2
 80193fc:	4618      	mov	r0, r3
 80193fe:	f000 ff2f 	bl	801a260 <xTaskCheckForTimeOut>
 8019402:	4603      	mov	r3, r0
 8019404:	2b00      	cmp	r3, #0
 8019406:	d132      	bne.n	801946e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801940a:	f000 f9d2 	bl	80197b2 <prvIsQueueEmpty>
 801940e:	4603      	mov	r3, r0
 8019410:	2b00      	cmp	r3, #0
 8019412:	d026      	beq.n	8019462 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	2b00      	cmp	r3, #0
 801941a:	d109      	bne.n	8019430 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801941c:	f001 fbbc 	bl	801ab98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8019420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019422:	685b      	ldr	r3, [r3, #4]
 8019424:	4618      	mov	r0, r3
 8019426:	f001 f885 	bl	801a534 <xTaskPriorityInherit>
 801942a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801942c:	f001 fbe6 	bl	801abfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019432:	3324      	adds	r3, #36	; 0x24
 8019434:	683a      	ldr	r2, [r7, #0]
 8019436:	4611      	mov	r1, r2
 8019438:	4618      	mov	r0, r3
 801943a:	f000 fe71 	bl	801a120 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801943e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019440:	f000 f965 	bl	801970e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019444:	f000 fc22 	bl	8019c8c <xTaskResumeAll>
 8019448:	4603      	mov	r3, r0
 801944a:	2b00      	cmp	r3, #0
 801944c:	f47f af67 	bne.w	801931e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8019450:	4b18      	ldr	r3, [pc, #96]	; (80194b4 <xQueueSemaphoreTake+0x21c>)
 8019452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019456:	601a      	str	r2, [r3, #0]
 8019458:	f3bf 8f4f 	dsb	sy
 801945c:	f3bf 8f6f 	isb	sy
 8019460:	e75d      	b.n	801931e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8019462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019464:	f000 f953 	bl	801970e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019468:	f000 fc10 	bl	8019c8c <xTaskResumeAll>
 801946c:	e757      	b.n	801931e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801946e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019470:	f000 f94d 	bl	801970e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019474:	f000 fc0a 	bl	8019c8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801947a:	f000 f99a 	bl	80197b2 <prvIsQueueEmpty>
 801947e:	4603      	mov	r3, r0
 8019480:	2b00      	cmp	r3, #0
 8019482:	f43f af4c 	beq.w	801931e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8019486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019488:	2b00      	cmp	r3, #0
 801948a:	d00d      	beq.n	80194a8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801948c:	f001 fb84 	bl	801ab98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8019490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019492:	f000 f894 	bl	80195be <prvGetDisinheritPriorityAfterTimeout>
 8019496:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8019498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801949a:	685b      	ldr	r3, [r3, #4]
 801949c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801949e:	4618      	mov	r0, r3
 80194a0:	f001 f956 	bl	801a750 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80194a4:	f001 fbaa 	bl	801abfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80194a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80194aa:	4618      	mov	r0, r3
 80194ac:	3738      	adds	r7, #56	; 0x38
 80194ae:	46bd      	mov	sp, r7
 80194b0:	bd80      	pop	{r7, pc}
 80194b2:	bf00      	nop
 80194b4:	e000ed04 	.word	0xe000ed04

080194b8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80194b8:	b580      	push	{r7, lr}
 80194ba:	b08e      	sub	sp, #56	; 0x38
 80194bc:	af00      	add	r7, sp, #0
 80194be:	60f8      	str	r0, [r7, #12]
 80194c0:	60b9      	str	r1, [r7, #8]
 80194c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80194c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d10b      	bne.n	80194e6 <xQueueReceiveFromISR+0x2e>
 80194ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194d2:	b672      	cpsid	i
 80194d4:	f383 8811 	msr	BASEPRI, r3
 80194d8:	f3bf 8f6f 	isb	sy
 80194dc:	f3bf 8f4f 	dsb	sy
 80194e0:	b662      	cpsie	i
 80194e2:	623b      	str	r3, [r7, #32]
 80194e4:	e7fe      	b.n	80194e4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80194e6:	68bb      	ldr	r3, [r7, #8]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d103      	bne.n	80194f4 <xQueueReceiveFromISR+0x3c>
 80194ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d101      	bne.n	80194f8 <xQueueReceiveFromISR+0x40>
 80194f4:	2301      	movs	r3, #1
 80194f6:	e000      	b.n	80194fa <xQueueReceiveFromISR+0x42>
 80194f8:	2300      	movs	r3, #0
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d10b      	bne.n	8019516 <xQueueReceiveFromISR+0x5e>
 80194fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019502:	b672      	cpsid	i
 8019504:	f383 8811 	msr	BASEPRI, r3
 8019508:	f3bf 8f6f 	isb	sy
 801950c:	f3bf 8f4f 	dsb	sy
 8019510:	b662      	cpsie	i
 8019512:	61fb      	str	r3, [r7, #28]
 8019514:	e7fe      	b.n	8019514 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019516:	f001 fc1f 	bl	801ad58 <vPortValidateInterruptPriority>
	__asm volatile
 801951a:	f3ef 8211 	mrs	r2, BASEPRI
 801951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019522:	b672      	cpsid	i
 8019524:	f383 8811 	msr	BASEPRI, r3
 8019528:	f3bf 8f6f 	isb	sy
 801952c:	f3bf 8f4f 	dsb	sy
 8019530:	b662      	cpsie	i
 8019532:	61ba      	str	r2, [r7, #24]
 8019534:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8019536:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019538:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801953a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801953c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801953e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019542:	2b00      	cmp	r3, #0
 8019544:	d02f      	beq.n	80195a6 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8019546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801954c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019550:	68b9      	ldr	r1, [r7, #8]
 8019552:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019554:	f000 f8b5 	bl	80196c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801955a:	1e5a      	subs	r2, r3, #1
 801955c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801955e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8019560:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019568:	d112      	bne.n	8019590 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801956a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801956c:	691b      	ldr	r3, [r3, #16]
 801956e:	2b00      	cmp	r3, #0
 8019570:	d016      	beq.n	80195a0 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019574:	3310      	adds	r3, #16
 8019576:	4618      	mov	r0, r3
 8019578:	f000 fdf8 	bl	801a16c <xTaskRemoveFromEventList>
 801957c:	4603      	mov	r3, r0
 801957e:	2b00      	cmp	r3, #0
 8019580:	d00e      	beq.n	80195a0 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	2b00      	cmp	r3, #0
 8019586:	d00b      	beq.n	80195a0 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	2201      	movs	r2, #1
 801958c:	601a      	str	r2, [r3, #0]
 801958e:	e007      	b.n	80195a0 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8019590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019594:	3301      	adds	r3, #1
 8019596:	b2db      	uxtb	r3, r3
 8019598:	b25a      	sxtb	r2, r3
 801959a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801959c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80195a0:	2301      	movs	r3, #1
 80195a2:	637b      	str	r3, [r7, #52]	; 0x34
 80195a4:	e001      	b.n	80195aa <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 80195a6:	2300      	movs	r3, #0
 80195a8:	637b      	str	r3, [r7, #52]	; 0x34
 80195aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80195ae:	693b      	ldr	r3, [r7, #16]
 80195b0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80195b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80195b6:	4618      	mov	r0, r3
 80195b8:	3738      	adds	r7, #56	; 0x38
 80195ba:	46bd      	mov	sp, r7
 80195bc:	bd80      	pop	{r7, pc}

080195be <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80195be:	b480      	push	{r7}
 80195c0:	b085      	sub	sp, #20
 80195c2:	af00      	add	r7, sp, #0
 80195c4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d006      	beq.n	80195dc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	f1c3 0307 	rsb	r3, r3, #7
 80195d8:	60fb      	str	r3, [r7, #12]
 80195da:	e001      	b.n	80195e0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80195dc:	2300      	movs	r3, #0
 80195de:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80195e0:	68fb      	ldr	r3, [r7, #12]
	}
 80195e2:	4618      	mov	r0, r3
 80195e4:	3714      	adds	r7, #20
 80195e6:	46bd      	mov	sp, r7
 80195e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ec:	4770      	bx	lr

080195ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80195ee:	b580      	push	{r7, lr}
 80195f0:	b086      	sub	sp, #24
 80195f2:	af00      	add	r7, sp, #0
 80195f4:	60f8      	str	r0, [r7, #12]
 80195f6:	60b9      	str	r1, [r7, #8]
 80195f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80195fa:	2300      	movs	r3, #0
 80195fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019602:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019608:	2b00      	cmp	r3, #0
 801960a:	d10d      	bne.n	8019628 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	2b00      	cmp	r3, #0
 8019612:	d14d      	bne.n	80196b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	685b      	ldr	r3, [r3, #4]
 8019618:	4618      	mov	r0, r3
 801961a:	f001 f811 	bl	801a640 <xTaskPriorityDisinherit>
 801961e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	2200      	movs	r2, #0
 8019624:	605a      	str	r2, [r3, #4]
 8019626:	e043      	b.n	80196b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	2b00      	cmp	r3, #0
 801962c:	d119      	bne.n	8019662 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	6898      	ldr	r0, [r3, #8]
 8019632:	68fb      	ldr	r3, [r7, #12]
 8019634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019636:	461a      	mov	r2, r3
 8019638:	68b9      	ldr	r1, [r7, #8]
 801963a:	f011 fdcd 	bl	802b1d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	689a      	ldr	r2, [r3, #8]
 8019642:	68fb      	ldr	r3, [r7, #12]
 8019644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019646:	441a      	add	r2, r3
 8019648:	68fb      	ldr	r3, [r7, #12]
 801964a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801964c:	68fb      	ldr	r3, [r7, #12]
 801964e:	689a      	ldr	r2, [r3, #8]
 8019650:	68fb      	ldr	r3, [r7, #12]
 8019652:	685b      	ldr	r3, [r3, #4]
 8019654:	429a      	cmp	r2, r3
 8019656:	d32b      	bcc.n	80196b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	681a      	ldr	r2, [r3, #0]
 801965c:	68fb      	ldr	r3, [r7, #12]
 801965e:	609a      	str	r2, [r3, #8]
 8019660:	e026      	b.n	80196b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	68d8      	ldr	r0, [r3, #12]
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801966a:	461a      	mov	r2, r3
 801966c:	68b9      	ldr	r1, [r7, #8]
 801966e:	f011 fdb3 	bl	802b1d8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8019672:	68fb      	ldr	r3, [r7, #12]
 8019674:	68da      	ldr	r2, [r3, #12]
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801967a:	425b      	negs	r3, r3
 801967c:	441a      	add	r2, r3
 801967e:	68fb      	ldr	r3, [r7, #12]
 8019680:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	68da      	ldr	r2, [r3, #12]
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	429a      	cmp	r2, r3
 801968c:	d207      	bcs.n	801969e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	685a      	ldr	r2, [r3, #4]
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019696:	425b      	negs	r3, r3
 8019698:	441a      	add	r2, r3
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	2b02      	cmp	r3, #2
 80196a2:	d105      	bne.n	80196b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80196a4:	693b      	ldr	r3, [r7, #16]
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d002      	beq.n	80196b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80196aa:	693b      	ldr	r3, [r7, #16]
 80196ac:	3b01      	subs	r3, #1
 80196ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80196b0:	693b      	ldr	r3, [r7, #16]
 80196b2:	1c5a      	adds	r2, r3, #1
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80196b8:	697b      	ldr	r3, [r7, #20]
}
 80196ba:	4618      	mov	r0, r3
 80196bc:	3718      	adds	r7, #24
 80196be:	46bd      	mov	sp, r7
 80196c0:	bd80      	pop	{r7, pc}

080196c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80196c2:	b580      	push	{r7, lr}
 80196c4:	b082      	sub	sp, #8
 80196c6:	af00      	add	r7, sp, #0
 80196c8:	6078      	str	r0, [r7, #4]
 80196ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d018      	beq.n	8019706 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	68da      	ldr	r2, [r3, #12]
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80196dc:	441a      	add	r2, r3
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	68da      	ldr	r2, [r3, #12]
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	685b      	ldr	r3, [r3, #4]
 80196ea:	429a      	cmp	r2, r3
 80196ec:	d303      	bcc.n	80196f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	681a      	ldr	r2, [r3, #0]
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	68d9      	ldr	r1, [r3, #12]
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80196fe:	461a      	mov	r2, r3
 8019700:	6838      	ldr	r0, [r7, #0]
 8019702:	f011 fd69 	bl	802b1d8 <memcpy>
	}
}
 8019706:	bf00      	nop
 8019708:	3708      	adds	r7, #8
 801970a:	46bd      	mov	sp, r7
 801970c:	bd80      	pop	{r7, pc}

0801970e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801970e:	b580      	push	{r7, lr}
 8019710:	b084      	sub	sp, #16
 8019712:	af00      	add	r7, sp, #0
 8019714:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8019716:	f001 fa3f 	bl	801ab98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019720:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019722:	e011      	b.n	8019748 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019728:	2b00      	cmp	r3, #0
 801972a:	d012      	beq.n	8019752 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	3324      	adds	r3, #36	; 0x24
 8019730:	4618      	mov	r0, r3
 8019732:	f000 fd1b 	bl	801a16c <xTaskRemoveFromEventList>
 8019736:	4603      	mov	r3, r0
 8019738:	2b00      	cmp	r3, #0
 801973a:	d001      	beq.n	8019740 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801973c:	f000 fdf4 	bl	801a328 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8019740:	7bfb      	ldrb	r3, [r7, #15]
 8019742:	3b01      	subs	r3, #1
 8019744:	b2db      	uxtb	r3, r3
 8019746:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801974c:	2b00      	cmp	r3, #0
 801974e:	dce9      	bgt.n	8019724 <prvUnlockQueue+0x16>
 8019750:	e000      	b.n	8019754 <prvUnlockQueue+0x46>
					break;
 8019752:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	22ff      	movs	r2, #255	; 0xff
 8019758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801975c:	f001 fa4e 	bl	801abfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8019760:	f001 fa1a 	bl	801ab98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801976a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801976c:	e011      	b.n	8019792 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	691b      	ldr	r3, [r3, #16]
 8019772:	2b00      	cmp	r3, #0
 8019774:	d012      	beq.n	801979c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	3310      	adds	r3, #16
 801977a:	4618      	mov	r0, r3
 801977c:	f000 fcf6 	bl	801a16c <xTaskRemoveFromEventList>
 8019780:	4603      	mov	r3, r0
 8019782:	2b00      	cmp	r3, #0
 8019784:	d001      	beq.n	801978a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8019786:	f000 fdcf 	bl	801a328 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801978a:	7bbb      	ldrb	r3, [r7, #14]
 801978c:	3b01      	subs	r3, #1
 801978e:	b2db      	uxtb	r3, r3
 8019790:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019792:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019796:	2b00      	cmp	r3, #0
 8019798:	dce9      	bgt.n	801976e <prvUnlockQueue+0x60>
 801979a:	e000      	b.n	801979e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801979c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	22ff      	movs	r2, #255	; 0xff
 80197a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80197a6:	f001 fa29 	bl	801abfc <vPortExitCritical>
}
 80197aa:	bf00      	nop
 80197ac:	3710      	adds	r7, #16
 80197ae:	46bd      	mov	sp, r7
 80197b0:	bd80      	pop	{r7, pc}

080197b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80197b2:	b580      	push	{r7, lr}
 80197b4:	b084      	sub	sp, #16
 80197b6:	af00      	add	r7, sp, #0
 80197b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80197ba:	f001 f9ed 	bl	801ab98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d102      	bne.n	80197cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80197c6:	2301      	movs	r3, #1
 80197c8:	60fb      	str	r3, [r7, #12]
 80197ca:	e001      	b.n	80197d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80197cc:	2300      	movs	r3, #0
 80197ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80197d0:	f001 fa14 	bl	801abfc <vPortExitCritical>

	return xReturn;
 80197d4:	68fb      	ldr	r3, [r7, #12]
}
 80197d6:	4618      	mov	r0, r3
 80197d8:	3710      	adds	r7, #16
 80197da:	46bd      	mov	sp, r7
 80197dc:	bd80      	pop	{r7, pc}

080197de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80197de:	b580      	push	{r7, lr}
 80197e0:	b084      	sub	sp, #16
 80197e2:	af00      	add	r7, sp, #0
 80197e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80197e6:	f001 f9d7 	bl	801ab98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80197f2:	429a      	cmp	r2, r3
 80197f4:	d102      	bne.n	80197fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80197f6:	2301      	movs	r3, #1
 80197f8:	60fb      	str	r3, [r7, #12]
 80197fa:	e001      	b.n	8019800 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80197fc:	2300      	movs	r3, #0
 80197fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019800:	f001 f9fc 	bl	801abfc <vPortExitCritical>

	return xReturn;
 8019804:	68fb      	ldr	r3, [r7, #12]
}
 8019806:	4618      	mov	r0, r3
 8019808:	3710      	adds	r7, #16
 801980a:	46bd      	mov	sp, r7
 801980c:	bd80      	pop	{r7, pc}

0801980e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801980e:	b580      	push	{r7, lr}
 8019810:	b08e      	sub	sp, #56	; 0x38
 8019812:	af04      	add	r7, sp, #16
 8019814:	60f8      	str	r0, [r7, #12]
 8019816:	60b9      	str	r1, [r7, #8]
 8019818:	607a      	str	r2, [r7, #4]
 801981a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801981c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801981e:	2b00      	cmp	r3, #0
 8019820:	d10b      	bne.n	801983a <xTaskCreateStatic+0x2c>
	__asm volatile
 8019822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019826:	b672      	cpsid	i
 8019828:	f383 8811 	msr	BASEPRI, r3
 801982c:	f3bf 8f6f 	isb	sy
 8019830:	f3bf 8f4f 	dsb	sy
 8019834:	b662      	cpsie	i
 8019836:	623b      	str	r3, [r7, #32]
 8019838:	e7fe      	b.n	8019838 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 801983a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801983c:	2b00      	cmp	r3, #0
 801983e:	d10b      	bne.n	8019858 <xTaskCreateStatic+0x4a>
 8019840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019844:	b672      	cpsid	i
 8019846:	f383 8811 	msr	BASEPRI, r3
 801984a:	f3bf 8f6f 	isb	sy
 801984e:	f3bf 8f4f 	dsb	sy
 8019852:	b662      	cpsie	i
 8019854:	61fb      	str	r3, [r7, #28]
 8019856:	e7fe      	b.n	8019856 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8019858:	2358      	movs	r3, #88	; 0x58
 801985a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801985c:	693b      	ldr	r3, [r7, #16]
 801985e:	2b58      	cmp	r3, #88	; 0x58
 8019860:	d00b      	beq.n	801987a <xTaskCreateStatic+0x6c>
 8019862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019866:	b672      	cpsid	i
 8019868:	f383 8811 	msr	BASEPRI, r3
 801986c:	f3bf 8f6f 	isb	sy
 8019870:	f3bf 8f4f 	dsb	sy
 8019874:	b662      	cpsie	i
 8019876:	61bb      	str	r3, [r7, #24]
 8019878:	e7fe      	b.n	8019878 <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801987a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801987c:	2b00      	cmp	r3, #0
 801987e:	d01e      	beq.n	80198be <xTaskCreateStatic+0xb0>
 8019880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019882:	2b00      	cmp	r3, #0
 8019884:	d01b      	beq.n	80198be <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019888:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801988c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801988e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8019890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019892:	2202      	movs	r2, #2
 8019894:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8019898:	2300      	movs	r3, #0
 801989a:	9303      	str	r3, [sp, #12]
 801989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801989e:	9302      	str	r3, [sp, #8]
 80198a0:	f107 0314 	add.w	r3, r7, #20
 80198a4:	9301      	str	r3, [sp, #4]
 80198a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198a8:	9300      	str	r3, [sp, #0]
 80198aa:	683b      	ldr	r3, [r7, #0]
 80198ac:	687a      	ldr	r2, [r7, #4]
 80198ae:	68b9      	ldr	r1, [r7, #8]
 80198b0:	68f8      	ldr	r0, [r7, #12]
 80198b2:	f000 f850 	bl	8019956 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80198b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80198b8:	f000 f8d8 	bl	8019a6c <prvAddNewTaskToReadyList>
 80198bc:	e001      	b.n	80198c2 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80198be:	2300      	movs	r3, #0
 80198c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80198c2:	697b      	ldr	r3, [r7, #20]
	}
 80198c4:	4618      	mov	r0, r3
 80198c6:	3728      	adds	r7, #40	; 0x28
 80198c8:	46bd      	mov	sp, r7
 80198ca:	bd80      	pop	{r7, pc}

080198cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80198cc:	b580      	push	{r7, lr}
 80198ce:	b08c      	sub	sp, #48	; 0x30
 80198d0:	af04      	add	r7, sp, #16
 80198d2:	60f8      	str	r0, [r7, #12]
 80198d4:	60b9      	str	r1, [r7, #8]
 80198d6:	603b      	str	r3, [r7, #0]
 80198d8:	4613      	mov	r3, r2
 80198da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80198dc:	88fb      	ldrh	r3, [r7, #6]
 80198de:	009b      	lsls	r3, r3, #2
 80198e0:	4618      	mov	r0, r3
 80198e2:	f001 fa7b 	bl	801addc <pvPortMalloc>
 80198e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80198e8:	697b      	ldr	r3, [r7, #20]
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d00e      	beq.n	801990c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80198ee:	2058      	movs	r0, #88	; 0x58
 80198f0:	f001 fa74 	bl	801addc <pvPortMalloc>
 80198f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80198f6:	69fb      	ldr	r3, [r7, #28]
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d003      	beq.n	8019904 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80198fc:	69fb      	ldr	r3, [r7, #28]
 80198fe:	697a      	ldr	r2, [r7, #20]
 8019900:	631a      	str	r2, [r3, #48]	; 0x30
 8019902:	e005      	b.n	8019910 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8019904:	6978      	ldr	r0, [r7, #20]
 8019906:	f001 fb35 	bl	801af74 <vPortFree>
 801990a:	e001      	b.n	8019910 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801990c:	2300      	movs	r3, #0
 801990e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8019910:	69fb      	ldr	r3, [r7, #28]
 8019912:	2b00      	cmp	r3, #0
 8019914:	d017      	beq.n	8019946 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8019916:	69fb      	ldr	r3, [r7, #28]
 8019918:	2200      	movs	r2, #0
 801991a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801991e:	88fa      	ldrh	r2, [r7, #6]
 8019920:	2300      	movs	r3, #0
 8019922:	9303      	str	r3, [sp, #12]
 8019924:	69fb      	ldr	r3, [r7, #28]
 8019926:	9302      	str	r3, [sp, #8]
 8019928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801992a:	9301      	str	r3, [sp, #4]
 801992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801992e:	9300      	str	r3, [sp, #0]
 8019930:	683b      	ldr	r3, [r7, #0]
 8019932:	68b9      	ldr	r1, [r7, #8]
 8019934:	68f8      	ldr	r0, [r7, #12]
 8019936:	f000 f80e 	bl	8019956 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801993a:	69f8      	ldr	r0, [r7, #28]
 801993c:	f000 f896 	bl	8019a6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019940:	2301      	movs	r3, #1
 8019942:	61bb      	str	r3, [r7, #24]
 8019944:	e002      	b.n	801994c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019946:	f04f 33ff 	mov.w	r3, #4294967295
 801994a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801994c:	69bb      	ldr	r3, [r7, #24]
	}
 801994e:	4618      	mov	r0, r3
 8019950:	3720      	adds	r7, #32
 8019952:	46bd      	mov	sp, r7
 8019954:	bd80      	pop	{r7, pc}

08019956 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019956:	b580      	push	{r7, lr}
 8019958:	b088      	sub	sp, #32
 801995a:	af00      	add	r7, sp, #0
 801995c:	60f8      	str	r0, [r7, #12]
 801995e:	60b9      	str	r1, [r7, #8]
 8019960:	607a      	str	r2, [r7, #4]
 8019962:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019966:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	009b      	lsls	r3, r3, #2
 801996c:	461a      	mov	r2, r3
 801996e:	21a5      	movs	r1, #165	; 0xa5
 8019970:	f011 fc3d 	bl	802b1ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8019974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019978:	6879      	ldr	r1, [r7, #4]
 801997a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801997e:	440b      	add	r3, r1
 8019980:	009b      	lsls	r3, r3, #2
 8019982:	4413      	add	r3, r2
 8019984:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8019986:	69bb      	ldr	r3, [r7, #24]
 8019988:	f023 0307 	bic.w	r3, r3, #7
 801998c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801998e:	69bb      	ldr	r3, [r7, #24]
 8019990:	f003 0307 	and.w	r3, r3, #7
 8019994:	2b00      	cmp	r3, #0
 8019996:	d00b      	beq.n	80199b0 <prvInitialiseNewTask+0x5a>
 8019998:	f04f 0350 	mov.w	r3, #80	; 0x50
 801999c:	b672      	cpsid	i
 801999e:	f383 8811 	msr	BASEPRI, r3
 80199a2:	f3bf 8f6f 	isb	sy
 80199a6:	f3bf 8f4f 	dsb	sy
 80199aa:	b662      	cpsie	i
 80199ac:	617b      	str	r3, [r7, #20]
 80199ae:	e7fe      	b.n	80199ae <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80199b0:	2300      	movs	r3, #0
 80199b2:	61fb      	str	r3, [r7, #28]
 80199b4:	e012      	b.n	80199dc <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80199b6:	68ba      	ldr	r2, [r7, #8]
 80199b8:	69fb      	ldr	r3, [r7, #28]
 80199ba:	4413      	add	r3, r2
 80199bc:	7819      	ldrb	r1, [r3, #0]
 80199be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80199c0:	69fb      	ldr	r3, [r7, #28]
 80199c2:	4413      	add	r3, r2
 80199c4:	3334      	adds	r3, #52	; 0x34
 80199c6:	460a      	mov	r2, r1
 80199c8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80199ca:	68ba      	ldr	r2, [r7, #8]
 80199cc:	69fb      	ldr	r3, [r7, #28]
 80199ce:	4413      	add	r3, r2
 80199d0:	781b      	ldrb	r3, [r3, #0]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d006      	beq.n	80199e4 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80199d6:	69fb      	ldr	r3, [r7, #28]
 80199d8:	3301      	adds	r3, #1
 80199da:	61fb      	str	r3, [r7, #28]
 80199dc:	69fb      	ldr	r3, [r7, #28]
 80199de:	2b0f      	cmp	r3, #15
 80199e0:	d9e9      	bls.n	80199b6 <prvInitialiseNewTask+0x60>
 80199e2:	e000      	b.n	80199e6 <prvInitialiseNewTask+0x90>
		{
			break;
 80199e4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80199e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199e8:	2200      	movs	r2, #0
 80199ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80199ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199f0:	2b06      	cmp	r3, #6
 80199f2:	d901      	bls.n	80199f8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80199f4:	2306      	movs	r3, #6
 80199f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80199f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80199fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80199fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a02:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8019a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a06:	2200      	movs	r2, #0
 8019a08:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a0c:	3304      	adds	r3, #4
 8019a0e:	4618      	mov	r0, r3
 8019a10:	f7fe ff58 	bl	80188c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a16:	3318      	adds	r3, #24
 8019a18:	4618      	mov	r0, r3
 8019a1a:	f7fe ff53 	bl	80188c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019a22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a26:	f1c3 0207 	rsb	r2, r3, #7
 8019a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019a32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8019a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a36:	2200      	movs	r2, #0
 8019a38:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8019a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a3c:	2200      	movs	r2, #0
 8019a3e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a42:	2200      	movs	r2, #0
 8019a44:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019a48:	683a      	ldr	r2, [r7, #0]
 8019a4a:	68f9      	ldr	r1, [r7, #12]
 8019a4c:	69b8      	ldr	r0, [r7, #24]
 8019a4e:	f000 ff9b 	bl	801a988 <pxPortInitialiseStack>
 8019a52:	4602      	mov	r2, r0
 8019a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a56:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8019a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d002      	beq.n	8019a64 <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8019a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019a62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019a64:	bf00      	nop
 8019a66:	3720      	adds	r7, #32
 8019a68:	46bd      	mov	sp, r7
 8019a6a:	bd80      	pop	{r7, pc}

08019a6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8019a6c:	b580      	push	{r7, lr}
 8019a6e:	b082      	sub	sp, #8
 8019a70:	af00      	add	r7, sp, #0
 8019a72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8019a74:	f001 f890 	bl	801ab98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8019a78:	4b2a      	ldr	r3, [pc, #168]	; (8019b24 <prvAddNewTaskToReadyList+0xb8>)
 8019a7a:	681b      	ldr	r3, [r3, #0]
 8019a7c:	3301      	adds	r3, #1
 8019a7e:	4a29      	ldr	r2, [pc, #164]	; (8019b24 <prvAddNewTaskToReadyList+0xb8>)
 8019a80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019a82:	4b29      	ldr	r3, [pc, #164]	; (8019b28 <prvAddNewTaskToReadyList+0xbc>)
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d109      	bne.n	8019a9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8019a8a:	4a27      	ldr	r2, [pc, #156]	; (8019b28 <prvAddNewTaskToReadyList+0xbc>)
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019a90:	4b24      	ldr	r3, [pc, #144]	; (8019b24 <prvAddNewTaskToReadyList+0xb8>)
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	2b01      	cmp	r3, #1
 8019a96:	d110      	bne.n	8019aba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8019a98:	f000 fc6c 	bl	801a374 <prvInitialiseTaskLists>
 8019a9c:	e00d      	b.n	8019aba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8019a9e:	4b23      	ldr	r3, [pc, #140]	; (8019b2c <prvAddNewTaskToReadyList+0xc0>)
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d109      	bne.n	8019aba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019aa6:	4b20      	ldr	r3, [pc, #128]	; (8019b28 <prvAddNewTaskToReadyList+0xbc>)
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ab0:	429a      	cmp	r2, r3
 8019ab2:	d802      	bhi.n	8019aba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8019ab4:	4a1c      	ldr	r2, [pc, #112]	; (8019b28 <prvAddNewTaskToReadyList+0xbc>)
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8019aba:	4b1d      	ldr	r3, [pc, #116]	; (8019b30 <prvAddNewTaskToReadyList+0xc4>)
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	3301      	adds	r3, #1
 8019ac0:	4a1b      	ldr	r2, [pc, #108]	; (8019b30 <prvAddNewTaskToReadyList+0xc4>)
 8019ac2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ac8:	2201      	movs	r2, #1
 8019aca:	409a      	lsls	r2, r3
 8019acc:	4b19      	ldr	r3, [pc, #100]	; (8019b34 <prvAddNewTaskToReadyList+0xc8>)
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	4313      	orrs	r3, r2
 8019ad2:	4a18      	ldr	r2, [pc, #96]	; (8019b34 <prvAddNewTaskToReadyList+0xc8>)
 8019ad4:	6013      	str	r3, [r2, #0]
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019ada:	4613      	mov	r3, r2
 8019adc:	009b      	lsls	r3, r3, #2
 8019ade:	4413      	add	r3, r2
 8019ae0:	009b      	lsls	r3, r3, #2
 8019ae2:	4a15      	ldr	r2, [pc, #84]	; (8019b38 <prvAddNewTaskToReadyList+0xcc>)
 8019ae4:	441a      	add	r2, r3
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	3304      	adds	r3, #4
 8019aea:	4619      	mov	r1, r3
 8019aec:	4610      	mov	r0, r2
 8019aee:	f7fe fef6 	bl	80188de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8019af2:	f001 f883 	bl	801abfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8019af6:	4b0d      	ldr	r3, [pc, #52]	; (8019b2c <prvAddNewTaskToReadyList+0xc0>)
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d00e      	beq.n	8019b1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019afe:	4b0a      	ldr	r3, [pc, #40]	; (8019b28 <prvAddNewTaskToReadyList+0xbc>)
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b08:	429a      	cmp	r2, r3
 8019b0a:	d207      	bcs.n	8019b1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8019b0c:	4b0b      	ldr	r3, [pc, #44]	; (8019b3c <prvAddNewTaskToReadyList+0xd0>)
 8019b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019b12:	601a      	str	r2, [r3, #0]
 8019b14:	f3bf 8f4f 	dsb	sy
 8019b18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019b1c:	bf00      	nop
 8019b1e:	3708      	adds	r7, #8
 8019b20:	46bd      	mov	sp, r7
 8019b22:	bd80      	pop	{r7, pc}
 8019b24:	20000cd8 	.word	0x20000cd8
 8019b28:	20000bd8 	.word	0x20000bd8
 8019b2c:	20000ce4 	.word	0x20000ce4
 8019b30:	20000cf4 	.word	0x20000cf4
 8019b34:	20000ce0 	.word	0x20000ce0
 8019b38:	20000bdc 	.word	0x20000bdc
 8019b3c:	e000ed04 	.word	0xe000ed04

08019b40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8019b40:	b580      	push	{r7, lr}
 8019b42:	b084      	sub	sp, #16
 8019b44:	af00      	add	r7, sp, #0
 8019b46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8019b48:	2300      	movs	r3, #0
 8019b4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d018      	beq.n	8019b84 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8019b52:	4b14      	ldr	r3, [pc, #80]	; (8019ba4 <vTaskDelay+0x64>)
 8019b54:	681b      	ldr	r3, [r3, #0]
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d00b      	beq.n	8019b72 <vTaskDelay+0x32>
 8019b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b5e:	b672      	cpsid	i
 8019b60:	f383 8811 	msr	BASEPRI, r3
 8019b64:	f3bf 8f6f 	isb	sy
 8019b68:	f3bf 8f4f 	dsb	sy
 8019b6c:	b662      	cpsie	i
 8019b6e:	60bb      	str	r3, [r7, #8]
 8019b70:	e7fe      	b.n	8019b70 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8019b72:	f000 f87d 	bl	8019c70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8019b76:	2100      	movs	r1, #0
 8019b78:	6878      	ldr	r0, [r7, #4]
 8019b7a:	f000 fe9f 	bl	801a8bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8019b7e:	f000 f885 	bl	8019c8c <xTaskResumeAll>
 8019b82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019b84:	68fb      	ldr	r3, [r7, #12]
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d107      	bne.n	8019b9a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8019b8a:	4b07      	ldr	r3, [pc, #28]	; (8019ba8 <vTaskDelay+0x68>)
 8019b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019b90:	601a      	str	r2, [r3, #0]
 8019b92:	f3bf 8f4f 	dsb	sy
 8019b96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019b9a:	bf00      	nop
 8019b9c:	3710      	adds	r7, #16
 8019b9e:	46bd      	mov	sp, r7
 8019ba0:	bd80      	pop	{r7, pc}
 8019ba2:	bf00      	nop
 8019ba4:	20000d00 	.word	0x20000d00
 8019ba8:	e000ed04 	.word	0xe000ed04

08019bac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8019bac:	b580      	push	{r7, lr}
 8019bae:	b08a      	sub	sp, #40	; 0x28
 8019bb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019bb2:	2300      	movs	r3, #0
 8019bb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8019bba:	463a      	mov	r2, r7
 8019bbc:	1d39      	adds	r1, r7, #4
 8019bbe:	f107 0308 	add.w	r3, r7, #8
 8019bc2:	4618      	mov	r0, r3
 8019bc4:	f7e6 fcf4 	bl	80005b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019bc8:	6839      	ldr	r1, [r7, #0]
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	68ba      	ldr	r2, [r7, #8]
 8019bce:	9202      	str	r2, [sp, #8]
 8019bd0:	9301      	str	r3, [sp, #4]
 8019bd2:	2300      	movs	r3, #0
 8019bd4:	9300      	str	r3, [sp, #0]
 8019bd6:	2300      	movs	r3, #0
 8019bd8:	460a      	mov	r2, r1
 8019bda:	491f      	ldr	r1, [pc, #124]	; (8019c58 <vTaskStartScheduler+0xac>)
 8019bdc:	481f      	ldr	r0, [pc, #124]	; (8019c5c <vTaskStartScheduler+0xb0>)
 8019bde:	f7ff fe16 	bl	801980e <xTaskCreateStatic>
 8019be2:	4602      	mov	r2, r0
 8019be4:	4b1e      	ldr	r3, [pc, #120]	; (8019c60 <vTaskStartScheduler+0xb4>)
 8019be6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8019be8:	4b1d      	ldr	r3, [pc, #116]	; (8019c60 <vTaskStartScheduler+0xb4>)
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d002      	beq.n	8019bf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8019bf0:	2301      	movs	r3, #1
 8019bf2:	617b      	str	r3, [r7, #20]
 8019bf4:	e001      	b.n	8019bfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8019bf6:	2300      	movs	r3, #0
 8019bf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8019bfa:	697b      	ldr	r3, [r7, #20]
 8019bfc:	2b01      	cmp	r3, #1
 8019bfe:	d117      	bne.n	8019c30 <vTaskStartScheduler+0x84>
 8019c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c04:	b672      	cpsid	i
 8019c06:	f383 8811 	msr	BASEPRI, r3
 8019c0a:	f3bf 8f6f 	isb	sy
 8019c0e:	f3bf 8f4f 	dsb	sy
 8019c12:	b662      	cpsie	i
 8019c14:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8019c16:	4b13      	ldr	r3, [pc, #76]	; (8019c64 <vTaskStartScheduler+0xb8>)
 8019c18:	f04f 32ff 	mov.w	r2, #4294967295
 8019c1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8019c1e:	4b12      	ldr	r3, [pc, #72]	; (8019c68 <vTaskStartScheduler+0xbc>)
 8019c20:	2201      	movs	r2, #1
 8019c22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8019c24:	4b11      	ldr	r3, [pc, #68]	; (8019c6c <vTaskStartScheduler+0xc0>)
 8019c26:	2200      	movs	r2, #0
 8019c28:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8019c2a:	f000 ff39 	bl	801aaa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8019c2e:	e00f      	b.n	8019c50 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8019c30:	697b      	ldr	r3, [r7, #20]
 8019c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c36:	d10b      	bne.n	8019c50 <vTaskStartScheduler+0xa4>
 8019c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c3c:	b672      	cpsid	i
 8019c3e:	f383 8811 	msr	BASEPRI, r3
 8019c42:	f3bf 8f6f 	isb	sy
 8019c46:	f3bf 8f4f 	dsb	sy
 8019c4a:	b662      	cpsie	i
 8019c4c:	60fb      	str	r3, [r7, #12]
 8019c4e:	e7fe      	b.n	8019c4e <vTaskStartScheduler+0xa2>
}
 8019c50:	bf00      	nop
 8019c52:	3718      	adds	r7, #24
 8019c54:	46bd      	mov	sp, r7
 8019c56:	bd80      	pop	{r7, pc}
 8019c58:	0802c70c 	.word	0x0802c70c
 8019c5c:	0801a341 	.word	0x0801a341
 8019c60:	20000cfc 	.word	0x20000cfc
 8019c64:	20000cf8 	.word	0x20000cf8
 8019c68:	20000ce4 	.word	0x20000ce4
 8019c6c:	20000cdc 	.word	0x20000cdc

08019c70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8019c70:	b480      	push	{r7}
 8019c72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8019c74:	4b04      	ldr	r3, [pc, #16]	; (8019c88 <vTaskSuspendAll+0x18>)
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	3301      	adds	r3, #1
 8019c7a:	4a03      	ldr	r2, [pc, #12]	; (8019c88 <vTaskSuspendAll+0x18>)
 8019c7c:	6013      	str	r3, [r2, #0]
}
 8019c7e:	bf00      	nop
 8019c80:	46bd      	mov	sp, r7
 8019c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c86:	4770      	bx	lr
 8019c88:	20000d00 	.word	0x20000d00

08019c8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8019c8c:	b580      	push	{r7, lr}
 8019c8e:	b084      	sub	sp, #16
 8019c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8019c92:	2300      	movs	r3, #0
 8019c94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8019c96:	2300      	movs	r3, #0
 8019c98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8019c9a:	4b42      	ldr	r3, [pc, #264]	; (8019da4 <xTaskResumeAll+0x118>)
 8019c9c:	681b      	ldr	r3, [r3, #0]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d10b      	bne.n	8019cba <xTaskResumeAll+0x2e>
 8019ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ca6:	b672      	cpsid	i
 8019ca8:	f383 8811 	msr	BASEPRI, r3
 8019cac:	f3bf 8f6f 	isb	sy
 8019cb0:	f3bf 8f4f 	dsb	sy
 8019cb4:	b662      	cpsie	i
 8019cb6:	603b      	str	r3, [r7, #0]
 8019cb8:	e7fe      	b.n	8019cb8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8019cba:	f000 ff6d 	bl	801ab98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8019cbe:	4b39      	ldr	r3, [pc, #228]	; (8019da4 <xTaskResumeAll+0x118>)
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	3b01      	subs	r3, #1
 8019cc4:	4a37      	ldr	r2, [pc, #220]	; (8019da4 <xTaskResumeAll+0x118>)
 8019cc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019cc8:	4b36      	ldr	r3, [pc, #216]	; (8019da4 <xTaskResumeAll+0x118>)
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d161      	bne.n	8019d94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019cd0:	4b35      	ldr	r3, [pc, #212]	; (8019da8 <xTaskResumeAll+0x11c>)
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d05d      	beq.n	8019d94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019cd8:	e02e      	b.n	8019d38 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8019cda:	4b34      	ldr	r3, [pc, #208]	; (8019dac <xTaskResumeAll+0x120>)
 8019cdc:	68db      	ldr	r3, [r3, #12]
 8019cde:	68db      	ldr	r3, [r3, #12]
 8019ce0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	3318      	adds	r3, #24
 8019ce6:	4618      	mov	r0, r3
 8019ce8:	f7fe fe56 	bl	8018998 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	3304      	adds	r3, #4
 8019cf0:	4618      	mov	r0, r3
 8019cf2:	f7fe fe51 	bl	8018998 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019cfa:	2201      	movs	r2, #1
 8019cfc:	409a      	lsls	r2, r3
 8019cfe:	4b2c      	ldr	r3, [pc, #176]	; (8019db0 <xTaskResumeAll+0x124>)
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	4313      	orrs	r3, r2
 8019d04:	4a2a      	ldr	r2, [pc, #168]	; (8019db0 <xTaskResumeAll+0x124>)
 8019d06:	6013      	str	r3, [r2, #0]
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019d0c:	4613      	mov	r3, r2
 8019d0e:	009b      	lsls	r3, r3, #2
 8019d10:	4413      	add	r3, r2
 8019d12:	009b      	lsls	r3, r3, #2
 8019d14:	4a27      	ldr	r2, [pc, #156]	; (8019db4 <xTaskResumeAll+0x128>)
 8019d16:	441a      	add	r2, r3
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	3304      	adds	r3, #4
 8019d1c:	4619      	mov	r1, r3
 8019d1e:	4610      	mov	r0, r2
 8019d20:	f7fe fddd 	bl	80188de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019d28:	4b23      	ldr	r3, [pc, #140]	; (8019db8 <xTaskResumeAll+0x12c>)
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d2e:	429a      	cmp	r2, r3
 8019d30:	d302      	bcc.n	8019d38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8019d32:	4b22      	ldr	r3, [pc, #136]	; (8019dbc <xTaskResumeAll+0x130>)
 8019d34:	2201      	movs	r2, #1
 8019d36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019d38:	4b1c      	ldr	r3, [pc, #112]	; (8019dac <xTaskResumeAll+0x120>)
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d1cc      	bne.n	8019cda <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8019d40:	68fb      	ldr	r3, [r7, #12]
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d001      	beq.n	8019d4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8019d46:	f000 fbb1 	bl	801a4ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8019d4a:	4b1d      	ldr	r3, [pc, #116]	; (8019dc0 <xTaskResumeAll+0x134>)
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d010      	beq.n	8019d78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8019d56:	f000 f859 	bl	8019e0c <xTaskIncrementTick>
 8019d5a:	4603      	mov	r3, r0
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d002      	beq.n	8019d66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8019d60:	4b16      	ldr	r3, [pc, #88]	; (8019dbc <xTaskResumeAll+0x130>)
 8019d62:	2201      	movs	r2, #1
 8019d64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	3b01      	subs	r3, #1
 8019d6a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d1f1      	bne.n	8019d56 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8019d72:	4b13      	ldr	r3, [pc, #76]	; (8019dc0 <xTaskResumeAll+0x134>)
 8019d74:	2200      	movs	r2, #0
 8019d76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8019d78:	4b10      	ldr	r3, [pc, #64]	; (8019dbc <xTaskResumeAll+0x130>)
 8019d7a:	681b      	ldr	r3, [r3, #0]
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d009      	beq.n	8019d94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8019d80:	2301      	movs	r3, #1
 8019d82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8019d84:	4b0f      	ldr	r3, [pc, #60]	; (8019dc4 <xTaskResumeAll+0x138>)
 8019d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019d8a:	601a      	str	r2, [r3, #0]
 8019d8c:	f3bf 8f4f 	dsb	sy
 8019d90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019d94:	f000 ff32 	bl	801abfc <vPortExitCritical>

	return xAlreadyYielded;
 8019d98:	68bb      	ldr	r3, [r7, #8]
}
 8019d9a:	4618      	mov	r0, r3
 8019d9c:	3710      	adds	r7, #16
 8019d9e:	46bd      	mov	sp, r7
 8019da0:	bd80      	pop	{r7, pc}
 8019da2:	bf00      	nop
 8019da4:	20000d00 	.word	0x20000d00
 8019da8:	20000cd8 	.word	0x20000cd8
 8019dac:	20000c98 	.word	0x20000c98
 8019db0:	20000ce0 	.word	0x20000ce0
 8019db4:	20000bdc 	.word	0x20000bdc
 8019db8:	20000bd8 	.word	0x20000bd8
 8019dbc:	20000cec 	.word	0x20000cec
 8019dc0:	20000ce8 	.word	0x20000ce8
 8019dc4:	e000ed04 	.word	0xe000ed04

08019dc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8019dc8:	b480      	push	{r7}
 8019dca:	b083      	sub	sp, #12
 8019dcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8019dce:	4b05      	ldr	r3, [pc, #20]	; (8019de4 <xTaskGetTickCount+0x1c>)
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8019dd4:	687b      	ldr	r3, [r7, #4]
}
 8019dd6:	4618      	mov	r0, r3
 8019dd8:	370c      	adds	r7, #12
 8019dda:	46bd      	mov	sp, r7
 8019ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019de0:	4770      	bx	lr
 8019de2:	bf00      	nop
 8019de4:	20000cdc 	.word	0x20000cdc

08019de8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8019de8:	b580      	push	{r7, lr}
 8019dea:	b082      	sub	sp, #8
 8019dec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019dee:	f000 ffb3 	bl	801ad58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8019df2:	2300      	movs	r3, #0
 8019df4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8019df6:	4b04      	ldr	r3, [pc, #16]	; (8019e08 <xTaskGetTickCountFromISR+0x20>)
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019dfc:	683b      	ldr	r3, [r7, #0]
}
 8019dfe:	4618      	mov	r0, r3
 8019e00:	3708      	adds	r7, #8
 8019e02:	46bd      	mov	sp, r7
 8019e04:	bd80      	pop	{r7, pc}
 8019e06:	bf00      	nop
 8019e08:	20000cdc 	.word	0x20000cdc

08019e0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8019e0c:	b580      	push	{r7, lr}
 8019e0e:	b086      	sub	sp, #24
 8019e10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8019e12:	2300      	movs	r3, #0
 8019e14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019e16:	4b51      	ldr	r3, [pc, #324]	; (8019f5c <xTaskIncrementTick+0x150>)
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	f040 808e 	bne.w	8019f3c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019e20:	4b4f      	ldr	r3, [pc, #316]	; (8019f60 <xTaskIncrementTick+0x154>)
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	3301      	adds	r3, #1
 8019e26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8019e28:	4a4d      	ldr	r2, [pc, #308]	; (8019f60 <xTaskIncrementTick+0x154>)
 8019e2a:	693b      	ldr	r3, [r7, #16]
 8019e2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019e2e:	693b      	ldr	r3, [r7, #16]
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d121      	bne.n	8019e78 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8019e34:	4b4b      	ldr	r3, [pc, #300]	; (8019f64 <xTaskIncrementTick+0x158>)
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d00b      	beq.n	8019e56 <xTaskIncrementTick+0x4a>
 8019e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e42:	b672      	cpsid	i
 8019e44:	f383 8811 	msr	BASEPRI, r3
 8019e48:	f3bf 8f6f 	isb	sy
 8019e4c:	f3bf 8f4f 	dsb	sy
 8019e50:	b662      	cpsie	i
 8019e52:	603b      	str	r3, [r7, #0]
 8019e54:	e7fe      	b.n	8019e54 <xTaskIncrementTick+0x48>
 8019e56:	4b43      	ldr	r3, [pc, #268]	; (8019f64 <xTaskIncrementTick+0x158>)
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	60fb      	str	r3, [r7, #12]
 8019e5c:	4b42      	ldr	r3, [pc, #264]	; (8019f68 <xTaskIncrementTick+0x15c>)
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	4a40      	ldr	r2, [pc, #256]	; (8019f64 <xTaskIncrementTick+0x158>)
 8019e62:	6013      	str	r3, [r2, #0]
 8019e64:	4a40      	ldr	r2, [pc, #256]	; (8019f68 <xTaskIncrementTick+0x15c>)
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	6013      	str	r3, [r2, #0]
 8019e6a:	4b40      	ldr	r3, [pc, #256]	; (8019f6c <xTaskIncrementTick+0x160>)
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	3301      	adds	r3, #1
 8019e70:	4a3e      	ldr	r2, [pc, #248]	; (8019f6c <xTaskIncrementTick+0x160>)
 8019e72:	6013      	str	r3, [r2, #0]
 8019e74:	f000 fb1a 	bl	801a4ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8019e78:	4b3d      	ldr	r3, [pc, #244]	; (8019f70 <xTaskIncrementTick+0x164>)
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	693a      	ldr	r2, [r7, #16]
 8019e7e:	429a      	cmp	r2, r3
 8019e80:	d34d      	bcc.n	8019f1e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019e82:	4b38      	ldr	r3, [pc, #224]	; (8019f64 <xTaskIncrementTick+0x158>)
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d101      	bne.n	8019e90 <xTaskIncrementTick+0x84>
 8019e8c:	2301      	movs	r3, #1
 8019e8e:	e000      	b.n	8019e92 <xTaskIncrementTick+0x86>
 8019e90:	2300      	movs	r3, #0
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d004      	beq.n	8019ea0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019e96:	4b36      	ldr	r3, [pc, #216]	; (8019f70 <xTaskIncrementTick+0x164>)
 8019e98:	f04f 32ff 	mov.w	r2, #4294967295
 8019e9c:	601a      	str	r2, [r3, #0]
					break;
 8019e9e:	e03e      	b.n	8019f1e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8019ea0:	4b30      	ldr	r3, [pc, #192]	; (8019f64 <xTaskIncrementTick+0x158>)
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	68db      	ldr	r3, [r3, #12]
 8019ea6:	68db      	ldr	r3, [r3, #12]
 8019ea8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019eaa:	68bb      	ldr	r3, [r7, #8]
 8019eac:	685b      	ldr	r3, [r3, #4]
 8019eae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8019eb0:	693a      	ldr	r2, [r7, #16]
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	429a      	cmp	r2, r3
 8019eb6:	d203      	bcs.n	8019ec0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8019eb8:	4a2d      	ldr	r2, [pc, #180]	; (8019f70 <xTaskIncrementTick+0x164>)
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	6013      	str	r3, [r2, #0]
						break;
 8019ebe:	e02e      	b.n	8019f1e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019ec0:	68bb      	ldr	r3, [r7, #8]
 8019ec2:	3304      	adds	r3, #4
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	f7fe fd67 	bl	8018998 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019eca:	68bb      	ldr	r3, [r7, #8]
 8019ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d004      	beq.n	8019edc <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019ed2:	68bb      	ldr	r3, [r7, #8]
 8019ed4:	3318      	adds	r3, #24
 8019ed6:	4618      	mov	r0, r3
 8019ed8:	f7fe fd5e 	bl	8018998 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8019edc:	68bb      	ldr	r3, [r7, #8]
 8019ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ee0:	2201      	movs	r2, #1
 8019ee2:	409a      	lsls	r2, r3
 8019ee4:	4b23      	ldr	r3, [pc, #140]	; (8019f74 <xTaskIncrementTick+0x168>)
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	4313      	orrs	r3, r2
 8019eea:	4a22      	ldr	r2, [pc, #136]	; (8019f74 <xTaskIncrementTick+0x168>)
 8019eec:	6013      	str	r3, [r2, #0]
 8019eee:	68bb      	ldr	r3, [r7, #8]
 8019ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019ef2:	4613      	mov	r3, r2
 8019ef4:	009b      	lsls	r3, r3, #2
 8019ef6:	4413      	add	r3, r2
 8019ef8:	009b      	lsls	r3, r3, #2
 8019efa:	4a1f      	ldr	r2, [pc, #124]	; (8019f78 <xTaskIncrementTick+0x16c>)
 8019efc:	441a      	add	r2, r3
 8019efe:	68bb      	ldr	r3, [r7, #8]
 8019f00:	3304      	adds	r3, #4
 8019f02:	4619      	mov	r1, r3
 8019f04:	4610      	mov	r0, r2
 8019f06:	f7fe fcea 	bl	80188de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019f0a:	68bb      	ldr	r3, [r7, #8]
 8019f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019f0e:	4b1b      	ldr	r3, [pc, #108]	; (8019f7c <xTaskIncrementTick+0x170>)
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f14:	429a      	cmp	r2, r3
 8019f16:	d3b4      	bcc.n	8019e82 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8019f18:	2301      	movs	r3, #1
 8019f1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019f1c:	e7b1      	b.n	8019e82 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019f1e:	4b17      	ldr	r3, [pc, #92]	; (8019f7c <xTaskIncrementTick+0x170>)
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019f24:	4914      	ldr	r1, [pc, #80]	; (8019f78 <xTaskIncrementTick+0x16c>)
 8019f26:	4613      	mov	r3, r2
 8019f28:	009b      	lsls	r3, r3, #2
 8019f2a:	4413      	add	r3, r2
 8019f2c:	009b      	lsls	r3, r3, #2
 8019f2e:	440b      	add	r3, r1
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	2b01      	cmp	r3, #1
 8019f34:	d907      	bls.n	8019f46 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8019f36:	2301      	movs	r3, #1
 8019f38:	617b      	str	r3, [r7, #20]
 8019f3a:	e004      	b.n	8019f46 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8019f3c:	4b10      	ldr	r3, [pc, #64]	; (8019f80 <xTaskIncrementTick+0x174>)
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	3301      	adds	r3, #1
 8019f42:	4a0f      	ldr	r2, [pc, #60]	; (8019f80 <xTaskIncrementTick+0x174>)
 8019f44:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8019f46:	4b0f      	ldr	r3, [pc, #60]	; (8019f84 <xTaskIncrementTick+0x178>)
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d001      	beq.n	8019f52 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8019f4e:	2301      	movs	r3, #1
 8019f50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8019f52:	697b      	ldr	r3, [r7, #20]
}
 8019f54:	4618      	mov	r0, r3
 8019f56:	3718      	adds	r7, #24
 8019f58:	46bd      	mov	sp, r7
 8019f5a:	bd80      	pop	{r7, pc}
 8019f5c:	20000d00 	.word	0x20000d00
 8019f60:	20000cdc 	.word	0x20000cdc
 8019f64:	20000c90 	.word	0x20000c90
 8019f68:	20000c94 	.word	0x20000c94
 8019f6c:	20000cf0 	.word	0x20000cf0
 8019f70:	20000cf8 	.word	0x20000cf8
 8019f74:	20000ce0 	.word	0x20000ce0
 8019f78:	20000bdc 	.word	0x20000bdc
 8019f7c:	20000bd8 	.word	0x20000bd8
 8019f80:	20000ce8 	.word	0x20000ce8
 8019f84:	20000cec 	.word	0x20000cec

08019f88 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	b084      	sub	sp, #16
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	6078      	str	r0, [r7, #4]
 8019f90:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	d103      	bne.n	8019fa0 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8019f98:	4b08      	ldr	r3, [pc, #32]	; (8019fbc <vTaskSetApplicationTaskTag+0x34>)
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	60fb      	str	r3, [r7, #12]
 8019f9e:	e001      	b.n	8019fa4 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8019fa4:	f000 fdf8 	bl	801ab98 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	683a      	ldr	r2, [r7, #0]
 8019fac:	64da      	str	r2, [r3, #76]	; 0x4c
		taskEXIT_CRITICAL();
 8019fae:	f000 fe25 	bl	801abfc <vPortExitCritical>
	}
 8019fb2:	bf00      	nop
 8019fb4:	3710      	adds	r7, #16
 8019fb6:	46bd      	mov	sp, r7
 8019fb8:	bd80      	pop	{r7, pc}
 8019fba:	bf00      	nop
 8019fbc:	20000bd8 	.word	0x20000bd8

08019fc0 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 8019fc0:	b580      	push	{r7, lr}
 8019fc2:	b084      	sub	sp, #16
 8019fc4:	af00      	add	r7, sp, #0
 8019fc6:	6078      	str	r0, [r7, #4]
 8019fc8:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d103      	bne.n	8019fd8 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8019fd0:	4b0b      	ldr	r3, [pc, #44]	; (801a000 <xTaskCallApplicationTaskHook+0x40>)
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	60fb      	str	r3, [r7, #12]
 8019fd6:	e001      	b.n	8019fdc <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 8019fdc:	68fb      	ldr	r3, [r7, #12]
 8019fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d005      	beq.n	8019ff0 <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019fe8:	6838      	ldr	r0, [r7, #0]
 8019fea:	4798      	blx	r3
 8019fec:	60b8      	str	r0, [r7, #8]
 8019fee:	e001      	b.n	8019ff4 <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 8019ff4:	68bb      	ldr	r3, [r7, #8]
	}
 8019ff6:	4618      	mov	r0, r3
 8019ff8:	3710      	adds	r7, #16
 8019ffa:	46bd      	mov	sp, r7
 8019ffc:	bd80      	pop	{r7, pc}
 8019ffe:	bf00      	nop
 801a000:	20000bd8 	.word	0x20000bd8

0801a004 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801a004:	b580      	push	{r7, lr}
 801a006:	b088      	sub	sp, #32
 801a008:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a00a:	4b40      	ldr	r3, [pc, #256]	; (801a10c <vTaskSwitchContext+0x108>)
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d003      	beq.n	801a01a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801a012:	4b3f      	ldr	r3, [pc, #252]	; (801a110 <vTaskSwitchContext+0x10c>)
 801a014:	2201      	movs	r2, #1
 801a016:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801a018:	e073      	b.n	801a102 <vTaskSwitchContext+0xfe>
		xYieldPending = pdFALSE;
 801a01a:	4b3d      	ldr	r3, [pc, #244]	; (801a110 <vTaskSwitchContext+0x10c>)
 801a01c:	2200      	movs	r2, #0
 801a01e:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 801a020:	4b3c      	ldr	r3, [pc, #240]	; (801a114 <vTaskSwitchContext+0x110>)
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	2101      	movs	r1, #1
 801a026:	4618      	mov	r0, r3
 801a028:	f7ff ffca 	bl	8019fc0 <xTaskCallApplicationTaskHook>
		taskCHECK_FOR_STACK_OVERFLOW();
 801a02c:	4b39      	ldr	r3, [pc, #228]	; (801a114 <vTaskSwitchContext+0x110>)
 801a02e:	681b      	ldr	r3, [r3, #0]
 801a030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a032:	61fb      	str	r3, [r7, #28]
 801a034:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 801a038:	61bb      	str	r3, [r7, #24]
 801a03a:	69fb      	ldr	r3, [r7, #28]
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	69ba      	ldr	r2, [r7, #24]
 801a040:	429a      	cmp	r2, r3
 801a042:	d111      	bne.n	801a068 <vTaskSwitchContext+0x64>
 801a044:	69fb      	ldr	r3, [r7, #28]
 801a046:	3304      	adds	r3, #4
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	69ba      	ldr	r2, [r7, #24]
 801a04c:	429a      	cmp	r2, r3
 801a04e:	d10b      	bne.n	801a068 <vTaskSwitchContext+0x64>
 801a050:	69fb      	ldr	r3, [r7, #28]
 801a052:	3308      	adds	r3, #8
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	69ba      	ldr	r2, [r7, #24]
 801a058:	429a      	cmp	r2, r3
 801a05a:	d105      	bne.n	801a068 <vTaskSwitchContext+0x64>
 801a05c:	69fb      	ldr	r3, [r7, #28]
 801a05e:	330c      	adds	r3, #12
 801a060:	681b      	ldr	r3, [r3, #0]
 801a062:	69ba      	ldr	r2, [r7, #24]
 801a064:	429a      	cmp	r2, r3
 801a066:	d008      	beq.n	801a07a <vTaskSwitchContext+0x76>
 801a068:	4b2a      	ldr	r3, [pc, #168]	; (801a114 <vTaskSwitchContext+0x110>)
 801a06a:	681a      	ldr	r2, [r3, #0]
 801a06c:	4b29      	ldr	r3, [pc, #164]	; (801a114 <vTaskSwitchContext+0x110>)
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	3334      	adds	r3, #52	; 0x34
 801a072:	4619      	mov	r1, r3
 801a074:	4610      	mov	r0, r2
 801a076:	f7fe fa08 	bl	801848a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801a07a:	4b27      	ldr	r3, [pc, #156]	; (801a118 <vTaskSwitchContext+0x114>)
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801a080:	68fb      	ldr	r3, [r7, #12]
 801a082:	fab3 f383 	clz	r3, r3
 801a086:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801a088:	7afb      	ldrb	r3, [r7, #11]
 801a08a:	f1c3 031f 	rsb	r3, r3, #31
 801a08e:	617b      	str	r3, [r7, #20]
 801a090:	4922      	ldr	r1, [pc, #136]	; (801a11c <vTaskSwitchContext+0x118>)
 801a092:	697a      	ldr	r2, [r7, #20]
 801a094:	4613      	mov	r3, r2
 801a096:	009b      	lsls	r3, r3, #2
 801a098:	4413      	add	r3, r2
 801a09a:	009b      	lsls	r3, r3, #2
 801a09c:	440b      	add	r3, r1
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d10b      	bne.n	801a0bc <vTaskSwitchContext+0xb8>
	__asm volatile
 801a0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0a8:	b672      	cpsid	i
 801a0aa:	f383 8811 	msr	BASEPRI, r3
 801a0ae:	f3bf 8f6f 	isb	sy
 801a0b2:	f3bf 8f4f 	dsb	sy
 801a0b6:	b662      	cpsie	i
 801a0b8:	607b      	str	r3, [r7, #4]
 801a0ba:	e7fe      	b.n	801a0ba <vTaskSwitchContext+0xb6>
 801a0bc:	697a      	ldr	r2, [r7, #20]
 801a0be:	4613      	mov	r3, r2
 801a0c0:	009b      	lsls	r3, r3, #2
 801a0c2:	4413      	add	r3, r2
 801a0c4:	009b      	lsls	r3, r3, #2
 801a0c6:	4a15      	ldr	r2, [pc, #84]	; (801a11c <vTaskSwitchContext+0x118>)
 801a0c8:	4413      	add	r3, r2
 801a0ca:	613b      	str	r3, [r7, #16]
 801a0cc:	693b      	ldr	r3, [r7, #16]
 801a0ce:	685b      	ldr	r3, [r3, #4]
 801a0d0:	685a      	ldr	r2, [r3, #4]
 801a0d2:	693b      	ldr	r3, [r7, #16]
 801a0d4:	605a      	str	r2, [r3, #4]
 801a0d6:	693b      	ldr	r3, [r7, #16]
 801a0d8:	685a      	ldr	r2, [r3, #4]
 801a0da:	693b      	ldr	r3, [r7, #16]
 801a0dc:	3308      	adds	r3, #8
 801a0de:	429a      	cmp	r2, r3
 801a0e0:	d104      	bne.n	801a0ec <vTaskSwitchContext+0xe8>
 801a0e2:	693b      	ldr	r3, [r7, #16]
 801a0e4:	685b      	ldr	r3, [r3, #4]
 801a0e6:	685a      	ldr	r2, [r3, #4]
 801a0e8:	693b      	ldr	r3, [r7, #16]
 801a0ea:	605a      	str	r2, [r3, #4]
 801a0ec:	693b      	ldr	r3, [r7, #16]
 801a0ee:	685b      	ldr	r3, [r3, #4]
 801a0f0:	68db      	ldr	r3, [r3, #12]
 801a0f2:	4a08      	ldr	r2, [pc, #32]	; (801a114 <vTaskSwitchContext+0x110>)
 801a0f4:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 801a0f6:	4b07      	ldr	r3, [pc, #28]	; (801a114 <vTaskSwitchContext+0x110>)
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	2100      	movs	r1, #0
 801a0fc:	4618      	mov	r0, r3
 801a0fe:	f7ff ff5f 	bl	8019fc0 <xTaskCallApplicationTaskHook>
}
 801a102:	bf00      	nop
 801a104:	3720      	adds	r7, #32
 801a106:	46bd      	mov	sp, r7
 801a108:	bd80      	pop	{r7, pc}
 801a10a:	bf00      	nop
 801a10c:	20000d00 	.word	0x20000d00
 801a110:	20000cec 	.word	0x20000cec
 801a114:	20000bd8 	.word	0x20000bd8
 801a118:	20000ce0 	.word	0x20000ce0
 801a11c:	20000bdc 	.word	0x20000bdc

0801a120 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801a120:	b580      	push	{r7, lr}
 801a122:	b084      	sub	sp, #16
 801a124:	af00      	add	r7, sp, #0
 801a126:	6078      	str	r0, [r7, #4]
 801a128:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d10b      	bne.n	801a148 <vTaskPlaceOnEventList+0x28>
 801a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a134:	b672      	cpsid	i
 801a136:	f383 8811 	msr	BASEPRI, r3
 801a13a:	f3bf 8f6f 	isb	sy
 801a13e:	f3bf 8f4f 	dsb	sy
 801a142:	b662      	cpsie	i
 801a144:	60fb      	str	r3, [r7, #12]
 801a146:	e7fe      	b.n	801a146 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a148:	4b07      	ldr	r3, [pc, #28]	; (801a168 <vTaskPlaceOnEventList+0x48>)
 801a14a:	681b      	ldr	r3, [r3, #0]
 801a14c:	3318      	adds	r3, #24
 801a14e:	4619      	mov	r1, r3
 801a150:	6878      	ldr	r0, [r7, #4]
 801a152:	f7fe fbe8 	bl	8018926 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a156:	2101      	movs	r1, #1
 801a158:	6838      	ldr	r0, [r7, #0]
 801a15a:	f000 fbaf 	bl	801a8bc <prvAddCurrentTaskToDelayedList>
}
 801a15e:	bf00      	nop
 801a160:	3710      	adds	r7, #16
 801a162:	46bd      	mov	sp, r7
 801a164:	bd80      	pop	{r7, pc}
 801a166:	bf00      	nop
 801a168:	20000bd8 	.word	0x20000bd8

0801a16c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801a16c:	b580      	push	{r7, lr}
 801a16e:	b086      	sub	sp, #24
 801a170:	af00      	add	r7, sp, #0
 801a172:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	68db      	ldr	r3, [r3, #12]
 801a178:	68db      	ldr	r3, [r3, #12]
 801a17a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801a17c:	693b      	ldr	r3, [r7, #16]
 801a17e:	2b00      	cmp	r3, #0
 801a180:	d10b      	bne.n	801a19a <xTaskRemoveFromEventList+0x2e>
 801a182:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a186:	b672      	cpsid	i
 801a188:	f383 8811 	msr	BASEPRI, r3
 801a18c:	f3bf 8f6f 	isb	sy
 801a190:	f3bf 8f4f 	dsb	sy
 801a194:	b662      	cpsie	i
 801a196:	60fb      	str	r3, [r7, #12]
 801a198:	e7fe      	b.n	801a198 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a19a:	693b      	ldr	r3, [r7, #16]
 801a19c:	3318      	adds	r3, #24
 801a19e:	4618      	mov	r0, r3
 801a1a0:	f7fe fbfa 	bl	8018998 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a1a4:	4b1d      	ldr	r3, [pc, #116]	; (801a21c <xTaskRemoveFromEventList+0xb0>)
 801a1a6:	681b      	ldr	r3, [r3, #0]
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	d11c      	bne.n	801a1e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a1ac:	693b      	ldr	r3, [r7, #16]
 801a1ae:	3304      	adds	r3, #4
 801a1b0:	4618      	mov	r0, r3
 801a1b2:	f7fe fbf1 	bl	8018998 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a1b6:	693b      	ldr	r3, [r7, #16]
 801a1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1ba:	2201      	movs	r2, #1
 801a1bc:	409a      	lsls	r2, r3
 801a1be:	4b18      	ldr	r3, [pc, #96]	; (801a220 <xTaskRemoveFromEventList+0xb4>)
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	4313      	orrs	r3, r2
 801a1c4:	4a16      	ldr	r2, [pc, #88]	; (801a220 <xTaskRemoveFromEventList+0xb4>)
 801a1c6:	6013      	str	r3, [r2, #0]
 801a1c8:	693b      	ldr	r3, [r7, #16]
 801a1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a1cc:	4613      	mov	r3, r2
 801a1ce:	009b      	lsls	r3, r3, #2
 801a1d0:	4413      	add	r3, r2
 801a1d2:	009b      	lsls	r3, r3, #2
 801a1d4:	4a13      	ldr	r2, [pc, #76]	; (801a224 <xTaskRemoveFromEventList+0xb8>)
 801a1d6:	441a      	add	r2, r3
 801a1d8:	693b      	ldr	r3, [r7, #16]
 801a1da:	3304      	adds	r3, #4
 801a1dc:	4619      	mov	r1, r3
 801a1de:	4610      	mov	r0, r2
 801a1e0:	f7fe fb7d 	bl	80188de <vListInsertEnd>
 801a1e4:	e005      	b.n	801a1f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a1e6:	693b      	ldr	r3, [r7, #16]
 801a1e8:	3318      	adds	r3, #24
 801a1ea:	4619      	mov	r1, r3
 801a1ec:	480e      	ldr	r0, [pc, #56]	; (801a228 <xTaskRemoveFromEventList+0xbc>)
 801a1ee:	f7fe fb76 	bl	80188de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a1f2:	693b      	ldr	r3, [r7, #16]
 801a1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a1f6:	4b0d      	ldr	r3, [pc, #52]	; (801a22c <xTaskRemoveFromEventList+0xc0>)
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1fc:	429a      	cmp	r2, r3
 801a1fe:	d905      	bls.n	801a20c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801a200:	2301      	movs	r3, #1
 801a202:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801a204:	4b0a      	ldr	r3, [pc, #40]	; (801a230 <xTaskRemoveFromEventList+0xc4>)
 801a206:	2201      	movs	r2, #1
 801a208:	601a      	str	r2, [r3, #0]
 801a20a:	e001      	b.n	801a210 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801a20c:	2300      	movs	r3, #0
 801a20e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 801a210:	697b      	ldr	r3, [r7, #20]
}
 801a212:	4618      	mov	r0, r3
 801a214:	3718      	adds	r7, #24
 801a216:	46bd      	mov	sp, r7
 801a218:	bd80      	pop	{r7, pc}
 801a21a:	bf00      	nop
 801a21c:	20000d00 	.word	0x20000d00
 801a220:	20000ce0 	.word	0x20000ce0
 801a224:	20000bdc 	.word	0x20000bdc
 801a228:	20000c98 	.word	0x20000c98
 801a22c:	20000bd8 	.word	0x20000bd8
 801a230:	20000cec 	.word	0x20000cec

0801a234 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801a234:	b480      	push	{r7}
 801a236:	b083      	sub	sp, #12
 801a238:	af00      	add	r7, sp, #0
 801a23a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a23c:	4b06      	ldr	r3, [pc, #24]	; (801a258 <vTaskInternalSetTimeOutState+0x24>)
 801a23e:	681a      	ldr	r2, [r3, #0]
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a244:	4b05      	ldr	r3, [pc, #20]	; (801a25c <vTaskInternalSetTimeOutState+0x28>)
 801a246:	681a      	ldr	r2, [r3, #0]
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	605a      	str	r2, [r3, #4]
}
 801a24c:	bf00      	nop
 801a24e:	370c      	adds	r7, #12
 801a250:	46bd      	mov	sp, r7
 801a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a256:	4770      	bx	lr
 801a258:	20000cf0 	.word	0x20000cf0
 801a25c:	20000cdc 	.word	0x20000cdc

0801a260 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801a260:	b580      	push	{r7, lr}
 801a262:	b088      	sub	sp, #32
 801a264:	af00      	add	r7, sp, #0
 801a266:	6078      	str	r0, [r7, #4]
 801a268:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d10b      	bne.n	801a288 <xTaskCheckForTimeOut+0x28>
 801a270:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a274:	b672      	cpsid	i
 801a276:	f383 8811 	msr	BASEPRI, r3
 801a27a:	f3bf 8f6f 	isb	sy
 801a27e:	f3bf 8f4f 	dsb	sy
 801a282:	b662      	cpsie	i
 801a284:	613b      	str	r3, [r7, #16]
 801a286:	e7fe      	b.n	801a286 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 801a288:	683b      	ldr	r3, [r7, #0]
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	d10b      	bne.n	801a2a6 <xTaskCheckForTimeOut+0x46>
 801a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a292:	b672      	cpsid	i
 801a294:	f383 8811 	msr	BASEPRI, r3
 801a298:	f3bf 8f6f 	isb	sy
 801a29c:	f3bf 8f4f 	dsb	sy
 801a2a0:	b662      	cpsie	i
 801a2a2:	60fb      	str	r3, [r7, #12]
 801a2a4:	e7fe      	b.n	801a2a4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 801a2a6:	f000 fc77 	bl	801ab98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801a2aa:	4b1d      	ldr	r3, [pc, #116]	; (801a320 <xTaskCheckForTimeOut+0xc0>)
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	685b      	ldr	r3, [r3, #4]
 801a2b4:	69ba      	ldr	r2, [r7, #24]
 801a2b6:	1ad3      	subs	r3, r2, r3
 801a2b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801a2ba:	683b      	ldr	r3, [r7, #0]
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a2c2:	d102      	bne.n	801a2ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801a2c4:	2300      	movs	r3, #0
 801a2c6:	61fb      	str	r3, [r7, #28]
 801a2c8:	e023      	b.n	801a312 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	681a      	ldr	r2, [r3, #0]
 801a2ce:	4b15      	ldr	r3, [pc, #84]	; (801a324 <xTaskCheckForTimeOut+0xc4>)
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	429a      	cmp	r2, r3
 801a2d4:	d007      	beq.n	801a2e6 <xTaskCheckForTimeOut+0x86>
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	685b      	ldr	r3, [r3, #4]
 801a2da:	69ba      	ldr	r2, [r7, #24]
 801a2dc:	429a      	cmp	r2, r3
 801a2de:	d302      	bcc.n	801a2e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801a2e0:	2301      	movs	r3, #1
 801a2e2:	61fb      	str	r3, [r7, #28]
 801a2e4:	e015      	b.n	801a312 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801a2e6:	683b      	ldr	r3, [r7, #0]
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	697a      	ldr	r2, [r7, #20]
 801a2ec:	429a      	cmp	r2, r3
 801a2ee:	d20b      	bcs.n	801a308 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801a2f0:	683b      	ldr	r3, [r7, #0]
 801a2f2:	681a      	ldr	r2, [r3, #0]
 801a2f4:	697b      	ldr	r3, [r7, #20]
 801a2f6:	1ad2      	subs	r2, r2, r3
 801a2f8:	683b      	ldr	r3, [r7, #0]
 801a2fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a2fc:	6878      	ldr	r0, [r7, #4]
 801a2fe:	f7ff ff99 	bl	801a234 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a302:	2300      	movs	r3, #0
 801a304:	61fb      	str	r3, [r7, #28]
 801a306:	e004      	b.n	801a312 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801a308:	683b      	ldr	r3, [r7, #0]
 801a30a:	2200      	movs	r2, #0
 801a30c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801a30e:	2301      	movs	r3, #1
 801a310:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801a312:	f000 fc73 	bl	801abfc <vPortExitCritical>

	return xReturn;
 801a316:	69fb      	ldr	r3, [r7, #28]
}
 801a318:	4618      	mov	r0, r3
 801a31a:	3720      	adds	r7, #32
 801a31c:	46bd      	mov	sp, r7
 801a31e:	bd80      	pop	{r7, pc}
 801a320:	20000cdc 	.word	0x20000cdc
 801a324:	20000cf0 	.word	0x20000cf0

0801a328 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801a328:	b480      	push	{r7}
 801a32a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801a32c:	4b03      	ldr	r3, [pc, #12]	; (801a33c <vTaskMissedYield+0x14>)
 801a32e:	2201      	movs	r2, #1
 801a330:	601a      	str	r2, [r3, #0]
}
 801a332:	bf00      	nop
 801a334:	46bd      	mov	sp, r7
 801a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a33a:	4770      	bx	lr
 801a33c:	20000cec 	.word	0x20000cec

0801a340 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801a340:	b580      	push	{r7, lr}
 801a342:	b082      	sub	sp, #8
 801a344:	af00      	add	r7, sp, #0
 801a346:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801a348:	f000 f854 	bl	801a3f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801a34c:	4b07      	ldr	r3, [pc, #28]	; (801a36c <prvIdleTask+0x2c>)
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	2b01      	cmp	r3, #1
 801a352:	d907      	bls.n	801a364 <prvIdleTask+0x24>
			{
				taskYIELD();
 801a354:	4b06      	ldr	r3, [pc, #24]	; (801a370 <prvIdleTask+0x30>)
 801a356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a35a:	601a      	str	r2, [r3, #0]
 801a35c:	f3bf 8f4f 	dsb	sy
 801a360:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801a364:	f7fe f89e 	bl	80184a4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801a368:	e7ee      	b.n	801a348 <prvIdleTask+0x8>
 801a36a:	bf00      	nop
 801a36c:	20000bdc 	.word	0x20000bdc
 801a370:	e000ed04 	.word	0xe000ed04

0801a374 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a374:	b580      	push	{r7, lr}
 801a376:	b082      	sub	sp, #8
 801a378:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a37a:	2300      	movs	r3, #0
 801a37c:	607b      	str	r3, [r7, #4]
 801a37e:	e00c      	b.n	801a39a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a380:	687a      	ldr	r2, [r7, #4]
 801a382:	4613      	mov	r3, r2
 801a384:	009b      	lsls	r3, r3, #2
 801a386:	4413      	add	r3, r2
 801a388:	009b      	lsls	r3, r3, #2
 801a38a:	4a12      	ldr	r2, [pc, #72]	; (801a3d4 <prvInitialiseTaskLists+0x60>)
 801a38c:	4413      	add	r3, r2
 801a38e:	4618      	mov	r0, r3
 801a390:	f7fe fa78 	bl	8018884 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	3301      	adds	r3, #1
 801a398:	607b      	str	r3, [r7, #4]
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	2b06      	cmp	r3, #6
 801a39e:	d9ef      	bls.n	801a380 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a3a0:	480d      	ldr	r0, [pc, #52]	; (801a3d8 <prvInitialiseTaskLists+0x64>)
 801a3a2:	f7fe fa6f 	bl	8018884 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a3a6:	480d      	ldr	r0, [pc, #52]	; (801a3dc <prvInitialiseTaskLists+0x68>)
 801a3a8:	f7fe fa6c 	bl	8018884 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a3ac:	480c      	ldr	r0, [pc, #48]	; (801a3e0 <prvInitialiseTaskLists+0x6c>)
 801a3ae:	f7fe fa69 	bl	8018884 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a3b2:	480c      	ldr	r0, [pc, #48]	; (801a3e4 <prvInitialiseTaskLists+0x70>)
 801a3b4:	f7fe fa66 	bl	8018884 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a3b8:	480b      	ldr	r0, [pc, #44]	; (801a3e8 <prvInitialiseTaskLists+0x74>)
 801a3ba:	f7fe fa63 	bl	8018884 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a3be:	4b0b      	ldr	r3, [pc, #44]	; (801a3ec <prvInitialiseTaskLists+0x78>)
 801a3c0:	4a05      	ldr	r2, [pc, #20]	; (801a3d8 <prvInitialiseTaskLists+0x64>)
 801a3c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a3c4:	4b0a      	ldr	r3, [pc, #40]	; (801a3f0 <prvInitialiseTaskLists+0x7c>)
 801a3c6:	4a05      	ldr	r2, [pc, #20]	; (801a3dc <prvInitialiseTaskLists+0x68>)
 801a3c8:	601a      	str	r2, [r3, #0]
}
 801a3ca:	bf00      	nop
 801a3cc:	3708      	adds	r7, #8
 801a3ce:	46bd      	mov	sp, r7
 801a3d0:	bd80      	pop	{r7, pc}
 801a3d2:	bf00      	nop
 801a3d4:	20000bdc 	.word	0x20000bdc
 801a3d8:	20000c68 	.word	0x20000c68
 801a3dc:	20000c7c 	.word	0x20000c7c
 801a3e0:	20000c98 	.word	0x20000c98
 801a3e4:	20000cac 	.word	0x20000cac
 801a3e8:	20000cc4 	.word	0x20000cc4
 801a3ec:	20000c90 	.word	0x20000c90
 801a3f0:	20000c94 	.word	0x20000c94

0801a3f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a3f4:	b580      	push	{r7, lr}
 801a3f6:	b082      	sub	sp, #8
 801a3f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a3fa:	e019      	b.n	801a430 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a3fc:	f000 fbcc 	bl	801ab98 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 801a400:	4b0f      	ldr	r3, [pc, #60]	; (801a440 <prvCheckTasksWaitingTermination+0x4c>)
 801a402:	68db      	ldr	r3, [r3, #12]
 801a404:	68db      	ldr	r3, [r3, #12]
 801a406:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	3304      	adds	r3, #4
 801a40c:	4618      	mov	r0, r3
 801a40e:	f7fe fac3 	bl	8018998 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a412:	4b0c      	ldr	r3, [pc, #48]	; (801a444 <prvCheckTasksWaitingTermination+0x50>)
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	3b01      	subs	r3, #1
 801a418:	4a0a      	ldr	r2, [pc, #40]	; (801a444 <prvCheckTasksWaitingTermination+0x50>)
 801a41a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a41c:	4b0a      	ldr	r3, [pc, #40]	; (801a448 <prvCheckTasksWaitingTermination+0x54>)
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	3b01      	subs	r3, #1
 801a422:	4a09      	ldr	r2, [pc, #36]	; (801a448 <prvCheckTasksWaitingTermination+0x54>)
 801a424:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a426:	f000 fbe9 	bl	801abfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a42a:	6878      	ldr	r0, [r7, #4]
 801a42c:	f000 f80e 	bl	801a44c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a430:	4b05      	ldr	r3, [pc, #20]	; (801a448 <prvCheckTasksWaitingTermination+0x54>)
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	2b00      	cmp	r3, #0
 801a436:	d1e1      	bne.n	801a3fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a438:	bf00      	nop
 801a43a:	3708      	adds	r7, #8
 801a43c:	46bd      	mov	sp, r7
 801a43e:	bd80      	pop	{r7, pc}
 801a440:	20000cac 	.word	0x20000cac
 801a444:	20000cd8 	.word	0x20000cd8
 801a448:	20000cc0 	.word	0x20000cc0

0801a44c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801a44c:	b580      	push	{r7, lr}
 801a44e:	b084      	sub	sp, #16
 801a450:	af00      	add	r7, sp, #0
 801a452:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d108      	bne.n	801a470 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a462:	4618      	mov	r0, r3
 801a464:	f000 fd86 	bl	801af74 <vPortFree>
				vPortFree( pxTCB );
 801a468:	6878      	ldr	r0, [r7, #4]
 801a46a:	f000 fd83 	bl	801af74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801a46e:	e019      	b.n	801a4a4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801a476:	2b01      	cmp	r3, #1
 801a478:	d103      	bne.n	801a482 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801a47a:	6878      	ldr	r0, [r7, #4]
 801a47c:	f000 fd7a 	bl	801af74 <vPortFree>
	}
 801a480:	e010      	b.n	801a4a4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801a488:	2b02      	cmp	r3, #2
 801a48a:	d00b      	beq.n	801a4a4 <prvDeleteTCB+0x58>
 801a48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a490:	b672      	cpsid	i
 801a492:	f383 8811 	msr	BASEPRI, r3
 801a496:	f3bf 8f6f 	isb	sy
 801a49a:	f3bf 8f4f 	dsb	sy
 801a49e:	b662      	cpsie	i
 801a4a0:	60fb      	str	r3, [r7, #12]
 801a4a2:	e7fe      	b.n	801a4a2 <prvDeleteTCB+0x56>
	}
 801a4a4:	bf00      	nop
 801a4a6:	3710      	adds	r7, #16
 801a4a8:	46bd      	mov	sp, r7
 801a4aa:	bd80      	pop	{r7, pc}

0801a4ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a4ac:	b480      	push	{r7}
 801a4ae:	b083      	sub	sp, #12
 801a4b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a4b2:	4b0f      	ldr	r3, [pc, #60]	; (801a4f0 <prvResetNextTaskUnblockTime+0x44>)
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d101      	bne.n	801a4c0 <prvResetNextTaskUnblockTime+0x14>
 801a4bc:	2301      	movs	r3, #1
 801a4be:	e000      	b.n	801a4c2 <prvResetNextTaskUnblockTime+0x16>
 801a4c0:	2300      	movs	r3, #0
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d004      	beq.n	801a4d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a4c6:	4b0b      	ldr	r3, [pc, #44]	; (801a4f4 <prvResetNextTaskUnblockTime+0x48>)
 801a4c8:	f04f 32ff 	mov.w	r2, #4294967295
 801a4cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a4ce:	e008      	b.n	801a4e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801a4d0:	4b07      	ldr	r3, [pc, #28]	; (801a4f0 <prvResetNextTaskUnblockTime+0x44>)
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	68db      	ldr	r3, [r3, #12]
 801a4d6:	68db      	ldr	r3, [r3, #12]
 801a4d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	685b      	ldr	r3, [r3, #4]
 801a4de:	4a05      	ldr	r2, [pc, #20]	; (801a4f4 <prvResetNextTaskUnblockTime+0x48>)
 801a4e0:	6013      	str	r3, [r2, #0]
}
 801a4e2:	bf00      	nop
 801a4e4:	370c      	adds	r7, #12
 801a4e6:	46bd      	mov	sp, r7
 801a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ec:	4770      	bx	lr
 801a4ee:	bf00      	nop
 801a4f0:	20000c90 	.word	0x20000c90
 801a4f4:	20000cf8 	.word	0x20000cf8

0801a4f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a4f8:	b480      	push	{r7}
 801a4fa:	b083      	sub	sp, #12
 801a4fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a4fe:	4b0b      	ldr	r3, [pc, #44]	; (801a52c <xTaskGetSchedulerState+0x34>)
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	2b00      	cmp	r3, #0
 801a504:	d102      	bne.n	801a50c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a506:	2301      	movs	r3, #1
 801a508:	607b      	str	r3, [r7, #4]
 801a50a:	e008      	b.n	801a51e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a50c:	4b08      	ldr	r3, [pc, #32]	; (801a530 <xTaskGetSchedulerState+0x38>)
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	2b00      	cmp	r3, #0
 801a512:	d102      	bne.n	801a51a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a514:	2302      	movs	r3, #2
 801a516:	607b      	str	r3, [r7, #4]
 801a518:	e001      	b.n	801a51e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a51a:	2300      	movs	r3, #0
 801a51c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a51e:	687b      	ldr	r3, [r7, #4]
	}
 801a520:	4618      	mov	r0, r3
 801a522:	370c      	adds	r7, #12
 801a524:	46bd      	mov	sp, r7
 801a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a52a:	4770      	bx	lr
 801a52c:	20000ce4 	.word	0x20000ce4
 801a530:	20000d00 	.word	0x20000d00

0801a534 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801a534:	b580      	push	{r7, lr}
 801a536:	b084      	sub	sp, #16
 801a538:	af00      	add	r7, sp, #0
 801a53a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a540:	2300      	movs	r3, #0
 801a542:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	2b00      	cmp	r3, #0
 801a548:	d06e      	beq.n	801a628 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a54a:	68bb      	ldr	r3, [r7, #8]
 801a54c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a54e:	4b39      	ldr	r3, [pc, #228]	; (801a634 <xTaskPriorityInherit+0x100>)
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a554:	429a      	cmp	r2, r3
 801a556:	d25e      	bcs.n	801a616 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a558:	68bb      	ldr	r3, [r7, #8]
 801a55a:	699b      	ldr	r3, [r3, #24]
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	db06      	blt.n	801a56e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a560:	4b34      	ldr	r3, [pc, #208]	; (801a634 <xTaskPriorityInherit+0x100>)
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a566:	f1c3 0207 	rsb	r2, r3, #7
 801a56a:	68bb      	ldr	r3, [r7, #8]
 801a56c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a56e:	68bb      	ldr	r3, [r7, #8]
 801a570:	6959      	ldr	r1, [r3, #20]
 801a572:	68bb      	ldr	r3, [r7, #8]
 801a574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a576:	4613      	mov	r3, r2
 801a578:	009b      	lsls	r3, r3, #2
 801a57a:	4413      	add	r3, r2
 801a57c:	009b      	lsls	r3, r3, #2
 801a57e:	4a2e      	ldr	r2, [pc, #184]	; (801a638 <xTaskPriorityInherit+0x104>)
 801a580:	4413      	add	r3, r2
 801a582:	4299      	cmp	r1, r3
 801a584:	d101      	bne.n	801a58a <xTaskPriorityInherit+0x56>
 801a586:	2301      	movs	r3, #1
 801a588:	e000      	b.n	801a58c <xTaskPriorityInherit+0x58>
 801a58a:	2300      	movs	r3, #0
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	d03a      	beq.n	801a606 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a590:	68bb      	ldr	r3, [r7, #8]
 801a592:	3304      	adds	r3, #4
 801a594:	4618      	mov	r0, r3
 801a596:	f7fe f9ff 	bl	8018998 <uxListRemove>
 801a59a:	4603      	mov	r3, r0
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d115      	bne.n	801a5cc <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801a5a0:	68bb      	ldr	r3, [r7, #8]
 801a5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a5a4:	4924      	ldr	r1, [pc, #144]	; (801a638 <xTaskPriorityInherit+0x104>)
 801a5a6:	4613      	mov	r3, r2
 801a5a8:	009b      	lsls	r3, r3, #2
 801a5aa:	4413      	add	r3, r2
 801a5ac:	009b      	lsls	r3, r3, #2
 801a5ae:	440b      	add	r3, r1
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d10a      	bne.n	801a5cc <xTaskPriorityInherit+0x98>
 801a5b6:	68bb      	ldr	r3, [r7, #8]
 801a5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5ba:	2201      	movs	r2, #1
 801a5bc:	fa02 f303 	lsl.w	r3, r2, r3
 801a5c0:	43da      	mvns	r2, r3
 801a5c2:	4b1e      	ldr	r3, [pc, #120]	; (801a63c <xTaskPriorityInherit+0x108>)
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	4013      	ands	r3, r2
 801a5c8:	4a1c      	ldr	r2, [pc, #112]	; (801a63c <xTaskPriorityInherit+0x108>)
 801a5ca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a5cc:	4b19      	ldr	r3, [pc, #100]	; (801a634 <xTaskPriorityInherit+0x100>)
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a5d2:	68bb      	ldr	r3, [r7, #8]
 801a5d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801a5d6:	68bb      	ldr	r3, [r7, #8]
 801a5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5da:	2201      	movs	r2, #1
 801a5dc:	409a      	lsls	r2, r3
 801a5de:	4b17      	ldr	r3, [pc, #92]	; (801a63c <xTaskPriorityInherit+0x108>)
 801a5e0:	681b      	ldr	r3, [r3, #0]
 801a5e2:	4313      	orrs	r3, r2
 801a5e4:	4a15      	ldr	r2, [pc, #84]	; (801a63c <xTaskPriorityInherit+0x108>)
 801a5e6:	6013      	str	r3, [r2, #0]
 801a5e8:	68bb      	ldr	r3, [r7, #8]
 801a5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a5ec:	4613      	mov	r3, r2
 801a5ee:	009b      	lsls	r3, r3, #2
 801a5f0:	4413      	add	r3, r2
 801a5f2:	009b      	lsls	r3, r3, #2
 801a5f4:	4a10      	ldr	r2, [pc, #64]	; (801a638 <xTaskPriorityInherit+0x104>)
 801a5f6:	441a      	add	r2, r3
 801a5f8:	68bb      	ldr	r3, [r7, #8]
 801a5fa:	3304      	adds	r3, #4
 801a5fc:	4619      	mov	r1, r3
 801a5fe:	4610      	mov	r0, r2
 801a600:	f7fe f96d 	bl	80188de <vListInsertEnd>
 801a604:	e004      	b.n	801a610 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a606:	4b0b      	ldr	r3, [pc, #44]	; (801a634 <xTaskPriorityInherit+0x100>)
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a60c:	68bb      	ldr	r3, [r7, #8]
 801a60e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801a610:	2301      	movs	r3, #1
 801a612:	60fb      	str	r3, [r7, #12]
 801a614:	e008      	b.n	801a628 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801a616:	68bb      	ldr	r3, [r7, #8]
 801a618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a61a:	4b06      	ldr	r3, [pc, #24]	; (801a634 <xTaskPriorityInherit+0x100>)
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a620:	429a      	cmp	r2, r3
 801a622:	d201      	bcs.n	801a628 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801a624:	2301      	movs	r3, #1
 801a626:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a628:	68fb      	ldr	r3, [r7, #12]
	}
 801a62a:	4618      	mov	r0, r3
 801a62c:	3710      	adds	r7, #16
 801a62e:	46bd      	mov	sp, r7
 801a630:	bd80      	pop	{r7, pc}
 801a632:	bf00      	nop
 801a634:	20000bd8 	.word	0x20000bd8
 801a638:	20000bdc 	.word	0x20000bdc
 801a63c:	20000ce0 	.word	0x20000ce0

0801a640 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801a640:	b580      	push	{r7, lr}
 801a642:	b086      	sub	sp, #24
 801a644:	af00      	add	r7, sp, #0
 801a646:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801a64c:	2300      	movs	r3, #0
 801a64e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	2b00      	cmp	r3, #0
 801a654:	d070      	beq.n	801a738 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801a656:	4b3b      	ldr	r3, [pc, #236]	; (801a744 <xTaskPriorityDisinherit+0x104>)
 801a658:	681b      	ldr	r3, [r3, #0]
 801a65a:	693a      	ldr	r2, [r7, #16]
 801a65c:	429a      	cmp	r2, r3
 801a65e:	d00b      	beq.n	801a678 <xTaskPriorityDisinherit+0x38>
 801a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a664:	b672      	cpsid	i
 801a666:	f383 8811 	msr	BASEPRI, r3
 801a66a:	f3bf 8f6f 	isb	sy
 801a66e:	f3bf 8f4f 	dsb	sy
 801a672:	b662      	cpsie	i
 801a674:	60fb      	str	r3, [r7, #12]
 801a676:	e7fe      	b.n	801a676 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 801a678:	693b      	ldr	r3, [r7, #16]
 801a67a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d10b      	bne.n	801a698 <xTaskPriorityDisinherit+0x58>
 801a680:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a684:	b672      	cpsid	i
 801a686:	f383 8811 	msr	BASEPRI, r3
 801a68a:	f3bf 8f6f 	isb	sy
 801a68e:	f3bf 8f4f 	dsb	sy
 801a692:	b662      	cpsie	i
 801a694:	60bb      	str	r3, [r7, #8]
 801a696:	e7fe      	b.n	801a696 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 801a698:	693b      	ldr	r3, [r7, #16]
 801a69a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a69c:	1e5a      	subs	r2, r3, #1
 801a69e:	693b      	ldr	r3, [r7, #16]
 801a6a0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a6a2:	693b      	ldr	r3, [r7, #16]
 801a6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a6a6:	693b      	ldr	r3, [r7, #16]
 801a6a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a6aa:	429a      	cmp	r2, r3
 801a6ac:	d044      	beq.n	801a738 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a6ae:	693b      	ldr	r3, [r7, #16]
 801a6b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d140      	bne.n	801a738 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a6b6:	693b      	ldr	r3, [r7, #16]
 801a6b8:	3304      	adds	r3, #4
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	f7fe f96c 	bl	8018998 <uxListRemove>
 801a6c0:	4603      	mov	r3, r0
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d115      	bne.n	801a6f2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801a6c6:	693b      	ldr	r3, [r7, #16]
 801a6c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a6ca:	491f      	ldr	r1, [pc, #124]	; (801a748 <xTaskPriorityDisinherit+0x108>)
 801a6cc:	4613      	mov	r3, r2
 801a6ce:	009b      	lsls	r3, r3, #2
 801a6d0:	4413      	add	r3, r2
 801a6d2:	009b      	lsls	r3, r3, #2
 801a6d4:	440b      	add	r3, r1
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	d10a      	bne.n	801a6f2 <xTaskPriorityDisinherit+0xb2>
 801a6dc:	693b      	ldr	r3, [r7, #16]
 801a6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6e0:	2201      	movs	r2, #1
 801a6e2:	fa02 f303 	lsl.w	r3, r2, r3
 801a6e6:	43da      	mvns	r2, r3
 801a6e8:	4b18      	ldr	r3, [pc, #96]	; (801a74c <xTaskPriorityDisinherit+0x10c>)
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	4013      	ands	r3, r2
 801a6ee:	4a17      	ldr	r2, [pc, #92]	; (801a74c <xTaskPriorityDisinherit+0x10c>)
 801a6f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a6f2:	693b      	ldr	r3, [r7, #16]
 801a6f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a6f6:	693b      	ldr	r3, [r7, #16]
 801a6f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a6fa:	693b      	ldr	r3, [r7, #16]
 801a6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6fe:	f1c3 0207 	rsb	r2, r3, #7
 801a702:	693b      	ldr	r3, [r7, #16]
 801a704:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801a706:	693b      	ldr	r3, [r7, #16]
 801a708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a70a:	2201      	movs	r2, #1
 801a70c:	409a      	lsls	r2, r3
 801a70e:	4b0f      	ldr	r3, [pc, #60]	; (801a74c <xTaskPriorityDisinherit+0x10c>)
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	4313      	orrs	r3, r2
 801a714:	4a0d      	ldr	r2, [pc, #52]	; (801a74c <xTaskPriorityDisinherit+0x10c>)
 801a716:	6013      	str	r3, [r2, #0]
 801a718:	693b      	ldr	r3, [r7, #16]
 801a71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a71c:	4613      	mov	r3, r2
 801a71e:	009b      	lsls	r3, r3, #2
 801a720:	4413      	add	r3, r2
 801a722:	009b      	lsls	r3, r3, #2
 801a724:	4a08      	ldr	r2, [pc, #32]	; (801a748 <xTaskPriorityDisinherit+0x108>)
 801a726:	441a      	add	r2, r3
 801a728:	693b      	ldr	r3, [r7, #16]
 801a72a:	3304      	adds	r3, #4
 801a72c:	4619      	mov	r1, r3
 801a72e:	4610      	mov	r0, r2
 801a730:	f7fe f8d5 	bl	80188de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801a734:	2301      	movs	r3, #1
 801a736:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a738:	697b      	ldr	r3, [r7, #20]
	}
 801a73a:	4618      	mov	r0, r3
 801a73c:	3718      	adds	r7, #24
 801a73e:	46bd      	mov	sp, r7
 801a740:	bd80      	pop	{r7, pc}
 801a742:	bf00      	nop
 801a744:	20000bd8 	.word	0x20000bd8
 801a748:	20000bdc 	.word	0x20000bdc
 801a74c:	20000ce0 	.word	0x20000ce0

0801a750 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801a750:	b580      	push	{r7, lr}
 801a752:	b088      	sub	sp, #32
 801a754:	af00      	add	r7, sp, #0
 801a756:	6078      	str	r0, [r7, #4]
 801a758:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801a75e:	2301      	movs	r3, #1
 801a760:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	2b00      	cmp	r3, #0
 801a766:	f000 808a 	beq.w	801a87e <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801a76a:	69bb      	ldr	r3, [r7, #24]
 801a76c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d10b      	bne.n	801a78a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 801a772:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a776:	b672      	cpsid	i
 801a778:	f383 8811 	msr	BASEPRI, r3
 801a77c:	f3bf 8f6f 	isb	sy
 801a780:	f3bf 8f4f 	dsb	sy
 801a784:	b662      	cpsie	i
 801a786:	60fb      	str	r3, [r7, #12]
 801a788:	e7fe      	b.n	801a788 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801a78a:	69bb      	ldr	r3, [r7, #24]
 801a78c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a78e:	683a      	ldr	r2, [r7, #0]
 801a790:	429a      	cmp	r2, r3
 801a792:	d902      	bls.n	801a79a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801a794:	683b      	ldr	r3, [r7, #0]
 801a796:	61fb      	str	r3, [r7, #28]
 801a798:	e002      	b.n	801a7a0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801a79a:	69bb      	ldr	r3, [r7, #24]
 801a79c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a79e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801a7a0:	69bb      	ldr	r3, [r7, #24]
 801a7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a7a4:	69fa      	ldr	r2, [r7, #28]
 801a7a6:	429a      	cmp	r2, r3
 801a7a8:	d069      	beq.n	801a87e <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801a7aa:	69bb      	ldr	r3, [r7, #24]
 801a7ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a7ae:	697a      	ldr	r2, [r7, #20]
 801a7b0:	429a      	cmp	r2, r3
 801a7b2:	d164      	bne.n	801a87e <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801a7b4:	4b34      	ldr	r3, [pc, #208]	; (801a888 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801a7b6:	681b      	ldr	r3, [r3, #0]
 801a7b8:	69ba      	ldr	r2, [r7, #24]
 801a7ba:	429a      	cmp	r2, r3
 801a7bc:	d10b      	bne.n	801a7d6 <vTaskPriorityDisinheritAfterTimeout+0x86>
 801a7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7c2:	b672      	cpsid	i
 801a7c4:	f383 8811 	msr	BASEPRI, r3
 801a7c8:	f3bf 8f6f 	isb	sy
 801a7cc:	f3bf 8f4f 	dsb	sy
 801a7d0:	b662      	cpsie	i
 801a7d2:	60bb      	str	r3, [r7, #8]
 801a7d4:	e7fe      	b.n	801a7d4 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801a7d6:	69bb      	ldr	r3, [r7, #24]
 801a7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a7da:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801a7dc:	69bb      	ldr	r3, [r7, #24]
 801a7de:	69fa      	ldr	r2, [r7, #28]
 801a7e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a7e2:	69bb      	ldr	r3, [r7, #24]
 801a7e4:	699b      	ldr	r3, [r3, #24]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	db04      	blt.n	801a7f4 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a7ea:	69fb      	ldr	r3, [r7, #28]
 801a7ec:	f1c3 0207 	rsb	r2, r3, #7
 801a7f0:	69bb      	ldr	r3, [r7, #24]
 801a7f2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a7f4:	69bb      	ldr	r3, [r7, #24]
 801a7f6:	6959      	ldr	r1, [r3, #20]
 801a7f8:	693a      	ldr	r2, [r7, #16]
 801a7fa:	4613      	mov	r3, r2
 801a7fc:	009b      	lsls	r3, r3, #2
 801a7fe:	4413      	add	r3, r2
 801a800:	009b      	lsls	r3, r3, #2
 801a802:	4a22      	ldr	r2, [pc, #136]	; (801a88c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801a804:	4413      	add	r3, r2
 801a806:	4299      	cmp	r1, r3
 801a808:	d101      	bne.n	801a80e <vTaskPriorityDisinheritAfterTimeout+0xbe>
 801a80a:	2301      	movs	r3, #1
 801a80c:	e000      	b.n	801a810 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 801a80e:	2300      	movs	r3, #0
 801a810:	2b00      	cmp	r3, #0
 801a812:	d034      	beq.n	801a87e <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a814:	69bb      	ldr	r3, [r7, #24]
 801a816:	3304      	adds	r3, #4
 801a818:	4618      	mov	r0, r3
 801a81a:	f7fe f8bd 	bl	8018998 <uxListRemove>
 801a81e:	4603      	mov	r3, r0
 801a820:	2b00      	cmp	r3, #0
 801a822:	d115      	bne.n	801a850 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801a824:	69bb      	ldr	r3, [r7, #24]
 801a826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a828:	4918      	ldr	r1, [pc, #96]	; (801a88c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801a82a:	4613      	mov	r3, r2
 801a82c:	009b      	lsls	r3, r3, #2
 801a82e:	4413      	add	r3, r2
 801a830:	009b      	lsls	r3, r3, #2
 801a832:	440b      	add	r3, r1
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	2b00      	cmp	r3, #0
 801a838:	d10a      	bne.n	801a850 <vTaskPriorityDisinheritAfterTimeout+0x100>
 801a83a:	69bb      	ldr	r3, [r7, #24]
 801a83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a83e:	2201      	movs	r2, #1
 801a840:	fa02 f303 	lsl.w	r3, r2, r3
 801a844:	43da      	mvns	r2, r3
 801a846:	4b12      	ldr	r3, [pc, #72]	; (801a890 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	4013      	ands	r3, r2
 801a84c:	4a10      	ldr	r2, [pc, #64]	; (801a890 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801a84e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801a850:	69bb      	ldr	r3, [r7, #24]
 801a852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a854:	2201      	movs	r2, #1
 801a856:	409a      	lsls	r2, r3
 801a858:	4b0d      	ldr	r3, [pc, #52]	; (801a890 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	4313      	orrs	r3, r2
 801a85e:	4a0c      	ldr	r2, [pc, #48]	; (801a890 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801a860:	6013      	str	r3, [r2, #0]
 801a862:	69bb      	ldr	r3, [r7, #24]
 801a864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a866:	4613      	mov	r3, r2
 801a868:	009b      	lsls	r3, r3, #2
 801a86a:	4413      	add	r3, r2
 801a86c:	009b      	lsls	r3, r3, #2
 801a86e:	4a07      	ldr	r2, [pc, #28]	; (801a88c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801a870:	441a      	add	r2, r3
 801a872:	69bb      	ldr	r3, [r7, #24]
 801a874:	3304      	adds	r3, #4
 801a876:	4619      	mov	r1, r3
 801a878:	4610      	mov	r0, r2
 801a87a:	f7fe f830 	bl	80188de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a87e:	bf00      	nop
 801a880:	3720      	adds	r7, #32
 801a882:	46bd      	mov	sp, r7
 801a884:	bd80      	pop	{r7, pc}
 801a886:	bf00      	nop
 801a888:	20000bd8 	.word	0x20000bd8
 801a88c:	20000bdc 	.word	0x20000bdc
 801a890:	20000ce0 	.word	0x20000ce0

0801a894 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 801a894:	b480      	push	{r7}
 801a896:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801a898:	4b07      	ldr	r3, [pc, #28]	; (801a8b8 <pvTaskIncrementMutexHeldCount+0x24>)
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d004      	beq.n	801a8aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801a8a0:	4b05      	ldr	r3, [pc, #20]	; (801a8b8 <pvTaskIncrementMutexHeldCount+0x24>)
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801a8a6:	3201      	adds	r2, #1
 801a8a8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801a8aa:	4b03      	ldr	r3, [pc, #12]	; (801a8b8 <pvTaskIncrementMutexHeldCount+0x24>)
 801a8ac:	681b      	ldr	r3, [r3, #0]
	}
 801a8ae:	4618      	mov	r0, r3
 801a8b0:	46bd      	mov	sp, r7
 801a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8b6:	4770      	bx	lr
 801a8b8:	20000bd8 	.word	0x20000bd8

0801a8bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801a8bc:	b580      	push	{r7, lr}
 801a8be:	b084      	sub	sp, #16
 801a8c0:	af00      	add	r7, sp, #0
 801a8c2:	6078      	str	r0, [r7, #4]
 801a8c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801a8c6:	4b29      	ldr	r3, [pc, #164]	; (801a96c <prvAddCurrentTaskToDelayedList+0xb0>)
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a8cc:	4b28      	ldr	r3, [pc, #160]	; (801a970 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	3304      	adds	r3, #4
 801a8d2:	4618      	mov	r0, r3
 801a8d4:	f7fe f860 	bl	8018998 <uxListRemove>
 801a8d8:	4603      	mov	r3, r0
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	d10b      	bne.n	801a8f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801a8de:	4b24      	ldr	r3, [pc, #144]	; (801a970 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8e4:	2201      	movs	r2, #1
 801a8e6:	fa02 f303 	lsl.w	r3, r2, r3
 801a8ea:	43da      	mvns	r2, r3
 801a8ec:	4b21      	ldr	r3, [pc, #132]	; (801a974 <prvAddCurrentTaskToDelayedList+0xb8>)
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	4013      	ands	r3, r2
 801a8f2:	4a20      	ldr	r2, [pc, #128]	; (801a974 <prvAddCurrentTaskToDelayedList+0xb8>)
 801a8f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a8fc:	d10a      	bne.n	801a914 <prvAddCurrentTaskToDelayedList+0x58>
 801a8fe:	683b      	ldr	r3, [r7, #0]
 801a900:	2b00      	cmp	r3, #0
 801a902:	d007      	beq.n	801a914 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a904:	4b1a      	ldr	r3, [pc, #104]	; (801a970 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	3304      	adds	r3, #4
 801a90a:	4619      	mov	r1, r3
 801a90c:	481a      	ldr	r0, [pc, #104]	; (801a978 <prvAddCurrentTaskToDelayedList+0xbc>)
 801a90e:	f7fd ffe6 	bl	80188de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801a912:	e026      	b.n	801a962 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801a914:	68fa      	ldr	r2, [r7, #12]
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	4413      	add	r3, r2
 801a91a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801a91c:	4b14      	ldr	r3, [pc, #80]	; (801a970 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	68ba      	ldr	r2, [r7, #8]
 801a922:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801a924:	68ba      	ldr	r2, [r7, #8]
 801a926:	68fb      	ldr	r3, [r7, #12]
 801a928:	429a      	cmp	r2, r3
 801a92a:	d209      	bcs.n	801a940 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a92c:	4b13      	ldr	r3, [pc, #76]	; (801a97c <prvAddCurrentTaskToDelayedList+0xc0>)
 801a92e:	681a      	ldr	r2, [r3, #0]
 801a930:	4b0f      	ldr	r3, [pc, #60]	; (801a970 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	3304      	adds	r3, #4
 801a936:	4619      	mov	r1, r3
 801a938:	4610      	mov	r0, r2
 801a93a:	f7fd fff4 	bl	8018926 <vListInsert>
}
 801a93e:	e010      	b.n	801a962 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a940:	4b0f      	ldr	r3, [pc, #60]	; (801a980 <prvAddCurrentTaskToDelayedList+0xc4>)
 801a942:	681a      	ldr	r2, [r3, #0]
 801a944:	4b0a      	ldr	r3, [pc, #40]	; (801a970 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	3304      	adds	r3, #4
 801a94a:	4619      	mov	r1, r3
 801a94c:	4610      	mov	r0, r2
 801a94e:	f7fd ffea 	bl	8018926 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801a952:	4b0c      	ldr	r3, [pc, #48]	; (801a984 <prvAddCurrentTaskToDelayedList+0xc8>)
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	68ba      	ldr	r2, [r7, #8]
 801a958:	429a      	cmp	r2, r3
 801a95a:	d202      	bcs.n	801a962 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801a95c:	4a09      	ldr	r2, [pc, #36]	; (801a984 <prvAddCurrentTaskToDelayedList+0xc8>)
 801a95e:	68bb      	ldr	r3, [r7, #8]
 801a960:	6013      	str	r3, [r2, #0]
}
 801a962:	bf00      	nop
 801a964:	3710      	adds	r7, #16
 801a966:	46bd      	mov	sp, r7
 801a968:	bd80      	pop	{r7, pc}
 801a96a:	bf00      	nop
 801a96c:	20000cdc 	.word	0x20000cdc
 801a970:	20000bd8 	.word	0x20000bd8
 801a974:	20000ce0 	.word	0x20000ce0
 801a978:	20000cc4 	.word	0x20000cc4
 801a97c:	20000c94 	.word	0x20000c94
 801a980:	20000c90 	.word	0x20000c90
 801a984:	20000cf8 	.word	0x20000cf8

0801a988 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801a988:	b480      	push	{r7}
 801a98a:	b085      	sub	sp, #20
 801a98c:	af00      	add	r7, sp, #0
 801a98e:	60f8      	str	r0, [r7, #12]
 801a990:	60b9      	str	r1, [r7, #8]
 801a992:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801a994:	68fb      	ldr	r3, [r7, #12]
 801a996:	3b04      	subs	r3, #4
 801a998:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a99a:	68fb      	ldr	r3, [r7, #12]
 801a99c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801a9a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	3b04      	subs	r3, #4
 801a9a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801a9a8:	68bb      	ldr	r3, [r7, #8]
 801a9aa:	f023 0201 	bic.w	r2, r3, #1
 801a9ae:	68fb      	ldr	r3, [r7, #12]
 801a9b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a9b2:	68fb      	ldr	r3, [r7, #12]
 801a9b4:	3b04      	subs	r3, #4
 801a9b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a9b8:	4a0c      	ldr	r2, [pc, #48]	; (801a9ec <pxPortInitialiseStack+0x64>)
 801a9ba:	68fb      	ldr	r3, [r7, #12]
 801a9bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801a9be:	68fb      	ldr	r3, [r7, #12]
 801a9c0:	3b14      	subs	r3, #20
 801a9c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a9c4:	687a      	ldr	r2, [r7, #4]
 801a9c6:	68fb      	ldr	r3, [r7, #12]
 801a9c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801a9ca:	68fb      	ldr	r3, [r7, #12]
 801a9cc:	3b04      	subs	r3, #4
 801a9ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801a9d0:	68fb      	ldr	r3, [r7, #12]
 801a9d2:	f06f 0202 	mvn.w	r2, #2
 801a9d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801a9d8:	68fb      	ldr	r3, [r7, #12]
 801a9da:	3b20      	subs	r3, #32
 801a9dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801a9de:	68fb      	ldr	r3, [r7, #12]
}
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	3714      	adds	r7, #20
 801a9e4:	46bd      	mov	sp, r7
 801a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ea:	4770      	bx	lr
 801a9ec:	0801a9f1 	.word	0x0801a9f1

0801a9f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a9f0:	b480      	push	{r7}
 801a9f2:	b085      	sub	sp, #20
 801a9f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801a9f6:	2300      	movs	r3, #0
 801a9f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a9fa:	4b13      	ldr	r3, [pc, #76]	; (801aa48 <prvTaskExitError+0x58>)
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa02:	d00b      	beq.n	801aa1c <prvTaskExitError+0x2c>
 801aa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa08:	b672      	cpsid	i
 801aa0a:	f383 8811 	msr	BASEPRI, r3
 801aa0e:	f3bf 8f6f 	isb	sy
 801aa12:	f3bf 8f4f 	dsb	sy
 801aa16:	b662      	cpsie	i
 801aa18:	60fb      	str	r3, [r7, #12]
 801aa1a:	e7fe      	b.n	801aa1a <prvTaskExitError+0x2a>
 801aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa20:	b672      	cpsid	i
 801aa22:	f383 8811 	msr	BASEPRI, r3
 801aa26:	f3bf 8f6f 	isb	sy
 801aa2a:	f3bf 8f4f 	dsb	sy
 801aa2e:	b662      	cpsie	i
 801aa30:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801aa32:	bf00      	nop
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d0fc      	beq.n	801aa34 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801aa3a:	bf00      	nop
 801aa3c:	3714      	adds	r7, #20
 801aa3e:	46bd      	mov	sp, r7
 801aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa44:	4770      	bx	lr
 801aa46:	bf00      	nop
 801aa48:	20000054 	.word	0x20000054
 801aa4c:	00000000 	.word	0x00000000

0801aa50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801aa50:	4b07      	ldr	r3, [pc, #28]	; (801aa70 <pxCurrentTCBConst2>)
 801aa52:	6819      	ldr	r1, [r3, #0]
 801aa54:	6808      	ldr	r0, [r1, #0]
 801aa56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa5a:	f380 8809 	msr	PSP, r0
 801aa5e:	f3bf 8f6f 	isb	sy
 801aa62:	f04f 0000 	mov.w	r0, #0
 801aa66:	f380 8811 	msr	BASEPRI, r0
 801aa6a:	4770      	bx	lr
 801aa6c:	f3af 8000 	nop.w

0801aa70 <pxCurrentTCBConst2>:
 801aa70:	20000bd8 	.word	0x20000bd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801aa74:	bf00      	nop
 801aa76:	bf00      	nop

0801aa78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801aa78:	4808      	ldr	r0, [pc, #32]	; (801aa9c <prvPortStartFirstTask+0x24>)
 801aa7a:	6800      	ldr	r0, [r0, #0]
 801aa7c:	6800      	ldr	r0, [r0, #0]
 801aa7e:	f380 8808 	msr	MSP, r0
 801aa82:	f04f 0000 	mov.w	r0, #0
 801aa86:	f380 8814 	msr	CONTROL, r0
 801aa8a:	b662      	cpsie	i
 801aa8c:	b661      	cpsie	f
 801aa8e:	f3bf 8f4f 	dsb	sy
 801aa92:	f3bf 8f6f 	isb	sy
 801aa96:	df00      	svc	0
 801aa98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801aa9a:	bf00      	nop
 801aa9c:	e000ed08 	.word	0xe000ed08

0801aaa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	b084      	sub	sp, #16
 801aaa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801aaa6:	4b36      	ldr	r3, [pc, #216]	; (801ab80 <xPortStartScheduler+0xe0>)
 801aaa8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	781b      	ldrb	r3, [r3, #0]
 801aaae:	b2db      	uxtb	r3, r3
 801aab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801aab2:	68fb      	ldr	r3, [r7, #12]
 801aab4:	22ff      	movs	r2, #255	; 0xff
 801aab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	781b      	ldrb	r3, [r3, #0]
 801aabc:	b2db      	uxtb	r3, r3
 801aabe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801aac0:	78fb      	ldrb	r3, [r7, #3]
 801aac2:	b2db      	uxtb	r3, r3
 801aac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801aac8:	b2da      	uxtb	r2, r3
 801aaca:	4b2e      	ldr	r3, [pc, #184]	; (801ab84 <xPortStartScheduler+0xe4>)
 801aacc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801aace:	4b2e      	ldr	r3, [pc, #184]	; (801ab88 <xPortStartScheduler+0xe8>)
 801aad0:	2207      	movs	r2, #7
 801aad2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801aad4:	e009      	b.n	801aaea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801aad6:	4b2c      	ldr	r3, [pc, #176]	; (801ab88 <xPortStartScheduler+0xe8>)
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	3b01      	subs	r3, #1
 801aadc:	4a2a      	ldr	r2, [pc, #168]	; (801ab88 <xPortStartScheduler+0xe8>)
 801aade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801aae0:	78fb      	ldrb	r3, [r7, #3]
 801aae2:	b2db      	uxtb	r3, r3
 801aae4:	005b      	lsls	r3, r3, #1
 801aae6:	b2db      	uxtb	r3, r3
 801aae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801aaea:	78fb      	ldrb	r3, [r7, #3]
 801aaec:	b2db      	uxtb	r3, r3
 801aaee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801aaf2:	2b80      	cmp	r3, #128	; 0x80
 801aaf4:	d0ef      	beq.n	801aad6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801aaf6:	4b24      	ldr	r3, [pc, #144]	; (801ab88 <xPortStartScheduler+0xe8>)
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	f1c3 0307 	rsb	r3, r3, #7
 801aafe:	2b04      	cmp	r3, #4
 801ab00:	d00b      	beq.n	801ab1a <xPortStartScheduler+0x7a>
 801ab02:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab06:	b672      	cpsid	i
 801ab08:	f383 8811 	msr	BASEPRI, r3
 801ab0c:	f3bf 8f6f 	isb	sy
 801ab10:	f3bf 8f4f 	dsb	sy
 801ab14:	b662      	cpsie	i
 801ab16:	60bb      	str	r3, [r7, #8]
 801ab18:	e7fe      	b.n	801ab18 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801ab1a:	4b1b      	ldr	r3, [pc, #108]	; (801ab88 <xPortStartScheduler+0xe8>)
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	021b      	lsls	r3, r3, #8
 801ab20:	4a19      	ldr	r2, [pc, #100]	; (801ab88 <xPortStartScheduler+0xe8>)
 801ab22:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801ab24:	4b18      	ldr	r3, [pc, #96]	; (801ab88 <xPortStartScheduler+0xe8>)
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801ab2c:	4a16      	ldr	r2, [pc, #88]	; (801ab88 <xPortStartScheduler+0xe8>)
 801ab2e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	b2da      	uxtb	r2, r3
 801ab34:	68fb      	ldr	r3, [r7, #12]
 801ab36:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801ab38:	4b14      	ldr	r3, [pc, #80]	; (801ab8c <xPortStartScheduler+0xec>)
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	4a13      	ldr	r2, [pc, #76]	; (801ab8c <xPortStartScheduler+0xec>)
 801ab3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801ab42:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801ab44:	4b11      	ldr	r3, [pc, #68]	; (801ab8c <xPortStartScheduler+0xec>)
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	4a10      	ldr	r2, [pc, #64]	; (801ab8c <xPortStartScheduler+0xec>)
 801ab4a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801ab4e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801ab50:	f000 f8d4 	bl	801acfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801ab54:	4b0e      	ldr	r3, [pc, #56]	; (801ab90 <xPortStartScheduler+0xf0>)
 801ab56:	2200      	movs	r2, #0
 801ab58:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801ab5a:	f000 f8f3 	bl	801ad44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801ab5e:	4b0d      	ldr	r3, [pc, #52]	; (801ab94 <xPortStartScheduler+0xf4>)
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	4a0c      	ldr	r2, [pc, #48]	; (801ab94 <xPortStartScheduler+0xf4>)
 801ab64:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801ab68:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801ab6a:	f7ff ff85 	bl	801aa78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801ab6e:	f7ff fa49 	bl	801a004 <vTaskSwitchContext>
	prvTaskExitError();
 801ab72:	f7ff ff3d 	bl	801a9f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801ab76:	2300      	movs	r3, #0
}
 801ab78:	4618      	mov	r0, r3
 801ab7a:	3710      	adds	r7, #16
 801ab7c:	46bd      	mov	sp, r7
 801ab7e:	bd80      	pop	{r7, pc}
 801ab80:	e000e400 	.word	0xe000e400
 801ab84:	20000d04 	.word	0x20000d04
 801ab88:	20000d08 	.word	0x20000d08
 801ab8c:	e000ed20 	.word	0xe000ed20
 801ab90:	20000054 	.word	0x20000054
 801ab94:	e000ef34 	.word	0xe000ef34

0801ab98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801ab98:	b480      	push	{r7}
 801ab9a:	b083      	sub	sp, #12
 801ab9c:	af00      	add	r7, sp, #0
 801ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aba2:	b672      	cpsid	i
 801aba4:	f383 8811 	msr	BASEPRI, r3
 801aba8:	f3bf 8f6f 	isb	sy
 801abac:	f3bf 8f4f 	dsb	sy
 801abb0:	b662      	cpsie	i
 801abb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801abb4:	4b0f      	ldr	r3, [pc, #60]	; (801abf4 <vPortEnterCritical+0x5c>)
 801abb6:	681b      	ldr	r3, [r3, #0]
 801abb8:	3301      	adds	r3, #1
 801abba:	4a0e      	ldr	r2, [pc, #56]	; (801abf4 <vPortEnterCritical+0x5c>)
 801abbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801abbe:	4b0d      	ldr	r3, [pc, #52]	; (801abf4 <vPortEnterCritical+0x5c>)
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	2b01      	cmp	r3, #1
 801abc4:	d110      	bne.n	801abe8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801abc6:	4b0c      	ldr	r3, [pc, #48]	; (801abf8 <vPortEnterCritical+0x60>)
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	b2db      	uxtb	r3, r3
 801abcc:	2b00      	cmp	r3, #0
 801abce:	d00b      	beq.n	801abe8 <vPortEnterCritical+0x50>
 801abd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801abd4:	b672      	cpsid	i
 801abd6:	f383 8811 	msr	BASEPRI, r3
 801abda:	f3bf 8f6f 	isb	sy
 801abde:	f3bf 8f4f 	dsb	sy
 801abe2:	b662      	cpsie	i
 801abe4:	603b      	str	r3, [r7, #0]
 801abe6:	e7fe      	b.n	801abe6 <vPortEnterCritical+0x4e>
	}
}
 801abe8:	bf00      	nop
 801abea:	370c      	adds	r7, #12
 801abec:	46bd      	mov	sp, r7
 801abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abf2:	4770      	bx	lr
 801abf4:	20000054 	.word	0x20000054
 801abf8:	e000ed04 	.word	0xe000ed04

0801abfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801abfc:	b480      	push	{r7}
 801abfe:	b083      	sub	sp, #12
 801ac00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801ac02:	4b12      	ldr	r3, [pc, #72]	; (801ac4c <vPortExitCritical+0x50>)
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	2b00      	cmp	r3, #0
 801ac08:	d10b      	bne.n	801ac22 <vPortExitCritical+0x26>
 801ac0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac0e:	b672      	cpsid	i
 801ac10:	f383 8811 	msr	BASEPRI, r3
 801ac14:	f3bf 8f6f 	isb	sy
 801ac18:	f3bf 8f4f 	dsb	sy
 801ac1c:	b662      	cpsie	i
 801ac1e:	607b      	str	r3, [r7, #4]
 801ac20:	e7fe      	b.n	801ac20 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 801ac22:	4b0a      	ldr	r3, [pc, #40]	; (801ac4c <vPortExitCritical+0x50>)
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	3b01      	subs	r3, #1
 801ac28:	4a08      	ldr	r2, [pc, #32]	; (801ac4c <vPortExitCritical+0x50>)
 801ac2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801ac2c:	4b07      	ldr	r3, [pc, #28]	; (801ac4c <vPortExitCritical+0x50>)
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	d104      	bne.n	801ac3e <vPortExitCritical+0x42>
 801ac34:	2300      	movs	r3, #0
 801ac36:	603b      	str	r3, [r7, #0]
	__asm volatile
 801ac38:	683b      	ldr	r3, [r7, #0]
 801ac3a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801ac3e:	bf00      	nop
 801ac40:	370c      	adds	r7, #12
 801ac42:	46bd      	mov	sp, r7
 801ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac48:	4770      	bx	lr
 801ac4a:	bf00      	nop
 801ac4c:	20000054 	.word	0x20000054

0801ac50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801ac50:	f3ef 8009 	mrs	r0, PSP
 801ac54:	f3bf 8f6f 	isb	sy
 801ac58:	4b15      	ldr	r3, [pc, #84]	; (801acb0 <pxCurrentTCBConst>)
 801ac5a:	681a      	ldr	r2, [r3, #0]
 801ac5c:	f01e 0f10 	tst.w	lr, #16
 801ac60:	bf08      	it	eq
 801ac62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801ac66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac6a:	6010      	str	r0, [r2, #0]
 801ac6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801ac70:	f04f 0050 	mov.w	r0, #80	; 0x50
 801ac74:	b672      	cpsid	i
 801ac76:	f380 8811 	msr	BASEPRI, r0
 801ac7a:	f3bf 8f4f 	dsb	sy
 801ac7e:	f3bf 8f6f 	isb	sy
 801ac82:	b662      	cpsie	i
 801ac84:	f7ff f9be 	bl	801a004 <vTaskSwitchContext>
 801ac88:	f04f 0000 	mov.w	r0, #0
 801ac8c:	f380 8811 	msr	BASEPRI, r0
 801ac90:	bc09      	pop	{r0, r3}
 801ac92:	6819      	ldr	r1, [r3, #0]
 801ac94:	6808      	ldr	r0, [r1, #0]
 801ac96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac9a:	f01e 0f10 	tst.w	lr, #16
 801ac9e:	bf08      	it	eq
 801aca0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801aca4:	f380 8809 	msr	PSP, r0
 801aca8:	f3bf 8f6f 	isb	sy
 801acac:	4770      	bx	lr
 801acae:	bf00      	nop

0801acb0 <pxCurrentTCBConst>:
 801acb0:	20000bd8 	.word	0x20000bd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801acb4:	bf00      	nop
 801acb6:	bf00      	nop

0801acb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801acb8:	b580      	push	{r7, lr}
 801acba:	b082      	sub	sp, #8
 801acbc:	af00      	add	r7, sp, #0
	__asm volatile
 801acbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801acc2:	b672      	cpsid	i
 801acc4:	f383 8811 	msr	BASEPRI, r3
 801acc8:	f3bf 8f6f 	isb	sy
 801accc:	f3bf 8f4f 	dsb	sy
 801acd0:	b662      	cpsie	i
 801acd2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801acd4:	f7ff f89a 	bl	8019e0c <xTaskIncrementTick>
 801acd8:	4603      	mov	r3, r0
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d003      	beq.n	801ace6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801acde:	4b06      	ldr	r3, [pc, #24]	; (801acf8 <SysTick_Handler+0x40>)
 801ace0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ace4:	601a      	str	r2, [r3, #0]
 801ace6:	2300      	movs	r3, #0
 801ace8:	603b      	str	r3, [r7, #0]
	__asm volatile
 801acea:	683b      	ldr	r3, [r7, #0]
 801acec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801acf0:	bf00      	nop
 801acf2:	3708      	adds	r7, #8
 801acf4:	46bd      	mov	sp, r7
 801acf6:	bd80      	pop	{r7, pc}
 801acf8:	e000ed04 	.word	0xe000ed04

0801acfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801acfc:	b480      	push	{r7}
 801acfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801ad00:	4b0b      	ldr	r3, [pc, #44]	; (801ad30 <vPortSetupTimerInterrupt+0x34>)
 801ad02:	2200      	movs	r2, #0
 801ad04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801ad06:	4b0b      	ldr	r3, [pc, #44]	; (801ad34 <vPortSetupTimerInterrupt+0x38>)
 801ad08:	2200      	movs	r2, #0
 801ad0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801ad0c:	4b0a      	ldr	r3, [pc, #40]	; (801ad38 <vPortSetupTimerInterrupt+0x3c>)
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	4a0a      	ldr	r2, [pc, #40]	; (801ad3c <vPortSetupTimerInterrupt+0x40>)
 801ad12:	fba2 2303 	umull	r2, r3, r2, r3
 801ad16:	099b      	lsrs	r3, r3, #6
 801ad18:	4a09      	ldr	r2, [pc, #36]	; (801ad40 <vPortSetupTimerInterrupt+0x44>)
 801ad1a:	3b01      	subs	r3, #1
 801ad1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801ad1e:	4b04      	ldr	r3, [pc, #16]	; (801ad30 <vPortSetupTimerInterrupt+0x34>)
 801ad20:	2207      	movs	r2, #7
 801ad22:	601a      	str	r2, [r3, #0]
}
 801ad24:	bf00      	nop
 801ad26:	46bd      	mov	sp, r7
 801ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad2c:	4770      	bx	lr
 801ad2e:	bf00      	nop
 801ad30:	e000e010 	.word	0xe000e010
 801ad34:	e000e018 	.word	0xe000e018
 801ad38:	20000000 	.word	0x20000000
 801ad3c:	10624dd3 	.word	0x10624dd3
 801ad40:	e000e014 	.word	0xe000e014

0801ad44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801ad44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801ad54 <vPortEnableVFP+0x10>
 801ad48:	6801      	ldr	r1, [r0, #0]
 801ad4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801ad4e:	6001      	str	r1, [r0, #0]
 801ad50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801ad52:	bf00      	nop
 801ad54:	e000ed88 	.word	0xe000ed88

0801ad58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801ad58:	b480      	push	{r7}
 801ad5a:	b085      	sub	sp, #20
 801ad5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801ad5e:	f3ef 8305 	mrs	r3, IPSR
 801ad62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	2b0f      	cmp	r3, #15
 801ad68:	d915      	bls.n	801ad96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801ad6a:	4a18      	ldr	r2, [pc, #96]	; (801adcc <vPortValidateInterruptPriority+0x74>)
 801ad6c:	68fb      	ldr	r3, [r7, #12]
 801ad6e:	4413      	add	r3, r2
 801ad70:	781b      	ldrb	r3, [r3, #0]
 801ad72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801ad74:	4b16      	ldr	r3, [pc, #88]	; (801add0 <vPortValidateInterruptPriority+0x78>)
 801ad76:	781b      	ldrb	r3, [r3, #0]
 801ad78:	7afa      	ldrb	r2, [r7, #11]
 801ad7a:	429a      	cmp	r2, r3
 801ad7c:	d20b      	bcs.n	801ad96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801ad7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad82:	b672      	cpsid	i
 801ad84:	f383 8811 	msr	BASEPRI, r3
 801ad88:	f3bf 8f6f 	isb	sy
 801ad8c:	f3bf 8f4f 	dsb	sy
 801ad90:	b662      	cpsie	i
 801ad92:	607b      	str	r3, [r7, #4]
 801ad94:	e7fe      	b.n	801ad94 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801ad96:	4b0f      	ldr	r3, [pc, #60]	; (801add4 <vPortValidateInterruptPriority+0x7c>)
 801ad98:	681b      	ldr	r3, [r3, #0]
 801ad9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801ad9e:	4b0e      	ldr	r3, [pc, #56]	; (801add8 <vPortValidateInterruptPriority+0x80>)
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	429a      	cmp	r2, r3
 801ada4:	d90b      	bls.n	801adbe <vPortValidateInterruptPriority+0x66>
 801ada6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801adaa:	b672      	cpsid	i
 801adac:	f383 8811 	msr	BASEPRI, r3
 801adb0:	f3bf 8f6f 	isb	sy
 801adb4:	f3bf 8f4f 	dsb	sy
 801adb8:	b662      	cpsie	i
 801adba:	603b      	str	r3, [r7, #0]
 801adbc:	e7fe      	b.n	801adbc <vPortValidateInterruptPriority+0x64>
	}
 801adbe:	bf00      	nop
 801adc0:	3714      	adds	r7, #20
 801adc2:	46bd      	mov	sp, r7
 801adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adc8:	4770      	bx	lr
 801adca:	bf00      	nop
 801adcc:	e000e3f0 	.word	0xe000e3f0
 801add0:	20000d04 	.word	0x20000d04
 801add4:	e000ed0c 	.word	0xe000ed0c
 801add8:	20000d08 	.word	0x20000d08

0801addc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801addc:	b580      	push	{r7, lr}
 801adde:	b08a      	sub	sp, #40	; 0x28
 801ade0:	af00      	add	r7, sp, #0
 801ade2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801ade4:	2300      	movs	r3, #0
 801ade6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801ade8:	f7fe ff42 	bl	8019c70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801adec:	4b5c      	ldr	r3, [pc, #368]	; (801af60 <pvPortMalloc+0x184>)
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d101      	bne.n	801adf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801adf4:	f000 f91a 	bl	801b02c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801adf8:	4b5a      	ldr	r3, [pc, #360]	; (801af64 <pvPortMalloc+0x188>)
 801adfa:	681a      	ldr	r2, [r3, #0]
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	4013      	ands	r3, r2
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	f040 8090 	bne.w	801af26 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	d01e      	beq.n	801ae4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801ae0c:	2208      	movs	r2, #8
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	4413      	add	r3, r2
 801ae12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	f003 0307 	and.w	r3, r3, #7
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	d015      	beq.n	801ae4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	f023 0307 	bic.w	r3, r3, #7
 801ae24:	3308      	adds	r3, #8
 801ae26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	f003 0307 	and.w	r3, r3, #7
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d00b      	beq.n	801ae4a <pvPortMalloc+0x6e>
 801ae32:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae36:	b672      	cpsid	i
 801ae38:	f383 8811 	msr	BASEPRI, r3
 801ae3c:	f3bf 8f6f 	isb	sy
 801ae40:	f3bf 8f4f 	dsb	sy
 801ae44:	b662      	cpsie	i
 801ae46:	617b      	str	r3, [r7, #20]
 801ae48:	e7fe      	b.n	801ae48 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d06a      	beq.n	801af26 <pvPortMalloc+0x14a>
 801ae50:	4b45      	ldr	r3, [pc, #276]	; (801af68 <pvPortMalloc+0x18c>)
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	687a      	ldr	r2, [r7, #4]
 801ae56:	429a      	cmp	r2, r3
 801ae58:	d865      	bhi.n	801af26 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801ae5a:	4b44      	ldr	r3, [pc, #272]	; (801af6c <pvPortMalloc+0x190>)
 801ae5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801ae5e:	4b43      	ldr	r3, [pc, #268]	; (801af6c <pvPortMalloc+0x190>)
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801ae64:	e004      	b.n	801ae70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 801ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801ae6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae72:	685b      	ldr	r3, [r3, #4]
 801ae74:	687a      	ldr	r2, [r7, #4]
 801ae76:	429a      	cmp	r2, r3
 801ae78:	d903      	bls.n	801ae82 <pvPortMalloc+0xa6>
 801ae7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d1f1      	bne.n	801ae66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801ae82:	4b37      	ldr	r3, [pc, #220]	; (801af60 <pvPortMalloc+0x184>)
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ae88:	429a      	cmp	r2, r3
 801ae8a:	d04c      	beq.n	801af26 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801ae8c:	6a3b      	ldr	r3, [r7, #32]
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	2208      	movs	r2, #8
 801ae92:	4413      	add	r3, r2
 801ae94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801ae96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae98:	681a      	ldr	r2, [r3, #0]
 801ae9a:	6a3b      	ldr	r3, [r7, #32]
 801ae9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801ae9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aea0:	685a      	ldr	r2, [r3, #4]
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	1ad2      	subs	r2, r2, r3
 801aea6:	2308      	movs	r3, #8
 801aea8:	005b      	lsls	r3, r3, #1
 801aeaa:	429a      	cmp	r2, r3
 801aeac:	d920      	bls.n	801aef0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801aeae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	4413      	add	r3, r2
 801aeb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801aeb6:	69bb      	ldr	r3, [r7, #24]
 801aeb8:	f003 0307 	and.w	r3, r3, #7
 801aebc:	2b00      	cmp	r3, #0
 801aebe:	d00b      	beq.n	801aed8 <pvPortMalloc+0xfc>
 801aec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aec4:	b672      	cpsid	i
 801aec6:	f383 8811 	msr	BASEPRI, r3
 801aeca:	f3bf 8f6f 	isb	sy
 801aece:	f3bf 8f4f 	dsb	sy
 801aed2:	b662      	cpsie	i
 801aed4:	613b      	str	r3, [r7, #16]
 801aed6:	e7fe      	b.n	801aed6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801aed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aeda:	685a      	ldr	r2, [r3, #4]
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	1ad2      	subs	r2, r2, r3
 801aee0:	69bb      	ldr	r3, [r7, #24]
 801aee2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aee6:	687a      	ldr	r2, [r7, #4]
 801aee8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801aeea:	69b8      	ldr	r0, [r7, #24]
 801aeec:	f000 f900 	bl	801b0f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801aef0:	4b1d      	ldr	r3, [pc, #116]	; (801af68 <pvPortMalloc+0x18c>)
 801aef2:	681a      	ldr	r2, [r3, #0]
 801aef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aef6:	685b      	ldr	r3, [r3, #4]
 801aef8:	1ad3      	subs	r3, r2, r3
 801aefa:	4a1b      	ldr	r2, [pc, #108]	; (801af68 <pvPortMalloc+0x18c>)
 801aefc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801aefe:	4b1a      	ldr	r3, [pc, #104]	; (801af68 <pvPortMalloc+0x18c>)
 801af00:	681a      	ldr	r2, [r3, #0]
 801af02:	4b1b      	ldr	r3, [pc, #108]	; (801af70 <pvPortMalloc+0x194>)
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	429a      	cmp	r2, r3
 801af08:	d203      	bcs.n	801af12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801af0a:	4b17      	ldr	r3, [pc, #92]	; (801af68 <pvPortMalloc+0x18c>)
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	4a18      	ldr	r2, [pc, #96]	; (801af70 <pvPortMalloc+0x194>)
 801af10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801af12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af14:	685a      	ldr	r2, [r3, #4]
 801af16:	4b13      	ldr	r3, [pc, #76]	; (801af64 <pvPortMalloc+0x188>)
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	431a      	orrs	r2, r3
 801af1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801af20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af22:	2200      	movs	r2, #0
 801af24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801af26:	f7fe feb1 	bl	8019c8c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801af2a:	69fb      	ldr	r3, [r7, #28]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d101      	bne.n	801af34 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801af30:	f7fd fab1 	bl	8018496 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801af34:	69fb      	ldr	r3, [r7, #28]
 801af36:	f003 0307 	and.w	r3, r3, #7
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d00b      	beq.n	801af56 <pvPortMalloc+0x17a>
 801af3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af42:	b672      	cpsid	i
 801af44:	f383 8811 	msr	BASEPRI, r3
 801af48:	f3bf 8f6f 	isb	sy
 801af4c:	f3bf 8f4f 	dsb	sy
 801af50:	b662      	cpsie	i
 801af52:	60fb      	str	r3, [r7, #12]
 801af54:	e7fe      	b.n	801af54 <pvPortMalloc+0x178>
	return pvReturn;
 801af56:	69fb      	ldr	r3, [r7, #28]
}
 801af58:	4618      	mov	r0, r3
 801af5a:	3728      	adds	r7, #40	; 0x28
 801af5c:	46bd      	mov	sp, r7
 801af5e:	bd80      	pop	{r7, pc}
 801af60:	20008d14 	.word	0x20008d14
 801af64:	20008d20 	.word	0x20008d20
 801af68:	20008d18 	.word	0x20008d18
 801af6c:	20008d0c 	.word	0x20008d0c
 801af70:	20008d1c 	.word	0x20008d1c

0801af74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b086      	sub	sp, #24
 801af78:	af00      	add	r7, sp, #0
 801af7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	2b00      	cmp	r3, #0
 801af84:	d04a      	beq.n	801b01c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801af86:	2308      	movs	r3, #8
 801af88:	425b      	negs	r3, r3
 801af8a:	697a      	ldr	r2, [r7, #20]
 801af8c:	4413      	add	r3, r2
 801af8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801af90:	697b      	ldr	r3, [r7, #20]
 801af92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801af94:	693b      	ldr	r3, [r7, #16]
 801af96:	685a      	ldr	r2, [r3, #4]
 801af98:	4b22      	ldr	r3, [pc, #136]	; (801b024 <vPortFree+0xb0>)
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	4013      	ands	r3, r2
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d10b      	bne.n	801afba <vPortFree+0x46>
 801afa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801afa6:	b672      	cpsid	i
 801afa8:	f383 8811 	msr	BASEPRI, r3
 801afac:	f3bf 8f6f 	isb	sy
 801afb0:	f3bf 8f4f 	dsb	sy
 801afb4:	b662      	cpsie	i
 801afb6:	60fb      	str	r3, [r7, #12]
 801afb8:	e7fe      	b.n	801afb8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801afba:	693b      	ldr	r3, [r7, #16]
 801afbc:	681b      	ldr	r3, [r3, #0]
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	d00b      	beq.n	801afda <vPortFree+0x66>
 801afc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801afc6:	b672      	cpsid	i
 801afc8:	f383 8811 	msr	BASEPRI, r3
 801afcc:	f3bf 8f6f 	isb	sy
 801afd0:	f3bf 8f4f 	dsb	sy
 801afd4:	b662      	cpsie	i
 801afd6:	60bb      	str	r3, [r7, #8]
 801afd8:	e7fe      	b.n	801afd8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801afda:	693b      	ldr	r3, [r7, #16]
 801afdc:	685a      	ldr	r2, [r3, #4]
 801afde:	4b11      	ldr	r3, [pc, #68]	; (801b024 <vPortFree+0xb0>)
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	4013      	ands	r3, r2
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d019      	beq.n	801b01c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801afe8:	693b      	ldr	r3, [r7, #16]
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	2b00      	cmp	r3, #0
 801afee:	d115      	bne.n	801b01c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801aff0:	693b      	ldr	r3, [r7, #16]
 801aff2:	685a      	ldr	r2, [r3, #4]
 801aff4:	4b0b      	ldr	r3, [pc, #44]	; (801b024 <vPortFree+0xb0>)
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	43db      	mvns	r3, r3
 801affa:	401a      	ands	r2, r3
 801affc:	693b      	ldr	r3, [r7, #16]
 801affe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801b000:	f7fe fe36 	bl	8019c70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801b004:	693b      	ldr	r3, [r7, #16]
 801b006:	685a      	ldr	r2, [r3, #4]
 801b008:	4b07      	ldr	r3, [pc, #28]	; (801b028 <vPortFree+0xb4>)
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	4413      	add	r3, r2
 801b00e:	4a06      	ldr	r2, [pc, #24]	; (801b028 <vPortFree+0xb4>)
 801b010:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801b012:	6938      	ldr	r0, [r7, #16]
 801b014:	f000 f86c 	bl	801b0f0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801b018:	f7fe fe38 	bl	8019c8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801b01c:	bf00      	nop
 801b01e:	3718      	adds	r7, #24
 801b020:	46bd      	mov	sp, r7
 801b022:	bd80      	pop	{r7, pc}
 801b024:	20008d20 	.word	0x20008d20
 801b028:	20008d18 	.word	0x20008d18

0801b02c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801b02c:	b480      	push	{r7}
 801b02e:	b085      	sub	sp, #20
 801b030:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801b032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b036:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801b038:	4b27      	ldr	r3, [pc, #156]	; (801b0d8 <prvHeapInit+0xac>)
 801b03a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801b03c:	68fb      	ldr	r3, [r7, #12]
 801b03e:	f003 0307 	and.w	r3, r3, #7
 801b042:	2b00      	cmp	r3, #0
 801b044:	d00c      	beq.n	801b060 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801b046:	68fb      	ldr	r3, [r7, #12]
 801b048:	3307      	adds	r3, #7
 801b04a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b04c:	68fb      	ldr	r3, [r7, #12]
 801b04e:	f023 0307 	bic.w	r3, r3, #7
 801b052:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801b054:	68ba      	ldr	r2, [r7, #8]
 801b056:	68fb      	ldr	r3, [r7, #12]
 801b058:	1ad3      	subs	r3, r2, r3
 801b05a:	4a1f      	ldr	r2, [pc, #124]	; (801b0d8 <prvHeapInit+0xac>)
 801b05c:	4413      	add	r3, r2
 801b05e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801b064:	4a1d      	ldr	r2, [pc, #116]	; (801b0dc <prvHeapInit+0xb0>)
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801b06a:	4b1c      	ldr	r3, [pc, #112]	; (801b0dc <prvHeapInit+0xb0>)
 801b06c:	2200      	movs	r2, #0
 801b06e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	68ba      	ldr	r2, [r7, #8]
 801b074:	4413      	add	r3, r2
 801b076:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801b078:	2208      	movs	r2, #8
 801b07a:	68fb      	ldr	r3, [r7, #12]
 801b07c:	1a9b      	subs	r3, r3, r2
 801b07e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b080:	68fb      	ldr	r3, [r7, #12]
 801b082:	f023 0307 	bic.w	r3, r3, #7
 801b086:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801b088:	68fb      	ldr	r3, [r7, #12]
 801b08a:	4a15      	ldr	r2, [pc, #84]	; (801b0e0 <prvHeapInit+0xb4>)
 801b08c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801b08e:	4b14      	ldr	r3, [pc, #80]	; (801b0e0 <prvHeapInit+0xb4>)
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	2200      	movs	r2, #0
 801b094:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801b096:	4b12      	ldr	r3, [pc, #72]	; (801b0e0 <prvHeapInit+0xb4>)
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	2200      	movs	r2, #0
 801b09c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801b0a2:	683b      	ldr	r3, [r7, #0]
 801b0a4:	68fa      	ldr	r2, [r7, #12]
 801b0a6:	1ad2      	subs	r2, r2, r3
 801b0a8:	683b      	ldr	r3, [r7, #0]
 801b0aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801b0ac:	4b0c      	ldr	r3, [pc, #48]	; (801b0e0 <prvHeapInit+0xb4>)
 801b0ae:	681a      	ldr	r2, [r3, #0]
 801b0b0:	683b      	ldr	r3, [r7, #0]
 801b0b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b0b4:	683b      	ldr	r3, [r7, #0]
 801b0b6:	685b      	ldr	r3, [r3, #4]
 801b0b8:	4a0a      	ldr	r2, [pc, #40]	; (801b0e4 <prvHeapInit+0xb8>)
 801b0ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b0bc:	683b      	ldr	r3, [r7, #0]
 801b0be:	685b      	ldr	r3, [r3, #4]
 801b0c0:	4a09      	ldr	r2, [pc, #36]	; (801b0e8 <prvHeapInit+0xbc>)
 801b0c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801b0c4:	4b09      	ldr	r3, [pc, #36]	; (801b0ec <prvHeapInit+0xc0>)
 801b0c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801b0ca:	601a      	str	r2, [r3, #0]
}
 801b0cc:	bf00      	nop
 801b0ce:	3714      	adds	r7, #20
 801b0d0:	46bd      	mov	sp, r7
 801b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0d6:	4770      	bx	lr
 801b0d8:	20000d0c 	.word	0x20000d0c
 801b0dc:	20008d0c 	.word	0x20008d0c
 801b0e0:	20008d14 	.word	0x20008d14
 801b0e4:	20008d1c 	.word	0x20008d1c
 801b0e8:	20008d18 	.word	0x20008d18
 801b0ec:	20008d20 	.word	0x20008d20

0801b0f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801b0f0:	b480      	push	{r7}
 801b0f2:	b085      	sub	sp, #20
 801b0f4:	af00      	add	r7, sp, #0
 801b0f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801b0f8:	4b28      	ldr	r3, [pc, #160]	; (801b19c <prvInsertBlockIntoFreeList+0xac>)
 801b0fa:	60fb      	str	r3, [r7, #12]
 801b0fc:	e002      	b.n	801b104 <prvInsertBlockIntoFreeList+0x14>
 801b0fe:	68fb      	ldr	r3, [r7, #12]
 801b100:	681b      	ldr	r3, [r3, #0]
 801b102:	60fb      	str	r3, [r7, #12]
 801b104:	68fb      	ldr	r3, [r7, #12]
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	687a      	ldr	r2, [r7, #4]
 801b10a:	429a      	cmp	r2, r3
 801b10c:	d8f7      	bhi.n	801b0fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801b112:	68fb      	ldr	r3, [r7, #12]
 801b114:	685b      	ldr	r3, [r3, #4]
 801b116:	68ba      	ldr	r2, [r7, #8]
 801b118:	4413      	add	r3, r2
 801b11a:	687a      	ldr	r2, [r7, #4]
 801b11c:	429a      	cmp	r2, r3
 801b11e:	d108      	bne.n	801b132 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801b120:	68fb      	ldr	r3, [r7, #12]
 801b122:	685a      	ldr	r2, [r3, #4]
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	685b      	ldr	r3, [r3, #4]
 801b128:	441a      	add	r2, r3
 801b12a:	68fb      	ldr	r3, [r7, #12]
 801b12c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801b12e:	68fb      	ldr	r3, [r7, #12]
 801b130:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	685b      	ldr	r3, [r3, #4]
 801b13a:	68ba      	ldr	r2, [r7, #8]
 801b13c:	441a      	add	r2, r3
 801b13e:	68fb      	ldr	r3, [r7, #12]
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	429a      	cmp	r2, r3
 801b144:	d118      	bne.n	801b178 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801b146:	68fb      	ldr	r3, [r7, #12]
 801b148:	681a      	ldr	r2, [r3, #0]
 801b14a:	4b15      	ldr	r3, [pc, #84]	; (801b1a0 <prvInsertBlockIntoFreeList+0xb0>)
 801b14c:	681b      	ldr	r3, [r3, #0]
 801b14e:	429a      	cmp	r2, r3
 801b150:	d00d      	beq.n	801b16e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	685a      	ldr	r2, [r3, #4]
 801b156:	68fb      	ldr	r3, [r7, #12]
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	685b      	ldr	r3, [r3, #4]
 801b15c:	441a      	add	r2, r3
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801b162:	68fb      	ldr	r3, [r7, #12]
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	681a      	ldr	r2, [r3, #0]
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	601a      	str	r2, [r3, #0]
 801b16c:	e008      	b.n	801b180 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801b16e:	4b0c      	ldr	r3, [pc, #48]	; (801b1a0 <prvInsertBlockIntoFreeList+0xb0>)
 801b170:	681a      	ldr	r2, [r3, #0]
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	601a      	str	r2, [r3, #0]
 801b176:	e003      	b.n	801b180 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801b178:	68fb      	ldr	r3, [r7, #12]
 801b17a:	681a      	ldr	r2, [r3, #0]
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801b180:	68fa      	ldr	r2, [r7, #12]
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	429a      	cmp	r2, r3
 801b186:	d002      	beq.n	801b18e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801b188:	68fb      	ldr	r3, [r7, #12]
 801b18a:	687a      	ldr	r2, [r7, #4]
 801b18c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b18e:	bf00      	nop
 801b190:	3714      	adds	r7, #20
 801b192:	46bd      	mov	sp, r7
 801b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b198:	4770      	bx	lr
 801b19a:	bf00      	nop
 801b19c:	20008d0c 	.word	0x20008d0c
 801b1a0:	20008d14 	.word	0x20008d14

0801b1a4 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 801b1a4:	b480      	push	{r7}
 801b1a6:	b083      	sub	sp, #12
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	6078      	str	r0, [r7, #4]
    {
 801b1ac:	4a04      	ldr	r2, [pc, #16]	; (801b1c0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	601a      	str	r2, [r3, #0]
    }
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	4618      	mov	r0, r3
 801b1b6:	370c      	adds	r7, #12
 801b1b8:	46bd      	mov	sp, r7
 801b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1be:	4770      	bx	lr
 801b1c0:	0802d5b0 	.word	0x0802d5b0

0801b1c4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 801b1c4:	b580      	push	{r7, lr}
 801b1c6:	b082      	sub	sp, #8
 801b1c8:	af00      	add	r7, sp, #0
 801b1ca:	6078      	str	r0, [r7, #4]
    }
 801b1cc:	6878      	ldr	r0, [r7, #4]
 801b1ce:	f7ff ffe9 	bl	801b1a4 <_ZN8touchgfx12FontProviderD1Ev>
 801b1d2:	2104      	movs	r1, #4
 801b1d4:	6878      	ldr	r0, [r7, #4]
 801b1d6:	f00f f9a4 	bl	802a522 <_ZdlPvj>
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	4618      	mov	r0, r3
 801b1de:	3708      	adds	r7, #8
 801b1e0:	46bd      	mov	sp, r7
 801b1e2:	bd80      	pop	{r7, pc}

0801b1e4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 801b1e4:	b580      	push	{r7, lr}
 801b1e6:	b082      	sub	sp, #8
 801b1e8:	af00      	add	r7, sp, #0
 801b1ea:	6078      	str	r0, [r7, #4]
 801b1ec:	460b      	mov	r3, r1
 801b1ee:	807b      	strh	r3, [r7, #2]
    switch (typography)
 801b1f0:	887b      	ldrh	r3, [r7, #2]
 801b1f2:	2b01      	cmp	r3, #1
 801b1f4:	d008      	beq.n	801b208 <_ZN23ApplicationFontProvider7getFontEt+0x24>
 801b1f6:	2b02      	cmp	r3, #2
 801b1f8:	d00b      	beq.n	801b212 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d10e      	bne.n	801b21c <_ZN23ApplicationFontProvider7getFontEt+0x38>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 801b1fe:	f003 fa29 	bl	801e654 <_ZN17TypedTextDatabase8getFontsEv>
 801b202:	4603      	mov	r3, r0
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	e00a      	b.n	801b21e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 801b208:	f003 fa24 	bl	801e654 <_ZN17TypedTextDatabase8getFontsEv>
 801b20c:	4603      	mov	r3, r0
 801b20e:	685b      	ldr	r3, [r3, #4]
 801b210:	e005      	b.n	801b21e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 801b212:	f003 fa1f 	bl	801e654 <_ZN17TypedTextDatabase8getFontsEv>
 801b216:	4603      	mov	r3, r0
 801b218:	689b      	ldr	r3, [r3, #8]
 801b21a:	e000      	b.n	801b21e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    default:
        return 0;
 801b21c:	2300      	movs	r3, #0
    }
}
 801b21e:	4618      	mov	r0, r3
 801b220:	3708      	adds	r7, #8
 801b222:	46bd      	mov	sp, r7
 801b224:	bd80      	pop	{r7, pc}
	...

0801b228 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 801b228:	b580      	push	{r7, lr}
 801b22a:	b082      	sub	sp, #8
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	6078      	str	r0, [r7, #4]
 801b230:	4a05      	ldr	r2, [pc, #20]	; (801b248 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	601a      	str	r2, [r3, #0]
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	4618      	mov	r0, r3
 801b23a:	f7ff ffb3 	bl	801b1a4 <_ZN8touchgfx12FontProviderD1Ev>
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	4618      	mov	r0, r3
 801b242:	3708      	adds	r7, #8
 801b244:	46bd      	mov	sp, r7
 801b246:	bd80      	pop	{r7, pc}
 801b248:	0802d59c 	.word	0x0802d59c

0801b24c <_ZN23ApplicationFontProviderD0Ev>:
 801b24c:	b580      	push	{r7, lr}
 801b24e:	b082      	sub	sp, #8
 801b250:	af00      	add	r7, sp, #0
 801b252:	6078      	str	r0, [r7, #4]
 801b254:	6878      	ldr	r0, [r7, #4]
 801b256:	f7ff ffe7 	bl	801b228 <_ZN23ApplicationFontProviderD1Ev>
 801b25a:	2104      	movs	r1, #4
 801b25c:	6878      	ldr	r0, [r7, #4]
 801b25e:	f00f f960 	bl	802a522 <_ZdlPvj>
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	4618      	mov	r0, r3
 801b266:	3708      	adds	r7, #8
 801b268:	46bd      	mov	sp, r7
 801b26a:	bd80      	pop	{r7, pc}

0801b26c <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 801b26c:	b480      	push	{r7}
 801b26e:	b083      	sub	sp, #12
 801b270:	af00      	add	r7, sp, #0
 801b272:	6078      	str	r0, [r7, #4]
 801b274:	4a04      	ldr	r2, [pc, #16]	; (801b288 <_ZN8touchgfx4FontD1Ev+0x1c>)
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	601a      	str	r2, [r3, #0]
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	4618      	mov	r0, r3
 801b27e:	370c      	adds	r7, #12
 801b280:	46bd      	mov	sp, r7
 801b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b286:	4770      	bx	lr
 801b288:	0802f0c4 	.word	0x0802f0c4

0801b28c <_ZN8touchgfx4FontD0Ev>:
 801b28c:	b580      	push	{r7, lr}
 801b28e:	b082      	sub	sp, #8
 801b290:	af00      	add	r7, sp, #0
 801b292:	6078      	str	r0, [r7, #4]
 801b294:	6878      	ldr	r0, [r7, #4]
 801b296:	f7ff ffe9 	bl	801b26c <_ZN8touchgfx4FontD1Ev>
 801b29a:	2110      	movs	r1, #16
 801b29c:	6878      	ldr	r0, [r7, #4]
 801b29e:	f00f f940 	bl	802a522 <_ZdlPvj>
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	4618      	mov	r0, r3
 801b2a6:	3708      	adds	r7, #8
 801b2a8:	46bd      	mov	sp, r7
 801b2aa:	bd80      	pop	{r7, pc}

0801b2ac <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 801b2ac:	b590      	push	{r4, r7, lr}
 801b2ae:	b087      	sub	sp, #28
 801b2b0:	af00      	add	r7, sp, #0
 801b2b2:	6078      	str	r0, [r7, #4]
 801b2b4:	460b      	mov	r3, r1
 801b2b6:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 801b2b8:	2300      	movs	r3, #0
 801b2ba:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 801b2bc:	2300      	movs	r3, #0
 801b2be:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	3308      	adds	r3, #8
 801b2c6:	681c      	ldr	r4, [r3, #0]
 801b2c8:	f107 030f 	add.w	r3, r7, #15
 801b2cc:	f107 0210 	add.w	r2, r7, #16
 801b2d0:	8879      	ldrh	r1, [r7, #2]
 801b2d2:	6878      	ldr	r0, [r7, #4]
 801b2d4:	47a0      	blx	r4
 801b2d6:	6178      	str	r0, [r7, #20]
        return glyph;
 801b2d8:	697b      	ldr	r3, [r7, #20]
    }
 801b2da:	4618      	mov	r0, r3
 801b2dc:	371c      	adds	r7, #28
 801b2de:	46bd      	mov	sp, r7
 801b2e0:	bd90      	pop	{r4, r7, pc}

0801b2e2 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 801b2e2:	b480      	push	{r7}
 801b2e4:	b083      	sub	sp, #12
 801b2e6:	af00      	add	r7, sp, #0
 801b2e8:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	895b      	ldrh	r3, [r3, #10]
    }
 801b2ee:	4618      	mov	r0, r3
 801b2f0:	370c      	adds	r7, #12
 801b2f2:	46bd      	mov	sp, r7
 801b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2f8:	4770      	bx	lr

0801b2fa <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 801b2fa:	b480      	push	{r7}
 801b2fc:	b083      	sub	sp, #12
 801b2fe:	af00      	add	r7, sp, #0
 801b300:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	899b      	ldrh	r3, [r3, #12]
    }
 801b306:	4618      	mov	r0, r3
 801b308:	370c      	adds	r7, #12
 801b30a:	46bd      	mov	sp, r7
 801b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b310:	4770      	bx	lr

0801b312 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 801b312:	b480      	push	{r7}
 801b314:	b083      	sub	sp, #12
 801b316:	af00      	add	r7, sp, #0
 801b318:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	889b      	ldrh	r3, [r3, #4]
    }
 801b31e:	4618      	mov	r0, r3
 801b320:	370c      	adds	r7, #12
 801b322:	46bd      	mov	sp, r7
 801b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b328:	4770      	bx	lr

0801b32a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 801b32a:	b480      	push	{r7}
 801b32c:	b083      	sub	sp, #12
 801b32e:	af00      	add	r7, sp, #0
 801b330:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	889a      	ldrh	r2, [r3, #4]
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	799b      	ldrb	r3, [r3, #6]
 801b33a:	b29b      	uxth	r3, r3
 801b33c:	4413      	add	r3, r2
 801b33e:	b29b      	uxth	r3, r3
    }
 801b340:	4618      	mov	r0, r3
 801b342:	370c      	adds	r7, #12
 801b344:	46bd      	mov	sp, r7
 801b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b34a:	4770      	bx	lr

0801b34c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 801b34c:	b480      	push	{r7}
 801b34e:	b083      	sub	sp, #12
 801b350:	af00      	add	r7, sp, #0
 801b352:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	79db      	ldrb	r3, [r3, #7]
 801b358:	f3c3 0306 	ubfx	r3, r3, #0, #7
 801b35c:	b2db      	uxtb	r3, r3
    }
 801b35e:	4618      	mov	r0, r3
 801b360:	370c      	adds	r7, #12
 801b362:	46bd      	mov	sp, r7
 801b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b368:	4770      	bx	lr

0801b36a <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 801b36a:	b480      	push	{r7}
 801b36c:	b083      	sub	sp, #12
 801b36e:	af00      	add	r7, sp, #0
 801b370:	6078      	str	r0, [r7, #4]
    {
        return a4;
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	79db      	ldrb	r3, [r3, #7]
 801b376:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801b37a:	b2db      	uxtb	r3, r3
    }
 801b37c:	4618      	mov	r0, r3
 801b37e:	370c      	adds	r7, #12
 801b380:	46bd      	mov	sp, r7
 801b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b386:	4770      	bx	lr

0801b388 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 801b388:	b480      	push	{r7}
 801b38a:	b083      	sub	sp, #12
 801b38c:	af00      	add	r7, sp, #0
 801b38e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	6a1b      	ldr	r3, [r3, #32]
    }
 801b394:	4618      	mov	r0, r3
 801b396:	370c      	adds	r7, #12
 801b398:	46bd      	mov	sp, r7
 801b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b39e:	4770      	bx	lr

0801b3a0 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 801b3a0:	b580      	push	{r7, lr}
 801b3a2:	b082      	sub	sp, #8
 801b3a4:	af00      	add	r7, sp, #0
 801b3a6:	6078      	str	r0, [r7, #4]
 801b3a8:	4a05      	ldr	r2, [pc, #20]	; (801b3c0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	601a      	str	r2, [r3, #0]
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	4618      	mov	r0, r3
 801b3b2:	f7ff ff5b 	bl	801b26c <_ZN8touchgfx4FontD1Ev>
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	3708      	adds	r7, #8
 801b3bc:	46bd      	mov	sp, r7
 801b3be:	bd80      	pop	{r7, pc}
 801b3c0:	0802f180 	.word	0x0802f180

0801b3c4 <_ZN8touchgfx9ConstFontD0Ev>:
 801b3c4:	b580      	push	{r7, lr}
 801b3c6:	b082      	sub	sp, #8
 801b3c8:	af00      	add	r7, sp, #0
 801b3ca:	6078      	str	r0, [r7, #4]
 801b3cc:	6878      	ldr	r0, [r7, #4]
 801b3ce:	f7ff ffe7 	bl	801b3a0 <_ZN8touchgfx9ConstFontD1Ev>
 801b3d2:	2118      	movs	r1, #24
 801b3d4:	6878      	ldr	r0, [r7, #4]
 801b3d6:	f00f f8a4 	bl	802a522 <_ZdlPvj>
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	4618      	mov	r0, r3
 801b3de:	3708      	adds	r7, #8
 801b3e0:	46bd      	mov	sp, r7
 801b3e2:	bd80      	pop	{r7, pc}

0801b3e4 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 801b3e4:	b580      	push	{r7, lr}
 801b3e6:	b082      	sub	sp, #8
 801b3e8:	af00      	add	r7, sp, #0
 801b3ea:	6078      	str	r0, [r7, #4]
 801b3ec:	4a05      	ldr	r2, [pc, #20]	; (801b404 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	601a      	str	r2, [r3, #0]
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	4618      	mov	r0, r3
 801b3f6:	f7ff ffd3 	bl	801b3a0 <_ZN8touchgfx9ConstFontD1Ev>
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	4618      	mov	r0, r3
 801b3fe:	3708      	adds	r7, #8
 801b400:	46bd      	mov	sp, r7
 801b402:	bd80      	pop	{r7, pc}
 801b404:	0802d5c4 	.word	0x0802d5c4

0801b408 <_ZN8touchgfx13GeneratedFontD0Ev>:
 801b408:	b580      	push	{r7, lr}
 801b40a:	b082      	sub	sp, #8
 801b40c:	af00      	add	r7, sp, #0
 801b40e:	6078      	str	r0, [r7, #4]
 801b410:	6878      	ldr	r0, [r7, #4]
 801b412:	f7ff ffe7 	bl	801b3e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 801b416:	2124      	movs	r1, #36	; 0x24
 801b418:	6878      	ldr	r0, [r7, #4]
 801b41a:	f00f f882 	bl	802a522 <_ZdlPvj>
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	4618      	mov	r0, r3
 801b422:	3708      	adds	r7, #8
 801b424:	46bd      	mov	sp, r7
 801b426:	bd80      	pop	{r7, pc}

0801b428 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 801b428:	b480      	push	{r7}
 801b42a:	b083      	sub	sp, #12
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	7b5b      	ldrb	r3, [r3, #13]
 801b434:	021b      	lsls	r3, r3, #8
 801b436:	b21b      	sxth	r3, r3
 801b438:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b43c:	b21a      	sxth	r2, r3
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	7adb      	ldrb	r3, [r3, #11]
 801b442:	b21b      	sxth	r3, r3
 801b444:	4313      	orrs	r3, r2
 801b446:	b21b      	sxth	r3, r3
 801b448:	b29b      	uxth	r3, r3
    }
 801b44a:	4618      	mov	r0, r3
 801b44c:	370c      	adds	r7, #12
 801b44e:	46bd      	mov	sp, r7
 801b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b454:	4770      	bx	lr
	...

0801b458 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 801b458:	b580      	push	{r7, lr}
 801b45a:	b08c      	sub	sp, #48	; 0x30
 801b45c:	af08      	add	r7, sp, #32
 801b45e:	60f8      	str	r0, [r7, #12]
 801b460:	60b9      	str	r1, [r7, #8]
 801b462:	4611      	mov	r1, r2
 801b464:	461a      	mov	r2, r3
 801b466:	460b      	mov	r3, r1
 801b468:	80fb      	strh	r3, [r7, #6]
 801b46a:	4613      	mov	r3, r2
 801b46c:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 801b46e:	68f8      	ldr	r0, [r7, #12]
 801b470:	88b9      	ldrh	r1, [r7, #4]
 801b472:	88fa      	ldrh	r2, [r7, #6]
 801b474:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801b476:	9306      	str	r3, [sp, #24]
 801b478:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b47a:	9305      	str	r3, [sp, #20]
 801b47c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b480:	9304      	str	r3, [sp, #16]
 801b482:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b486:	9303      	str	r3, [sp, #12]
 801b488:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b48c:	9302      	str	r3, [sp, #8]
 801b48e:	7f3b      	ldrb	r3, [r7, #28]
 801b490:	9301      	str	r3, [sp, #4]
 801b492:	7e3b      	ldrb	r3, [r7, #24]
 801b494:	9300      	str	r3, [sp, #0]
 801b496:	460b      	mov	r3, r1
 801b498:	68b9      	ldr	r1, [r7, #8]
 801b49a:	f009 fde3 	bl	8025064 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 801b49e:	4a08      	ldr	r2, [pc, #32]	; (801b4c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 801b4a0:	68fb      	ldr	r3, [r7, #12]
 801b4a2:	601a      	str	r2, [r3, #0]
 801b4a4:	68fb      	ldr	r3, [r7, #12]
 801b4a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b4a8:	619a      	str	r2, [r3, #24]
 801b4aa:	68fb      	ldr	r3, [r7, #12]
 801b4ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b4ae:	61da      	str	r2, [r3, #28]
 801b4b0:	68fb      	ldr	r3, [r7, #12]
 801b4b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b4b4:	621a      	str	r2, [r3, #32]
{
}
 801b4b6:	68fb      	ldr	r3, [r7, #12]
 801b4b8:	4618      	mov	r0, r3
 801b4ba:	3710      	adds	r7, #16
 801b4bc:	46bd      	mov	sp, r7
 801b4be:	bd80      	pop	{r7, pc}
 801b4c0:	0802d5c4 	.word	0x0802d5c4

0801b4c4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 801b4c4:	b480      	push	{r7}
 801b4c6:	b085      	sub	sp, #20
 801b4c8:	af00      	add	r7, sp, #0
 801b4ca:	6078      	str	r0, [r7, #4]
 801b4cc:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	699b      	ldr	r3, [r3, #24]
 801b4d2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 801b4d4:	683b      	ldr	r3, [r7, #0]
 801b4d6:	889b      	ldrh	r3, [r3, #4]
 801b4d8:	0adb      	lsrs	r3, r3, #11
 801b4da:	b29b      	uxth	r3, r3
 801b4dc:	009b      	lsls	r3, r3, #2
 801b4de:	68fa      	ldr	r2, [r7, #12]
 801b4e0:	4413      	add	r3, r2
 801b4e2:	681a      	ldr	r2, [r3, #0]
 801b4e4:	683b      	ldr	r3, [r7, #0]
 801b4e6:	681b      	ldr	r3, [r3, #0]
 801b4e8:	4413      	add	r3, r2
}
 801b4ea:	4618      	mov	r0, r3
 801b4ec:	3714      	adds	r7, #20
 801b4ee:	46bd      	mov	sp, r7
 801b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4f4:	4770      	bx	lr

0801b4f6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 801b4f6:	b580      	push	{r7, lr}
 801b4f8:	b086      	sub	sp, #24
 801b4fa:	af00      	add	r7, sp, #0
 801b4fc:	60f8      	str	r0, [r7, #12]
 801b4fe:	460b      	mov	r3, r1
 801b500:	607a      	str	r2, [r7, #4]
 801b502:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	2b00      	cmp	r3, #0
 801b508:	d003      	beq.n	801b512 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	7b1b      	ldrb	r3, [r3, #12]
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d101      	bne.n	801b516 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 801b512:	2300      	movs	r3, #0
 801b514:	e023      	b.n	801b55e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 801b516:	6878      	ldr	r0, [r7, #4]
 801b518:	f7ff ff86 	bl	801b428 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 801b51c:	4603      	mov	r3, r0
 801b51e:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 801b520:	8abb      	ldrh	r3, [r7, #20]
 801b522:	82fb      	strh	r3, [r7, #22]
 801b524:	8afa      	ldrh	r2, [r7, #22]
 801b526:	8abb      	ldrh	r3, [r7, #20]
 801b528:	6879      	ldr	r1, [r7, #4]
 801b52a:	7b09      	ldrb	r1, [r1, #12]
 801b52c:	440b      	add	r3, r1
 801b52e:	429a      	cmp	r2, r3
 801b530:	da14      	bge.n	801b55c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 801b532:	68fb      	ldr	r3, [r7, #12]
 801b534:	69da      	ldr	r2, [r3, #28]
 801b536:	8afb      	ldrh	r3, [r7, #22]
 801b538:	009b      	lsls	r3, r3, #2
 801b53a:	4413      	add	r3, r2
 801b53c:	881b      	ldrh	r3, [r3, #0]
 801b53e:	897a      	ldrh	r2, [r7, #10]
 801b540:	429a      	cmp	r2, r3
 801b542:	d107      	bne.n	801b554 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 801b544:	68fb      	ldr	r3, [r7, #12]
 801b546:	69da      	ldr	r2, [r3, #28]
 801b548:	8afb      	ldrh	r3, [r7, #22]
 801b54a:	009b      	lsls	r3, r3, #2
 801b54c:	4413      	add	r3, r2
 801b54e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801b552:	e004      	b.n	801b55e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 801b554:	8afb      	ldrh	r3, [r7, #22]
 801b556:	3301      	adds	r3, #1
 801b558:	82fb      	strh	r3, [r7, #22]
 801b55a:	e7e3      	b.n	801b524 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 801b55c:	2300      	movs	r3, #0
}
 801b55e:	4618      	mov	r0, r3
 801b560:	3718      	adds	r7, #24
 801b562:	46bd      	mov	sp, r7
 801b564:	bd80      	pop	{r7, pc}
	...

0801b568 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 0, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 0, 0, 0);
 801b568:	b580      	push	{r7, lr}
 801b56a:	af00      	add	r7, sp, #0
 801b56c:	4801      	ldr	r0, [pc, #4]	; (801b574 <__tcf_0+0xc>)
 801b56e:	f7ff ff39 	bl	801b3e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 801b572:	bd80      	pop	{r7, pc}
 801b574:	20008d24 	.word	0x20008d24

0801b578 <_Z23getFont_verdana_10_4bppv>:
{
 801b578:	b580      	push	{r7, lr}
 801b57a:	b08a      	sub	sp, #40	; 0x28
 801b57c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 0, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 0, 0, 0);
 801b57e:	4b15      	ldr	r3, [pc, #84]	; (801b5d4 <_Z23getFont_verdana_10_4bppv+0x5c>)
 801b580:	681b      	ldr	r3, [r3, #0]
 801b582:	f003 0301 	and.w	r3, r3, #1
 801b586:	2b00      	cmp	r3, #0
 801b588:	d11f      	bne.n	801b5ca <_Z23getFont_verdana_10_4bppv+0x52>
 801b58a:	2300      	movs	r3, #0
 801b58c:	9309      	str	r3, [sp, #36]	; 0x24
 801b58e:	2300      	movs	r3, #0
 801b590:	9308      	str	r3, [sp, #32]
 801b592:	2300      	movs	r3, #0
 801b594:	9307      	str	r3, [sp, #28]
 801b596:	4b10      	ldr	r3, [pc, #64]	; (801b5d8 <_Z23getFont_verdana_10_4bppv+0x60>)
 801b598:	9306      	str	r3, [sp, #24]
 801b59a:	4b10      	ldr	r3, [pc, #64]	; (801b5dc <_Z23getFont_verdana_10_4bppv+0x64>)
 801b59c:	9305      	str	r3, [sp, #20]
 801b59e:	2300      	movs	r3, #0
 801b5a0:	9304      	str	r3, [sp, #16]
 801b5a2:	2300      	movs	r3, #0
 801b5a4:	9303      	str	r3, [sp, #12]
 801b5a6:	2301      	movs	r3, #1
 801b5a8:	9302      	str	r3, [sp, #8]
 801b5aa:	2304      	movs	r3, #4
 801b5ac:	9301      	str	r3, [sp, #4]
 801b5ae:	2300      	movs	r3, #0
 801b5b0:	9300      	str	r3, [sp, #0]
 801b5b2:	230a      	movs	r3, #10
 801b5b4:	2200      	movs	r2, #0
 801b5b6:	490a      	ldr	r1, [pc, #40]	; (801b5e0 <_Z23getFont_verdana_10_4bppv+0x68>)
 801b5b8:	480a      	ldr	r0, [pc, #40]	; (801b5e4 <_Z23getFont_verdana_10_4bppv+0x6c>)
 801b5ba:	f7ff ff4d 	bl	801b458 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801b5be:	4b05      	ldr	r3, [pc, #20]	; (801b5d4 <_Z23getFont_verdana_10_4bppv+0x5c>)
 801b5c0:	2201      	movs	r2, #1
 801b5c2:	601a      	str	r2, [r3, #0]
 801b5c4:	4808      	ldr	r0, [pc, #32]	; (801b5e8 <_Z23getFont_verdana_10_4bppv+0x70>)
 801b5c6:	f00f fdb5 	bl	802b134 <atexit>
    return verdana_10_4bpp;
 801b5ca:	4b06      	ldr	r3, [pc, #24]	; (801b5e4 <_Z23getFont_verdana_10_4bppv+0x6c>)
}
 801b5cc:	4618      	mov	r0, r3
 801b5ce:	46bd      	mov	sp, r7
 801b5d0:	bd80      	pop	{r7, pc}
 801b5d2:	bf00      	nop
 801b5d4:	20008d48 	.word	0x20008d48
 801b5d8:	9009bbd0 	.word	0x9009bbd0
 801b5dc:	0802d610 	.word	0x0802d610
 801b5e0:	9009bbdc 	.word	0x9009bbdc
 801b5e4:	20008d24 	.word	0x20008d24
 801b5e8:	0801b569 	.word	0x0801b569

0801b5ec <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 0, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 0, 0, 0);
 801b5ec:	b580      	push	{r7, lr}
 801b5ee:	af00      	add	r7, sp, #0
 801b5f0:	4801      	ldr	r0, [pc, #4]	; (801b5f8 <__tcf_0+0xc>)
 801b5f2:	f7ff fef7 	bl	801b3e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 801b5f6:	bd80      	pop	{r7, pc}
 801b5f8:	20008d4c 	.word	0x20008d4c

0801b5fc <_Z23getFont_verdana_20_4bppv>:
{
 801b5fc:	b580      	push	{r7, lr}
 801b5fe:	b08a      	sub	sp, #40	; 0x28
 801b600:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 0, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 0, 0, 0);
 801b602:	4b15      	ldr	r3, [pc, #84]	; (801b658 <_Z23getFont_verdana_20_4bppv+0x5c>)
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	f003 0301 	and.w	r3, r3, #1
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	d11f      	bne.n	801b64e <_Z23getFont_verdana_20_4bppv+0x52>
 801b60e:	2300      	movs	r3, #0
 801b610:	9309      	str	r3, [sp, #36]	; 0x24
 801b612:	2300      	movs	r3, #0
 801b614:	9308      	str	r3, [sp, #32]
 801b616:	2300      	movs	r3, #0
 801b618:	9307      	str	r3, [sp, #28]
 801b61a:	4b10      	ldr	r3, [pc, #64]	; (801b65c <_Z23getFont_verdana_20_4bppv+0x60>)
 801b61c:	9306      	str	r3, [sp, #24]
 801b61e:	4b10      	ldr	r3, [pc, #64]	; (801b660 <_Z23getFont_verdana_20_4bppv+0x64>)
 801b620:	9305      	str	r3, [sp, #20]
 801b622:	2300      	movs	r3, #0
 801b624:	9304      	str	r3, [sp, #16]
 801b626:	2300      	movs	r3, #0
 801b628:	9303      	str	r3, [sp, #12]
 801b62a:	2301      	movs	r3, #1
 801b62c:	9302      	str	r3, [sp, #8]
 801b62e:	2304      	movs	r3, #4
 801b630:	9301      	str	r3, [sp, #4]
 801b632:	2300      	movs	r3, #0
 801b634:	9300      	str	r3, [sp, #0]
 801b636:	2314      	movs	r3, #20
 801b638:	2200      	movs	r2, #0
 801b63a:	490a      	ldr	r1, [pc, #40]	; (801b664 <_Z23getFont_verdana_20_4bppv+0x68>)
 801b63c:	480a      	ldr	r0, [pc, #40]	; (801b668 <_Z23getFont_verdana_20_4bppv+0x6c>)
 801b63e:	f7ff ff0b 	bl	801b458 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801b642:	4b05      	ldr	r3, [pc, #20]	; (801b658 <_Z23getFont_verdana_20_4bppv+0x5c>)
 801b644:	2201      	movs	r2, #1
 801b646:	601a      	str	r2, [r3, #0]
 801b648:	4808      	ldr	r0, [pc, #32]	; (801b66c <_Z23getFont_verdana_20_4bppv+0x70>)
 801b64a:	f00f fd73 	bl	802b134 <atexit>
    return verdana_20_4bpp;
 801b64e:	4b06      	ldr	r3, [pc, #24]	; (801b668 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 801b650:	4618      	mov	r0, r3
 801b652:	46bd      	mov	sp, r7
 801b654:	bd80      	pop	{r7, pc}
 801b656:	bf00      	nop
 801b658:	20008d70 	.word	0x20008d70
 801b65c:	9009bbd4 	.word	0x9009bbd4
 801b660:	0802d614 	.word	0x0802d614
 801b664:	9009bbec 	.word	0x9009bbec
 801b668:	20008d4c 	.word	0x20008d4c
 801b66c:	0801b5ed 	.word	0x0801b5ed

0801b670 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0, 0);
 801b670:	b580      	push	{r7, lr}
 801b672:	af00      	add	r7, sp, #0
 801b674:	4801      	ldr	r0, [pc, #4]	; (801b67c <__tcf_0+0xc>)
 801b676:	f7ff feb5 	bl	801b3e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 801b67a:	bd80      	pop	{r7, pc}
 801b67c:	20008d74 	.word	0x20008d74

0801b680 <_Z23getFont_verdana_40_4bppv>:
{
 801b680:	b580      	push	{r7, lr}
 801b682:	b08a      	sub	sp, #40	; 0x28
 801b684:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0, 0);
 801b686:	4b15      	ldr	r3, [pc, #84]	; (801b6dc <_Z23getFont_verdana_40_4bppv+0x5c>)
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	f003 0301 	and.w	r3, r3, #1
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d11f      	bne.n	801b6d2 <_Z23getFont_verdana_40_4bppv+0x52>
 801b692:	2300      	movs	r3, #0
 801b694:	9309      	str	r3, [sp, #36]	; 0x24
 801b696:	2300      	movs	r3, #0
 801b698:	9308      	str	r3, [sp, #32]
 801b69a:	2300      	movs	r3, #0
 801b69c:	9307      	str	r3, [sp, #28]
 801b69e:	4b10      	ldr	r3, [pc, #64]	; (801b6e0 <_Z23getFont_verdana_40_4bppv+0x60>)
 801b6a0:	9306      	str	r3, [sp, #24]
 801b6a2:	4b10      	ldr	r3, [pc, #64]	; (801b6e4 <_Z23getFont_verdana_40_4bppv+0x64>)
 801b6a4:	9305      	str	r3, [sp, #20]
 801b6a6:	2300      	movs	r3, #0
 801b6a8:	9304      	str	r3, [sp, #16]
 801b6aa:	2300      	movs	r3, #0
 801b6ac:	9303      	str	r3, [sp, #12]
 801b6ae:	2301      	movs	r3, #1
 801b6b0:	9302      	str	r3, [sp, #8]
 801b6b2:	2304      	movs	r3, #4
 801b6b4:	9301      	str	r3, [sp, #4]
 801b6b6:	2300      	movs	r3, #0
 801b6b8:	9300      	str	r3, [sp, #0]
 801b6ba:	2328      	movs	r3, #40	; 0x28
 801b6bc:	2200      	movs	r2, #0
 801b6be:	490a      	ldr	r1, [pc, #40]	; (801b6e8 <_Z23getFont_verdana_40_4bppv+0x68>)
 801b6c0:	480a      	ldr	r0, [pc, #40]	; (801b6ec <_Z23getFont_verdana_40_4bppv+0x6c>)
 801b6c2:	f7ff fec9 	bl	801b458 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801b6c6:	4b05      	ldr	r3, [pc, #20]	; (801b6dc <_Z23getFont_verdana_40_4bppv+0x5c>)
 801b6c8:	2201      	movs	r2, #1
 801b6ca:	601a      	str	r2, [r3, #0]
 801b6cc:	4808      	ldr	r0, [pc, #32]	; (801b6f0 <_Z23getFont_verdana_40_4bppv+0x70>)
 801b6ce:	f00f fd31 	bl	802b134 <atexit>
    return verdana_40_4bpp;
 801b6d2:	4b06      	ldr	r3, [pc, #24]	; (801b6ec <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 801b6d4:	4618      	mov	r0, r3
 801b6d6:	46bd      	mov	sp, r7
 801b6d8:	bd80      	pop	{r7, pc}
 801b6da:	bf00      	nop
 801b6dc:	20008d98 	.word	0x20008d98
 801b6e0:	9009bbd8 	.word	0x9009bbd8
 801b6e4:	0802d618 	.word	0x0802d618
 801b6e8:	9009bbfc 	.word	0x9009bbfc
 801b6ec:	20008d74 	.word	0x20008d74
 801b6f0:	0801b671 	.word	0x0801b671

0801b6f4 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 801b6f4:	b580      	push	{r7, lr}
 801b6f6:	b082      	sub	sp, #8
 801b6f8:	af00      	add	r7, sp, #0
 801b6fa:	6078      	str	r0, [r7, #4]
 801b6fc:	4a06      	ldr	r2, [pc, #24]	; (801b718 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	601a      	str	r2, [r3, #0]
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	3304      	adds	r3, #4
 801b706:	4618      	mov	r0, r3
 801b708:	f7f6 fe04 	bl	8012314 <_ZN8touchgfx9ContainerD1Ev>
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	4618      	mov	r0, r3
 801b710:	3708      	adds	r7, #8
 801b712:	46bd      	mov	sp, r7
 801b714:	bd80      	pop	{r7, pc}
 801b716:	bf00      	nop
 801b718:	0802f1e8 	.word	0x0802f1e8

0801b71c <_ZN8touchgfx6ScreenD0Ev>:
 801b71c:	b580      	push	{r7, lr}
 801b71e:	b082      	sub	sp, #8
 801b720:	af00      	add	r7, sp, #0
 801b722:	6078      	str	r0, [r7, #4]
 801b724:	6878      	ldr	r0, [r7, #4]
 801b726:	f7ff ffe5 	bl	801b6f4 <_ZN8touchgfx6ScreenD1Ev>
 801b72a:	213c      	movs	r1, #60	; 0x3c
 801b72c:	6878      	ldr	r0, [r7, #4]
 801b72e:	f00e fef8 	bl	802a522 <_ZdlPvj>
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	4618      	mov	r0, r3
 801b736:	3708      	adds	r7, #8
 801b738:	46bd      	mov	sp, r7
 801b73a:	bd80      	pop	{r7, pc}

0801b73c <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 801b73c:	b480      	push	{r7}
 801b73e:	b083      	sub	sp, #12
 801b740:	af00      	add	r7, sp, #0
 801b742:	6078      	str	r0, [r7, #4]
 801b744:	bf00      	nop
 801b746:	370c      	adds	r7, #12
 801b748:	46bd      	mov	sp, r7
 801b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b74e:	4770      	bx	lr

0801b750 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 801b750:	b480      	push	{r7}
 801b752:	b083      	sub	sp, #12
 801b754:	af00      	add	r7, sp, #0
 801b756:	6078      	str	r0, [r7, #4]
 801b758:	bf00      	nop
 801b75a:	370c      	adds	r7, #12
 801b75c:	46bd      	mov	sp, r7
 801b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b762:	4770      	bx	lr

0801b764 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 801b764:	b480      	push	{r7}
 801b766:	b083      	sub	sp, #12
 801b768:	af00      	add	r7, sp, #0
 801b76a:	6078      	str	r0, [r7, #4]
 801b76c:	bf00      	nop
 801b76e:	370c      	adds	r7, #12
 801b770:	46bd      	mov	sp, r7
 801b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b776:	4770      	bx	lr

0801b778 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 801b778:	b480      	push	{r7}
 801b77a:	b083      	sub	sp, #12
 801b77c:	af00      	add	r7, sp, #0
 801b77e:	6078      	str	r0, [r7, #4]
    {
    }
 801b780:	bf00      	nop
 801b782:	370c      	adds	r7, #12
 801b784:	46bd      	mov	sp, r7
 801b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b78a:	4770      	bx	lr

0801b78c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801b78c:	b480      	push	{r7}
 801b78e:	b083      	sub	sp, #12
 801b790:	af00      	add	r7, sp, #0
 801b792:	6078      	str	r0, [r7, #4]
 801b794:	460b      	mov	r3, r1
 801b796:	70fb      	strb	r3, [r7, #3]
    {
    }
 801b798:	bf00      	nop
 801b79a:	370c      	adds	r7, #12
 801b79c:	46bd      	mov	sp, r7
 801b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7a2:	4770      	bx	lr

0801b7a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 801b7a4:	b580      	push	{r7, lr}
 801b7a6:	b082      	sub	sp, #8
 801b7a8:	af00      	add	r7, sp, #0
 801b7aa:	6078      	str	r0, [r7, #4]
 801b7ac:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	3304      	adds	r3, #4
 801b7b2:	6839      	ldr	r1, [r7, #0]
 801b7b4:	4618      	mov	r0, r3
 801b7b6:	f7f7 f859 	bl	801286c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801b7ba:	bf00      	nop
 801b7bc:	3708      	adds	r7, #8
 801b7be:	46bd      	mov	sp, r7
 801b7c0:	bd80      	pop	{r7, pc}
	...

0801b7c4 <_ZN8touchgfx4ViewI16actitudPresenterED1Ev>:
 * @tparam T The type of Presenter associated with this view.
 *
 * @see Screen
 */
template<class T>
class View : public Screen
 801b7c4:	b580      	push	{r7, lr}
 801b7c6:	b082      	sub	sp, #8
 801b7c8:	af00      	add	r7, sp, #0
 801b7ca:	6078      	str	r0, [r7, #4]
 801b7cc:	4a05      	ldr	r2, [pc, #20]	; (801b7e4 <_ZN8touchgfx4ViewI16actitudPresenterED1Ev+0x20>)
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	601a      	str	r2, [r3, #0]
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	4618      	mov	r0, r3
 801b7d6:	f7ff ff8d 	bl	801b6f4 <_ZN8touchgfx6ScreenD1Ev>
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	4618      	mov	r0, r3
 801b7de:	3708      	adds	r7, #8
 801b7e0:	46bd      	mov	sp, r7
 801b7e2:	bd80      	pop	{r7, pc}
 801b7e4:	0802d670 	.word	0x0802d670

0801b7e8 <_ZN8touchgfx4ViewI16actitudPresenterED0Ev>:
 801b7e8:	b580      	push	{r7, lr}
 801b7ea:	b082      	sub	sp, #8
 801b7ec:	af00      	add	r7, sp, #0
 801b7ee:	6078      	str	r0, [r7, #4]
 801b7f0:	6878      	ldr	r0, [r7, #4]
 801b7f2:	f7ff ffe7 	bl	801b7c4 <_ZN8touchgfx4ViewI16actitudPresenterED1Ev>
 801b7f6:	2140      	movs	r1, #64	; 0x40
 801b7f8:	6878      	ldr	r0, [r7, #4]
 801b7fa:	f00e fe92 	bl	802a522 <_ZdlPvj>
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	4618      	mov	r0, r3
 801b802:	3708      	adds	r7, #8
 801b804:	46bd      	mov	sp, r7
 801b806:	bd80      	pop	{r7, pc}

0801b808 <_ZN15actitudViewBaseD1Ev>:

class actitudViewBase : public touchgfx::View<actitudPresenter>
{
public:
    actitudViewBase();
    virtual ~actitudViewBase() {}
 801b808:	b580      	push	{r7, lr}
 801b80a:	b082      	sub	sp, #8
 801b80c:	af00      	add	r7, sp, #0
 801b80e:	6078      	str	r0, [r7, #4]
 801b810:	4a16      	ldr	r2, [pc, #88]	; (801b86c <_ZN15actitudViewBaseD1Ev+0x64>)
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	601a      	str	r2, [r3, #0]
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 801b81c:	4618      	mov	r0, r3
 801b81e:	f000 fa2f 	bl	801bc80 <_ZN8touchgfx8CallbackI15actitudViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 801b828:	4618      	mov	r0, r3
 801b82a:	f7f6 fda1 	bl	8012370 <_ZN8touchgfx5ImageD1Ev>
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801b834:	4618      	mov	r0, r3
 801b836:	f7f9 facd 	bl	8014dd4 <_ZN8touchgfx13TextureMapperD1Ev>
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	33a4      	adds	r3, #164	; 0xa4
 801b83e:	4618      	mov	r0, r3
 801b840:	f7f9 fac8 	bl	8014dd4 <_ZN8touchgfx13TextureMapperD1Ev>
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	3370      	adds	r3, #112	; 0x70
 801b848:	4618      	mov	r0, r3
 801b84a:	f7f8 fa37 	bl	8013cbc <_ZN8touchgfx6ButtonD1Ev>
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	3340      	adds	r3, #64	; 0x40
 801b852:	4618      	mov	r0, r3
 801b854:	f7f8 f908 	bl	8013a68 <_ZN8touchgfx3BoxD1Ev>
 801b858:	687b      	ldr	r3, [r7, #4]
 801b85a:	4618      	mov	r0, r3
 801b85c:	f7ff ffb2 	bl	801b7c4 <_ZN8touchgfx4ViewI16actitudPresenterED1Ev>
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	4618      	mov	r0, r3
 801b864:	3708      	adds	r7, #8
 801b866:	46bd      	mov	sp, r7
 801b868:	bd80      	pop	{r7, pc}
 801b86a:	bf00      	nop
 801b86c:	0802d624 	.word	0x0802d624

0801b870 <_ZN15actitudViewBaseD0Ev>:
 801b870:	b580      	push	{r7, lr}
 801b872:	b082      	sub	sp, #8
 801b874:	af00      	add	r7, sp, #0
 801b876:	6078      	str	r0, [r7, #4]
 801b878:	6878      	ldr	r0, [r7, #4]
 801b87a:	f7ff ffc5 	bl	801b808 <_ZN15actitudViewBaseD1Ev>
 801b87e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b882:	6878      	ldr	r0, [r7, #4]
 801b884:	f00e fe4d 	bl	802a522 <_ZdlPvj>
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	4618      	mov	r0, r3
 801b88c:	3708      	adds	r7, #8
 801b88e:	46bd      	mov	sp, r7
 801b890:	bd80      	pop	{r7, pc}

0801b892 <_ZN15actitudViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 801b892:	b580      	push	{r7, lr}
 801b894:	b082      	sub	sp, #8
 801b896:	af00      	add	r7, sp, #0
 801b898:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 801b89a:	f008 fe95 	bl	80245c8 <_ZN8touchgfx11Application11getInstanceEv>
 801b89e:	4603      	mov	r3, r0
    }
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	3708      	adds	r7, #8
 801b8a4:	46bd      	mov	sp, r7
 801b8a6:	bd80      	pop	{r7, pc}

0801b8a8 <_ZN15actitudViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/actitud_screen/actitudViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"

actitudViewBase::actitudViewBase() :
 801b8a8:	b590      	push	{r4, r7, lr}
 801b8aa:	b08d      	sub	sp, #52	; 0x34
 801b8ac:	af02      	add	r7, sp, #8
 801b8ae:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &actitudViewBase::buttonCallbackHandler)
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	4618      	mov	r0, r3
 801b8b4:	f000 f9ae 	bl	801bc14 <_ZN8touchgfx4ViewI16actitudPresenterEC1Ev>
 801b8b8:	4abe      	ldr	r2, [pc, #760]	; (801bbb4 <_ZN15actitudViewBaseC1Ev+0x30c>)
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	601a      	str	r2, [r3, #0]
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	3340      	adds	r3, #64	; 0x40
 801b8c2:	4618      	mov	r0, r3
 801b8c4:	f7f8 f8b0 	bl	8013a28 <_ZN8touchgfx3BoxC1Ev>
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	3370      	adds	r3, #112	; 0x70
 801b8cc:	4618      	mov	r0, r3
 801b8ce:	f7f8 f9d1 	bl	8013c74 <_ZN8touchgfx6ButtonC1Ev>
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	33a4      	adds	r3, #164	; 0xa4
 801b8d6:	4618      	mov	r0, r3
 801b8d8:	f7f9 f9f4 	bl	8014cc4 <_ZN8touchgfx13TextureMapperC1Ev>
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801b8e2:	4618      	mov	r0, r3
 801b8e4:	f7f9 f9ee 	bl	8014cc4 <_ZN8touchgfx13TextureMapperC1Ev>
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	f503 74e2 	add.w	r4, r3, #452	; 0x1c4
 801b8ee:	f107 0308 	add.w	r3, r7, #8
 801b8f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b8f6:	4618      	mov	r0, r3
 801b8f8:	f7f6 fb5b 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801b8fc:	f107 0308 	add.w	r3, r7, #8
 801b900:	4619      	mov	r1, r3
 801b902:	4620      	mov	r0, r4
 801b904:	f7f7 fac2 	bl	8012e8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
 801b90e:	4baa      	ldr	r3, [pc, #680]	; (801bbb8 <_ZN15actitudViewBaseC1Ev+0x310>)
 801b910:	60fb      	str	r3, [r7, #12]
 801b912:	2300      	movs	r3, #0
 801b914:	613b      	str	r3, [r7, #16]
 801b916:	f107 030c 	add.w	r3, r7, #12
 801b91a:	cb0c      	ldmia	r3, {r2, r3}
 801b91c:	6879      	ldr	r1, [r7, #4]
 801b91e:	f000 f98f 	bl	801bc40 <_ZN8touchgfx8CallbackI15actitudViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    box1.setPosition(0, 0, 480, 272);
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801b928:	f44f 7388 	mov.w	r3, #272	; 0x110
 801b92c:	9300      	str	r3, [sp, #0]
 801b92e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801b932:	2200      	movs	r2, #0
 801b934:	2100      	movs	r1, #0
 801b936:	f7f6 fb6d 	bl	8012014 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(54, 54, 54));
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801b940:	2236      	movs	r2, #54	; 0x36
 801b942:	2136      	movs	r1, #54	; 0x36
 801b944:	2036      	movs	r0, #54	; 0x36
 801b946:	f7f7 fbb9 	bl	80130bc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801b94a:	4603      	mov	r3, r0
 801b94c:	4619      	mov	r1, r3
 801b94e:	4620      	mov	r0, r4
 801b950:	f7f8 f8ac 	bl	8013aac <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(0, 106);
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	3370      	adds	r3, #112	; 0x70
 801b958:	226a      	movs	r2, #106	; 0x6a
 801b95a:	2100      	movs	r1, #0
 801b95c:	4618      	mov	r0, r3
 801b95e:	f7f6 fba4 	bl	80120aa <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801b968:	f107 0314 	add.w	r3, r7, #20
 801b96c:	2101      	movs	r1, #1
 801b96e:	4618      	mov	r0, r3
 801b970:	f7f6 fb1f 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801b974:	f107 0318 	add.w	r3, r7, #24
 801b978:	2102      	movs	r1, #2
 801b97a:	4618      	mov	r0, r3
 801b97c:	f7f6 fb19 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801b980:	f107 0218 	add.w	r2, r7, #24
 801b984:	f107 0314 	add.w	r3, r7, #20
 801b988:	4619      	mov	r1, r3
 801b98a:	4620      	mov	r0, r4
 801b98c:	f7f8 fe29 	bl	80145e2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	f103 0270 	add.w	r2, r3, #112	; 0x70
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 801b99c:	4619      	mov	r1, r3
 801b99e:	4610      	mov	r0, r2
 801b9a0:	f7f8 f938 	bl	8013c14 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textureMapper1.setXY(170, 71);
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	33a4      	adds	r3, #164	; 0xa4
 801b9a8:	2247      	movs	r2, #71	; 0x47
 801b9aa:	21aa      	movs	r1, #170	; 0xaa
 801b9ac:	4618      	mov	r0, r3
 801b9ae:	f7f6 fb7c 	bl	80120aa <_ZN8touchgfx8Drawable5setXYEss>
    textureMapper1.setBitmap(touchgfx::Bitmap(BITMAP_HORIZON_GA_VAC_1_ID));
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801b9b8:	f107 031c 	add.w	r3, r7, #28
 801b9bc:	2106      	movs	r1, #6
 801b9be:	4618      	mov	r0, r3
 801b9c0:	f7f6 faf7 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801b9c4:	f107 031c 	add.w	r3, r7, #28
 801b9c8:	4619      	mov	r1, r3
 801b9ca:	4620      	mov	r0, r4
 801b9cc:	f7f9 fa24 	bl	8014e18 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
    textureMapper1.setWidth(140);
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	33a4      	adds	r3, #164	; 0xa4
 801b9d4:	218c      	movs	r1, #140	; 0x8c
 801b9d6:	4618      	mov	r0, r3
 801b9d8:	f7f6 fb85 	bl	80120e6 <_ZN8touchgfx8Drawable8setWidthEs>
    textureMapper1.setHeight(132);
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	33a4      	adds	r3, #164	; 0xa4
 801b9e0:	2184      	movs	r1, #132	; 0x84
 801b9e2:	4618      	mov	r0, r3
 801b9e4:	f7f6 fb8e 	bl	8012104 <_ZN8touchgfx8Drawable9setHeightEs>
    textureMapper1.setBitmapPosition(6.000f, -62.000f);
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	33a4      	adds	r3, #164	; 0xa4
 801b9ec:	eddf 0a73 	vldr	s1, [pc, #460]	; 801bbbc <_ZN15actitudViewBaseC1Ev+0x314>
 801b9f0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801b9f4:	4618      	mov	r0, r3
 801b9f6:	f7f8 fc0f 	bl	8014218 <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>
    textureMapper1.setScale(1.000f);
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	33a4      	adds	r3, #164	; 0xa4
 801b9fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ba02:	4618      	mov	r0, r3
 801ba04:	f7f9 ff46 	bl	8015894 <_ZN8touchgfx13TextureMapper8setScaleEf>
    textureMapper1.setCameraDistance(1000.000f);
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	33a4      	adds	r3, #164	; 0xa4
 801ba0c:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 801bbc0 <_ZN15actitudViewBaseC1Ev+0x318>
 801ba10:	4618      	mov	r0, r3
 801ba12:	f7f8 fbd6 	bl	80141c2 <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>
    textureMapper1.setOrigo(70.000f, 66.000f, 1000.000f);
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	33a4      	adds	r3, #164	; 0xa4
 801ba1a:	ed9f 1a69 	vldr	s2, [pc, #420]	; 801bbc0 <_ZN15actitudViewBaseC1Ev+0x318>
 801ba1e:	eddf 0a69 	vldr	s1, [pc, #420]	; 801bbc4 <_ZN15actitudViewBaseC1Ev+0x31c>
 801ba22:	ed9f 0a69 	vldr	s0, [pc, #420]	; 801bbc8 <_ZN15actitudViewBaseC1Ev+0x320>
 801ba26:	4618      	mov	r0, r3
 801ba28:	f7f8 fb3c 	bl	80140a4 <_ZN8touchgfx13TextureMapper8setOrigoEfff>
    textureMapper1.setCamera(70.000f, 66.000f);
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	33a4      	adds	r3, #164	; 0xa4
 801ba30:	eddf 0a64 	vldr	s1, [pc, #400]	; 801bbc4 <_ZN15actitudViewBaseC1Ev+0x31c>
 801ba34:	ed9f 0a64 	vldr	s0, [pc, #400]	; 801bbc8 <_ZN15actitudViewBaseC1Ev+0x320>
 801ba38:	4618      	mov	r0, r3
 801ba3a:	f7f8 fb8f 	bl	801415c <_ZN8touchgfx13TextureMapper9setCameraEff>
    textureMapper1.updateAngles(0.000f, 0.000f, 0.000f);
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	33a4      	adds	r3, #164	; 0xa4
 801ba42:	ed9f 1a62 	vldr	s2, [pc, #392]	; 801bbcc <_ZN15actitudViewBaseC1Ev+0x324>
 801ba46:	eddf 0a61 	vldr	s1, [pc, #388]	; 801bbcc <_ZN15actitudViewBaseC1Ev+0x324>
 801ba4a:	ed9f 0a60 	vldr	s0, [pc, #384]	; 801bbcc <_ZN15actitudViewBaseC1Ev+0x324>
 801ba4e:	4618      	mov	r0, r3
 801ba50:	f7f9 fee9 	bl	8015826 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
    textureMapper1.setRenderingAlgorithm(touchgfx::TextureMapper::NEAREST_NEIGHBOR);
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	33a4      	adds	r3, #164	; 0xa4
 801ba58:	2100      	movs	r1, #0
 801ba5a:	4618      	mov	r0, r3
 801ba5c:	f7f8 faa0 	bl	8013fa0 <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>

    textureMapper2.setXY(150, 46);
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801ba66:	222e      	movs	r2, #46	; 0x2e
 801ba68:	2196      	movs	r1, #150	; 0x96
 801ba6a:	4618      	mov	r0, r3
 801ba6c:	f7f6 fb1d 	bl	80120aa <_ZN8touchgfx8Drawable5setXYEss>
    textureMapper2.setBitmap(touchgfx::Bitmap(BITMAP_HORIZON_GA_VAC_3_ID));
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	f503 749a 	add.w	r4, r3, #308	; 0x134
 801ba76:	f107 0320 	add.w	r3, r7, #32
 801ba7a:	2107      	movs	r1, #7
 801ba7c:	4618      	mov	r0, r3
 801ba7e:	f7f6 fa98 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801ba82:	f107 0320 	add.w	r3, r7, #32
 801ba86:	4619      	mov	r1, r3
 801ba88:	4620      	mov	r0, r4
 801ba8a:	f7f9 f9c5 	bl	8014e18 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
    textureMapper2.setWidth(180);
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801ba94:	21b4      	movs	r1, #180	; 0xb4
 801ba96:	4618      	mov	r0, r3
 801ba98:	f7f6 fb25 	bl	80120e6 <_ZN8touchgfx8Drawable8setWidthEs>
    textureMapper2.setHeight(180);
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801baa2:	21b4      	movs	r1, #180	; 0xb4
 801baa4:	4618      	mov	r0, r3
 801baa6:	f7f6 fb2d 	bl	8012104 <_ZN8touchgfx8Drawable9setHeightEs>
    textureMapper2.setBitmapPosition(22.000f, 22.000f);
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801bab0:	eef3 0a06 	vmov.f32	s1, #54	; 0x41b00000  22.0
 801bab4:	eeb3 0a06 	vmov.f32	s0, #54	; 0x41b00000  22.0
 801bab8:	4618      	mov	r0, r3
 801baba:	f7f8 fbad 	bl	8014218 <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>
    textureMapper2.setScale(1.000f);
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801bac4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801bac8:	4618      	mov	r0, r3
 801baca:	f7f9 fee3 	bl	8015894 <_ZN8touchgfx13TextureMapper8setScaleEf>
    textureMapper2.setCameraDistance(1000.000f);
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801bad4:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 801bbc0 <_ZN15actitudViewBaseC1Ev+0x318>
 801bad8:	4618      	mov	r0, r3
 801bada:	f7f8 fb72 	bl	80141c2 <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>
    textureMapper2.setOrigo(90.000f, 90.000f, 1000.000f);
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801bae4:	ed9f 1a36 	vldr	s2, [pc, #216]	; 801bbc0 <_ZN15actitudViewBaseC1Ev+0x318>
 801bae8:	eddf 0a39 	vldr	s1, [pc, #228]	; 801bbd0 <_ZN15actitudViewBaseC1Ev+0x328>
 801baec:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801bbd0 <_ZN15actitudViewBaseC1Ev+0x328>
 801baf0:	4618      	mov	r0, r3
 801baf2:	f7f8 fad7 	bl	80140a4 <_ZN8touchgfx13TextureMapper8setOrigoEfff>
    textureMapper2.setCamera(90.000f, 90.000f);
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801bafc:	eddf 0a34 	vldr	s1, [pc, #208]	; 801bbd0 <_ZN15actitudViewBaseC1Ev+0x328>
 801bb00:	ed9f 0a33 	vldr	s0, [pc, #204]	; 801bbd0 <_ZN15actitudViewBaseC1Ev+0x328>
 801bb04:	4618      	mov	r0, r3
 801bb06:	f7f8 fb29 	bl	801415c <_ZN8touchgfx13TextureMapper9setCameraEff>
    textureMapper2.updateAngles(0.000f, 0.000f, 0.000f);
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801bb10:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 801bbcc <_ZN15actitudViewBaseC1Ev+0x324>
 801bb14:	eddf 0a2d 	vldr	s1, [pc, #180]	; 801bbcc <_ZN15actitudViewBaseC1Ev+0x324>
 801bb18:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801bbcc <_ZN15actitudViewBaseC1Ev+0x324>
 801bb1c:	4618      	mov	r0, r3
 801bb1e:	f7f9 fe82 	bl	8015826 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
    textureMapper2.setRenderingAlgorithm(touchgfx::TextureMapper::NEAREST_NEIGHBOR);
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801bb28:	2100      	movs	r1, #0
 801bb2a:	4618      	mov	r0, r3
 801bb2c:	f7f8 fa38 	bl	8013fa0 <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>

    image1.setXY(156, 53);
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 801bb36:	2235      	movs	r2, #53	; 0x35
 801bb38:	219c      	movs	r1, #156	; 0x9c
 801bb3a:	4618      	mov	r0, r3
 801bb3c:	f7f6 fab5 	bl	80120aa <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_HORIZON_GA_VAC_4_ID));
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	f503 74e2 	add.w	r4, r3, #452	; 0x1c4
 801bb46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bb4a:	2108      	movs	r1, #8
 801bb4c:	4618      	mov	r0, r3
 801bb4e:	f7f6 fa30 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801bb52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bb56:	4619      	mov	r1, r3
 801bb58:	4620      	mov	r0, r4
 801bb5a:	f7f8 fdb3 	bl	80146c4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(box1);
 801bb5e:	687a      	ldr	r2, [r7, #4]
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	3340      	adds	r3, #64	; 0x40
 801bb64:	4619      	mov	r1, r3
 801bb66:	4610      	mov	r0, r2
 801bb68:	f7ff fe1c 	bl	801b7a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 801bb6c:	687a      	ldr	r2, [r7, #4]
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	3370      	adds	r3, #112	; 0x70
 801bb72:	4619      	mov	r1, r3
 801bb74:	4610      	mov	r0, r2
 801bb76:	f7ff fe15 	bl	801b7a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textureMapper1);
 801bb7a:	687a      	ldr	r2, [r7, #4]
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	33a4      	adds	r3, #164	; 0xa4
 801bb80:	4619      	mov	r1, r3
 801bb82:	4610      	mov	r0, r2
 801bb84:	f7ff fe0e 	bl	801b7a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textureMapper2);
 801bb88:	687a      	ldr	r2, [r7, #4]
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801bb90:	4619      	mov	r1, r3
 801bb92:	4610      	mov	r0, r2
 801bb94:	f7ff fe06 	bl	801b7a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 801bb98:	687a      	ldr	r2, [r7, #4]
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 801bba0:	4619      	mov	r1, r3
 801bba2:	4610      	mov	r0, r2
 801bba4:	f7ff fdfe 	bl	801b7a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	4618      	mov	r0, r3
 801bbac:	372c      	adds	r7, #44	; 0x2c
 801bbae:	46bd      	mov	sp, r7
 801bbb0:	bd90      	pop	{r4, r7, pc}
 801bbb2:	bf00      	nop
 801bbb4:	0802d624 	.word	0x0802d624
 801bbb8:	0801bbe9 	.word	0x0801bbe9
 801bbbc:	c2780000 	.word	0xc2780000
 801bbc0:	447a0000 	.word	0x447a0000
 801bbc4:	42840000 	.word	0x42840000
 801bbc8:	428c0000 	.word	0x428c0000
 801bbcc:	00000000 	.word	0x00000000
 801bbd0:	42b40000 	.word	0x42b40000

0801bbd4 <_ZN15actitudViewBase11setupScreenEv>:

void actitudViewBase::setupScreen()
{
 801bbd4:	b480      	push	{r7}
 801bbd6:	b083      	sub	sp, #12
 801bbd8:	af00      	add	r7, sp, #0
 801bbda:	6078      	str	r0, [r7, #4]

}
 801bbdc:	bf00      	nop
 801bbde:	370c      	adds	r7, #12
 801bbe0:	46bd      	mov	sp, r7
 801bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbe6:	4770      	bx	lr

0801bbe8 <_ZN15actitudViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void actitudViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 801bbe8:	b580      	push	{r7, lr}
 801bbea:	b082      	sub	sp, #8
 801bbec:	af00      	add	r7, sp, #0
 801bbee:	6078      	str	r0, [r7, #4]
 801bbf0:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	3370      	adds	r3, #112	; 0x70
 801bbf6:	683a      	ldr	r2, [r7, #0]
 801bbf8:	429a      	cmp	r2, r3
 801bbfa:	d106      	bne.n	801bc0a <_ZN15actitudViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to direccion
        //Go to direccion with screen transition towards West
        application().gotodireccionScreenSlideTransitionWest();
 801bbfc:	6878      	ldr	r0, [r7, #4]
 801bbfe:	f7ff fe48 	bl	801b892 <_ZN15actitudViewBase11applicationEv>
 801bc02:	4603      	mov	r3, r0
 801bc04:	4618      	mov	r0, r3
 801bc06:	f000 fe41 	bl	801c88c <_ZN23FrontendApplicationBase38gotodireccionScreenSlideTransitionWestEv>
    }
}
 801bc0a:	bf00      	nop
 801bc0c:	3708      	adds	r7, #8
 801bc0e:	46bd      	mov	sp, r7
 801bc10:	bd80      	pop	{r7, pc}
	...

0801bc14 <_ZN8touchgfx4ViewI16actitudPresenterEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    View() : presenter(0)
 801bc14:	b580      	push	{r7, lr}
 801bc16:	b082      	sub	sp, #8
 801bc18:	af00      	add	r7, sp, #0
 801bc1a:	6078      	str	r0, [r7, #4]
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	4618      	mov	r0, r3
 801bc20:	f009 fcd0 	bl	80255c4 <_ZN8touchgfx6ScreenC1Ev>
 801bc24:	4a05      	ldr	r2, [pc, #20]	; (801bc3c <_ZN8touchgfx4ViewI16actitudPresenterEC1Ev+0x28>)
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	601a      	str	r2, [r3, #0]
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	2200      	movs	r2, #0
 801bc2e:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	4618      	mov	r0, r3
 801bc34:	3708      	adds	r7, #8
 801bc36:	46bd      	mov	sp, r7
 801bc38:	bd80      	pop	{r7, pc}
 801bc3a:	bf00      	nop
 801bc3c:	0802d670 	.word	0x0802d670

0801bc40 <_ZN8touchgfx8CallbackI15actitudViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_1 Address of member function. This is the version where function
     *                       takes one argument.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801bc40:	b580      	push	{r7, lr}
 801bc42:	b084      	sub	sp, #16
 801bc44:	af00      	add	r7, sp, #0
 801bc46:	60f8      	str	r0, [r7, #12]
 801bc48:	60b9      	str	r1, [r7, #8]
 801bc4a:	4639      	mov	r1, r7
 801bc4c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801bc50:	68fb      	ldr	r3, [r7, #12]
 801bc52:	4618      	mov	r0, r3
 801bc54:	f7f8 f854 	bl	8013d00 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 801bc58:	4a08      	ldr	r2, [pc, #32]	; (801bc7c <_ZN8touchgfx8CallbackI15actitudViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801bc5a:	68fb      	ldr	r3, [r7, #12]
 801bc5c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801bc5e:	68fb      	ldr	r3, [r7, #12]
 801bc60:	68ba      	ldr	r2, [r7, #8]
 801bc62:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801bc64:	68fb      	ldr	r3, [r7, #12]
 801bc66:	3308      	adds	r3, #8
 801bc68:	463a      	mov	r2, r7
 801bc6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bc6e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801bc72:	68fb      	ldr	r3, [r7, #12]
 801bc74:	4618      	mov	r0, r3
 801bc76:	3710      	adds	r7, #16
 801bc78:	46bd      	mov	sp, r7
 801bc7a:	bd80      	pop	{r7, pc}
 801bc7c:	0802d658 	.word	0x0802d658

0801bc80 <_ZN8touchgfx8CallbackI15actitudViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801bc80:	b580      	push	{r7, lr}
 801bc82:	b082      	sub	sp, #8
 801bc84:	af00      	add	r7, sp, #0
 801bc86:	6078      	str	r0, [r7, #4]
 801bc88:	4a05      	ldr	r2, [pc, #20]	; (801bca0 <_ZN8touchgfx8CallbackI15actitudViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	601a      	str	r2, [r3, #0]
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	4618      	mov	r0, r3
 801bc92:	f7f8 f845 	bl	8013d20 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	4618      	mov	r0, r3
 801bc9a:	3708      	adds	r7, #8
 801bc9c:	46bd      	mov	sp, r7
 801bc9e:	bd80      	pop	{r7, pc}
 801bca0:	0802d658 	.word	0x0802d658

0801bca4 <_ZN8touchgfx8CallbackI15actitudViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 801bca4:	b580      	push	{r7, lr}
 801bca6:	b082      	sub	sp, #8
 801bca8:	af00      	add	r7, sp, #0
 801bcaa:	6078      	str	r0, [r7, #4]
 801bcac:	6878      	ldr	r0, [r7, #4]
 801bcae:	f7ff ffe7 	bl	801bc80 <_ZN8touchgfx8CallbackI15actitudViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801bcb2:	2110      	movs	r1, #16
 801bcb4:	6878      	ldr	r0, [r7, #4]
 801bcb6:	f00e fc34 	bl	802a522 <_ZdlPvj>
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	4618      	mov	r0, r3
 801bcbe:	3708      	adds	r7, #8
 801bcc0:	46bd      	mov	sp, r7
 801bcc2:	bd80      	pop	{r7, pc}

0801bcc4 <_ZN8touchgfx8CallbackI15actitudViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
     *
     * @param t1 This value will be passed as the first argument in the function call.
     *
     * @see isValid()
     */
    virtual void execute(T1 t1)
 801bcc4:	b580      	push	{r7, lr}
 801bcc6:	b082      	sub	sp, #8
 801bcc8:	af00      	add	r7, sp, #0
 801bcca:	6078      	str	r0, [r7, #4]
 801bccc:	6039      	str	r1, [r7, #0]
    {
        (pobject->*pmemfun_1)(t1);
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	685b      	ldr	r3, [r3, #4]
 801bcd2:	687a      	ldr	r2, [r7, #4]
 801bcd4:	68d2      	ldr	r2, [r2, #12]
 801bcd6:	1052      	asrs	r2, r2, #1
 801bcd8:	1898      	adds	r0, r3, r2
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	68db      	ldr	r3, [r3, #12]
 801bcde:	f003 0301 	and.w	r3, r3, #1
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d102      	bne.n	801bcec <_ZN8touchgfx8CallbackI15actitudViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	689b      	ldr	r3, [r3, #8]
 801bcea:	e00a      	b.n	801bd02 <_ZN8touchgfx8CallbackI15actitudViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	685b      	ldr	r3, [r3, #4]
 801bcf0:	687a      	ldr	r2, [r7, #4]
 801bcf2:	68d2      	ldr	r2, [r2, #12]
 801bcf4:	1052      	asrs	r2, r2, #1
 801bcf6:	4413      	add	r3, r2
 801bcf8:	681b      	ldr	r3, [r3, #0]
 801bcfa:	687a      	ldr	r2, [r7, #4]
 801bcfc:	6892      	ldr	r2, [r2, #8]
 801bcfe:	4413      	add	r3, r2
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	6839      	ldr	r1, [r7, #0]
 801bd04:	4798      	blx	r3
    }
 801bd06:	bf00      	nop
 801bd08:	3708      	adds	r7, #8
 801bd0a:	46bd      	mov	sp, r7
 801bd0c:	bd80      	pop	{r7, pc}

0801bd0e <_ZNK8touchgfx8CallbackI15actitudViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
     *
     *        Query if this object is valid.
     *
     * @return true if valid, false if not.
     */
    virtual bool isValid() const
 801bd0e:	b480      	push	{r7}
 801bd10:	b083      	sub	sp, #12
 801bd12:	af00      	add	r7, sp, #0
 801bd14:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_1 != 0);
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	685b      	ldr	r3, [r3, #4]
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	d010      	beq.n	801bd40 <_ZNK8touchgfx8CallbackI15actitudViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801bd1e:	687b      	ldr	r3, [r7, #4]
 801bd20:	689b      	ldr	r3, [r3, #8]
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d107      	bne.n	801bd36 <_ZNK8touchgfx8CallbackI15actitudViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	68db      	ldr	r3, [r3, #12]
 801bd2a:	f003 0301 	and.w	r3, r3, #1
 801bd2e:	2b00      	cmp	r3, #0
 801bd30:	d101      	bne.n	801bd36 <_ZNK8touchgfx8CallbackI15actitudViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801bd32:	2301      	movs	r3, #1
 801bd34:	e000      	b.n	801bd38 <_ZNK8touchgfx8CallbackI15actitudViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801bd36:	2300      	movs	r3, #0
 801bd38:	2b01      	cmp	r3, #1
 801bd3a:	d001      	beq.n	801bd40 <_ZNK8touchgfx8CallbackI15actitudViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801bd3c:	2301      	movs	r3, #1
 801bd3e:	e000      	b.n	801bd42 <_ZNK8touchgfx8CallbackI15actitudViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801bd40:	2300      	movs	r3, #0
    }
 801bd42:	4618      	mov	r0, r3
 801bd44:	370c      	adds	r7, #12
 801bd46:	46bd      	mov	sp, r7
 801bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd4c:	4770      	bx	lr
	...

0801bd50 <_ZN8touchgfx4ViewI19anemometroPresenterED1Ev>:
class View : public Screen
 801bd50:	b580      	push	{r7, lr}
 801bd52:	b082      	sub	sp, #8
 801bd54:	af00      	add	r7, sp, #0
 801bd56:	6078      	str	r0, [r7, #4]
 801bd58:	4a05      	ldr	r2, [pc, #20]	; (801bd70 <_ZN8touchgfx4ViewI19anemometroPresenterED1Ev+0x20>)
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	601a      	str	r2, [r3, #0]
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	4618      	mov	r0, r3
 801bd62:	f7ff fcc7 	bl	801b6f4 <_ZN8touchgfx6ScreenD1Ev>
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	4618      	mov	r0, r3
 801bd6a:	3708      	adds	r7, #8
 801bd6c:	46bd      	mov	sp, r7
 801bd6e:	bd80      	pop	{r7, pc}
 801bd70:	0802d6f0 	.word	0x0802d6f0

0801bd74 <_ZN8touchgfx4ViewI19anemometroPresenterED0Ev>:
 801bd74:	b580      	push	{r7, lr}
 801bd76:	b082      	sub	sp, #8
 801bd78:	af00      	add	r7, sp, #0
 801bd7a:	6078      	str	r0, [r7, #4]
 801bd7c:	6878      	ldr	r0, [r7, #4]
 801bd7e:	f7ff ffe7 	bl	801bd50 <_ZN8touchgfx4ViewI19anemometroPresenterED1Ev>
 801bd82:	2140      	movs	r1, #64	; 0x40
 801bd84:	6878      	ldr	r0, [r7, #4]
 801bd86:	f00e fbcc 	bl	802a522 <_ZdlPvj>
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	4618      	mov	r0, r3
 801bd8e:	3708      	adds	r7, #8
 801bd90:	46bd      	mov	sp, r7
 801bd92:	bd80      	pop	{r7, pc}

0801bd94 <_ZN18anemometroViewBaseD1Ev>:

class anemometroViewBase : public touchgfx::View<anemometroPresenter>
{
public:
    anemometroViewBase();
    virtual ~anemometroViewBase() {}
 801bd94:	b580      	push	{r7, lr}
 801bd96:	b082      	sub	sp, #8
 801bd98:	af00      	add	r7, sp, #0
 801bd9a:	6078      	str	r0, [r7, #4]
 801bd9c:	4a10      	ldr	r2, [pc, #64]	; (801bde0 <_ZN18anemometroViewBaseD1Ev+0x4c>)
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	601a      	str	r2, [r3, #0]
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801bda8:	4618      	mov	r0, r3
 801bdaa:	f000 f93b 	bl	801c024 <_ZN8touchgfx8CallbackI18anemometroViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	33a4      	adds	r3, #164	; 0xa4
 801bdb2:	4618      	mov	r0, r3
 801bdb4:	f7f7 fa30 	bl	8013218 <_ZN5GaugeD1Ev>
 801bdb8:	687b      	ldr	r3, [r7, #4]
 801bdba:	3370      	adds	r3, #112	; 0x70
 801bdbc:	4618      	mov	r0, r3
 801bdbe:	f7f7 ff7d 	bl	8013cbc <_ZN8touchgfx6ButtonD1Ev>
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	3340      	adds	r3, #64	; 0x40
 801bdc6:	4618      	mov	r0, r3
 801bdc8:	f7f7 fe4e 	bl	8013a68 <_ZN8touchgfx3BoxD1Ev>
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	4618      	mov	r0, r3
 801bdd0:	f7ff ffbe 	bl	801bd50 <_ZN8touchgfx4ViewI19anemometroPresenterED1Ev>
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	4618      	mov	r0, r3
 801bdd8:	3708      	adds	r7, #8
 801bdda:	46bd      	mov	sp, r7
 801bddc:	bd80      	pop	{r7, pc}
 801bdde:	bf00      	nop
 801bde0:	0802d6a4 	.word	0x0802d6a4

0801bde4 <_ZN18anemometroViewBaseD0Ev>:
 801bde4:	b580      	push	{r7, lr}
 801bde6:	b082      	sub	sp, #8
 801bde8:	af00      	add	r7, sp, #0
 801bdea:	6078      	str	r0, [r7, #4]
 801bdec:	6878      	ldr	r0, [r7, #4]
 801bdee:	f7ff ffd1 	bl	801bd94 <_ZN18anemometroViewBaseD1Ev>
 801bdf2:	f243 1178 	movw	r1, #12664	; 0x3178
 801bdf6:	6878      	ldr	r0, [r7, #4]
 801bdf8:	f00e fb93 	bl	802a522 <_ZdlPvj>
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	4618      	mov	r0, r3
 801be00:	3708      	adds	r7, #8
 801be02:	46bd      	mov	sp, r7
 801be04:	bd80      	pop	{r7, pc}

0801be06 <_ZN18anemometroViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 801be06:	b580      	push	{r7, lr}
 801be08:	b082      	sub	sp, #8
 801be0a:	af00      	add	r7, sp, #0
 801be0c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 801be0e:	f008 fbdb 	bl	80245c8 <_ZN8touchgfx11Application11getInstanceEv>
 801be12:	4603      	mov	r3, r0
    }
 801be14:	4618      	mov	r0, r3
 801be16:	3708      	adds	r7, #8
 801be18:	46bd      	mov	sp, r7
 801be1a:	bd80      	pop	{r7, pc}

0801be1c <_ZN18anemometroViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/anemometro_screen/anemometroViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"

anemometroViewBase::anemometroViewBase() :
 801be1c:	b590      	push	{r4, r7, lr}
 801be1e:	b08b      	sub	sp, #44	; 0x2c
 801be20:	af02      	add	r7, sp, #8
 801be22:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &anemometroViewBase::buttonCallbackHandler)
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	4618      	mov	r0, r3
 801be28:	f000 f8c6 	bl	801bfb8 <_ZN8touchgfx4ViewI19anemometroPresenterEC1Ev>
 801be2c:	4a50      	ldr	r2, [pc, #320]	; (801bf70 <_ZN18anemometroViewBaseC1Ev+0x154>)
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	601a      	str	r2, [r3, #0]
 801be32:	687b      	ldr	r3, [r7, #4]
 801be34:	3340      	adds	r3, #64	; 0x40
 801be36:	4618      	mov	r0, r3
 801be38:	f7f7 fdf6 	bl	8013a28 <_ZN8touchgfx3BoxC1Ev>
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	3370      	adds	r3, #112	; 0x70
 801be40:	4618      	mov	r0, r3
 801be42:	f7f7 ff17 	bl	8013c74 <_ZN8touchgfx6ButtonC1Ev>
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	33a4      	adds	r3, #164	; 0xa4
 801be4a:	4618      	mov	r0, r3
 801be4c:	f7f7 f960 	bl	8013110 <_ZN5GaugeC1Ev>
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	f503 7022 	add.w	r0, r3, #648	; 0x288
 801be56:	4b47      	ldr	r3, [pc, #284]	; (801bf74 <_ZN18anemometroViewBaseC1Ev+0x158>)
 801be58:	60fb      	str	r3, [r7, #12]
 801be5a:	2300      	movs	r3, #0
 801be5c:	613b      	str	r3, [r7, #16]
 801be5e:	f107 030c 	add.w	r3, r7, #12
 801be62:	cb0c      	ldmia	r3, {r2, r3}
 801be64:	6879      	ldr	r1, [r7, #4]
 801be66:	f000 f8bd 	bl	801bfe4 <_ZN8touchgfx8CallbackI18anemometroViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
	touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 801be70:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 801be74:	4618      	mov	r0, r3
 801be76:	f007 fe85 	bl	8023b84 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    box1.setPosition(0, 0, 480, 272);
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801be80:	f44f 7388 	mov.w	r3, #272	; 0x110
 801be84:	9300      	str	r3, [sp, #0]
 801be86:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801be8a:	2200      	movs	r2, #0
 801be8c:	2100      	movs	r1, #0
 801be8e:	f7f6 f8c1 	bl	8012014 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(54, 54, 54));
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801be98:	2236      	movs	r2, #54	; 0x36
 801be9a:	2136      	movs	r1, #54	; 0x36
 801be9c:	2036      	movs	r0, #54	; 0x36
 801be9e:	f7f7 f90d 	bl	80130bc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801bea2:	4603      	mov	r3, r0
 801bea4:	4619      	mov	r1, r3
 801bea6:	4620      	mov	r0, r4
 801bea8:	f7f7 fe00 	bl	8013aac <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(420, 106);
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	3370      	adds	r3, #112	; 0x70
 801beb0:	226a      	movs	r2, #106	; 0x6a
 801beb2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 801beb6:	4618      	mov	r0, r3
 801beb8:	f7f6 f8f7 	bl	80120aa <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801bec2:	f107 0314 	add.w	r3, r7, #20
 801bec6:	2101      	movs	r1, #1
 801bec8:	4618      	mov	r0, r3
 801beca:	f7f6 f872 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801bece:	f107 0318 	add.w	r3, r7, #24
 801bed2:	2102      	movs	r1, #2
 801bed4:	4618      	mov	r0, r3
 801bed6:	f7f6 f86c 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801beda:	f107 0218 	add.w	r2, r7, #24
 801bede:	f107 0314 	add.w	r3, r7, #20
 801bee2:	4619      	mov	r1, r3
 801bee4:	4620      	mov	r0, r4
 801bee6:	f7f8 fb7c 	bl	80145e2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	f103 0270 	add.w	r2, r3, #112	; 0x70
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801bef6:	4619      	mov	r1, r3
 801bef8:	4610      	mov	r0, r2
 801befa:	f7f7 fe8b 	bl	8013c14 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    gauge1.setXY(140, 36);
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	33a4      	adds	r3, #164	; 0xa4
 801bf02:	2224      	movs	r2, #36	; 0x24
 801bf04:	218c      	movs	r1, #140	; 0x8c
 801bf06:	4618      	mov	r0, r3
 801bf08:	f7f6 f8cf 	bl	80120aa <_ZN8touchgfx8Drawable5setXYEss>
    gauge1.setBitmaps(Bitmap(BITMAP_ASI_ADAP_GA_ID));
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801bf12:	f107 031c 	add.w	r3, r7, #28
 801bf16:	2100      	movs	r1, #0
 801bf18:	4618      	mov	r0, r3
 801bf1a:	f7f6 f84a 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801bf1e:	8bb9      	ldrh	r1, [r7, #28]
 801bf20:	4620      	mov	r0, r4
 801bf22:	f7f7 f9be 	bl	80132a2 <_ZN5Gauge10setBitmapsEN8touchgfx6BitmapE>
    gauge1.setLimits(30, 220, 44, 330);
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 801bf2c:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 801bf30:	9300      	str	r3, [sp, #0]
 801bf32:	232c      	movs	r3, #44	; 0x2c
 801bf34:	22dc      	movs	r2, #220	; 0xdc
 801bf36:	211e      	movs	r1, #30
 801bf38:	f7f7 fa34 	bl	80133a4 <_ZN5Gauge9setLimitsEiiii>

    add(box1);
 801bf3c:	687a      	ldr	r2, [r7, #4]
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	3340      	adds	r3, #64	; 0x40
 801bf42:	4619      	mov	r1, r3
 801bf44:	4610      	mov	r0, r2
 801bf46:	f7ff fc2d 	bl	801b7a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 801bf4a:	687a      	ldr	r2, [r7, #4]
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	3370      	adds	r3, #112	; 0x70
 801bf50:	4619      	mov	r1, r3
 801bf52:	4610      	mov	r0, r2
 801bf54:	f7ff fc26 	bl	801b7a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gauge1);
 801bf58:	687a      	ldr	r2, [r7, #4]
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	33a4      	adds	r3, #164	; 0xa4
 801bf5e:	4619      	mov	r1, r3
 801bf60:	4610      	mov	r0, r2
 801bf62:	f7ff fc1f 	bl	801b7a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	4618      	mov	r0, r3
 801bf6a:	3724      	adds	r7, #36	; 0x24
 801bf6c:	46bd      	mov	sp, r7
 801bf6e:	bd90      	pop	{r4, r7, pc}
 801bf70:	0802d6a4 	.word	0x0802d6a4
 801bf74:	0801bf8d 	.word	0x0801bf8d

0801bf78 <_ZN18anemometroViewBase11setupScreenEv>:

void anemometroViewBase::setupScreen()
{
 801bf78:	b480      	push	{r7}
 801bf7a:	b083      	sub	sp, #12
 801bf7c:	af00      	add	r7, sp, #0
 801bf7e:	6078      	str	r0, [r7, #4]

}
 801bf80:	bf00      	nop
 801bf82:	370c      	adds	r7, #12
 801bf84:	46bd      	mov	sp, r7
 801bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf8a:	4770      	bx	lr

0801bf8c <_ZN18anemometroViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void anemometroViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 801bf8c:	b580      	push	{r7, lr}
 801bf8e:	b082      	sub	sp, #8
 801bf90:	af00      	add	r7, sp, #0
 801bf92:	6078      	str	r0, [r7, #4]
 801bf94:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 801bf96:	687b      	ldr	r3, [r7, #4]
 801bf98:	3370      	adds	r3, #112	; 0x70
 801bf9a:	683a      	ldr	r2, [r7, #0]
 801bf9c:	429a      	cmp	r2, r3
 801bf9e:	d106      	bne.n	801bfae <_ZN18anemometroViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to direccion
        //Go to direccion with screen transition towards East
        application().gotodireccionScreenSlideTransitionEast();
 801bfa0:	6878      	ldr	r0, [r7, #4]
 801bfa2:	f7ff ff30 	bl	801be06 <_ZN18anemometroViewBase11applicationEv>
 801bfa6:	4603      	mov	r3, r0
 801bfa8:	4618      	mov	r0, r3
 801bfaa:	f000 fc29 	bl	801c800 <_ZN23FrontendApplicationBase38gotodireccionScreenSlideTransitionEastEv>
    }
}
 801bfae:	bf00      	nop
 801bfb0:	3708      	adds	r7, #8
 801bfb2:	46bd      	mov	sp, r7
 801bfb4:	bd80      	pop	{r7, pc}
	...

0801bfb8 <_ZN8touchgfx4ViewI19anemometroPresenterEC1Ev>:
    View() : presenter(0)
 801bfb8:	b580      	push	{r7, lr}
 801bfba:	b082      	sub	sp, #8
 801bfbc:	af00      	add	r7, sp, #0
 801bfbe:	6078      	str	r0, [r7, #4]
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	4618      	mov	r0, r3
 801bfc4:	f009 fafe 	bl	80255c4 <_ZN8touchgfx6ScreenC1Ev>
 801bfc8:	4a05      	ldr	r2, [pc, #20]	; (801bfe0 <_ZN8touchgfx4ViewI19anemometroPresenterEC1Ev+0x28>)
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	601a      	str	r2, [r3, #0]
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	2200      	movs	r2, #0
 801bfd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	4618      	mov	r0, r3
 801bfd8:	3708      	adds	r7, #8
 801bfda:	46bd      	mov	sp, r7
 801bfdc:	bd80      	pop	{r7, pc}
 801bfde:	bf00      	nop
 801bfe0:	0802d6f0 	.word	0x0802d6f0

0801bfe4 <_ZN8touchgfx8CallbackI18anemometroViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801bfe4:	b580      	push	{r7, lr}
 801bfe6:	b084      	sub	sp, #16
 801bfe8:	af00      	add	r7, sp, #0
 801bfea:	60f8      	str	r0, [r7, #12]
 801bfec:	60b9      	str	r1, [r7, #8]
 801bfee:	4639      	mov	r1, r7
 801bff0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801bff4:	68fb      	ldr	r3, [r7, #12]
 801bff6:	4618      	mov	r0, r3
 801bff8:	f7f7 fe82 	bl	8013d00 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 801bffc:	4a08      	ldr	r2, [pc, #32]	; (801c020 <_ZN8touchgfx8CallbackI18anemometroViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801bffe:	68fb      	ldr	r3, [r7, #12]
 801c000:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	68ba      	ldr	r2, [r7, #8]
 801c006:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801c008:	68fb      	ldr	r3, [r7, #12]
 801c00a:	3308      	adds	r3, #8
 801c00c:	463a      	mov	r2, r7
 801c00e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c012:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801c016:	68fb      	ldr	r3, [r7, #12]
 801c018:	4618      	mov	r0, r3
 801c01a:	3710      	adds	r7, #16
 801c01c:	46bd      	mov	sp, r7
 801c01e:	bd80      	pop	{r7, pc}
 801c020:	0802d6d8 	.word	0x0802d6d8

0801c024 <_ZN8touchgfx8CallbackI18anemometroViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801c024:	b580      	push	{r7, lr}
 801c026:	b082      	sub	sp, #8
 801c028:	af00      	add	r7, sp, #0
 801c02a:	6078      	str	r0, [r7, #4]
 801c02c:	4a05      	ldr	r2, [pc, #20]	; (801c044 <_ZN8touchgfx8CallbackI18anemometroViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	601a      	str	r2, [r3, #0]
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	4618      	mov	r0, r3
 801c036:	f7f7 fe73 	bl	8013d20 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801c03a:	687b      	ldr	r3, [r7, #4]
 801c03c:	4618      	mov	r0, r3
 801c03e:	3708      	adds	r7, #8
 801c040:	46bd      	mov	sp, r7
 801c042:	bd80      	pop	{r7, pc}
 801c044:	0802d6d8 	.word	0x0802d6d8

0801c048 <_ZN8touchgfx8CallbackI18anemometroViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 801c048:	b580      	push	{r7, lr}
 801c04a:	b082      	sub	sp, #8
 801c04c:	af00      	add	r7, sp, #0
 801c04e:	6078      	str	r0, [r7, #4]
 801c050:	6878      	ldr	r0, [r7, #4]
 801c052:	f7ff ffe7 	bl	801c024 <_ZN8touchgfx8CallbackI18anemometroViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801c056:	2110      	movs	r1, #16
 801c058:	6878      	ldr	r0, [r7, #4]
 801c05a:	f00e fa62 	bl	802a522 <_ZdlPvj>
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	4618      	mov	r0, r3
 801c062:	3708      	adds	r7, #8
 801c064:	46bd      	mov	sp, r7
 801c066:	bd80      	pop	{r7, pc}

0801c068 <_ZN8touchgfx8CallbackI18anemometroViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 801c068:	b580      	push	{r7, lr}
 801c06a:	b082      	sub	sp, #8
 801c06c:	af00      	add	r7, sp, #0
 801c06e:	6078      	str	r0, [r7, #4]
 801c070:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	685b      	ldr	r3, [r3, #4]
 801c076:	687a      	ldr	r2, [r7, #4]
 801c078:	68d2      	ldr	r2, [r2, #12]
 801c07a:	1052      	asrs	r2, r2, #1
 801c07c:	1898      	adds	r0, r3, r2
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	68db      	ldr	r3, [r3, #12]
 801c082:	f003 0301 	and.w	r3, r3, #1
 801c086:	2b00      	cmp	r3, #0
 801c088:	d102      	bne.n	801c090 <_ZN8touchgfx8CallbackI18anemometroViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	689b      	ldr	r3, [r3, #8]
 801c08e:	e00a      	b.n	801c0a6 <_ZN8touchgfx8CallbackI18anemometroViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	685b      	ldr	r3, [r3, #4]
 801c094:	687a      	ldr	r2, [r7, #4]
 801c096:	68d2      	ldr	r2, [r2, #12]
 801c098:	1052      	asrs	r2, r2, #1
 801c09a:	4413      	add	r3, r2
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	687a      	ldr	r2, [r7, #4]
 801c0a0:	6892      	ldr	r2, [r2, #8]
 801c0a2:	4413      	add	r3, r2
 801c0a4:	681b      	ldr	r3, [r3, #0]
 801c0a6:	6839      	ldr	r1, [r7, #0]
 801c0a8:	4798      	blx	r3
    }
 801c0aa:	bf00      	nop
 801c0ac:	3708      	adds	r7, #8
 801c0ae:	46bd      	mov	sp, r7
 801c0b0:	bd80      	pop	{r7, pc}

0801c0b2 <_ZNK8touchgfx8CallbackI18anemometroViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801c0b2:	b480      	push	{r7}
 801c0b4:	b083      	sub	sp, #12
 801c0b6:	af00      	add	r7, sp, #0
 801c0b8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	685b      	ldr	r3, [r3, #4]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d010      	beq.n	801c0e4 <_ZNK8touchgfx8CallbackI18anemometroViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	689b      	ldr	r3, [r3, #8]
 801c0c6:	2b00      	cmp	r3, #0
 801c0c8:	d107      	bne.n	801c0da <_ZNK8touchgfx8CallbackI18anemometroViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	68db      	ldr	r3, [r3, #12]
 801c0ce:	f003 0301 	and.w	r3, r3, #1
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d101      	bne.n	801c0da <_ZNK8touchgfx8CallbackI18anemometroViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801c0d6:	2301      	movs	r3, #1
 801c0d8:	e000      	b.n	801c0dc <_ZNK8touchgfx8CallbackI18anemometroViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801c0da:	2300      	movs	r3, #0
 801c0dc:	2b01      	cmp	r3, #1
 801c0de:	d001      	beq.n	801c0e4 <_ZNK8touchgfx8CallbackI18anemometroViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801c0e0:	2301      	movs	r3, #1
 801c0e2:	e000      	b.n	801c0e6 <_ZNK8touchgfx8CallbackI18anemometroViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801c0e4:	2300      	movs	r3, #0
    }
 801c0e6:	4618      	mov	r0, r3
 801c0e8:	370c      	adds	r7, #12
 801c0ea:	46bd      	mov	sp, r7
 801c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0f0:	4770      	bx	lr

0801c0f2 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 801c0f2:	b480      	push	{r7}
 801c0f4:	b083      	sub	sp, #12
 801c0f6:	af00      	add	r7, sp, #0
 801c0f8:	6078      	str	r0, [r7, #4]
 801c0fa:	6039      	str	r1, [r7, #0]
 801c0fc:	683b      	ldr	r3, [r7, #0]
 801c0fe:	4618      	mov	r0, r3
 801c100:	370c      	adds	r7, #12
 801c102:	46bd      	mov	sp, r7
 801c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c108:	4770      	bx	lr

0801c10a <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 801c10a:	b480      	push	{r7}
 801c10c:	b083      	sub	sp, #12
 801c10e:	af00      	add	r7, sp, #0
 801c110:	6078      	str	r0, [r7, #4]
 801c112:	6039      	str	r1, [r7, #0]
    {
    }
 801c114:	bf00      	nop
 801c116:	370c      	adds	r7, #12
 801c118:	46bd      	mov	sp, r7
 801c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c11e:	4770      	bx	lr

0801c120 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 801c120:	b480      	push	{r7}
 801c122:	b083      	sub	sp, #12
 801c124:	af00      	add	r7, sp, #0
 801c126:	6078      	str	r0, [r7, #4]
 801c128:	6039      	str	r1, [r7, #0]
    {
    }
 801c12a:	bf00      	nop
 801c12c:	370c      	adds	r7, #12
 801c12e:	46bd      	mov	sp, r7
 801c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c134:	4770      	bx	lr

0801c136 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 801c136:	b480      	push	{r7}
 801c138:	b083      	sub	sp, #12
 801c13a:	af00      	add	r7, sp, #0
 801c13c:	6078      	str	r0, [r7, #4]
 801c13e:	6039      	str	r1, [r7, #0]
    {
    }
 801c140:	bf00      	nop
 801c142:	370c      	adds	r7, #12
 801c144:	46bd      	mov	sp, r7
 801c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c14a:	4770      	bx	lr

0801c14c <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 801c14c:	b480      	push	{r7}
 801c14e:	b083      	sub	sp, #12
 801c150:	af00      	add	r7, sp, #0
 801c152:	6078      	str	r0, [r7, #4]
 801c154:	460b      	mov	r3, r1
 801c156:	70fb      	strb	r3, [r7, #3]
    {
    }
 801c158:	bf00      	nop
 801c15a:	370c      	adds	r7, #12
 801c15c:	46bd      	mov	sp, r7
 801c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c162:	4770      	bx	lr

0801c164 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 801c164:	b480      	push	{r7}
 801c166:	b083      	sub	sp, #12
 801c168:	af00      	add	r7, sp, #0
 801c16a:	6078      	str	r0, [r7, #4]
    {
    }
 801c16c:	bf00      	nop
 801c16e:	370c      	adds	r7, #12
 801c170:	46bd      	mov	sp, r7
 801c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c176:	4770      	bx	lr

0801c178 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 801c178:	b480      	push	{r7}
 801c17a:	b083      	sub	sp, #12
 801c17c:	af00      	add	r7, sp, #0
 801c17e:	6078      	str	r0, [r7, #4]
    {
    }
 801c180:	bf00      	nop
 801c182:	370c      	adds	r7, #12
 801c184:	46bd      	mov	sp, r7
 801c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c18a:	4770      	bx	lr

0801c18c <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 801c18c:	b480      	push	{r7}
 801c18e:	b083      	sub	sp, #12
 801c190:	af00      	add	r7, sp, #0
 801c192:	6078      	str	r0, [r7, #4]
    {
 801c194:	4a04      	ldr	r2, [pc, #16]	; (801c1a8 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	601a      	str	r2, [r3, #0]
    }
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	4618      	mov	r0, r3
 801c19e:	370c      	adds	r7, #12
 801c1a0:	46bd      	mov	sp, r7
 801c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1a6:	4770      	bx	lr
 801c1a8:	0802d88c 	.word	0x0802d88c

0801c1ac <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 801c1ac:	b580      	push	{r7, lr}
 801c1ae:	b082      	sub	sp, #8
 801c1b0:	af00      	add	r7, sp, #0
 801c1b2:	6078      	str	r0, [r7, #4]
    }
 801c1b4:	6878      	ldr	r0, [r7, #4]
 801c1b6:	f7ff ffe9 	bl	801c18c <_ZN8touchgfx15UIEventListenerD1Ev>
 801c1ba:	2104      	movs	r1, #4
 801c1bc:	6878      	ldr	r0, [r7, #4]
 801c1be:	f00e f9b0 	bl	802a522 <_ZdlPvj>
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	4618      	mov	r0, r3
 801c1c6:	3708      	adds	r7, #8
 801c1c8:	46bd      	mov	sp, r7
 801c1ca:	bd80      	pop	{r7, pc}

0801c1cc <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 801c1cc:	b480      	push	{r7}
 801c1ce:	b083      	sub	sp, #12
 801c1d0:	af00      	add	r7, sp, #0
 801c1d2:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 801c1d4:	4a07      	ldr	r2, [pc, #28]	; (801c1f4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	601a      	str	r2, [r3, #0]
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	2200      	movs	r2, #0
 801c1de:	605a      	str	r2, [r3, #4]
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	2200      	movs	r2, #0
 801c1e4:	721a      	strb	r2, [r3, #8]
    {
    }
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	4618      	mov	r0, r3
 801c1ea:	370c      	adds	r7, #12
 801c1ec:	46bd      	mov	sp, r7
 801c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1f2:	4770      	bx	lr
 801c1f4:	0802d86c 	.word	0x0802d86c

0801c1f8 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 801c1f8:	b480      	push	{r7}
 801c1fa:	b083      	sub	sp, #12
 801c1fc:	af00      	add	r7, sp, #0
 801c1fe:	6078      	str	r0, [r7, #4]
    {
 801c200:	4a04      	ldr	r2, [pc, #16]	; (801c214 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	601a      	str	r2, [r3, #0]
    }
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	4618      	mov	r0, r3
 801c20a:	370c      	adds	r7, #12
 801c20c:	46bd      	mov	sp, r7
 801c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c212:	4770      	bx	lr
 801c214:	0802d86c 	.word	0x0802d86c

0801c218 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 801c218:	b580      	push	{r7, lr}
 801c21a:	b082      	sub	sp, #8
 801c21c:	af00      	add	r7, sp, #0
 801c21e:	6078      	str	r0, [r7, #4]
    }
 801c220:	6878      	ldr	r0, [r7, #4]
 801c222:	f7ff ffe9 	bl	801c1f8 <_ZN8touchgfx10TransitionD1Ev>
 801c226:	210c      	movs	r1, #12
 801c228:	6878      	ldr	r0, [r7, #4]
 801c22a:	f00e f97a 	bl	802a522 <_ZdlPvj>
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	4618      	mov	r0, r3
 801c232:	3708      	adds	r7, #8
 801c234:	46bd      	mov	sp, r7
 801c236:	bd80      	pop	{r7, pc}

0801c238 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 801c238:	b480      	push	{r7}
 801c23a:	b083      	sub	sp, #12
 801c23c:	af00      	add	r7, sp, #0
 801c23e:	6078      	str	r0, [r7, #4]
 801c240:	bf00      	nop
 801c242:	370c      	adds	r7, #12
 801c244:	46bd      	mov	sp, r7
 801c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c24a:	4770      	bx	lr

0801c24c <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 801c24c:	b480      	push	{r7}
 801c24e:	b083      	sub	sp, #12
 801c250:	af00      	add	r7, sp, #0
 801c252:	6078      	str	r0, [r7, #4]
 801c254:	bf00      	nop
 801c256:	370c      	adds	r7, #12
 801c258:	46bd      	mov	sp, r7
 801c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c25e:	4770      	bx	lr

0801c260 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 801c260:	b480      	push	{r7}
 801c262:	b083      	sub	sp, #12
 801c264:	af00      	add	r7, sp, #0
 801c266:	6078      	str	r0, [r7, #4]
 801c268:	bf00      	nop
 801c26a:	370c      	adds	r7, #12
 801c26c:	46bd      	mov	sp, r7
 801c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c272:	4770      	bx	lr

0801c274 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 801c274:	b480      	push	{r7}
 801c276:	b083      	sub	sp, #12
 801c278:	af00      	add	r7, sp, #0
 801c27a:	6078      	str	r0, [r7, #4]
 801c27c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	683a      	ldr	r2, [r7, #0]
 801c282:	605a      	str	r2, [r3, #4]
    }
 801c284:	bf00      	nop
 801c286:	370c      	adds	r7, #12
 801c288:	46bd      	mov	sp, r7
 801c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c28e:	4770      	bx	lr

0801c290 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 801c290:	b480      	push	{r7}
 801c292:	b083      	sub	sp, #12
 801c294:	af00      	add	r7, sp, #0
 801c296:	6078      	str	r0, [r7, #4]
 801c298:	460b      	mov	r3, r1
 801c29a:	70fb      	strb	r3, [r7, #3]
    {
    }
 801c29c:	bf00      	nop
 801c29e:	370c      	adds	r7, #12
 801c2a0:	46bd      	mov	sp, r7
 801c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2a6:	4770      	bx	lr

0801c2a8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
    virtual ~GenericCallback()
 801c2a8:	b480      	push	{r7}
 801c2aa:	b083      	sub	sp, #12
 801c2ac:	af00      	add	r7, sp, #0
 801c2ae:	6078      	str	r0, [r7, #4]
    {
 801c2b0:	4a04      	ldr	r2, [pc, #16]	; (801c2c4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	601a      	str	r2, [r3, #0]
    }
 801c2b6:	687b      	ldr	r3, [r7, #4]
 801c2b8:	4618      	mov	r0, r3
 801c2ba:	370c      	adds	r7, #12
 801c2bc:	46bd      	mov	sp, r7
 801c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2c2:	4770      	bx	lr
 801c2c4:	0802d854 	.word	0x0802d854

0801c2c8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 801c2c8:	b580      	push	{r7, lr}
 801c2ca:	b082      	sub	sp, #8
 801c2cc:	af00      	add	r7, sp, #0
 801c2ce:	6078      	str	r0, [r7, #4]
    }
 801c2d0:	6878      	ldr	r0, [r7, #4]
 801c2d2:	f7ff ffe9 	bl	801c2a8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801c2d6:	2104      	movs	r1, #4
 801c2d8:	6878      	ldr	r0, [r7, #4]
 801c2da:	f00e f922 	bl	802a522 <_ZdlPvj>
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	4618      	mov	r0, r3
 801c2e2:	3708      	adds	r7, #8
 801c2e4:	46bd      	mov	sp, r7
 801c2e6:	bd80      	pop	{r7, pc}

0801c2e8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 801c2e8:	b580      	push	{r7, lr}
 801c2ea:	b082      	sub	sp, #8
 801c2ec:	af00      	add	r7, sp, #0
 801c2ee:	6078      	str	r0, [r7, #4]
 801c2f0:	4a05      	ldr	r2, [pc, #20]	; (801c308 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	601a      	str	r2, [r3, #0]
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	4618      	mov	r0, r3
 801c2fa:	f7ff ff47 	bl	801c18c <_ZN8touchgfx15UIEventListenerD1Ev>
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	4618      	mov	r0, r3
 801c302:	3708      	adds	r7, #8
 801c304:	46bd      	mov	sp, r7
 801c306:	bd80      	pop	{r7, pc}
 801c308:	0802ef98 	.word	0x0802ef98

0801c30c <_ZN8touchgfx11ApplicationD0Ev>:
 801c30c:	b580      	push	{r7, lr}
 801c30e:	b082      	sub	sp, #8
 801c310:	af00      	add	r7, sp, #0
 801c312:	6078      	str	r0, [r7, #4]
 801c314:	6878      	ldr	r0, [r7, #4]
 801c316:	f7ff ffe7 	bl	801c2e8 <_ZN8touchgfx11ApplicationD1Ev>
 801c31a:	f44f 7198 	mov.w	r1, #304	; 0x130
 801c31e:	6878      	ldr	r0, [r7, #4]
 801c320:	f00e f8ff 	bl	802a522 <_ZdlPvj>
 801c324:	687b      	ldr	r3, [r7, #4]
 801c326:	4618      	mov	r0, r3
 801c328:	3708      	adds	r7, #8
 801c32a:	46bd      	mov	sp, r7
 801c32c:	bd80      	pop	{r7, pc}
	...

0801c330 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 801c330:	b580      	push	{r7, lr}
 801c332:	b082      	sub	sp, #8
 801c334:	af00      	add	r7, sp, #0
 801c336:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	4618      	mov	r0, r3
 801c33c:	f008 f996 	bl	802466c <_ZN8touchgfx11ApplicationC1Ev>
 801c340:	4a09      	ldr	r2, [pc, #36]	; (801c368 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	601a      	str	r2, [r3, #0]
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	2200      	movs	r2, #0
 801c34a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	2200      	movs	r2, #0
 801c352:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	4a04      	ldr	r2, [pc, #16]	; (801c36c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 801c35a:	6013      	str	r3, [r2, #0]
    }
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	4618      	mov	r0, r3
 801c360:	3708      	adds	r7, #8
 801c362:	46bd      	mov	sp, r7
 801c364:	bd80      	pop	{r7, pc}
 801c366:	bf00      	nop
 801c368:	0802d818 	.word	0x0802d818
 801c36c:	2000cff8 	.word	0x2000cff8

0801c370 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 801c370:	b580      	push	{r7, lr}
 801c372:	b082      	sub	sp, #8
 801c374:	af00      	add	r7, sp, #0
 801c376:	6078      	str	r0, [r7, #4]
 801c378:	4a05      	ldr	r2, [pc, #20]	; (801c390 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	601a      	str	r2, [r3, #0]
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	4618      	mov	r0, r3
 801c382:	f7ff ffb1 	bl	801c2e8 <_ZN8touchgfx11ApplicationD1Ev>
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	4618      	mov	r0, r3
 801c38a:	3708      	adds	r7, #8
 801c38c:	46bd      	mov	sp, r7
 801c38e:	bd80      	pop	{r7, pc}
 801c390:	0802d818 	.word	0x0802d818

0801c394 <_ZN8touchgfx14MVPApplicationD0Ev>:
 801c394:	b580      	push	{r7, lr}
 801c396:	b082      	sub	sp, #8
 801c398:	af00      	add	r7, sp, #0
 801c39a:	6078      	str	r0, [r7, #4]
 801c39c:	6878      	ldr	r0, [r7, #4]
 801c39e:	f7ff ffe7 	bl	801c370 <_ZN8touchgfx14MVPApplicationD1Ev>
 801c3a2:	f44f 719c 	mov.w	r1, #312	; 0x138
 801c3a6:	6878      	ldr	r0, [r7, #4]
 801c3a8:	f00e f8bb 	bl	802a522 <_ZdlPvj>
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	4618      	mov	r0, r3
 801c3b0:	3708      	adds	r7, #8
 801c3b2:	46bd      	mov	sp, r7
 801c3b4:	bd80      	pop	{r7, pc}

0801c3b6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 801c3b6:	b580      	push	{r7, lr}
 801c3b8:	b082      	sub	sp, #8
 801c3ba:	af00      	add	r7, sp, #0
 801c3bc:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 801c3be:	6878      	ldr	r0, [r7, #4]
 801c3c0:	f000 f804 	bl	801c3cc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 801c3c4:	bf00      	nop
 801c3c6:	3708      	adds	r7, #8
 801c3c8:	46bd      	mov	sp, r7
 801c3ca:	bd80      	pop	{r7, pc}

0801c3cc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 801c3cc:	b580      	push	{r7, lr}
 801c3ce:	b082      	sub	sp, #8
 801c3d0:	af00      	add	r7, sp, #0
 801c3d2:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d00f      	beq.n	801c3fe <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 801c3e4:	687b      	ldr	r3, [r7, #4]
 801c3e6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	330c      	adds	r3, #12
 801c3ee:	681b      	ldr	r3, [r3, #0]
 801c3f0:	4610      	mov	r0, r2
 801c3f2:	4798      	blx	r3
 801c3f4:	4603      	mov	r3, r0
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d001      	beq.n	801c3fe <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 801c3fa:	2301      	movs	r3, #1
 801c3fc:	e000      	b.n	801c400 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 801c3fe:	2300      	movs	r3, #0
 801c400:	2b00      	cmp	r3, #0
 801c402:	d00e      	beq.n	801c422 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 801c410:	681b      	ldr	r3, [r3, #0]
 801c412:	3308      	adds	r3, #8
 801c414:	681b      	ldr	r3, [r3, #0]
 801c416:	4610      	mov	r0, r2
 801c418:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	2200      	movs	r2, #0
 801c41e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 801c422:	bf00      	nop
 801c424:	3708      	adds	r7, #8
 801c426:	46bd      	mov	sp, r7
 801c428:	bd80      	pop	{r7, pc}

0801c42a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 801c42a:	b580      	push	{r7, lr}
 801c42c:	b084      	sub	sp, #16
 801c42e:	af00      	add	r7, sp, #0
 801c430:	60f8      	str	r0, [r7, #12]
 801c432:	60b9      	str	r1, [r7, #8]
 801c434:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 801c436:	f008 f8c7 	bl	80245c8 <_ZN8touchgfx11Application11getInstanceEv>
 801c43a:	4603      	mov	r3, r0
 801c43c:	4618      	mov	r0, r3
 801c43e:	f008 f8f9 	bl	8024634 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 801c442:	687b      	ldr	r3, [r7, #4]
 801c444:	681b      	ldr	r3, [r3, #0]
 801c446:	2b00      	cmp	r3, #0
 801c448:	d008      	beq.n	801c45c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	681a      	ldr	r2, [r3, #0]
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	681b      	ldr	r3, [r3, #0]
 801c454:	330c      	adds	r3, #12
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	4610      	mov	r0, r2
 801c45a:	4798      	blx	r3
    }
    if (*currentTrans)
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	681b      	ldr	r3, [r3, #0]
 801c460:	2b00      	cmp	r3, #0
 801c462:	d007      	beq.n	801c474 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	681a      	ldr	r2, [r3, #0]
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	681b      	ldr	r3, [r3, #0]
 801c470:	4610      	mov	r0, r2
 801c472:	4798      	blx	r3
    }
    if (*currentScreen)
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	681b      	ldr	r3, [r3, #0]
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d008      	beq.n	801c48e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	681a      	ldr	r2, [r3, #0]
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	681b      	ldr	r3, [r3, #0]
 801c484:	681b      	ldr	r3, [r3, #0]
 801c486:	3314      	adds	r3, #20
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	4610      	mov	r0, r2
 801c48c:	4798      	blx	r3
    }
    if (*currentPresenter)
 801c48e:	68bb      	ldr	r3, [r7, #8]
 801c490:	681b      	ldr	r3, [r3, #0]
 801c492:	2b00      	cmp	r3, #0
 801c494:	d008      	beq.n	801c4a8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 801c496:	68bb      	ldr	r3, [r7, #8]
 801c498:	681a      	ldr	r2, [r3, #0]
 801c49a:	68bb      	ldr	r3, [r7, #8]
 801c49c:	681b      	ldr	r3, [r3, #0]
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	3304      	adds	r3, #4
 801c4a2:	681b      	ldr	r3, [r3, #0]
 801c4a4:	4610      	mov	r0, r2
 801c4a6:	4798      	blx	r3
    }
    if (*currentScreen)
 801c4a8:	68fb      	ldr	r3, [r7, #12]
 801c4aa:	681b      	ldr	r3, [r3, #0]
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d007      	beq.n	801c4c0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 801c4b0:	68fb      	ldr	r3, [r7, #12]
 801c4b2:	681a      	ldr	r2, [r3, #0]
 801c4b4:	68fb      	ldr	r3, [r7, #12]
 801c4b6:	681b      	ldr	r3, [r3, #0]
 801c4b8:	681b      	ldr	r3, [r3, #0]
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	4610      	mov	r0, r2
 801c4be:	4798      	blx	r3
    }
    if (*currentPresenter)
 801c4c0:	68bb      	ldr	r3, [r7, #8]
 801c4c2:	681b      	ldr	r3, [r3, #0]
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d008      	beq.n	801c4da <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 801c4c8:	68bb      	ldr	r3, [r7, #8]
 801c4ca:	681a      	ldr	r2, [r3, #0]
 801c4cc:	68bb      	ldr	r3, [r7, #8]
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	3308      	adds	r3, #8
 801c4d4:	681b      	ldr	r3, [r3, #0]
 801c4d6:	4610      	mov	r0, r2
 801c4d8:	4798      	blx	r3
    }
}
 801c4da:	bf00      	nop
 801c4dc:	3710      	adds	r7, #16
 801c4de:	46bd      	mov	sp, r7
 801c4e0:	bd80      	pop	{r7, pc}

0801c4e2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 801c4e2:	b580      	push	{r7, lr}
 801c4e4:	b084      	sub	sp, #16
 801c4e6:	af00      	add	r7, sp, #0
 801c4e8:	60f8      	str	r0, [r7, #12]
 801c4ea:	60b9      	str	r1, [r7, #8]
 801c4ec:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	330c      	adds	r3, #12
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	68f8      	ldr	r0, [r7, #12]
 801c4f8:	4798      	blx	r3
    newPresenter->activate();
 801c4fa:	68bb      	ldr	r3, [r7, #8]
 801c4fc:	681b      	ldr	r3, [r3, #0]
 801c4fe:	681b      	ldr	r3, [r3, #0]
 801c500:	68b8      	ldr	r0, [r7, #8]
 801c502:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 801c504:	6879      	ldr	r1, [r7, #4]
 801c506:	68f8      	ldr	r0, [r7, #12]
 801c508:	f009 f9da 	bl	80258c0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	681b      	ldr	r3, [r3, #0]
 801c510:	3310      	adds	r3, #16
 801c512:	681b      	ldr	r3, [r3, #0]
 801c514:	6878      	ldr	r0, [r7, #4]
 801c516:	4798      	blx	r3

    Application::getInstance()->draw();
 801c518:	f008 f856 	bl	80245c8 <_ZN8touchgfx11Application11getInstanceEv>
 801c51c:	4602      	mov	r2, r0
 801c51e:	6813      	ldr	r3, [r2, #0]
 801c520:	3328      	adds	r3, #40	; 0x28
 801c522:	681b      	ldr	r3, [r3, #0]
 801c524:	4610      	mov	r0, r2
 801c526:	4798      	blx	r3
}
 801c528:	bf00      	nop
 801c52a:	3710      	adds	r7, #16
 801c52c:	46bd      	mov	sp, r7
 801c52e:	bd80      	pop	{r7, pc}

0801c530 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 801c530:	b480      	push	{r7}
 801c532:	b083      	sub	sp, #12
 801c534:	af00      	add	r7, sp, #0
 801c536:	6078      	str	r0, [r7, #4]
 801c538:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	683a      	ldr	r2, [r7, #0]
 801c53e:	601a      	str	r2, [r3, #0]
    }
 801c540:	bf00      	nop
 801c542:	370c      	adds	r7, #12
 801c544:	46bd      	mov	sp, r7
 801c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c54a:	4770      	bx	lr

0801c54c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 801c54c:	b580      	push	{r7, lr}
 801c54e:	b082      	sub	sp, #8
 801c550:	af00      	add	r7, sp, #0
 801c552:	6078      	str	r0, [r7, #4]
 801c554:	4a08      	ldr	r2, [pc, #32]	; (801c578 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	601a      	str	r2, [r3, #0]
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 801c560:	4618      	mov	r0, r3
 801c562:	f001 f90d 	bl	801d780 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	4618      	mov	r0, r3
 801c56a:	f7ff ff01 	bl	801c370 <_ZN8touchgfx14MVPApplicationD1Ev>
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	4618      	mov	r0, r3
 801c572:	3708      	adds	r7, #8
 801c574:	46bd      	mov	sp, r7
 801c576:	bd80      	pop	{r7, pc}
 801c578:	0802d7c4 	.word	0x0802d7c4

0801c57c <_ZN23FrontendApplicationBaseD0Ev>:
 801c57c:	b580      	push	{r7, lr}
 801c57e:	b082      	sub	sp, #8
 801c580:	af00      	add	r7, sp, #0
 801c582:	6078      	str	r0, [r7, #4]
 801c584:	6878      	ldr	r0, [r7, #4]
 801c586:	f7ff ffe1 	bl	801c54c <_ZN23FrontendApplicationBaseD1Ev>
 801c58a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801c58e:	6878      	ldr	r0, [r7, #4]
 801c590:	f00d ffc7 	bl	802a522 <_ZdlPvj>
 801c594:	687b      	ldr	r3, [r7, #4]
 801c596:	4618      	mov	r0, r3
 801c598:	3708      	adds	r7, #8
 801c59a:	46bd      	mov	sp, r7
 801c59c:	bd80      	pop	{r7, pc}
	...

0801c5a0 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 801c5a0:	b580      	push	{r7, lr}
 801c5a2:	b082      	sub	sp, #8
 801c5a4:	af00      	add	r7, sp, #0
 801c5a6:	6078      	str	r0, [r7, #4]
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	4618      	mov	r0, r3
 801c5ac:	f7ff fe0e 	bl	801c1cc <_ZN8touchgfx10TransitionC1Ev>
 801c5b0:	4a03      	ldr	r2, [pc, #12]	; (801c5c0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	601a      	str	r2, [r3, #0]
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	4618      	mov	r0, r3
 801c5ba:	3708      	adds	r7, #8
 801c5bc:	46bd      	mov	sp, r7
 801c5be:	bd80      	pop	{r7, pc}
 801c5c0:	0802d7a4 	.word	0x0802d7a4

0801c5c4 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 801c5c4:	b580      	push	{r7, lr}
 801c5c6:	b082      	sub	sp, #8
 801c5c8:	af00      	add	r7, sp, #0
 801c5ca:	6078      	str	r0, [r7, #4]
 801c5cc:	4a05      	ldr	r2, [pc, #20]	; (801c5e4 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	601a      	str	r2, [r3, #0]
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	4618      	mov	r0, r3
 801c5d6:	f7ff fe0f 	bl	801c1f8 <_ZN8touchgfx10TransitionD1Ev>
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	4618      	mov	r0, r3
 801c5de:	3708      	adds	r7, #8
 801c5e0:	46bd      	mov	sp, r7
 801c5e2:	bd80      	pop	{r7, pc}
 801c5e4:	0802d7a4 	.word	0x0802d7a4

0801c5e8 <_ZN8touchgfx12NoTransitionD0Ev>:
 801c5e8:	b580      	push	{r7, lr}
 801c5ea:	b082      	sub	sp, #8
 801c5ec:	af00      	add	r7, sp, #0
 801c5ee:	6078      	str	r0, [r7, #4]
 801c5f0:	6878      	ldr	r0, [r7, #4]
 801c5f2:	f7ff ffe7 	bl	801c5c4 <_ZN8touchgfx12NoTransitionD1Ev>
 801c5f6:	210c      	movs	r1, #12
 801c5f8:	6878      	ldr	r0, [r7, #4]
 801c5fa:	f00d ff92 	bl	802a522 <_ZdlPvj>
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	4618      	mov	r0, r3
 801c602:	3708      	adds	r7, #8
 801c604:	46bd      	mov	sp, r7
 801c606:	bd80      	pop	{r7, pc}

0801c608 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 801c608:	b480      	push	{r7}
 801c60a:	b083      	sub	sp, #12
 801c60c:	af00      	add	r7, sp, #0
 801c60e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	2201      	movs	r2, #1
 801c614:	721a      	strb	r2, [r3, #8]
    }
 801c616:	bf00      	nop
 801c618:	370c      	adds	r7, #12
 801c61a:	46bd      	mov	sp, r7
 801c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c620:	4770      	bx	lr

0801c622 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 801c622:	b480      	push	{r7}
 801c624:	b083      	sub	sp, #12
 801c626:	af00      	add	r7, sp, #0
 801c628:	6078      	str	r0, [r7, #4]
 801c62a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 801c62c:	687b      	ldr	r3, [r7, #4]
 801c62e:	683a      	ldr	r2, [r7, #0]
 801c630:	605a      	str	r2, [r3, #4]
    }
 801c632:	bf00      	nop
 801c634:	370c      	adds	r7, #12
 801c636:	46bd      	mov	sp, r7
 801c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c63c:	4770      	bx	lr
	...

0801c640 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/actitud_screen/actitudPresenter.hpp>

using namespace touchgfx;


FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 801c640:	b580      	push	{r7, lr}
 801c642:	b084      	sub	sp, #16
 801c644:	af00      	add	r7, sp, #0
 801c646:	60f8      	str	r0, [r7, #12]
 801c648:	60b9      	str	r1, [r7, #8]
 801c64a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 801c64c:	68fb      	ldr	r3, [r7, #12]
 801c64e:	4618      	mov	r0, r3
 801c650:	f7ff fe6e 	bl	801c330 <_ZN8touchgfx14MVPApplicationC1Ev>
 801c654:	4a0f      	ldr	r2, [pc, #60]	; (801c694 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 801c656:	68fb      	ldr	r3, [r7, #12]
 801c658:	601a      	str	r2, [r3, #0]
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 801c660:	4618      	mov	r0, r3
 801c662:	f000 f9af 	bl	801c9c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 801c666:	68fb      	ldr	r3, [r7, #12]
 801c668:	687a      	ldr	r2, [r7, #4]
 801c66a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	68ba      	ldr	r2, [r7, #8]
 801c672:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 801c676:	f7f5 fe9d 	bl	80123b4 <_ZN8touchgfx3HAL11getInstanceEv>
 801c67a:	4602      	mov	r2, r0
 801c67c:	6813      	ldr	r3, [r2, #0]
 801c67e:	3308      	adds	r3, #8
 801c680:	681b      	ldr	r3, [r3, #0]
 801c682:	2100      	movs	r1, #0
 801c684:	4610      	mov	r0, r2
 801c686:	4798      	blx	r3

}
 801c688:	68fb      	ldr	r3, [r7, #12]
 801c68a:	4618      	mov	r0, r3
 801c68c:	3710      	adds	r7, #16
 801c68e:	46bd      	mov	sp, r7
 801c690:	bd80      	pop	{r7, pc}
 801c692:	bf00      	nop
 801c694:	0802d7c4 	.word	0x0802d7c4

0801c698 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 801c698:	b480      	push	{r7}
 801c69a:	b083      	sub	sp, #12
 801c69c:	af00      	add	r7, sp, #0
 801c69e:	6078      	str	r0, [r7, #4]
 801c6a0:	6039      	str	r1, [r7, #0]
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	4618      	mov	r0, r3
 801c6a6:	370c      	adds	r7, #12
 801c6a8:	46bd      	mov	sp, r7
 801c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6ae:	4770      	bx	lr

0801c6b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 801c6b0:	b580      	push	{r7, lr}
 801c6b2:	b082      	sub	sp, #8
 801c6b4:	af00      	add	r7, sp, #0
 801c6b6:	6078      	str	r0, [r7, #4]
 801c6b8:	6039      	str	r1, [r7, #0]
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	683a      	ldr	r2, [r7, #0]
 801c6be:	4611      	mov	r1, r2
 801c6c0:	4618      	mov	r0, r3
 801c6c2:	f7ff ffe9 	bl	801c698 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 801c6c6:	683b      	ldr	r3, [r7, #0]
 801c6c8:	685a      	ldr	r2, [r3, #4]
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	605a      	str	r2, [r3, #4]
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	683a      	ldr	r2, [r7, #0]
 801c6d2:	3308      	adds	r3, #8
 801c6d4:	3208      	adds	r2, #8
 801c6d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c6da:	e883 0003 	stmia.w	r3, {r0, r1}
 801c6de:	687b      	ldr	r3, [r7, #4]
 801c6e0:	4618      	mov	r0, r3
 801c6e2:	3708      	adds	r7, #8
 801c6e4:	46bd      	mov	sp, r7
 801c6e6:	bd80      	pop	{r7, pc}

0801c6e8 <_ZN23FrontendApplicationBase32gotoanemometroScreenNoTransitionEv>:
 * Screen Transition Declarations
 */
// anemometro

void FrontendApplicationBase::gotoanemometroScreenNoTransition()
{
 801c6e8:	b590      	push	{r4, r7, lr}
 801c6ea:	b089      	sub	sp, #36	; 0x24
 801c6ec:	af00      	add	r7, sp, #0
 801c6ee:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoanemometroScreenNoTransitionImpl);
 801c6f0:	687b      	ldr	r3, [r7, #4]
 801c6f2:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801c6f6:	4b10      	ldr	r3, [pc, #64]	; (801c738 <_ZN23FrontendApplicationBase32gotoanemometroScreenNoTransitionEv+0x50>)
 801c6f8:	61bb      	str	r3, [r7, #24]
 801c6fa:	2300      	movs	r3, #0
 801c6fc:	61fb      	str	r3, [r7, #28]
 801c6fe:	f107 0008 	add.w	r0, r7, #8
 801c702:	f107 0318 	add.w	r3, r7, #24
 801c706:	cb0c      	ldmia	r3, {r2, r3}
 801c708:	6879      	ldr	r1, [r7, #4]
 801c70a:	f000 f977 	bl	801c9fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801c70e:	f107 0308 	add.w	r3, r7, #8
 801c712:	4619      	mov	r1, r3
 801c714:	4620      	mov	r0, r4
 801c716:	f7ff ffcb 	bl	801c6b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801c71a:	f107 0308 	add.w	r3, r7, #8
 801c71e:	4618      	mov	r0, r3
 801c720:	f001 f82e 	bl	801d780 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 801c730:	bf00      	nop
 801c732:	3724      	adds	r7, #36	; 0x24
 801c734:	46bd      	mov	sp, r7
 801c736:	bd90      	pop	{r4, r7, pc}
 801c738:	0801c73d 	.word	0x0801c73d

0801c73c <_ZN23FrontendApplicationBase36gotoanemometroScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoanemometroScreenNoTransitionImpl()
{
 801c73c:	b580      	push	{r7, lr}
 801c73e:	b084      	sub	sp, #16
 801c740:	af02      	add	r7, sp, #8
 801c742:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<anemometroView, anemometroPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801c744:	687b      	ldr	r3, [r7, #4]
 801c746:	f503 7198 	add.w	r1, r3, #304	; 0x130
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801c750:	461a      	mov	r2, r3
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801c758:	9300      	str	r3, [sp, #0]
 801c75a:	4b04      	ldr	r3, [pc, #16]	; (801c76c <_ZN23FrontendApplicationBase36gotoanemometroScreenNoTransitionImplEv+0x30>)
 801c75c:	4804      	ldr	r0, [pc, #16]	; (801c770 <_ZN23FrontendApplicationBase36gotoanemometroScreenNoTransitionImplEv+0x34>)
 801c75e:	f000 f96d 	bl	801ca3c <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801c762:	bf00      	nop
 801c764:	3708      	adds	r7, #8
 801c766:	46bd      	mov	sp, r7
 801c768:	bd80      	pop	{r7, pc}
 801c76a:	bf00      	nop
 801c76c:	2000cff4 	.word	0x2000cff4
 801c770:	2000cff0 	.word	0x2000cff0

0801c774 <_ZN23FrontendApplicationBase39gotoanemometroScreenSlideTransitionWestEv>:


void FrontendApplicationBase::gotoanemometroScreenSlideTransitionWest()
{
 801c774:	b590      	push	{r4, r7, lr}
 801c776:	b089      	sub	sp, #36	; 0x24
 801c778:	af00      	add	r7, sp, #0
 801c77a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoanemometroScreenSlideTransitionWestImpl);
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801c782:	4b10      	ldr	r3, [pc, #64]	; (801c7c4 <_ZN23FrontendApplicationBase39gotoanemometroScreenSlideTransitionWestEv+0x50>)
 801c784:	61bb      	str	r3, [r7, #24]
 801c786:	2300      	movs	r3, #0
 801c788:	61fb      	str	r3, [r7, #28]
 801c78a:	f107 0008 	add.w	r0, r7, #8
 801c78e:	f107 0318 	add.w	r3, r7, #24
 801c792:	cb0c      	ldmia	r3, {r2, r3}
 801c794:	6879      	ldr	r1, [r7, #4]
 801c796:	f000 f931 	bl	801c9fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801c79a:	f107 0308 	add.w	r3, r7, #8
 801c79e:	4619      	mov	r1, r3
 801c7a0:	4620      	mov	r0, r4
 801c7a2:	f7ff ff85 	bl	801c6b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801c7a6:	f107 0308 	add.w	r3, r7, #8
 801c7aa:	4618      	mov	r0, r3
 801c7ac:	f000 ffe8 	bl	801d780 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 801c7bc:	bf00      	nop
 801c7be:	3724      	adds	r7, #36	; 0x24
 801c7c0:	46bd      	mov	sp, r7
 801c7c2:	bd90      	pop	{r4, r7, pc}
 801c7c4:	0801c7c9 	.word	0x0801c7c9

0801c7c8 <_ZN23FrontendApplicationBase43gotoanemometroScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotoanemometroScreenSlideTransitionWestImpl()
{
 801c7c8:	b580      	push	{r7, lr}
 801c7ca:	b084      	sub	sp, #16
 801c7cc:	af02      	add	r7, sp, #8
 801c7ce:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<anemometroView, anemometroPresenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	f503 7198 	add.w	r1, r3, #304	; 0x130
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801c7dc:	461a      	mov	r2, r3
 801c7de:	687b      	ldr	r3, [r7, #4]
 801c7e0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801c7e4:	9300      	str	r3, [sp, #0]
 801c7e6:	4b04      	ldr	r3, [pc, #16]	; (801c7f8 <_ZN23FrontendApplicationBase43gotoanemometroScreenSlideTransitionWestImplEv+0x30>)
 801c7e8:	4804      	ldr	r0, [pc, #16]	; (801c7fc <_ZN23FrontendApplicationBase43gotoanemometroScreenSlideTransitionWestImplEv+0x34>)
 801c7ea:	f000 f9e3 	bl	801cbb4 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801c7ee:	bf00      	nop
 801c7f0:	3708      	adds	r7, #8
 801c7f2:	46bd      	mov	sp, r7
 801c7f4:	bd80      	pop	{r7, pc}
 801c7f6:	bf00      	nop
 801c7f8:	2000cff4 	.word	0x2000cff4
 801c7fc:	2000cff0 	.word	0x2000cff0

0801c800 <_ZN23FrontendApplicationBase38gotodireccionScreenSlideTransitionEastEv>:

// direccion

void FrontendApplicationBase::gotodireccionScreenSlideTransitionEast()
{
 801c800:	b590      	push	{r4, r7, lr}
 801c802:	b089      	sub	sp, #36	; 0x24
 801c804:	af00      	add	r7, sp, #0
 801c806:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotodireccionScreenSlideTransitionEastImpl);
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801c80e:	4b10      	ldr	r3, [pc, #64]	; (801c850 <_ZN23FrontendApplicationBase38gotodireccionScreenSlideTransitionEastEv+0x50>)
 801c810:	61bb      	str	r3, [r7, #24]
 801c812:	2300      	movs	r3, #0
 801c814:	61fb      	str	r3, [r7, #28]
 801c816:	f107 0008 	add.w	r0, r7, #8
 801c81a:	f107 0318 	add.w	r3, r7, #24
 801c81e:	cb0c      	ldmia	r3, {r2, r3}
 801c820:	6879      	ldr	r1, [r7, #4]
 801c822:	f000 f8eb 	bl	801c9fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801c826:	f107 0308 	add.w	r3, r7, #8
 801c82a:	4619      	mov	r1, r3
 801c82c:	4620      	mov	r0, r4
 801c82e:	f7ff ff3f 	bl	801c6b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801c832:	f107 0308 	add.w	r3, r7, #8
 801c836:	4618      	mov	r0, r3
 801c838:	f000 ffa2 	bl	801d780 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801c83c:	687b      	ldr	r3, [r7, #4]
 801c83e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 801c848:	bf00      	nop
 801c84a:	3724      	adds	r7, #36	; 0x24
 801c84c:	46bd      	mov	sp, r7
 801c84e:	bd90      	pop	{r4, r7, pc}
 801c850:	0801c855 	.word	0x0801c855

0801c854 <_ZN23FrontendApplicationBase42gotodireccionScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotodireccionScreenSlideTransitionEastImpl()
{
 801c854:	b580      	push	{r7, lr}
 801c856:	b084      	sub	sp, #16
 801c858:	af02      	add	r7, sp, #8
 801c85a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<direccionView, direccionPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801c868:	461a      	mov	r2, r3
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801c870:	9300      	str	r3, [sp, #0]
 801c872:	4b04      	ldr	r3, [pc, #16]	; (801c884 <_ZN23FrontendApplicationBase42gotodireccionScreenSlideTransitionEastImplEv+0x30>)
 801c874:	4804      	ldr	r0, [pc, #16]	; (801c888 <_ZN23FrontendApplicationBase42gotodireccionScreenSlideTransitionEastImplEv+0x34>)
 801c876:	f000 fa59 	bl	801cd2c <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801c87a:	bf00      	nop
 801c87c:	3708      	adds	r7, #8
 801c87e:	46bd      	mov	sp, r7
 801c880:	bd80      	pop	{r7, pc}
 801c882:	bf00      	nop
 801c884:	2000cff4 	.word	0x2000cff4
 801c888:	2000cff0 	.word	0x2000cff0

0801c88c <_ZN23FrontendApplicationBase38gotodireccionScreenSlideTransitionWestEv>:


void FrontendApplicationBase::gotodireccionScreenSlideTransitionWest()
{
 801c88c:	b590      	push	{r4, r7, lr}
 801c88e:	b089      	sub	sp, #36	; 0x24
 801c890:	af00      	add	r7, sp, #0
 801c892:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotodireccionScreenSlideTransitionWestImpl);
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801c89a:	4b10      	ldr	r3, [pc, #64]	; (801c8dc <_ZN23FrontendApplicationBase38gotodireccionScreenSlideTransitionWestEv+0x50>)
 801c89c:	61bb      	str	r3, [r7, #24]
 801c89e:	2300      	movs	r3, #0
 801c8a0:	61fb      	str	r3, [r7, #28]
 801c8a2:	f107 0008 	add.w	r0, r7, #8
 801c8a6:	f107 0318 	add.w	r3, r7, #24
 801c8aa:	cb0c      	ldmia	r3, {r2, r3}
 801c8ac:	6879      	ldr	r1, [r7, #4]
 801c8ae:	f000 f8a5 	bl	801c9fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801c8b2:	f107 0308 	add.w	r3, r7, #8
 801c8b6:	4619      	mov	r1, r3
 801c8b8:	4620      	mov	r0, r4
 801c8ba:	f7ff fef9 	bl	801c6b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801c8be:	f107 0308 	add.w	r3, r7, #8
 801c8c2:	4618      	mov	r0, r3
 801c8c4:	f000 ff5c 	bl	801d780 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 801c8d4:	bf00      	nop
 801c8d6:	3724      	adds	r7, #36	; 0x24
 801c8d8:	46bd      	mov	sp, r7
 801c8da:	bd90      	pop	{r4, r7, pc}
 801c8dc:	0801c8e1 	.word	0x0801c8e1

0801c8e0 <_ZN23FrontendApplicationBase42gotodireccionScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotodireccionScreenSlideTransitionWestImpl()
{
 801c8e0:	b580      	push	{r7, lr}
 801c8e2:	b084      	sub	sp, #16
 801c8e4:	af02      	add	r7, sp, #8
 801c8e6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<direccionView, direccionPresenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	f503 7198 	add.w	r1, r3, #304	; 0x130
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801c8f4:	461a      	mov	r2, r3
 801c8f6:	687b      	ldr	r3, [r7, #4]
 801c8f8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801c8fc:	9300      	str	r3, [sp, #0]
 801c8fe:	4b04      	ldr	r3, [pc, #16]	; (801c910 <_ZN23FrontendApplicationBase42gotodireccionScreenSlideTransitionWestImplEv+0x30>)
 801c900:	4804      	ldr	r0, [pc, #16]	; (801c914 <_ZN23FrontendApplicationBase42gotodireccionScreenSlideTransitionWestImplEv+0x34>)
 801c902:	f000 facf 	bl	801cea4 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801c906:	bf00      	nop
 801c908:	3708      	adds	r7, #8
 801c90a:	46bd      	mov	sp, r7
 801c90c:	bd80      	pop	{r7, pc}
 801c90e:	bf00      	nop
 801c910:	2000cff4 	.word	0x2000cff4
 801c914:	2000cff0 	.word	0x2000cff0

0801c918 <_ZN23FrontendApplicationBase36gotoactitudScreenSlideTransitionEastEv>:

// actitud

void FrontendApplicationBase::gotoactitudScreenSlideTransitionEast()
{
 801c918:	b590      	push	{r4, r7, lr}
 801c91a:	b089      	sub	sp, #36	; 0x24
 801c91c:	af00      	add	r7, sp, #0
 801c91e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoactitudScreenSlideTransitionEastImpl);
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801c926:	4b10      	ldr	r3, [pc, #64]	; (801c968 <_ZN23FrontendApplicationBase36gotoactitudScreenSlideTransitionEastEv+0x50>)
 801c928:	61bb      	str	r3, [r7, #24]
 801c92a:	2300      	movs	r3, #0
 801c92c:	61fb      	str	r3, [r7, #28]
 801c92e:	f107 0008 	add.w	r0, r7, #8
 801c932:	f107 0318 	add.w	r3, r7, #24
 801c936:	cb0c      	ldmia	r3, {r2, r3}
 801c938:	6879      	ldr	r1, [r7, #4]
 801c93a:	f000 f85f 	bl	801c9fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801c93e:	f107 0308 	add.w	r3, r7, #8
 801c942:	4619      	mov	r1, r3
 801c944:	4620      	mov	r0, r4
 801c946:	f7ff feb3 	bl	801c6b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801c94a:	f107 0308 	add.w	r3, r7, #8
 801c94e:	4618      	mov	r0, r3
 801c950:	f000 ff16 	bl	801d780 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801c954:	687b      	ldr	r3, [r7, #4]
 801c956:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 801c960:	bf00      	nop
 801c962:	3724      	adds	r7, #36	; 0x24
 801c964:	46bd      	mov	sp, r7
 801c966:	bd90      	pop	{r4, r7, pc}
 801c968:	0801c96d 	.word	0x0801c96d

0801c96c <_ZN23FrontendApplicationBase40gotoactitudScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoactitudScreenSlideTransitionEastImpl()
{
 801c96c:	b580      	push	{r7, lr}
 801c96e:	b084      	sub	sp, #16
 801c970:	af02      	add	r7, sp, #8
 801c972:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<actitudView, actitudPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	f503 7198 	add.w	r1, r3, #304	; 0x130
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801c980:	461a      	mov	r2, r3
 801c982:	687b      	ldr	r3, [r7, #4]
 801c984:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801c988:	9300      	str	r3, [sp, #0]
 801c98a:	4b04      	ldr	r3, [pc, #16]	; (801c99c <_ZN23FrontendApplicationBase40gotoactitudScreenSlideTransitionEastImplEv+0x30>)
 801c98c:	4804      	ldr	r0, [pc, #16]	; (801c9a0 <_ZN23FrontendApplicationBase40gotoactitudScreenSlideTransitionEastImplEv+0x34>)
 801c98e:	f000 fb45 	bl	801d01c <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801c992:	bf00      	nop
 801c994:	3708      	adds	r7, #8
 801c996:	46bd      	mov	sp, r7
 801c998:	bd80      	pop	{r7, pc}
 801c99a:	bf00      	nop
 801c99c:	2000cff4 	.word	0x2000cff4
 801c9a0:	2000cff0 	.word	0x2000cff0

0801c9a4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 801c9a4:	b480      	push	{r7}
 801c9a6:	b083      	sub	sp, #12
 801c9a8:	af00      	add	r7, sp, #0
 801c9aa:	6078      	str	r0, [r7, #4]
 801c9ac:	4a04      	ldr	r2, [pc, #16]	; (801c9c0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 801c9ae:	687b      	ldr	r3, [r7, #4]
 801c9b0:	601a      	str	r2, [r3, #0]
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	4618      	mov	r0, r3
 801c9b6:	370c      	adds	r7, #12
 801c9b8:	46bd      	mov	sp, r7
 801c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9be:	4770      	bx	lr
 801c9c0:	0802d854 	.word	0x0802d854

0801c9c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 801c9c4:	b580      	push	{r7, lr}
 801c9c6:	b082      	sub	sp, #8
 801c9c8:	af00      	add	r7, sp, #0
 801c9ca:	6078      	str	r0, [r7, #4]
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	4618      	mov	r0, r3
 801c9d0:	f7ff ffe8 	bl	801c9a4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801c9d4:	4a08      	ldr	r2, [pc, #32]	; (801c9f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	601a      	str	r2, [r3, #0]
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	2200      	movs	r2, #0
 801c9de:	605a      	str	r2, [r3, #4]
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	2200      	movs	r2, #0
 801c9e4:	609a      	str	r2, [r3, #8]
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	2200      	movs	r2, #0
 801c9ea:	60da      	str	r2, [r3, #12]
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	4618      	mov	r0, r3
 801c9f0:	3708      	adds	r7, #8
 801c9f2:	46bd      	mov	sp, r7
 801c9f4:	bd80      	pop	{r7, pc}
 801c9f6:	bf00      	nop
 801c9f8:	0802d800 	.word	0x0802d800

0801c9fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 801c9fc:	b580      	push	{r7, lr}
 801c9fe:	b084      	sub	sp, #16
 801ca00:	af00      	add	r7, sp, #0
 801ca02:	60f8      	str	r0, [r7, #12]
 801ca04:	60b9      	str	r1, [r7, #8]
 801ca06:	4639      	mov	r1, r7
 801ca08:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801ca0c:	68fb      	ldr	r3, [r7, #12]
 801ca0e:	4618      	mov	r0, r3
 801ca10:	f7ff ffc8 	bl	801c9a4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801ca14:	4a08      	ldr	r2, [pc, #32]	; (801ca38 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 801ca16:	68fb      	ldr	r3, [r7, #12]
 801ca18:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801ca1a:	68fb      	ldr	r3, [r7, #12]
 801ca1c:	68ba      	ldr	r2, [r7, #8]
 801ca1e:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 801ca20:	68fb      	ldr	r3, [r7, #12]
 801ca22:	3308      	adds	r3, #8
 801ca24:	463a      	mov	r2, r7
 801ca26:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ca2a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801ca2e:	68fb      	ldr	r3, [r7, #12]
 801ca30:	4618      	mov	r0, r3
 801ca32:	3710      	adds	r7, #16
 801ca34:	46bd      	mov	sp, r7
 801ca36:	bd80      	pop	{r7, pc}
 801ca38:	0802d800 	.word	0x0802d800

0801ca3c <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801ca3c:	b590      	push	{r4, r7, lr}
 801ca3e:	b089      	sub	sp, #36	; 0x24
 801ca40:	af00      	add	r7, sp, #0
 801ca42:	60f8      	str	r0, [r7, #12]
 801ca44:	60b9      	str	r1, [r7, #8]
 801ca46:	607a      	str	r2, [r7, #4]
 801ca48:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	689a      	ldr	r2, [r3, #8]
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	689b      	ldr	r3, [r3, #8]
 801ca52:	681b      	ldr	r3, [r3, #0]
 801ca54:	3320      	adds	r3, #32
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	4610      	mov	r0, r2
 801ca5a:	4798      	blx	r3
 801ca5c:	4602      	mov	r2, r0
 801ca5e:	f243 1377 	movw	r3, #12663	; 0x3177
 801ca62:	429a      	cmp	r2, r3
 801ca64:	d805      	bhi.n	801ca72 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 801ca66:	4b4e      	ldr	r3, [pc, #312]	; (801cba0 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801ca68:	4a4e      	ldr	r2, [pc, #312]	; (801cba4 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801ca6a:	21c2      	movs	r1, #194	; 0xc2
 801ca6c:	484e      	ldr	r0, [pc, #312]	; (801cba8 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801ca6e:	f00e fb43 	bl	802b0f8 <__assert_func>
 801ca72:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	685a      	ldr	r2, [r3, #4]
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	685b      	ldr	r3, [r3, #4]
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	3320      	adds	r3, #32
 801ca80:	681b      	ldr	r3, [r3, #0]
 801ca82:	4610      	mov	r0, r2
 801ca84:	4798      	blx	r3
 801ca86:	4603      	mov	r3, r0
 801ca88:	2b0f      	cmp	r3, #15
 801ca8a:	d805      	bhi.n	801ca98 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 801ca8c:	4b47      	ldr	r3, [pc, #284]	; (801cbac <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 801ca8e:	4a45      	ldr	r2, [pc, #276]	; (801cba4 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801ca90:	21c3      	movs	r1, #195	; 0xc3
 801ca92:	4845      	ldr	r0, [pc, #276]	; (801cba8 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801ca94:	f00e fb30 	bl	802b0f8 <__assert_func>
 801ca98:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	68da      	ldr	r2, [r3, #12]
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	68db      	ldr	r3, [r3, #12]
 801caa2:	681b      	ldr	r3, [r3, #0]
 801caa4:	3320      	adds	r3, #32
 801caa6:	681b      	ldr	r3, [r3, #0]
 801caa8:	4610      	mov	r0, r2
 801caaa:	4798      	blx	r3
 801caac:	4603      	mov	r3, r0
 801caae:	2b0b      	cmp	r3, #11
 801cab0:	d805      	bhi.n	801cabe <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 801cab2:	4b3f      	ldr	r3, [pc, #252]	; (801cbb0 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 801cab4:	4a3b      	ldr	r2, [pc, #236]	; (801cba4 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801cab6:	21c4      	movs	r1, #196	; 0xc4
 801cab8:	483b      	ldr	r0, [pc, #236]	; (801cba8 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801caba:	f00e fb1d 	bl	802b0f8 <__assert_func>
 801cabe:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 801cac0:	683a      	ldr	r2, [r7, #0]
 801cac2:	68b9      	ldr	r1, [r7, #8]
 801cac4:	68f8      	ldr	r0, [r7, #12]
 801cac6:	f7ff fcb0 	bl	801c42a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	68db      	ldr	r3, [r3, #12]
 801cace:	2100      	movs	r1, #0
 801cad0:	4618      	mov	r0, r3
 801cad2:	f000 fb5f 	bl	801d194 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 801cad6:	4603      	mov	r3, r0
 801cad8:	4619      	mov	r1, r3
 801cada:	200c      	movs	r0, #12
 801cadc:	f7ff fb09 	bl	801c0f2 <_ZnwjPv>
 801cae0:	4604      	mov	r4, r0
 801cae2:	2c00      	cmp	r4, #0
 801cae4:	d004      	beq.n	801caf0 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 801cae6:	4620      	mov	r0, r4
 801cae8:	f7ff fd5a 	bl	801c5a0 <_ZN8touchgfx12NoTransitionC1Ev>
 801caec:	4623      	mov	r3, r4
 801caee:	e000      	b.n	801caf2 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 801caf0:	4623      	mov	r3, r4
 801caf2:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	689b      	ldr	r3, [r3, #8]
 801caf8:	2100      	movs	r1, #0
 801cafa:	4618      	mov	r0, r3
 801cafc:	f000 fb5d 	bl	801d1ba <_ZN8touchgfx17AbstractPartition2atI14anemometroViewEERT_t>
 801cb00:	4603      	mov	r3, r0
 801cb02:	4619      	mov	r1, r3
 801cb04:	f243 1078 	movw	r0, #12664	; 0x3178
 801cb08:	f7ff faf3 	bl	801c0f2 <_ZnwjPv>
 801cb0c:	4604      	mov	r4, r0
 801cb0e:	2c00      	cmp	r4, #0
 801cb10:	d004      	beq.n	801cb1c <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801cb12:	4620      	mov	r0, r4
 801cb14:	f002 f88c 	bl	801ec30 <_ZN14anemometroViewC1Ev>
 801cb18:	4623      	mov	r3, r4
 801cb1a:	e000      	b.n	801cb1e <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 801cb1c:	4623      	mov	r3, r4
 801cb1e:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	685b      	ldr	r3, [r3, #4]
 801cb24:	2100      	movs	r1, #0
 801cb26:	4618      	mov	r0, r3
 801cb28:	f000 fb5a 	bl	801d1e0 <_ZN8touchgfx17AbstractPartition2atI19anemometroPresenterEERT_t>
 801cb2c:	4603      	mov	r3, r0
 801cb2e:	4619      	mov	r1, r3
 801cb30:	2010      	movs	r0, #16
 801cb32:	f7ff fade 	bl	801c0f2 <_ZnwjPv>
 801cb36:	4604      	mov	r4, r0
 801cb38:	2c00      	cmp	r4, #0
 801cb3a:	d005      	beq.n	801cb48 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 801cb3c:	69b9      	ldr	r1, [r7, #24]
 801cb3e:	4620      	mov	r0, r4
 801cb40:	f002 f800 	bl	801eb44 <_ZN19anemometroPresenterC1ER14anemometroView>
 801cb44:	4623      	mov	r3, r4
 801cb46:	e000      	b.n	801cb4a <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 801cb48:	4623      	mov	r3, r4
 801cb4a:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 801cb4c:	683b      	ldr	r3, [r7, #0]
 801cb4e:	69fa      	ldr	r2, [r7, #28]
 801cb50:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801cb52:	68bb      	ldr	r3, [r7, #8]
 801cb54:	697a      	ldr	r2, [r7, #20]
 801cb56:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801cb58:	68fb      	ldr	r3, [r7, #12]
 801cb5a:	69ba      	ldr	r2, [r7, #24]
 801cb5c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801cb5e:	697b      	ldr	r3, [r7, #20]
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d002      	beq.n	801cb6a <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 801cb64:	697b      	ldr	r3, [r7, #20]
 801cb66:	3304      	adds	r3, #4
 801cb68:	e000      	b.n	801cb6c <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 801cb6a:	2300      	movs	r3, #0
 801cb6c:	4619      	mov	r1, r3
 801cb6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cb70:	f7ff fcde 	bl	801c530 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801cb74:	697b      	ldr	r3, [r7, #20]
 801cb76:	3304      	adds	r3, #4
 801cb78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801cb7a:	4618      	mov	r0, r3
 801cb7c:	f7ff fd51 	bl	801c622 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801cb80:	69bb      	ldr	r3, [r7, #24]
 801cb82:	6979      	ldr	r1, [r7, #20]
 801cb84:	4618      	mov	r0, r3
 801cb86:	f000 fb3e 	bl	801d206 <_ZN8touchgfx4ViewI19anemometroPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801cb8a:	69fa      	ldr	r2, [r7, #28]
 801cb8c:	6979      	ldr	r1, [r7, #20]
 801cb8e:	69b8      	ldr	r0, [r7, #24]
 801cb90:	f7ff fca7 	bl	801c4e2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 801cb94:	697b      	ldr	r3, [r7, #20]
}
 801cb96:	4618      	mov	r0, r3
 801cb98:	3724      	adds	r7, #36	; 0x24
 801cb9a:	46bd      	mov	sp, r7
 801cb9c:	bd90      	pop	{r4, r7, pc}
 801cb9e:	bf00      	nop
 801cba0:	0802c714 	.word	0x0802c714
 801cba4:	0802d8ac 	.word	0x0802d8ac
 801cba8:	0802c7a4 	.word	0x0802c7a4
 801cbac:	0802c7f4 	.word	0x0802c7f4
 801cbb0:	0802c898 	.word	0x0802c898

0801cbb4 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801cbb4:	b590      	push	{r4, r7, lr}
 801cbb6:	b089      	sub	sp, #36	; 0x24
 801cbb8:	af00      	add	r7, sp, #0
 801cbba:	60f8      	str	r0, [r7, #12]
 801cbbc:	60b9      	str	r1, [r7, #8]
 801cbbe:	607a      	str	r2, [r7, #4]
 801cbc0:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	689a      	ldr	r2, [r3, #8]
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	689b      	ldr	r3, [r3, #8]
 801cbca:	681b      	ldr	r3, [r3, #0]
 801cbcc:	3320      	adds	r3, #32
 801cbce:	681b      	ldr	r3, [r3, #0]
 801cbd0:	4610      	mov	r0, r2
 801cbd2:	4798      	blx	r3
 801cbd4:	4602      	mov	r2, r0
 801cbd6:	f243 1377 	movw	r3, #12663	; 0x3177
 801cbda:	429a      	cmp	r2, r3
 801cbdc:	d805      	bhi.n	801cbea <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 801cbde:	4b4e      	ldr	r3, [pc, #312]	; (801cd18 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801cbe0:	4a4e      	ldr	r2, [pc, #312]	; (801cd1c <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801cbe2:	21c2      	movs	r1, #194	; 0xc2
 801cbe4:	484e      	ldr	r0, [pc, #312]	; (801cd20 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801cbe6:	f00e fa87 	bl	802b0f8 <__assert_func>
 801cbea:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	685a      	ldr	r2, [r3, #4]
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	685b      	ldr	r3, [r3, #4]
 801cbf4:	681b      	ldr	r3, [r3, #0]
 801cbf6:	3320      	adds	r3, #32
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	4610      	mov	r0, r2
 801cbfc:	4798      	blx	r3
 801cbfe:	4603      	mov	r3, r0
 801cc00:	2b0f      	cmp	r3, #15
 801cc02:	d805      	bhi.n	801cc10 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 801cc04:	4b47      	ldr	r3, [pc, #284]	; (801cd24 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 801cc06:	4a45      	ldr	r2, [pc, #276]	; (801cd1c <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801cc08:	21c3      	movs	r1, #195	; 0xc3
 801cc0a:	4845      	ldr	r0, [pc, #276]	; (801cd20 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801cc0c:	f00e fa74 	bl	802b0f8 <__assert_func>
 801cc10:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	68da      	ldr	r2, [r3, #12]
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	68db      	ldr	r3, [r3, #12]
 801cc1a:	681b      	ldr	r3, [r3, #0]
 801cc1c:	3320      	adds	r3, #32
 801cc1e:	681b      	ldr	r3, [r3, #0]
 801cc20:	4610      	mov	r0, r2
 801cc22:	4798      	blx	r3
 801cc24:	4603      	mov	r3, r0
 801cc26:	2b53      	cmp	r3, #83	; 0x53
 801cc28:	d805      	bhi.n	801cc36 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 801cc2a:	4b3f      	ldr	r3, [pc, #252]	; (801cd28 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 801cc2c:	4a3b      	ldr	r2, [pc, #236]	; (801cd1c <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801cc2e:	21c4      	movs	r1, #196	; 0xc4
 801cc30:	483b      	ldr	r0, [pc, #236]	; (801cd20 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801cc32:	f00e fa61 	bl	802b0f8 <__assert_func>
 801cc36:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 801cc38:	683a      	ldr	r2, [r7, #0]
 801cc3a:	68b9      	ldr	r1, [r7, #8]
 801cc3c:	68f8      	ldr	r0, [r7, #12]
 801cc3e:	f7ff fbf4 	bl	801c42a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801cc42:	687b      	ldr	r3, [r7, #4]
 801cc44:	68db      	ldr	r3, [r3, #12]
 801cc46:	2100      	movs	r1, #0
 801cc48:	4618      	mov	r0, r3
 801cc4a:	f000 faea 	bl	801d222 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 801cc4e:	4603      	mov	r3, r0
 801cc50:	4619      	mov	r1, r3
 801cc52:	2054      	movs	r0, #84	; 0x54
 801cc54:	f7ff fa4d 	bl	801c0f2 <_ZnwjPv>
 801cc58:	4604      	mov	r4, r0
 801cc5a:	2c00      	cmp	r4, #0
 801cc5c:	d005      	beq.n	801cc6a <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 801cc5e:	2114      	movs	r1, #20
 801cc60:	4620      	mov	r0, r4
 801cc62:	f000 fb13 	bl	801d28c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 801cc66:	4623      	mov	r3, r4
 801cc68:	e000      	b.n	801cc6c <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb8>
 801cc6a:	4623      	mov	r3, r4
 801cc6c:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	689b      	ldr	r3, [r3, #8]
 801cc72:	2100      	movs	r1, #0
 801cc74:	4618      	mov	r0, r3
 801cc76:	f000 faa0 	bl	801d1ba <_ZN8touchgfx17AbstractPartition2atI14anemometroViewEERT_t>
 801cc7a:	4603      	mov	r3, r0
 801cc7c:	4619      	mov	r1, r3
 801cc7e:	f243 1078 	movw	r0, #12664	; 0x3178
 801cc82:	f7ff fa36 	bl	801c0f2 <_ZnwjPv>
 801cc86:	4604      	mov	r4, r0
 801cc88:	2c00      	cmp	r4, #0
 801cc8a:	d004      	beq.n	801cc96 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 801cc8c:	4620      	mov	r0, r4
 801cc8e:	f001 ffcf 	bl	801ec30 <_ZN14anemometroViewC1Ev>
 801cc92:	4623      	mov	r3, r4
 801cc94:	e000      	b.n	801cc98 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
 801cc96:	4623      	mov	r3, r4
 801cc98:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	685b      	ldr	r3, [r3, #4]
 801cc9e:	2100      	movs	r1, #0
 801cca0:	4618      	mov	r0, r3
 801cca2:	f000 fa9d 	bl	801d1e0 <_ZN8touchgfx17AbstractPartition2atI19anemometroPresenterEERT_t>
 801cca6:	4603      	mov	r3, r0
 801cca8:	4619      	mov	r1, r3
 801ccaa:	2010      	movs	r0, #16
 801ccac:	f7ff fa21 	bl	801c0f2 <_ZnwjPv>
 801ccb0:	4604      	mov	r4, r0
 801ccb2:	2c00      	cmp	r4, #0
 801ccb4:	d005      	beq.n	801ccc2 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 801ccb6:	69b9      	ldr	r1, [r7, #24]
 801ccb8:	4620      	mov	r0, r4
 801ccba:	f001 ff43 	bl	801eb44 <_ZN19anemometroPresenterC1ER14anemometroView>
 801ccbe:	4623      	mov	r3, r4
 801ccc0:	e000      	b.n	801ccc4 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
 801ccc2:	4623      	mov	r3, r4
 801ccc4:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 801ccc6:	683b      	ldr	r3, [r7, #0]
 801ccc8:	69fa      	ldr	r2, [r7, #28]
 801ccca:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801cccc:	68bb      	ldr	r3, [r7, #8]
 801ccce:	697a      	ldr	r2, [r7, #20]
 801ccd0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801ccd2:	68fb      	ldr	r3, [r7, #12]
 801ccd4:	69ba      	ldr	r2, [r7, #24]
 801ccd6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801ccd8:	697b      	ldr	r3, [r7, #20]
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d002      	beq.n	801cce4 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 801ccde:	697b      	ldr	r3, [r7, #20]
 801cce0:	3304      	adds	r3, #4
 801cce2:	e000      	b.n	801cce6 <_ZN8touchgfx14makeTransitionI14anemometroView19anemometroPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 801cce4:	2300      	movs	r3, #0
 801cce6:	4619      	mov	r1, r3
 801cce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ccea:	f7ff fc21 	bl	801c530 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801ccee:	697b      	ldr	r3, [r7, #20]
 801ccf0:	3304      	adds	r3, #4
 801ccf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ccf4:	4618      	mov	r0, r3
 801ccf6:	f7ff fc94 	bl	801c622 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801ccfa:	69bb      	ldr	r3, [r7, #24]
 801ccfc:	6979      	ldr	r1, [r7, #20]
 801ccfe:	4618      	mov	r0, r3
 801cd00:	f000 fa81 	bl	801d206 <_ZN8touchgfx4ViewI19anemometroPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801cd04:	69fa      	ldr	r2, [r7, #28]
 801cd06:	6979      	ldr	r1, [r7, #20]
 801cd08:	69b8      	ldr	r0, [r7, #24]
 801cd0a:	f7ff fbea 	bl	801c4e2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 801cd0e:	697b      	ldr	r3, [r7, #20]
}
 801cd10:	4618      	mov	r0, r3
 801cd12:	3724      	adds	r7, #36	; 0x24
 801cd14:	46bd      	mov	sp, r7
 801cd16:	bd90      	pop	{r4, r7, pc}
 801cd18:	0802c714 	.word	0x0802c714
 801cd1c:	0802d9b8 	.word	0x0802d9b8
 801cd20:	0802c7a4 	.word	0x0802c7a4
 801cd24:	0802c7f4 	.word	0x0802c7f4
 801cd28:	0802c898 	.word	0x0802c898

0801cd2c <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801cd2c:	b590      	push	{r4, r7, lr}
 801cd2e:	b089      	sub	sp, #36	; 0x24
 801cd30:	af00      	add	r7, sp, #0
 801cd32:	60f8      	str	r0, [r7, #12]
 801cd34:	60b9      	str	r1, [r7, #8]
 801cd36:	607a      	str	r2, [r7, #4]
 801cd38:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	689a      	ldr	r2, [r3, #8]
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	689b      	ldr	r3, [r3, #8]
 801cd42:	681b      	ldr	r3, [r3, #0]
 801cd44:	3320      	adds	r3, #32
 801cd46:	681b      	ldr	r3, [r3, #0]
 801cd48:	4610      	mov	r0, r2
 801cd4a:	4798      	blx	r3
 801cd4c:	4603      	mov	r3, r0
 801cd4e:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 801cd52:	d205      	bcs.n	801cd60 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 801cd54:	4b4e      	ldr	r3, [pc, #312]	; (801ce90 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801cd56:	4a4f      	ldr	r2, [pc, #316]	; (801ce94 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801cd58:	21c2      	movs	r1, #194	; 0xc2
 801cd5a:	484f      	ldr	r0, [pc, #316]	; (801ce98 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801cd5c:	f00e f9cc 	bl	802b0f8 <__assert_func>
 801cd60:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	685a      	ldr	r2, [r3, #4]
 801cd66:	687b      	ldr	r3, [r7, #4]
 801cd68:	685b      	ldr	r3, [r3, #4]
 801cd6a:	681b      	ldr	r3, [r3, #0]
 801cd6c:	3320      	adds	r3, #32
 801cd6e:	681b      	ldr	r3, [r3, #0]
 801cd70:	4610      	mov	r0, r2
 801cd72:	4798      	blx	r3
 801cd74:	4603      	mov	r3, r0
 801cd76:	2b0f      	cmp	r3, #15
 801cd78:	d805      	bhi.n	801cd86 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 801cd7a:	4b48      	ldr	r3, [pc, #288]	; (801ce9c <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 801cd7c:	4a45      	ldr	r2, [pc, #276]	; (801ce94 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801cd7e:	21c3      	movs	r1, #195	; 0xc3
 801cd80:	4845      	ldr	r0, [pc, #276]	; (801ce98 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801cd82:	f00e f9b9 	bl	802b0f8 <__assert_func>
 801cd86:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	68da      	ldr	r2, [r3, #12]
 801cd8c:	687b      	ldr	r3, [r7, #4]
 801cd8e:	68db      	ldr	r3, [r3, #12]
 801cd90:	681b      	ldr	r3, [r3, #0]
 801cd92:	3320      	adds	r3, #32
 801cd94:	681b      	ldr	r3, [r3, #0]
 801cd96:	4610      	mov	r0, r2
 801cd98:	4798      	blx	r3
 801cd9a:	4603      	mov	r3, r0
 801cd9c:	2b53      	cmp	r3, #83	; 0x53
 801cd9e:	d805      	bhi.n	801cdac <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 801cda0:	4b3f      	ldr	r3, [pc, #252]	; (801cea0 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 801cda2:	4a3c      	ldr	r2, [pc, #240]	; (801ce94 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801cda4:	21c4      	movs	r1, #196	; 0xc4
 801cda6:	483c      	ldr	r0, [pc, #240]	; (801ce98 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801cda8:	f00e f9a6 	bl	802b0f8 <__assert_func>
 801cdac:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 801cdae:	683a      	ldr	r2, [r7, #0]
 801cdb0:	68b9      	ldr	r1, [r7, #8]
 801cdb2:	68f8      	ldr	r0, [r7, #12]
 801cdb4:	f7ff fb39 	bl	801c42a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	68db      	ldr	r3, [r3, #12]
 801cdbc:	2100      	movs	r1, #0
 801cdbe:	4618      	mov	r0, r3
 801cdc0:	f000 faf8 	bl	801d3b4 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 801cdc4:	4603      	mov	r3, r0
 801cdc6:	4619      	mov	r1, r3
 801cdc8:	2054      	movs	r0, #84	; 0x54
 801cdca:	f7ff f992 	bl	801c0f2 <_ZnwjPv>
 801cdce:	4604      	mov	r4, r0
 801cdd0:	2c00      	cmp	r4, #0
 801cdd2:	d005      	beq.n	801cde0 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 801cdd4:	2114      	movs	r1, #20
 801cdd6:	4620      	mov	r0, r4
 801cdd8:	f000 fb22 	bl	801d420 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 801cddc:	4623      	mov	r3, r4
 801cdde:	e000      	b.n	801cde2 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 801cde0:	4623      	mov	r3, r4
 801cde2:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	689b      	ldr	r3, [r3, #8]
 801cde8:	2100      	movs	r1, #0
 801cdea:	4618      	mov	r0, r3
 801cdec:	f000 fbac 	bl	801d548 <_ZN8touchgfx17AbstractPartition2atI13direccionViewEERT_t>
 801cdf0:	4603      	mov	r3, r0
 801cdf2:	4619      	mov	r1, r3
 801cdf4:	f44f 70e8 	mov.w	r0, #464	; 0x1d0
 801cdf8:	f7ff f97b 	bl	801c0f2 <_ZnwjPv>
 801cdfc:	4604      	mov	r4, r0
 801cdfe:	2c00      	cmp	r4, #0
 801ce00:	d004      	beq.n	801ce0c <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801ce02:	4620      	mov	r0, r4
 801ce04:	f002 f85a 	bl	801eebc <_ZN13direccionViewC1Ev>
 801ce08:	4623      	mov	r3, r4
 801ce0a:	e000      	b.n	801ce0e <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 801ce0c:	4623      	mov	r3, r4
 801ce0e:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	685b      	ldr	r3, [r3, #4]
 801ce14:	2100      	movs	r1, #0
 801ce16:	4618      	mov	r0, r3
 801ce18:	f000 fba9 	bl	801d56e <_ZN8touchgfx17AbstractPartition2atI18direccionPresenterEERT_t>
 801ce1c:	4603      	mov	r3, r0
 801ce1e:	4619      	mov	r1, r3
 801ce20:	2010      	movs	r0, #16
 801ce22:	f7ff f966 	bl	801c0f2 <_ZnwjPv>
 801ce26:	4604      	mov	r4, r0
 801ce28:	2c00      	cmp	r4, #0
 801ce2a:	d005      	beq.n	801ce38 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 801ce2c:	69b9      	ldr	r1, [r7, #24]
 801ce2e:	4620      	mov	r0, r4
 801ce30:	f001 ffd2 	bl	801edd8 <_ZN18direccionPresenterC1ER13direccionView>
 801ce34:	4623      	mov	r3, r4
 801ce36:	e000      	b.n	801ce3a <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 801ce38:	4623      	mov	r3, r4
 801ce3a:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 801ce3c:	683b      	ldr	r3, [r7, #0]
 801ce3e:	69fa      	ldr	r2, [r7, #28]
 801ce40:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801ce42:	68bb      	ldr	r3, [r7, #8]
 801ce44:	697a      	ldr	r2, [r7, #20]
 801ce46:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801ce48:	68fb      	ldr	r3, [r7, #12]
 801ce4a:	69ba      	ldr	r2, [r7, #24]
 801ce4c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801ce4e:	697b      	ldr	r3, [r7, #20]
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d002      	beq.n	801ce5a <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 801ce54:	697b      	ldr	r3, [r7, #20]
 801ce56:	3304      	adds	r3, #4
 801ce58:	e000      	b.n	801ce5c <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 801ce5a:	2300      	movs	r3, #0
 801ce5c:	4619      	mov	r1, r3
 801ce5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ce60:	f7ff fb66 	bl	801c530 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801ce64:	697b      	ldr	r3, [r7, #20]
 801ce66:	3304      	adds	r3, #4
 801ce68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ce6a:	4618      	mov	r0, r3
 801ce6c:	f7ff fbd9 	bl	801c622 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801ce70:	69bb      	ldr	r3, [r7, #24]
 801ce72:	6979      	ldr	r1, [r7, #20]
 801ce74:	4618      	mov	r0, r3
 801ce76:	f000 fb8d 	bl	801d594 <_ZN8touchgfx4ViewI18direccionPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801ce7a:	69fa      	ldr	r2, [r7, #28]
 801ce7c:	6979      	ldr	r1, [r7, #20]
 801ce7e:	69b8      	ldr	r0, [r7, #24]
 801ce80:	f7ff fb2f 	bl	801c4e2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 801ce84:	697b      	ldr	r3, [r7, #20]
}
 801ce86:	4618      	mov	r0, r3
 801ce88:	3724      	adds	r7, #36	; 0x24
 801ce8a:	46bd      	mov	sp, r7
 801ce8c:	bd90      	pop	{r4, r7, pc}
 801ce8e:	bf00      	nop
 801ce90:	0802c714 	.word	0x0802c714
 801ce94:	0802dae0 	.word	0x0802dae0
 801ce98:	0802c7a4 	.word	0x0802c7a4
 801ce9c:	0802c7f4 	.word	0x0802c7f4
 801cea0:	0802c898 	.word	0x0802c898

0801cea4 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801cea4:	b590      	push	{r4, r7, lr}
 801cea6:	b089      	sub	sp, #36	; 0x24
 801cea8:	af00      	add	r7, sp, #0
 801ceaa:	60f8      	str	r0, [r7, #12]
 801ceac:	60b9      	str	r1, [r7, #8]
 801ceae:	607a      	str	r2, [r7, #4]
 801ceb0:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	689a      	ldr	r2, [r3, #8]
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	689b      	ldr	r3, [r3, #8]
 801ceba:	681b      	ldr	r3, [r3, #0]
 801cebc:	3320      	adds	r3, #32
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	4610      	mov	r0, r2
 801cec2:	4798      	blx	r3
 801cec4:	4603      	mov	r3, r0
 801cec6:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 801ceca:	d205      	bcs.n	801ced8 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 801cecc:	4b4e      	ldr	r3, [pc, #312]	; (801d008 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801cece:	4a4f      	ldr	r2, [pc, #316]	; (801d00c <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801ced0:	21c2      	movs	r1, #194	; 0xc2
 801ced2:	484f      	ldr	r0, [pc, #316]	; (801d010 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801ced4:	f00e f910 	bl	802b0f8 <__assert_func>
 801ced8:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	685a      	ldr	r2, [r3, #4]
 801cede:	687b      	ldr	r3, [r7, #4]
 801cee0:	685b      	ldr	r3, [r3, #4]
 801cee2:	681b      	ldr	r3, [r3, #0]
 801cee4:	3320      	adds	r3, #32
 801cee6:	681b      	ldr	r3, [r3, #0]
 801cee8:	4610      	mov	r0, r2
 801ceea:	4798      	blx	r3
 801ceec:	4603      	mov	r3, r0
 801ceee:	2b0f      	cmp	r3, #15
 801cef0:	d805      	bhi.n	801cefe <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 801cef2:	4b48      	ldr	r3, [pc, #288]	; (801d014 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 801cef4:	4a45      	ldr	r2, [pc, #276]	; (801d00c <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801cef6:	21c3      	movs	r1, #195	; 0xc3
 801cef8:	4845      	ldr	r0, [pc, #276]	; (801d010 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801cefa:	f00e f8fd 	bl	802b0f8 <__assert_func>
 801cefe:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	68da      	ldr	r2, [r3, #12]
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	68db      	ldr	r3, [r3, #12]
 801cf08:	681b      	ldr	r3, [r3, #0]
 801cf0a:	3320      	adds	r3, #32
 801cf0c:	681b      	ldr	r3, [r3, #0]
 801cf0e:	4610      	mov	r0, r2
 801cf10:	4798      	blx	r3
 801cf12:	4603      	mov	r3, r0
 801cf14:	2b53      	cmp	r3, #83	; 0x53
 801cf16:	d805      	bhi.n	801cf24 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 801cf18:	4b3f      	ldr	r3, [pc, #252]	; (801d018 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 801cf1a:	4a3c      	ldr	r2, [pc, #240]	; (801d00c <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801cf1c:	21c4      	movs	r1, #196	; 0xc4
 801cf1e:	483c      	ldr	r0, [pc, #240]	; (801d010 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801cf20:	f00e f8ea 	bl	802b0f8 <__assert_func>
 801cf24:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 801cf26:	683a      	ldr	r2, [r7, #0]
 801cf28:	68b9      	ldr	r1, [r7, #8]
 801cf2a:	68f8      	ldr	r0, [r7, #12]
 801cf2c:	f7ff fa7d 	bl	801c42a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	68db      	ldr	r3, [r3, #12]
 801cf34:	2100      	movs	r1, #0
 801cf36:	4618      	mov	r0, r3
 801cf38:	f000 f973 	bl	801d222 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 801cf3c:	4603      	mov	r3, r0
 801cf3e:	4619      	mov	r1, r3
 801cf40:	2054      	movs	r0, #84	; 0x54
 801cf42:	f7ff f8d6 	bl	801c0f2 <_ZnwjPv>
 801cf46:	4604      	mov	r4, r0
 801cf48:	2c00      	cmp	r4, #0
 801cf4a:	d005      	beq.n	801cf58 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 801cf4c:	2114      	movs	r1, #20
 801cf4e:	4620      	mov	r0, r4
 801cf50:	f000 f99c 	bl	801d28c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 801cf54:	4623      	mov	r3, r4
 801cf56:	e000      	b.n	801cf5a <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 801cf58:	4623      	mov	r3, r4
 801cf5a:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	689b      	ldr	r3, [r3, #8]
 801cf60:	2100      	movs	r1, #0
 801cf62:	4618      	mov	r0, r3
 801cf64:	f000 faf0 	bl	801d548 <_ZN8touchgfx17AbstractPartition2atI13direccionViewEERT_t>
 801cf68:	4603      	mov	r3, r0
 801cf6a:	4619      	mov	r1, r3
 801cf6c:	f44f 70e8 	mov.w	r0, #464	; 0x1d0
 801cf70:	f7ff f8bf 	bl	801c0f2 <_ZnwjPv>
 801cf74:	4604      	mov	r4, r0
 801cf76:	2c00      	cmp	r4, #0
 801cf78:	d004      	beq.n	801cf84 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801cf7a:	4620      	mov	r0, r4
 801cf7c:	f001 ff9e 	bl	801eebc <_ZN13direccionViewC1Ev>
 801cf80:	4623      	mov	r3, r4
 801cf82:	e000      	b.n	801cf86 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 801cf84:	4623      	mov	r3, r4
 801cf86:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	685b      	ldr	r3, [r3, #4]
 801cf8c:	2100      	movs	r1, #0
 801cf8e:	4618      	mov	r0, r3
 801cf90:	f000 faed 	bl	801d56e <_ZN8touchgfx17AbstractPartition2atI18direccionPresenterEERT_t>
 801cf94:	4603      	mov	r3, r0
 801cf96:	4619      	mov	r1, r3
 801cf98:	2010      	movs	r0, #16
 801cf9a:	f7ff f8aa 	bl	801c0f2 <_ZnwjPv>
 801cf9e:	4604      	mov	r4, r0
 801cfa0:	2c00      	cmp	r4, #0
 801cfa2:	d005      	beq.n	801cfb0 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 801cfa4:	69b9      	ldr	r1, [r7, #24]
 801cfa6:	4620      	mov	r0, r4
 801cfa8:	f001 ff16 	bl	801edd8 <_ZN18direccionPresenterC1ER13direccionView>
 801cfac:	4623      	mov	r3, r4
 801cfae:	e000      	b.n	801cfb2 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 801cfb0:	4623      	mov	r3, r4
 801cfb2:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 801cfb4:	683b      	ldr	r3, [r7, #0]
 801cfb6:	69fa      	ldr	r2, [r7, #28]
 801cfb8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801cfba:	68bb      	ldr	r3, [r7, #8]
 801cfbc:	697a      	ldr	r2, [r7, #20]
 801cfbe:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801cfc0:	68fb      	ldr	r3, [r7, #12]
 801cfc2:	69ba      	ldr	r2, [r7, #24]
 801cfc4:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801cfc6:	697b      	ldr	r3, [r7, #20]
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d002      	beq.n	801cfd2 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 801cfcc:	697b      	ldr	r3, [r7, #20]
 801cfce:	3304      	adds	r3, #4
 801cfd0:	e000      	b.n	801cfd4 <_ZN8touchgfx14makeTransitionI13direccionView18direccionPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 801cfd2:	2300      	movs	r3, #0
 801cfd4:	4619      	mov	r1, r3
 801cfd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cfd8:	f7ff faaa 	bl	801c530 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801cfdc:	697b      	ldr	r3, [r7, #20]
 801cfde:	3304      	adds	r3, #4
 801cfe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801cfe2:	4618      	mov	r0, r3
 801cfe4:	f7ff fb1d 	bl	801c622 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801cfe8:	69bb      	ldr	r3, [r7, #24]
 801cfea:	6979      	ldr	r1, [r7, #20]
 801cfec:	4618      	mov	r0, r3
 801cfee:	f000 fad1 	bl	801d594 <_ZN8touchgfx4ViewI18direccionPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801cff2:	69fa      	ldr	r2, [r7, #28]
 801cff4:	6979      	ldr	r1, [r7, #20]
 801cff6:	69b8      	ldr	r0, [r7, #24]
 801cff8:	f7ff fa73 	bl	801c4e2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 801cffc:	697b      	ldr	r3, [r7, #20]
}
 801cffe:	4618      	mov	r0, r3
 801d000:	3724      	adds	r7, #36	; 0x24
 801d002:	46bd      	mov	sp, r7
 801d004:	bd90      	pop	{r4, r7, pc}
 801d006:	bf00      	nop
 801d008:	0802c714 	.word	0x0802c714
 801d00c:	0802dc04 	.word	0x0802dc04
 801d010:	0802c7a4 	.word	0x0802c7a4
 801d014:	0802c7f4 	.word	0x0802c7f4
 801d018:	0802c898 	.word	0x0802c898

0801d01c <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801d01c:	b590      	push	{r4, r7, lr}
 801d01e:	b089      	sub	sp, #36	; 0x24
 801d020:	af00      	add	r7, sp, #0
 801d022:	60f8      	str	r0, [r7, #12]
 801d024:	60b9      	str	r1, [r7, #8]
 801d026:	607a      	str	r2, [r7, #4]
 801d028:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801d02a:	687b      	ldr	r3, [r7, #4]
 801d02c:	689a      	ldr	r2, [r3, #8]
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	689b      	ldr	r3, [r3, #8]
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	3320      	adds	r3, #32
 801d036:	681b      	ldr	r3, [r3, #0]
 801d038:	4610      	mov	r0, r2
 801d03a:	4798      	blx	r3
 801d03c:	4603      	mov	r3, r0
 801d03e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d042:	d205      	bcs.n	801d050 <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 801d044:	4b4e      	ldr	r3, [pc, #312]	; (801d180 <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801d046:	4a4f      	ldr	r2, [pc, #316]	; (801d184 <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801d048:	21c2      	movs	r1, #194	; 0xc2
 801d04a:	484f      	ldr	r0, [pc, #316]	; (801d188 <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801d04c:	f00e f854 	bl	802b0f8 <__assert_func>
 801d050:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	685a      	ldr	r2, [r3, #4]
 801d056:	687b      	ldr	r3, [r7, #4]
 801d058:	685b      	ldr	r3, [r3, #4]
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	3320      	adds	r3, #32
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	4610      	mov	r0, r2
 801d062:	4798      	blx	r3
 801d064:	4603      	mov	r3, r0
 801d066:	2b0f      	cmp	r3, #15
 801d068:	d805      	bhi.n	801d076 <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 801d06a:	4b48      	ldr	r3, [pc, #288]	; (801d18c <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 801d06c:	4a45      	ldr	r2, [pc, #276]	; (801d184 <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801d06e:	21c3      	movs	r1, #195	; 0xc3
 801d070:	4845      	ldr	r0, [pc, #276]	; (801d188 <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801d072:	f00e f841 	bl	802b0f8 <__assert_func>
 801d076:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	68da      	ldr	r2, [r3, #12]
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	68db      	ldr	r3, [r3, #12]
 801d080:	681b      	ldr	r3, [r3, #0]
 801d082:	3320      	adds	r3, #32
 801d084:	681b      	ldr	r3, [r3, #0]
 801d086:	4610      	mov	r0, r2
 801d088:	4798      	blx	r3
 801d08a:	4603      	mov	r3, r0
 801d08c:	2b53      	cmp	r3, #83	; 0x53
 801d08e:	d805      	bhi.n	801d09c <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 801d090:	4b3f      	ldr	r3, [pc, #252]	; (801d190 <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 801d092:	4a3c      	ldr	r2, [pc, #240]	; (801d184 <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801d094:	21c4      	movs	r1, #196	; 0xc4
 801d096:	483c      	ldr	r0, [pc, #240]	; (801d188 <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801d098:	f00e f82e 	bl	802b0f8 <__assert_func>
 801d09c:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 801d09e:	683a      	ldr	r2, [r7, #0]
 801d0a0:	68b9      	ldr	r1, [r7, #8]
 801d0a2:	68f8      	ldr	r0, [r7, #12]
 801d0a4:	f7ff f9c1 	bl	801c42a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	68db      	ldr	r3, [r3, #12]
 801d0ac:	2100      	movs	r1, #0
 801d0ae:	4618      	mov	r0, r3
 801d0b0:	f000 f980 	bl	801d3b4 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 801d0b4:	4603      	mov	r3, r0
 801d0b6:	4619      	mov	r1, r3
 801d0b8:	2054      	movs	r0, #84	; 0x54
 801d0ba:	f7ff f81a 	bl	801c0f2 <_ZnwjPv>
 801d0be:	4604      	mov	r4, r0
 801d0c0:	2c00      	cmp	r4, #0
 801d0c2:	d005      	beq.n	801d0d0 <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 801d0c4:	2114      	movs	r1, #20
 801d0c6:	4620      	mov	r0, r4
 801d0c8:	f000 f9aa 	bl	801d420 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 801d0cc:	4623      	mov	r3, r4
 801d0ce:	e000      	b.n	801d0d2 <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 801d0d0:	4623      	mov	r3, r4
 801d0d2:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	689b      	ldr	r3, [r3, #8]
 801d0d8:	2100      	movs	r1, #0
 801d0da:	4618      	mov	r0, r3
 801d0dc:	f000 fa68 	bl	801d5b0 <_ZN8touchgfx17AbstractPartition2atI11actitudViewEERT_t>
 801d0e0:	4603      	mov	r3, r0
 801d0e2:	4619      	mov	r1, r3
 801d0e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 801d0e8:	f7ff f803 	bl	801c0f2 <_ZnwjPv>
 801d0ec:	4604      	mov	r4, r0
 801d0ee:	2c00      	cmp	r4, #0
 801d0f0:	d004      	beq.n	801d0fc <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801d0f2:	4620      	mov	r0, r4
 801d0f4:	f001 fc36 	bl	801e964 <_ZN11actitudViewC1Ev>
 801d0f8:	4623      	mov	r3, r4
 801d0fa:	e000      	b.n	801d0fe <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 801d0fc:	4623      	mov	r3, r4
 801d0fe:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 801d100:	687b      	ldr	r3, [r7, #4]
 801d102:	685b      	ldr	r3, [r3, #4]
 801d104:	2100      	movs	r1, #0
 801d106:	4618      	mov	r0, r3
 801d108:	f000 fa65 	bl	801d5d6 <_ZN8touchgfx17AbstractPartition2atI16actitudPresenterEERT_t>
 801d10c:	4603      	mov	r3, r0
 801d10e:	4619      	mov	r1, r3
 801d110:	2010      	movs	r0, #16
 801d112:	f7fe ffee 	bl	801c0f2 <_ZnwjPv>
 801d116:	4604      	mov	r4, r0
 801d118:	2c00      	cmp	r4, #0
 801d11a:	d005      	beq.n	801d128 <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 801d11c:	69b9      	ldr	r1, [r7, #24]
 801d11e:	4620      	mov	r0, r4
 801d120:	f001 fba0 	bl	801e864 <_ZN16actitudPresenterC1ER11actitudView>
 801d124:	4623      	mov	r3, r4
 801d126:	e000      	b.n	801d12a <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 801d128:	4623      	mov	r3, r4
 801d12a:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 801d12c:	683b      	ldr	r3, [r7, #0]
 801d12e:	69fa      	ldr	r2, [r7, #28]
 801d130:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801d132:	68bb      	ldr	r3, [r7, #8]
 801d134:	697a      	ldr	r2, [r7, #20]
 801d136:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801d138:	68fb      	ldr	r3, [r7, #12]
 801d13a:	69ba      	ldr	r2, [r7, #24]
 801d13c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801d13e:	697b      	ldr	r3, [r7, #20]
 801d140:	2b00      	cmp	r3, #0
 801d142:	d002      	beq.n	801d14a <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 801d144:	697b      	ldr	r3, [r7, #20]
 801d146:	3304      	adds	r3, #4
 801d148:	e000      	b.n	801d14c <_ZN8touchgfx14makeTransitionI11actitudView16actitudPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 801d14a:	2300      	movs	r3, #0
 801d14c:	4619      	mov	r1, r3
 801d14e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d150:	f7ff f9ee 	bl	801c530 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801d154:	697b      	ldr	r3, [r7, #20]
 801d156:	3304      	adds	r3, #4
 801d158:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d15a:	4618      	mov	r0, r3
 801d15c:	f7ff fa61 	bl	801c622 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801d160:	69bb      	ldr	r3, [r7, #24]
 801d162:	6979      	ldr	r1, [r7, #20]
 801d164:	4618      	mov	r0, r3
 801d166:	f000 fa49 	bl	801d5fc <_ZN8touchgfx4ViewI16actitudPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801d16a:	69fa      	ldr	r2, [r7, #28]
 801d16c:	6979      	ldr	r1, [r7, #20]
 801d16e:	69b8      	ldr	r0, [r7, #24]
 801d170:	f7ff f9b7 	bl	801c4e2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 801d174:	697b      	ldr	r3, [r7, #20]
}
 801d176:	4618      	mov	r0, r3
 801d178:	3724      	adds	r7, #36	; 0x24
 801d17a:	46bd      	mov	sp, r7
 801d17c:	bd90      	pop	{r4, r7, pc}
 801d17e:	bf00      	nop
 801d180:	0802c714 	.word	0x0802c714
 801d184:	0802dd28 	.word	0x0802dd28
 801d188:	0802c7a4 	.word	0x0802c7a4
 801d18c:	0802c7f4 	.word	0x0802c7f4
 801d190:	0802c898 	.word	0x0802c898

0801d194 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 801d194:	b580      	push	{r7, lr}
 801d196:	b082      	sub	sp, #8
 801d198:	af00      	add	r7, sp, #0
 801d19a:	6078      	str	r0, [r7, #4]
 801d19c:	460b      	mov	r3, r1
 801d19e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 801d1a0:	687b      	ldr	r3, [r7, #4]
 801d1a2:	681b      	ldr	r3, [r3, #0]
 801d1a4:	3324      	adds	r3, #36	; 0x24
 801d1a6:	681b      	ldr	r3, [r3, #0]
 801d1a8:	887a      	ldrh	r2, [r7, #2]
 801d1aa:	4611      	mov	r1, r2
 801d1ac:	6878      	ldr	r0, [r7, #4]
 801d1ae:	4798      	blx	r3
 801d1b0:	4603      	mov	r3, r0
    }
 801d1b2:	4618      	mov	r0, r3
 801d1b4:	3708      	adds	r7, #8
 801d1b6:	46bd      	mov	sp, r7
 801d1b8:	bd80      	pop	{r7, pc}

0801d1ba <_ZN8touchgfx17AbstractPartition2atI14anemometroViewEERT_t>:
    T& at(const uint16_t index)
 801d1ba:	b580      	push	{r7, lr}
 801d1bc:	b082      	sub	sp, #8
 801d1be:	af00      	add	r7, sp, #0
 801d1c0:	6078      	str	r0, [r7, #4]
 801d1c2:	460b      	mov	r3, r1
 801d1c4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801d1c6:	687b      	ldr	r3, [r7, #4]
 801d1c8:	681b      	ldr	r3, [r3, #0]
 801d1ca:	3324      	adds	r3, #36	; 0x24
 801d1cc:	681b      	ldr	r3, [r3, #0]
 801d1ce:	887a      	ldrh	r2, [r7, #2]
 801d1d0:	4611      	mov	r1, r2
 801d1d2:	6878      	ldr	r0, [r7, #4]
 801d1d4:	4798      	blx	r3
 801d1d6:	4603      	mov	r3, r0
    }
 801d1d8:	4618      	mov	r0, r3
 801d1da:	3708      	adds	r7, #8
 801d1dc:	46bd      	mov	sp, r7
 801d1de:	bd80      	pop	{r7, pc}

0801d1e0 <_ZN8touchgfx17AbstractPartition2atI19anemometroPresenterEERT_t>:
    T& at(const uint16_t index)
 801d1e0:	b580      	push	{r7, lr}
 801d1e2:	b082      	sub	sp, #8
 801d1e4:	af00      	add	r7, sp, #0
 801d1e6:	6078      	str	r0, [r7, #4]
 801d1e8:	460b      	mov	r3, r1
 801d1ea:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801d1ec:	687b      	ldr	r3, [r7, #4]
 801d1ee:	681b      	ldr	r3, [r3, #0]
 801d1f0:	3324      	adds	r3, #36	; 0x24
 801d1f2:	681b      	ldr	r3, [r3, #0]
 801d1f4:	887a      	ldrh	r2, [r7, #2]
 801d1f6:	4611      	mov	r1, r2
 801d1f8:	6878      	ldr	r0, [r7, #4]
 801d1fa:	4798      	blx	r3
 801d1fc:	4603      	mov	r3, r0
    }
 801d1fe:	4618      	mov	r0, r3
 801d200:	3708      	adds	r7, #8
 801d202:	46bd      	mov	sp, r7
 801d204:	bd80      	pop	{r7, pc}

0801d206 <_ZN8touchgfx4ViewI19anemometroPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 801d206:	b480      	push	{r7}
 801d208:	b083      	sub	sp, #12
 801d20a:	af00      	add	r7, sp, #0
 801d20c:	6078      	str	r0, [r7, #4]
 801d20e:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 801d210:	687b      	ldr	r3, [r7, #4]
 801d212:	683a      	ldr	r2, [r7, #0]
 801d214:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801d216:	bf00      	nop
 801d218:	370c      	adds	r7, #12
 801d21a:	46bd      	mov	sp, r7
 801d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d220:	4770      	bx	lr

0801d222 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 801d222:	b580      	push	{r7, lr}
 801d224:	b082      	sub	sp, #8
 801d226:	af00      	add	r7, sp, #0
 801d228:	6078      	str	r0, [r7, #4]
 801d22a:	460b      	mov	r3, r1
 801d22c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	3324      	adds	r3, #36	; 0x24
 801d234:	681b      	ldr	r3, [r3, #0]
 801d236:	887a      	ldrh	r2, [r7, #2]
 801d238:	4611      	mov	r1, r2
 801d23a:	6878      	ldr	r0, [r7, #4]
 801d23c:	4798      	blx	r3
 801d23e:	4603      	mov	r3, r0
    }
 801d240:	4618      	mov	r0, r3
 801d242:	3708      	adds	r7, #8
 801d244:	46bd      	mov	sp, r7
 801d246:	bd80      	pop	{r7, pc}

0801d248 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801d248:	b580      	push	{r7, lr}
 801d24a:	b082      	sub	sp, #8
 801d24c:	af00      	add	r7, sp, #0
 801d24e:	6078      	str	r0, [r7, #4]
 801d250:	4a05      	ldr	r2, [pc, #20]	; (801d268 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev+0x20>)
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	601a      	str	r2, [r3, #0]
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	4618      	mov	r0, r3
 801d25a:	f7f6 fbb5 	bl	80139c8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	4618      	mov	r0, r3
 801d262:	3708      	adds	r7, #8
 801d264:	46bd      	mov	sp, r7
 801d266:	bd80      	pop	{r7, pc}
 801d268:	0802d74c 	.word	0x0802d74c

0801d26c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED0Ev>:
 801d26c:	b580      	push	{r7, lr}
 801d26e:	b082      	sub	sp, #8
 801d270:	af00      	add	r7, sp, #0
 801d272:	6078      	str	r0, [r7, #4]
 801d274:	6878      	ldr	r0, [r7, #4]
 801d276:	f7ff ffe7 	bl	801d248 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 801d27a:	2110      	movs	r1, #16
 801d27c:	6878      	ldr	r0, [r7, #4]
 801d27e:	f00d f950 	bl	802a522 <_ZdlPvj>
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	4618      	mov	r0, r3
 801d286:	3708      	adds	r7, #8
 801d288:	46bd      	mov	sp, r7
 801d28a:	bd80      	pop	{r7, pc}

0801d28c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 801d28c:	b590      	push	{r4, r7, lr}
 801d28e:	b087      	sub	sp, #28
 801d290:	af02      	add	r7, sp, #8
 801d292:	6078      	str	r0, [r7, #4]
 801d294:	460b      	mov	r3, r1
 801d296:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 801d298:	687b      	ldr	r3, [r7, #4]
 801d29a:	4618      	mov	r0, r3
 801d29c:	f7fe ff96 	bl	801c1cc <_ZN8touchgfx10TransitionC1Ev>
 801d2a0:	4a3f      	ldr	r2, [pc, #252]	; (801d3a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x114>)
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	601a      	str	r2, [r3, #0]
 801d2a6:	687b      	ldr	r3, [r7, #4]
 801d2a8:	330c      	adds	r3, #12
 801d2aa:	4618      	mov	r0, r3
 801d2ac:	f7f7 faca 	bl	8014844 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	f103 020c 	add.w	r2, r3, #12
 801d2b6:	687b      	ldr	r3, [r7, #4]
 801d2b8:	639a      	str	r2, [r3, #56]	; 0x38
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801d2c0:	4a38      	ldr	r2, [pc, #224]	; (801d3a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x118>)
 801d2c2:	f107 0308 	add.w	r3, r7, #8
 801d2c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d2ca:	e883 0003 	stmia.w	r3, {r0, r1}
 801d2ce:	f107 0308 	add.w	r3, r7, #8
 801d2d2:	cb0c      	ldmia	r3, {r2, r3}
 801d2d4:	6879      	ldr	r1, [r7, #4]
 801d2d6:	4620      	mov	r0, r4
 801d2d8:	f000 f9d8 	bl	801d68c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 801d2dc:	687b      	ldr	r3, [r7, #4]
 801d2de:	2203      	movs	r2, #3
 801d2e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	78fa      	ldrb	r2, [r7, #3]
 801d2e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	2200      	movs	r2, #0
 801d2f0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	2200      	movs	r2, #0
 801d2f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 801d2fc:	4b2a      	ldr	r3, [pc, #168]	; (801d3a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x11c>)
 801d2fe:	781b      	ldrb	r3, [r3, #0]
 801d300:	2b00      	cmp	r3, #0
 801d302:	d047      	beq.n	801d394 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 801d304:	687b      	ldr	r3, [r7, #4]
 801d306:	f103 000c 	add.w	r0, r3, #12
 801d30a:	4b28      	ldr	r3, [pc, #160]	; (801d3ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 801d30c:	881b      	ldrh	r3, [r3, #0]
 801d30e:	b21a      	sxth	r2, r3
 801d310:	4b27      	ldr	r3, [pc, #156]	; (801d3b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 801d312:	881b      	ldrh	r3, [r3, #0]
 801d314:	b21b      	sxth	r3, r3
 801d316:	9300      	str	r3, [sp, #0]
 801d318:	4613      	mov	r3, r2
 801d31a:	2200      	movs	r2, #0
 801d31c:	2100      	movs	r1, #0
 801d31e:	f7f4 fe79 	bl	8012014 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 801d322:	687b      	ldr	r3, [r7, #4]
 801d324:	330c      	adds	r3, #12
 801d326:	4618      	mov	r0, r3
 801d328:	f7f7 fb4f 	bl	80149ca <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 801d32c:	687b      	ldr	r3, [r7, #4]
 801d32e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801d332:	2b03      	cmp	r3, #3
 801d334:	d82a      	bhi.n	801d38c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x100>
 801d336:	a201      	add	r2, pc, #4	; (adr r2, 801d33c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb0>)
 801d338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d33c:	0801d36d 	.word	0x0801d36d
 801d340:	0801d37b 	.word	0x0801d37b
 801d344:	0801d34d 	.word	0x0801d34d
 801d348:	0801d35f 	.word	0x0801d35f
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 801d34c:	4b17      	ldr	r3, [pc, #92]	; (801d3ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 801d34e:	881b      	ldrh	r3, [r3, #0]
 801d350:	425b      	negs	r3, r3
 801d352:	b29b      	uxth	r3, r3
 801d354:	b21a      	sxth	r2, r3
 801d356:	687b      	ldr	r3, [r7, #4]
 801d358:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 801d35c:	e01a      	b.n	801d394 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 801d35e:	4b13      	ldr	r3, [pc, #76]	; (801d3ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 801d360:	881b      	ldrh	r3, [r3, #0]
 801d362:	b21a      	sxth	r2, r3
 801d364:	687b      	ldr	r3, [r7, #4]
 801d366:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 801d36a:	e013      	b.n	801d394 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 801d36c:	4b10      	ldr	r3, [pc, #64]	; (801d3b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 801d36e:	881b      	ldrh	r3, [r3, #0]
 801d370:	b21a      	sxth	r2, r3
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 801d378:	e00c      	b.n	801d394 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 801d37a:	4b0d      	ldr	r3, [pc, #52]	; (801d3b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 801d37c:	881b      	ldrh	r3, [r3, #0]
 801d37e:	425b      	negs	r3, r3
 801d380:	b29b      	uxth	r3, r3
 801d382:	b21a      	sxth	r2, r3
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 801d38a:	e003      	b.n	801d394 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            default:
                done = true;
 801d38c:	687b      	ldr	r3, [r7, #4]
 801d38e:	2201      	movs	r2, #1
 801d390:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 801d392:	bf00      	nop
            }
        }
    }
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	4618      	mov	r0, r3
 801d398:	3714      	adds	r7, #20
 801d39a:	46bd      	mov	sp, r7
 801d39c:	bd90      	pop	{r4, r7, pc}
 801d39e:	bf00      	nop
 801d3a0:	0802d724 	.word	0x0802d724
 801d3a4:	0802c93c 	.word	0x0802c93c
 801d3a8:	2000cf75 	.word	0x2000cf75
 801d3ac:	2000cf6a 	.word	0x2000cf6a
 801d3b0:	2000cf6c 	.word	0x2000cf6c

0801d3b4 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 801d3b4:	b580      	push	{r7, lr}
 801d3b6:	b082      	sub	sp, #8
 801d3b8:	af00      	add	r7, sp, #0
 801d3ba:	6078      	str	r0, [r7, #4]
 801d3bc:	460b      	mov	r3, r1
 801d3be:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	681b      	ldr	r3, [r3, #0]
 801d3c4:	3324      	adds	r3, #36	; 0x24
 801d3c6:	681b      	ldr	r3, [r3, #0]
 801d3c8:	887a      	ldrh	r2, [r7, #2]
 801d3ca:	4611      	mov	r1, r2
 801d3cc:	6878      	ldr	r0, [r7, #4]
 801d3ce:	4798      	blx	r3
 801d3d0:	4603      	mov	r3, r0
    }
 801d3d2:	4618      	mov	r0, r3
 801d3d4:	3708      	adds	r7, #8
 801d3d6:	46bd      	mov	sp, r7
 801d3d8:	bd80      	pop	{r7, pc}
	...

0801d3dc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
 801d3dc:	b580      	push	{r7, lr}
 801d3de:	b082      	sub	sp, #8
 801d3e0:	af00      	add	r7, sp, #0
 801d3e2:	6078      	str	r0, [r7, #4]
 801d3e4:	4a05      	ldr	r2, [pc, #20]	; (801d3fc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	601a      	str	r2, [r3, #0]
 801d3ea:	687b      	ldr	r3, [r7, #4]
 801d3ec:	4618      	mov	r0, r3
 801d3ee:	f7f6 faeb 	bl	80139c8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 801d3f2:	687b      	ldr	r3, [r7, #4]
 801d3f4:	4618      	mov	r0, r3
 801d3f6:	3708      	adds	r7, #8
 801d3f8:	46bd      	mov	sp, r7
 801d3fa:	bd80      	pop	{r7, pc}
 801d3fc:	0802d78c 	.word	0x0802d78c

0801d400 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 801d400:	b580      	push	{r7, lr}
 801d402:	b082      	sub	sp, #8
 801d404:	af00      	add	r7, sp, #0
 801d406:	6078      	str	r0, [r7, #4]
 801d408:	6878      	ldr	r0, [r7, #4]
 801d40a:	f7ff ffe7 	bl	801d3dc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 801d40e:	2110      	movs	r1, #16
 801d410:	6878      	ldr	r0, [r7, #4]
 801d412:	f00d f886 	bl	802a522 <_ZdlPvj>
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	4618      	mov	r0, r3
 801d41a:	3708      	adds	r7, #8
 801d41c:	46bd      	mov	sp, r7
 801d41e:	bd80      	pop	{r7, pc}

0801d420 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    SlideTransition(const uint8_t transitionSteps = 20)
 801d420:	b590      	push	{r4, r7, lr}
 801d422:	b087      	sub	sp, #28
 801d424:	af02      	add	r7, sp, #8
 801d426:	6078      	str	r0, [r7, #4]
 801d428:	460b      	mov	r3, r1
 801d42a:	70fb      	strb	r3, [r7, #3]
          calculatedValue(0)
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	4618      	mov	r0, r3
 801d430:	f7fe fecc 	bl	801c1cc <_ZN8touchgfx10TransitionC1Ev>
 801d434:	4a3f      	ldr	r2, [pc, #252]	; (801d534 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	601a      	str	r2, [r3, #0]
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	330c      	adds	r3, #12
 801d43e:	4618      	mov	r0, r3
 801d440:	f7f7 fa00 	bl	8014844 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 801d444:	687b      	ldr	r3, [r7, #4]
 801d446:	f103 020c 	add.w	r2, r3, #12
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	639a      	str	r2, [r3, #56]	; 0x38
 801d44e:	687b      	ldr	r3, [r7, #4]
 801d450:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801d454:	4a38      	ldr	r2, [pc, #224]	; (801d538 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 801d456:	f107 0308 	add.w	r3, r7, #8
 801d45a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d45e:	e883 0003 	stmia.w	r3, {r0, r1}
 801d462:	f107 0308 	add.w	r3, r7, #8
 801d466:	cb0c      	ldmia	r3, {r2, r3}
 801d468:	6879      	ldr	r1, [r7, #4]
 801d46a:	4620      	mov	r0, r4
 801d46c:	f000 f968 	bl	801d740 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 801d470:	687b      	ldr	r3, [r7, #4]
 801d472:	2202      	movs	r2, #2
 801d474:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	78fa      	ldrb	r2, [r7, #3]
 801d47c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 801d480:	687b      	ldr	r3, [r7, #4]
 801d482:	2200      	movs	r2, #0
 801d484:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	2200      	movs	r2, #0
 801d48c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        if (HAL::USE_ANIMATION_STORAGE)
 801d490:	4b2a      	ldr	r3, [pc, #168]	; (801d53c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 801d492:	781b      	ldrb	r3, [r3, #0]
 801d494:	2b00      	cmp	r3, #0
 801d496:	d047      	beq.n	801d528 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	f103 000c 	add.w	r0, r3, #12
 801d49e:	4b28      	ldr	r3, [pc, #160]	; (801d540 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 801d4a0:	881b      	ldrh	r3, [r3, #0]
 801d4a2:	b21a      	sxth	r2, r3
 801d4a4:	4b27      	ldr	r3, [pc, #156]	; (801d544 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 801d4a6:	881b      	ldrh	r3, [r3, #0]
 801d4a8:	b21b      	sxth	r3, r3
 801d4aa:	9300      	str	r3, [sp, #0]
 801d4ac:	4613      	mov	r3, r2
 801d4ae:	2200      	movs	r2, #0
 801d4b0:	2100      	movs	r1, #0
 801d4b2:	f7f4 fdaf 	bl	8012014 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	330c      	adds	r3, #12
 801d4ba:	4618      	mov	r0, r3
 801d4bc:	f7f7 fa85 	bl	80149ca <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            switch (direction)
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801d4c6:	2b03      	cmp	r3, #3
 801d4c8:	d82a      	bhi.n	801d520 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 801d4ca:	a201      	add	r2, pc, #4	; (adr r2, 801d4d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 801d4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d4d0:	0801d501 	.word	0x0801d501
 801d4d4:	0801d50f 	.word	0x0801d50f
 801d4d8:	0801d4e1 	.word	0x0801d4e1
 801d4dc:	0801d4f3 	.word	0x0801d4f3
                targetValue = -HAL::DISPLAY_WIDTH;
 801d4e0:	4b17      	ldr	r3, [pc, #92]	; (801d540 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 801d4e2:	881b      	ldrh	r3, [r3, #0]
 801d4e4:	425b      	negs	r3, r3
 801d4e6:	b29b      	uxth	r3, r3
 801d4e8:	b21a      	sxth	r2, r3
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 801d4f0:	e01a      	b.n	801d528 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = HAL::DISPLAY_WIDTH;
 801d4f2:	4b13      	ldr	r3, [pc, #76]	; (801d540 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 801d4f4:	881b      	ldrh	r3, [r3, #0]
 801d4f6:	b21a      	sxth	r2, r3
 801d4f8:	687b      	ldr	r3, [r7, #4]
 801d4fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 801d4fe:	e013      	b.n	801d528 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = HAL::DISPLAY_HEIGHT;
 801d500:	4b10      	ldr	r3, [pc, #64]	; (801d544 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 801d502:	881b      	ldrh	r3, [r3, #0]
 801d504:	b21a      	sxth	r2, r3
 801d506:	687b      	ldr	r3, [r7, #4]
 801d508:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 801d50c:	e00c      	b.n	801d528 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = -HAL::DISPLAY_HEIGHT;
 801d50e:	4b0d      	ldr	r3, [pc, #52]	; (801d544 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 801d510:	881b      	ldrh	r3, [r3, #0]
 801d512:	425b      	negs	r3, r3
 801d514:	b29b      	uxth	r3, r3
 801d516:	b21a      	sxth	r2, r3
 801d518:	687b      	ldr	r3, [r7, #4]
 801d51a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 801d51e:	e003      	b.n	801d528 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                done = true;
 801d520:	687b      	ldr	r3, [r7, #4]
 801d522:	2201      	movs	r2, #1
 801d524:	721a      	strb	r2, [r3, #8]
                break;
 801d526:	bf00      	nop
    }
 801d528:	687b      	ldr	r3, [r7, #4]
 801d52a:	4618      	mov	r0, r3
 801d52c:	3714      	adds	r7, #20
 801d52e:	46bd      	mov	sp, r7
 801d530:	bd90      	pop	{r4, r7, pc}
 801d532:	bf00      	nop
 801d534:	0802d764 	.word	0x0802d764
 801d538:	0802c944 	.word	0x0802c944
 801d53c:	2000cf75 	.word	0x2000cf75
 801d540:	2000cf6a 	.word	0x2000cf6a
 801d544:	2000cf6c 	.word	0x2000cf6c

0801d548 <_ZN8touchgfx17AbstractPartition2atI13direccionViewEERT_t>:
    T& at(const uint16_t index)
 801d548:	b580      	push	{r7, lr}
 801d54a:	b082      	sub	sp, #8
 801d54c:	af00      	add	r7, sp, #0
 801d54e:	6078      	str	r0, [r7, #4]
 801d550:	460b      	mov	r3, r1
 801d552:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	681b      	ldr	r3, [r3, #0]
 801d558:	3324      	adds	r3, #36	; 0x24
 801d55a:	681b      	ldr	r3, [r3, #0]
 801d55c:	887a      	ldrh	r2, [r7, #2]
 801d55e:	4611      	mov	r1, r2
 801d560:	6878      	ldr	r0, [r7, #4]
 801d562:	4798      	blx	r3
 801d564:	4603      	mov	r3, r0
    }
 801d566:	4618      	mov	r0, r3
 801d568:	3708      	adds	r7, #8
 801d56a:	46bd      	mov	sp, r7
 801d56c:	bd80      	pop	{r7, pc}

0801d56e <_ZN8touchgfx17AbstractPartition2atI18direccionPresenterEERT_t>:
    T& at(const uint16_t index)
 801d56e:	b580      	push	{r7, lr}
 801d570:	b082      	sub	sp, #8
 801d572:	af00      	add	r7, sp, #0
 801d574:	6078      	str	r0, [r7, #4]
 801d576:	460b      	mov	r3, r1
 801d578:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801d57a:	687b      	ldr	r3, [r7, #4]
 801d57c:	681b      	ldr	r3, [r3, #0]
 801d57e:	3324      	adds	r3, #36	; 0x24
 801d580:	681b      	ldr	r3, [r3, #0]
 801d582:	887a      	ldrh	r2, [r7, #2]
 801d584:	4611      	mov	r1, r2
 801d586:	6878      	ldr	r0, [r7, #4]
 801d588:	4798      	blx	r3
 801d58a:	4603      	mov	r3, r0
    }
 801d58c:	4618      	mov	r0, r3
 801d58e:	3708      	adds	r7, #8
 801d590:	46bd      	mov	sp, r7
 801d592:	bd80      	pop	{r7, pc}

0801d594 <_ZN8touchgfx4ViewI18direccionPresenterE4bindERS1_>:
    void bind(T& presenter)
 801d594:	b480      	push	{r7}
 801d596:	b083      	sub	sp, #12
 801d598:	af00      	add	r7, sp, #0
 801d59a:	6078      	str	r0, [r7, #4]
 801d59c:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 801d59e:	687b      	ldr	r3, [r7, #4]
 801d5a0:	683a      	ldr	r2, [r7, #0]
 801d5a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801d5a4:	bf00      	nop
 801d5a6:	370c      	adds	r7, #12
 801d5a8:	46bd      	mov	sp, r7
 801d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5ae:	4770      	bx	lr

0801d5b0 <_ZN8touchgfx17AbstractPartition2atI11actitudViewEERT_t>:
    T& at(const uint16_t index)
 801d5b0:	b580      	push	{r7, lr}
 801d5b2:	b082      	sub	sp, #8
 801d5b4:	af00      	add	r7, sp, #0
 801d5b6:	6078      	str	r0, [r7, #4]
 801d5b8:	460b      	mov	r3, r1
 801d5ba:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801d5bc:	687b      	ldr	r3, [r7, #4]
 801d5be:	681b      	ldr	r3, [r3, #0]
 801d5c0:	3324      	adds	r3, #36	; 0x24
 801d5c2:	681b      	ldr	r3, [r3, #0]
 801d5c4:	887a      	ldrh	r2, [r7, #2]
 801d5c6:	4611      	mov	r1, r2
 801d5c8:	6878      	ldr	r0, [r7, #4]
 801d5ca:	4798      	blx	r3
 801d5cc:	4603      	mov	r3, r0
    }
 801d5ce:	4618      	mov	r0, r3
 801d5d0:	3708      	adds	r7, #8
 801d5d2:	46bd      	mov	sp, r7
 801d5d4:	bd80      	pop	{r7, pc}

0801d5d6 <_ZN8touchgfx17AbstractPartition2atI16actitudPresenterEERT_t>:
    T& at(const uint16_t index)
 801d5d6:	b580      	push	{r7, lr}
 801d5d8:	b082      	sub	sp, #8
 801d5da:	af00      	add	r7, sp, #0
 801d5dc:	6078      	str	r0, [r7, #4]
 801d5de:	460b      	mov	r3, r1
 801d5e0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801d5e2:	687b      	ldr	r3, [r7, #4]
 801d5e4:	681b      	ldr	r3, [r3, #0]
 801d5e6:	3324      	adds	r3, #36	; 0x24
 801d5e8:	681b      	ldr	r3, [r3, #0]
 801d5ea:	887a      	ldrh	r2, [r7, #2]
 801d5ec:	4611      	mov	r1, r2
 801d5ee:	6878      	ldr	r0, [r7, #4]
 801d5f0:	4798      	blx	r3
 801d5f2:	4603      	mov	r3, r0
    }
 801d5f4:	4618      	mov	r0, r3
 801d5f6:	3708      	adds	r7, #8
 801d5f8:	46bd      	mov	sp, r7
 801d5fa:	bd80      	pop	{r7, pc}

0801d5fc <_ZN8touchgfx4ViewI16actitudPresenterE4bindERS1_>:
    void bind(T& presenter)
 801d5fc:	b480      	push	{r7}
 801d5fe:	b083      	sub	sp, #12
 801d600:	af00      	add	r7, sp, #0
 801d602:	6078      	str	r0, [r7, #4]
 801d604:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 801d606:	687b      	ldr	r3, [r7, #4]
 801d608:	683a      	ldr	r2, [r7, #0]
 801d60a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801d60c:	bf00      	nop
 801d60e:	370c      	adds	r7, #12
 801d610:	46bd      	mov	sp, r7
 801d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d616:	4770      	bx	lr

0801d618 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 801d618:	b580      	push	{r7, lr}
 801d61a:	b082      	sub	sp, #8
 801d61c:	af00      	add	r7, sp, #0
 801d61e:	6078      	str	r0, [r7, #4]
 801d620:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 801d622:	687b      	ldr	r3, [r7, #4]
 801d624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d626:	683a      	ldr	r2, [r7, #0]
 801d628:	429a      	cmp	r2, r3
 801d62a:	d02a      	beq.n	801d682 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 801d62c:	687b      	ldr	r3, [r7, #4]
 801d62e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801d632:	2b03      	cmp	r3, #3
 801d634:	d820      	bhi.n	801d678 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x60>
 801d636:	a201      	add	r2, pc, #4	; (adr r2, 801d63c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 801d638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d63c:	0801d663 	.word	0x0801d663
 801d640:	0801d663 	.word	0x0801d663
 801d644:	0801d64d 	.word	0x0801d64d
 801d648:	0801d64d 	.word	0x0801d64d
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 801d64c:	683b      	ldr	r3, [r7, #0]
 801d64e:	681b      	ldr	r3, [r3, #0]
 801d650:	3354      	adds	r3, #84	; 0x54
 801d652:	681b      	ldr	r3, [r3, #0]
 801d654:	687a      	ldr	r2, [r7, #4]
 801d656:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 801d65a:	2200      	movs	r2, #0
 801d65c:	6838      	ldr	r0, [r7, #0]
 801d65e:	4798      	blx	r3
            break;
 801d660:	e010      	b.n	801d684 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 801d662:	683b      	ldr	r3, [r7, #0]
 801d664:	681b      	ldr	r3, [r3, #0]
 801d666:	3354      	adds	r3, #84	; 0x54
 801d668:	681b      	ldr	r3, [r3, #0]
 801d66a:	687a      	ldr	r2, [r7, #4]
 801d66c:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 801d670:	2100      	movs	r1, #0
 801d672:	6838      	ldr	r0, [r7, #0]
 801d674:	4798      	blx	r3
            break;
 801d676:	e005      	b.n	801d684 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	2201      	movs	r2, #1
 801d67c:	721a      	strb	r2, [r3, #8]
            break;
 801d67e:	bf00      	nop
 801d680:	e000      	b.n	801d684 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 801d682:	bf00      	nop
        }
    }
 801d684:	3708      	adds	r7, #8
 801d686:	46bd      	mov	sp, r7
 801d688:	bd80      	pop	{r7, pc}
 801d68a:	bf00      	nop

0801d68c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801d68c:	b580      	push	{r7, lr}
 801d68e:	b084      	sub	sp, #16
 801d690:	af00      	add	r7, sp, #0
 801d692:	60f8      	str	r0, [r7, #12]
 801d694:	60b9      	str	r1, [r7, #8]
 801d696:	4639      	mov	r1, r7
 801d698:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801d69c:	68fb      	ldr	r3, [r7, #12]
 801d69e:	4618      	mov	r0, r3
 801d6a0:	f7f6 f982 	bl	80139a8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 801d6a4:	4a08      	ldr	r2, [pc, #32]	; (801d6c8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 801d6a6:	68fb      	ldr	r3, [r7, #12]
 801d6a8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801d6aa:	68fb      	ldr	r3, [r7, #12]
 801d6ac:	68ba      	ldr	r2, [r7, #8]
 801d6ae:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801d6b0:	68fb      	ldr	r3, [r7, #12]
 801d6b2:	3308      	adds	r3, #8
 801d6b4:	463a      	mov	r2, r7
 801d6b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d6ba:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801d6be:	68fb      	ldr	r3, [r7, #12]
 801d6c0:	4618      	mov	r0, r3
 801d6c2:	3710      	adds	r7, #16
 801d6c4:	46bd      	mov	sp, r7
 801d6c6:	bd80      	pop	{r7, pc}
 801d6c8:	0802d74c 	.word	0x0802d74c

0801d6cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    virtual void tickMoveDrawable(Drawable& d)
 801d6cc:	b580      	push	{r7, lr}
 801d6ce:	b082      	sub	sp, #8
 801d6d0:	af00      	add	r7, sp, #0
 801d6d2:	6078      	str	r0, [r7, #4]
 801d6d4:	6039      	str	r1, [r7, #0]
        if (&d == snapshotPtr)
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d6da:	683a      	ldr	r2, [r7, #0]
 801d6dc:	429a      	cmp	r2, r3
 801d6de:	d02a      	beq.n	801d736 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        switch (direction)
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801d6e6:	2b03      	cmp	r3, #3
 801d6e8:	d820      	bhi.n	801d72c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 801d6ea:	a201      	add	r2, pc, #4	; (adr r2, 801d6f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 801d6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d6f0:	0801d717 	.word	0x0801d717
 801d6f4:	0801d717 	.word	0x0801d717
 801d6f8:	0801d701 	.word	0x0801d701
 801d6fc:	0801d701 	.word	0x0801d701
            d.moveRelative(calculatedValue, 0);
 801d700:	683b      	ldr	r3, [r7, #0]
 801d702:	681b      	ldr	r3, [r3, #0]
 801d704:	3354      	adds	r3, #84	; 0x54
 801d706:	681b      	ldr	r3, [r3, #0]
 801d708:	687a      	ldr	r2, [r7, #4]
 801d70a:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 801d70e:	2200      	movs	r2, #0
 801d710:	6838      	ldr	r0, [r7, #0]
 801d712:	4798      	blx	r3
            break;
 801d714:	e010      	b.n	801d738 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            d.moveRelative(0, calculatedValue);
 801d716:	683b      	ldr	r3, [r7, #0]
 801d718:	681b      	ldr	r3, [r3, #0]
 801d71a:	3354      	adds	r3, #84	; 0x54
 801d71c:	681b      	ldr	r3, [r3, #0]
 801d71e:	687a      	ldr	r2, [r7, #4]
 801d720:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 801d724:	2100      	movs	r1, #0
 801d726:	6838      	ldr	r0, [r7, #0]
 801d728:	4798      	blx	r3
            break;
 801d72a:	e005      	b.n	801d738 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            done = true;
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	2201      	movs	r2, #1
 801d730:	721a      	strb	r2, [r3, #8]
            break;
 801d732:	bf00      	nop
 801d734:	e000      	b.n	801d738 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 801d736:	bf00      	nop
    }
 801d738:	3708      	adds	r7, #8
 801d73a:	46bd      	mov	sp, r7
 801d73c:	bd80      	pop	{r7, pc}
 801d73e:	bf00      	nop

0801d740 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801d740:	b580      	push	{r7, lr}
 801d742:	b084      	sub	sp, #16
 801d744:	af00      	add	r7, sp, #0
 801d746:	60f8      	str	r0, [r7, #12]
 801d748:	60b9      	str	r1, [r7, #8]
 801d74a:	4639      	mov	r1, r7
 801d74c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801d750:	68fb      	ldr	r3, [r7, #12]
 801d752:	4618      	mov	r0, r3
 801d754:	f7f6 f928 	bl	80139a8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 801d758:	4a08      	ldr	r2, [pc, #32]	; (801d77c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 801d75a:	68fb      	ldr	r3, [r7, #12]
 801d75c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801d75e:	68fb      	ldr	r3, [r7, #12]
 801d760:	68ba      	ldr	r2, [r7, #8]
 801d762:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801d764:	68fb      	ldr	r3, [r7, #12]
 801d766:	3308      	adds	r3, #8
 801d768:	463a      	mov	r2, r7
 801d76a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d76e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801d772:	68fb      	ldr	r3, [r7, #12]
 801d774:	4618      	mov	r0, r3
 801d776:	3710      	adds	r7, #16
 801d778:	46bd      	mov	sp, r7
 801d77a:	bd80      	pop	{r7, pc}
 801d77c:	0802d78c 	.word	0x0802d78c

0801d780 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 801d780:	b580      	push	{r7, lr}
 801d782:	b082      	sub	sp, #8
 801d784:	af00      	add	r7, sp, #0
 801d786:	6078      	str	r0, [r7, #4]
 801d788:	4a05      	ldr	r2, [pc, #20]	; (801d7a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	601a      	str	r2, [r3, #0]
 801d78e:	687b      	ldr	r3, [r7, #4]
 801d790:	4618      	mov	r0, r3
 801d792:	f7fe fd89 	bl	801c2a8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801d796:	687b      	ldr	r3, [r7, #4]
 801d798:	4618      	mov	r0, r3
 801d79a:	3708      	adds	r7, #8
 801d79c:	46bd      	mov	sp, r7
 801d79e:	bd80      	pop	{r7, pc}
 801d7a0:	0802d800 	.word	0x0802d800

0801d7a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 801d7a4:	b580      	push	{r7, lr}
 801d7a6:	b082      	sub	sp, #8
 801d7a8:	af00      	add	r7, sp, #0
 801d7aa:	6078      	str	r0, [r7, #4]
 801d7ac:	6878      	ldr	r0, [r7, #4]
 801d7ae:	f7ff ffe7 	bl	801d780 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801d7b2:	2110      	movs	r1, #16
 801d7b4:	6878      	ldr	r0, [r7, #4]
 801d7b6:	f00c feb4 	bl	802a522 <_ZdlPvj>
 801d7ba:	687b      	ldr	r3, [r7, #4]
 801d7bc:	4618      	mov	r0, r3
 801d7be:	3708      	adds	r7, #8
 801d7c0:	46bd      	mov	sp, r7
 801d7c2:	bd80      	pop	{r7, pc}

0801d7c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
    virtual ~SlideTransition()
 801d7c4:	b580      	push	{r7, lr}
 801d7c6:	b082      	sub	sp, #8
 801d7c8:	af00      	add	r7, sp, #0
 801d7ca:	6078      	str	r0, [r7, #4]
    }
 801d7cc:	4a0a      	ldr	r2, [pc, #40]	; (801d7f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev+0x34>)
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	601a      	str	r2, [r3, #0]
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	333c      	adds	r3, #60	; 0x3c
 801d7d6:	4618      	mov	r0, r3
 801d7d8:	f7ff fd36 	bl	801d248 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	330c      	adds	r3, #12
 801d7e0:	4618      	mov	r0, r3
 801d7e2:	f7f7 f849 	bl	8014878 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 801d7e6:	687b      	ldr	r3, [r7, #4]
 801d7e8:	4618      	mov	r0, r3
 801d7ea:	f7fe fd05 	bl	801c1f8 <_ZN8touchgfx10TransitionD1Ev>
 801d7ee:	687b      	ldr	r3, [r7, #4]
 801d7f0:	4618      	mov	r0, r3
 801d7f2:	3708      	adds	r7, #8
 801d7f4:	46bd      	mov	sp, r7
 801d7f6:	bd80      	pop	{r7, pc}
 801d7f8:	0802d724 	.word	0x0802d724

0801d7fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
    virtual ~SlideTransition()
 801d7fc:	b580      	push	{r7, lr}
 801d7fe:	b082      	sub	sp, #8
 801d800:	af00      	add	r7, sp, #0
 801d802:	6078      	str	r0, [r7, #4]
    }
 801d804:	6878      	ldr	r0, [r7, #4]
 801d806:	f7ff ffdd 	bl	801d7c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>
 801d80a:	2154      	movs	r1, #84	; 0x54
 801d80c:	6878      	ldr	r0, [r7, #4]
 801d80e:	f00c fe88 	bl	802a522 <_ZdlPvj>
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	4618      	mov	r0, r3
 801d816:	3708      	adds	r7, #8
 801d818:	46bd      	mov	sp, r7
 801d81a:	bd80      	pop	{r7, pc}

0801d81c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 801d81c:	b580      	push	{r7, lr}
 801d81e:	b082      	sub	sp, #8
 801d820:	af00      	add	r7, sp, #0
 801d822:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 801d824:	4b59      	ldr	r3, [pc, #356]	; (801d98c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x170>)
 801d826:	781b      	ldrb	r3, [r3, #0]
 801d828:	f083 0301 	eor.w	r3, r3, #1
 801d82c:	b2db      	uxtb	r3, r3
 801d82e:	2b00      	cmp	r3, #0
 801d830:	d003      	beq.n	801d83a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1e>
            done = true;
 801d832:	687b      	ldr	r3, [r7, #4]
 801d834:	2201      	movs	r2, #1
 801d836:	721a      	strb	r2, [r3, #8]
            return;
 801d838:	e0a5      	b.n	801d986 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 801d83a:	687b      	ldr	r3, [r7, #4]
 801d83c:	4618      	mov	r0, r3
 801d83e:	f7fe fcfb 	bl	801c238 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 801d842:	687b      	ldr	r3, [r7, #4]
 801d844:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801d848:	3301      	adds	r3, #1
 801d84a:	b2da      	uxtb	r2, r3
 801d84c:	687b      	ldr	r3, [r7, #4]
 801d84e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 801d852:	687b      	ldr	r3, [r7, #4]
 801d854:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 801d858:	687b      	ldr	r3, [r7, #4]
 801d85a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801d85e:	429a      	cmp	r2, r3
 801d860:	d82f      	bhi.n	801d8c2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 801d862:	687b      	ldr	r3, [r7, #4]
 801d864:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801d868:	b298      	uxth	r0, r3
 801d86a:	687b      	ldr	r3, [r7, #4]
 801d86c:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801d876:	b29b      	uxth	r3, r3
 801d878:	2100      	movs	r1, #0
 801d87a:	f008 f86d 	bl	8025958 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 801d87e:	4603      	mov	r3, r0
 801d880:	461a      	mov	r2, r3
 801d882:	687b      	ldr	r3, [r7, #4]
 801d884:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801d88e:	b29b      	uxth	r3, r3
 801d890:	f003 0301 	and.w	r3, r3, #1
 801d894:	b29b      	uxth	r3, r3
 801d896:	2b00      	cmp	r3, #0
 801d898:	d01b      	beq.n	801d8d2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801d8a0:	b29b      	uxth	r3, r3
 801d8a2:	687a      	ldr	r2, [r7, #4]
 801d8a4:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 801d8a8:	2a00      	cmp	r2, #0
 801d8aa:	dd01      	ble.n	801d8b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x94>
 801d8ac:	2201      	movs	r2, #1
 801d8ae:	e001      	b.n	801d8b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x98>
 801d8b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d8b4:	4413      	add	r3, r2
 801d8b6:	b29b      	uxth	r3, r3
 801d8b8:	b21a      	sxth	r2, r3
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 801d8c0:	e007      	b.n	801d8d2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
            done = true;
 801d8c2:	687b      	ldr	r3, [r7, #4]
 801d8c4:	2201      	movs	r2, #1
 801d8c6:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 801d8c8:	687b      	ldr	r3, [r7, #4]
 801d8ca:	2200      	movs	r2, #0
 801d8cc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 801d8d0:	e059      	b.n	801d986 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x16a>
        switch (direction)
 801d8d2:	687b      	ldr	r3, [r7, #4]
 801d8d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801d8d8:	2b03      	cmp	r3, #3
 801d8da:	d845      	bhi.n	801d968 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x14c>
 801d8dc:	a201      	add	r2, pc, #4	; (adr r2, 801d8e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xc8>)
 801d8de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d8e2:	bf00      	nop
 801d8e4:	0801d92f 	.word	0x0801d92f
 801d8e8:	0801d92f 	.word	0x0801d92f
 801d8ec:	0801d8f5 	.word	0x0801d8f5
 801d8f0:	0801d8f5 	.word	0x0801d8f5
            calculatedValue -= snapshot.getX();
 801d8f4:	687b      	ldr	r3, [r7, #4]
 801d8f6:	330c      	adds	r3, #12
 801d8f8:	4618      	mov	r0, r3
 801d8fa:	f7f4 ff7a 	bl	80127f2 <_ZNK8touchgfx8Drawable4getXEv>
 801d8fe:	4603      	mov	r3, r0
 801d900:	4619      	mov	r1, r3
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801d908:	b29a      	uxth	r2, r3
 801d90a:	b28b      	uxth	r3, r1
 801d90c:	1ad3      	subs	r3, r2, r3
 801d90e:	b29b      	uxth	r3, r3
 801d910:	b21a      	sxth	r2, r3
 801d912:	687b      	ldr	r3, [r7, #4]
 801d914:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 801d918:	687b      	ldr	r3, [r7, #4]
 801d91a:	f103 000c 	add.w	r0, r3, #12
 801d91e:	687b      	ldr	r3, [r7, #4]
 801d920:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801d924:	2200      	movs	r2, #0
 801d926:	4619      	mov	r1, r3
 801d928:	f007 fb11 	bl	8024f4e <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 801d92c:	e020      	b.n	801d970 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 801d92e:	687b      	ldr	r3, [r7, #4]
 801d930:	330c      	adds	r3, #12
 801d932:	4618      	mov	r0, r3
 801d934:	f7f4 ff6a 	bl	801280c <_ZNK8touchgfx8Drawable4getYEv>
 801d938:	4603      	mov	r3, r0
 801d93a:	4619      	mov	r1, r3
 801d93c:	687b      	ldr	r3, [r7, #4]
 801d93e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801d942:	b29a      	uxth	r2, r3
 801d944:	b28b      	uxth	r3, r1
 801d946:	1ad3      	subs	r3, r2, r3
 801d948:	b29b      	uxth	r3, r3
 801d94a:	b21a      	sxth	r2, r3
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	f103 000c 	add.w	r0, r3, #12
 801d958:	687b      	ldr	r3, [r7, #4]
 801d95a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801d95e:	461a      	mov	r2, r3
 801d960:	2100      	movs	r1, #0
 801d962:	f007 faf4 	bl	8024f4e <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 801d966:	e003      	b.n	801d970 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x154>
            done = true;
 801d968:	687b      	ldr	r3, [r7, #4]
 801d96a:	2201      	movs	r2, #1
 801d96c:	721a      	strb	r2, [r3, #8]
            break;
 801d96e:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	6858      	ldr	r0, [r3, #4]
 801d974:	687b      	ldr	r3, [r7, #4]
 801d976:	685b      	ldr	r3, [r3, #4]
 801d978:	681b      	ldr	r3, [r3, #0]
 801d97a:	337c      	adds	r3, #124	; 0x7c
 801d97c:	681b      	ldr	r3, [r3, #0]
 801d97e:	687a      	ldr	r2, [r7, #4]
 801d980:	323c      	adds	r2, #60	; 0x3c
 801d982:	4611      	mov	r1, r2
 801d984:	4798      	blx	r3
    }
 801d986:	3708      	adds	r7, #8
 801d988:	46bd      	mov	sp, r7
 801d98a:	bd80      	pop	{r7, pc}
 801d98c:	2000cf75 	.word	0x2000cf75

0801d990 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:
    virtual void tearDown()
 801d990:	b580      	push	{r7, lr}
 801d992:	b082      	sub	sp, #8
 801d994:	af00      	add	r7, sp, #0
 801d996:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 801d998:	4b0b      	ldr	r3, [pc, #44]	; (801d9c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x38>)
 801d99a:	781b      	ldrb	r3, [r3, #0]
 801d99c:	2b00      	cmp	r3, #0
 801d99e:	d00e      	beq.n	801d9be <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
 801d9a0:	687b      	ldr	r3, [r7, #4]
 801d9a2:	685b      	ldr	r3, [r3, #4]
 801d9a4:	2b00      	cmp	r3, #0
 801d9a6:	d00a      	beq.n	801d9be <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 801d9a8:	687b      	ldr	r3, [r7, #4]
 801d9aa:	6858      	ldr	r0, [r3, #4]
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	685b      	ldr	r3, [r3, #4]
 801d9b0:	681b      	ldr	r3, [r3, #0]
 801d9b2:	3368      	adds	r3, #104	; 0x68
 801d9b4:	681b      	ldr	r3, [r3, #0]
 801d9b6:	687a      	ldr	r2, [r7, #4]
 801d9b8:	320c      	adds	r2, #12
 801d9ba:	4611      	mov	r1, r2
 801d9bc:	4798      	blx	r3
    }
 801d9be:	bf00      	nop
 801d9c0:	3708      	adds	r7, #8
 801d9c2:	46bd      	mov	sp, r7
 801d9c4:	bd80      	pop	{r7, pc}
 801d9c6:	bf00      	nop
 801d9c8:	2000cf75 	.word	0x2000cf75

0801d9cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:
    virtual void init()
 801d9cc:	b580      	push	{r7, lr}
 801d9ce:	b088      	sub	sp, #32
 801d9d0:	af00      	add	r7, sp, #0
 801d9d2:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 801d9d4:	4b1a      	ldr	r3, [pc, #104]	; (801da40 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x74>)
 801d9d6:	781b      	ldrb	r3, [r3, #0]
 801d9d8:	2b00      	cmp	r3, #0
 801d9da:	d02d      	beq.n	801da38 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x6c>
            Transition::init();
 801d9dc:	687b      	ldr	r3, [r7, #4]
 801d9de:	4618      	mov	r0, r3
 801d9e0:	f7fe fc3e 	bl	801c260 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 801d9e4:	4a17      	ldr	r2, [pc, #92]	; (801da44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x78>)
 801d9e6:	f107 0318 	add.w	r3, r7, #24
 801d9ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d9ee:	e883 0003 	stmia.w	r3, {r0, r1}
 801d9f2:	f107 0008 	add.w	r0, r7, #8
 801d9f6:	f107 0318 	add.w	r3, r7, #24
 801d9fa:	cb0c      	ldmia	r3, {r2, r3}
 801d9fc:	6879      	ldr	r1, [r7, #4]
 801d9fe:	f7ff fe45 	bl	801d68c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 801da02:	687b      	ldr	r3, [r7, #4]
 801da04:	685a      	ldr	r2, [r3, #4]
 801da06:	687b      	ldr	r3, [r7, #4]
 801da08:	685b      	ldr	r3, [r3, #4]
 801da0a:	681b      	ldr	r3, [r3, #0]
 801da0c:	337c      	adds	r3, #124	; 0x7c
 801da0e:	681b      	ldr	r3, [r3, #0]
 801da10:	f107 0108 	add.w	r1, r7, #8
 801da14:	4610      	mov	r0, r2
 801da16:	4798      	blx	r3
            screenContainer->add(snapshot);
 801da18:	687b      	ldr	r3, [r7, #4]
 801da1a:	6858      	ldr	r0, [r3, #4]
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	685b      	ldr	r3, [r3, #4]
 801da20:	681b      	ldr	r3, [r3, #0]
 801da22:	3364      	adds	r3, #100	; 0x64
 801da24:	681b      	ldr	r3, [r3, #0]
 801da26:	687a      	ldr	r2, [r7, #4]
 801da28:	320c      	adds	r2, #12
 801da2a:	4611      	mov	r1, r2
 801da2c:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 801da2e:	f107 0308 	add.w	r3, r7, #8
 801da32:	4618      	mov	r0, r3
 801da34:	f7ff fc08 	bl	801d248 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
    }
 801da38:	bf00      	nop
 801da3a:	3720      	adds	r7, #32
 801da3c:	46bd      	mov	sp, r7
 801da3e:	bd80      	pop	{r7, pc}
 801da40:	2000cf75 	.word	0x2000cf75
 801da44:	0802c94c 	.word	0x0802c94c

0801da48 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 801da48:	b580      	push	{r7, lr}
 801da4a:	b082      	sub	sp, #8
 801da4c:	af00      	add	r7, sp, #0
 801da4e:	6078      	str	r0, [r7, #4]
 801da50:	6039      	str	r1, [r7, #0]
        switch (direction)
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801da58:	2b03      	cmp	r3, #3
 801da5a:	d83b      	bhi.n	801dad4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8c>
 801da5c:	a201      	add	r2, pc, #4	; (adr r2, 801da64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 801da5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801da62:	bf00      	nop
 801da64:	0801daa5 	.word	0x0801daa5
 801da68:	0801dabf 	.word	0x0801dabf
 801da6c:	0801da75 	.word	0x0801da75
 801da70:	0801da8b 	.word	0x0801da8b
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 801da74:	683b      	ldr	r3, [r7, #0]
 801da76:	681b      	ldr	r3, [r3, #0]
 801da78:	3354      	adds	r3, #84	; 0x54
 801da7a:	681b      	ldr	r3, [r3, #0]
 801da7c:	4a18      	ldr	r2, [pc, #96]	; (801dae0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 801da7e:	8812      	ldrh	r2, [r2, #0]
 801da80:	b211      	sxth	r1, r2
 801da82:	2200      	movs	r2, #0
 801da84:	6838      	ldr	r0, [r7, #0]
 801da86:	4798      	blx	r3
            break;
 801da88:	e025      	b.n	801dad6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 801da8a:	683b      	ldr	r3, [r7, #0]
 801da8c:	681b      	ldr	r3, [r3, #0]
 801da8e:	3354      	adds	r3, #84	; 0x54
 801da90:	681b      	ldr	r3, [r3, #0]
 801da92:	4a13      	ldr	r2, [pc, #76]	; (801dae0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 801da94:	8812      	ldrh	r2, [r2, #0]
 801da96:	4252      	negs	r2, r2
 801da98:	b292      	uxth	r2, r2
 801da9a:	b211      	sxth	r1, r2
 801da9c:	2200      	movs	r2, #0
 801da9e:	6838      	ldr	r0, [r7, #0]
 801daa0:	4798      	blx	r3
            break;
 801daa2:	e018      	b.n	801dad6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 801daa4:	683b      	ldr	r3, [r7, #0]
 801daa6:	681b      	ldr	r3, [r3, #0]
 801daa8:	3354      	adds	r3, #84	; 0x54
 801daaa:	681b      	ldr	r3, [r3, #0]
 801daac:	4a0d      	ldr	r2, [pc, #52]	; (801dae4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 801daae:	8812      	ldrh	r2, [r2, #0]
 801dab0:	4252      	negs	r2, r2
 801dab2:	b292      	uxth	r2, r2
 801dab4:	b212      	sxth	r2, r2
 801dab6:	2100      	movs	r1, #0
 801dab8:	6838      	ldr	r0, [r7, #0]
 801daba:	4798      	blx	r3
            break;
 801dabc:	e00b      	b.n	801dad6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 801dabe:	683b      	ldr	r3, [r7, #0]
 801dac0:	681b      	ldr	r3, [r3, #0]
 801dac2:	3354      	adds	r3, #84	; 0x54
 801dac4:	681b      	ldr	r3, [r3, #0]
 801dac6:	4a07      	ldr	r2, [pc, #28]	; (801dae4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 801dac8:	8812      	ldrh	r2, [r2, #0]
 801daca:	b212      	sxth	r2, r2
 801dacc:	2100      	movs	r1, #0
 801dace:	6838      	ldr	r0, [r7, #0]
 801dad0:	4798      	blx	r3
            break;
 801dad2:	e000      	b.n	801dad6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 801dad4:	bf00      	nop
    }
 801dad6:	bf00      	nop
 801dad8:	3708      	adds	r7, #8
 801dada:	46bd      	mov	sp, r7
 801dadc:	bd80      	pop	{r7, pc}
 801dade:	bf00      	nop
 801dae0:	2000cf6a 	.word	0x2000cf6a
 801dae4:	2000cf6c 	.word	0x2000cf6c

0801dae8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 801dae8:	b580      	push	{r7, lr}
 801daea:	b082      	sub	sp, #8
 801daec:	af00      	add	r7, sp, #0
 801daee:	6078      	str	r0, [r7, #4]
 801daf0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	685b      	ldr	r3, [r3, #4]
 801daf6:	687a      	ldr	r2, [r7, #4]
 801daf8:	68d2      	ldr	r2, [r2, #12]
 801dafa:	1052      	asrs	r2, r2, #1
 801dafc:	1898      	adds	r0, r3, r2
 801dafe:	687b      	ldr	r3, [r7, #4]
 801db00:	68db      	ldr	r3, [r3, #12]
 801db02:	f003 0301 	and.w	r3, r3, #1
 801db06:	2b00      	cmp	r3, #0
 801db08:	d102      	bne.n	801db10 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x28>
 801db0a:	687b      	ldr	r3, [r7, #4]
 801db0c:	689b      	ldr	r3, [r3, #8]
 801db0e:	e00a      	b.n	801db26 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x3e>
 801db10:	687b      	ldr	r3, [r7, #4]
 801db12:	685b      	ldr	r3, [r3, #4]
 801db14:	687a      	ldr	r2, [r7, #4]
 801db16:	68d2      	ldr	r2, [r2, #12]
 801db18:	1052      	asrs	r2, r2, #1
 801db1a:	4413      	add	r3, r2
 801db1c:	681b      	ldr	r3, [r3, #0]
 801db1e:	687a      	ldr	r2, [r7, #4]
 801db20:	6892      	ldr	r2, [r2, #8]
 801db22:	4413      	add	r3, r2
 801db24:	681b      	ldr	r3, [r3, #0]
 801db26:	6839      	ldr	r1, [r7, #0]
 801db28:	4798      	blx	r3
    }
 801db2a:	bf00      	nop
 801db2c:	3708      	adds	r7, #8
 801db2e:	46bd      	mov	sp, r7
 801db30:	bd80      	pop	{r7, pc}

0801db32 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 801db32:	b480      	push	{r7}
 801db34:	b083      	sub	sp, #12
 801db36:	af00      	add	r7, sp, #0
 801db38:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801db3a:	687b      	ldr	r3, [r7, #4]
 801db3c:	685b      	ldr	r3, [r3, #4]
 801db3e:	2b00      	cmp	r3, #0
 801db40:	d010      	beq.n	801db64 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 801db42:	687b      	ldr	r3, [r7, #4]
 801db44:	689b      	ldr	r3, [r3, #8]
 801db46:	2b00      	cmp	r3, #0
 801db48:	d107      	bne.n	801db5a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	68db      	ldr	r3, [r3, #12]
 801db4e:	f003 0301 	and.w	r3, r3, #1
 801db52:	2b00      	cmp	r3, #0
 801db54:	d101      	bne.n	801db5a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 801db56:	2301      	movs	r3, #1
 801db58:	e000      	b.n	801db5c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x2a>
 801db5a:	2300      	movs	r3, #0
 801db5c:	2b01      	cmp	r3, #1
 801db5e:	d001      	beq.n	801db64 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 801db60:	2301      	movs	r3, #1
 801db62:	e000      	b.n	801db66 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x34>
 801db64:	2300      	movs	r3, #0
    }
 801db66:	4618      	mov	r0, r3
 801db68:	370c      	adds	r7, #12
 801db6a:	46bd      	mov	sp, r7
 801db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db70:	4770      	bx	lr
	...

0801db74 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
    virtual ~SlideTransition()
 801db74:	b580      	push	{r7, lr}
 801db76:	b082      	sub	sp, #8
 801db78:	af00      	add	r7, sp, #0
 801db7a:	6078      	str	r0, [r7, #4]
    }
 801db7c:	4a0a      	ldr	r2, [pc, #40]	; (801dba8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	601a      	str	r2, [r3, #0]
 801db82:	687b      	ldr	r3, [r7, #4]
 801db84:	333c      	adds	r3, #60	; 0x3c
 801db86:	4618      	mov	r0, r3
 801db88:	f7ff fc28 	bl	801d3dc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 801db8c:	687b      	ldr	r3, [r7, #4]
 801db8e:	330c      	adds	r3, #12
 801db90:	4618      	mov	r0, r3
 801db92:	f7f6 fe71 	bl	8014878 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	4618      	mov	r0, r3
 801db9a:	f7fe fb2d 	bl	801c1f8 <_ZN8touchgfx10TransitionD1Ev>
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	4618      	mov	r0, r3
 801dba2:	3708      	adds	r7, #8
 801dba4:	46bd      	mov	sp, r7
 801dba6:	bd80      	pop	{r7, pc}
 801dba8:	0802d764 	.word	0x0802d764

0801dbac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
    virtual ~SlideTransition()
 801dbac:	b580      	push	{r7, lr}
 801dbae:	b082      	sub	sp, #8
 801dbb0:	af00      	add	r7, sp, #0
 801dbb2:	6078      	str	r0, [r7, #4]
    }
 801dbb4:	6878      	ldr	r0, [r7, #4]
 801dbb6:	f7ff ffdd 	bl	801db74 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 801dbba:	2154      	movs	r1, #84	; 0x54
 801dbbc:	6878      	ldr	r0, [r7, #4]
 801dbbe:	f00c fcb0 	bl	802a522 <_ZdlPvj>
 801dbc2:	687b      	ldr	r3, [r7, #4]
 801dbc4:	4618      	mov	r0, r3
 801dbc6:	3708      	adds	r7, #8
 801dbc8:	46bd      	mov	sp, r7
 801dbca:	bd80      	pop	{r7, pc}

0801dbcc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 801dbcc:	b580      	push	{r7, lr}
 801dbce:	b082      	sub	sp, #8
 801dbd0:	af00      	add	r7, sp, #0
 801dbd2:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 801dbd4:	4b59      	ldr	r3, [pc, #356]	; (801dd3c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 801dbd6:	781b      	ldrb	r3, [r3, #0]
 801dbd8:	f083 0301 	eor.w	r3, r3, #1
 801dbdc:	b2db      	uxtb	r3, r3
 801dbde:	2b00      	cmp	r3, #0
 801dbe0:	d003      	beq.n	801dbea <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 801dbe2:	687b      	ldr	r3, [r7, #4]
 801dbe4:	2201      	movs	r2, #1
 801dbe6:	721a      	strb	r2, [r3, #8]
            return;
 801dbe8:	e0a5      	b.n	801dd36 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	4618      	mov	r0, r3
 801dbee:	f7fe fb23 	bl	801c238 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 801dbf2:	687b      	ldr	r3, [r7, #4]
 801dbf4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801dbf8:	3301      	adds	r3, #1
 801dbfa:	b2da      	uxtb	r2, r3
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801dc0e:	429a      	cmp	r2, r3
 801dc10:	d82f      	bhi.n	801dc72 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 801dc12:	687b      	ldr	r3, [r7, #4]
 801dc14:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801dc18:	b298      	uxth	r0, r3
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801dc26:	b29b      	uxth	r3, r3
 801dc28:	2100      	movs	r1, #0
 801dc2a:	f007 fe95 	bl	8025958 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 801dc2e:	4603      	mov	r3, r0
 801dc30:	461a      	mov	r2, r3
 801dc32:	687b      	ldr	r3, [r7, #4]
 801dc34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 801dc38:	687b      	ldr	r3, [r7, #4]
 801dc3a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801dc3e:	b29b      	uxth	r3, r3
 801dc40:	f003 0301 	and.w	r3, r3, #1
 801dc44:	b29b      	uxth	r3, r3
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	d01b      	beq.n	801dc82 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801dc50:	b29b      	uxth	r3, r3
 801dc52:	687a      	ldr	r2, [r7, #4]
 801dc54:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 801dc58:	2a00      	cmp	r2, #0
 801dc5a:	dd01      	ble.n	801dc60 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 801dc5c:	2201      	movs	r2, #1
 801dc5e:	e001      	b.n	801dc64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 801dc60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dc64:	4413      	add	r3, r2
 801dc66:	b29b      	uxth	r3, r3
 801dc68:	b21a      	sxth	r2, r3
 801dc6a:	687b      	ldr	r3, [r7, #4]
 801dc6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 801dc70:	e007      	b.n	801dc82 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	2201      	movs	r2, #1
 801dc76:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	2200      	movs	r2, #0
 801dc7c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 801dc80:	e059      	b.n	801dd36 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 801dc82:	687b      	ldr	r3, [r7, #4]
 801dc84:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801dc88:	2b03      	cmp	r3, #3
 801dc8a:	d845      	bhi.n	801dd18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 801dc8c:	a201      	add	r2, pc, #4	; (adr r2, 801dc94 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 801dc8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dc92:	bf00      	nop
 801dc94:	0801dcdf 	.word	0x0801dcdf
 801dc98:	0801dcdf 	.word	0x0801dcdf
 801dc9c:	0801dca5 	.word	0x0801dca5
 801dca0:	0801dca5 	.word	0x0801dca5
            calculatedValue -= snapshot.getX();
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	330c      	adds	r3, #12
 801dca8:	4618      	mov	r0, r3
 801dcaa:	f7f4 fda2 	bl	80127f2 <_ZNK8touchgfx8Drawable4getXEv>
 801dcae:	4603      	mov	r3, r0
 801dcb0:	4619      	mov	r1, r3
 801dcb2:	687b      	ldr	r3, [r7, #4]
 801dcb4:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801dcb8:	b29a      	uxth	r2, r3
 801dcba:	b28b      	uxth	r3, r1
 801dcbc:	1ad3      	subs	r3, r2, r3
 801dcbe:	b29b      	uxth	r3, r3
 801dcc0:	b21a      	sxth	r2, r3
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 801dcc8:	687b      	ldr	r3, [r7, #4]
 801dcca:	f103 000c 	add.w	r0, r3, #12
 801dcce:	687b      	ldr	r3, [r7, #4]
 801dcd0:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801dcd4:	2200      	movs	r2, #0
 801dcd6:	4619      	mov	r1, r3
 801dcd8:	f007 f939 	bl	8024f4e <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 801dcdc:	e020      	b.n	801dd20 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 801dcde:	687b      	ldr	r3, [r7, #4]
 801dce0:	330c      	adds	r3, #12
 801dce2:	4618      	mov	r0, r3
 801dce4:	f7f4 fd92 	bl	801280c <_ZNK8touchgfx8Drawable4getYEv>
 801dce8:	4603      	mov	r3, r0
 801dcea:	4619      	mov	r1, r3
 801dcec:	687b      	ldr	r3, [r7, #4]
 801dcee:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801dcf2:	b29a      	uxth	r2, r3
 801dcf4:	b28b      	uxth	r3, r1
 801dcf6:	1ad3      	subs	r3, r2, r3
 801dcf8:	b29b      	uxth	r3, r3
 801dcfa:	b21a      	sxth	r2, r3
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 801dd02:	687b      	ldr	r3, [r7, #4]
 801dd04:	f103 000c 	add.w	r0, r3, #12
 801dd08:	687b      	ldr	r3, [r7, #4]
 801dd0a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801dd0e:	461a      	mov	r2, r3
 801dd10:	2100      	movs	r1, #0
 801dd12:	f007 f91c 	bl	8024f4e <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 801dd16:	e003      	b.n	801dd20 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	2201      	movs	r2, #1
 801dd1c:	721a      	strb	r2, [r3, #8]
            break;
 801dd1e:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	6858      	ldr	r0, [r3, #4]
 801dd24:	687b      	ldr	r3, [r7, #4]
 801dd26:	685b      	ldr	r3, [r3, #4]
 801dd28:	681b      	ldr	r3, [r3, #0]
 801dd2a:	337c      	adds	r3, #124	; 0x7c
 801dd2c:	681b      	ldr	r3, [r3, #0]
 801dd2e:	687a      	ldr	r2, [r7, #4]
 801dd30:	323c      	adds	r2, #60	; 0x3c
 801dd32:	4611      	mov	r1, r2
 801dd34:	4798      	blx	r3
    }
 801dd36:	3708      	adds	r7, #8
 801dd38:	46bd      	mov	sp, r7
 801dd3a:	bd80      	pop	{r7, pc}
 801dd3c:	2000cf75 	.word	0x2000cf75

0801dd40 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 801dd40:	b580      	push	{r7, lr}
 801dd42:	b082      	sub	sp, #8
 801dd44:	af00      	add	r7, sp, #0
 801dd46:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 801dd48:	4b0b      	ldr	r3, [pc, #44]	; (801dd78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 801dd4a:	781b      	ldrb	r3, [r3, #0]
 801dd4c:	2b00      	cmp	r3, #0
 801dd4e:	d00e      	beq.n	801dd6e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 801dd50:	687b      	ldr	r3, [r7, #4]
 801dd52:	685b      	ldr	r3, [r3, #4]
 801dd54:	2b00      	cmp	r3, #0
 801dd56:	d00a      	beq.n	801dd6e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 801dd58:	687b      	ldr	r3, [r7, #4]
 801dd5a:	6858      	ldr	r0, [r3, #4]
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	685b      	ldr	r3, [r3, #4]
 801dd60:	681b      	ldr	r3, [r3, #0]
 801dd62:	3368      	adds	r3, #104	; 0x68
 801dd64:	681b      	ldr	r3, [r3, #0]
 801dd66:	687a      	ldr	r2, [r7, #4]
 801dd68:	320c      	adds	r2, #12
 801dd6a:	4611      	mov	r1, r2
 801dd6c:	4798      	blx	r3
    }
 801dd6e:	bf00      	nop
 801dd70:	3708      	adds	r7, #8
 801dd72:	46bd      	mov	sp, r7
 801dd74:	bd80      	pop	{r7, pc}
 801dd76:	bf00      	nop
 801dd78:	2000cf75 	.word	0x2000cf75

0801dd7c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 801dd7c:	b580      	push	{r7, lr}
 801dd7e:	b088      	sub	sp, #32
 801dd80:	af00      	add	r7, sp, #0
 801dd82:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 801dd84:	4b1a      	ldr	r3, [pc, #104]	; (801ddf0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 801dd86:	781b      	ldrb	r3, [r3, #0]
 801dd88:	2b00      	cmp	r3, #0
 801dd8a:	d02d      	beq.n	801dde8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	4618      	mov	r0, r3
 801dd90:	f7fe fa66 	bl	801c260 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 801dd94:	4a17      	ldr	r2, [pc, #92]	; (801ddf4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 801dd96:	f107 0318 	add.w	r3, r7, #24
 801dd9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801dd9e:	e883 0003 	stmia.w	r3, {r0, r1}
 801dda2:	f107 0008 	add.w	r0, r7, #8
 801dda6:	f107 0318 	add.w	r3, r7, #24
 801ddaa:	cb0c      	ldmia	r3, {r2, r3}
 801ddac:	6879      	ldr	r1, [r7, #4]
 801ddae:	f7ff fcc7 	bl	801d740 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 801ddb2:	687b      	ldr	r3, [r7, #4]
 801ddb4:	685a      	ldr	r2, [r3, #4]
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	685b      	ldr	r3, [r3, #4]
 801ddba:	681b      	ldr	r3, [r3, #0]
 801ddbc:	337c      	adds	r3, #124	; 0x7c
 801ddbe:	681b      	ldr	r3, [r3, #0]
 801ddc0:	f107 0108 	add.w	r1, r7, #8
 801ddc4:	4610      	mov	r0, r2
 801ddc6:	4798      	blx	r3
            screenContainer->add(snapshot);
 801ddc8:	687b      	ldr	r3, [r7, #4]
 801ddca:	6858      	ldr	r0, [r3, #4]
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	685b      	ldr	r3, [r3, #4]
 801ddd0:	681b      	ldr	r3, [r3, #0]
 801ddd2:	3364      	adds	r3, #100	; 0x64
 801ddd4:	681b      	ldr	r3, [r3, #0]
 801ddd6:	687a      	ldr	r2, [r7, #4]
 801ddd8:	320c      	adds	r2, #12
 801ddda:	4611      	mov	r1, r2
 801dddc:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 801ddde:	f107 0308 	add.w	r3, r7, #8
 801dde2:	4618      	mov	r0, r3
 801dde4:	f7ff fafa 	bl	801d3dc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 801dde8:	bf00      	nop
 801ddea:	3720      	adds	r7, #32
 801ddec:	46bd      	mov	sp, r7
 801ddee:	bd80      	pop	{r7, pc}
 801ddf0:	2000cf75 	.word	0x2000cf75
 801ddf4:	0802c954 	.word	0x0802c954

0801ddf8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 801ddf8:	b580      	push	{r7, lr}
 801ddfa:	b082      	sub	sp, #8
 801ddfc:	af00      	add	r7, sp, #0
 801ddfe:	6078      	str	r0, [r7, #4]
 801de00:	6039      	str	r1, [r7, #0]
        switch (direction)
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801de08:	2b03      	cmp	r3, #3
 801de0a:	d83b      	bhi.n	801de84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 801de0c:	a201      	add	r2, pc, #4	; (adr r2, 801de14 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 801de0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801de12:	bf00      	nop
 801de14:	0801de55 	.word	0x0801de55
 801de18:	0801de6f 	.word	0x0801de6f
 801de1c:	0801de25 	.word	0x0801de25
 801de20:	0801de3b 	.word	0x0801de3b
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 801de24:	683b      	ldr	r3, [r7, #0]
 801de26:	681b      	ldr	r3, [r3, #0]
 801de28:	3354      	adds	r3, #84	; 0x54
 801de2a:	681b      	ldr	r3, [r3, #0]
 801de2c:	4a18      	ldr	r2, [pc, #96]	; (801de90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 801de2e:	8812      	ldrh	r2, [r2, #0]
 801de30:	b211      	sxth	r1, r2
 801de32:	2200      	movs	r2, #0
 801de34:	6838      	ldr	r0, [r7, #0]
 801de36:	4798      	blx	r3
            break;
 801de38:	e025      	b.n	801de86 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 801de3a:	683b      	ldr	r3, [r7, #0]
 801de3c:	681b      	ldr	r3, [r3, #0]
 801de3e:	3354      	adds	r3, #84	; 0x54
 801de40:	681b      	ldr	r3, [r3, #0]
 801de42:	4a13      	ldr	r2, [pc, #76]	; (801de90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 801de44:	8812      	ldrh	r2, [r2, #0]
 801de46:	4252      	negs	r2, r2
 801de48:	b292      	uxth	r2, r2
 801de4a:	b211      	sxth	r1, r2
 801de4c:	2200      	movs	r2, #0
 801de4e:	6838      	ldr	r0, [r7, #0]
 801de50:	4798      	blx	r3
            break;
 801de52:	e018      	b.n	801de86 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 801de54:	683b      	ldr	r3, [r7, #0]
 801de56:	681b      	ldr	r3, [r3, #0]
 801de58:	3354      	adds	r3, #84	; 0x54
 801de5a:	681b      	ldr	r3, [r3, #0]
 801de5c:	4a0d      	ldr	r2, [pc, #52]	; (801de94 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 801de5e:	8812      	ldrh	r2, [r2, #0]
 801de60:	4252      	negs	r2, r2
 801de62:	b292      	uxth	r2, r2
 801de64:	b212      	sxth	r2, r2
 801de66:	2100      	movs	r1, #0
 801de68:	6838      	ldr	r0, [r7, #0]
 801de6a:	4798      	blx	r3
            break;
 801de6c:	e00b      	b.n	801de86 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 801de6e:	683b      	ldr	r3, [r7, #0]
 801de70:	681b      	ldr	r3, [r3, #0]
 801de72:	3354      	adds	r3, #84	; 0x54
 801de74:	681b      	ldr	r3, [r3, #0]
 801de76:	4a07      	ldr	r2, [pc, #28]	; (801de94 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 801de78:	8812      	ldrh	r2, [r2, #0]
 801de7a:	b212      	sxth	r2, r2
 801de7c:	2100      	movs	r1, #0
 801de7e:	6838      	ldr	r0, [r7, #0]
 801de80:	4798      	blx	r3
            break;
 801de82:	e000      	b.n	801de86 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 801de84:	bf00      	nop
    }
 801de86:	bf00      	nop
 801de88:	3708      	adds	r7, #8
 801de8a:	46bd      	mov	sp, r7
 801de8c:	bd80      	pop	{r7, pc}
 801de8e:	bf00      	nop
 801de90:	2000cf6a 	.word	0x2000cf6a
 801de94:	2000cf6c 	.word	0x2000cf6c

0801de98 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 801de98:	b580      	push	{r7, lr}
 801de9a:	b082      	sub	sp, #8
 801de9c:	af00      	add	r7, sp, #0
 801de9e:	6078      	str	r0, [r7, #4]
 801dea0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801dea2:	687b      	ldr	r3, [r7, #4]
 801dea4:	685b      	ldr	r3, [r3, #4]
 801dea6:	687a      	ldr	r2, [r7, #4]
 801dea8:	68d2      	ldr	r2, [r2, #12]
 801deaa:	1052      	asrs	r2, r2, #1
 801deac:	1898      	adds	r0, r3, r2
 801deae:	687b      	ldr	r3, [r7, #4]
 801deb0:	68db      	ldr	r3, [r3, #12]
 801deb2:	f003 0301 	and.w	r3, r3, #1
 801deb6:	2b00      	cmp	r3, #0
 801deb8:	d102      	bne.n	801dec0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 801deba:	687b      	ldr	r3, [r7, #4]
 801debc:	689b      	ldr	r3, [r3, #8]
 801debe:	e00a      	b.n	801ded6 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 801dec0:	687b      	ldr	r3, [r7, #4]
 801dec2:	685b      	ldr	r3, [r3, #4]
 801dec4:	687a      	ldr	r2, [r7, #4]
 801dec6:	68d2      	ldr	r2, [r2, #12]
 801dec8:	1052      	asrs	r2, r2, #1
 801deca:	4413      	add	r3, r2
 801decc:	681b      	ldr	r3, [r3, #0]
 801dece:	687a      	ldr	r2, [r7, #4]
 801ded0:	6892      	ldr	r2, [r2, #8]
 801ded2:	4413      	add	r3, r2
 801ded4:	681b      	ldr	r3, [r3, #0]
 801ded6:	6839      	ldr	r1, [r7, #0]
 801ded8:	4798      	blx	r3
    }
 801deda:	bf00      	nop
 801dedc:	3708      	adds	r7, #8
 801dede:	46bd      	mov	sp, r7
 801dee0:	bd80      	pop	{r7, pc}

0801dee2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 801dee2:	b480      	push	{r7}
 801dee4:	b083      	sub	sp, #12
 801dee6:	af00      	add	r7, sp, #0
 801dee8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801deea:	687b      	ldr	r3, [r7, #4]
 801deec:	685b      	ldr	r3, [r3, #4]
 801deee:	2b00      	cmp	r3, #0
 801def0:	d010      	beq.n	801df14 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 801def2:	687b      	ldr	r3, [r7, #4]
 801def4:	689b      	ldr	r3, [r3, #8]
 801def6:	2b00      	cmp	r3, #0
 801def8:	d107      	bne.n	801df0a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 801defa:	687b      	ldr	r3, [r7, #4]
 801defc:	68db      	ldr	r3, [r3, #12]
 801defe:	f003 0301 	and.w	r3, r3, #1
 801df02:	2b00      	cmp	r3, #0
 801df04:	d101      	bne.n	801df0a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 801df06:	2301      	movs	r3, #1
 801df08:	e000      	b.n	801df0c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 801df0a:	2300      	movs	r3, #0
 801df0c:	2b01      	cmp	r3, #1
 801df0e:	d001      	beq.n	801df14 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 801df10:	2301      	movs	r3, #1
 801df12:	e000      	b.n	801df16 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 801df14:	2300      	movs	r3, #0
    }
 801df16:	4618      	mov	r0, r3
 801df18:	370c      	adds	r7, #12
 801df1a:	46bd      	mov	sp, r7
 801df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df20:	4770      	bx	lr

0801df22 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 801df22:	b580      	push	{r7, lr}
 801df24:	b082      	sub	sp, #8
 801df26:	af00      	add	r7, sp, #0
 801df28:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 801df2a:	687b      	ldr	r3, [r7, #4]
 801df2c:	685b      	ldr	r3, [r3, #4]
 801df2e:	687a      	ldr	r2, [r7, #4]
 801df30:	68d2      	ldr	r2, [r2, #12]
 801df32:	1052      	asrs	r2, r2, #1
 801df34:	1899      	adds	r1, r3, r2
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	68db      	ldr	r3, [r3, #12]
 801df3a:	f003 0301 	and.w	r3, r3, #1
 801df3e:	2b00      	cmp	r3, #0
 801df40:	d102      	bne.n	801df48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 801df42:	687b      	ldr	r3, [r7, #4]
 801df44:	689b      	ldr	r3, [r3, #8]
 801df46:	e00a      	b.n	801df5e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 801df48:	687b      	ldr	r3, [r7, #4]
 801df4a:	685b      	ldr	r3, [r3, #4]
 801df4c:	687a      	ldr	r2, [r7, #4]
 801df4e:	68d2      	ldr	r2, [r2, #12]
 801df50:	1052      	asrs	r2, r2, #1
 801df52:	4413      	add	r3, r2
 801df54:	681b      	ldr	r3, [r3, #0]
 801df56:	687a      	ldr	r2, [r7, #4]
 801df58:	6892      	ldr	r2, [r2, #8]
 801df5a:	4413      	add	r3, r2
 801df5c:	681b      	ldr	r3, [r3, #0]
 801df5e:	4608      	mov	r0, r1
 801df60:	4798      	blx	r3
    }
 801df62:	bf00      	nop
 801df64:	3708      	adds	r7, #8
 801df66:	46bd      	mov	sp, r7
 801df68:	bd80      	pop	{r7, pc}

0801df6a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 801df6a:	b480      	push	{r7}
 801df6c:	b083      	sub	sp, #12
 801df6e:	af00      	add	r7, sp, #0
 801df70:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 801df72:	687b      	ldr	r3, [r7, #4]
 801df74:	685b      	ldr	r3, [r3, #4]
 801df76:	2b00      	cmp	r3, #0
 801df78:	d010      	beq.n	801df9c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	689b      	ldr	r3, [r3, #8]
 801df7e:	2b00      	cmp	r3, #0
 801df80:	d107      	bne.n	801df92 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801df82:	687b      	ldr	r3, [r7, #4]
 801df84:	68db      	ldr	r3, [r3, #12]
 801df86:	f003 0301 	and.w	r3, r3, #1
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	d101      	bne.n	801df92 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801df8e:	2301      	movs	r3, #1
 801df90:	e000      	b.n	801df94 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 801df92:	2300      	movs	r3, #0
 801df94:	2b01      	cmp	r3, #1
 801df96:	d001      	beq.n	801df9c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801df98:	2301      	movs	r3, #1
 801df9a:	e000      	b.n	801df9e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801df9c:	2300      	movs	r3, #0
    }
 801df9e:	4618      	mov	r0, r3
 801dfa0:	370c      	adds	r7, #12
 801dfa2:	46bd      	mov	sp, r7
 801dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfa8:	4770      	bx	lr
	...

0801dfac <_ZN8touchgfx4ViewI18direccionPresenterED1Ev>:
class View : public Screen
 801dfac:	b580      	push	{r7, lr}
 801dfae:	b082      	sub	sp, #8
 801dfb0:	af00      	add	r7, sp, #0
 801dfb2:	6078      	str	r0, [r7, #4]
 801dfb4:	4a05      	ldr	r2, [pc, #20]	; (801dfcc <_ZN8touchgfx4ViewI18direccionPresenterED1Ev+0x20>)
 801dfb6:	687b      	ldr	r3, [r7, #4]
 801dfb8:	601a      	str	r2, [r3, #0]
 801dfba:	687b      	ldr	r3, [r7, #4]
 801dfbc:	4618      	mov	r0, r3
 801dfbe:	f7fd fb99 	bl	801b6f4 <_ZN8touchgfx6ScreenD1Ev>
 801dfc2:	687b      	ldr	r3, [r7, #4]
 801dfc4:	4618      	mov	r0, r3
 801dfc6:	3708      	adds	r7, #8
 801dfc8:	46bd      	mov	sp, r7
 801dfca:	bd80      	pop	{r7, pc}
 801dfcc:	0802de9c 	.word	0x0802de9c

0801dfd0 <_ZN8touchgfx4ViewI18direccionPresenterED0Ev>:
 801dfd0:	b580      	push	{r7, lr}
 801dfd2:	b082      	sub	sp, #8
 801dfd4:	af00      	add	r7, sp, #0
 801dfd6:	6078      	str	r0, [r7, #4]
 801dfd8:	6878      	ldr	r0, [r7, #4]
 801dfda:	f7ff ffe7 	bl	801dfac <_ZN8touchgfx4ViewI18direccionPresenterED1Ev>
 801dfde:	2140      	movs	r1, #64	; 0x40
 801dfe0:	6878      	ldr	r0, [r7, #4]
 801dfe2:	f00c fa9e 	bl	802a522 <_ZdlPvj>
 801dfe6:	687b      	ldr	r3, [r7, #4]
 801dfe8:	4618      	mov	r0, r3
 801dfea:	3708      	adds	r7, #8
 801dfec:	46bd      	mov	sp, r7
 801dfee:	bd80      	pop	{r7, pc}

0801dff0 <_ZN17direccionViewBaseD1Ev>:

class direccionViewBase : public touchgfx::View<direccionPresenter>
{
public:
    direccionViewBase();
    virtual ~direccionViewBase() {}
 801dff0:	b580      	push	{r7, lr}
 801dff2:	b082      	sub	sp, #8
 801dff4:	af00      	add	r7, sp, #0
 801dff6:	6078      	str	r0, [r7, #4]
 801dff8:	4a18      	ldr	r2, [pc, #96]	; (801e05c <_ZN17direccionViewBaseD1Ev+0x6c>)
 801dffa:	687b      	ldr	r3, [r7, #4]
 801dffc:	601a      	str	r2, [r3, #0]
 801dffe:	687b      	ldr	r3, [r7, #4]
 801e000:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 801e004:	4618      	mov	r0, r3
 801e006:	f000 fa33 	bl	801e470 <_ZN8touchgfx8CallbackI17direccionViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 801e010:	4618      	mov	r0, r3
 801e012:	f7f4 f9ad 	bl	8012370 <_ZN8touchgfx5ImageD1Ev>
 801e016:	687b      	ldr	r3, [r7, #4]
 801e018:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801e01c:	4618      	mov	r0, r3
 801e01e:	f7f6 fed9 	bl	8014dd4 <_ZN8touchgfx13TextureMapperD1Ev>
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	33d8      	adds	r3, #216	; 0xd8
 801e026:	4618      	mov	r0, r3
 801e028:	f7f4 f9a2 	bl	8012370 <_ZN8touchgfx5ImageD1Ev>
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	33a4      	adds	r3, #164	; 0xa4
 801e030:	4618      	mov	r0, r3
 801e032:	f7f5 fe43 	bl	8013cbc <_ZN8touchgfx6ButtonD1Ev>
 801e036:	687b      	ldr	r3, [r7, #4]
 801e038:	3370      	adds	r3, #112	; 0x70
 801e03a:	4618      	mov	r0, r3
 801e03c:	f7f5 fe3e 	bl	8013cbc <_ZN8touchgfx6ButtonD1Ev>
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	3340      	adds	r3, #64	; 0x40
 801e044:	4618      	mov	r0, r3
 801e046:	f7f5 fd0f 	bl	8013a68 <_ZN8touchgfx3BoxD1Ev>
 801e04a:	687b      	ldr	r3, [r7, #4]
 801e04c:	4618      	mov	r0, r3
 801e04e:	f7ff ffad 	bl	801dfac <_ZN8touchgfx4ViewI18direccionPresenterED1Ev>
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	4618      	mov	r0, r3
 801e056:	3708      	adds	r7, #8
 801e058:	46bd      	mov	sp, r7
 801e05a:	bd80      	pop	{r7, pc}
 801e05c:	0802de50 	.word	0x0802de50

0801e060 <_ZN17direccionViewBaseD0Ev>:
 801e060:	b580      	push	{r7, lr}
 801e062:	b082      	sub	sp, #8
 801e064:	af00      	add	r7, sp, #0
 801e066:	6078      	str	r0, [r7, #4]
 801e068:	6878      	ldr	r0, [r7, #4]
 801e06a:	f7ff ffc1 	bl	801dff0 <_ZN17direccionViewBaseD1Ev>
 801e06e:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 801e072:	6878      	ldr	r0, [r7, #4]
 801e074:	f00c fa55 	bl	802a522 <_ZdlPvj>
 801e078:	687b      	ldr	r3, [r7, #4]
 801e07a:	4618      	mov	r0, r3
 801e07c:	3708      	adds	r7, #8
 801e07e:	46bd      	mov	sp, r7
 801e080:	bd80      	pop	{r7, pc}

0801e082 <_ZN17direccionViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 801e082:	b580      	push	{r7, lr}
 801e084:	b082      	sub	sp, #8
 801e086:	af00      	add	r7, sp, #0
 801e088:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 801e08a:	f006 fa9d 	bl	80245c8 <_ZN8touchgfx11Application11getInstanceEv>
 801e08e:	4603      	mov	r3, r0
    }
 801e090:	4618      	mov	r0, r3
 801e092:	3708      	adds	r7, #8
 801e094:	46bd      	mov	sp, r7
 801e096:	bd80      	pop	{r7, pc}

0801e098 <_ZN17direccionViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/direccion_screen/direccionViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"

direccionViewBase::direccionViewBase() :
 801e098:	b590      	push	{r4, r7, lr}
 801e09a:	b091      	sub	sp, #68	; 0x44
 801e09c:	af02      	add	r7, sp, #8
 801e09e:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &direccionViewBase::buttonCallbackHandler)
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	4618      	mov	r0, r3
 801e0a4:	f000 f9ae 	bl	801e404 <_ZN8touchgfx4ViewI18direccionPresenterEC1Ev>
 801e0a8:	4aba      	ldr	r2, [pc, #744]	; (801e394 <_ZN17direccionViewBaseC1Ev+0x2fc>)
 801e0aa:	687b      	ldr	r3, [r7, #4]
 801e0ac:	601a      	str	r2, [r3, #0]
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	3340      	adds	r3, #64	; 0x40
 801e0b2:	4618      	mov	r0, r3
 801e0b4:	f7f5 fcb8 	bl	8013a28 <_ZN8touchgfx3BoxC1Ev>
 801e0b8:	687b      	ldr	r3, [r7, #4]
 801e0ba:	3370      	adds	r3, #112	; 0x70
 801e0bc:	4618      	mov	r0, r3
 801e0be:	f7f5 fdd9 	bl	8013c74 <_ZN8touchgfx6ButtonC1Ev>
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	33a4      	adds	r3, #164	; 0xa4
 801e0c6:	4618      	mov	r0, r3
 801e0c8:	f7f5 fdd4 	bl	8013c74 <_ZN8touchgfx6ButtonC1Ev>
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801e0d2:	f107 030c 	add.w	r3, r7, #12
 801e0d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801e0da:	4618      	mov	r0, r3
 801e0dc:	f7f3 ff69 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801e0e0:	f107 030c 	add.w	r3, r7, #12
 801e0e4:	4619      	mov	r1, r3
 801e0e6:	4620      	mov	r0, r4
 801e0e8:	f7f4 fed0 	bl	8012e8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801e0f2:	4618      	mov	r0, r3
 801e0f4:	f7f6 fde6 	bl	8014cc4 <_ZN8touchgfx13TextureMapperC1Ev>
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	f503 74ca 	add.w	r4, r3, #404	; 0x194
 801e0fe:	f107 0310 	add.w	r3, r7, #16
 801e102:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801e106:	4618      	mov	r0, r3
 801e108:	f7f3 ff53 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801e10c:	f107 0310 	add.w	r3, r7, #16
 801e110:	4619      	mov	r1, r3
 801e112:	4620      	mov	r0, r4
 801e114:	f7f4 feba 	bl	8012e8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801e118:	687b      	ldr	r3, [r7, #4]
 801e11a:	f503 70e0 	add.w	r0, r3, #448	; 0x1c0
 801e11e:	4b9e      	ldr	r3, [pc, #632]	; (801e398 <_ZN17direccionViewBaseC1Ev+0x300>)
 801e120:	617b      	str	r3, [r7, #20]
 801e122:	2300      	movs	r3, #0
 801e124:	61bb      	str	r3, [r7, #24]
 801e126:	f107 0314 	add.w	r3, r7, #20
 801e12a:	cb0c      	ldmia	r3, {r2, r3}
 801e12c:	6879      	ldr	r1, [r7, #4]
 801e12e:	f000 f97f 	bl	801e430 <_ZN8touchgfx8CallbackI17direccionViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    box1.setPosition(0, 0, 480, 272);
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801e138:	f44f 7388 	mov.w	r3, #272	; 0x110
 801e13c:	9300      	str	r3, [sp, #0]
 801e13e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801e142:	2200      	movs	r2, #0
 801e144:	2100      	movs	r1, #0
 801e146:	f7f3 ff65 	bl	8012014 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(54, 54, 54));
 801e14a:	687b      	ldr	r3, [r7, #4]
 801e14c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801e150:	2236      	movs	r2, #54	; 0x36
 801e152:	2136      	movs	r1, #54	; 0x36
 801e154:	2036      	movs	r0, #54	; 0x36
 801e156:	f7f4 ffb1 	bl	80130bc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801e15a:	4603      	mov	r3, r0
 801e15c:	4619      	mov	r1, r3
 801e15e:	4620      	mov	r0, r4
 801e160:	f7f5 fca4 	bl	8013aac <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(0, 106);
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	3370      	adds	r3, #112	; 0x70
 801e168:	226a      	movs	r2, #106	; 0x6a
 801e16a:	2100      	movs	r1, #0
 801e16c:	4618      	mov	r0, r3
 801e16e:	f7f3 ff9c 	bl	80120aa <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801e178:	f107 031c 	add.w	r3, r7, #28
 801e17c:	2101      	movs	r1, #1
 801e17e:	4618      	mov	r0, r3
 801e180:	f7f3 ff17 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801e184:	f107 0320 	add.w	r3, r7, #32
 801e188:	2102      	movs	r1, #2
 801e18a:	4618      	mov	r0, r3
 801e18c:	f7f3 ff11 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801e190:	f107 0220 	add.w	r2, r7, #32
 801e194:	f107 031c 	add.w	r3, r7, #28
 801e198:	4619      	mov	r1, r3
 801e19a:	4620      	mov	r0, r4
 801e19c:	f7f6 fa21 	bl	80145e2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 801e1a0:	687b      	ldr	r3, [r7, #4]
 801e1a2:	f103 0270 	add.w	r2, r3, #112	; 0x70
 801e1a6:	687b      	ldr	r3, [r7, #4]
 801e1a8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 801e1ac:	4619      	mov	r1, r3
 801e1ae:	4610      	mov	r0, r2
 801e1b0:	f7f5 fd30 	bl	8013c14 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    button2.setXY(420, 106);
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	33a4      	adds	r3, #164	; 0xa4
 801e1b8:	226a      	movs	r2, #106	; 0x6a
 801e1ba:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 801e1be:	4618      	mov	r0, r3
 801e1c0:	f7f3 ff73 	bl	80120aa <_ZN8touchgfx8Drawable5setXYEss>
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801e1ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e1ce:	2101      	movs	r1, #1
 801e1d0:	4618      	mov	r0, r3
 801e1d2:	f7f3 feee 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801e1d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e1da:	2102      	movs	r1, #2
 801e1dc:	4618      	mov	r0, r3
 801e1de:	f7f3 fee8 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801e1e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801e1e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e1ea:	4619      	mov	r1, r3
 801e1ec:	4620      	mov	r0, r4
 801e1ee:	f7f6 f9f8 	bl	80145e2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button2.setAction(buttonCallback);
 801e1f2:	687b      	ldr	r3, [r7, #4]
 801e1f4:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 801e1f8:	687b      	ldr	r3, [r7, #4]
 801e1fa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 801e1fe:	4619      	mov	r1, r3
 801e200:	4610      	mov	r0, r2
 801e202:	f7f5 fd07 	bl	8013c14 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image1.setXY(167, 63);
 801e206:	687b      	ldr	r3, [r7, #4]
 801e208:	33d8      	adds	r3, #216	; 0xd8
 801e20a:	223f      	movs	r2, #63	; 0x3f
 801e20c:	21a7      	movs	r1, #167	; 0xa7
 801e20e:	4618      	mov	r0, r3
 801e210:	f7f3 ff4b 	bl	80120aa <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_DG_SYN_ID));
 801e214:	687b      	ldr	r3, [r7, #4]
 801e216:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801e21a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e21e:	2103      	movs	r1, #3
 801e220:	4618      	mov	r0, r3
 801e222:	f7f3 fec6 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801e226:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e22a:	4619      	mov	r1, r3
 801e22c:	4620      	mov	r0, r4
 801e22e:	f7f6 fa49 	bl	80146c4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textureMapper1.setXY(150, 46);
 801e232:	687b      	ldr	r3, [r7, #4]
 801e234:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801e238:	222e      	movs	r2, #46	; 0x2e
 801e23a:	2196      	movs	r1, #150	; 0x96
 801e23c:	4618      	mov	r0, r3
 801e23e:	f7f3 ff34 	bl	80120aa <_ZN8touchgfx8Drawable5setXYEss>
    textureMapper1.setBitmap(touchgfx::Bitmap(BITMAP_DG_SYN_1_ID));
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	f503 7482 	add.w	r4, r3, #260	; 0x104
 801e248:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e24c:	2104      	movs	r1, #4
 801e24e:	4618      	mov	r0, r3
 801e250:	f7f3 feaf 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801e254:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e258:	4619      	mov	r1, r3
 801e25a:	4620      	mov	r0, r4
 801e25c:	f7f6 fddc 	bl	8014e18 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
    textureMapper1.setWidth(180);
 801e260:	687b      	ldr	r3, [r7, #4]
 801e262:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801e266:	21b4      	movs	r1, #180	; 0xb4
 801e268:	4618      	mov	r0, r3
 801e26a:	f7f3 ff3c 	bl	80120e6 <_ZN8touchgfx8Drawable8setWidthEs>
    textureMapper1.setHeight(180);
 801e26e:	687b      	ldr	r3, [r7, #4]
 801e270:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801e274:	21b4      	movs	r1, #180	; 0xb4
 801e276:	4618      	mov	r0, r3
 801e278:	f7f3 ff44 	bl	8012104 <_ZN8touchgfx8Drawable9setHeightEs>
    textureMapper1.setBitmapPosition(32.000f, 32.000f);
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801e282:	eddf 0a46 	vldr	s1, [pc, #280]	; 801e39c <_ZN17direccionViewBaseC1Ev+0x304>
 801e286:	ed9f 0a45 	vldr	s0, [pc, #276]	; 801e39c <_ZN17direccionViewBaseC1Ev+0x304>
 801e28a:	4618      	mov	r0, r3
 801e28c:	f7f5 ffc4 	bl	8014218 <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>
    textureMapper1.setScale(1.000f);
 801e290:	687b      	ldr	r3, [r7, #4]
 801e292:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801e296:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e29a:	4618      	mov	r0, r3
 801e29c:	f7f7 fafa 	bl	8015894 <_ZN8touchgfx13TextureMapper8setScaleEf>
    textureMapper1.setCameraDistance(1000.000f);
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801e2a6:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 801e3a0 <_ZN17direccionViewBaseC1Ev+0x308>
 801e2aa:	4618      	mov	r0, r3
 801e2ac:	f7f5 ff89 	bl	80141c2 <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>
    textureMapper1.setOrigo(90.000f, 90.000f, 1000.000f);
 801e2b0:	687b      	ldr	r3, [r7, #4]
 801e2b2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801e2b6:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 801e3a0 <_ZN17direccionViewBaseC1Ev+0x308>
 801e2ba:	eddf 0a3a 	vldr	s1, [pc, #232]	; 801e3a4 <_ZN17direccionViewBaseC1Ev+0x30c>
 801e2be:	ed9f 0a39 	vldr	s0, [pc, #228]	; 801e3a4 <_ZN17direccionViewBaseC1Ev+0x30c>
 801e2c2:	4618      	mov	r0, r3
 801e2c4:	f7f5 feee 	bl	80140a4 <_ZN8touchgfx13TextureMapper8setOrigoEfff>
    textureMapper1.setCamera(90.000f, 90.000f);
 801e2c8:	687b      	ldr	r3, [r7, #4]
 801e2ca:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801e2ce:	eddf 0a35 	vldr	s1, [pc, #212]	; 801e3a4 <_ZN17direccionViewBaseC1Ev+0x30c>
 801e2d2:	ed9f 0a34 	vldr	s0, [pc, #208]	; 801e3a4 <_ZN17direccionViewBaseC1Ev+0x30c>
 801e2d6:	4618      	mov	r0, r3
 801e2d8:	f7f5 ff40 	bl	801415c <_ZN8touchgfx13TextureMapper9setCameraEff>
    textureMapper1.updateAngles(0.000f, 0.000f, 0.000f);
 801e2dc:	687b      	ldr	r3, [r7, #4]
 801e2de:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801e2e2:	ed9f 1a31 	vldr	s2, [pc, #196]	; 801e3a8 <_ZN17direccionViewBaseC1Ev+0x310>
 801e2e6:	eddf 0a30 	vldr	s1, [pc, #192]	; 801e3a8 <_ZN17direccionViewBaseC1Ev+0x310>
 801e2ea:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 801e3a8 <_ZN17direccionViewBaseC1Ev+0x310>
 801e2ee:	4618      	mov	r0, r3
 801e2f0:	f7f7 fa99 	bl	8015826 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
    textureMapper1.setRenderingAlgorithm(touchgfx::TextureMapper::NEAREST_NEIGHBOR);
 801e2f4:	687b      	ldr	r3, [r7, #4]
 801e2f6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801e2fa:	2100      	movs	r1, #0
 801e2fc:	4618      	mov	r0, r3
 801e2fe:	f7f5 fe4f 	bl	8013fa0 <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>

    image2.setXY(180, 76);
 801e302:	687b      	ldr	r3, [r7, #4]
 801e304:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 801e308:	224c      	movs	r2, #76	; 0x4c
 801e30a:	21b4      	movs	r1, #180	; 0xb4
 801e30c:	4618      	mov	r0, r3
 801e30e:	f7f3 fecc 	bl	80120aa <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_DG_SYN_3_ID));
 801e312:	687b      	ldr	r3, [r7, #4]
 801e314:	f503 74ca 	add.w	r4, r3, #404	; 0x194
 801e318:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801e31c:	2105      	movs	r1, #5
 801e31e:	4618      	mov	r0, r3
 801e320:	f7f3 fe47 	bl	8011fb2 <_ZN8touchgfx6BitmapC1Et>
 801e324:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801e328:	4619      	mov	r1, r3
 801e32a:	4620      	mov	r0, r4
 801e32c:	f7f6 f9ca 	bl	80146c4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(box1);
 801e330:	687a      	ldr	r2, [r7, #4]
 801e332:	687b      	ldr	r3, [r7, #4]
 801e334:	3340      	adds	r3, #64	; 0x40
 801e336:	4619      	mov	r1, r3
 801e338:	4610      	mov	r0, r2
 801e33a:	f7fd fa33 	bl	801b7a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 801e33e:	687a      	ldr	r2, [r7, #4]
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	3370      	adds	r3, #112	; 0x70
 801e344:	4619      	mov	r1, r3
 801e346:	4610      	mov	r0, r2
 801e348:	f7fd fa2c 	bl	801b7a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button2);
 801e34c:	687a      	ldr	r2, [r7, #4]
 801e34e:	687b      	ldr	r3, [r7, #4]
 801e350:	33a4      	adds	r3, #164	; 0xa4
 801e352:	4619      	mov	r1, r3
 801e354:	4610      	mov	r0, r2
 801e356:	f7fd fa25 	bl	801b7a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 801e35a:	687a      	ldr	r2, [r7, #4]
 801e35c:	687b      	ldr	r3, [r7, #4]
 801e35e:	33d8      	adds	r3, #216	; 0xd8
 801e360:	4619      	mov	r1, r3
 801e362:	4610      	mov	r0, r2
 801e364:	f7fd fa1e 	bl	801b7a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textureMapper1);
 801e368:	687a      	ldr	r2, [r7, #4]
 801e36a:	687b      	ldr	r3, [r7, #4]
 801e36c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801e370:	4619      	mov	r1, r3
 801e372:	4610      	mov	r0, r2
 801e374:	f7fd fa16 	bl	801b7a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2);
 801e378:	687a      	ldr	r2, [r7, #4]
 801e37a:	687b      	ldr	r3, [r7, #4]
 801e37c:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 801e380:	4619      	mov	r1, r3
 801e382:	4610      	mov	r0, r2
 801e384:	f7fd fa0e 	bl	801b7a4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801e388:	687b      	ldr	r3, [r7, #4]
 801e38a:	4618      	mov	r0, r3
 801e38c:	373c      	adds	r7, #60	; 0x3c
 801e38e:	46bd      	mov	sp, r7
 801e390:	bd90      	pop	{r4, r7, pc}
 801e392:	bf00      	nop
 801e394:	0802de50 	.word	0x0802de50
 801e398:	0801e3c1 	.word	0x0801e3c1
 801e39c:	42000000 	.word	0x42000000
 801e3a0:	447a0000 	.word	0x447a0000
 801e3a4:	42b40000 	.word	0x42b40000
 801e3a8:	00000000 	.word	0x00000000

0801e3ac <_ZN17direccionViewBase11setupScreenEv>:

void direccionViewBase::setupScreen()
{
 801e3ac:	b480      	push	{r7}
 801e3ae:	b083      	sub	sp, #12
 801e3b0:	af00      	add	r7, sp, #0
 801e3b2:	6078      	str	r0, [r7, #4]

}
 801e3b4:	bf00      	nop
 801e3b6:	370c      	adds	r7, #12
 801e3b8:	46bd      	mov	sp, r7
 801e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3be:	4770      	bx	lr

0801e3c0 <_ZN17direccionViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void direccionViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 801e3c0:	b580      	push	{r7, lr}
 801e3c2:	b082      	sub	sp, #8
 801e3c4:	af00      	add	r7, sp, #0
 801e3c6:	6078      	str	r0, [r7, #4]
 801e3c8:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 801e3ca:	687b      	ldr	r3, [r7, #4]
 801e3cc:	3370      	adds	r3, #112	; 0x70
 801e3ce:	683a      	ldr	r2, [r7, #0]
 801e3d0:	429a      	cmp	r2, r3
 801e3d2:	d107      	bne.n	801e3e4 <_ZN17direccionViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction1
        //When button1 clicked change screen to anemometro
        //Go to anemometro with screen transition towards West
        application().gotoanemometroScreenSlideTransitionWest();
 801e3d4:	6878      	ldr	r0, [r7, #4]
 801e3d6:	f7ff fe54 	bl	801e082 <_ZN17direccionViewBase11applicationEv>
 801e3da:	4603      	mov	r3, r0
 801e3dc:	4618      	mov	r0, r3
 801e3de:	f7fe f9c9 	bl	801c774 <_ZN23FrontendApplicationBase39gotoanemometroScreenSlideTransitionWestEv>
        //Interaction2
        //When button2 clicked change screen to actitud
        //Go to actitud with screen transition towards East
        application().gotoactitudScreenSlideTransitionEast();
    }
}
 801e3e2:	e00b      	b.n	801e3fc <_ZN17direccionViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
    else if (&src == &button2)
 801e3e4:	687b      	ldr	r3, [r7, #4]
 801e3e6:	33a4      	adds	r3, #164	; 0xa4
 801e3e8:	683a      	ldr	r2, [r7, #0]
 801e3ea:	429a      	cmp	r2, r3
 801e3ec:	d106      	bne.n	801e3fc <_ZN17direccionViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        application().gotoactitudScreenSlideTransitionEast();
 801e3ee:	6878      	ldr	r0, [r7, #4]
 801e3f0:	f7ff fe47 	bl	801e082 <_ZN17direccionViewBase11applicationEv>
 801e3f4:	4603      	mov	r3, r0
 801e3f6:	4618      	mov	r0, r3
 801e3f8:	f7fe fa8e 	bl	801c918 <_ZN23FrontendApplicationBase36gotoactitudScreenSlideTransitionEastEv>
}
 801e3fc:	bf00      	nop
 801e3fe:	3708      	adds	r7, #8
 801e400:	46bd      	mov	sp, r7
 801e402:	bd80      	pop	{r7, pc}

0801e404 <_ZN8touchgfx4ViewI18direccionPresenterEC1Ev>:
    View() : presenter(0)
 801e404:	b580      	push	{r7, lr}
 801e406:	b082      	sub	sp, #8
 801e408:	af00      	add	r7, sp, #0
 801e40a:	6078      	str	r0, [r7, #4]
 801e40c:	687b      	ldr	r3, [r7, #4]
 801e40e:	4618      	mov	r0, r3
 801e410:	f007 f8d8 	bl	80255c4 <_ZN8touchgfx6ScreenC1Ev>
 801e414:	4a05      	ldr	r2, [pc, #20]	; (801e42c <_ZN8touchgfx4ViewI18direccionPresenterEC1Ev+0x28>)
 801e416:	687b      	ldr	r3, [r7, #4]
 801e418:	601a      	str	r2, [r3, #0]
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	2200      	movs	r2, #0
 801e41e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801e420:	687b      	ldr	r3, [r7, #4]
 801e422:	4618      	mov	r0, r3
 801e424:	3708      	adds	r7, #8
 801e426:	46bd      	mov	sp, r7
 801e428:	bd80      	pop	{r7, pc}
 801e42a:	bf00      	nop
 801e42c:	0802de9c 	.word	0x0802de9c

0801e430 <_ZN8touchgfx8CallbackI17direccionViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801e430:	b580      	push	{r7, lr}
 801e432:	b084      	sub	sp, #16
 801e434:	af00      	add	r7, sp, #0
 801e436:	60f8      	str	r0, [r7, #12]
 801e438:	60b9      	str	r1, [r7, #8]
 801e43a:	4639      	mov	r1, r7
 801e43c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801e440:	68fb      	ldr	r3, [r7, #12]
 801e442:	4618      	mov	r0, r3
 801e444:	f7f5 fc5c 	bl	8013d00 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 801e448:	4a08      	ldr	r2, [pc, #32]	; (801e46c <_ZN8touchgfx8CallbackI17direccionViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801e44a:	68fb      	ldr	r3, [r7, #12]
 801e44c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801e44e:	68fb      	ldr	r3, [r7, #12]
 801e450:	68ba      	ldr	r2, [r7, #8]
 801e452:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801e454:	68fb      	ldr	r3, [r7, #12]
 801e456:	3308      	adds	r3, #8
 801e458:	463a      	mov	r2, r7
 801e45a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e45e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801e462:	68fb      	ldr	r3, [r7, #12]
 801e464:	4618      	mov	r0, r3
 801e466:	3710      	adds	r7, #16
 801e468:	46bd      	mov	sp, r7
 801e46a:	bd80      	pop	{r7, pc}
 801e46c:	0802de84 	.word	0x0802de84

0801e470 <_ZN8touchgfx8CallbackI17direccionViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801e470:	b580      	push	{r7, lr}
 801e472:	b082      	sub	sp, #8
 801e474:	af00      	add	r7, sp, #0
 801e476:	6078      	str	r0, [r7, #4]
 801e478:	4a05      	ldr	r2, [pc, #20]	; (801e490 <_ZN8touchgfx8CallbackI17direccionViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	601a      	str	r2, [r3, #0]
 801e47e:	687b      	ldr	r3, [r7, #4]
 801e480:	4618      	mov	r0, r3
 801e482:	f7f5 fc4d 	bl	8013d20 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	4618      	mov	r0, r3
 801e48a:	3708      	adds	r7, #8
 801e48c:	46bd      	mov	sp, r7
 801e48e:	bd80      	pop	{r7, pc}
 801e490:	0802de84 	.word	0x0802de84

0801e494 <_ZN8touchgfx8CallbackI17direccionViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 801e494:	b580      	push	{r7, lr}
 801e496:	b082      	sub	sp, #8
 801e498:	af00      	add	r7, sp, #0
 801e49a:	6078      	str	r0, [r7, #4]
 801e49c:	6878      	ldr	r0, [r7, #4]
 801e49e:	f7ff ffe7 	bl	801e470 <_ZN8touchgfx8CallbackI17direccionViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801e4a2:	2110      	movs	r1, #16
 801e4a4:	6878      	ldr	r0, [r7, #4]
 801e4a6:	f00c f83c 	bl	802a522 <_ZdlPvj>
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	4618      	mov	r0, r3
 801e4ae:	3708      	adds	r7, #8
 801e4b0:	46bd      	mov	sp, r7
 801e4b2:	bd80      	pop	{r7, pc}

0801e4b4 <_ZN8touchgfx8CallbackI17direccionViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 801e4b4:	b580      	push	{r7, lr}
 801e4b6:	b082      	sub	sp, #8
 801e4b8:	af00      	add	r7, sp, #0
 801e4ba:	6078      	str	r0, [r7, #4]
 801e4bc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	685b      	ldr	r3, [r3, #4]
 801e4c2:	687a      	ldr	r2, [r7, #4]
 801e4c4:	68d2      	ldr	r2, [r2, #12]
 801e4c6:	1052      	asrs	r2, r2, #1
 801e4c8:	1898      	adds	r0, r3, r2
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	68db      	ldr	r3, [r3, #12]
 801e4ce:	f003 0301 	and.w	r3, r3, #1
 801e4d2:	2b00      	cmp	r3, #0
 801e4d4:	d102      	bne.n	801e4dc <_ZN8touchgfx8CallbackI17direccionViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801e4d6:	687b      	ldr	r3, [r7, #4]
 801e4d8:	689b      	ldr	r3, [r3, #8]
 801e4da:	e00a      	b.n	801e4f2 <_ZN8touchgfx8CallbackI17direccionViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 801e4dc:	687b      	ldr	r3, [r7, #4]
 801e4de:	685b      	ldr	r3, [r3, #4]
 801e4e0:	687a      	ldr	r2, [r7, #4]
 801e4e2:	68d2      	ldr	r2, [r2, #12]
 801e4e4:	1052      	asrs	r2, r2, #1
 801e4e6:	4413      	add	r3, r2
 801e4e8:	681b      	ldr	r3, [r3, #0]
 801e4ea:	687a      	ldr	r2, [r7, #4]
 801e4ec:	6892      	ldr	r2, [r2, #8]
 801e4ee:	4413      	add	r3, r2
 801e4f0:	681b      	ldr	r3, [r3, #0]
 801e4f2:	6839      	ldr	r1, [r7, #0]
 801e4f4:	4798      	blx	r3
    }
 801e4f6:	bf00      	nop
 801e4f8:	3708      	adds	r7, #8
 801e4fa:	46bd      	mov	sp, r7
 801e4fc:	bd80      	pop	{r7, pc}

0801e4fe <_ZNK8touchgfx8CallbackI17direccionViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801e4fe:	b480      	push	{r7}
 801e500:	b083      	sub	sp, #12
 801e502:	af00      	add	r7, sp, #0
 801e504:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801e506:	687b      	ldr	r3, [r7, #4]
 801e508:	685b      	ldr	r3, [r3, #4]
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	d010      	beq.n	801e530 <_ZNK8touchgfx8CallbackI17direccionViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801e50e:	687b      	ldr	r3, [r7, #4]
 801e510:	689b      	ldr	r3, [r3, #8]
 801e512:	2b00      	cmp	r3, #0
 801e514:	d107      	bne.n	801e526 <_ZNK8touchgfx8CallbackI17direccionViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	68db      	ldr	r3, [r3, #12]
 801e51a:	f003 0301 	and.w	r3, r3, #1
 801e51e:	2b00      	cmp	r3, #0
 801e520:	d101      	bne.n	801e526 <_ZNK8touchgfx8CallbackI17direccionViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801e522:	2301      	movs	r3, #1
 801e524:	e000      	b.n	801e528 <_ZNK8touchgfx8CallbackI17direccionViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801e526:	2300      	movs	r3, #0
 801e528:	2b01      	cmp	r3, #1
 801e52a:	d001      	beq.n	801e530 <_ZNK8touchgfx8CallbackI17direccionViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801e52c:	2301      	movs	r3, #1
 801e52e:	e000      	b.n	801e532 <_ZNK8touchgfx8CallbackI17direccionViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801e530:	2300      	movs	r3, #0
    }
 801e532:	4618      	mov	r0, r3
 801e534:	370c      	adds	r7, #12
 801e536:	46bd      	mov	sp, r7
 801e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e53c:	4770      	bx	lr
	...

0801e540 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 801e540:	b480      	push	{r7}
 801e542:	af00      	add	r7, sp, #0
    return bitmap_database;
 801e544:	4b02      	ldr	r3, [pc, #8]	; (801e550 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801e546:	4618      	mov	r0, r3
 801e548:	46bd      	mov	sp, r7
 801e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e54e:	4770      	bx	lr
 801e550:	0802dec8 	.word	0x0802dec8

0801e554 <_ZN14BitmapDatabase15getInstanceSizeEv>:
uint16_t getInstanceSize()
{
 801e554:	b480      	push	{r7}
 801e556:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 801e558:	2309      	movs	r3, #9
}
 801e55a:	4618      	mov	r0, r3
 801e55c:	46bd      	mov	sp, r7
 801e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e562:	4770      	bx	lr

0801e564 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param data A reference to the TypedTextData storage array.
     * @param f    The fonts associated with the array.
     * @param n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 801e564:	b480      	push	{r7}
 801e566:	b085      	sub	sp, #20
 801e568:	af00      	add	r7, sp, #0
 801e56a:	60f8      	str	r0, [r7, #12]
 801e56c:	60b9      	str	r1, [r7, #8]
 801e56e:	4613      	mov	r3, r2
 801e570:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 801e572:	4a07      	ldr	r2, [pc, #28]	; (801e590 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 801e574:	68fb      	ldr	r3, [r7, #12]
 801e576:	6013      	str	r3, [r2, #0]
        fonts = f;
 801e578:	4a06      	ldr	r2, [pc, #24]	; (801e594 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801e57a:	68bb      	ldr	r3, [r7, #8]
 801e57c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801e57e:	4a06      	ldr	r2, [pc, #24]	; (801e598 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 801e580:	88fb      	ldrh	r3, [r7, #6]
 801e582:	8013      	strh	r3, [r2, #0]
    }
 801e584:	bf00      	nop
 801e586:	3714      	adds	r7, #20
 801e588:	46bd      	mov	sp, r7
 801e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e58e:	4770      	bx	lr
 801e590:	2000cffc 	.word	0x2000cffc
 801e594:	2000d004 	.word	0x2000d004
 801e598:	2000d000 	.word	0x2000d000

0801e59c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 801e59c:	b590      	push	{r4, r7, lr}
 801e59e:	b085      	sub	sp, #20
 801e5a0:	af00      	add	r7, sp, #0
 801e5a2:	4603      	mov	r3, r0
 801e5a4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 801e5a6:	2300      	movs	r3, #0
 801e5a8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 801e5aa:	88fb      	ldrh	r3, [r7, #6]
 801e5ac:	2b00      	cmp	r3, #0
 801e5ae:	d127      	bne.n	801e600 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 801e5b0:	88fb      	ldrh	r3, [r7, #6]
 801e5b2:	4a1e      	ldr	r2, [pc, #120]	; (801e62c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 801e5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e5b8:	2b00      	cmp	r3, #0
 801e5ba:	d016      	beq.n	801e5ea <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 801e5bc:	88fb      	ldrh	r3, [r7, #6]
 801e5be:	4a1b      	ldr	r2, [pc, #108]	; (801e62c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 801e5c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e5c4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 801e5c6:	68bb      	ldr	r3, [r7, #8]
 801e5c8:	681b      	ldr	r3, [r3, #0]
 801e5ca:	68ba      	ldr	r2, [r7, #8]
 801e5cc:	4413      	add	r3, r2
 801e5ce:	4a18      	ldr	r2, [pc, #96]	; (801e630 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 801e5d0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 801e5d2:	68bb      	ldr	r3, [r7, #8]
 801e5d4:	685b      	ldr	r3, [r3, #4]
 801e5d6:	68ba      	ldr	r2, [r7, #8]
 801e5d8:	4413      	add	r3, r2
 801e5da:	4a16      	ldr	r2, [pc, #88]	; (801e634 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 801e5dc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 801e5de:	68bb      	ldr	r3, [r7, #8]
 801e5e0:	689b      	ldr	r3, [r3, #8]
 801e5e2:	68ba      	ldr	r2, [r7, #8]
 801e5e4:	4413      	add	r3, r2
 801e5e6:	60fb      	str	r3, [r7, #12]
 801e5e8:	e00a      	b.n	801e600 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 801e5ea:	4b11      	ldr	r3, [pc, #68]	; (801e630 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 801e5ec:	4a12      	ldr	r2, [pc, #72]	; (801e638 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801e5ee:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 801e5f0:	2200      	movs	r2, #0
 801e5f2:	4b10      	ldr	r3, [pc, #64]	; (801e634 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 801e5f4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 801e5f6:	88fb      	ldrh	r3, [r7, #6]
 801e5f8:	4a10      	ldr	r2, [pc, #64]	; (801e63c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 801e5fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e5fe:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 801e600:	68fb      	ldr	r3, [r7, #12]
 801e602:	2b00      	cmp	r3, #0
 801e604:	d00d      	beq.n	801e622 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 801e606:	4a0e      	ldr	r2, [pc, #56]	; (801e640 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 801e608:	88fb      	ldrh	r3, [r7, #6]
 801e60a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 801e60c:	f000 f822 	bl	801e654 <_ZN17TypedTextDatabase8getFontsEv>
 801e610:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 801e612:	f000 f817 	bl	801e644 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801e616:	4603      	mov	r3, r0
 801e618:	461a      	mov	r2, r3
 801e61a:	4621      	mov	r1, r4
 801e61c:	68f8      	ldr	r0, [r7, #12]
 801e61e:	f7ff ffa1 	bl	801e564 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801e622:	bf00      	nop
 801e624:	3714      	adds	r7, #20
 801e626:	46bd      	mov	sp, r7
 801e628:	bd90      	pop	{r4, r7, pc}
 801e62a:	bf00      	nop
 801e62c:	20008dac 	.word	0x20008dac
 801e630:	20008db4 	.word	0x20008db4
 801e634:	20008db8 	.word	0x20008db8
 801e638:	9009bc0c 	.word	0x9009bc0c
 801e63c:	9009bc14 	.word	0x9009bc14
 801e640:	20008db0 	.word	0x20008db0

0801e644 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 801e644:	b480      	push	{r7}
 801e646:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 801e648:	2301      	movs	r3, #1
}
 801e64a:	4618      	mov	r0, r3
 801e64c:	46bd      	mov	sp, r7
 801e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e652:	4770      	bx	lr

0801e654 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 801e654:	b480      	push	{r7}
 801e656:	af00      	add	r7, sp, #0
    return _fonts;
 801e658:	4b02      	ldr	r3, [pc, #8]	; (801e664 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801e65a:	4618      	mov	r0, r3
 801e65c:	46bd      	mov	sp, r7
 801e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e662:	4770      	bx	lr
 801e664:	20008dbc 	.word	0x20008dbc

0801e668 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        _fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 801e668:	b580      	push	{r7, lr}
 801e66a:	b082      	sub	sp, #8
 801e66c:	af00      	add	r7, sp, #0
 801e66e:	6078      	str	r0, [r7, #4]
 801e670:	6039      	str	r1, [r7, #0]
 801e672:	687b      	ldr	r3, [r7, #4]
 801e674:	2b01      	cmp	r3, #1
 801e676:	d113      	bne.n	801e6a0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 801e678:	683b      	ldr	r3, [r7, #0]
 801e67a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e67e:	4293      	cmp	r3, r2
 801e680:	d10e      	bne.n	801e6a0 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 801e682:	f7fc ffbb 	bl	801b5fc <_Z23getFont_verdana_20_4bppv>
 801e686:	4602      	mov	r2, r0
};
 801e688:	4b07      	ldr	r3, [pc, #28]	; (801e6a8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801e68a:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 801e68c:	f7fc fff8 	bl	801b680 <_Z23getFont_verdana_40_4bppv>
 801e690:	4602      	mov	r2, r0
};
 801e692:	4b05      	ldr	r3, [pc, #20]	; (801e6a8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801e694:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 801e696:	f7fc ff6f 	bl	801b578 <_Z23getFont_verdana_10_4bppv>
 801e69a:	4602      	mov	r2, r0
};
 801e69c:	4b02      	ldr	r3, [pc, #8]	; (801e6a8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801e69e:	609a      	str	r2, [r3, #8]
}  // namespace TypedTextDatabase
 801e6a0:	bf00      	nop
 801e6a2:	3708      	adds	r7, #8
 801e6a4:	46bd      	mov	sp, r7
 801e6a6:	bd80      	pop	{r7, pc}
 801e6a8:	20008dbc 	.word	0x20008dbc

0801e6ac <_GLOBAL__sub_I__fonts>:
 801e6ac:	b580      	push	{r7, lr}
 801e6ae:	af00      	add	r7, sp, #0
 801e6b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801e6b4:	2001      	movs	r0, #1
 801e6b6:	f7ff ffd7 	bl	801e668 <_Z41__static_initialization_and_destruction_0ii>
 801e6ba:	bd80      	pop	{r7, pc}

0801e6bc <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 801e6bc:	b480      	push	{r7}
 801e6be:	b083      	sub	sp, #12
 801e6c0:	af00      	add	r7, sp, #0
 801e6c2:	6078      	str	r0, [r7, #4]
    {
    }
 801e6c4:	bf00      	nop
 801e6c6:	370c      	adds	r7, #12
 801e6c8:	46bd      	mov	sp, r7
 801e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6ce:	4770      	bx	lr

0801e6d0 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 801e6d0:	b480      	push	{r7}
 801e6d2:	b083      	sub	sp, #12
 801e6d4:	af00      	add	r7, sp, #0
 801e6d6:	6078      	str	r0, [r7, #4]
    {
    }
 801e6d8:	bf00      	nop
 801e6da:	370c      	adds	r7, #12
 801e6dc:	46bd      	mov	sp, r7
 801e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6e2:	4770      	bx	lr

0801e6e4 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 801e6e4:	b480      	push	{r7}
 801e6e6:	b083      	sub	sp, #12
 801e6e8:	af00      	add	r7, sp, #0
 801e6ea:	6078      	str	r0, [r7, #4]
    {
 801e6ec:	4a04      	ldr	r2, [pc, #16]	; (801e700 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801e6ee:	687b      	ldr	r3, [r7, #4]
 801e6f0:	601a      	str	r2, [r3, #0]
    }
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	4618      	mov	r0, r3
 801e6f6:	370c      	adds	r7, #12
 801e6f8:	46bd      	mov	sp, r7
 801e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6fe:	4770      	bx	lr
 801e700:	0802dfc8 	.word	0x0802dfc8

0801e704 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 801e704:	b580      	push	{r7, lr}
 801e706:	b082      	sub	sp, #8
 801e708:	af00      	add	r7, sp, #0
 801e70a:	6078      	str	r0, [r7, #4]
    }
 801e70c:	6878      	ldr	r0, [r7, #4]
 801e70e:	f7ff ffe9 	bl	801e6e4 <_ZN8touchgfx9PresenterD1Ev>
 801e712:	2104      	movs	r1, #4
 801e714:	6878      	ldr	r0, [r7, #4]
 801e716:	f00b ff04 	bl	802a522 <_ZdlPvj>
 801e71a:	687b      	ldr	r3, [r7, #4]
 801e71c:	4618      	mov	r0, r3
 801e71e:	3708      	adds	r7, #8
 801e720:	46bd      	mov	sp, r7
 801e722:	bd80      	pop	{r7, pc}

0801e724 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 801e724:	b480      	push	{r7}
 801e726:	b083      	sub	sp, #12
 801e728:	af00      	add	r7, sp, #0
 801e72a:	6078      	str	r0, [r7, #4]
    {
 801e72c:	4a04      	ldr	r2, [pc, #16]	; (801e740 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 801e72e:	687b      	ldr	r3, [r7, #4]
 801e730:	601a      	str	r2, [r3, #0]
    }
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	4618      	mov	r0, r3
 801e736:	370c      	adds	r7, #12
 801e738:	46bd      	mov	sp, r7
 801e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e73e:	4770      	bx	lr
 801e740:	0802dfc8 	.word	0x0802dfc8

0801e744 <_ZNK5Model8getPitchEv>:

	void setDegree(float degree) {
		this->degree = degree;
	}

	float getPitch() const {
 801e744:	b480      	push	{r7}
 801e746:	b083      	sub	sp, #12
 801e748:	af00      	add	r7, sp, #0
 801e74a:	6078      	str	r0, [r7, #4]
		return pitch;
 801e74c:	687b      	ldr	r3, [r7, #4]
 801e74e:	689b      	ldr	r3, [r3, #8]
 801e750:	ee07 3a90 	vmov	s15, r3
	}
 801e754:	eeb0 0a67 	vmov.f32	s0, s15
 801e758:	370c      	adds	r7, #12
 801e75a:	46bd      	mov	sp, r7
 801e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e760:	4770      	bx	lr

0801e762 <_ZNK5Model7getRollEv>:

	void setPitch(float pitch) {
		this->pitch = pitch;
	}

	float getRoll() const {
 801e762:	b480      	push	{r7}
 801e764:	b083      	sub	sp, #12
 801e766:	af00      	add	r7, sp, #0
 801e768:	6078      	str	r0, [r7, #4]
		return roll;
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	68db      	ldr	r3, [r3, #12]
 801e76e:	ee07 3a90 	vmov	s15, r3
	}
 801e772:	eeb0 0a67 	vmov.f32	s0, s15
 801e776:	370c      	adds	r7, #12
 801e778:	46bd      	mov	sp, r7
 801e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e77e:	4770      	bx	lr

0801e780 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 801e780:	b480      	push	{r7}
 801e782:	b083      	sub	sp, #12
 801e784:	af00      	add	r7, sp, #0
 801e786:	6078      	str	r0, [r7, #4]
 801e788:	4a06      	ldr	r2, [pc, #24]	; (801e7a4 <_ZN13ModelListenerC1Ev+0x24>)
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	601a      	str	r2, [r3, #0]
 801e78e:	687b      	ldr	r3, [r7, #4]
 801e790:	2200      	movs	r2, #0
 801e792:	605a      	str	r2, [r3, #4]
 801e794:	687b      	ldr	r3, [r7, #4]
 801e796:	4618      	mov	r0, r3
 801e798:	370c      	adds	r7, #12
 801e79a:	46bd      	mov	sp, r7
 801e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7a0:	4770      	bx	lr
 801e7a2:	bf00      	nop
 801e7a4:	0802dfb4 	.word	0x0802dfb4

0801e7a8 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 801e7a8:	b480      	push	{r7}
 801e7aa:	b083      	sub	sp, #12
 801e7ac:	af00      	add	r7, sp, #0
 801e7ae:	6078      	str	r0, [r7, #4]
 801e7b0:	4a04      	ldr	r2, [pc, #16]	; (801e7c4 <_ZN13ModelListenerD1Ev+0x1c>)
 801e7b2:	687b      	ldr	r3, [r7, #4]
 801e7b4:	601a      	str	r2, [r3, #0]
 801e7b6:	687b      	ldr	r3, [r7, #4]
 801e7b8:	4618      	mov	r0, r3
 801e7ba:	370c      	adds	r7, #12
 801e7bc:	46bd      	mov	sp, r7
 801e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7c2:	4770      	bx	lr
 801e7c4:	0802dfb4 	.word	0x0802dfb4

0801e7c8 <_ZN13ModelListenerD0Ev>:
 801e7c8:	b580      	push	{r7, lr}
 801e7ca:	b082      	sub	sp, #8
 801e7cc:	af00      	add	r7, sp, #0
 801e7ce:	6078      	str	r0, [r7, #4]
 801e7d0:	6878      	ldr	r0, [r7, #4]
 801e7d2:	f7ff ffe9 	bl	801e7a8 <_ZN13ModelListenerD1Ev>
 801e7d6:	2108      	movs	r1, #8
 801e7d8:	6878      	ldr	r0, [r7, #4]
 801e7da:	f00b fea2 	bl	802a522 <_ZdlPvj>
 801e7de:	687b      	ldr	r3, [r7, #4]
 801e7e0:	4618      	mov	r0, r3
 801e7e2:	3708      	adds	r7, #8
 801e7e4:	46bd      	mov	sp, r7
 801e7e6:	bd80      	pop	{r7, pc}

0801e7e8 <_ZN13ModelListener12updateWidgetEv>:
    virtual void updateWidget() {}
 801e7e8:	b480      	push	{r7}
 801e7ea:	b083      	sub	sp, #12
 801e7ec:	af00      	add	r7, sp, #0
 801e7ee:	6078      	str	r0, [r7, #4]
 801e7f0:	bf00      	nop
 801e7f2:	370c      	adds	r7, #12
 801e7f4:	46bd      	mov	sp, r7
 801e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7fa:	4770      	bx	lr

0801e7fc <_ZN16actitudPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~actitudPresenter() {};
 801e7fc:	b580      	push	{r7, lr}
 801e7fe:	b082      	sub	sp, #8
 801e800:	af00      	add	r7, sp, #0
 801e802:	6078      	str	r0, [r7, #4]
 801e804:	4a09      	ldr	r2, [pc, #36]	; (801e82c <_ZN16actitudPresenterD1Ev+0x30>)
 801e806:	687b      	ldr	r3, [r7, #4]
 801e808:	601a      	str	r2, [r3, #0]
 801e80a:	4a09      	ldr	r2, [pc, #36]	; (801e830 <_ZN16actitudPresenterD1Ev+0x34>)
 801e80c:	687b      	ldr	r3, [r7, #4]
 801e80e:	605a      	str	r2, [r3, #4]
 801e810:	687b      	ldr	r3, [r7, #4]
 801e812:	3304      	adds	r3, #4
 801e814:	4618      	mov	r0, r3
 801e816:	f7ff ffc7 	bl	801e7a8 <_ZN13ModelListenerD1Ev>
 801e81a:	687b      	ldr	r3, [r7, #4]
 801e81c:	4618      	mov	r0, r3
 801e81e:	f7ff ff61 	bl	801e6e4 <_ZN8touchgfx9PresenterD1Ev>
 801e822:	687b      	ldr	r3, [r7, #4]
 801e824:	4618      	mov	r0, r3
 801e826:	3708      	adds	r7, #8
 801e828:	46bd      	mov	sp, r7
 801e82a:	bd80      	pop	{r7, pc}
 801e82c:	0802df84 	.word	0x0802df84
 801e830:	0802dfa0 	.word	0x0802dfa0

0801e834 <_ZThn4_N16actitudPresenterD1Ev>:
 801e834:	f1a0 0004 	sub.w	r0, r0, #4
 801e838:	e7e0      	b.n	801e7fc <_ZN16actitudPresenterD1Ev>
 801e83a:	bf00      	nop

0801e83c <_ZN16actitudPresenterD0Ev>:
 801e83c:	b580      	push	{r7, lr}
 801e83e:	b082      	sub	sp, #8
 801e840:	af00      	add	r7, sp, #0
 801e842:	6078      	str	r0, [r7, #4]
 801e844:	6878      	ldr	r0, [r7, #4]
 801e846:	f7ff ffd9 	bl	801e7fc <_ZN16actitudPresenterD1Ev>
 801e84a:	2110      	movs	r1, #16
 801e84c:	6878      	ldr	r0, [r7, #4]
 801e84e:	f00b fe68 	bl	802a522 <_ZdlPvj>
 801e852:	687b      	ldr	r3, [r7, #4]
 801e854:	4618      	mov	r0, r3
 801e856:	3708      	adds	r7, #8
 801e858:	46bd      	mov	sp, r7
 801e85a:	bd80      	pop	{r7, pc}

0801e85c <_ZThn4_N16actitudPresenterD0Ev>:
 801e85c:	f1a0 0004 	sub.w	r0, r0, #4
 801e860:	e7ec      	b.n	801e83c <_ZN16actitudPresenterD0Ev>
	...

0801e864 <_ZN16actitudPresenterC1ER11actitudView>:
#include <gui/actitud_screen/actitudView.hpp>
#include <gui/actitud_screen/actitudPresenter.hpp>

actitudPresenter::actitudPresenter(actitudView& v)
 801e864:	b580      	push	{r7, lr}
 801e866:	b082      	sub	sp, #8
 801e868:	af00      	add	r7, sp, #0
 801e86a:	6078      	str	r0, [r7, #4]
 801e86c:	6039      	str	r1, [r7, #0]
    : view(v)
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	4618      	mov	r0, r3
 801e872:	f7ff ff57 	bl	801e724 <_ZN8touchgfx9PresenterC1Ev>
 801e876:	687b      	ldr	r3, [r7, #4]
 801e878:	3304      	adds	r3, #4
 801e87a:	4618      	mov	r0, r3
 801e87c:	f7ff ff80 	bl	801e780 <_ZN13ModelListenerC1Ev>
 801e880:	4a06      	ldr	r2, [pc, #24]	; (801e89c <_ZN16actitudPresenterC1ER11actitudView+0x38>)
 801e882:	687b      	ldr	r3, [r7, #4]
 801e884:	601a      	str	r2, [r3, #0]
 801e886:	4a06      	ldr	r2, [pc, #24]	; (801e8a0 <_ZN16actitudPresenterC1ER11actitudView+0x3c>)
 801e888:	687b      	ldr	r3, [r7, #4]
 801e88a:	605a      	str	r2, [r3, #4]
 801e88c:	687b      	ldr	r3, [r7, #4]
 801e88e:	683a      	ldr	r2, [r7, #0]
 801e890:	60da      	str	r2, [r3, #12]
{
}
 801e892:	687b      	ldr	r3, [r7, #4]
 801e894:	4618      	mov	r0, r3
 801e896:	3708      	adds	r7, #8
 801e898:	46bd      	mov	sp, r7
 801e89a:	bd80      	pop	{r7, pc}
 801e89c:	0802df84 	.word	0x0802df84
 801e8a0:	0802dfa0 	.word	0x0802dfa0

0801e8a4 <_ZN16actitudPresenter8activateEv>:

void actitudPresenter::activate()
{
 801e8a4:	b480      	push	{r7}
 801e8a6:	b083      	sub	sp, #12
 801e8a8:	af00      	add	r7, sp, #0
 801e8aa:	6078      	str	r0, [r7, #4]

}
 801e8ac:	bf00      	nop
 801e8ae:	370c      	adds	r7, #12
 801e8b0:	46bd      	mov	sp, r7
 801e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8b6:	4770      	bx	lr

0801e8b8 <_ZN16actitudPresenter10deactivateEv>:

void actitudPresenter::deactivate()
{
 801e8b8:	b480      	push	{r7}
 801e8ba:	b083      	sub	sp, #12
 801e8bc:	af00      	add	r7, sp, #0
 801e8be:	6078      	str	r0, [r7, #4]

}
 801e8c0:	bf00      	nop
 801e8c2:	370c      	adds	r7, #12
 801e8c4:	46bd      	mov	sp, r7
 801e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8ca:	4770      	bx	lr

0801e8cc <_ZN16actitudPresenter12updateWidgetEv>:

void actitudPresenter::updateWidget(){
 801e8cc:	b590      	push	{r4, r7, lr}
 801e8ce:	ed2d 8b02 	vpush	{d8}
 801e8d2:	b083      	sub	sp, #12
 801e8d4:	af00      	add	r7, sp, #0
 801e8d6:	6078      	str	r0, [r7, #4]
	view.updateHorizonte(model->getPitch(), model->getRoll());
 801e8d8:	687b      	ldr	r3, [r7, #4]
 801e8da:	68dc      	ldr	r4, [r3, #12]
 801e8dc:	687b      	ldr	r3, [r7, #4]
 801e8de:	689b      	ldr	r3, [r3, #8]
 801e8e0:	4618      	mov	r0, r3
 801e8e2:	f7ff ff2f 	bl	801e744 <_ZNK5Model8getPitchEv>
 801e8e6:	eeb0 8a40 	vmov.f32	s16, s0
 801e8ea:	687b      	ldr	r3, [r7, #4]
 801e8ec:	689b      	ldr	r3, [r3, #8]
 801e8ee:	4618      	mov	r0, r3
 801e8f0:	f7ff ff37 	bl	801e762 <_ZNK5Model7getRollEv>
 801e8f4:	eef0 7a40 	vmov.f32	s15, s0
 801e8f8:	eef0 0a67 	vmov.f32	s1, s15
 801e8fc:	eeb0 0a48 	vmov.f32	s0, s16
 801e900:	4620      	mov	r0, r4
 801e902:	f000 f859 	bl	801e9b8 <_ZN11actitudView15updateHorizonteEff>
}
 801e906:	bf00      	nop
 801e908:	370c      	adds	r7, #12
 801e90a:	46bd      	mov	sp, r7
 801e90c:	ecbd 8b02 	vpop	{d8}
 801e910:	bd90      	pop	{r4, r7, pc}

0801e912 <_ZThn4_N16actitudPresenter12updateWidgetEv>:

    void updateWidget();
 801e912:	f1a0 0004 	sub.w	r0, r0, #4
 801e916:	f7ff bfd9 	b.w	801e8cc <_ZN16actitudPresenter12updateWidgetEv>
	...

0801e91c <_ZN11actitudViewD1Ev>:

class actitudView : public actitudViewBase
{
public:
    actitudView();
    virtual ~actitudView() {}
 801e91c:	b580      	push	{r7, lr}
 801e91e:	b082      	sub	sp, #8
 801e920:	af00      	add	r7, sp, #0
 801e922:	6078      	str	r0, [r7, #4]
 801e924:	4a05      	ldr	r2, [pc, #20]	; (801e93c <_ZN11actitudViewD1Ev+0x20>)
 801e926:	687b      	ldr	r3, [r7, #4]
 801e928:	601a      	str	r2, [r3, #0]
 801e92a:	687b      	ldr	r3, [r7, #4]
 801e92c:	4618      	mov	r0, r3
 801e92e:	f7fc ff6b 	bl	801b808 <_ZN15actitudViewBaseD1Ev>
 801e932:	687b      	ldr	r3, [r7, #4]
 801e934:	4618      	mov	r0, r3
 801e936:	3708      	adds	r7, #8
 801e938:	46bd      	mov	sp, r7
 801e93a:	bd80      	pop	{r7, pc}
 801e93c:	0802dfe0 	.word	0x0802dfe0

0801e940 <_ZN11actitudViewD0Ev>:
 801e940:	b580      	push	{r7, lr}
 801e942:	b082      	sub	sp, #8
 801e944:	af00      	add	r7, sp, #0
 801e946:	6078      	str	r0, [r7, #4]
 801e948:	6878      	ldr	r0, [r7, #4]
 801e94a:	f7ff ffe7 	bl	801e91c <_ZN11actitudViewD1Ev>
 801e94e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e952:	6878      	ldr	r0, [r7, #4]
 801e954:	f00b fde5 	bl	802a522 <_ZdlPvj>
 801e958:	687b      	ldr	r3, [r7, #4]
 801e95a:	4618      	mov	r0, r3
 801e95c:	3708      	adds	r7, #8
 801e95e:	46bd      	mov	sp, r7
 801e960:	bd80      	pop	{r7, pc}
	...

0801e964 <_ZN11actitudViewC1Ev>:
#include <gui/actitud_screen/actitudView.hpp>

actitudView::actitudView()
 801e964:	b580      	push	{r7, lr}
 801e966:	b082      	sub	sp, #8
 801e968:	af00      	add	r7, sp, #0
 801e96a:	6078      	str	r0, [r7, #4]
 801e96c:	687b      	ldr	r3, [r7, #4]
 801e96e:	4618      	mov	r0, r3
 801e970:	f7fc ff9a 	bl	801b8a8 <_ZN15actitudViewBaseC1Ev>
 801e974:	4a03      	ldr	r2, [pc, #12]	; (801e984 <_ZN11actitudViewC1Ev+0x20>)
 801e976:	687b      	ldr	r3, [r7, #4]
 801e978:	601a      	str	r2, [r3, #0]
{

}
 801e97a:	687b      	ldr	r3, [r7, #4]
 801e97c:	4618      	mov	r0, r3
 801e97e:	3708      	adds	r7, #8
 801e980:	46bd      	mov	sp, r7
 801e982:	bd80      	pop	{r7, pc}
 801e984:	0802dfe0 	.word	0x0802dfe0

0801e988 <_ZN11actitudView11setupScreenEv>:

void actitudView::setupScreen()
{
 801e988:	b580      	push	{r7, lr}
 801e98a:	b082      	sub	sp, #8
 801e98c:	af00      	add	r7, sp, #0
 801e98e:	6078      	str	r0, [r7, #4]
    actitudViewBase::setupScreen();
 801e990:	687b      	ldr	r3, [r7, #4]
 801e992:	4618      	mov	r0, r3
 801e994:	f7fd f91e 	bl	801bbd4 <_ZN15actitudViewBase11setupScreenEv>
}
 801e998:	bf00      	nop
 801e99a:	3708      	adds	r7, #8
 801e99c:	46bd      	mov	sp, r7
 801e99e:	bd80      	pop	{r7, pc}

0801e9a0 <_ZN11actitudView14tearDownScreenEv>:

void actitudView::tearDownScreen()
{
 801e9a0:	b580      	push	{r7, lr}
 801e9a2:	b082      	sub	sp, #8
 801e9a4:	af00      	add	r7, sp, #0
 801e9a6:	6078      	str	r0, [r7, #4]
    actitudViewBase::tearDownScreen();
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	4618      	mov	r0, r3
 801e9ac:	f7fc feda 	bl	801b764 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801e9b0:	bf00      	nop
 801e9b2:	3708      	adds	r7, #8
 801e9b4:	46bd      	mov	sp, r7
 801e9b6:	bd80      	pop	{r7, pc}

0801e9b8 <_ZN11actitudView15updateHorizonteEff>:

void actitudView::updateHorizonte(float pitch, float roll)
{
 801e9b8:	b590      	push	{r4, r7, lr}
 801e9ba:	b085      	sub	sp, #20
 801e9bc:	af00      	add	r7, sp, #0
 801e9be:	60f8      	str	r0, [r7, #12]
 801e9c0:	ed87 0a02 	vstr	s0, [r7, #8]
 801e9c4:	edc7 0a01 	vstr	s1, [r7, #4]
	if(roll <= 90.0f && roll >= -90.0f)
 801e9c8:	edd7 7a01 	vldr	s15, [r7, #4]
 801e9cc:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801eaac <_ZN11actitudView15updateHorizonteEff+0xf4>
 801e9d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9d8:	d827      	bhi.n	801ea2a <_ZN11actitudView15updateHorizonteEff+0x72>
 801e9da:	edd7 7a01 	vldr	s15, [r7, #4]
 801e9de:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801eab0 <_ZN11actitudView15updateHorizonteEff+0xf8>
 801e9e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9ea:	db1e      	blt.n	801ea2a <_ZN11actitudView15updateHorizonteEff+0x72>
		{
			actitudViewBase::textureMapper2.updateZAngle(roll * (-1.0f) * (3.14f / 180.0f));
 801e9ec:	68fb      	ldr	r3, [r7, #12]
 801e9ee:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801e9f2:	edd7 7a01 	vldr	s15, [r7, #4]
 801e9f6:	eef1 7a67 	vneg.f32	s15, s15
 801e9fa:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 801eab4 <_ZN11actitudView15updateHorizonteEff+0xfc>
 801e9fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ea02:	eeb0 0a67 	vmov.f32	s0, s15
 801ea06:	4618      	mov	r0, r3
 801ea08:	f7f5 f9c6 	bl	8013d98 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
			actitudViewBase::textureMapper1.updateZAngle(roll * (-1.0f) * (3.14f / 180.0f));
 801ea0c:	68fb      	ldr	r3, [r7, #12]
 801ea0e:	33a4      	adds	r3, #164	; 0xa4
 801ea10:	edd7 7a01 	vldr	s15, [r7, #4]
 801ea14:	eef1 7a67 	vneg.f32	s15, s15
 801ea18:	ed9f 7a26 	vldr	s14, [pc, #152]	; 801eab4 <_ZN11actitudView15updateHorizonteEff+0xfc>
 801ea1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ea20:	eeb0 0a67 	vmov.f32	s0, s15
 801ea24:	4618      	mov	r0, r3
 801ea26:	f7f5 f9b7 	bl	8013d98 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
		}
		if(pitch <= 20.0f && pitch >= -20.0f )
 801ea2a:	edd7 7a02 	vldr	s15, [r7, #8]
 801ea2e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 801ea32:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ea36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea3a:	d827      	bhi.n	801ea8c <_ZN11actitudView15updateHorizonteEff+0xd4>
 801ea3c:	edd7 7a02 	vldr	s15, [r7, #8]
 801ea40:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 801ea44:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ea48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea4c:	db1e      	blt.n	801ea8c <_ZN11actitudView15updateHorizonteEff+0xd4>
		{
			actitudViewBase::textureMapper1.setBitmapPosition(actitudViewBase::textureMapper1.getBitmapPositionX(), (-62.000f +((pitch*11.000f)/10.000f)) );
 801ea4e:	68fb      	ldr	r3, [r7, #12]
 801ea50:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801ea54:	68fb      	ldr	r3, [r7, #12]
 801ea56:	33a4      	adds	r3, #164	; 0xa4
 801ea58:	4618      	mov	r0, r3
 801ea5a:	f7f5 fc10 	bl	801427e <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>
 801ea5e:	eeb0 6a40 	vmov.f32	s12, s0
 801ea62:	edd7 7a02 	vldr	s15, [r7, #8]
 801ea66:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 801ea6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801ea6e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 801ea72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801ea76:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801eab8 <_ZN11actitudView15updateHorizonteEff+0x100>
 801ea7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ea7e:	eef0 0a67 	vmov.f32	s1, s15
 801ea82:	eeb0 0a46 	vmov.f32	s0, s12
 801ea86:	4620      	mov	r0, r4
 801ea88:	f7f5 fbc6 	bl	8014218 <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>
		}
		actitudViewBase::textureMapper2.handleTickEvent();
 801ea8c:	68fb      	ldr	r3, [r7, #12]
 801ea8e:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801ea92:	4618      	mov	r0, r3
 801ea94:	f7f3 fb70 	bl	8012178 <_ZN8touchgfx8Drawable15handleTickEventEv>
		actitudViewBase::textureMapper1.handleTickEvent();
 801ea98:	68fb      	ldr	r3, [r7, #12]
 801ea9a:	33a4      	adds	r3, #164	; 0xa4
 801ea9c:	4618      	mov	r0, r3
 801ea9e:	f7f3 fb6b 	bl	8012178 <_ZN8touchgfx8Drawable15handleTickEventEv>
}
 801eaa2:	bf00      	nop
 801eaa4:	3714      	adds	r7, #20
 801eaa6:	46bd      	mov	sp, r7
 801eaa8:	bd90      	pop	{r4, r7, pc}
 801eaaa:	bf00      	nop
 801eaac:	42b40000 	.word	0x42b40000
 801eab0:	c2b40000 	.word	0xc2b40000
 801eab4:	3c8ee7a7 	.word	0x3c8ee7a7
 801eab8:	42780000 	.word	0x42780000

0801eabc <_ZNK5Model7getWindEv>:

	void setRoll(float roll) {
		this->roll = roll;
	}

	float getWind() const {
 801eabc:	b480      	push	{r7}
 801eabe:	b083      	sub	sp, #12
 801eac0:	af00      	add	r7, sp, #0
 801eac2:	6078      	str	r0, [r7, #4]
		return wind;
 801eac4:	687b      	ldr	r3, [r7, #4]
 801eac6:	685b      	ldr	r3, [r3, #4]
 801eac8:	ee07 3a90 	vmov	s15, r3
	}
 801eacc:	eeb0 0a67 	vmov.f32	s0, s15
 801ead0:	370c      	adds	r7, #12
 801ead2:	46bd      	mov	sp, r7
 801ead4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ead8:	4770      	bx	lr
	...

0801eadc <_ZN19anemometroPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~anemometroPresenter() {};
 801eadc:	b580      	push	{r7, lr}
 801eade:	b082      	sub	sp, #8
 801eae0:	af00      	add	r7, sp, #0
 801eae2:	6078      	str	r0, [r7, #4]
 801eae4:	4a09      	ldr	r2, [pc, #36]	; (801eb0c <_ZN19anemometroPresenterD1Ev+0x30>)
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	601a      	str	r2, [r3, #0]
 801eaea:	4a09      	ldr	r2, [pc, #36]	; (801eb10 <_ZN19anemometroPresenterD1Ev+0x34>)
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	605a      	str	r2, [r3, #4]
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	3304      	adds	r3, #4
 801eaf4:	4618      	mov	r0, r3
 801eaf6:	f7ff fe57 	bl	801e7a8 <_ZN13ModelListenerD1Ev>
 801eafa:	687b      	ldr	r3, [r7, #4]
 801eafc:	4618      	mov	r0, r3
 801eafe:	f7ff fdf1 	bl	801e6e4 <_ZN8touchgfx9PresenterD1Ev>
 801eb02:	687b      	ldr	r3, [r7, #4]
 801eb04:	4618      	mov	r0, r3
 801eb06:	3708      	adds	r7, #8
 801eb08:	46bd      	mov	sp, r7
 801eb0a:	bd80      	pop	{r7, pc}
 801eb0c:	0802e014 	.word	0x0802e014
 801eb10:	0802e030 	.word	0x0802e030

0801eb14 <_ZThn4_N19anemometroPresenterD1Ev>:
 801eb14:	f1a0 0004 	sub.w	r0, r0, #4
 801eb18:	e7e0      	b.n	801eadc <_ZN19anemometroPresenterD1Ev>
 801eb1a:	bf00      	nop

0801eb1c <_ZN19anemometroPresenterD0Ev>:
 801eb1c:	b580      	push	{r7, lr}
 801eb1e:	b082      	sub	sp, #8
 801eb20:	af00      	add	r7, sp, #0
 801eb22:	6078      	str	r0, [r7, #4]
 801eb24:	6878      	ldr	r0, [r7, #4]
 801eb26:	f7ff ffd9 	bl	801eadc <_ZN19anemometroPresenterD1Ev>
 801eb2a:	2110      	movs	r1, #16
 801eb2c:	6878      	ldr	r0, [r7, #4]
 801eb2e:	f00b fcf8 	bl	802a522 <_ZdlPvj>
 801eb32:	687b      	ldr	r3, [r7, #4]
 801eb34:	4618      	mov	r0, r3
 801eb36:	3708      	adds	r7, #8
 801eb38:	46bd      	mov	sp, r7
 801eb3a:	bd80      	pop	{r7, pc}

0801eb3c <_ZThn4_N19anemometroPresenterD0Ev>:
 801eb3c:	f1a0 0004 	sub.w	r0, r0, #4
 801eb40:	e7ec      	b.n	801eb1c <_ZN19anemometroPresenterD0Ev>
	...

0801eb44 <_ZN19anemometroPresenterC1ER14anemometroView>:
#include <gui/anemometro_screen/anemometroView.hpp>
#include <gui/anemometro_screen/anemometroPresenter.hpp>

anemometroPresenter::anemometroPresenter(anemometroView& v)
 801eb44:	b580      	push	{r7, lr}
 801eb46:	b082      	sub	sp, #8
 801eb48:	af00      	add	r7, sp, #0
 801eb4a:	6078      	str	r0, [r7, #4]
 801eb4c:	6039      	str	r1, [r7, #0]
    : view(v)
 801eb4e:	687b      	ldr	r3, [r7, #4]
 801eb50:	4618      	mov	r0, r3
 801eb52:	f7ff fde7 	bl	801e724 <_ZN8touchgfx9PresenterC1Ev>
 801eb56:	687b      	ldr	r3, [r7, #4]
 801eb58:	3304      	adds	r3, #4
 801eb5a:	4618      	mov	r0, r3
 801eb5c:	f7ff fe10 	bl	801e780 <_ZN13ModelListenerC1Ev>
 801eb60:	4a06      	ldr	r2, [pc, #24]	; (801eb7c <_ZN19anemometroPresenterC1ER14anemometroView+0x38>)
 801eb62:	687b      	ldr	r3, [r7, #4]
 801eb64:	601a      	str	r2, [r3, #0]
 801eb66:	4a06      	ldr	r2, [pc, #24]	; (801eb80 <_ZN19anemometroPresenterC1ER14anemometroView+0x3c>)
 801eb68:	687b      	ldr	r3, [r7, #4]
 801eb6a:	605a      	str	r2, [r3, #4]
 801eb6c:	687b      	ldr	r3, [r7, #4]
 801eb6e:	683a      	ldr	r2, [r7, #0]
 801eb70:	60da      	str	r2, [r3, #12]
{
}
 801eb72:	687b      	ldr	r3, [r7, #4]
 801eb74:	4618      	mov	r0, r3
 801eb76:	3708      	adds	r7, #8
 801eb78:	46bd      	mov	sp, r7
 801eb7a:	bd80      	pop	{r7, pc}
 801eb7c:	0802e014 	.word	0x0802e014
 801eb80:	0802e030 	.word	0x0802e030

0801eb84 <_ZN19anemometroPresenter8activateEv>:

void anemometroPresenter::activate()
{
 801eb84:	b480      	push	{r7}
 801eb86:	b083      	sub	sp, #12
 801eb88:	af00      	add	r7, sp, #0
 801eb8a:	6078      	str	r0, [r7, #4]

}
 801eb8c:	bf00      	nop
 801eb8e:	370c      	adds	r7, #12
 801eb90:	46bd      	mov	sp, r7
 801eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb96:	4770      	bx	lr

0801eb98 <_ZN19anemometroPresenter10deactivateEv>:

void anemometroPresenter::deactivate()
{
 801eb98:	b480      	push	{r7}
 801eb9a:	b083      	sub	sp, #12
 801eb9c:	af00      	add	r7, sp, #0
 801eb9e:	6078      	str	r0, [r7, #4]

}
 801eba0:	bf00      	nop
 801eba2:	370c      	adds	r7, #12
 801eba4:	46bd      	mov	sp, r7
 801eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebaa:	4770      	bx	lr

0801ebac <_ZN19anemometroPresenter12updateWidgetEv>:

void anemometroPresenter::updateWidget()
{
 801ebac:	b5b0      	push	{r4, r5, r7, lr}
 801ebae:	b082      	sub	sp, #8
 801ebb0:	af00      	add	r7, sp, #0
 801ebb2:	6078      	str	r0, [r7, #4]
	view.updateGauge(model->getWind());
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	68dd      	ldr	r5, [r3, #12]
 801ebb8:	687b      	ldr	r3, [r7, #4]
 801ebba:	68db      	ldr	r3, [r3, #12]
 801ebbc:	681b      	ldr	r3, [r3, #0]
 801ebbe:	332c      	adds	r3, #44	; 0x2c
 801ebc0:	681c      	ldr	r4, [r3, #0]
 801ebc2:	687b      	ldr	r3, [r7, #4]
 801ebc4:	689b      	ldr	r3, [r3, #8]
 801ebc6:	4618      	mov	r0, r3
 801ebc8:	f7ff ff78 	bl	801eabc <_ZNK5Model7getWindEv>
 801ebcc:	eef0 7a40 	vmov.f32	s15, s0
 801ebd0:	eeb0 0a67 	vmov.f32	s0, s15
 801ebd4:	4628      	mov	r0, r5
 801ebd6:	47a0      	blx	r4
}
 801ebd8:	bf00      	nop
 801ebda:	3708      	adds	r7, #8
 801ebdc:	46bd      	mov	sp, r7
 801ebde:	bdb0      	pop	{r4, r5, r7, pc}

0801ebe0 <_ZThn4_N19anemometroPresenter12updateWidgetEv>:

    void updateWidget();
 801ebe0:	f1a0 0004 	sub.w	r0, r0, #4
 801ebe4:	f7ff bfe2 	b.w	801ebac <_ZN19anemometroPresenter12updateWidgetEv>

0801ebe8 <_ZN14anemometroViewD1Ev>:

class anemometroView : public anemometroViewBase
{
public:
    anemometroView();
    virtual ~anemometroView() {}
 801ebe8:	b580      	push	{r7, lr}
 801ebea:	b082      	sub	sp, #8
 801ebec:	af00      	add	r7, sp, #0
 801ebee:	6078      	str	r0, [r7, #4]
 801ebf0:	4a05      	ldr	r2, [pc, #20]	; (801ec08 <_ZN14anemometroViewD1Ev+0x20>)
 801ebf2:	687b      	ldr	r3, [r7, #4]
 801ebf4:	601a      	str	r2, [r3, #0]
 801ebf6:	687b      	ldr	r3, [r7, #4]
 801ebf8:	4618      	mov	r0, r3
 801ebfa:	f7fd f8cb 	bl	801bd94 <_ZN18anemometroViewBaseD1Ev>
 801ebfe:	687b      	ldr	r3, [r7, #4]
 801ec00:	4618      	mov	r0, r3
 801ec02:	3708      	adds	r7, #8
 801ec04:	46bd      	mov	sp, r7
 801ec06:	bd80      	pop	{r7, pc}
 801ec08:	0802e044 	.word	0x0802e044

0801ec0c <_ZN14anemometroViewD0Ev>:
 801ec0c:	b580      	push	{r7, lr}
 801ec0e:	b082      	sub	sp, #8
 801ec10:	af00      	add	r7, sp, #0
 801ec12:	6078      	str	r0, [r7, #4]
 801ec14:	6878      	ldr	r0, [r7, #4]
 801ec16:	f7ff ffe7 	bl	801ebe8 <_ZN14anemometroViewD1Ev>
 801ec1a:	f243 1178 	movw	r1, #12664	; 0x3178
 801ec1e:	6878      	ldr	r0, [r7, #4]
 801ec20:	f00b fc7f 	bl	802a522 <_ZdlPvj>
 801ec24:	687b      	ldr	r3, [r7, #4]
 801ec26:	4618      	mov	r0, r3
 801ec28:	3708      	adds	r7, #8
 801ec2a:	46bd      	mov	sp, r7
 801ec2c:	bd80      	pop	{r7, pc}
	...

0801ec30 <_ZN14anemometroViewC1Ev>:
#include <gui/anemometro_screen/anemometroView.hpp>

anemometroView::anemometroView()
 801ec30:	b580      	push	{r7, lr}
 801ec32:	b082      	sub	sp, #8
 801ec34:	af00      	add	r7, sp, #0
 801ec36:	6078      	str	r0, [r7, #4]
 801ec38:	687b      	ldr	r3, [r7, #4]
 801ec3a:	4618      	mov	r0, r3
 801ec3c:	f7fd f8ee 	bl	801be1c <_ZN18anemometroViewBaseC1Ev>
 801ec40:	4a03      	ldr	r2, [pc, #12]	; (801ec50 <_ZN14anemometroViewC1Ev+0x20>)
 801ec42:	687b      	ldr	r3, [r7, #4]
 801ec44:	601a      	str	r2, [r3, #0]
{

}
 801ec46:	687b      	ldr	r3, [r7, #4]
 801ec48:	4618      	mov	r0, r3
 801ec4a:	3708      	adds	r7, #8
 801ec4c:	46bd      	mov	sp, r7
 801ec4e:	bd80      	pop	{r7, pc}
 801ec50:	0802e044 	.word	0x0802e044

0801ec54 <_ZN14anemometroView11setupScreenEv>:

void anemometroView::setupScreen()
{
 801ec54:	b580      	push	{r7, lr}
 801ec56:	b082      	sub	sp, #8
 801ec58:	af00      	add	r7, sp, #0
 801ec5a:	6078      	str	r0, [r7, #4]
    anemometroViewBase::setupScreen();
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	4618      	mov	r0, r3
 801ec60:	f7fd f98a 	bl	801bf78 <_ZN18anemometroViewBase11setupScreenEv>
}
 801ec64:	bf00      	nop
 801ec66:	3708      	adds	r7, #8
 801ec68:	46bd      	mov	sp, r7
 801ec6a:	bd80      	pop	{r7, pc}

0801ec6c <_ZN14anemometroView14tearDownScreenEv>:

void anemometroView::tearDownScreen()
{
 801ec6c:	b580      	push	{r7, lr}
 801ec6e:	b082      	sub	sp, #8
 801ec70:	af00      	add	r7, sp, #0
 801ec72:	6078      	str	r0, [r7, #4]
    anemometroViewBase::tearDownScreen();
 801ec74:	687b      	ldr	r3, [r7, #4]
 801ec76:	4618      	mov	r0, r3
 801ec78:	f7fc fd74 	bl	801b764 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801ec7c:	bf00      	nop
 801ec7e:	3708      	adds	r7, #8
 801ec80:	46bd      	mov	sp, r7
 801ec82:	bd80      	pop	{r7, pc}

0801ec84 <_ZN14anemometroView11updateGaugeEf>:

void anemometroView::updateGauge(float degree)
{
 801ec84:	b580      	push	{r7, lr}
 801ec86:	b082      	sub	sp, #8
 801ec88:	af00      	add	r7, sp, #0
 801ec8a:	6078      	str	r0, [r7, #4]
 801ec8c:	ed87 0a00 	vstr	s0, [r7]
	anemometroViewBase::gauge1.setValue((int)degree);
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	33a4      	adds	r3, #164	; 0xa4
 801ec94:	edd7 7a00 	vldr	s15, [r7]
 801ec98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ec9c:	ee17 1a90 	vmov	r1, s15
 801eca0:	4618      	mov	r0, r3
 801eca2:	f7f4 fbde 	bl	8013462 <_ZN5Gauge8setValueEi>
	anemometroViewBase::gauge1.handleTickEvent();
 801eca6:	687b      	ldr	r3, [r7, #4]
 801eca8:	33a4      	adds	r3, #164	; 0xa4
 801ecaa:	4618      	mov	r0, r3
 801ecac:	f7f4 fbee 	bl	801348c <_ZN5Gauge15handleTickEventEv>
}
 801ecb0:	bf00      	nop
 801ecb2:	3708      	adds	r7, #8
 801ecb4:	46bd      	mov	sp, r7
 801ecb6:	bd80      	pop	{r7, pc}

0801ecb8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 801ecb8:	b580      	push	{r7, lr}
 801ecba:	b082      	sub	sp, #8
 801ecbc:	af00      	add	r7, sp, #0
 801ecbe:	6078      	str	r0, [r7, #4]
 801ecc0:	4a05      	ldr	r2, [pc, #20]	; (801ecd8 <_ZN19FrontendApplicationD1Ev+0x20>)
 801ecc2:	687b      	ldr	r3, [r7, #4]
 801ecc4:	601a      	str	r2, [r3, #0]
 801ecc6:	687b      	ldr	r3, [r7, #4]
 801ecc8:	4618      	mov	r0, r3
 801ecca:	f7fd fc3f 	bl	801c54c <_ZN23FrontendApplicationBaseD1Ev>
 801ecce:	687b      	ldr	r3, [r7, #4]
 801ecd0:	4618      	mov	r0, r3
 801ecd2:	3708      	adds	r7, #8
 801ecd4:	46bd      	mov	sp, r7
 801ecd6:	bd80      	pop	{r7, pc}
 801ecd8:	0802e07c 	.word	0x0802e07c

0801ecdc <_ZN19FrontendApplicationD0Ev>:
 801ecdc:	b580      	push	{r7, lr}
 801ecde:	b082      	sub	sp, #8
 801ece0:	af00      	add	r7, sp, #0
 801ece2:	6078      	str	r0, [r7, #4]
 801ece4:	6878      	ldr	r0, [r7, #4]
 801ece6:	f7ff ffe7 	bl	801ecb8 <_ZN19FrontendApplicationD1Ev>
 801ecea:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801ecee:	6878      	ldr	r0, [r7, #4]
 801ecf0:	f00b fc17 	bl	802a522 <_ZdlPvj>
 801ecf4:	687b      	ldr	r3, [r7, #4]
 801ecf6:	4618      	mov	r0, r3
 801ecf8:	3708      	adds	r7, #8
 801ecfa:	46bd      	mov	sp, r7
 801ecfc:	bd80      	pop	{r7, pc}

0801ecfe <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801ecfe:	b580      	push	{r7, lr}
 801ed00:	b082      	sub	sp, #8
 801ed02:	af00      	add	r7, sp, #0
 801ed04:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801ed06:	687b      	ldr	r3, [r7, #4]
 801ed08:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801ed0c:	4618      	mov	r0, r3
 801ed0e:	f000 f971 	bl	801eff4 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801ed12:	687b      	ldr	r3, [r7, #4]
 801ed14:	4618      	mov	r0, r3
 801ed16:	f005 fb91 	bl	802443c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801ed1a:	bf00      	nop
 801ed1c:	3708      	adds	r7, #8
 801ed1e:	46bd      	mov	sp, r7
 801ed20:	bd80      	pop	{r7, pc}
	...

0801ed24 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 801ed24:	b580      	push	{r7, lr}
 801ed26:	b084      	sub	sp, #16
 801ed28:	af00      	add	r7, sp, #0
 801ed2a:	60f8      	str	r0, [r7, #12]
 801ed2c:	60b9      	str	r1, [r7, #8]
 801ed2e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 801ed30:	68fb      	ldr	r3, [r7, #12]
 801ed32:	687a      	ldr	r2, [r7, #4]
 801ed34:	68b9      	ldr	r1, [r7, #8]
 801ed36:	4618      	mov	r0, r3
 801ed38:	f7fd fc82 	bl	801c640 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801ed3c:	4a03      	ldr	r2, [pc, #12]	; (801ed4c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801ed3e:	68fb      	ldr	r3, [r7, #12]
 801ed40:	601a      	str	r2, [r3, #0]
{
}
 801ed42:	68fb      	ldr	r3, [r7, #12]
 801ed44:	4618      	mov	r0, r3
 801ed46:	3710      	adds	r7, #16
 801ed48:	46bd      	mov	sp, r7
 801ed4a:	bd80      	pop	{r7, pc}
 801ed4c:	0802e07c 	.word	0x0802e07c

0801ed50 <_ZNK5Model9getDegreeEv>:
	float getDegree() const {
 801ed50:	b480      	push	{r7}
 801ed52:	b083      	sub	sp, #12
 801ed54:	af00      	add	r7, sp, #0
 801ed56:	6078      	str	r0, [r7, #4]
		return degree;
 801ed58:	687b      	ldr	r3, [r7, #4]
 801ed5a:	691b      	ldr	r3, [r3, #16]
 801ed5c:	ee07 3a90 	vmov	s15, r3
	}
 801ed60:	eeb0 0a67 	vmov.f32	s0, s15
 801ed64:	370c      	adds	r7, #12
 801ed66:	46bd      	mov	sp, r7
 801ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed6c:	4770      	bx	lr
	...

0801ed70 <_ZN18direccionPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~direccionPresenter() {};
 801ed70:	b580      	push	{r7, lr}
 801ed72:	b082      	sub	sp, #8
 801ed74:	af00      	add	r7, sp, #0
 801ed76:	6078      	str	r0, [r7, #4]
 801ed78:	4a09      	ldr	r2, [pc, #36]	; (801eda0 <_ZN18direccionPresenterD1Ev+0x30>)
 801ed7a:	687b      	ldr	r3, [r7, #4]
 801ed7c:	601a      	str	r2, [r3, #0]
 801ed7e:	4a09      	ldr	r2, [pc, #36]	; (801eda4 <_ZN18direccionPresenterD1Ev+0x34>)
 801ed80:	687b      	ldr	r3, [r7, #4]
 801ed82:	605a      	str	r2, [r3, #4]
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	3304      	adds	r3, #4
 801ed88:	4618      	mov	r0, r3
 801ed8a:	f7ff fd0d 	bl	801e7a8 <_ZN13ModelListenerD1Ev>
 801ed8e:	687b      	ldr	r3, [r7, #4]
 801ed90:	4618      	mov	r0, r3
 801ed92:	f7ff fca7 	bl	801e6e4 <_ZN8touchgfx9PresenterD1Ev>
 801ed96:	687b      	ldr	r3, [r7, #4]
 801ed98:	4618      	mov	r0, r3
 801ed9a:	3708      	adds	r7, #8
 801ed9c:	46bd      	mov	sp, r7
 801ed9e:	bd80      	pop	{r7, pc}
 801eda0:	0802e0b8 	.word	0x0802e0b8
 801eda4:	0802e0d4 	.word	0x0802e0d4

0801eda8 <_ZThn4_N18direccionPresenterD1Ev>:
 801eda8:	f1a0 0004 	sub.w	r0, r0, #4
 801edac:	e7e0      	b.n	801ed70 <_ZN18direccionPresenterD1Ev>
 801edae:	bf00      	nop

0801edb0 <_ZN18direccionPresenterD0Ev>:
 801edb0:	b580      	push	{r7, lr}
 801edb2:	b082      	sub	sp, #8
 801edb4:	af00      	add	r7, sp, #0
 801edb6:	6078      	str	r0, [r7, #4]
 801edb8:	6878      	ldr	r0, [r7, #4]
 801edba:	f7ff ffd9 	bl	801ed70 <_ZN18direccionPresenterD1Ev>
 801edbe:	2110      	movs	r1, #16
 801edc0:	6878      	ldr	r0, [r7, #4]
 801edc2:	f00b fbae 	bl	802a522 <_ZdlPvj>
 801edc6:	687b      	ldr	r3, [r7, #4]
 801edc8:	4618      	mov	r0, r3
 801edca:	3708      	adds	r7, #8
 801edcc:	46bd      	mov	sp, r7
 801edce:	bd80      	pop	{r7, pc}

0801edd0 <_ZThn4_N18direccionPresenterD0Ev>:
 801edd0:	f1a0 0004 	sub.w	r0, r0, #4
 801edd4:	e7ec      	b.n	801edb0 <_ZN18direccionPresenterD0Ev>
	...

0801edd8 <_ZN18direccionPresenterC1ER13direccionView>:
#include <gui/direccion_screen/direccionView.hpp>
#include <gui/direccion_screen/direccionPresenter.hpp>

direccionPresenter::direccionPresenter(direccionView& v)
 801edd8:	b580      	push	{r7, lr}
 801edda:	b082      	sub	sp, #8
 801eddc:	af00      	add	r7, sp, #0
 801edde:	6078      	str	r0, [r7, #4]
 801ede0:	6039      	str	r1, [r7, #0]
    : view(v)
 801ede2:	687b      	ldr	r3, [r7, #4]
 801ede4:	4618      	mov	r0, r3
 801ede6:	f7ff fc9d 	bl	801e724 <_ZN8touchgfx9PresenterC1Ev>
 801edea:	687b      	ldr	r3, [r7, #4]
 801edec:	3304      	adds	r3, #4
 801edee:	4618      	mov	r0, r3
 801edf0:	f7ff fcc6 	bl	801e780 <_ZN13ModelListenerC1Ev>
 801edf4:	4a06      	ldr	r2, [pc, #24]	; (801ee10 <_ZN18direccionPresenterC1ER13direccionView+0x38>)
 801edf6:	687b      	ldr	r3, [r7, #4]
 801edf8:	601a      	str	r2, [r3, #0]
 801edfa:	4a06      	ldr	r2, [pc, #24]	; (801ee14 <_ZN18direccionPresenterC1ER13direccionView+0x3c>)
 801edfc:	687b      	ldr	r3, [r7, #4]
 801edfe:	605a      	str	r2, [r3, #4]
 801ee00:	687b      	ldr	r3, [r7, #4]
 801ee02:	683a      	ldr	r2, [r7, #0]
 801ee04:	60da      	str	r2, [r3, #12]
{
}
 801ee06:	687b      	ldr	r3, [r7, #4]
 801ee08:	4618      	mov	r0, r3
 801ee0a:	3708      	adds	r7, #8
 801ee0c:	46bd      	mov	sp, r7
 801ee0e:	bd80      	pop	{r7, pc}
 801ee10:	0802e0b8 	.word	0x0802e0b8
 801ee14:	0802e0d4 	.word	0x0802e0d4

0801ee18 <_ZN18direccionPresenter8activateEv>:

void direccionPresenter::activate()
{
 801ee18:	b480      	push	{r7}
 801ee1a:	b083      	sub	sp, #12
 801ee1c:	af00      	add	r7, sp, #0
 801ee1e:	6078      	str	r0, [r7, #4]

}
 801ee20:	bf00      	nop
 801ee22:	370c      	adds	r7, #12
 801ee24:	46bd      	mov	sp, r7
 801ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee2a:	4770      	bx	lr

0801ee2c <_ZN18direccionPresenter10deactivateEv>:

void direccionPresenter::deactivate()
{
 801ee2c:	b480      	push	{r7}
 801ee2e:	b083      	sub	sp, #12
 801ee30:	af00      	add	r7, sp, #0
 801ee32:	6078      	str	r0, [r7, #4]

}
 801ee34:	bf00      	nop
 801ee36:	370c      	adds	r7, #12
 801ee38:	46bd      	mov	sp, r7
 801ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee3e:	4770      	bx	lr

0801ee40 <_ZN18direccionPresenter12updateWidgetEv>:

void direccionPresenter::updateWidget()
{
 801ee40:	b590      	push	{r4, r7, lr}
 801ee42:	b083      	sub	sp, #12
 801ee44:	af00      	add	r7, sp, #0
 801ee46:	6078      	str	r0, [r7, #4]
	view.updateIndicador(model->getDegree());
 801ee48:	687b      	ldr	r3, [r7, #4]
 801ee4a:	68dc      	ldr	r4, [r3, #12]
 801ee4c:	687b      	ldr	r3, [r7, #4]
 801ee4e:	689b      	ldr	r3, [r3, #8]
 801ee50:	4618      	mov	r0, r3
 801ee52:	f7ff ff7d 	bl	801ed50 <_ZNK5Model9getDegreeEv>
 801ee56:	eef0 7a40 	vmov.f32	s15, s0
 801ee5a:	eeb0 0a67 	vmov.f32	s0, s15
 801ee5e:	4620      	mov	r0, r4
 801ee60:	f000 f856 	bl	801ef10 <_ZN13direccionView15updateIndicadorEf>
}
 801ee64:	bf00      	nop
 801ee66:	370c      	adds	r7, #12
 801ee68:	46bd      	mov	sp, r7
 801ee6a:	bd90      	pop	{r4, r7, pc}

0801ee6c <_ZThn4_N18direccionPresenter12updateWidgetEv>:
    void updateWidget();
 801ee6c:	f1a0 0004 	sub.w	r0, r0, #4
 801ee70:	f7ff bfe6 	b.w	801ee40 <_ZN18direccionPresenter12updateWidgetEv>

0801ee74 <_ZN13direccionViewD1Ev>:

class direccionView : public direccionViewBase
{
public:
    direccionView();
    virtual ~direccionView() {}
 801ee74:	b580      	push	{r7, lr}
 801ee76:	b082      	sub	sp, #8
 801ee78:	af00      	add	r7, sp, #0
 801ee7a:	6078      	str	r0, [r7, #4]
 801ee7c:	4a05      	ldr	r2, [pc, #20]	; (801ee94 <_ZN13direccionViewD1Ev+0x20>)
 801ee7e:	687b      	ldr	r3, [r7, #4]
 801ee80:	601a      	str	r2, [r3, #0]
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	4618      	mov	r0, r3
 801ee86:	f7ff f8b3 	bl	801dff0 <_ZN17direccionViewBaseD1Ev>
 801ee8a:	687b      	ldr	r3, [r7, #4]
 801ee8c:	4618      	mov	r0, r3
 801ee8e:	3708      	adds	r7, #8
 801ee90:	46bd      	mov	sp, r7
 801ee92:	bd80      	pop	{r7, pc}
 801ee94:	0802e0e8 	.word	0x0802e0e8

0801ee98 <_ZN13direccionViewD0Ev>:
 801ee98:	b580      	push	{r7, lr}
 801ee9a:	b082      	sub	sp, #8
 801ee9c:	af00      	add	r7, sp, #0
 801ee9e:	6078      	str	r0, [r7, #4]
 801eea0:	6878      	ldr	r0, [r7, #4]
 801eea2:	f7ff ffe7 	bl	801ee74 <_ZN13direccionViewD1Ev>
 801eea6:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 801eeaa:	6878      	ldr	r0, [r7, #4]
 801eeac:	f00b fb39 	bl	802a522 <_ZdlPvj>
 801eeb0:	687b      	ldr	r3, [r7, #4]
 801eeb2:	4618      	mov	r0, r3
 801eeb4:	3708      	adds	r7, #8
 801eeb6:	46bd      	mov	sp, r7
 801eeb8:	bd80      	pop	{r7, pc}
	...

0801eebc <_ZN13direccionViewC1Ev>:
#include <gui/direccion_screen/direccionView.hpp>

direccionView::direccionView()
 801eebc:	b580      	push	{r7, lr}
 801eebe:	b082      	sub	sp, #8
 801eec0:	af00      	add	r7, sp, #0
 801eec2:	6078      	str	r0, [r7, #4]
 801eec4:	687b      	ldr	r3, [r7, #4]
 801eec6:	4618      	mov	r0, r3
 801eec8:	f7ff f8e6 	bl	801e098 <_ZN17direccionViewBaseC1Ev>
 801eecc:	4a03      	ldr	r2, [pc, #12]	; (801eedc <_ZN13direccionViewC1Ev+0x20>)
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	601a      	str	r2, [r3, #0]
{

}
 801eed2:	687b      	ldr	r3, [r7, #4]
 801eed4:	4618      	mov	r0, r3
 801eed6:	3708      	adds	r7, #8
 801eed8:	46bd      	mov	sp, r7
 801eeda:	bd80      	pop	{r7, pc}
 801eedc:	0802e0e8 	.word	0x0802e0e8

0801eee0 <_ZN13direccionView11setupScreenEv>:

void direccionView::setupScreen()
{
 801eee0:	b580      	push	{r7, lr}
 801eee2:	b082      	sub	sp, #8
 801eee4:	af00      	add	r7, sp, #0
 801eee6:	6078      	str	r0, [r7, #4]
    direccionViewBase::setupScreen();
 801eee8:	687b      	ldr	r3, [r7, #4]
 801eeea:	4618      	mov	r0, r3
 801eeec:	f7ff fa5e 	bl	801e3ac <_ZN17direccionViewBase11setupScreenEv>
}
 801eef0:	bf00      	nop
 801eef2:	3708      	adds	r7, #8
 801eef4:	46bd      	mov	sp, r7
 801eef6:	bd80      	pop	{r7, pc}

0801eef8 <_ZN13direccionView14tearDownScreenEv>:

void direccionView::tearDownScreen()
{
 801eef8:	b580      	push	{r7, lr}
 801eefa:	b082      	sub	sp, #8
 801eefc:	af00      	add	r7, sp, #0
 801eefe:	6078      	str	r0, [r7, #4]
    direccionViewBase::tearDownScreen();
 801ef00:	687b      	ldr	r3, [r7, #4]
 801ef02:	4618      	mov	r0, r3
 801ef04:	f7fc fc2e 	bl	801b764 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801ef08:	bf00      	nop
 801ef0a:	3708      	adds	r7, #8
 801ef0c:	46bd      	mov	sp, r7
 801ef0e:	bd80      	pop	{r7, pc}

0801ef10 <_ZN13direccionView15updateIndicadorEf>:

void direccionView::updateIndicador(float degree)
{
 801ef10:	b580      	push	{r7, lr}
 801ef12:	b082      	sub	sp, #8
 801ef14:	af00      	add	r7, sp, #0
 801ef16:	6078      	str	r0, [r7, #4]
 801ef18:	ed87 0a00 	vstr	s0, [r7]
	direccionViewBase::textureMapper1.updateZAngle(((-1.0f)*degree * 3.14f)/180.0f);
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801ef22:	edd7 7a00 	vldr	s15, [r7]
 801ef26:	eef1 7a67 	vneg.f32	s15, s15
 801ef2a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 801ef58 <_ZN13direccionView15updateIndicadorEf+0x48>
 801ef2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ef32:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801ef5c <_ZN13direccionView15updateIndicadorEf+0x4c>
 801ef36:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801ef3a:	eeb0 0a66 	vmov.f32	s0, s13
 801ef3e:	4618      	mov	r0, r3
 801ef40:	f7f4 ff2a 	bl	8013d98 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
	direccionViewBase::textureMapper1.handleTickEvent();
 801ef44:	687b      	ldr	r3, [r7, #4]
 801ef46:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801ef4a:	4618      	mov	r0, r3
 801ef4c:	f7f3 f914 	bl	8012178 <_ZN8touchgfx8Drawable15handleTickEventEv>
}
 801ef50:	bf00      	nop
 801ef52:	3708      	adds	r7, #8
 801ef54:	46bd      	mov	sp, r7
 801ef56:	bd80      	pop	{r7, pc}
 801ef58:	4048f5c3 	.word	0x4048f5c3
 801ef5c:	43340000 	.word	0x43340000

0801ef60 <_ZN5Model9setDegreeEf>:
	void setDegree(float degree) {
 801ef60:	b480      	push	{r7}
 801ef62:	b083      	sub	sp, #12
 801ef64:	af00      	add	r7, sp, #0
 801ef66:	6078      	str	r0, [r7, #4]
 801ef68:	ed87 0a00 	vstr	s0, [r7]
		this->degree = degree;
 801ef6c:	687b      	ldr	r3, [r7, #4]
 801ef6e:	683a      	ldr	r2, [r7, #0]
 801ef70:	611a      	str	r2, [r3, #16]
	}
 801ef72:	bf00      	nop
 801ef74:	370c      	adds	r7, #12
 801ef76:	46bd      	mov	sp, r7
 801ef78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef7c:	4770      	bx	lr

0801ef7e <_ZN5Model8setPitchEf>:
	void setPitch(float pitch) {
 801ef7e:	b480      	push	{r7}
 801ef80:	b083      	sub	sp, #12
 801ef82:	af00      	add	r7, sp, #0
 801ef84:	6078      	str	r0, [r7, #4]
 801ef86:	ed87 0a00 	vstr	s0, [r7]
		this->pitch = pitch;
 801ef8a:	687b      	ldr	r3, [r7, #4]
 801ef8c:	683a      	ldr	r2, [r7, #0]
 801ef8e:	609a      	str	r2, [r3, #8]
	}
 801ef90:	bf00      	nop
 801ef92:	370c      	adds	r7, #12
 801ef94:	46bd      	mov	sp, r7
 801ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef9a:	4770      	bx	lr

0801ef9c <_ZN5Model7setRollEf>:
	void setRoll(float roll) {
 801ef9c:	b480      	push	{r7}
 801ef9e:	b083      	sub	sp, #12
 801efa0:	af00      	add	r7, sp, #0
 801efa2:	6078      	str	r0, [r7, #4]
 801efa4:	ed87 0a00 	vstr	s0, [r7]
		this->roll = roll;
 801efa8:	687b      	ldr	r3, [r7, #4]
 801efaa:	683a      	ldr	r2, [r7, #0]
 801efac:	60da      	str	r2, [r3, #12]
	}
 801efae:	bf00      	nop
 801efb0:	370c      	adds	r7, #12
 801efb2:	46bd      	mov	sp, r7
 801efb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efb8:	4770      	bx	lr

0801efba <_ZN5Model7setWindEf>:

	void setWind(float wind) {
 801efba:	b480      	push	{r7}
 801efbc:	b083      	sub	sp, #12
 801efbe:	af00      	add	r7, sp, #0
 801efc0:	6078      	str	r0, [r7, #4]
 801efc2:	ed87 0a00 	vstr	s0, [r7]
		this->wind = wind;
 801efc6:	687b      	ldr	r3, [r7, #4]
 801efc8:	683a      	ldr	r2, [r7, #0]
 801efca:	605a      	str	r2, [r3, #4]
	}
 801efcc:	bf00      	nop
 801efce:	370c      	adds	r7, #12
 801efd0:	46bd      	mov	sp, r7
 801efd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efd6:	4770      	bx	lr

0801efd8 <_ZN5ModelC1Ev>:
#include <gui/model/ModelListener.hpp>
#include "main.h"
#include "cmsis_os.h"


Model::Model() : modelListener(0)
 801efd8:	b480      	push	{r7}
 801efda:	b083      	sub	sp, #12
 801efdc:	af00      	add	r7, sp, #0
 801efde:	6078      	str	r0, [r7, #4]
 801efe0:	687b      	ldr	r3, [r7, #4]
 801efe2:	2200      	movs	r2, #0
 801efe4:	601a      	str	r2, [r3, #0]
{
}
 801efe6:	687b      	ldr	r3, [r7, #4]
 801efe8:	4618      	mov	r0, r3
 801efea:	370c      	adds	r7, #12
 801efec:	46bd      	mov	sp, r7
 801efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eff2:	4770      	bx	lr

0801eff4 <_ZN5Model4tickEv>:

struct Message *xRedMessagePointer;
extern osMessageQId msgQueueHandle;

void Model::tick()
{
 801eff4:	b580      	push	{r7, lr}
 801eff6:	b082      	sub	sp, #8
 801eff8:	af00      	add	r7, sp, #0
 801effa:	6078      	str	r0, [r7, #4]
	if(msgQueueHandle != NULL)
 801effc:	4b21      	ldr	r3, [pc, #132]	; (801f084 <_ZN5Model4tickEv+0x90>)
 801effe:	681b      	ldr	r3, [r3, #0]
 801f000:	2b00      	cmp	r3, #0
 801f002:	d03b      	beq.n	801f07c <_ZN5Model4tickEv+0x88>
	{
		if(xQueueReceive(msgQueueHandle, &(xRedMessagePointer), (TickType_t) 10) == pdPASS)
 801f004:	4b1f      	ldr	r3, [pc, #124]	; (801f084 <_ZN5Model4tickEv+0x90>)
 801f006:	681b      	ldr	r3, [r3, #0]
 801f008:	220a      	movs	r2, #10
 801f00a:	491f      	ldr	r1, [pc, #124]	; (801f088 <_ZN5Model4tickEv+0x94>)
 801f00c:	4618      	mov	r0, r3
 801f00e:	f7fa f861 	bl	80190d4 <xQueueReceive>
 801f012:	4603      	mov	r3, r0
 801f014:	2b01      	cmp	r3, #1
 801f016:	bf0c      	ite	eq
 801f018:	2301      	moveq	r3, #1
 801f01a:	2300      	movne	r3, #0
 801f01c:	b2db      	uxtb	r3, r3
 801f01e:	2b00      	cmp	r3, #0
 801f020:	d02c      	beq.n	801f07c <_ZN5Model4tickEv+0x88>
		{
			Model::setWind(xRedMessagePointer->wind);
 801f022:	4b19      	ldr	r3, [pc, #100]	; (801f088 <_ZN5Model4tickEv+0x94>)
 801f024:	681b      	ldr	r3, [r3, #0]
 801f026:	edd3 7a00 	vldr	s15, [r3]
 801f02a:	eeb0 0a67 	vmov.f32	s0, s15
 801f02e:	6878      	ldr	r0, [r7, #4]
 801f030:	f7ff ffc3 	bl	801efba <_ZN5Model7setWindEf>
			Model::setPitch(xRedMessagePointer->pitch);
 801f034:	4b14      	ldr	r3, [pc, #80]	; (801f088 <_ZN5Model4tickEv+0x94>)
 801f036:	681b      	ldr	r3, [r3, #0]
 801f038:	edd3 7a01 	vldr	s15, [r3, #4]
 801f03c:	eeb0 0a67 	vmov.f32	s0, s15
 801f040:	6878      	ldr	r0, [r7, #4]
 801f042:	f7ff ff9c 	bl	801ef7e <_ZN5Model8setPitchEf>
			Model::setRoll(xRedMessagePointer->roll);
 801f046:	4b10      	ldr	r3, [pc, #64]	; (801f088 <_ZN5Model4tickEv+0x94>)
 801f048:	681b      	ldr	r3, [r3, #0]
 801f04a:	edd3 7a02 	vldr	s15, [r3, #8]
 801f04e:	eeb0 0a67 	vmov.f32	s0, s15
 801f052:	6878      	ldr	r0, [r7, #4]
 801f054:	f7ff ffa2 	bl	801ef9c <_ZN5Model7setRollEf>
			Model::setDegree(xRedMessagePointer->degree);
 801f058:	4b0b      	ldr	r3, [pc, #44]	; (801f088 <_ZN5Model4tickEv+0x94>)
 801f05a:	681b      	ldr	r3, [r3, #0]
 801f05c:	edd3 7a03 	vldr	s15, [r3, #12]
 801f060:	eeb0 0a67 	vmov.f32	s0, s15
 801f064:	6878      	ldr	r0, [r7, #4]
 801f066:	f7ff ff7b 	bl	801ef60 <_ZN5Model9setDegreeEf>
			modelListener->updateWidget();
 801f06a:	687b      	ldr	r3, [r7, #4]
 801f06c:	681a      	ldr	r2, [r3, #0]
 801f06e:	687b      	ldr	r3, [r7, #4]
 801f070:	681b      	ldr	r3, [r3, #0]
 801f072:	681b      	ldr	r3, [r3, #0]
 801f074:	3308      	adds	r3, #8
 801f076:	681b      	ldr	r3, [r3, #0]
 801f078:	4610      	mov	r0, r2
 801f07a:	4798      	blx	r3
		}
	}
}
 801f07c:	bf00      	nop
 801f07e:	3708      	adds	r7, #8
 801f080:	46bd      	mov	sp, r7
 801f082:	bd80      	pop	{r7, pc}
 801f084:	20000910 	.word	0x20000910
 801f088:	20008dc8 	.word	0x20008dc8

0801f08c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 801f08c:	b480      	push	{r7}
 801f08e:	b083      	sub	sp, #12
 801f090:	af00      	add	r7, sp, #0
 801f092:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	2200      	movs	r2, #0
 801f098:	801a      	strh	r2, [r3, #0]
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	2200      	movs	r2, #0
 801f09e:	805a      	strh	r2, [r3, #2]
 801f0a0:	687b      	ldr	r3, [r7, #4]
 801f0a2:	2200      	movs	r2, #0
 801f0a4:	809a      	strh	r2, [r3, #4]
 801f0a6:	687b      	ldr	r3, [r7, #4]
 801f0a8:	2200      	movs	r2, #0
 801f0aa:	80da      	strh	r2, [r3, #6]
 801f0ac:	687b      	ldr	r3, [r7, #4]
 801f0ae:	2200      	movs	r2, #0
 801f0b0:	811a      	strh	r2, [r3, #8]
 801f0b2:	687b      	ldr	r3, [r7, #4]
 801f0b4:	2200      	movs	r2, #0
 801f0b6:	815a      	strh	r2, [r3, #10]
 801f0b8:	687b      	ldr	r3, [r7, #4]
 801f0ba:	2200      	movs	r2, #0
 801f0bc:	819a      	strh	r2, [r3, #12]
 801f0be:	687b      	ldr	r3, [r7, #4]
 801f0c0:	2200      	movs	r2, #0
 801f0c2:	739a      	strb	r2, [r3, #14]
        {
        }
 801f0c4:	687b      	ldr	r3, [r7, #4]
 801f0c6:	4618      	mov	r0, r3
 801f0c8:	370c      	adds	r7, #12
 801f0ca:	46bd      	mov	sp, r7
 801f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0d0:	4770      	bx	lr

0801f0d2 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 801f0d2:	b580      	push	{r7, lr}
 801f0d4:	b082      	sub	sp, #8
 801f0d6:	af00      	add	r7, sp, #0
 801f0d8:	6078      	str	r0, [r7, #4]
 801f0da:	687b      	ldr	r3, [r7, #4]
 801f0dc:	4618      	mov	r0, r3
 801f0de:	f7ff ffd5 	bl	801f08c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	2200      	movs	r2, #0
 801f0e6:	611a      	str	r2, [r3, #16]
 801f0e8:	687b      	ldr	r3, [r7, #4]
 801f0ea:	2200      	movs	r2, #0
 801f0ec:	829a      	strh	r2, [r3, #20]
 801f0ee:	687b      	ldr	r3, [r7, #4]
 801f0f0:	4618      	mov	r0, r3
 801f0f2:	3708      	adds	r7, #8
 801f0f4:	46bd      	mov	sp, r7
 801f0f6:	bd80      	pop	{r7, pc}

0801f0f8 <_ZN8touchgfx3LCDD1Ev>:
    virtual ~LCD()
 801f0f8:	b480      	push	{r7}
 801f0fa:	b083      	sub	sp, #12
 801f0fc:	af00      	add	r7, sp, #0
 801f0fe:	6078      	str	r0, [r7, #4]
    {
 801f100:	4a04      	ldr	r2, [pc, #16]	; (801f114 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801f102:	687b      	ldr	r3, [r7, #4]
 801f104:	601a      	str	r2, [r3, #0]
    }
 801f106:	687b      	ldr	r3, [r7, #4]
 801f108:	4618      	mov	r0, r3
 801f10a:	370c      	adds	r7, #12
 801f10c:	46bd      	mov	sp, r7
 801f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f112:	4770      	bx	lr
 801f114:	0802e218 	.word	0x0802e218

0801f118 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801f118:	b580      	push	{r7, lr}
 801f11a:	b082      	sub	sp, #8
 801f11c:	af00      	add	r7, sp, #0
 801f11e:	6078      	str	r0, [r7, #4]
    }
 801f120:	6878      	ldr	r0, [r7, #4]
 801f122:	f7ff ffe9 	bl	801f0f8 <_ZN8touchgfx3LCDD1Ev>
 801f126:	2104      	movs	r1, #4
 801f128:	6878      	ldr	r0, [r7, #4]
 801f12a:	f00b f9fa 	bl	802a522 <_ZdlPvj>
 801f12e:	687b      	ldr	r3, [r7, #4]
 801f130:	4618      	mov	r0, r3
 801f132:	3708      	adds	r7, #8
 801f134:	46bd      	mov	sp, r7
 801f136:	bd80      	pop	{r7, pc}

0801f138 <_ZN8touchgfx3LCD4initEv>:
    virtual void init()
 801f138:	b480      	push	{r7}
 801f13a:	b083      	sub	sp, #12
 801f13c:	af00      	add	r7, sp, #0
 801f13e:	6078      	str	r0, [r7, #4]
    }
 801f140:	bf00      	nop
 801f142:	370c      	adds	r7, #12
 801f144:	46bd      	mov	sp, r7
 801f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f14a:	4770      	bx	lr

0801f14c <_ZN8touchgfx18MCUInstrumentationC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructor. Initializes members.
     */
    MCUInstrumentation():
 801f14c:	b480      	push	{r7}
 801f14e:	b083      	sub	sp, #12
 801f150:	af00      	add	r7, sp, #0
 801f152:	6078      	str	r0, [r7, #4]
        cc_consumed(0),
        cc_in(0)
 801f154:	4a07      	ldr	r2, [pc, #28]	; (801f174 <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	601a      	str	r2, [r3, #0]
 801f15a:	687b      	ldr	r3, [r7, #4]
 801f15c:	2200      	movs	r2, #0
 801f15e:	605a      	str	r2, [r3, #4]
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	2200      	movs	r2, #0
 801f164:	609a      	str	r2, [r3, #8]
    {
    }
 801f166:	687b      	ldr	r3, [r7, #4]
 801f168:	4618      	mov	r0, r3
 801f16a:	370c      	adds	r7, #12
 801f16c:	46bd      	mov	sp, r7
 801f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f172:	4770      	bx	lr
 801f174:	0802e1f0 	.word	0x0802e1f0

0801f178 <_ZN8touchgfx18MCUInstrumentationD1Ev>:
     *
     * @brief Virtual destructor.
     *
     *        Virtual destructor.
     */
    virtual ~MCUInstrumentation() {}
 801f178:	b480      	push	{r7}
 801f17a:	b083      	sub	sp, #12
 801f17c:	af00      	add	r7, sp, #0
 801f17e:	6078      	str	r0, [r7, #4]
 801f180:	4a04      	ldr	r2, [pc, #16]	; (801f194 <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	601a      	str	r2, [r3, #0]
 801f186:	687b      	ldr	r3, [r7, #4]
 801f188:	4618      	mov	r0, r3
 801f18a:	370c      	adds	r7, #12
 801f18c:	46bd      	mov	sp, r7
 801f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f192:	4770      	bx	lr
 801f194:	0802e1f0 	.word	0x0802e1f0

0801f198 <_ZN8touchgfx18MCUInstrumentationD0Ev>:
 801f198:	b580      	push	{r7, lr}
 801f19a:	b082      	sub	sp, #8
 801f19c:	af00      	add	r7, sp, #0
 801f19e:	6078      	str	r0, [r7, #4]
 801f1a0:	6878      	ldr	r0, [r7, #4]
 801f1a2:	f7ff ffe9 	bl	801f178 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 801f1a6:	210c      	movs	r1, #12
 801f1a8:	6878      	ldr	r0, [r7, #4]
 801f1aa:	f00b f9ba 	bl	802a522 <_ZdlPvj>
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	4618      	mov	r0, r3
 801f1b2:	3708      	adds	r7, #8
 801f1b4:	46bd      	mov	sp, r7
 801f1b6:	bd80      	pop	{r7, pc}

0801f1b8 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
     *
     *        Sets MCU activity high.
     *
     * @param active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 801f1b8:	b580      	push	{r7, lr}
 801f1ba:	b084      	sub	sp, #16
 801f1bc:	af00      	add	r7, sp, #0
 801f1be:	6078      	str	r0, [r7, #4]
 801f1c0:	460b      	mov	r3, r1
 801f1c2:	70fb      	strb	r3, [r7, #3]
    {
        if (active) //idle task sched out
 801f1c4:	78fb      	ldrb	r3, [r7, #3]
 801f1c6:	2b00      	cmp	r3, #0
 801f1c8:	d011      	beq.n	801f1ee <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 801f1ca:	687b      	ldr	r3, [r7, #4]
 801f1cc:	681b      	ldr	r3, [r3, #0]
 801f1ce:	3310      	adds	r3, #16
 801f1d0:	681b      	ldr	r3, [r3, #0]
 801f1d2:	6878      	ldr	r0, [r7, #4]
 801f1d4:	4798      	blx	r3
 801f1d6:	4602      	mov	r2, r0
 801f1d8:	687b      	ldr	r3, [r7, #4]
 801f1da:	689b      	ldr	r3, [r3, #8]
 801f1dc:	1ad3      	subs	r3, r2, r3
 801f1de:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	685a      	ldr	r2, [r3, #4]
 801f1e4:	68fb      	ldr	r3, [r7, #12]
 801f1e6:	441a      	add	r2, r3
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	605a      	str	r2, [r3, #4]
        }
        else //idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 801f1ec:	e008      	b.n	801f200 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 801f1ee:	687b      	ldr	r3, [r7, #4]
 801f1f0:	681b      	ldr	r3, [r3, #0]
 801f1f2:	3310      	adds	r3, #16
 801f1f4:	681b      	ldr	r3, [r3, #0]
 801f1f6:	6878      	ldr	r0, [r7, #4]
 801f1f8:	4798      	blx	r3
 801f1fa:	4602      	mov	r2, r0
 801f1fc:	687b      	ldr	r3, [r7, #4]
 801f1fe:	609a      	str	r2, [r3, #8]
    }
 801f200:	bf00      	nop
 801f202:	3710      	adds	r7, #16
 801f204:	46bd      	mov	sp, r7
 801f206:	bd80      	pop	{r7, pc}

0801f208 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     *        Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 801f208:	b480      	push	{r7}
 801f20a:	b083      	sub	sp, #12
 801f20c:	af00      	add	r7, sp, #0
 801f20e:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 801f210:	687b      	ldr	r3, [r7, #4]
 801f212:	685b      	ldr	r3, [r3, #4]
    }
 801f214:	4618      	mov	r0, r3
 801f216:	370c      	adds	r7, #12
 801f218:	46bd      	mov	sp, r7
 801f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f21e:	4770      	bx	lr

0801f220 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     *        Sets number of consumed clock cycles.
     *
     * @param val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 801f220:	b480      	push	{r7}
 801f222:	b083      	sub	sp, #12
 801f224:	af00      	add	r7, sp, #0
 801f226:	6078      	str	r0, [r7, #4]
 801f228:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 801f22a:	687b      	ldr	r3, [r7, #4]
 801f22c:	683a      	ldr	r2, [r7, #0]
 801f22e:	605a      	str	r2, [r3, #4]
    }
 801f230:	bf00      	nop
 801f232:	370c      	adds	r7, #12
 801f234:	46bd      	mov	sp, r7
 801f236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f23a:	4770      	bx	lr

0801f23c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 801f23c:	b580      	push	{r7, lr}
 801f23e:	b084      	sub	sp, #16
 801f240:	af00      	add	r7, sp, #0
 801f242:	60f8      	str	r0, [r7, #12]
 801f244:	60b9      	str	r1, [r7, #8]
 801f246:	607a      	str	r2, [r7, #4]
 801f248:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 801f24a:	4a44      	ldr	r2, [pc, #272]	; (801f35c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 801f24c:	68fb      	ldr	r3, [r7, #12]
 801f24e:	601a      	str	r2, [r3, #0]
 801f250:	68fb      	ldr	r3, [r7, #12]
 801f252:	68ba      	ldr	r2, [r7, #8]
 801f254:	605a      	str	r2, [r3, #4]
 801f256:	68fb      	ldr	r3, [r7, #12]
 801f258:	687a      	ldr	r2, [r7, #4]
 801f25a:	609a      	str	r2, [r3, #8]
 801f25c:	68fb      	ldr	r3, [r7, #12]
 801f25e:	683a      	ldr	r2, [r7, #0]
 801f260:	60da      	str	r2, [r3, #12]
 801f262:	68fb      	ldr	r3, [r7, #12]
 801f264:	2200      	movs	r2, #0
 801f266:	611a      	str	r2, [r3, #16]
 801f268:	68fb      	ldr	r3, [r7, #12]
 801f26a:	2200      	movs	r2, #0
 801f26c:	615a      	str	r2, [r3, #20]
 801f26e:	68fb      	ldr	r3, [r7, #12]
 801f270:	2200      	movs	r2, #0
 801f272:	619a      	str	r2, [r3, #24]
 801f274:	68fb      	ldr	r3, [r7, #12]
 801f276:	331c      	adds	r3, #28
 801f278:	4618      	mov	r0, r3
 801f27a:	f7ff ff2a 	bl	801f0d2 <_ZN8touchgfx8GesturesC1Ev>
 801f27e:	68fb      	ldr	r3, [r7, #12]
 801f280:	2200      	movs	r2, #0
 801f282:	639a      	str	r2, [r3, #56]	; 0x38
 801f284:	68fb      	ldr	r3, [r7, #12]
 801f286:	2200      	movs	r2, #0
 801f288:	63da      	str	r2, [r3, #60]	; 0x3c
 801f28a:	68fb      	ldr	r3, [r7, #12]
 801f28c:	2200      	movs	r2, #0
 801f28e:	641a      	str	r2, [r3, #64]	; 0x40
 801f290:	68fb      	ldr	r3, [r7, #12]
 801f292:	2200      	movs	r2, #0
 801f294:	645a      	str	r2, [r3, #68]	; 0x44
 801f296:	68fb      	ldr	r3, [r7, #12]
 801f298:	2200      	movs	r2, #0
 801f29a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801f29e:	68fb      	ldr	r3, [r7, #12]
 801f2a0:	2201      	movs	r2, #1
 801f2a2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801f2a6:	68fb      	ldr	r3, [r7, #12]
 801f2a8:	2201      	movs	r2, #1
 801f2aa:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801f2ae:	68fb      	ldr	r3, [r7, #12]
 801f2b0:	2200      	movs	r2, #0
 801f2b2:	64da      	str	r2, [r3, #76]	; 0x4c
 801f2b4:	68fb      	ldr	r3, [r7, #12]
 801f2b6:	3350      	adds	r3, #80	; 0x50
 801f2b8:	4618      	mov	r0, r3
 801f2ba:	f7f2 fe63 	bl	8011f84 <_ZN8touchgfx4RectC1Ev>
 801f2be:	68fb      	ldr	r3, [r7, #12]
 801f2c0:	2201      	movs	r2, #1
 801f2c2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801f2c6:	68fb      	ldr	r3, [r7, #12]
 801f2c8:	2200      	movs	r2, #0
 801f2ca:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801f2ce:	68fb      	ldr	r3, [r7, #12]
 801f2d0:	2200      	movs	r2, #0
 801f2d2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 801f2d6:	68fb      	ldr	r3, [r7, #12]
 801f2d8:	2201      	movs	r2, #1
 801f2da:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 801f2de:	68fb      	ldr	r3, [r7, #12]
 801f2e0:	2200      	movs	r2, #0
 801f2e2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 801f2e6:	68fb      	ldr	r3, [r7, #12]
 801f2e8:	2200      	movs	r2, #0
 801f2ea:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801f2ee:	68fb      	ldr	r3, [r7, #12]
 801f2f0:	2200      	movs	r2, #0
 801f2f2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 801f2f6:	68fb      	ldr	r3, [r7, #12]
 801f2f8:	2200      	movs	r2, #0
 801f2fa:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 801f2fe:	68fb      	ldr	r3, [r7, #12]
 801f300:	2200      	movs	r2, #0
 801f302:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801f306:	68fb      	ldr	r3, [r7, #12]
 801f308:	2200      	movs	r2, #0
 801f30a:	671a      	str	r2, [r3, #112]	; 0x70
 801f30c:	68fb      	ldr	r3, [r7, #12]
 801f30e:	2200      	movs	r2, #0
 801f310:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 801f314:	4a12      	ldr	r2, [pc, #72]	; (801f360 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 801f316:	68fb      	ldr	r3, [r7, #12]
 801f318:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 801f31a:	4a12      	ldr	r2, [pc, #72]	; (801f364 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 801f31c:	8b3b      	ldrh	r3, [r7, #24]
 801f31e:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 801f320:	4a11      	ldr	r2, [pc, #68]	; (801f368 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 801f322:	8bbb      	ldrh	r3, [r7, #28]
 801f324:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 801f326:	4b11      	ldr	r3, [pc, #68]	; (801f36c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 801f328:	2200      	movs	r2, #0
 801f32a:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801f32c:	4b0d      	ldr	r3, [pc, #52]	; (801f364 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 801f32e:	881a      	ldrh	r2, [r3, #0]
 801f330:	4b0f      	ldr	r3, [pc, #60]	; (801f370 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 801f332:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 801f334:	4b0c      	ldr	r3, [pc, #48]	; (801f368 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 801f336:	881a      	ldrh	r2, [r3, #0]
 801f338:	4b0e      	ldr	r3, [pc, #56]	; (801f374 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 801f33a:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801f33c:	8b3a      	ldrh	r2, [r7, #24]
 801f33e:	8bbb      	ldrh	r3, [r7, #28]
 801f340:	429a      	cmp	r2, r3
 801f342:	d301      	bcc.n	801f348 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 801f344:	2200      	movs	r2, #0
 801f346:	e000      	b.n	801f34a <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 801f348:	2201      	movs	r2, #1
 801f34a:	68fb      	ldr	r3, [r7, #12]
 801f34c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 801f350:	68fb      	ldr	r3, [r7, #12]
 801f352:	4618      	mov	r0, r3
 801f354:	3710      	adds	r7, #16
 801f356:	46bd      	mov	sp, r7
 801f358:	bd80      	pop	{r7, pc}
 801f35a:	bf00      	nop
 801f35c:	0802e84c 	.word	0x0802e84c
 801f360:	2000cf78 	.word	0x2000cf78
 801f364:	2000cf6a 	.word	0x2000cf6a
 801f368:	2000cf6c 	.word	0x2000cf6c
 801f36c:	2000cf6e 	.word	0x2000cf6e
 801f370:	2000cf70 	.word	0x2000cf70
 801f374:	2000cf72 	.word	0x2000cf72

0801f378 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL() { }
 801f378:	b480      	push	{r7}
 801f37a:	b083      	sub	sp, #12
 801f37c:	af00      	add	r7, sp, #0
 801f37e:	6078      	str	r0, [r7, #4]
 801f380:	4a04      	ldr	r2, [pc, #16]	; (801f394 <_ZN8touchgfx3HALD1Ev+0x1c>)
 801f382:	687b      	ldr	r3, [r7, #4]
 801f384:	601a      	str	r2, [r3, #0]
 801f386:	687b      	ldr	r3, [r7, #4]
 801f388:	4618      	mov	r0, r3
 801f38a:	370c      	adds	r7, #12
 801f38c:	46bd      	mov	sp, r7
 801f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f392:	4770      	bx	lr
 801f394:	0802e84c 	.word	0x0802e84c

0801f398 <_ZN8touchgfx3HALD0Ev>:
 801f398:	b580      	push	{r7, lr}
 801f39a:	b082      	sub	sp, #8
 801f39c:	af00      	add	r7, sp, #0
 801f39e:	6078      	str	r0, [r7, #4]
 801f3a0:	6878      	ldr	r0, [r7, #4]
 801f3a2:	f7ff ffe9 	bl	801f378 <_ZN8touchgfx3HALD1Ev>
 801f3a6:	2178      	movs	r1, #120	; 0x78
 801f3a8:	6878      	ldr	r0, [r7, #4]
 801f3aa:	f00b f8ba 	bl	802a522 <_ZdlPvj>
 801f3ae:	687b      	ldr	r3, [r7, #4]
 801f3b0:	4618      	mov	r0, r3
 801f3b2:	3708      	adds	r7, #8
 801f3b4:	46bd      	mov	sp, r7
 801f3b6:	bd80      	pop	{r7, pc}

0801f3b8 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 801f3b8:	b480      	push	{r7}
 801f3ba:	b083      	sub	sp, #12
 801f3bc:	af00      	add	r7, sp, #0
 801f3be:	6078      	str	r0, [r7, #4]
 801f3c0:	460b      	mov	r3, r1
 801f3c2:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 801f3c4:	687b      	ldr	r3, [r7, #4]
 801f3c6:	78fa      	ldrb	r2, [r7, #3]
 801f3c8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 801f3cc:	bf00      	nop
 801f3ce:	370c      	adds	r7, #12
 801f3d0:	46bd      	mov	sp, r7
 801f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3d6:	4770      	bx	lr

0801f3d8 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>:
    void setFrameRateCompensation(bool enabled)
 801f3d8:	b480      	push	{r7}
 801f3da:	b083      	sub	sp, #12
 801f3dc:	af00      	add	r7, sp, #0
 801f3de:	6078      	str	r0, [r7, #4]
 801f3e0:	460b      	mov	r3, r1
 801f3e2:	70fb      	strb	r3, [r7, #3]
        vSyncCompensationEnabled = enabled;
 801f3e4:	687b      	ldr	r3, [r7, #4]
 801f3e6:	78fa      	ldrb	r2, [r7, #3]
 801f3e8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    };
 801f3ec:	bf00      	nop
 801f3ee:	370c      	adds	r7, #12
 801f3f0:	46bd      	mov	sp, r7
 801f3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3f6:	4770      	bx	lr

0801f3f8 <_ZN8touchgfx3HAL18setTouchSampleRateEa>:
    void setTouchSampleRate(int8_t sampleRateInTicks)
 801f3f8:	b480      	push	{r7}
 801f3fa:	b083      	sub	sp, #12
 801f3fc:	af00      	add	r7, sp, #0
 801f3fe:	6078      	str	r0, [r7, #4]
 801f400:	460b      	mov	r3, r1
 801f402:	70fb      	strb	r3, [r7, #3]
        if (sampleRateInTicks > 0)
 801f404:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f408:	2b00      	cmp	r3, #0
 801f40a:	dd03      	ble.n	801f414 <_ZN8touchgfx3HAL18setTouchSampleRateEa+0x1c>
            touchSampleRate = sampleRateInTicks;
 801f40c:	687b      	ldr	r3, [r7, #4]
 801f40e:	78fa      	ldrb	r2, [r7, #3]
 801f410:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 801f414:	bf00      	nop
 801f416:	370c      	adds	r7, #12
 801f418:	46bd      	mov	sp, r7
 801f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f41e:	4770      	bx	lr

0801f420 <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>:
    void setMCUInstrumentation(MCUInstrumentation* mcuInstr)
 801f420:	b480      	push	{r7}
 801f422:	b083      	sub	sp, #12
 801f424:	af00      	add	r7, sp, #0
 801f426:	6078      	str	r0, [r7, #4]
 801f428:	6039      	str	r1, [r7, #0]
        mcuInstrumentation = mcuInstr;
 801f42a:	687b      	ldr	r3, [r7, #4]
 801f42c:	683a      	ldr	r2, [r7, #0]
 801f42e:	611a      	str	r2, [r3, #16]
    }
 801f430:	bf00      	nop
 801f432:	370c      	adds	r7, #12
 801f434:	46bd      	mov	sp, r7
 801f436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f43a:	4770      	bx	lr

0801f43c <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>:
    void enableMCULoadCalculation(bool enabled)
 801f43c:	b480      	push	{r7}
 801f43e:	b083      	sub	sp, #12
 801f440:	af00      	add	r7, sp, #0
 801f442:	6078      	str	r0, [r7, #4]
 801f444:	460b      	mov	r3, r1
 801f446:	70fb      	strb	r3, [r7, #3]
        updateMCULoad = enabled;
 801f448:	687b      	ldr	r3, [r7, #4]
 801f44a:	78fa      	ldrb	r2, [r7, #3]
 801f44c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    }
 801f450:	bf00      	nop
 801f452:	370c      	adds	r7, #12
 801f454:	46bd      	mov	sp, r7
 801f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f45a:	4770      	bx	lr

0801f45c <_ZN8touchgfx3HAL13setFingerSizeEh>:
    void setFingerSize(uint8_t size)
 801f45c:	b480      	push	{r7}
 801f45e:	b083      	sub	sp, #12
 801f460:	af00      	add	r7, sp, #0
 801f462:	6078      	str	r0, [r7, #4]
 801f464:	460b      	mov	r3, r1
 801f466:	70fb      	strb	r3, [r7, #3]
        fingerSize = size;
 801f468:	687b      	ldr	r3, [r7, #4]
 801f46a:	78fa      	ldrb	r2, [r7, #3]
 801f46c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    }
 801f470:	bf00      	nop
 801f472:	370c      	adds	r7, #12
 801f474:	46bd      	mov	sp, r7
 801f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f47a:	4770      	bx	lr

0801f47c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     *
     *        Registers an array of texts.
     *
     * @param t The array of texts.
     */
    static void registerTexts(const Texts* t)
 801f47c:	b480      	push	{r7}
 801f47e:	b083      	sub	sp, #12
 801f480:	af00      	add	r7, sp, #0
 801f482:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 801f484:	4a04      	ldr	r2, [pc, #16]	; (801f498 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801f486:	687b      	ldr	r3, [r7, #4]
 801f488:	6013      	str	r3, [r2, #0]
    }
 801f48a:	bf00      	nop
 801f48c:	370c      	adds	r7, #12
 801f48e:	46bd      	mov	sp, r7
 801f490:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f494:	4770      	bx	lr
 801f496:	bf00      	nop
 801f498:	2000d008 	.word	0x2000d008

0801f49c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 801f49c:	b480      	push	{r7}
 801f49e:	b085      	sub	sp, #20
 801f4a0:	af00      	add	r7, sp, #0
 801f4a2:	60f8      	str	r0, [r7, #12]
 801f4a4:	60b9      	str	r1, [r7, #8]
 801f4a6:	607a      	str	r2, [r7, #4]
 801f4a8:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 801f4aa:	4a0b      	ldr	r2, [pc, #44]	; (801f4d8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 801f4ac:	68fb      	ldr	r3, [r7, #12]
 801f4ae:	601a      	str	r2, [r3, #0]
 801f4b0:	68fb      	ldr	r3, [r7, #12]
 801f4b2:	68ba      	ldr	r2, [r7, #8]
 801f4b4:	605a      	str	r2, [r3, #4]
 801f4b6:	68fb      	ldr	r3, [r7, #12]
 801f4b8:	687a      	ldr	r2, [r7, #4]
 801f4ba:	609a      	str	r2, [r3, #8]
 801f4bc:	68fb      	ldr	r3, [r7, #12]
 801f4be:	683a      	ldr	r2, [r7, #0]
 801f4c0:	60da      	str	r2, [r3, #12]
 801f4c2:	68fb      	ldr	r3, [r7, #12]
 801f4c4:	69ba      	ldr	r2, [r7, #24]
 801f4c6:	611a      	str	r2, [r3, #16]
    {
    }
 801f4c8:	68fb      	ldr	r3, [r7, #12]
 801f4ca:	4618      	mov	r0, r3
 801f4cc:	3714      	adds	r7, #20
 801f4ce:	46bd      	mov	sp, r7
 801f4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4d4:	4770      	bx	lr
 801f4d6:	bf00      	nop
 801f4d8:	0802e1e0 	.word	0x0802e1e0

0801f4dc <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 801f4dc:	b480      	push	{r7}
 801f4de:	b083      	sub	sp, #12
 801f4e0:	af00      	add	r7, sp, #0
 801f4e2:	6078      	str	r0, [r7, #4]
    {
 801f4e4:	4a04      	ldr	r2, [pc, #16]	; (801f4f8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801f4e6:	687b      	ldr	r3, [r7, #4]
 801f4e8:	601a      	str	r2, [r3, #0]
    }
 801f4ea:	687b      	ldr	r3, [r7, #4]
 801f4ec:	4618      	mov	r0, r3
 801f4ee:	370c      	adds	r7, #12
 801f4f0:	46bd      	mov	sp, r7
 801f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4f6:	4770      	bx	lr
 801f4f8:	0802e1e0 	.word	0x0802e1e0

0801f4fc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801f4fc:	b580      	push	{r7, lr}
 801f4fe:	b082      	sub	sp, #8
 801f500:	af00      	add	r7, sp, #0
 801f502:	6078      	str	r0, [r7, #4]
    }
 801f504:	6878      	ldr	r0, [r7, #4]
 801f506:	f7ff ffe9 	bl	801f4dc <_ZN8touchgfx7MVPHeapD1Ev>
 801f50a:	2114      	movs	r1, #20
 801f50c:	6878      	ldr	r0, [r7, #4]
 801f50e:	f00b f808 	bl	802a522 <_ZdlPvj>
 801f512:	687b      	ldr	r3, [r7, #4]
 801f514:	4618      	mov	r0, r3
 801f516:	3708      	adds	r7, #8
 801f518:	46bd      	mov	sp, r7
 801f51a:	bd80      	pop	{r7, pc}

0801f51c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801f51c:	b580      	push	{r7, lr}
 801f51e:	b082      	sub	sp, #8
 801f520:	af00      	add	r7, sp, #0
 801f522:	6078      	str	r0, [r7, #4]
 801f524:	6039      	str	r1, [r7, #0]
    {
        app.gotoanemometroScreenNoTransition();
 801f526:	683b      	ldr	r3, [r7, #0]
 801f528:	4618      	mov	r0, r3
 801f52a:	f7fd f8dd 	bl	801c6e8 <_ZN23FrontendApplicationBase32gotoanemometroScreenNoTransitionEv>
    }
 801f52e:	bf00      	nop
 801f530:	3708      	adds	r7, #8
 801f532:	46bd      	mov	sp, r7
 801f534:	bd80      	pop	{r7, pc}
	...

0801f538 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 801f538:	b580      	push	{r7, lr}
 801f53a:	b086      	sub	sp, #24
 801f53c:	af02      	add	r7, sp, #8
 801f53e:	60f8      	str	r0, [r7, #12]
 801f540:	60b9      	str	r1, [r7, #8]
 801f542:	607a      	str	r2, [r7, #4]
 801f544:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801f546:	68f8      	ldr	r0, [r7, #12]
 801f548:	69bb      	ldr	r3, [r7, #24]
 801f54a:	9300      	str	r3, [sp, #0]
 801f54c:	683b      	ldr	r3, [r7, #0]
 801f54e:	687a      	ldr	r2, [r7, #4]
 801f550:	68b9      	ldr	r1, [r7, #8]
 801f552:	f7ff ffa3 	bl	801f49c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801f556:	4a04      	ldr	r2, [pc, #16]	; (801f568 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 801f558:	68fb      	ldr	r3, [r7, #12]
 801f55a:	601a      	str	r2, [r3, #0]
    {

    }
 801f55c:	68fb      	ldr	r3, [r7, #12]
 801f55e:	4618      	mov	r0, r3
 801f560:	3710      	adds	r7, #16
 801f562:	46bd      	mov	sp, r7
 801f564:	bd80      	pop	{r7, pc}
 801f566:	bf00      	nop
 801f568:	0802e1cc 	.word	0x0802e1cc

0801f56c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801f56c:	b580      	push	{r7, lr}
 801f56e:	af00      	add	r7, sp, #0
 801f570:	4801      	ldr	r0, [pc, #4]	; (801f578 <__tcf_0+0xc>)
 801f572:	f000 fabf 	bl	801faf4 <_ZN12FrontendHeapD1Ev>
 801f576:	bd80      	pop	{r7, pc}
 801f578:	20008dcc 	.word	0x20008dcc

0801f57c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801f57c:	b580      	push	{r7, lr}
 801f57e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 801f580:	4b08      	ldr	r3, [pc, #32]	; (801f5a4 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 801f582:	681b      	ldr	r3, [r3, #0]
 801f584:	f003 0301 	and.w	r3, r3, #1
 801f588:	2b00      	cmp	r3, #0
 801f58a:	d108      	bne.n	801f59e <_ZN12FrontendHeap11getInstanceEv+0x22>
 801f58c:	4806      	ldr	r0, [pc, #24]	; (801f5a8 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 801f58e:	f000 f831 	bl	801f5f4 <_ZN12FrontendHeapC1Ev>
 801f592:	4b04      	ldr	r3, [pc, #16]	; (801f5a4 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 801f594:	2201      	movs	r2, #1
 801f596:	601a      	str	r2, [r3, #0]
 801f598:	4804      	ldr	r0, [pc, #16]	; (801f5ac <_ZN12FrontendHeap11getInstanceEv+0x30>)
 801f59a:	f00b fdcb 	bl	802b134 <atexit>
        return instance;
 801f59e:	4b02      	ldr	r3, [pc, #8]	; (801f5a8 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 801f5a0:	4618      	mov	r0, r3
 801f5a2:	bd80      	pop	{r7, pc}
 801f5a4:	2000c138 	.word	0x2000c138
 801f5a8:	20008dcc 	.word	0x20008dcc
 801f5ac:	0801f56d 	.word	0x0801f56d

0801f5b0 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 801f5b0:	b580      	push	{r7, lr}
 801f5b2:	b082      	sub	sp, #8
 801f5b4:	af00      	add	r7, sp, #0
 801f5b6:	6078      	str	r0, [r7, #4]
 801f5b8:	4a05      	ldr	r2, [pc, #20]	; (801f5d0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801f5ba:	687b      	ldr	r3, [r7, #4]
 801f5bc:	601a      	str	r2, [r3, #0]
 801f5be:	687b      	ldr	r3, [r7, #4]
 801f5c0:	4618      	mov	r0, r3
 801f5c2:	f7ff ff8b 	bl	801f4dc <_ZN8touchgfx7MVPHeapD1Ev>
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	4618      	mov	r0, r3
 801f5ca:	3708      	adds	r7, #8
 801f5cc:	46bd      	mov	sp, r7
 801f5ce:	bd80      	pop	{r7, pc}
 801f5d0:	0802e1cc 	.word	0x0802e1cc

0801f5d4 <_ZN16FrontendHeapBaseD0Ev>:
 801f5d4:	b580      	push	{r7, lr}
 801f5d6:	b082      	sub	sp, #8
 801f5d8:	af00      	add	r7, sp, #0
 801f5da:	6078      	str	r0, [r7, #4]
 801f5dc:	6878      	ldr	r0, [r7, #4]
 801f5de:	f7ff ffe7 	bl	801f5b0 <_ZN16FrontendHeapBaseD1Ev>
 801f5e2:	2114      	movs	r1, #20
 801f5e4:	6878      	ldr	r0, [r7, #4]
 801f5e6:	f00a ff9c 	bl	802a522 <_ZdlPvj>
 801f5ea:	687b      	ldr	r3, [r7, #4]
 801f5ec:	4618      	mov	r0, r3
 801f5ee:	3708      	adds	r7, #8
 801f5f0:	46bd      	mov	sp, r7
 801f5f2:	bd80      	pop	{r7, pc}

0801f5f4 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 801f5f4:	b5b0      	push	{r4, r5, r7, lr}
 801f5f6:	b084      	sub	sp, #16
 801f5f8:	af02      	add	r7, sp, #8
 801f5fa:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 801f5fc:	6878      	ldr	r0, [r7, #4]
 801f5fe:	687b      	ldr	r3, [r7, #4]
 801f600:	f103 0414 	add.w	r4, r3, #20
 801f604:	687b      	ldr	r3, [r7, #4]
 801f606:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801f60a:	687b      	ldr	r3, [r7, #4]
 801f60c:	f243 12ac 	movw	r2, #12716	; 0x31ac
 801f610:	441a      	add	r2, r3
 801f612:	6879      	ldr	r1, [r7, #4]
 801f614:	f243 2308 	movw	r3, #12808	; 0x3208
 801f618:	440b      	add	r3, r1
 801f61a:	9300      	str	r3, [sp, #0]
 801f61c:	4613      	mov	r3, r2
 801f61e:	462a      	mov	r2, r5
 801f620:	4621      	mov	r1, r4
 801f622:	f7ff ff89 	bl	801f538 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801f626:	4a1a      	ldr	r2, [pc, #104]	; (801f690 <_ZN12FrontendHeapC1Ev+0x9c>)
 801f628:	687b      	ldr	r3, [r7, #4]
 801f62a:	601a      	str	r2, [r3, #0]
 801f62c:	687b      	ldr	r3, [r7, #4]
 801f62e:	3314      	adds	r3, #20
 801f630:	4618      	mov	r0, r3
 801f632:	f000 f92b 	bl	801f88c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16actitudPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801f636:	687b      	ldr	r3, [r7, #4]
 801f638:	332c      	adds	r3, #44	; 0x2c
 801f63a:	4618      	mov	r0, r3
 801f63c:	f000 f95a 	bl	801f8f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14anemometroViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801f640:	687a      	ldr	r2, [r7, #4]
 801f642:	f243 13ac 	movw	r3, #12716	; 0x31ac
 801f646:	4413      	add	r3, r2
 801f648:	4618      	mov	r0, r3
 801f64a:	f000 f989 	bl	801f960 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 801f64e:	687a      	ldr	r2, [r7, #4]
 801f650:	f243 2308 	movw	r3, #12808	; 0x3208
 801f654:	4413      	add	r3, r2
 801f656:	687a      	ldr	r2, [r7, #4]
 801f658:	f243 3158 	movw	r1, #13144	; 0x3358
 801f65c:	4411      	add	r1, r2
 801f65e:	687a      	ldr	r2, [r7, #4]
 801f660:	4618      	mov	r0, r3
 801f662:	f7ff fb5f 	bl	801ed24 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 801f666:	687a      	ldr	r2, [r7, #4]
 801f668:	f243 3358 	movw	r3, #13144	; 0x3358
 801f66c:	4413      	add	r3, r2
 801f66e:	4618      	mov	r0, r3
 801f670:	f7ff fcb2 	bl	801efd8 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 801f674:	6878      	ldr	r0, [r7, #4]
 801f676:	687a      	ldr	r2, [r7, #4]
 801f678:	f243 2308 	movw	r3, #12808	; 0x3208
 801f67c:	4413      	add	r3, r2
 801f67e:	4619      	mov	r1, r3
 801f680:	f7ff ff4c 	bl	801f51c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 801f684:	687b      	ldr	r3, [r7, #4]
 801f686:	4618      	mov	r0, r3
 801f688:	3708      	adds	r7, #8
 801f68a:	46bd      	mov	sp, r7
 801f68c:	bdb0      	pop	{r4, r5, r7, pc}
 801f68e:	bf00      	nop
 801f690:	0802e11c 	.word	0x0802e11c

0801f694 <_ZN8touchgfx8LCD16bppD1Ev>:
 * @see LCD
 */
class LCD16bpp : public LCD
{
public:
    virtual ~LCD16bpp()
 801f694:	b580      	push	{r7, lr}
 801f696:	b082      	sub	sp, #8
 801f698:	af00      	add	r7, sp, #0
 801f69a:	6078      	str	r0, [r7, #4]
    {
 801f69c:	4a05      	ldr	r2, [pc, #20]	; (801f6b4 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 801f69e:	687b      	ldr	r3, [r7, #4]
 801f6a0:	601a      	str	r2, [r3, #0]
 801f6a2:	687b      	ldr	r3, [r7, #4]
 801f6a4:	4618      	mov	r0, r3
 801f6a6:	f7ff fd27 	bl	801f0f8 <_ZN8touchgfx3LCDD1Ev>
    }
 801f6aa:	687b      	ldr	r3, [r7, #4]
 801f6ac:	4618      	mov	r0, r3
 801f6ae:	3708      	adds	r7, #8
 801f6b0:	46bd      	mov	sp, r7
 801f6b2:	bd80      	pop	{r7, pc}
 801f6b4:	0802fffc 	.word	0x0802fffc

0801f6b8 <_ZN8touchgfx8LCD16bppD0Ev>:
    virtual ~LCD16bpp()
 801f6b8:	b580      	push	{r7, lr}
 801f6ba:	b082      	sub	sp, #8
 801f6bc:	af00      	add	r7, sp, #0
 801f6be:	6078      	str	r0, [r7, #4]
    }
 801f6c0:	6878      	ldr	r0, [r7, #4]
 801f6c2:	f7ff ffe7 	bl	801f694 <_ZN8touchgfx8LCD16bppD1Ev>
 801f6c6:	2104      	movs	r1, #4
 801f6c8:	6878      	ldr	r0, [r7, #4]
 801f6ca:	f00a ff2a 	bl	802a522 <_ZdlPvj>
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	4618      	mov	r0, r3
 801f6d2:	3708      	adds	r7, #8
 801f6d4:	46bd      	mov	sp, r7
 801f6d6:	bd80      	pop	{r7, pc}

0801f6d8 <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    STM32F7HAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 801f6d8:	b580      	push	{r7, lr}
 801f6da:	b086      	sub	sp, #24
 801f6dc:	af02      	add	r7, sp, #8
 801f6de:	60f8      	str	r0, [r7, #12]
 801f6e0:	60b9      	str	r1, [r7, #8]
 801f6e2:	607a      	str	r2, [r7, #4]
 801f6e4:	603b      	str	r3, [r7, #0]
 801f6e6:	68f8      	ldr	r0, [r7, #12]
 801f6e8:	8bbb      	ldrh	r3, [r7, #28]
 801f6ea:	9301      	str	r3, [sp, #4]
 801f6ec:	8b3b      	ldrh	r3, [r7, #24]
 801f6ee:	9300      	str	r3, [sp, #0]
 801f6f0:	683b      	ldr	r3, [r7, #0]
 801f6f2:	687a      	ldr	r2, [r7, #4]
 801f6f4:	68b9      	ldr	r1, [r7, #8]
 801f6f6:	f7ff fda1 	bl	801f23c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801f6fa:	4a04      	ldr	r2, [pc, #16]	; (801f70c <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801f6fc:	68fb      	ldr	r3, [r7, #12]
 801f6fe:	601a      	str	r2, [r3, #0]
    {
    }
 801f700:	68fb      	ldr	r3, [r7, #12]
 801f702:	4618      	mov	r0, r3
 801f704:	3710      	adds	r7, #16
 801f706:	46bd      	mov	sp, r7
 801f708:	bd80      	pop	{r7, pc}
 801f70a:	bf00      	nop
 801f70c:	0802e2d8 	.word	0x0802e2d8

0801f710 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 801f710:	b480      	push	{r7}
 801f712:	b083      	sub	sp, #12
 801f714:	af00      	add	r7, sp, #0
 801f716:	6078      	str	r0, [r7, #4]
 801f718:	4a04      	ldr	r2, [pc, #16]	; (801f72c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801f71a:	687b      	ldr	r3, [r7, #4]
 801f71c:	601a      	str	r2, [r3, #0]
 801f71e:	687b      	ldr	r3, [r7, #4]
 801f720:	4618      	mov	r0, r3
 801f722:	370c      	adds	r7, #12
 801f724:	46bd      	mov	sp, r7
 801f726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f72a:	4770      	bx	lr
 801f72c:	0802ca7c 	.word	0x0802ca7c

0801f730 <_ZN8touchgfx22STM32F7TouchControllerC1Ev>:
namespace touchgfx
{
class STM32F7TouchController: public TouchController
{
public:
    STM32F7TouchController() {}
 801f730:	b580      	push	{r7, lr}
 801f732:	b082      	sub	sp, #8
 801f734:	af00      	add	r7, sp, #0
 801f736:	6078      	str	r0, [r7, #4]
 801f738:	687b      	ldr	r3, [r7, #4]
 801f73a:	4618      	mov	r0, r3
 801f73c:	f7ff ffe8 	bl	801f710 <_ZN8touchgfx15TouchControllerC1Ev>
 801f740:	4a03      	ldr	r2, [pc, #12]	; (801f750 <_ZN8touchgfx22STM32F7TouchControllerC1Ev+0x20>)
 801f742:	687b      	ldr	r3, [r7, #4]
 801f744:	601a      	str	r2, [r3, #0]
 801f746:	687b      	ldr	r3, [r7, #4]
 801f748:	4618      	mov	r0, r3
 801f74a:	3708      	adds	r7, #8
 801f74c:	46bd      	mov	sp, r7
 801f74e:	bd80      	pop	{r7, pc}
 801f750:	0802e464 	.word	0x0802e464

0801f754 <LCD_GetXSize>:

static uint32_t frameBuf0 = (uint32_t)(0xc0000000);
extern "C" {

uint32_t LCD_GetXSize(void)
{
 801f754:	b480      	push	{r7}
 801f756:	af00      	add	r7, sp, #0
  return 480;
 801f758:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 801f75c:	4618      	mov	r0, r3
 801f75e:	46bd      	mov	sp, r7
 801f760:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f764:	4770      	bx	lr

0801f766 <LCD_GetYSize>:

uint32_t LCD_GetYSize(void)
{
 801f766:	b480      	push	{r7}
 801f768:	af00      	add	r7, sp, #0
  return 272;
 801f76a:	f44f 7388 	mov.w	r3, #272	; 0x110
}
 801f76e:	4618      	mov	r0, r3
 801f770:	46bd      	mov	sp, r7
 801f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f776:	4770      	bx	lr

0801f778 <_Z16GRAPHICS_HW_Initv>:
}

void GRAPHICS_HW_Init()
{
 801f778:	b580      	push	{r7, lr}
 801f77a:	af00      	add	r7, sp, #0
    

    /* Initialize the SDRAM */
    MX_FMC_Init();
 801f77c:	f000 fbca 	bl	801ff14 <_Z11MX_FMC_Initv>
    MX_SDRAM_InitEx();
 801f780:	f000 fc1e 	bl	801ffc0 <_Z15MX_SDRAM_InitExv>

    /* Configure LCD */
    MX_LCD_Init();
 801f784:	f000 fb36 	bl	801fdf4 <_Z11MX_LCD_Initv>
    GPIO::init();
 801f788:	f001 ff5e 	bl	8021648 <_ZN8touchgfx4GPIO4initEv>

//Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 801f78c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 801f790:	f243 02d2 	movw	r2, #12498	; 0x30d2
 801f794:	601a      	str	r2, [r3, #0]
}
 801f796:	bf00      	nop
 801f798:	bd80      	pop	{r7, pc}
	...

0801f79c <_ZN8touchgfx22STM32F7InstrumentationC1Ev>:
#include <stdint.h>
#include <main.h>
    
namespace touchgfx
{
class STM32F7Instrumentation: public MCUInstrumentation
 801f79c:	b580      	push	{r7, lr}
 801f79e:	b082      	sub	sp, #8
 801f7a0:	af00      	add	r7, sp, #0
 801f7a2:	6078      	str	r0, [r7, #4]
 801f7a4:	687b      	ldr	r3, [r7, #4]
 801f7a6:	4618      	mov	r0, r3
 801f7a8:	f7ff fcd0 	bl	801f14c <_ZN8touchgfx18MCUInstrumentationC1Ev>
 801f7ac:	4a03      	ldr	r2, [pc, #12]	; (801f7bc <_ZN8touchgfx22STM32F7InstrumentationC1Ev+0x20>)
 801f7ae:	687b      	ldr	r3, [r7, #4]
 801f7b0:	601a      	str	r2, [r3, #0]
 801f7b2:	687b      	ldr	r3, [r7, #4]
 801f7b4:	4618      	mov	r0, r3
 801f7b6:	3708      	adds	r7, #8
 801f7b8:	46bd      	mov	sp, r7
 801f7ba:	bd80      	pop	{r7, pc}
 801f7bc:	0802e43c 	.word	0x0802e43c

0801f7c0 <_ZN8touchgfx13touchgfx_initEv>:
static uint16_t bitdepth = 16;

namespace touchgfx
{
void touchgfx_init()
{
 801f7c0:	b590      	push	{r4, r7, lr}
 801f7c2:	b087      	sub	sp, #28
 801f7c4:	af04      	add	r7, sp, #16
  uint16_t dispWidth = 480;
 801f7c6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801f7ca:	80fb      	strh	r3, [r7, #6]
  uint16_t dispHeight = 272;  
 801f7cc:	f44f 7388 	mov.w	r3, #272	; 0x110
 801f7d0:	80bb      	strh	r3, [r7, #4]
  
    HAL& hal = touchgfx_generic_init<STM32F7HAL>(dma, display, tc, dispWidth, dispHeight,(uint16_t*) 0, 
                                               0, 0);
 801f7d2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801f7d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801f7da:	2200      	movs	r2, #0
 801f7dc:	9203      	str	r2, [sp, #12]
 801f7de:	2200      	movs	r2, #0
 801f7e0:	9202      	str	r2, [sp, #8]
 801f7e2:	2200      	movs	r2, #0
 801f7e4:	9201      	str	r2, [sp, #4]
 801f7e6:	9300      	str	r3, [sp, #0]
 801f7e8:	460b      	mov	r3, r1
 801f7ea:	4a19      	ldr	r2, [pc, #100]	; (801f850 <_ZN8touchgfx13touchgfx_initEv+0x90>)
 801f7ec:	4919      	ldr	r1, [pc, #100]	; (801f854 <_ZN8touchgfx13touchgfx_initEv+0x94>)
 801f7ee:	481a      	ldr	r0, [pc, #104]	; (801f858 <_ZN8touchgfx13touchgfx_initEv+0x98>)
 801f7f0:	f000 f8ea 	bl	801f9c8 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>
 801f7f4:	6038      	str	r0, [r7, #0]

    hal.setFrameBufferStartAddress((uint16_t*)frameBuf0, bitdepth ,true , true);
 801f7f6:	683b      	ldr	r3, [r7, #0]
 801f7f8:	681b      	ldr	r3, [r3, #0]
 801f7fa:	337c      	adds	r3, #124	; 0x7c
 801f7fc:	681c      	ldr	r4, [r3, #0]
 801f7fe:	4b17      	ldr	r3, [pc, #92]	; (801f85c <_ZN8touchgfx13touchgfx_initEv+0x9c>)
 801f800:	681b      	ldr	r3, [r3, #0]
 801f802:	4619      	mov	r1, r3
 801f804:	4b16      	ldr	r3, [pc, #88]	; (801f860 <_ZN8touchgfx13touchgfx_initEv+0xa0>)
 801f806:	881a      	ldrh	r2, [r3, #0]
 801f808:	2301      	movs	r3, #1
 801f80a:	9300      	str	r3, [sp, #0]
 801f80c:	2301      	movs	r3, #1
 801f80e:	6838      	ldr	r0, [r7, #0]
 801f810:	47a0      	blx	r4

    hal.setTouchSampleRate(2);
 801f812:	2102      	movs	r1, #2
 801f814:	6838      	ldr	r0, [r7, #0]
 801f816:	f7ff fdef 	bl	801f3f8 <_ZN8touchgfx3HAL18setTouchSampleRateEa>
    hal.setFingerSize(1);
 801f81a:	2101      	movs	r1, #1
 801f81c:	6838      	ldr	r0, [r7, #0]
 801f81e:	f7ff fe1d 	bl	801f45c <_ZN8touchgfx3HAL13setFingerSizeEh>

    // By default frame rate compensation is off.
    // Enable frame rate compensation to smooth out animations in case there is periodic slow frame rates.
    hal.setFrameRateCompensation(false);
 801f822:	2100      	movs	r1, #0
 801f824:	6838      	ldr	r0, [r7, #0]
 801f826:	f7ff fdd7 	bl	801f3d8 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>

    // This platform can handle simultaneous DMA and TFT accesses to SDRAM, so disable lock to increase performance.
    hal.lockDMAToFrontPorch(false);
 801f82a:	2100      	movs	r1, #0
 801f82c:	6838      	ldr	r0, [r7, #0]
 801f82e:	f7ff fdc3 	bl	801f3b8 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>

    mcuInstr.init();
 801f832:	480c      	ldr	r0, [pc, #48]	; (801f864 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 801f834:	f001 fd6a 	bl	802130c <_ZN8touchgfx22STM32F7Instrumentation4initEv>

    //Set MCU instrumentation and Load calculation
    hal.setMCUInstrumentation(&mcuInstr);
 801f838:	490a      	ldr	r1, [pc, #40]	; (801f864 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 801f83a:	6838      	ldr	r0, [r7, #0]
 801f83c:	f7ff fdf0 	bl	801f420 <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>
    hal.enableMCULoadCalculation(true);
 801f840:	2101      	movs	r1, #1
 801f842:	6838      	ldr	r0, [r7, #0]
 801f844:	f7ff fdfa 	bl	801f43c <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>
}
 801f848:	bf00      	nop
 801f84a:	370c      	adds	r7, #12
 801f84c:	46bd      	mov	sp, r7
 801f84e:	bd90      	pop	{r4, r7, pc}
 801f850:	2000cd60 	.word	0x2000cd60
 801f854:	20000068 	.word	0x20000068
 801f858:	2000c140 	.word	0x2000c140
 801f85c:	20000064 	.word	0x20000064
 801f860:	2000006c 	.word	0x2000006c
 801f864:	2000cd64 	.word	0x2000cd64

0801f868 <_Z13GRAPHICS_Initv>:
}

void GRAPHICS_Init()
{
 801f868:	b580      	push	{r7, lr}
 801f86a:	af00      	add	r7, sp, #0
   touchgfx::touchgfx_init();
 801f86c:	f7ff ffa8 	bl	801f7c0 <_ZN8touchgfx13touchgfx_initEv>
}
 801f870:	bf00      	nop
 801f872:	bd80      	pop	{r7, pc}

0801f874 <_Z17GRAPHICS_MainTaskv>:

void GRAPHICS_MainTask(void)
{
 801f874:	b580      	push	{r7, lr}
 801f876:	af00      	add	r7, sp, #0
    touchgfx::HAL::getInstance()->taskEntry();
 801f878:	f7f2 fd9c 	bl	80123b4 <_ZN8touchgfx3HAL11getInstanceEv>
 801f87c:	4602      	mov	r2, r0
 801f87e:	6813      	ldr	r3, [r2, #0]
 801f880:	330c      	adds	r3, #12
 801f882:	681b      	ldr	r3, [r3, #0]
 801f884:	4610      	mov	r0, r2
 801f886:	4798      	blx	r3
}
 801f888:	bf00      	nop
 801f88a:	bd80      	pop	{r7, pc}

0801f88c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16actitudPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 801f88c:	b580      	push	{r7, lr}
 801f88e:	b082      	sub	sp, #8
 801f890:	af00      	add	r7, sp, #0
 801f892:	6078      	str	r0, [r7, #4]
 801f894:	687b      	ldr	r3, [r7, #4]
 801f896:	4618      	mov	r0, r3
 801f898:	f002 fa7c 	bl	8021d94 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801f89c:	4a03      	ldr	r2, [pc, #12]	; (801f8ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16actitudPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801f89e:	687b      	ldr	r3, [r7, #4]
 801f8a0:	601a      	str	r2, [r3, #0]
    {
    }
 801f8a2:	687b      	ldr	r3, [r7, #4]
 801f8a4:	4618      	mov	r0, r3
 801f8a6:	3708      	adds	r7, #8
 801f8a8:	46bd      	mov	sp, r7
 801f8aa:	bd80      	pop	{r7, pc}
 801f8ac:	0802e198 	.word	0x0802e198

0801f8b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16actitudPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 801f8b0:	b580      	push	{r7, lr}
 801f8b2:	b082      	sub	sp, #8
 801f8b4:	af00      	add	r7, sp, #0
 801f8b6:	6078      	str	r0, [r7, #4]
    {
    }
 801f8b8:	4a05      	ldr	r2, [pc, #20]	; (801f8d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16actitudPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801f8ba:	687b      	ldr	r3, [r7, #4]
 801f8bc:	601a      	str	r2, [r3, #0]
 801f8be:	687b      	ldr	r3, [r7, #4]
 801f8c0:	4618      	mov	r0, r3
 801f8c2:	f002 fa65 	bl	8021d90 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801f8c6:	687b      	ldr	r3, [r7, #4]
 801f8c8:	4618      	mov	r0, r3
 801f8ca:	3708      	adds	r7, #8
 801f8cc:	46bd      	mov	sp, r7
 801f8ce:	bd80      	pop	{r7, pc}
 801f8d0:	0802e198 	.word	0x0802e198

0801f8d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16actitudPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801f8d4:	b580      	push	{r7, lr}
 801f8d6:	b082      	sub	sp, #8
 801f8d8:	af00      	add	r7, sp, #0
 801f8da:	6078      	str	r0, [r7, #4]
    }
 801f8dc:	6878      	ldr	r0, [r7, #4]
 801f8de:	f7ff ffe7 	bl	801f8b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16actitudPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801f8e2:	2118      	movs	r1, #24
 801f8e4:	6878      	ldr	r0, [r7, #4]
 801f8e6:	f00a fe1c 	bl	802a522 <_ZdlPvj>
 801f8ea:	687b      	ldr	r3, [r7, #4]
 801f8ec:	4618      	mov	r0, r3
 801f8ee:	3708      	adds	r7, #8
 801f8f0:	46bd      	mov	sp, r7
 801f8f2:	bd80      	pop	{r7, pc}

0801f8f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14anemometroViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 801f8f4:	b580      	push	{r7, lr}
 801f8f6:	b082      	sub	sp, #8
 801f8f8:	af00      	add	r7, sp, #0
 801f8fa:	6078      	str	r0, [r7, #4]
 801f8fc:	687b      	ldr	r3, [r7, #4]
 801f8fe:	4618      	mov	r0, r3
 801f900:	f002 fa48 	bl	8021d94 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801f904:	4a03      	ldr	r2, [pc, #12]	; (801f914 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14anemometroViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801f906:	687b      	ldr	r3, [r7, #4]
 801f908:	601a      	str	r2, [r3, #0]
    }
 801f90a:	687b      	ldr	r3, [r7, #4]
 801f90c:	4618      	mov	r0, r3
 801f90e:	3708      	adds	r7, #8
 801f910:	46bd      	mov	sp, r7
 801f912:	bd80      	pop	{r7, pc}
 801f914:	0802e164 	.word	0x0802e164

0801f918 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14anemometroViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 801f918:	b580      	push	{r7, lr}
 801f91a:	b082      	sub	sp, #8
 801f91c:	af00      	add	r7, sp, #0
 801f91e:	6078      	str	r0, [r7, #4]
    }
 801f920:	4a05      	ldr	r2, [pc, #20]	; (801f938 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14anemometroViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801f922:	687b      	ldr	r3, [r7, #4]
 801f924:	601a      	str	r2, [r3, #0]
 801f926:	687b      	ldr	r3, [r7, #4]
 801f928:	4618      	mov	r0, r3
 801f92a:	f002 fa31 	bl	8021d90 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801f92e:	687b      	ldr	r3, [r7, #4]
 801f930:	4618      	mov	r0, r3
 801f932:	3708      	adds	r7, #8
 801f934:	46bd      	mov	sp, r7
 801f936:	bd80      	pop	{r7, pc}
 801f938:	0802e164 	.word	0x0802e164

0801f93c <_ZN8touchgfx9PartitionINS_4meta8TypeListI14anemometroViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801f93c:	b580      	push	{r7, lr}
 801f93e:	b082      	sub	sp, #8
 801f940:	af00      	add	r7, sp, #0
 801f942:	6078      	str	r0, [r7, #4]
    }
 801f944:	6878      	ldr	r0, [r7, #4]
 801f946:	f7ff ffe7 	bl	801f918 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14anemometroViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801f94a:	f44f 5146 	mov.w	r1, #12672	; 0x3180
 801f94e:	6878      	ldr	r0, [r7, #4]
 801f950:	f00a fde7 	bl	802a522 <_ZdlPvj>
 801f954:	687b      	ldr	r3, [r7, #4]
 801f956:	4618      	mov	r0, r3
 801f958:	3708      	adds	r7, #8
 801f95a:	46bd      	mov	sp, r7
 801f95c:	bd80      	pop	{r7, pc}
	...

0801f960 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 801f960:	b580      	push	{r7, lr}
 801f962:	b082      	sub	sp, #8
 801f964:	af00      	add	r7, sp, #0
 801f966:	6078      	str	r0, [r7, #4]
 801f968:	687b      	ldr	r3, [r7, #4]
 801f96a:	4618      	mov	r0, r3
 801f96c:	f002 fa12 	bl	8021d94 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801f970:	4a03      	ldr	r2, [pc, #12]	; (801f980 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 801f972:	687b      	ldr	r3, [r7, #4]
 801f974:	601a      	str	r2, [r3, #0]
    }
 801f976:	687b      	ldr	r3, [r7, #4]
 801f978:	4618      	mov	r0, r3
 801f97a:	3708      	adds	r7, #8
 801f97c:	46bd      	mov	sp, r7
 801f97e:	bd80      	pop	{r7, pc}
 801f980:	0802e130 	.word	0x0802e130

0801f984 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
    virtual ~Partition()
 801f984:	b580      	push	{r7, lr}
 801f986:	b082      	sub	sp, #8
 801f988:	af00      	add	r7, sp, #0
 801f98a:	6078      	str	r0, [r7, #4]
    }
 801f98c:	4a05      	ldr	r2, [pc, #20]	; (801f9a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 801f98e:	687b      	ldr	r3, [r7, #4]
 801f990:	601a      	str	r2, [r3, #0]
 801f992:	687b      	ldr	r3, [r7, #4]
 801f994:	4618      	mov	r0, r3
 801f996:	f002 f9fb 	bl	8021d90 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801f99a:	687b      	ldr	r3, [r7, #4]
 801f99c:	4618      	mov	r0, r3
 801f99e:	3708      	adds	r7, #8
 801f9a0:	46bd      	mov	sp, r7
 801f9a2:	bd80      	pop	{r7, pc}
 801f9a4:	0802e130 	.word	0x0802e130

0801f9a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
    virtual ~Partition()
 801f9a8:	b580      	push	{r7, lr}
 801f9aa:	b082      	sub	sp, #8
 801f9ac:	af00      	add	r7, sp, #0
 801f9ae:	6078      	str	r0, [r7, #4]
    }
 801f9b0:	6878      	ldr	r0, [r7, #4]
 801f9b2:	f7ff ffe7 	bl	801f984 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 801f9b6:	215c      	movs	r1, #92	; 0x5c
 801f9b8:	6878      	ldr	r0, [r7, #4]
 801f9ba:	f00a fdb2 	bl	802a522 <_ZdlPvj>
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	4618      	mov	r0, r3
 801f9c2:	3708      	adds	r7, #8
 801f9c4:	46bd      	mov	sp, r7
 801f9c6:	bd80      	pop	{r7, pc}

0801f9c8 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>:
 * @param numberOfDynamicBitmaps Number of dynamic bitmaps.
 *
 * @return A reference to the allocated (and initialized) HAL object.
 */
template <class HALType>
HAL& touchgfx_generic_init(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height,
 801f9c8:	b590      	push	{r4, r7, lr}
 801f9ca:	b089      	sub	sp, #36	; 0x24
 801f9cc:	af02      	add	r7, sp, #8
 801f9ce:	60f8      	str	r0, [r7, #12]
 801f9d0:	60b9      	str	r1, [r7, #8]
 801f9d2:	607a      	str	r2, [r7, #4]
 801f9d4:	807b      	strh	r3, [r7, #2]
                           uint16_t* bitmapCache, uint32_t bitmapCacheSize, uint32_t numberOfDynamicBitmaps = 0)
{
    HAL& hal = getHAL<HALType>(dma, display, tc, width, height);
 801f9d6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801f9da:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801f9de:	9300      	str	r3, [sp, #0]
 801f9e0:	4613      	mov	r3, r2
 801f9e2:	687a      	ldr	r2, [r7, #4]
 801f9e4:	68b9      	ldr	r1, [r7, #8]
 801f9e6:	68f8      	ldr	r0, [r7, #12]
 801f9e8:	f000 f85c 	bl	801faa4 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>
 801f9ec:	6178      	str	r0, [r7, #20]
    hal.initialize();
 801f9ee:	6978      	ldr	r0, [r7, #20]
 801f9f0:	f002 fcde 	bl	80223b0 <_ZN8touchgfx3HAL10initializeEv>

    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(),
 801f9f4:	f7fe fda4 	bl	801e540 <_ZN14BitmapDatabase11getInstanceEv>
 801f9f8:	4604      	mov	r4, r0
 801f9fa:	f7fe fdab 	bl	801e554 <_ZN14BitmapDatabase15getInstanceSizeEv>
 801f9fe:	4603      	mov	r3, r0
 801fa00:	4619      	mov	r1, r3
 801fa02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fa04:	9300      	str	r3, [sp, #0]
 801fa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fa08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fa0a:	4620      	mov	r0, r4
 801fa0c:	f007 f834 	bl	8026a78 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
                                   BitmapDatabase::getInstanceSize(),
                                   bitmapCache,
                                   bitmapCacheSize,
                                   numberOfDynamicBitmaps);

    TypedText::registerTexts(&texts);
 801fa10:	480d      	ldr	r0, [pc, #52]	; (801fa48 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x80>)
 801fa12:	f7ff fd33 	bl	801f47c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 801fa16:	2000      	movs	r0, #0
 801fa18:	f7fe fdc0 	bl	801e59c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801fa1c:	480b      	ldr	r0, [pc, #44]	; (801fa4c <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x84>)
 801fa1e:	f006 ff79 	bl	8026914 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 801fa22:	f7ff fdab 	bl	801f57c <_ZN12FrontendHeap11getInstanceEv>
 801fa26:	6138      	str	r0, [r7, #16]
    (void)heap; // we need to obtain the reference above to initialize the frontend heap.

    hal.registerEventListener(*(Application::getInstance()));
 801fa28:	697b      	ldr	r3, [r7, #20]
 801fa2a:	681b      	ldr	r3, [r3, #0]
 801fa2c:	3358      	adds	r3, #88	; 0x58
 801fa2e:	681c      	ldr	r4, [r3, #0]
 801fa30:	f004 fdca 	bl	80245c8 <_ZN8touchgfx11Application11getInstanceEv>
 801fa34:	4603      	mov	r3, r0
 801fa36:	4619      	mov	r1, r3
 801fa38:	6978      	ldr	r0, [r7, #20]
 801fa3a:	47a0      	blx	r4

    return hal;
 801fa3c:	697b      	ldr	r3, [r7, #20]
}
 801fa3e:	4618      	mov	r0, r3
 801fa40:	371c      	adds	r7, #28
 801fa42:	46bd      	mov	sp, r7
 801fa44:	bd90      	pop	{r4, r7, pc}
 801fa46:	bf00      	nop
 801fa48:	2000c13c 	.word	0x2000c13c
 801fa4c:	20000060 	.word	0x20000060

0801fa50 <_ZN10STM32F7HALD1Ev>:
class STM32F7HAL : public touchgfx::HAL
 801fa50:	b580      	push	{r7, lr}
 801fa52:	b082      	sub	sp, #8
 801fa54:	af00      	add	r7, sp, #0
 801fa56:	6078      	str	r0, [r7, #4]
 801fa58:	4a05      	ldr	r2, [pc, #20]	; (801fa70 <_ZN10STM32F7HALD1Ev+0x20>)
 801fa5a:	687b      	ldr	r3, [r7, #4]
 801fa5c:	601a      	str	r2, [r3, #0]
 801fa5e:	687b      	ldr	r3, [r7, #4]
 801fa60:	4618      	mov	r0, r3
 801fa62:	f7ff fc89 	bl	801f378 <_ZN8touchgfx3HALD1Ev>
 801fa66:	687b      	ldr	r3, [r7, #4]
 801fa68:	4618      	mov	r0, r3
 801fa6a:	3708      	adds	r7, #8
 801fa6c:	46bd      	mov	sp, r7
 801fa6e:	bd80      	pop	{r7, pc}
 801fa70:	0802e2d8 	.word	0x0802e2d8

0801fa74 <_ZN10STM32F7HALD0Ev>:
 801fa74:	b580      	push	{r7, lr}
 801fa76:	b082      	sub	sp, #8
 801fa78:	af00      	add	r7, sp, #0
 801fa7a:	6078      	str	r0, [r7, #4]
 801fa7c:	6878      	ldr	r0, [r7, #4]
 801fa7e:	f7ff ffe7 	bl	801fa50 <_ZN10STM32F7HALD1Ev>
 801fa82:	2178      	movs	r1, #120	; 0x78
 801fa84:	6878      	ldr	r0, [r7, #4]
 801fa86:	f00a fd4c 	bl	802a522 <_ZdlPvj>
 801fa8a:	687b      	ldr	r3, [r7, #4]
 801fa8c:	4618      	mov	r0, r3
 801fa8e:	3708      	adds	r7, #8
 801fa90:	46bd      	mov	sp, r7
 801fa92:	bd80      	pop	{r7, pc}

0801fa94 <__tcf_1>:
    static T hal(dma, display, tc, width, height);
 801fa94:	b580      	push	{r7, lr}
 801fa96:	af00      	add	r7, sp, #0
 801fa98:	4801      	ldr	r0, [pc, #4]	; (801faa0 <__tcf_1+0xc>)
 801fa9a:	f7ff ffd9 	bl	801fa50 <_ZN10STM32F7HALD1Ev>
 801fa9e:	bd80      	pop	{r7, pc}
 801faa0:	2000cd74 	.word	0x2000cd74

0801faa4 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>:
HAL& getHAL(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height)
 801faa4:	b580      	push	{r7, lr}
 801faa6:	b086      	sub	sp, #24
 801faa8:	af02      	add	r7, sp, #8
 801faaa:	60f8      	str	r0, [r7, #12]
 801faac:	60b9      	str	r1, [r7, #8]
 801faae:	607a      	str	r2, [r7, #4]
 801fab0:	807b      	strh	r3, [r7, #2]
    static T hal(dma, display, tc, width, height);
 801fab2:	4b0d      	ldr	r3, [pc, #52]	; (801fae8 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 801fab4:	681b      	ldr	r3, [r3, #0]
 801fab6:	f003 0301 	and.w	r3, r3, #1
 801faba:	2b00      	cmp	r3, #0
 801fabc:	d10f      	bne.n	801fade <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x3a>
 801fabe:	887b      	ldrh	r3, [r7, #2]
 801fac0:	8b3a      	ldrh	r2, [r7, #24]
 801fac2:	9201      	str	r2, [sp, #4]
 801fac4:	9300      	str	r3, [sp, #0]
 801fac6:	687b      	ldr	r3, [r7, #4]
 801fac8:	68ba      	ldr	r2, [r7, #8]
 801faca:	68f9      	ldr	r1, [r7, #12]
 801facc:	4807      	ldr	r0, [pc, #28]	; (801faec <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
 801face:	f7ff fe03 	bl	801f6d8 <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801fad2:	4b05      	ldr	r3, [pc, #20]	; (801fae8 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 801fad4:	2201      	movs	r2, #1
 801fad6:	601a      	str	r2, [r3, #0]
 801fad8:	4805      	ldr	r0, [pc, #20]	; (801faf0 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x4c>)
 801fada:	f00b fb2b 	bl	802b134 <atexit>
    return hal;
 801fade:	4b03      	ldr	r3, [pc, #12]	; (801faec <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
}
 801fae0:	4618      	mov	r0, r3
 801fae2:	3710      	adds	r7, #16
 801fae4:	46bd      	mov	sp, r7
 801fae6:	bd80      	pop	{r7, pc}
 801fae8:	2000cdec 	.word	0x2000cdec
 801faec:	2000cd74 	.word	0x2000cd74
 801faf0:	0801fa95 	.word	0x0801fa95

0801faf4 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 801faf4:	b580      	push	{r7, lr}
 801faf6:	b082      	sub	sp, #8
 801faf8:	af00      	add	r7, sp, #0
 801fafa:	6078      	str	r0, [r7, #4]
 801fafc:	4a11      	ldr	r2, [pc, #68]	; (801fb44 <_ZN12FrontendHeapD1Ev+0x50>)
 801fafe:	687b      	ldr	r3, [r7, #4]
 801fb00:	601a      	str	r2, [r3, #0]
 801fb02:	687a      	ldr	r2, [r7, #4]
 801fb04:	f243 2308 	movw	r3, #12808	; 0x3208
 801fb08:	4413      	add	r3, r2
 801fb0a:	4618      	mov	r0, r3
 801fb0c:	f7ff f8d4 	bl	801ecb8 <_ZN19FrontendApplicationD1Ev>
 801fb10:	687a      	ldr	r2, [r7, #4]
 801fb12:	f243 13ac 	movw	r3, #12716	; 0x31ac
 801fb16:	4413      	add	r3, r2
 801fb18:	4618      	mov	r0, r3
 801fb1a:	f7ff ff33 	bl	801f984 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 801fb1e:	687b      	ldr	r3, [r7, #4]
 801fb20:	332c      	adds	r3, #44	; 0x2c
 801fb22:	4618      	mov	r0, r3
 801fb24:	f7ff fef8 	bl	801f918 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14anemometroViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801fb28:	687b      	ldr	r3, [r7, #4]
 801fb2a:	3314      	adds	r3, #20
 801fb2c:	4618      	mov	r0, r3
 801fb2e:	f7ff febf 	bl	801f8b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16actitudPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801fb32:	687b      	ldr	r3, [r7, #4]
 801fb34:	4618      	mov	r0, r3
 801fb36:	f7ff fd3b 	bl	801f5b0 <_ZN16FrontendHeapBaseD1Ev>
 801fb3a:	687b      	ldr	r3, [r7, #4]
 801fb3c:	4618      	mov	r0, r3
 801fb3e:	3708      	adds	r7, #8
 801fb40:	46bd      	mov	sp, r7
 801fb42:	bd80      	pop	{r7, pc}
 801fb44:	0802e11c 	.word	0x0802e11c

0801fb48 <_ZN12FrontendHeapD0Ev>:
 801fb48:	b580      	push	{r7, lr}
 801fb4a:	b082      	sub	sp, #8
 801fb4c:	af00      	add	r7, sp, #0
 801fb4e:	6078      	str	r0, [r7, #4]
 801fb50:	6878      	ldr	r0, [r7, #4]
 801fb52:	f7ff ffcf 	bl	801faf4 <_ZN12FrontendHeapD1Ev>
 801fb56:	f243 316c 	movw	r1, #13164	; 0x336c
 801fb5a:	6878      	ldr	r0, [r7, #4]
 801fb5c:	f00a fce1 	bl	802a522 <_ZdlPvj>
 801fb60:	687b      	ldr	r3, [r7, #4]
 801fb62:	4618      	mov	r0, r3
 801fb64:	3708      	adds	r7, #8
 801fb66:	46bd      	mov	sp, r7
 801fb68:	bd80      	pop	{r7, pc}
	...

0801fb6c <_ZN8touchgfx22STM32F7InstrumentationD1Ev>:
 801fb6c:	b580      	push	{r7, lr}
 801fb6e:	b082      	sub	sp, #8
 801fb70:	af00      	add	r7, sp, #0
 801fb72:	6078      	str	r0, [r7, #4]
 801fb74:	4a05      	ldr	r2, [pc, #20]	; (801fb8c <_ZN8touchgfx22STM32F7InstrumentationD1Ev+0x20>)
 801fb76:	687b      	ldr	r3, [r7, #4]
 801fb78:	601a      	str	r2, [r3, #0]
 801fb7a:	687b      	ldr	r3, [r7, #4]
 801fb7c:	4618      	mov	r0, r3
 801fb7e:	f7ff fafb 	bl	801f178 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 801fb82:	687b      	ldr	r3, [r7, #4]
 801fb84:	4618      	mov	r0, r3
 801fb86:	3708      	adds	r7, #8
 801fb88:	46bd      	mov	sp, r7
 801fb8a:	bd80      	pop	{r7, pc}
 801fb8c:	0802e43c 	.word	0x0802e43c

0801fb90 <_ZN8touchgfx22STM32F7InstrumentationD0Ev>:
 801fb90:	b580      	push	{r7, lr}
 801fb92:	b082      	sub	sp, #8
 801fb94:	af00      	add	r7, sp, #0
 801fb96:	6078      	str	r0, [r7, #4]
 801fb98:	6878      	ldr	r0, [r7, #4]
 801fb9a:	f7ff ffe7 	bl	801fb6c <_ZN8touchgfx22STM32F7InstrumentationD1Ev>
 801fb9e:	2110      	movs	r1, #16
 801fba0:	6878      	ldr	r0, [r7, #4]
 801fba2:	f00a fcbe 	bl	802a522 <_ZdlPvj>
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	4618      	mov	r0, r3
 801fbaa:	3708      	adds	r7, #8
 801fbac:	46bd      	mov	sp, r7
 801fbae:	bd80      	pop	{r7, pc}

0801fbb0 <_ZN8touchgfx22STM32F7TouchControllerD1Ev>:
class STM32F7TouchController: public TouchController
 801fbb0:	b580      	push	{r7, lr}
 801fbb2:	b082      	sub	sp, #8
 801fbb4:	af00      	add	r7, sp, #0
 801fbb6:	6078      	str	r0, [r7, #4]
 801fbb8:	4a05      	ldr	r2, [pc, #20]	; (801fbd0 <_ZN8touchgfx22STM32F7TouchControllerD1Ev+0x20>)
 801fbba:	687b      	ldr	r3, [r7, #4]
 801fbbc:	601a      	str	r2, [r3, #0]
 801fbbe:	687b      	ldr	r3, [r7, #4]
 801fbc0:	4618      	mov	r0, r3
 801fbc2:	f7f2 f9bf 	bl	8011f44 <_ZN8touchgfx15TouchControllerD1Ev>
 801fbc6:	687b      	ldr	r3, [r7, #4]
 801fbc8:	4618      	mov	r0, r3
 801fbca:	3708      	adds	r7, #8
 801fbcc:	46bd      	mov	sp, r7
 801fbce:	bd80      	pop	{r7, pc}
 801fbd0:	0802e464 	.word	0x0802e464

0801fbd4 <_ZN8touchgfx22STM32F7TouchControllerD0Ev>:
 801fbd4:	b580      	push	{r7, lr}
 801fbd6:	b082      	sub	sp, #8
 801fbd8:	af00      	add	r7, sp, #0
 801fbda:	6078      	str	r0, [r7, #4]
 801fbdc:	6878      	ldr	r0, [r7, #4]
 801fbde:	f7ff ffe7 	bl	801fbb0 <_ZN8touchgfx22STM32F7TouchControllerD1Ev>
 801fbe2:	2104      	movs	r1, #4
 801fbe4:	6878      	ldr	r0, [r7, #4]
 801fbe6:	f00a fc9c 	bl	802a522 <_ZdlPvj>
 801fbea:	687b      	ldr	r3, [r7, #4]
 801fbec:	4618      	mov	r0, r3
 801fbee:	3708      	adds	r7, #8
 801fbf0:	46bd      	mov	sp, r7
 801fbf2:	bd80      	pop	{r7, pc}

0801fbf4 <_Z41__static_initialization_and_destruction_0ii>:
 801fbf4:	b580      	push	{r7, lr}
 801fbf6:	b082      	sub	sp, #8
 801fbf8:	af00      	add	r7, sp, #0
 801fbfa:	6078      	str	r0, [r7, #4]
 801fbfc:	6039      	str	r1, [r7, #0]
 801fbfe:	687b      	ldr	r3, [r7, #4]
 801fc00:	2b01      	cmp	r3, #1
 801fc02:	d10d      	bne.n	801fc20 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 801fc04:	683b      	ldr	r3, [r7, #0]
 801fc06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fc0a:	4293      	cmp	r3, r2
 801fc0c:	d108      	bne.n	801fc20 <_Z41__static_initialization_and_destruction_0ii+0x2c>
STM32F7DMA dma;
 801fc0e:	4812      	ldr	r0, [pc, #72]	; (801fc58 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 801fc10:	f000 fd4c 	bl	80206ac <_ZN10STM32F7DMAC1Ev>
STM32F7TouchController tc;
 801fc14:	4811      	ldr	r0, [pc, #68]	; (801fc5c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801fc16:	f7ff fd8b 	bl	801f730 <_ZN8touchgfx22STM32F7TouchControllerC1Ev>
STM32F7Instrumentation mcuInstr;
 801fc1a:	4811      	ldr	r0, [pc, #68]	; (801fc60 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801fc1c:	f7ff fdbe 	bl	801f79c <_ZN8touchgfx22STM32F7InstrumentationC1Ev>
static LCD16bpp display;
 801fc20:	687b      	ldr	r3, [r7, #4]
 801fc22:	2b00      	cmp	r3, #0
 801fc24:	d113      	bne.n	801fc4e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 801fc26:	683b      	ldr	r3, [r7, #0]
 801fc28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fc2c:	4293      	cmp	r3, r2
 801fc2e:	d10e      	bne.n	801fc4e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 801fc30:	480c      	ldr	r0, [pc, #48]	; (801fc64 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 801fc32:	f7ff fd2f 	bl	801f694 <_ZN8touchgfx8LCD16bppD1Ev>
STM32F7Instrumentation mcuInstr;
 801fc36:	480a      	ldr	r0, [pc, #40]	; (801fc60 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801fc38:	f7ff ff98 	bl	801fb6c <_ZN8touchgfx22STM32F7InstrumentationD1Ev>
STM32F7TouchController tc;
 801fc3c:	4807      	ldr	r0, [pc, #28]	; (801fc5c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801fc3e:	f7ff ffb7 	bl	801fbb0 <_ZN8touchgfx22STM32F7TouchControllerD1Ev>
STM32F7DMA dma;
 801fc42:	4805      	ldr	r0, [pc, #20]	; (801fc58 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 801fc44:	f000 fd5c 	bl	8020700 <_ZN10STM32F7DMAD1Ev>
static ApplicationFontProvider fontProvider;
 801fc48:	4807      	ldr	r0, [pc, #28]	; (801fc68 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 801fc4a:	f7fb faed 	bl	801b228 <_ZN23ApplicationFontProviderD1Ev>
}
 801fc4e:	bf00      	nop
 801fc50:	3708      	adds	r7, #8
 801fc52:	46bd      	mov	sp, r7
 801fc54:	bd80      	pop	{r7, pc}
 801fc56:	bf00      	nop
 801fc58:	2000c140 	.word	0x2000c140
 801fc5c:	2000cd60 	.word	0x2000cd60
 801fc60:	2000cd64 	.word	0x2000cd64
 801fc64:	20000068 	.word	0x20000068
 801fc68:	20000060 	.word	0x20000060

0801fc6c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 801fc6c:	b480      	push	{r7}
 801fc6e:	b083      	sub	sp, #12
 801fc70:	af00      	add	r7, sp, #0
 801fc72:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 801fc74:	2301      	movs	r3, #1
    }
 801fc76:	4618      	mov	r0, r3
 801fc78:	370c      	adds	r7, #12
 801fc7a:	46bd      	mov	sp, r7
 801fc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc80:	4770      	bx	lr

0801fc82 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 801fc82:	b480      	push	{r7}
 801fc84:	b083      	sub	sp, #12
 801fc86:	af00      	add	r7, sp, #0
 801fc88:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801fc8a:	2354      	movs	r3, #84	; 0x54
    }
 801fc8c:	4618      	mov	r0, r3
 801fc8e:	370c      	adds	r7, #12
 801fc90:	46bd      	mov	sp, r7
 801fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc96:	4770      	bx	lr

0801fc98 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 801fc98:	b480      	push	{r7}
 801fc9a:	b083      	sub	sp, #12
 801fc9c:	af00      	add	r7, sp, #0
 801fc9e:	6078      	str	r0, [r7, #4]
 801fca0:	460b      	mov	r3, r1
 801fca2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801fca4:	887b      	ldrh	r3, [r7, #2]
 801fca6:	2254      	movs	r2, #84	; 0x54
 801fca8:	fb02 f303 	mul.w	r3, r2, r3
 801fcac:	3308      	adds	r3, #8
 801fcae:	687a      	ldr	r2, [r7, #4]
 801fcb0:	4413      	add	r3, r2
    }
 801fcb2:	4618      	mov	r0, r3
 801fcb4:	370c      	adds	r7, #12
 801fcb6:	46bd      	mov	sp, r7
 801fcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcbc:	4770      	bx	lr

0801fcbe <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 801fcbe:	b480      	push	{r7}
 801fcc0:	b083      	sub	sp, #12
 801fcc2:	af00      	add	r7, sp, #0
 801fcc4:	6078      	str	r0, [r7, #4]
 801fcc6:	460b      	mov	r3, r1
 801fcc8:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801fcca:	887b      	ldrh	r3, [r7, #2]
 801fccc:	2254      	movs	r2, #84	; 0x54
 801fcce:	fb02 f303 	mul.w	r3, r2, r3
 801fcd2:	3308      	adds	r3, #8
 801fcd4:	687a      	ldr	r2, [r7, #4]
 801fcd6:	4413      	add	r3, r2
    }
 801fcd8:	4618      	mov	r0, r3
 801fcda:	370c      	adds	r7, #12
 801fcdc:	46bd      	mov	sp, r7
 801fcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fce2:	4770      	bx	lr

0801fce4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14anemometroViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801fce4:	b480      	push	{r7}
 801fce6:	b083      	sub	sp, #12
 801fce8:	af00      	add	r7, sp, #0
 801fcea:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801fcec:	2301      	movs	r3, #1
    }
 801fcee:	4618      	mov	r0, r3
 801fcf0:	370c      	adds	r7, #12
 801fcf2:	46bd      	mov	sp, r7
 801fcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcf8:	4770      	bx	lr

0801fcfa <_ZN8touchgfx9PartitionINS_4meta8TypeListI14anemometroViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801fcfa:	b480      	push	{r7}
 801fcfc:	b083      	sub	sp, #12
 801fcfe:	af00      	add	r7, sp, #0
 801fd00:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801fd02:	f243 1378 	movw	r3, #12664	; 0x3178
    }
 801fd06:	4618      	mov	r0, r3
 801fd08:	370c      	adds	r7, #12
 801fd0a:	46bd      	mov	sp, r7
 801fd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd10:	4770      	bx	lr

0801fd12 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14anemometroViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801fd12:	b480      	push	{r7}
 801fd14:	b083      	sub	sp, #12
 801fd16:	af00      	add	r7, sp, #0
 801fd18:	6078      	str	r0, [r7, #4]
 801fd1a:	460b      	mov	r3, r1
 801fd1c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801fd1e:	887b      	ldrh	r3, [r7, #2]
 801fd20:	f243 1278 	movw	r2, #12664	; 0x3178
 801fd24:	fb02 f303 	mul.w	r3, r2, r3
 801fd28:	3308      	adds	r3, #8
 801fd2a:	687a      	ldr	r2, [r7, #4]
 801fd2c:	4413      	add	r3, r2
    }
 801fd2e:	4618      	mov	r0, r3
 801fd30:	370c      	adds	r7, #12
 801fd32:	46bd      	mov	sp, r7
 801fd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd38:	4770      	bx	lr

0801fd3a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14anemometroViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801fd3a:	b480      	push	{r7}
 801fd3c:	b083      	sub	sp, #12
 801fd3e:	af00      	add	r7, sp, #0
 801fd40:	6078      	str	r0, [r7, #4]
 801fd42:	460b      	mov	r3, r1
 801fd44:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801fd46:	887b      	ldrh	r3, [r7, #2]
 801fd48:	f243 1278 	movw	r2, #12664	; 0x3178
 801fd4c:	fb02 f303 	mul.w	r3, r2, r3
 801fd50:	3308      	adds	r3, #8
 801fd52:	687a      	ldr	r2, [r7, #4]
 801fd54:	4413      	add	r3, r2
    }
 801fd56:	4618      	mov	r0, r3
 801fd58:	370c      	adds	r7, #12
 801fd5a:	46bd      	mov	sp, r7
 801fd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd60:	4770      	bx	lr

0801fd62 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16actitudPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801fd62:	b480      	push	{r7}
 801fd64:	b083      	sub	sp, #12
 801fd66:	af00      	add	r7, sp, #0
 801fd68:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801fd6a:	2301      	movs	r3, #1
    }
 801fd6c:	4618      	mov	r0, r3
 801fd6e:	370c      	adds	r7, #12
 801fd70:	46bd      	mov	sp, r7
 801fd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd76:	4770      	bx	lr

0801fd78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16actitudPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801fd78:	b480      	push	{r7}
 801fd7a:	b083      	sub	sp, #12
 801fd7c:	af00      	add	r7, sp, #0
 801fd7e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801fd80:	2310      	movs	r3, #16
    }
 801fd82:	4618      	mov	r0, r3
 801fd84:	370c      	adds	r7, #12
 801fd86:	46bd      	mov	sp, r7
 801fd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd8c:	4770      	bx	lr

0801fd8e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16actitudPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801fd8e:	b480      	push	{r7}
 801fd90:	b083      	sub	sp, #12
 801fd92:	af00      	add	r7, sp, #0
 801fd94:	6078      	str	r0, [r7, #4]
 801fd96:	460b      	mov	r3, r1
 801fd98:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801fd9a:	887b      	ldrh	r3, [r7, #2]
 801fd9c:	011b      	lsls	r3, r3, #4
 801fd9e:	3308      	adds	r3, #8
 801fda0:	687a      	ldr	r2, [r7, #4]
 801fda2:	4413      	add	r3, r2
    }
 801fda4:	4618      	mov	r0, r3
 801fda6:	370c      	adds	r7, #12
 801fda8:	46bd      	mov	sp, r7
 801fdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdae:	4770      	bx	lr

0801fdb0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16actitudPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801fdb0:	b480      	push	{r7}
 801fdb2:	b083      	sub	sp, #12
 801fdb4:	af00      	add	r7, sp, #0
 801fdb6:	6078      	str	r0, [r7, #4]
 801fdb8:	460b      	mov	r3, r1
 801fdba:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801fdbc:	887b      	ldrh	r3, [r7, #2]
 801fdbe:	011b      	lsls	r3, r3, #4
 801fdc0:	3308      	adds	r3, #8
 801fdc2:	687a      	ldr	r2, [r7, #4]
 801fdc4:	4413      	add	r3, r2
    }
 801fdc6:	4618      	mov	r0, r3
 801fdc8:	370c      	adds	r7, #12
 801fdca:	46bd      	mov	sp, r7
 801fdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdd0:	4770      	bx	lr

0801fdd2 <_GLOBAL__sub_I_LCD_GetXSize>:
 801fdd2:	b580      	push	{r7, lr}
 801fdd4:	af00      	add	r7, sp, #0
 801fdd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801fdda:	2001      	movs	r0, #1
 801fddc:	f7ff ff0a 	bl	801fbf4 <_Z41__static_initialization_and_destruction_0ii>
 801fde0:	bd80      	pop	{r7, pc}

0801fde2 <_GLOBAL__sub_D_LCD_GetXSize>:
 801fde2:	b580      	push	{r7, lr}
 801fde4:	af00      	add	r7, sp, #0
 801fde6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801fdea:	2000      	movs	r0, #0
 801fdec:	f7ff ff02 	bl	801fbf4 <_Z41__static_initialization_and_destruction_0ii>
 801fdf0:	bd80      	pop	{r7, pc}
	...

0801fdf4 <_Z11MX_LCD_Initv>:
  * @param  LayerIndex : layer Index.
  * @retval None
  */

void MX_LCD_Init(void) 
{ 
 801fdf4:	b580      	push	{r7, lr}
 801fdf6:	b08e      	sub	sp, #56	; 0x38
 801fdf8:	af00      	add	r7, sp, #0
 LTDC_LayerCfgTypeDef pLayerCfg;

/* De-Initialize LTDC */
  HAL_LTDC_DeInit(&hltdc);
 801fdfa:	4844      	ldr	r0, [pc, #272]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fdfc:	f7e7 feda 	bl	8007bb4 <HAL_LTDC_DeInit>
/* Configure LTDC */

  hltdc.Instance = LTDC;
 801fe00:	4b42      	ldr	r3, [pc, #264]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fe02:	4a43      	ldr	r2, [pc, #268]	; (801ff10 <_Z11MX_LCD_Initv+0x11c>)
 801fe04:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 801fe06:	4b41      	ldr	r3, [pc, #260]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fe08:	2200      	movs	r2, #0
 801fe0a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 801fe0c:	4b3f      	ldr	r3, [pc, #252]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fe0e:	2200      	movs	r2, #0
 801fe10:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 801fe12:	4b3e      	ldr	r3, [pc, #248]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fe14:	2200      	movs	r2, #0
 801fe16:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 801fe18:	4b3c      	ldr	r3, [pc, #240]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fe1a:	2200      	movs	r2, #0
 801fe1c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 801fe1e:	4b3b      	ldr	r3, [pc, #236]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fe20:	2228      	movs	r2, #40	; 0x28
 801fe22:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 801fe24:	4b39      	ldr	r3, [pc, #228]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fe26:	2209      	movs	r2, #9
 801fe28:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 801fe2a:	4b38      	ldr	r3, [pc, #224]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fe2c:	2235      	movs	r2, #53	; 0x35
 801fe2e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 801fe30:	4b36      	ldr	r3, [pc, #216]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fe32:	220b      	movs	r2, #11
 801fe34:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 801fe36:	4b35      	ldr	r3, [pc, #212]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fe38:	f240 2215 	movw	r2, #533	; 0x215
 801fe3c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 801fe3e:	4b33      	ldr	r3, [pc, #204]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fe40:	f240 121b 	movw	r2, #283	; 0x11b
 801fe44:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 801fe46:	4b31      	ldr	r3, [pc, #196]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fe48:	f240 2235 	movw	r2, #565	; 0x235
 801fe4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 801fe4e:	4b2f      	ldr	r3, [pc, #188]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fe50:	f240 121d 	movw	r2, #285	; 0x11d
 801fe54:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 801fe56:	4b2d      	ldr	r3, [pc, #180]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fe58:	2200      	movs	r2, #0
 801fe5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 801fe5e:	4b2b      	ldr	r3, [pc, #172]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fe60:	2200      	movs	r2, #0
 801fe62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 801fe66:	4b29      	ldr	r3, [pc, #164]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fe68:	2200      	movs	r2, #0
 801fe6a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801fe6e:	4827      	ldr	r0, [pc, #156]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fe70:	f7e7 fdd0 	bl	8007a14 <HAL_LTDC_Init>
 801fe74:	4603      	mov	r3, r0
 801fe76:	2b00      	cmp	r3, #0
 801fe78:	bf14      	ite	ne
 801fe7a:	2301      	movne	r3, #1
 801fe7c:	2300      	moveq	r3, #0
 801fe7e:	b2db      	uxtb	r3, r3
 801fe80:	2b00      	cmp	r3, #0
 801fe82:	d001      	beq.n	801fe88 <_Z11MX_LCD_Initv+0x94>
  {
    Error_Handler( );
 801fe84:	f7e1 fd7c 	bl	8001980 <Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 801fe88:	2300      	movs	r3, #0
 801fe8a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 801fe8c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801fe90:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 801fe92:	2300      	movs	r3, #0
 801fe94:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 801fe96:	f44f 7388 	mov.w	r3, #272	; 0x110
 801fe9a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 801fe9c:	2302      	movs	r3, #2
 801fe9e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 801fea0:	23ff      	movs	r3, #255	; 0xff
 801fea2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 801fea4:	2300      	movs	r3, #0
 801fea6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 801fea8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801feac:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801feae:	2307      	movs	r3, #7
 801feb0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 801feb2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 801feb6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 801feb8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801febc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 801febe:	f44f 7388 	mov.w	r3, #272	; 0x110
 801fec2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 801fec4:	2300      	movs	r3, #0
 801fec6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 801feca:	2300      	movs	r3, #0
 801fecc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 801fed0:	2300      	movs	r3, #0
 801fed2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801fed6:	1d3b      	adds	r3, r7, #4
 801fed8:	2200      	movs	r2, #0
 801feda:	4619      	mov	r1, r3
 801fedc:	480b      	ldr	r0, [pc, #44]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fede:	f7e7 ff39 	bl	8007d54 <HAL_LTDC_ConfigLayer>
 801fee2:	4603      	mov	r3, r0
 801fee4:	2b00      	cmp	r3, #0
 801fee6:	bf14      	ite	ne
 801fee8:	2301      	movne	r3, #1
 801feea:	2300      	moveq	r3, #0
 801feec:	b2db      	uxtb	r3, r3
 801feee:	2b00      	cmp	r3, #0
 801fef0:	d001      	beq.n	801fef6 <_Z11MX_LCD_Initv+0x102>
  {
    Error_Handler( );
 801fef2:	f7e1 fd45 	bl	8001980 <Error_Handler>
  }

 HAL_LTDC_SetPitch(&hltdc, 480, 0);
 801fef6:	2200      	movs	r2, #0
 801fef8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 801fefc:	4803      	ldr	r0, [pc, #12]	; (801ff0c <_Z11MX_LCD_Initv+0x118>)
 801fefe:	f7e7 ff67 	bl	8007dd0 <HAL_LTDC_SetPitch>

}
 801ff02:	bf00      	nop
 801ff04:	3738      	adds	r7, #56	; 0x38
 801ff06:	46bd      	mov	sp, r7
 801ff08:	bd80      	pop	{r7, pc}
 801ff0a:	bf00      	nop
 801ff0c:	2000cdf0 	.word	0x2000cdf0
 801ff10:	40016800 	.word	0x40016800

0801ff14 <_Z11MX_FMC_Initv>:

/**
  * @brief  Initializes LCD IO.
  */ 
void MX_FMC_Init(void) 
{  
 801ff14:	b580      	push	{r7, lr}
 801ff16:	b088      	sub	sp, #32
 801ff18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 801ff1a:	1d3b      	adds	r3, r7, #4
 801ff1c:	2200      	movs	r2, #0
 801ff1e:	601a      	str	r2, [r3, #0]
 801ff20:	605a      	str	r2, [r3, #4]
 801ff22:	609a      	str	r2, [r3, #8]
 801ff24:	60da      	str	r2, [r3, #12]
 801ff26:	611a      	str	r2, [r3, #16]
 801ff28:	615a      	str	r2, [r3, #20]
 801ff2a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 801ff2c:	4b22      	ldr	r3, [pc, #136]	; (801ffb8 <_Z11MX_FMC_Initv+0xa4>)
 801ff2e:	4a23      	ldr	r2, [pc, #140]	; (801ffbc <_Z11MX_FMC_Initv+0xa8>)
 801ff30:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 801ff32:	4b21      	ldr	r3, [pc, #132]	; (801ffb8 <_Z11MX_FMC_Initv+0xa4>)
 801ff34:	2200      	movs	r2, #0
 801ff36:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 801ff38:	4b1f      	ldr	r3, [pc, #124]	; (801ffb8 <_Z11MX_FMC_Initv+0xa4>)
 801ff3a:	2200      	movs	r2, #0
 801ff3c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 801ff3e:	4b1e      	ldr	r3, [pc, #120]	; (801ffb8 <_Z11MX_FMC_Initv+0xa4>)
 801ff40:	2204      	movs	r2, #4
 801ff42:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 801ff44:	4b1c      	ldr	r3, [pc, #112]	; (801ffb8 <_Z11MX_FMC_Initv+0xa4>)
 801ff46:	2210      	movs	r2, #16
 801ff48:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 801ff4a:	4b1b      	ldr	r3, [pc, #108]	; (801ffb8 <_Z11MX_FMC_Initv+0xa4>)
 801ff4c:	2240      	movs	r2, #64	; 0x40
 801ff4e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 801ff50:	4b19      	ldr	r3, [pc, #100]	; (801ffb8 <_Z11MX_FMC_Initv+0xa4>)
 801ff52:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801ff56:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 801ff58:	4b17      	ldr	r3, [pc, #92]	; (801ffb8 <_Z11MX_FMC_Initv+0xa4>)
 801ff5a:	2200      	movs	r2, #0
 801ff5c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 801ff5e:	4b16      	ldr	r3, [pc, #88]	; (801ffb8 <_Z11MX_FMC_Initv+0xa4>)
 801ff60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ff64:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 801ff66:	4b14      	ldr	r3, [pc, #80]	; (801ffb8 <_Z11MX_FMC_Initv+0xa4>)
 801ff68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ff6c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 801ff6e:	4b12      	ldr	r3, [pc, #72]	; (801ffb8 <_Z11MX_FMC_Initv+0xa4>)
 801ff70:	2200      	movs	r2, #0
 801ff72:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 801ff74:	2302      	movs	r3, #2
 801ff76:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 801ff78:	2307      	movs	r3, #7
 801ff7a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 801ff7c:	2304      	movs	r3, #4
 801ff7e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 801ff80:	2307      	movs	r3, #7
 801ff82:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 801ff84:	2303      	movs	r3, #3
 801ff86:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 801ff88:	2302      	movs	r3, #2
 801ff8a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 801ff8c:	2302      	movs	r3, #2
 801ff8e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 801ff90:	1d3b      	adds	r3, r7, #4
 801ff92:	4619      	mov	r1, r3
 801ff94:	4808      	ldr	r0, [pc, #32]	; (801ffb8 <_Z11MX_FMC_Initv+0xa4>)
 801ff96:	f7eb feeb 	bl	800bd70 <HAL_SDRAM_Init>
 801ff9a:	4603      	mov	r3, r0
 801ff9c:	2b00      	cmp	r3, #0
 801ff9e:	bf14      	ite	ne
 801ffa0:	2301      	movne	r3, #1
 801ffa2:	2300      	moveq	r3, #0
 801ffa4:	b2db      	uxtb	r3, r3
 801ffa6:	2b00      	cmp	r3, #0
 801ffa8:	d001      	beq.n	801ffae <_Z11MX_FMC_Initv+0x9a>
  {
    Error_Handler( );
 801ffaa:	f7e1 fce9 	bl	8001980 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 801ffae:	bf00      	nop
 801ffb0:	3720      	adds	r7, #32
 801ffb2:	46bd      	mov	sp, r7
 801ffb4:	bd80      	pop	{r7, pc}
 801ffb6:	bf00      	nop
 801ffb8:	2000ced8 	.word	0x2000ced8
 801ffbc:	a0000140 	.word	0xa0000140

0801ffc0 <_Z15MX_SDRAM_InitExv>:
/**
  * @brief  Programs the SDRAM device.
  * @retval None
  */
void MX_SDRAM_InitEx(void)
{
 801ffc0:	b580      	push	{r7, lr}
 801ffc2:	b082      	sub	sp, #8
 801ffc4:	af00      	add	r7, sp, #0
  __IO uint32_t tmpmrd = 0;
 801ffc6:	2300      	movs	r3, #0
 801ffc8:	607b      	str	r3, [r7, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 801ffca:	4b2b      	ldr	r3, [pc, #172]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 801ffcc:	2201      	movs	r2, #1
 801ffce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 801ffd0:	4b29      	ldr	r3, [pc, #164]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 801ffd2:	2210      	movs	r2, #16
 801ffd4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 801ffd6:	4b28      	ldr	r3, [pc, #160]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 801ffd8:	2201      	movs	r2, #1
 801ffda:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 801ffdc:	4b26      	ldr	r3, [pc, #152]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 801ffde:	2200      	movs	r2, #0
 801ffe0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801ffe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ffe6:	4924      	ldr	r1, [pc, #144]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 801ffe8:	4824      	ldr	r0, [pc, #144]	; (802007c <_Z15MX_SDRAM_InitExv+0xbc>)
 801ffea:	f7eb fef5 	bl	800bdd8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 801ffee:	2001      	movs	r0, #1
 801fff0:	f7e3 fdfa 	bl	8003be8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 801fff4:	4b20      	ldr	r3, [pc, #128]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 801fff6:	2202      	movs	r2, #2
 801fff8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 801fffa:	4b1f      	ldr	r3, [pc, #124]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 801fffc:	2210      	movs	r2, #16
 801fffe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8020000:	4b1d      	ldr	r3, [pc, #116]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 8020002:	2201      	movs	r2, #1
 8020004:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8020006:	4b1c      	ldr	r3, [pc, #112]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 8020008:	2200      	movs	r2, #0
 802000a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 802000c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020010:	4919      	ldr	r1, [pc, #100]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 8020012:	481a      	ldr	r0, [pc, #104]	; (802007c <_Z15MX_SDRAM_InitExv+0xbc>)
 8020014:	f7eb fee0 	bl	800bdd8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8020018:	4b17      	ldr	r3, [pc, #92]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 802001a:	2203      	movs	r2, #3
 802001c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 802001e:	4b16      	ldr	r3, [pc, #88]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 8020020:	2210      	movs	r2, #16
 8020022:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8020024:	4b14      	ldr	r3, [pc, #80]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 8020026:	2208      	movs	r2, #8
 8020028:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 802002a:	4b13      	ldr	r3, [pc, #76]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 802002c:	2200      	movs	r2, #0
 802002e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8020030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020034:	4910      	ldr	r1, [pc, #64]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 8020036:	4811      	ldr	r0, [pc, #68]	; (802007c <_Z15MX_SDRAM_InitExv+0xbc>)
 8020038:	f7eb fece 	bl	800bdd8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 802003c:	f44f 730c 	mov.w	r3, #560	; 0x230
 8020040:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8020042:	4b0d      	ldr	r3, [pc, #52]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 8020044:	2204      	movs	r2, #4
 8020046:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8020048:	4b0b      	ldr	r3, [pc, #44]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 802004a:	2210      	movs	r2, #16
 802004c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 802004e:	4b0a      	ldr	r3, [pc, #40]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 8020050:	2201      	movs	r2, #1
 8020052:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8020054:	687b      	ldr	r3, [r7, #4]
 8020056:	4a08      	ldr	r2, [pc, #32]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 8020058:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 802005a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802005e:	4906      	ldr	r1, [pc, #24]	; (8020078 <_Z15MX_SDRAM_InitExv+0xb8>)
 8020060:	4806      	ldr	r0, [pc, #24]	; (802007c <_Z15MX_SDRAM_InitExv+0xbc>)
 8020062:	f7eb feb9 	bl	800bdd8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 8020066:	f44f 61cf 	mov.w	r1, #1656	; 0x678
 802006a:	4804      	ldr	r0, [pc, #16]	; (802007c <_Z15MX_SDRAM_InitExv+0xbc>)
 802006c:	f7eb fedf 	bl	800be2e <HAL_SDRAM_ProgramRefreshRate>
}
 8020070:	bf00      	nop
 8020072:	3708      	adds	r7, #8
 8020074:	46bd      	mov	sp, r7
 8020076:	bd80      	pop	{r7, pc}
 8020078:	2000cf0c 	.word	0x2000cf0c
 802007c:	2000ced8 	.word	0x2000ced8

08020080 <HAL_LTDC_MspInit>:
}

/*  MSPInit/deInit Implementation */

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8020080:	b580      	push	{r7, lr}
 8020082:	b08e      	sub	sp, #56	; 0x38
 8020084:	af00      	add	r7, sp, #0
 8020086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802008c:	2200      	movs	r2, #0
 802008e:	601a      	str	r2, [r3, #0]
 8020090:	605a      	str	r2, [r3, #4]
 8020092:	609a      	str	r2, [r3, #8]
 8020094:	60da      	str	r2, [r3, #12]
 8020096:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8020098:	687b      	ldr	r3, [r7, #4]
 802009a:	681b      	ldr	r3, [r3, #0]
 802009c:	4a55      	ldr	r2, [pc, #340]	; (80201f4 <HAL_LTDC_MspInit+0x174>)
 802009e:	4293      	cmp	r3, r2
 80200a0:	f040 80a3 	bne.w	80201ea <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80200a4:	4b54      	ldr	r3, [pc, #336]	; (80201f8 <HAL_LTDC_MspInit+0x178>)
 80200a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80200a8:	4a53      	ldr	r2, [pc, #332]	; (80201f8 <HAL_LTDC_MspInit+0x178>)
 80200aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80200ae:	6453      	str	r3, [r2, #68]	; 0x44
 80200b0:	4b51      	ldr	r3, [pc, #324]	; (80201f8 <HAL_LTDC_MspInit+0x178>)
 80200b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80200b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80200b8:	623b      	str	r3, [r7, #32]
 80200ba:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80200bc:	4b4e      	ldr	r3, [pc, #312]	; (80201f8 <HAL_LTDC_MspInit+0x178>)
 80200be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80200c0:	4a4d      	ldr	r2, [pc, #308]	; (80201f8 <HAL_LTDC_MspInit+0x178>)
 80200c2:	f043 0310 	orr.w	r3, r3, #16
 80200c6:	6313      	str	r3, [r2, #48]	; 0x30
 80200c8:	4b4b      	ldr	r3, [pc, #300]	; (80201f8 <HAL_LTDC_MspInit+0x178>)
 80200ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80200cc:	f003 0310 	and.w	r3, r3, #16
 80200d0:	61fb      	str	r3, [r7, #28]
 80200d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80200d4:	4b48      	ldr	r3, [pc, #288]	; (80201f8 <HAL_LTDC_MspInit+0x178>)
 80200d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80200d8:	4a47      	ldr	r2, [pc, #284]	; (80201f8 <HAL_LTDC_MspInit+0x178>)
 80200da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80200de:	6313      	str	r3, [r2, #48]	; 0x30
 80200e0:	4b45      	ldr	r3, [pc, #276]	; (80201f8 <HAL_LTDC_MspInit+0x178>)
 80200e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80200e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80200e8:	61bb      	str	r3, [r7, #24]
 80200ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80200ec:	4b42      	ldr	r3, [pc, #264]	; (80201f8 <HAL_LTDC_MspInit+0x178>)
 80200ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80200f0:	4a41      	ldr	r2, [pc, #260]	; (80201f8 <HAL_LTDC_MspInit+0x178>)
 80200f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80200f6:	6313      	str	r3, [r2, #48]	; 0x30
 80200f8:	4b3f      	ldr	r3, [pc, #252]	; (80201f8 <HAL_LTDC_MspInit+0x178>)
 80200fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80200fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8020100:	617b      	str	r3, [r7, #20]
 8020102:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8020104:	4b3c      	ldr	r3, [pc, #240]	; (80201f8 <HAL_LTDC_MspInit+0x178>)
 8020106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020108:	4a3b      	ldr	r2, [pc, #236]	; (80201f8 <HAL_LTDC_MspInit+0x178>)
 802010a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802010e:	6313      	str	r3, [r2, #48]	; 0x30
 8020110:	4b39      	ldr	r3, [pc, #228]	; (80201f8 <HAL_LTDC_MspInit+0x178>)
 8020112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020118:	613b      	str	r3, [r7, #16]
 802011a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 802011c:	4b36      	ldr	r3, [pc, #216]	; (80201f8 <HAL_LTDC_MspInit+0x178>)
 802011e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020120:	4a35      	ldr	r2, [pc, #212]	; (80201f8 <HAL_LTDC_MspInit+0x178>)
 8020122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8020126:	6313      	str	r3, [r2, #48]	; 0x30
 8020128:	4b33      	ldr	r3, [pc, #204]	; (80201f8 <HAL_LTDC_MspInit+0x178>)
 802012a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802012c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020130:	60fb      	str	r3, [r7, #12]
 8020132:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8020134:	2310      	movs	r3, #16
 8020136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020138:	2302      	movs	r3, #2
 802013a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802013c:	2300      	movs	r3, #0
 802013e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020140:	2300      	movs	r3, #0
 8020142:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8020144:	230e      	movs	r3, #14
 8020146:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8020148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802014c:	4619      	mov	r1, r3
 802014e:	482b      	ldr	r0, [pc, #172]	; (80201fc <HAL_LTDC_MspInit+0x17c>)
 8020150:	f7e4 ff70 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8020154:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8020158:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802015a:	2302      	movs	r3, #2
 802015c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802015e:	2300      	movs	r3, #0
 8020160:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020162:	2300      	movs	r3, #0
 8020164:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8020166:	230e      	movs	r3, #14
 8020168:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 802016a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802016e:	4619      	mov	r1, r3
 8020170:	4823      	ldr	r0, [pc, #140]	; (8020200 <HAL_LTDC_MspInit+0x180>)
 8020172:	f7e4 ff5f 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8020176:	23f7      	movs	r3, #247	; 0xf7
 8020178:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802017a:	2302      	movs	r3, #2
 802017c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802017e:	2300      	movs	r3, #0
 8020180:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020182:	2300      	movs	r3, #0
 8020184:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8020186:	230e      	movs	r3, #14
 8020188:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 802018a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802018e:	4619      	mov	r1, r3
 8020190:	481c      	ldr	r0, [pc, #112]	; (8020204 <HAL_LTDC_MspInit+0x184>)
 8020192:	f7e4 ff4f 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8020196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802019a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802019c:	2302      	movs	r3, #2
 802019e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80201a0:	2300      	movs	r3, #0
 80201a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80201a4:	2300      	movs	r3, #0
 80201a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80201a8:	2309      	movs	r3, #9
 80201aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80201ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80201b0:	4619      	mov	r1, r3
 80201b2:	4815      	ldr	r0, [pc, #84]	; (8020208 <HAL_LTDC_MspInit+0x188>)
 80201b4:	f7e4 ff3e 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80201b8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80201bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80201be:	2302      	movs	r3, #2
 80201c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80201c2:	2300      	movs	r3, #0
 80201c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80201c6:	2300      	movs	r3, #0
 80201c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80201ca:	230e      	movs	r3, #14
 80201cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80201ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80201d2:	4619      	mov	r1, r3
 80201d4:	480d      	ldr	r0, [pc, #52]	; (802020c <HAL_LTDC_MspInit+0x18c>)
 80201d6:	f7e4 ff2d 	bl	8005034 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80201da:	2200      	movs	r2, #0
 80201dc:	2105      	movs	r1, #5
 80201de:	2058      	movs	r0, #88	; 0x58
 80201e0:	f7e4 f870 	bl	80042c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80201e4:	2058      	movs	r0, #88	; 0x58
 80201e6:	f7e4 f889 	bl	80042fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80201ea:	bf00      	nop
 80201ec:	3738      	adds	r7, #56	; 0x38
 80201ee:	46bd      	mov	sp, r7
 80201f0:	bd80      	pop	{r7, pc}
 80201f2:	bf00      	nop
 80201f4:	40016800 	.word	0x40016800
 80201f8:	40023800 	.word	0x40023800
 80201fc:	40021000 	.word	0x40021000
 8020200:	40022400 	.word	0x40022400
 8020204:	40022800 	.word	0x40022800
 8020208:	40021800 	.word	0x40021800
 802020c:	40022000 	.word	0x40022000

08020210 <HAL_LTDC_MspDeInit>:

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8020210:	b580      	push	{r7, lr}
 8020212:	b082      	sub	sp, #8
 8020214:	af00      	add	r7, sp, #0
 8020216:	6078      	str	r0, [r7, #4]
  if(ltdcHandle->Instance==LTDC)
 8020218:	687b      	ldr	r3, [r7, #4]
 802021a:	681b      	ldr	r3, [r3, #0]
 802021c:	4a13      	ldr	r2, [pc, #76]	; (802026c <HAL_LTDC_MspDeInit+0x5c>)
 802021e:	4293      	cmp	r3, r2
 8020220:	d11f      	bne.n	8020262 <HAL_LTDC_MspDeInit+0x52>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 8020222:	4b13      	ldr	r3, [pc, #76]	; (8020270 <HAL_LTDC_MspDeInit+0x60>)
 8020224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020226:	4a12      	ldr	r2, [pc, #72]	; (8020270 <HAL_LTDC_MspDeInit+0x60>)
 8020228:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 802022c:	6453      	str	r3, [r2, #68]	; 0x44
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 802022e:	2110      	movs	r1, #16
 8020230:	4810      	ldr	r0, [pc, #64]	; (8020274 <HAL_LTDC_MspDeInit+0x64>)
 8020232:	f7e5 f8a9 	bl	8005388 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOJ, LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8020236:	f64e 71ff 	movw	r1, #61439	; 0xefff
 802023a:	480f      	ldr	r0, [pc, #60]	; (8020278 <HAL_LTDC_MspDeInit+0x68>)
 802023c:	f7e5 f8a4 	bl	8005388 <HAL_GPIO_DeInit>
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin);

    HAL_GPIO_DeInit(GPIOK, LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8020240:	21f7      	movs	r1, #247	; 0xf7
 8020242:	480e      	ldr	r0, [pc, #56]	; (802027c <HAL_LTDC_MspDeInit+0x6c>)
 8020244:	f7e5 f8a0 	bl	8005388 <HAL_GPIO_DeInit>
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin);

    HAL_GPIO_DeInit(LCD_B4_GPIO_Port, LCD_B4_Pin);
 8020248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802024c:	480c      	ldr	r0, [pc, #48]	; (8020280 <HAL_LTDC_MspDeInit+0x70>)
 802024e:	f7e5 f89b 	bl	8005388 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOI, LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin);
 8020252:	f44f 4146 	mov.w	r1, #50688	; 0xc600
 8020256:	480b      	ldr	r0, [pc, #44]	; (8020284 <HAL_LTDC_MspDeInit+0x74>)
 8020258:	f7e5 f896 	bl	8005388 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 802025c:	2058      	movs	r0, #88	; 0x58
 802025e:	f7e4 f85b 	bl	8004318 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }
}
 8020262:	bf00      	nop
 8020264:	3708      	adds	r7, #8
 8020266:	46bd      	mov	sp, r7
 8020268:	bd80      	pop	{r7, pc}
 802026a:	bf00      	nop
 802026c:	40016800 	.word	0x40016800
 8020270:	40023800 	.word	0x40023800
 8020274:	40021000 	.word	0x40021000
 8020278:	40022400 	.word	0x40022400
 802027c:	40022800 	.word	0x40022800
 8020280:	40021800 	.word	0x40021800
 8020284:	40022000 	.word	0x40022000

08020288 <_ZL15HAL_FMC_MspInitv>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8020288:	b580      	push	{r7, lr}
 802028a:	b086      	sub	sp, #24
 802028c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 802028e:	1d3b      	adds	r3, r7, #4
 8020290:	2200      	movs	r2, #0
 8020292:	601a      	str	r2, [r3, #0]
 8020294:	605a      	str	r2, [r3, #4]
 8020296:	609a      	str	r2, [r3, #8]
 8020298:	60da      	str	r2, [r3, #12]
 802029a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 802029c:	4b3a      	ldr	r3, [pc, #232]	; (8020388 <_ZL15HAL_FMC_MspInitv+0x100>)
 802029e:	681b      	ldr	r3, [r3, #0]
 80202a0:	2b00      	cmp	r3, #0
 80202a2:	d16d      	bne.n	8020380 <_ZL15HAL_FMC_MspInitv+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80202a4:	4b38      	ldr	r3, [pc, #224]	; (8020388 <_ZL15HAL_FMC_MspInitv+0x100>)
 80202a6:	2201      	movs	r2, #1
 80202a8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80202aa:	4b38      	ldr	r3, [pc, #224]	; (802038c <_ZL15HAL_FMC_MspInitv+0x104>)
 80202ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80202ae:	4a37      	ldr	r2, [pc, #220]	; (802038c <_ZL15HAL_FMC_MspInitv+0x104>)
 80202b0:	f043 0301 	orr.w	r3, r3, #1
 80202b4:	6393      	str	r3, [r2, #56]	; 0x38
 80202b6:	4b35      	ldr	r3, [pc, #212]	; (802038c <_ZL15HAL_FMC_MspInitv+0x104>)
 80202b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80202ba:	f003 0301 	and.w	r3, r3, #1
 80202be:	603b      	str	r3, [r7, #0]
 80202c0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 80202c2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80202c6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80202c8:	2302      	movs	r3, #2
 80202ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80202cc:	2300      	movs	r3, #0
 80202ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80202d0:	2303      	movs	r3, #3
 80202d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80202d4:	230c      	movs	r3, #12
 80202d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80202d8:	1d3b      	adds	r3, r7, #4
 80202da:	4619      	mov	r1, r3
 80202dc:	482c      	ldr	r0, [pc, #176]	; (8020390 <_ZL15HAL_FMC_MspInitv+0x108>)
 80202de:	f7e4 fea9 	bl	8005034 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80202e2:	f248 1333 	movw	r3, #33075	; 0x8133
 80202e6:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80202e8:	2302      	movs	r3, #2
 80202ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80202ec:	2300      	movs	r3, #0
 80202ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80202f0:	2303      	movs	r3, #3
 80202f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80202f4:	230c      	movs	r3, #12
 80202f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80202f8:	1d3b      	adds	r3, r7, #4
 80202fa:	4619      	mov	r1, r3
 80202fc:	4825      	ldr	r0, [pc, #148]	; (8020394 <_ZL15HAL_FMC_MspInitv+0x10c>)
 80202fe:	f7e4 fe99 	bl	8005034 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8020302:	f24c 7303 	movw	r3, #50947	; 0xc703
 8020306:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020308:	2302      	movs	r3, #2
 802030a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802030c:	2300      	movs	r3, #0
 802030e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020310:	2303      	movs	r3, #3
 8020312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8020314:	230c      	movs	r3, #12
 8020316:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020318:	1d3b      	adds	r3, r7, #4
 802031a:	4619      	mov	r1, r3
 802031c:	481e      	ldr	r0, [pc, #120]	; (8020398 <_ZL15HAL_FMC_MspInitv+0x110>)
 802031e:	f7e4 fe89 	bl	8005034 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8020322:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8020326:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020328:	2302      	movs	r3, #2
 802032a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802032c:	2300      	movs	r3, #0
 802032e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020330:	2303      	movs	r3, #3
 8020332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8020334:	230c      	movs	r3, #12
 8020336:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8020338:	1d3b      	adds	r3, r7, #4
 802033a:	4619      	mov	r1, r3
 802033c:	4817      	ldr	r0, [pc, #92]	; (802039c <_ZL15HAL_FMC_MspInitv+0x114>)
 802033e:	f7e4 fe79 	bl	8005034 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8020342:	2328      	movs	r3, #40	; 0x28
 8020344:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020346:	2302      	movs	r3, #2
 8020348:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802034a:	2300      	movs	r3, #0
 802034c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802034e:	2303      	movs	r3, #3
 8020350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8020352:	230c      	movs	r3, #12
 8020354:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8020356:	1d3b      	adds	r3, r7, #4
 8020358:	4619      	mov	r1, r3
 802035a:	4811      	ldr	r0, [pc, #68]	; (80203a0 <_ZL15HAL_FMC_MspInitv+0x118>)
 802035c:	f7e4 fe6a 	bl	8005034 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8020360:	2308      	movs	r3, #8
 8020362:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020364:	2302      	movs	r3, #2
 8020366:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020368:	2300      	movs	r3, #0
 802036a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802036c:	2303      	movs	r3, #3
 802036e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8020370:	230c      	movs	r3, #12
 8020372:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8020374:	1d3b      	adds	r3, r7, #4
 8020376:	4619      	mov	r1, r3
 8020378:	480a      	ldr	r0, [pc, #40]	; (80203a4 <_ZL15HAL_FMC_MspInitv+0x11c>)
 802037a:	f7e4 fe5b 	bl	8005034 <HAL_GPIO_Init>
 802037e:	e000      	b.n	8020382 <_ZL15HAL_FMC_MspInitv+0xfa>
    return;
 8020380:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8020382:	3718      	adds	r7, #24
 8020384:	46bd      	mov	sp, r7
 8020386:	bd80      	pop	{r7, pc}
 8020388:	2000cf1c 	.word	0x2000cf1c
 802038c:	40023800 	.word	0x40023800
 8020390:	40021000 	.word	0x40021000
 8020394:	40021800 	.word	0x40021800
 8020398:	40020c00 	.word	0x40020c00
 802039c:	40021400 	.word	0x40021400
 80203a0:	40021c00 	.word	0x40021c00
 80203a4:	40020800 	.word	0x40020800

080203a8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80203a8:	b580      	push	{r7, lr}
 80203aa:	b082      	sub	sp, #8
 80203ac:	af00      	add	r7, sp, #0
 80203ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80203b0:	f7ff ff6a 	bl	8020288 <_ZL15HAL_FMC_MspInitv>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80203b4:	bf00      	nop
 80203b6:	3708      	adds	r7, #8
 80203b8:	46bd      	mov	sp, r7
 80203ba:	bd80      	pop	{r7, pc}

080203bc <HAL_DMA2D_MspInit>:

  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80203bc:	b580      	push	{r7, lr}
 80203be:	b084      	sub	sp, #16
 80203c0:	af00      	add	r7, sp, #0
 80203c2:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 80203c4:	687b      	ldr	r3, [r7, #4]
 80203c6:	681b      	ldr	r3, [r3, #0]
 80203c8:	4a0d      	ldr	r2, [pc, #52]	; (8020400 <HAL_DMA2D_MspInit+0x44>)
 80203ca:	4293      	cmp	r3, r2
 80203cc:	d113      	bne.n	80203f6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80203ce:	4b0d      	ldr	r3, [pc, #52]	; (8020404 <HAL_DMA2D_MspInit+0x48>)
 80203d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80203d2:	4a0c      	ldr	r2, [pc, #48]	; (8020404 <HAL_DMA2D_MspInit+0x48>)
 80203d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80203d8:	6313      	str	r3, [r2, #48]	; 0x30
 80203da:	4b0a      	ldr	r3, [pc, #40]	; (8020404 <HAL_DMA2D_MspInit+0x48>)
 80203dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80203de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80203e2:	60fb      	str	r3, [r7, #12]
 80203e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80203e6:	2200      	movs	r2, #0
 80203e8:	2105      	movs	r1, #5
 80203ea:	205a      	movs	r0, #90	; 0x5a
 80203ec:	f7e3 ff6a 	bl	80042c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80203f0:	205a      	movs	r0, #90	; 0x5a
 80203f2:	f7e3 ff83 	bl	80042fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80203f6:	bf00      	nop
 80203f8:	3710      	adds	r7, #16
 80203fa:	46bd      	mov	sp, r7
 80203fc:	bd80      	pop	{r7, pc}
 80203fe:	bf00      	nop
 8020400:	4002b000 	.word	0x4002b000
 8020404:	40023800 	.word	0x40023800

08020408 <HAL_DMA2D_MspDeInit>:

void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8020408:	b580      	push	{r7, lr}
 802040a:	b082      	sub	sp, #8
 802040c:	af00      	add	r7, sp, #0
 802040e:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 8020410:	687b      	ldr	r3, [r7, #4]
 8020412:	681b      	ldr	r3, [r3, #0]
 8020414:	4a07      	ldr	r2, [pc, #28]	; (8020434 <HAL_DMA2D_MspDeInit+0x2c>)
 8020416:	4293      	cmp	r3, r2
 8020418:	d108      	bne.n	802042c <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 802041a:	4b07      	ldr	r3, [pc, #28]	; (8020438 <HAL_DMA2D_MspDeInit+0x30>)
 802041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802041e:	4a06      	ldr	r2, [pc, #24]	; (8020438 <HAL_DMA2D_MspDeInit+0x30>)
 8020420:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8020424:	6313      	str	r3, [r2, #48]	; 0x30

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8020426:	205a      	movs	r0, #90	; 0x5a
 8020428:	f7e3 ff76 	bl	8004318 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }
}
 802042c:	bf00      	nop
 802042e:	3708      	adds	r7, #8
 8020430:	46bd      	mov	sp, r7
 8020432:	bd80      	pop	{r7, pc}
 8020434:	4002b000 	.word	0x4002b000
 8020438:	40023800 	.word	0x40023800

0802043c <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 802043c:	b480      	push	{r7}
 802043e:	b083      	sub	sp, #12
 8020440:	af00      	add	r7, sp, #0
 8020442:	6078      	str	r0, [r7, #4]
        return color;
 8020444:	687b      	ldr	r3, [r7, #4]
 8020446:	681b      	ldr	r3, [r3, #0]
    }
 8020448:	4618      	mov	r0, r3
 802044a:	370c      	adds	r7, #12
 802044c:	46bd      	mov	sp, r7
 802044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020452:	4770      	bx	lr

08020454 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8020454:	b480      	push	{r7}
 8020456:	b083      	sub	sp, #12
 8020458:	af00      	add	r7, sp, #0
 802045a:	6078      	str	r0, [r7, #4]
    {
 802045c:	4a04      	ldr	r2, [pc, #16]	; (8020470 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 802045e:	687b      	ldr	r3, [r7, #4]
 8020460:	601a      	str	r2, [r3, #0]
    }
 8020462:	687b      	ldr	r3, [r7, #4]
 8020464:	4618      	mov	r0, r3
 8020466:	370c      	adds	r7, #12
 8020468:	46bd      	mov	sp, r7
 802046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802046e:	4770      	bx	lr
 8020470:	0802e2b4 	.word	0x0802e2b4

08020474 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8020474:	b580      	push	{r7, lr}
 8020476:	b082      	sub	sp, #8
 8020478:	af00      	add	r7, sp, #0
 802047a:	6078      	str	r0, [r7, #4]
    }
 802047c:	6878      	ldr	r0, [r7, #4]
 802047e:	f7ff ffe9 	bl	8020454 <_ZN8touchgfx9DMA_QueueD1Ev>
 8020482:	2104      	movs	r1, #4
 8020484:	6878      	ldr	r0, [r7, #4]
 8020486:	f00a f84c 	bl	802a522 <_ZdlPvj>
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	4618      	mov	r0, r3
 802048e:	3708      	adds	r7, #8
 8020490:	46bd      	mov	sp, r7
 8020492:	bd80      	pop	{r7, pc}

08020494 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8020494:	b580      	push	{r7, lr}
 8020496:	b082      	sub	sp, #8
 8020498:	af00      	add	r7, sp, #0
 802049a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	681b      	ldr	r3, [r3, #0]
 80204a0:	3344      	adds	r3, #68	; 0x44
 80204a2:	681b      	ldr	r3, [r3, #0]
 80204a4:	6878      	ldr	r0, [r7, #4]
 80204a6:	4798      	blx	r3
    }
 80204a8:	bf00      	nop
 80204aa:	3708      	adds	r7, #8
 80204ac:	46bd      	mov	sp, r7
 80204ae:	bd80      	pop	{r7, pc}

080204b0 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 80204b0:	b480      	push	{r7}
 80204b2:	b083      	sub	sp, #12
 80204b4:	af00      	add	r7, sp, #0
 80204b6:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80204b8:	2300      	movs	r3, #0
    }
 80204ba:	4618      	mov	r0, r3
 80204bc:	370c      	adds	r7, #12
 80204be:	46bd      	mov	sp, r7
 80204c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204c4:	4770      	bx	lr
	...

080204c8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 80204c8:	b480      	push	{r7}
 80204ca:	b083      	sub	sp, #12
 80204cc:	af00      	add	r7, sp, #0
 80204ce:	6078      	str	r0, [r7, #4]
    {
 80204d0:	4a04      	ldr	r2, [pc, #16]	; (80204e4 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80204d2:	687b      	ldr	r3, [r7, #4]
 80204d4:	601a      	str	r2, [r3, #0]
    }
 80204d6:	687b      	ldr	r3, [r7, #4]
 80204d8:	4618      	mov	r0, r3
 80204da:	370c      	adds	r7, #12
 80204dc:	46bd      	mov	sp, r7
 80204de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204e2:	4770      	bx	lr
 80204e4:	0802ec9c 	.word	0x0802ec9c

080204e8 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80204e8:	b580      	push	{r7, lr}
 80204ea:	b082      	sub	sp, #8
 80204ec:	af00      	add	r7, sp, #0
 80204ee:	6078      	str	r0, [r7, #4]
    }
 80204f0:	6878      	ldr	r0, [r7, #4]
 80204f2:	f7ff ffe9 	bl	80204c8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80204f6:	210c      	movs	r1, #12
 80204f8:	6878      	ldr	r0, [r7, #4]
 80204fa:	f00a f812 	bl	802a522 <_ZdlPvj>
 80204fe:	687b      	ldr	r3, [r7, #4]
 8020500:	4618      	mov	r0, r3
 8020502:	3708      	adds	r7, #8
 8020504:	46bd      	mov	sp, r7
 8020506:	bd80      	pop	{r7, pc}

08020508 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8020508:	b480      	push	{r7}
 802050a:	b083      	sub	sp, #12
 802050c:	af00      	add	r7, sp, #0
 802050e:	6078      	str	r0, [r7, #4]
 8020510:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8020512:	4a09      	ldr	r2, [pc, #36]	; (8020538 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8020514:	687b      	ldr	r3, [r7, #4]
 8020516:	601a      	str	r2, [r3, #0]
 8020518:	687b      	ldr	r3, [r7, #4]
 802051a:	683a      	ldr	r2, [r7, #0]
 802051c:	605a      	str	r2, [r3, #4]
 802051e:	687b      	ldr	r3, [r7, #4]
 8020520:	2200      	movs	r2, #0
 8020522:	721a      	strb	r2, [r3, #8]
 8020524:	687b      	ldr	r3, [r7, #4]
 8020526:	2200      	movs	r2, #0
 8020528:	725a      	strb	r2, [r3, #9]
    {
    }
 802052a:	687b      	ldr	r3, [r7, #4]
 802052c:	4618      	mov	r0, r3
 802052e:	370c      	adds	r7, #12
 8020530:	46bd      	mov	sp, r7
 8020532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020536:	4770      	bx	lr
 8020538:	0802ec9c 	.word	0x0802ec9c

0802053c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 802053c:	b580      	push	{r7, lr}
 802053e:	b082      	sub	sp, #8
 8020540:	af00      	add	r7, sp, #0
 8020542:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8020544:	687b      	ldr	r3, [r7, #4]
 8020546:	685a      	ldr	r2, [r3, #4]
 8020548:	687b      	ldr	r3, [r7, #4]
 802054a:	685b      	ldr	r3, [r3, #4]
 802054c:	681b      	ldr	r3, [r3, #0]
 802054e:	3314      	adds	r3, #20
 8020550:	681b      	ldr	r3, [r3, #0]
 8020552:	4610      	mov	r0, r2
 8020554:	4798      	blx	r3
    }
 8020556:	bf00      	nop
 8020558:	3708      	adds	r7, #8
 802055a:	46bd      	mov	sp, r7
 802055c:	bd80      	pop	{r7, pc}

0802055e <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 802055e:	b580      	push	{r7, lr}
 8020560:	b082      	sub	sp, #8
 8020562:	af00      	add	r7, sp, #0
 8020564:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8020566:	687a      	ldr	r2, [r7, #4]
 8020568:	687b      	ldr	r3, [r7, #4]
 802056a:	681b      	ldr	r3, [r3, #0]
 802056c:	3328      	adds	r3, #40	; 0x28
 802056e:	681b      	ldr	r3, [r3, #0]
 8020570:	4610      	mov	r0, r2
 8020572:	4798      	blx	r3
    }
 8020574:	bf00      	nop
 8020576:	3708      	adds	r7, #8
 8020578:	46bd      	mov	sp, r7
 802057a:	bd80      	pop	{r7, pc}

0802057c <__NVIC_EnableIRQ>:
{
 802057c:	b480      	push	{r7}
 802057e:	b083      	sub	sp, #12
 8020580:	af00      	add	r7, sp, #0
 8020582:	4603      	mov	r3, r0
 8020584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802058a:	2b00      	cmp	r3, #0
 802058c:	db0d      	blt.n	80205aa <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802058e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020592:	b2db      	uxtb	r3, r3
 8020594:	f003 021f 	and.w	r2, r3, #31
 8020598:	4907      	ldr	r1, [pc, #28]	; (80205b8 <__NVIC_EnableIRQ+0x3c>)
 802059a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802059e:	095b      	lsrs	r3, r3, #5
 80205a0:	2001      	movs	r0, #1
 80205a2:	fa00 f202 	lsl.w	r2, r0, r2
 80205a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80205aa:	bf00      	nop
 80205ac:	370c      	adds	r7, #12
 80205ae:	46bd      	mov	sp, r7
 80205b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205b4:	4770      	bx	lr
 80205b6:	bf00      	nop
 80205b8:	e000e100 	.word	0xe000e100

080205bc <__NVIC_DisableIRQ>:
{
 80205bc:	b480      	push	{r7}
 80205be:	b083      	sub	sp, #12
 80205c0:	af00      	add	r7, sp, #0
 80205c2:	4603      	mov	r3, r0
 80205c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80205c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80205ca:	2b00      	cmp	r3, #0
 80205cc:	db12      	blt.n	80205f4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80205ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80205d2:	b2db      	uxtb	r3, r3
 80205d4:	f003 021f 	and.w	r2, r3, #31
 80205d8:	4909      	ldr	r1, [pc, #36]	; (8020600 <__NVIC_DisableIRQ+0x44>)
 80205da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80205de:	095b      	lsrs	r3, r3, #5
 80205e0:	2001      	movs	r0, #1
 80205e2:	fa00 f202 	lsl.w	r2, r0, r2
 80205e6:	3320      	adds	r3, #32
 80205e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80205ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80205f0:	f3bf 8f6f 	isb	sy
}
 80205f4:	bf00      	nop
 80205f6:	370c      	adds	r7, #12
 80205f8:	46bd      	mov	sp, r7
 80205fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205fe:	4770      	bx	lr
 8020600:	e000e100 	.word	0xe000e100

08020604 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8020604:	b480      	push	{r7}
 8020606:	b085      	sub	sp, #20
 8020608:	af00      	add	r7, sp, #0
 802060a:	60f8      	str	r0, [r7, #12]
 802060c:	60b9      	str	r1, [r7, #8]
 802060e:	607a      	str	r2, [r7, #4]
 8020610:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8020612:	68fb      	ldr	r3, [r7, #12]
 8020614:	681b      	ldr	r3, [r3, #0]
 8020616:	681b      	ldr	r3, [r3, #0]
 8020618:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 802061c:	68ba      	ldr	r2, [r7, #8]
 802061e:	68fb      	ldr	r3, [r7, #12]
 8020620:	681b      	ldr	r3, [r3, #0]
 8020622:	430a      	orrs	r2, r1
 8020624:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8020626:	68fb      	ldr	r3, [r7, #12]
 8020628:	681b      	ldr	r3, [r3, #0]
 802062a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802062c:	f023 0107 	bic.w	r1, r3, #7
 8020630:	687a      	ldr	r2, [r7, #4]
 8020632:	68fb      	ldr	r3, [r7, #12]
 8020634:	681b      	ldr	r3, [r3, #0]
 8020636:	430a      	orrs	r2, r1
 8020638:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 802063a:	68fb      	ldr	r3, [r7, #12]
 802063c:	681b      	ldr	r3, [r3, #0]
 802063e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8020640:	4b06      	ldr	r3, [pc, #24]	; (802065c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8020642:	4013      	ands	r3, r2
 8020644:	6839      	ldr	r1, [r7, #0]
 8020646:	68fa      	ldr	r2, [r7, #12]
 8020648:	6812      	ldr	r2, [r2, #0]
 802064a:	430b      	orrs	r3, r1
 802064c:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 802064e:	2300      	movs	r3, #0
}
 8020650:	4618      	mov	r0, r3
 8020652:	3714      	adds	r7, #20
 8020654:	46bd      	mov	sp, r7
 8020656:	f85d 7b04 	ldr.w	r7, [sp], #4
 802065a:	4770      	bx	lr
 802065c:	ffffc000 	.word	0xffffc000

08020660 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8020660:	b580      	push	{r7, lr}
 8020662:	b082      	sub	sp, #8
 8020664:	af00      	add	r7, sp, #0
 8020666:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8020668:	f7f1 fea4 	bl	80123b4 <_ZN8touchgfx3HAL11getInstanceEv>
 802066c:	4603      	mov	r3, r0
 802066e:	4618      	mov	r0, r3
 8020670:	f7ff ff64 	bl	802053c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8020674:	bf00      	nop
 8020676:	3708      	adds	r7, #8
 8020678:	46bd      	mov	sp, r7
 802067a:	bd80      	pop	{r7, pc}

0802067c <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 802067c:	b480      	push	{r7}
 802067e:	b083      	sub	sp, #12
 8020680:	af00      	add	r7, sp, #0
 8020682:	6078      	str	r0, [r7, #4]
    //assert(0);
}
 8020684:	bf00      	nop
 8020686:	370c      	adds	r7, #12
 8020688:	46bd      	mov	sp, r7
 802068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802068e:	4770      	bx	lr

08020690 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8020690:	b580      	push	{r7, lr}
 8020692:	b082      	sub	sp, #8
 8020694:	af00      	add	r7, sp, #0
 8020696:	6078      	str	r0, [r7, #4]
 8020698:	687b      	ldr	r3, [r7, #4]
 802069a:	3318      	adds	r3, #24
 802069c:	4618      	mov	r0, r3
 802069e:	f7f3 fba6 	bl	8013dee <_ZN8touchgfx9colortypeC1Ev>
 80206a2:	687b      	ldr	r3, [r7, #4]
 80206a4:	4618      	mov	r0, r3
 80206a6:	3708      	adds	r7, #8
 80206a8:	46bd      	mov	sp, r7
 80206aa:	bd80      	pop	{r7, pc}

080206ac <_ZN10STM32F7DMAC1Ev>:

}

STM32F7DMA::STM32F7DMA()
 80206ac:	b5b0      	push	{r4, r5, r7, lr}
 80206ae:	b082      	sub	sp, #8
 80206b0:	af00      	add	r7, sp, #0
 80206b2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80206b4:	687a      	ldr	r2, [r7, #4]
 80206b6:	687b      	ldr	r3, [r7, #4]
 80206b8:	330c      	adds	r3, #12
 80206ba:	4619      	mov	r1, r3
 80206bc:	4610      	mov	r0, r2
 80206be:	f7ff ff23 	bl	8020508 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80206c2:	4a0e      	ldr	r2, [pc, #56]	; (80206fc <_ZN10STM32F7DMAC1Ev+0x50>)
 80206c4:	687b      	ldr	r3, [r7, #4]
 80206c6:	601a      	str	r2, [r3, #0]
 80206c8:	687b      	ldr	r3, [r7, #4]
 80206ca:	f103 000c 	add.w	r0, r3, #12
 80206ce:	687b      	ldr	r3, [r7, #4]
 80206d0:	3320      	adds	r3, #32
 80206d2:	2260      	movs	r2, #96	; 0x60
 80206d4:	4619      	mov	r1, r3
 80206d6:	f002 fa31 	bl	8022b3c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80206da:	687b      	ldr	r3, [r7, #4]
 80206dc:	3320      	adds	r3, #32
 80206de:	245f      	movs	r4, #95	; 0x5f
 80206e0:	461d      	mov	r5, r3
 80206e2:	2c00      	cmp	r4, #0
 80206e4:	db05      	blt.n	80206f2 <_ZN10STM32F7DMAC1Ev+0x46>
 80206e6:	4628      	mov	r0, r5
 80206e8:	f7ff ffd2 	bl	8020690 <_ZN8touchgfx6BlitOpC1Ev>
 80206ec:	3520      	adds	r5, #32
 80206ee:	3c01      	subs	r4, #1
 80206f0:	e7f7      	b.n	80206e2 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 80206f2:	687b      	ldr	r3, [r7, #4]
 80206f4:	4618      	mov	r0, r3
 80206f6:	3708      	adds	r7, #8
 80206f8:	46bd      	mov	sp, r7
 80206fa:	bdb0      	pop	{r4, r5, r7, pc}
 80206fc:	0802e264 	.word	0x0802e264

08020700 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8020700:	b580      	push	{r7, lr}
 8020702:	b082      	sub	sp, #8
 8020704:	af00      	add	r7, sp, #0
 8020706:	6078      	str	r0, [r7, #4]
 8020708:	4a0b      	ldr	r2, [pc, #44]	; (8020738 <_ZN10STM32F7DMAD1Ev+0x38>)
 802070a:	687b      	ldr	r3, [r7, #4]
 802070c:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 802070e:	480b      	ldr	r0, [pc, #44]	; (802073c <_ZN10STM32F7DMAD1Ev+0x3c>)
 8020710:	f7e4 f8e2 	bl	80048d8 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8020714:	205a      	movs	r0, #90	; 0x5a
 8020716:	f7ff ff51 	bl	80205bc <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 802071a:	687b      	ldr	r3, [r7, #4]
 802071c:	330c      	adds	r3, #12
 802071e:	4618      	mov	r0, r3
 8020720:	f000 fab6 	bl	8020c90 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8020724:	687b      	ldr	r3, [r7, #4]
 8020726:	4618      	mov	r0, r3
 8020728:	f7ff fece 	bl	80204c8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 802072c:	687b      	ldr	r3, [r7, #4]
 802072e:	4618      	mov	r0, r3
 8020730:	3708      	adds	r7, #8
 8020732:	46bd      	mov	sp, r7
 8020734:	bd80      	pop	{r7, pc}
 8020736:	bf00      	nop
 8020738:	0802e264 	.word	0x0802e264
 802073c:	2000ce98 	.word	0x2000ce98

08020740 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8020740:	b580      	push	{r7, lr}
 8020742:	b082      	sub	sp, #8
 8020744:	af00      	add	r7, sp, #0
 8020746:	6078      	str	r0, [r7, #4]
}
 8020748:	6878      	ldr	r0, [r7, #4]
 802074a:	f7ff ffd9 	bl	8020700 <_ZN10STM32F7DMAD1Ev>
 802074e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8020752:	6878      	ldr	r0, [r7, #4]
 8020754:	f009 fee5 	bl	802a522 <_ZdlPvj>
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	4618      	mov	r0, r3
 802075c:	3708      	adds	r7, #8
 802075e:	46bd      	mov	sp, r7
 8020760:	bd80      	pop	{r7, pc}
	...

08020764 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8020764:	b580      	push	{r7, lr}
 8020766:	b082      	sub	sp, #8
 8020768:	af00      	add	r7, sp, #0
 802076a:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 802076c:	4b09      	ldr	r3, [pc, #36]	; (8020794 <_ZN10STM32F7DMA10initializeEv+0x30>)
 802076e:	4a0a      	ldr	r2, [pc, #40]	; (8020798 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8020770:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8020772:	4808      	ldr	r0, [pc, #32]	; (8020794 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8020774:	f7e4 f866 	bl	8004844 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8020778:	4b06      	ldr	r3, [pc, #24]	; (8020794 <_ZN10STM32F7DMA10initializeEv+0x30>)
 802077a:	4a08      	ldr	r2, [pc, #32]	; (802079c <_ZN10STM32F7DMA10initializeEv+0x38>)
 802077c:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 802077e:	4b05      	ldr	r3, [pc, #20]	; (8020794 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8020780:	4a07      	ldr	r2, [pc, #28]	; (80207a0 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8020782:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8020784:	205a      	movs	r0, #90	; 0x5a
 8020786:	f7ff fef9 	bl	802057c <__NVIC_EnableIRQ>
}
 802078a:	bf00      	nop
 802078c:	3708      	adds	r7, #8
 802078e:	46bd      	mov	sp, r7
 8020790:	bd80      	pop	{r7, pc}
 8020792:	bf00      	nop
 8020794:	2000ce98 	.word	0x2000ce98
 8020798:	4002b000 	.word	0x4002b000
 802079c:	08020661 	.word	0x08020661
 80207a0:	0802067d 	.word	0x0802067d

080207a4 <_ZN10STM32F7DMA11getBlitCapsEv>:

volatile bool disableChromArt = false;

BlitOperations STM32F7DMA::getBlitCaps()
{
 80207a4:	b480      	push	{r7}
 80207a6:	b083      	sub	sp, #12
 80207a8:	af00      	add	r7, sp, #0
 80207aa:	6078      	str	r0, [r7, #4]
    if (disableChromArt)
 80207ac:	4b07      	ldr	r3, [pc, #28]	; (80207cc <_ZN10STM32F7DMA11getBlitCapsEv+0x28>)
 80207ae:	781b      	ldrb	r3, [r3, #0]
 80207b0:	b2db      	uxtb	r3, r3
 80207b2:	2b00      	cmp	r3, #0
 80207b4:	d001      	beq.n	80207ba <_ZN10STM32F7DMA11getBlitCapsEv+0x16>
    {
        return static_cast<BlitOperations>(0);
 80207b6:	2300      	movs	r3, #0
 80207b8:	e001      	b.n	80207be <_ZN10STM32F7DMA11getBlitCapsEv+0x1a>
                                           | BLIT_OP_COPY
                                           | BLIT_OP_COPY_WITH_ALPHA
                                           | BLIT_OP_COPY_ARGB8888
                                           | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                           | BLIT_OP_COPY_A4
                                           | BLIT_OP_COPY_A8);
 80207ba:	f240 13ef 	movw	r3, #495	; 0x1ef
    }
}
 80207be:	4618      	mov	r0, r3
 80207c0:	370c      	adds	r7, #12
 80207c2:	46bd      	mov	sp, r7
 80207c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207c8:	4770      	bx	lr
 80207ca:	bf00      	nop
 80207cc:	2000cf20 	.word	0x2000cf20

080207d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 80207d0:	b590      	push	{r4, r7, lr}
 80207d2:	b08d      	sub	sp, #52	; 0x34
 80207d4:	af02      	add	r7, sp, #8
 80207d6:	6078      	str	r0, [r7, #4]
 80207d8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 80207da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80207de:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 80207e0:	2300      	movs	r3, #0
 80207e2:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80207e4:	683b      	ldr	r3, [r7, #0]
 80207e6:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80207e8:	2b20      	cmp	r3, #32
 80207ea:	d007      	beq.n	80207fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 80207ec:	683b      	ldr	r3, [r7, #0]
 80207ee:	681b      	ldr	r3, [r3, #0]
 80207f0:	2b40      	cmp	r3, #64	; 0x40
 80207f2:	d003      	beq.n	80207fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80207f4:	683b      	ldr	r3, [r7, #0]
 80207f6:	681b      	ldr	r3, [r3, #0]
 80207f8:	2b04      	cmp	r3, #4
 80207fa:	d101      	bne.n	8020800 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 80207fc:	2301      	movs	r3, #1
 80207fe:	e000      	b.n	8020802 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8020800:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8020802:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8020804:	683b      	ldr	r3, [r7, #0]
 8020806:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8020808:	2b80      	cmp	r3, #128	; 0x80
 802080a:	d004      	beq.n	8020816 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 802080c:	683b      	ldr	r3, [r7, #0]
 802080e:	681b      	ldr	r3, [r3, #0]
 8020810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020814:	d101      	bne.n	802081a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8020816:	2301      	movs	r3, #1
 8020818:	e000      	b.n	802081c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 802081a:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 802081c:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 802081e:	f7f1 fdd5 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 8020822:	4602      	mov	r2, r0
 8020824:	6813      	ldr	r3, [r2, #0]
 8020826:	3320      	adds	r3, #32
 8020828:	681b      	ldr	r3, [r3, #0]
 802082a:	4610      	mov	r0, r2
 802082c:	4798      	blx	r3
 802082e:	4603      	mov	r3, r0
 8020830:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8020832:	683b      	ldr	r3, [r7, #0]
 8020834:	681b      	ldr	r3, [r3, #0]
 8020836:	2b40      	cmp	r3, #64	; 0x40
 8020838:	d01d      	beq.n	8020876 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 802083a:	2b40      	cmp	r3, #64	; 0x40
 802083c:	d804      	bhi.n	8020848 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 802083e:	2b04      	cmp	r3, #4
 8020840:	d00e      	beq.n	8020860 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8020842:	2b20      	cmp	r3, #32
 8020844:	d017      	beq.n	8020876 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8020846:	e019      	b.n	802087c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8020848:	2b80      	cmp	r3, #128	; 0x80
 802084a:	d003      	beq.n	8020854 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 802084c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020850:	d003      	beq.n	802085a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8020852:	e013      	b.n	802087c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8020854:	230a      	movs	r3, #10
 8020856:	623b      	str	r3, [r7, #32]
        break;
 8020858:	e01a      	b.n	8020890 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 802085a:	2309      	movs	r3, #9
 802085c:	623b      	str	r3, [r7, #32]
        break;
 802085e:	e017      	b.n	8020890 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8020860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020864:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8020866:	7f7b      	ldrb	r3, [r7, #29]
 8020868:	2b10      	cmp	r3, #16
 802086a:	d101      	bne.n	8020870 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 802086c:	2302      	movs	r3, #2
 802086e:	e000      	b.n	8020872 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8020870:	2301      	movs	r3, #1
 8020872:	623b      	str	r3, [r7, #32]
        break;
 8020874:	e00c      	b.n	8020890 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8020876:	2300      	movs	r3, #0
 8020878:	623b      	str	r3, [r7, #32]
        break;
 802087a:	e009      	b.n	8020890 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 802087c:	2300      	movs	r3, #0
 802087e:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8020880:	7f7b      	ldrb	r3, [r7, #29]
 8020882:	2b10      	cmp	r3, #16
 8020884:	d101      	bne.n	802088a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8020886:	2302      	movs	r3, #2
 8020888:	e000      	b.n	802088c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 802088a:	2301      	movs	r3, #1
 802088c:	623b      	str	r3, [r7, #32]
        break;
 802088e:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8020890:	4a76      	ldr	r2, [pc, #472]	; (8020a6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8020892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020894:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8020896:	7f7b      	ldrb	r3, [r7, #29]
 8020898:	2b10      	cmp	r3, #16
 802089a:	d101      	bne.n	80208a0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 802089c:	2302      	movs	r3, #2
 802089e:	e000      	b.n	80208a2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 80208a0:	2301      	movs	r3, #1
 80208a2:	4a72      	ldr	r2, [pc, #456]	; (8020a6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80208a4:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80208a6:	683b      	ldr	r3, [r7, #0]
 80208a8:	8adb      	ldrh	r3, [r3, #22]
 80208aa:	461a      	mov	r2, r3
 80208ac:	683b      	ldr	r3, [r7, #0]
 80208ae:	8a1b      	ldrh	r3, [r3, #16]
 80208b0:	1ad3      	subs	r3, r2, r3
 80208b2:	461a      	mov	r2, r3
 80208b4:	4b6d      	ldr	r3, [pc, #436]	; (8020a6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80208b6:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80208b8:	7f7b      	ldrb	r3, [r7, #29]
 80208ba:	2b10      	cmp	r3, #16
 80208bc:	d101      	bne.n	80208c2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 80208be:	2202      	movs	r2, #2
 80208c0:	e000      	b.n	80208c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 80208c2:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80208c4:	683b      	ldr	r3, [r7, #0]
 80208c6:	8adb      	ldrh	r3, [r3, #22]
 80208c8:	4619      	mov	r1, r3
 80208ca:	683b      	ldr	r3, [r7, #0]
 80208cc:	8a1b      	ldrh	r3, [r3, #16]
 80208ce:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80208d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80208d2:	4866      	ldr	r0, [pc, #408]	; (8020a6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80208d4:	f7ff fe96 	bl	8020604 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80208d8:	4a64      	ldr	r2, [pc, #400]	; (8020a6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80208da:	6a3b      	ldr	r3, [r7, #32]
 80208dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 80208de:	683b      	ldr	r3, [r7, #0]
 80208e0:	8a9b      	ldrh	r3, [r3, #20]
 80208e2:	461a      	mov	r2, r3
 80208e4:	683b      	ldr	r3, [r7, #0]
 80208e6:	8a1b      	ldrh	r3, [r3, #16]
 80208e8:	1ad3      	subs	r3, r2, r3
 80208ea:	461a      	mov	r2, r3
 80208ec:	4b5f      	ldr	r3, [pc, #380]	; (8020a6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80208ee:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 80208f0:	7ffb      	ldrb	r3, [r7, #31]
 80208f2:	2b00      	cmp	r3, #0
 80208f4:	d103      	bne.n	80208fe <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 80208f6:	7fbb      	ldrb	r3, [r7, #30]
 80208f8:	2b00      	cmp	r3, #0
 80208fa:	f000 8082 	beq.w	8020a02 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 80208fe:	683b      	ldr	r3, [r7, #0]
 8020900:	7f1b      	ldrb	r3, [r3, #28]
 8020902:	2bff      	cmp	r3, #255	; 0xff
 8020904:	d008      	beq.n	8020918 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8020906:	4b59      	ldr	r3, [pc, #356]	; (8020a6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8020908:	2202      	movs	r2, #2
 802090a:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 802090c:	683b      	ldr	r3, [r7, #0]
 802090e:	7f1b      	ldrb	r3, [r3, #28]
 8020910:	461a      	mov	r2, r3
 8020912:	4b56      	ldr	r3, [pc, #344]	; (8020a6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8020914:	635a      	str	r2, [r3, #52]	; 0x34
 8020916:	e002      	b.n	802091e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8020918:	4b54      	ldr	r3, [pc, #336]	; (8020a6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 802091a:	2200      	movs	r2, #0
 802091c:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 802091e:	7fbb      	ldrb	r3, [r7, #30]
 8020920:	2b00      	cmp	r3, #0
 8020922:	d059      	beq.n	80209d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8020924:	7f7b      	ldrb	r3, [r7, #29]
 8020926:	2b10      	cmp	r3, #16
 8020928:	d14a      	bne.n	80209c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 802092a:	683b      	ldr	r3, [r7, #0]
 802092c:	3318      	adds	r3, #24
 802092e:	4618      	mov	r0, r3
 8020930:	f7f5 fb87 	bl	8016042 <_ZNK8touchgfx9colortypecvtEv>
 8020934:	4603      	mov	r3, r0
 8020936:	12db      	asrs	r3, r3, #11
 8020938:	f003 021f 	and.w	r2, r3, #31
 802093c:	4613      	mov	r3, r2
 802093e:	021b      	lsls	r3, r3, #8
 8020940:	1a9b      	subs	r3, r3, r2
 8020942:	4a4b      	ldr	r2, [pc, #300]	; (8020a70 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8020944:	fb82 1203 	smull	r1, r2, r2, r3
 8020948:	441a      	add	r2, r3
 802094a:	1112      	asrs	r2, r2, #4
 802094c:	17db      	asrs	r3, r3, #31
 802094e:	1ad3      	subs	r3, r2, r3
 8020950:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8020952:	683b      	ldr	r3, [r7, #0]
 8020954:	3318      	adds	r3, #24
 8020956:	4618      	mov	r0, r3
 8020958:	f7f5 fb73 	bl	8016042 <_ZNK8touchgfx9colortypecvtEv>
 802095c:	4603      	mov	r3, r0
 802095e:	115b      	asrs	r3, r3, #5
 8020960:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8020964:	4613      	mov	r3, r2
 8020966:	021b      	lsls	r3, r3, #8
 8020968:	1a9b      	subs	r3, r3, r2
 802096a:	4a42      	ldr	r2, [pc, #264]	; (8020a74 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 802096c:	fb82 1203 	smull	r1, r2, r2, r3
 8020970:	441a      	add	r2, r3
 8020972:	1152      	asrs	r2, r2, #5
 8020974:	17db      	asrs	r3, r3, #31
 8020976:	1ad3      	subs	r3, r2, r3
 8020978:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 802097a:	683b      	ldr	r3, [r7, #0]
 802097c:	3318      	adds	r3, #24
 802097e:	4618      	mov	r0, r3
 8020980:	f7f5 fb5f 	bl	8016042 <_ZNK8touchgfx9colortypecvtEv>
 8020984:	4603      	mov	r3, r0
 8020986:	f003 021f 	and.w	r2, r3, #31
 802098a:	4613      	mov	r3, r2
 802098c:	021b      	lsls	r3, r3, #8
 802098e:	1a9b      	subs	r3, r3, r2
 8020990:	4a37      	ldr	r2, [pc, #220]	; (8020a70 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8020992:	fb82 1203 	smull	r1, r2, r2, r3
 8020996:	441a      	add	r2, r3
 8020998:	1112      	asrs	r2, r2, #4
 802099a:	17db      	asrs	r3, r3, #31
 802099c:	1ad3      	subs	r3, r2, r3
 802099e:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 80209a0:	683b      	ldr	r3, [r7, #0]
 80209a2:	7f1b      	ldrb	r3, [r3, #28]
 80209a4:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80209a6:	68fb      	ldr	r3, [r7, #12]
 80209a8:	061a      	lsls	r2, r3, #24
 80209aa:	69bb      	ldr	r3, [r7, #24]
 80209ac:	041b      	lsls	r3, r3, #16
 80209ae:	431a      	orrs	r2, r3
 80209b0:	697b      	ldr	r3, [r7, #20]
 80209b2:	021b      	lsls	r3, r3, #8
 80209b4:	431a      	orrs	r2, r3
 80209b6:	693b      	ldr	r3, [r7, #16]
 80209b8:	4313      	orrs	r3, r2
 80209ba:	4a2c      	ldr	r2, [pc, #176]	; (8020a6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80209bc:	6353      	str	r3, [r2, #52]	; 0x34
 80209be:	e00b      	b.n	80209d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 80209c0:	683b      	ldr	r3, [r7, #0]
 80209c2:	3318      	adds	r3, #24
 80209c4:	4618      	mov	r0, r3
 80209c6:	f7ff fd39 	bl	802043c <_ZNK8touchgfx9colortype10getColor32Ev>
 80209ca:	4602      	mov	r2, r0
 80209cc:	683b      	ldr	r3, [r7, #0]
 80209ce:	7f1b      	ldrb	r3, [r3, #28]
 80209d0:	061b      	lsls	r3, r3, #24
 80209d2:	4313      	orrs	r3, r2
 80209d4:	4a25      	ldr	r2, [pc, #148]	; (8020a6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80209d6:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80209d8:	683b      	ldr	r3, [r7, #0]
 80209da:	8adb      	ldrh	r3, [r3, #22]
 80209dc:	461a      	mov	r2, r3
 80209de:	683b      	ldr	r3, [r7, #0]
 80209e0:	8a1b      	ldrh	r3, [r3, #16]
 80209e2:	1ad3      	subs	r3, r2, r3
 80209e4:	461a      	mov	r2, r3
 80209e6:	4b21      	ldr	r3, [pc, #132]	; (8020a6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80209e8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80209ea:	7f7b      	ldrb	r3, [r7, #29]
 80209ec:	2b10      	cmp	r3, #16
 80209ee:	d101      	bne.n	80209f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 80209f0:	2302      	movs	r3, #2
 80209f2:	e000      	b.n	80209f6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 80209f4:	2301      	movs	r3, #1
 80209f6:	4a1d      	ldr	r2, [pc, #116]	; (8020a6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80209f8:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80209fa:	2100      	movs	r1, #0
 80209fc:	481b      	ldr	r0, [pc, #108]	; (8020a6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80209fe:	f7e4 f9eb 	bl	8004dd8 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8020a02:	2101      	movs	r1, #1
 8020a04:	4819      	ldr	r0, [pc, #100]	; (8020a6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8020a06:	f7e4 f9e7 	bl	8004dd8 <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 8020a0a:	7ffb      	ldrb	r3, [r7, #31]
 8020a0c:	2b00      	cmp	r3, #0
 8020a0e:	d102      	bne.n	8020a16 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8020a10:	7fbb      	ldrb	r3, [r7, #30]
 8020a12:	2b00      	cmp	r3, #0
 8020a14:	d015      	beq.n	8020a42 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8020a16:	683b      	ldr	r3, [r7, #0]
 8020a18:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8020a1a:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8020a1c:	683b      	ldr	r3, [r7, #0]
 8020a1e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8020a20:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8020a22:	683b      	ldr	r3, [r7, #0]
 8020a24:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8020a26:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8020a28:	683b      	ldr	r3, [r7, #0]
 8020a2a:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8020a2c:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8020a2e:	683b      	ldr	r3, [r7, #0]
 8020a30:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8020a32:	9301      	str	r3, [sp, #4]
 8020a34:	9200      	str	r2, [sp, #0]
 8020a36:	4623      	mov	r3, r4
 8020a38:	4602      	mov	r2, r0
 8020a3a:	480c      	ldr	r0, [pc, #48]	; (8020a6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8020a3c:	f7e3 ffef 	bl	8004a1e <HAL_DMA2D_BlendingStart_IT>
 8020a40:	e00f      	b.n	8020a62 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8020a42:	683b      	ldr	r3, [r7, #0]
 8020a44:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8020a46:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8020a48:	683b      	ldr	r3, [r7, #0]
 8020a4a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8020a4c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8020a4e:	683b      	ldr	r3, [r7, #0]
 8020a50:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8020a52:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8020a54:	683b      	ldr	r3, [r7, #0]
 8020a56:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8020a58:	9300      	str	r3, [sp, #0]
 8020a5a:	4603      	mov	r3, r0
 8020a5c:	4803      	ldr	r0, [pc, #12]	; (8020a6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8020a5e:	f7e3 ffab 	bl	80049b8 <HAL_DMA2D_Start_IT>
    }
}
 8020a62:	bf00      	nop
 8020a64:	372c      	adds	r7, #44	; 0x2c
 8020a66:	46bd      	mov	sp, r7
 8020a68:	bd90      	pop	{r4, r7, pc}
 8020a6a:	bf00      	nop
 8020a6c:	2000ce98 	.word	0x2000ce98
 8020a70:	84210843 	.word	0x84210843
 8020a74:	82082083 	.word	0x82082083

08020a78 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8020a78:	b590      	push	{r4, r7, lr}
 8020a7a:	b08d      	sub	sp, #52	; 0x34
 8020a7c:	af02      	add	r7, sp, #8
 8020a7e:	6078      	str	r0, [r7, #4]
 8020a80:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8020a82:	f7f1 fca3 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 8020a86:	4602      	mov	r2, r0
 8020a88:	6813      	ldr	r3, [r2, #0]
 8020a8a:	3320      	adds	r3, #32
 8020a8c:	681b      	ldr	r3, [r3, #0]
 8020a8e:	4610      	mov	r0, r2
 8020a90:	4798      	blx	r3
 8020a92:	4603      	mov	r3, r0
 8020a94:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8020a96:	7ffb      	ldrb	r3, [r7, #31]
 8020a98:	2b10      	cmp	r3, #16
 8020a9a:	d101      	bne.n	8020aa0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8020a9c:	2302      	movs	r3, #2
 8020a9e:	e000      	b.n	8020aa2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8020aa0:	2301      	movs	r3, #1
 8020aa2:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8020aa4:	2300      	movs	r3, #0
 8020aa6:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8020aa8:	7ffb      	ldrb	r3, [r7, #31]
 8020aaa:	2b10      	cmp	r3, #16
 8020aac:	d149      	bne.n	8020b42 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8020aae:	683b      	ldr	r3, [r7, #0]
 8020ab0:	3318      	adds	r3, #24
 8020ab2:	4618      	mov	r0, r3
 8020ab4:	f7f5 fac5 	bl	8016042 <_ZNK8touchgfx9colortypecvtEv>
 8020ab8:	4603      	mov	r3, r0
 8020aba:	12db      	asrs	r3, r3, #11
 8020abc:	f003 021f 	and.w	r2, r3, #31
 8020ac0:	4613      	mov	r3, r2
 8020ac2:	021b      	lsls	r3, r3, #8
 8020ac4:	1a9b      	subs	r3, r3, r2
 8020ac6:	4a69      	ldr	r2, [pc, #420]	; (8020c6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8020ac8:	fb82 1203 	smull	r1, r2, r2, r3
 8020acc:	441a      	add	r2, r3
 8020ace:	1112      	asrs	r2, r2, #4
 8020ad0:	17db      	asrs	r3, r3, #31
 8020ad2:	1ad3      	subs	r3, r2, r3
 8020ad4:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8020ad6:	683b      	ldr	r3, [r7, #0]
 8020ad8:	3318      	adds	r3, #24
 8020ada:	4618      	mov	r0, r3
 8020adc:	f7f5 fab1 	bl	8016042 <_ZNK8touchgfx9colortypecvtEv>
 8020ae0:	4603      	mov	r3, r0
 8020ae2:	115b      	asrs	r3, r3, #5
 8020ae4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8020ae8:	4613      	mov	r3, r2
 8020aea:	021b      	lsls	r3, r3, #8
 8020aec:	1a9b      	subs	r3, r3, r2
 8020aee:	4a60      	ldr	r2, [pc, #384]	; (8020c70 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8020af0:	fb82 1203 	smull	r1, r2, r2, r3
 8020af4:	441a      	add	r2, r3
 8020af6:	1152      	asrs	r2, r2, #5
 8020af8:	17db      	asrs	r3, r3, #31
 8020afa:	1ad3      	subs	r3, r2, r3
 8020afc:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8020afe:	683b      	ldr	r3, [r7, #0]
 8020b00:	3318      	adds	r3, #24
 8020b02:	4618      	mov	r0, r3
 8020b04:	f7f5 fa9d 	bl	8016042 <_ZNK8touchgfx9colortypecvtEv>
 8020b08:	4603      	mov	r3, r0
 8020b0a:	f003 021f 	and.w	r2, r3, #31
 8020b0e:	4613      	mov	r3, r2
 8020b10:	021b      	lsls	r3, r3, #8
 8020b12:	1a9b      	subs	r3, r3, r2
 8020b14:	4a55      	ldr	r2, [pc, #340]	; (8020c6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8020b16:	fb82 1203 	smull	r1, r2, r2, r3
 8020b1a:	441a      	add	r2, r3
 8020b1c:	1112      	asrs	r2, r2, #4
 8020b1e:	17db      	asrs	r3, r3, #31
 8020b20:	1ad3      	subs	r3, r2, r3
 8020b22:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8020b24:	683b      	ldr	r3, [r7, #0]
 8020b26:	7f1b      	ldrb	r3, [r3, #28]
 8020b28:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8020b2a:	68bb      	ldr	r3, [r7, #8]
 8020b2c:	061a      	lsls	r2, r3, #24
 8020b2e:	697b      	ldr	r3, [r7, #20]
 8020b30:	041b      	lsls	r3, r3, #16
 8020b32:	431a      	orrs	r2, r3
 8020b34:	693b      	ldr	r3, [r7, #16]
 8020b36:	021b      	lsls	r3, r3, #8
 8020b38:	4313      	orrs	r3, r2
 8020b3a:	68fa      	ldr	r2, [r7, #12]
 8020b3c:	4313      	orrs	r3, r2
 8020b3e:	623b      	str	r3, [r7, #32]
 8020b40:	e00b      	b.n	8020b5a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8020b42:	683b      	ldr	r3, [r7, #0]
 8020b44:	7f1b      	ldrb	r3, [r3, #28]
 8020b46:	061b      	lsls	r3, r3, #24
 8020b48:	461c      	mov	r4, r3
 8020b4a:	683b      	ldr	r3, [r7, #0]
 8020b4c:	3318      	adds	r3, #24
 8020b4e:	4618      	mov	r0, r3
 8020b50:	f7ff fc74 	bl	802043c <_ZNK8touchgfx9colortype10getColor32Ev>
 8020b54:	4603      	mov	r3, r0
 8020b56:	4323      	orrs	r3, r4
 8020b58:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8020b5a:	683b      	ldr	r3, [r7, #0]
 8020b5c:	681b      	ldr	r3, [r3, #0]
 8020b5e:	2b08      	cmp	r3, #8
 8020b60:	d103      	bne.n	8020b6a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8020b62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020b66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8020b68:	e003      	b.n	8020b72 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8020b6a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8020b6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8020b70:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8020b72:	4a40      	ldr	r2, [pc, #256]	; (8020c74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8020b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b76:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8020b78:	7ffb      	ldrb	r3, [r7, #31]
 8020b7a:	2b10      	cmp	r3, #16
 8020b7c:	d101      	bne.n	8020b82 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8020b7e:	2302      	movs	r3, #2
 8020b80:	e000      	b.n	8020b84 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8020b82:	2301      	movs	r3, #1
 8020b84:	4a3b      	ldr	r2, [pc, #236]	; (8020c74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8020b86:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8020b88:	683b      	ldr	r3, [r7, #0]
 8020b8a:	8adb      	ldrh	r3, [r3, #22]
 8020b8c:	461a      	mov	r2, r3
 8020b8e:	683b      	ldr	r3, [r7, #0]
 8020b90:	8a1b      	ldrh	r3, [r3, #16]
 8020b92:	1ad3      	subs	r3, r2, r3
 8020b94:	461a      	mov	r2, r3
 8020b96:	4b37      	ldr	r3, [pc, #220]	; (8020c74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8020b98:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8020b9a:	7ffb      	ldrb	r3, [r7, #31]
 8020b9c:	2b10      	cmp	r3, #16
 8020b9e:	d101      	bne.n	8020ba4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8020ba0:	2202      	movs	r2, #2
 8020ba2:	e000      	b.n	8020ba6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8020ba4:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8020ba6:	683b      	ldr	r3, [r7, #0]
 8020ba8:	8adb      	ldrh	r3, [r3, #22]
 8020baa:	4619      	mov	r1, r3
 8020bac:	683b      	ldr	r3, [r7, #0]
 8020bae:	8a1b      	ldrh	r3, [r3, #16]
 8020bb0:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8020bb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020bb4:	482f      	ldr	r0, [pc, #188]	; (8020c74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8020bb6:	f7ff fd25 	bl	8020604 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8020bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020bbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8020bc0:	d11e      	bne.n	8020c00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8020bc2:	4b2c      	ldr	r3, [pc, #176]	; (8020c74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8020bc4:	2201      	movs	r2, #1
 8020bc6:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8020bc8:	4a2a      	ldr	r2, [pc, #168]	; (8020c74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8020bca:	6a3b      	ldr	r3, [r7, #32]
 8020bcc:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8020bce:	4b29      	ldr	r3, [pc, #164]	; (8020c74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8020bd0:	2209      	movs	r2, #9
 8020bd2:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8020bd4:	683b      	ldr	r3, [r7, #0]
 8020bd6:	8adb      	ldrh	r3, [r3, #22]
 8020bd8:	461a      	mov	r2, r3
 8020bda:	683b      	ldr	r3, [r7, #0]
 8020bdc:	8a1b      	ldrh	r3, [r3, #16]
 8020bde:	1ad3      	subs	r3, r2, r3
 8020be0:	461a      	mov	r2, r3
 8020be2:	4b24      	ldr	r3, [pc, #144]	; (8020c74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8020be4:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8020be6:	7ffb      	ldrb	r3, [r7, #31]
 8020be8:	2b10      	cmp	r3, #16
 8020bea:	d101      	bne.n	8020bf0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8020bec:	2302      	movs	r3, #2
 8020bee:	e000      	b.n	8020bf2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8020bf0:	2301      	movs	r3, #1
 8020bf2:	4a20      	ldr	r2, [pc, #128]	; (8020c74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8020bf4:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8020bf6:	2100      	movs	r1, #0
 8020bf8:	481e      	ldr	r0, [pc, #120]	; (8020c74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8020bfa:	f7e4 f8ed 	bl	8004dd8 <HAL_DMA2D_ConfigLayer>
 8020bfe:	e005      	b.n	8020c0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8020c00:	4a1c      	ldr	r2, [pc, #112]	; (8020c74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8020c02:	69bb      	ldr	r3, [r7, #24]
 8020c04:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8020c06:	4b1b      	ldr	r3, [pc, #108]	; (8020c74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8020c08:	2200      	movs	r2, #0
 8020c0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8020c0c:	2101      	movs	r1, #1
 8020c0e:	4819      	ldr	r0, [pc, #100]	; (8020c74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8020c10:	f7e4 f8e2 	bl	8004dd8 <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8020c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8020c1a:	d115      	bne.n	8020c48 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8020c1c:	683b      	ldr	r3, [r7, #0]
 8020c1e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8020c20:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8020c22:	683b      	ldr	r3, [r7, #0]
 8020c24:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8020c26:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8020c28:	683b      	ldr	r3, [r7, #0]
 8020c2a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8020c2c:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8020c2e:	683b      	ldr	r3, [r7, #0]
 8020c30:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8020c32:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8020c34:	683b      	ldr	r3, [r7, #0]
 8020c36:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8020c38:	9301      	str	r3, [sp, #4]
 8020c3a:	9200      	str	r2, [sp, #0]
 8020c3c:	4623      	mov	r3, r4
 8020c3e:	4602      	mov	r2, r0
 8020c40:	480c      	ldr	r0, [pc, #48]	; (8020c74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8020c42:	f7e3 feec 	bl	8004a1e <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8020c46:	e00d      	b.n	8020c64 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8020c48:	683b      	ldr	r3, [r7, #0]
 8020c4a:	68db      	ldr	r3, [r3, #12]
 8020c4c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8020c4e:	683b      	ldr	r3, [r7, #0]
 8020c50:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8020c52:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8020c54:	683b      	ldr	r3, [r7, #0]
 8020c56:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8020c58:	9300      	str	r3, [sp, #0]
 8020c5a:	460b      	mov	r3, r1
 8020c5c:	6a39      	ldr	r1, [r7, #32]
 8020c5e:	4805      	ldr	r0, [pc, #20]	; (8020c74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8020c60:	f7e3 feaa 	bl	80049b8 <HAL_DMA2D_Start_IT>
}
 8020c64:	bf00      	nop
 8020c66:	372c      	adds	r7, #44	; 0x2c
 8020c68:	46bd      	mov	sp, r7
 8020c6a:	bd90      	pop	{r4, r7, pc}
 8020c6c:	84210843 	.word	0x84210843
 8020c70:	82082083 	.word	0x82082083
 8020c74:	2000ce98 	.word	0x2000ce98

08020c78 <_ZN10STM32F7DMA5startEv>:

void STM32F7DMA::start()
{
 8020c78:	b580      	push	{r7, lr}
 8020c7a:	b082      	sub	sp, #8
 8020c7c:	af00      	add	r7, sp, #0
 8020c7e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanDCache() or SCB_CleanDCache_by_Addr().
    DMA_Interface::start();
 8020c80:	687b      	ldr	r3, [r7, #4]
 8020c82:	4618      	mov	r0, r3
 8020c84:	f001 ff48 	bl	8022b18 <_ZN8touchgfx13DMA_Interface5startEv>
}
 8020c88:	bf00      	nop
 8020c8a:	3708      	adds	r7, #8
 8020c8c:	46bd      	mov	sp, r7
 8020c8e:	bd80      	pop	{r7, pc}

08020c90 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8020c90:	b580      	push	{r7, lr}
 8020c92:	b082      	sub	sp, #8
 8020c94:	af00      	add	r7, sp, #0
 8020c96:	6078      	str	r0, [r7, #4]
 8020c98:	4a05      	ldr	r2, [pc, #20]	; (8020cb0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8020c9a:	687b      	ldr	r3, [r7, #4]
 8020c9c:	601a      	str	r2, [r3, #0]
 8020c9e:	687b      	ldr	r3, [r7, #4]
 8020ca0:	4618      	mov	r0, r3
 8020ca2:	f7ff fbd7 	bl	8020454 <_ZN8touchgfx9DMA_QueueD1Ev>
 8020ca6:	687b      	ldr	r3, [r7, #4]
 8020ca8:	4618      	mov	r0, r3
 8020caa:	3708      	adds	r7, #8
 8020cac:	46bd      	mov	sp, r7
 8020cae:	bd80      	pop	{r7, pc}
 8020cb0:	0802ecec 	.word	0x0802ecec

08020cb4 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8020cb4:	b580      	push	{r7, lr}
 8020cb6:	b082      	sub	sp, #8
 8020cb8:	af00      	add	r7, sp, #0
 8020cba:	6078      	str	r0, [r7, #4]
 8020cbc:	6878      	ldr	r0, [r7, #4]
 8020cbe:	f7ff ffe7 	bl	8020c90 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8020cc2:	2114      	movs	r1, #20
 8020cc4:	6878      	ldr	r0, [r7, #4]
 8020cc6:	f009 fc2c 	bl	802a522 <_ZdlPvj>
 8020cca:	687b      	ldr	r3, [r7, #4]
 8020ccc:	4618      	mov	r0, r3
 8020cce:	3708      	adds	r7, #8
 8020cd0:	46bd      	mov	sp, r7
 8020cd2:	bd80      	pop	{r7, pc}

08020cd4 <__NVIC_EnableIRQ>:
{
 8020cd4:	b480      	push	{r7}
 8020cd6:	b083      	sub	sp, #12
 8020cd8:	af00      	add	r7, sp, #0
 8020cda:	4603      	mov	r3, r0
 8020cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020ce2:	2b00      	cmp	r3, #0
 8020ce4:	db0d      	blt.n	8020d02 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8020ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020cea:	b2db      	uxtb	r3, r3
 8020cec:	f003 021f 	and.w	r2, r3, #31
 8020cf0:	4907      	ldr	r1, [pc, #28]	; (8020d10 <__NVIC_EnableIRQ+0x3c>)
 8020cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020cf6:	095b      	lsrs	r3, r3, #5
 8020cf8:	2001      	movs	r0, #1
 8020cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8020cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8020d02:	bf00      	nop
 8020d04:	370c      	adds	r7, #12
 8020d06:	46bd      	mov	sp, r7
 8020d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d0c:	4770      	bx	lr
 8020d0e:	bf00      	nop
 8020d10:	e000e100 	.word	0xe000e100

08020d14 <__NVIC_DisableIRQ>:
{
 8020d14:	b480      	push	{r7}
 8020d16:	b083      	sub	sp, #12
 8020d18:	af00      	add	r7, sp, #0
 8020d1a:	4603      	mov	r3, r0
 8020d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020d22:	2b00      	cmp	r3, #0
 8020d24:	db12      	blt.n	8020d4c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8020d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020d2a:	b2db      	uxtb	r3, r3
 8020d2c:	f003 021f 	and.w	r2, r3, #31
 8020d30:	4909      	ldr	r1, [pc, #36]	; (8020d58 <__NVIC_DisableIRQ+0x44>)
 8020d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020d36:	095b      	lsrs	r3, r3, #5
 8020d38:	2001      	movs	r0, #1
 8020d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8020d3e:	3320      	adds	r3, #32
 8020d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8020d44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8020d48:	f3bf 8f6f 	isb	sy
}
 8020d4c:	bf00      	nop
 8020d4e:	370c      	adds	r7, #12
 8020d50:	46bd      	mov	sp, r7
 8020d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d56:	4770      	bx	lr
 8020d58:	e000e100 	.word	0xe000e100

08020d5c <__NVIC_SetPriority>:
{
 8020d5c:	b480      	push	{r7}
 8020d5e:	b083      	sub	sp, #12
 8020d60:	af00      	add	r7, sp, #0
 8020d62:	4603      	mov	r3, r0
 8020d64:	6039      	str	r1, [r7, #0]
 8020d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020d6c:	2b00      	cmp	r3, #0
 8020d6e:	db0c      	blt.n	8020d8a <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020d70:	683b      	ldr	r3, [r7, #0]
 8020d72:	b2db      	uxtb	r3, r3
 8020d74:	4a0e      	ldr	r2, [pc, #56]	; (8020db0 <__NVIC_SetPriority+0x54>)
 8020d76:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8020d7a:	4608      	mov	r0, r1
 8020d7c:	011b      	lsls	r3, r3, #4
 8020d7e:	b2d9      	uxtb	r1, r3
 8020d80:	1813      	adds	r3, r2, r0
 8020d82:	460a      	mov	r2, r1
 8020d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8020d88:	e00c      	b.n	8020da4 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020d8a:	683b      	ldr	r3, [r7, #0]
 8020d8c:	b2da      	uxtb	r2, r3
 8020d8e:	4909      	ldr	r1, [pc, #36]	; (8020db4 <__NVIC_SetPriority+0x58>)
 8020d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020d94:	b2db      	uxtb	r3, r3
 8020d96:	f003 030f 	and.w	r3, r3, #15
 8020d9a:	3b04      	subs	r3, #4
 8020d9c:	0112      	lsls	r2, r2, #4
 8020d9e:	b2d2      	uxtb	r2, r2
 8020da0:	440b      	add	r3, r1
 8020da2:	761a      	strb	r2, [r3, #24]
}
 8020da4:	bf00      	nop
 8020da6:	370c      	adds	r7, #12
 8020da8:	46bd      	mov	sp, r7
 8020daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dae:	4770      	bx	lr
 8020db0:	e000e100 	.word	0xe000e100
 8020db4:	e000ed00 	.word	0xe000ed00

08020db8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8020db8:	b480      	push	{r7}
 8020dba:	b083      	sub	sp, #12
 8020dbc:	af00      	add	r7, sp, #0
 8020dbe:	6078      	str	r0, [r7, #4]
 8020dc0:	460b      	mov	r3, r1
 8020dc2:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8020dc4:	687b      	ldr	r3, [r7, #4]
 8020dc6:	78fa      	ldrb	r2, [r7, #3]
 8020dc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8020dcc:	687b      	ldr	r3, [r7, #4]
 8020dce:	2201      	movs	r2, #1
 8020dd0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8020dd4:	bf00      	nop
 8020dd6:	370c      	adds	r7, #12
 8020dd8:	46bd      	mov	sp, r7
 8020dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dde:	4770      	bx	lr

08020de0 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8020de0:	b580      	push	{r7, lr}
 8020de2:	b082      	sub	sp, #8
 8020de4:	af00      	add	r7, sp, #0
 8020de6:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8020de8:	687b      	ldr	r3, [r7, #4]
 8020dea:	681b      	ldr	r3, [r3, #0]
 8020dec:	3318      	adds	r3, #24
 8020dee:	681b      	ldr	r3, [r3, #0]
 8020df0:	6878      	ldr	r0, [r7, #4]
 8020df2:	4798      	blx	r3
    }
 8020df4:	bf00      	nop
 8020df6:	3708      	adds	r7, #8
 8020df8:	46bd      	mov	sp, r7
 8020dfa:	bd80      	pop	{r7, pc}

08020dfc <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8020dfc:	b580      	push	{r7, lr}
 8020dfe:	b082      	sub	sp, #8
 8020e00:	af00      	add	r7, sp, #0
 8020e02:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 8020e04:	687b      	ldr	r3, [r7, #4]
 8020e06:	685a      	ldr	r2, [r3, #4]
 8020e08:	687b      	ldr	r3, [r7, #4]
 8020e0a:	685b      	ldr	r3, [r3, #4]
 8020e0c:	681b      	ldr	r3, [r3, #0]
 8020e0e:	681b      	ldr	r3, [r3, #0]
 8020e10:	4610      	mov	r0, r2
 8020e12:	4798      	blx	r3
 8020e14:	4603      	mov	r3, r0
    };
 8020e16:	4618      	mov	r0, r3
 8020e18:	3708      	adds	r7, #8
 8020e1a:	46bd      	mov	sp, r7
 8020e1c:	bd80      	pop	{r7, pc}

08020e1e <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8020e1e:	b480      	push	{r7}
 8020e20:	b083      	sub	sp, #12
 8020e22:	af00      	add	r7, sp, #0
 8020e24:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8020e26:	687b      	ldr	r3, [r7, #4]
 8020e28:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8020e2c:	3301      	adds	r3, #1
 8020e2e:	b2da      	uxtb	r2, r3
 8020e30:	687b      	ldr	r3, [r7, #4]
 8020e32:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    };
 8020e36:	bf00      	nop
 8020e38:	370c      	adds	r7, #12
 8020e3a:	46bd      	mov	sp, r7
 8020e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e40:	4770      	bx	lr

08020e42 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8020e42:	b580      	push	{r7, lr}
 8020e44:	b082      	sub	sp, #8
 8020e46:	af00      	add	r7, sp, #0
 8020e48:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8020e4a:	6878      	ldr	r0, [r7, #4]
 8020e4c:	f001 fd38 	bl	80228c0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8020e50:	687b      	ldr	r3, [r7, #4]
 8020e52:	681b      	ldr	r3, [r3, #0]
 8020e54:	339c      	adds	r3, #156	; 0x9c
 8020e56:	681b      	ldr	r3, [r3, #0]
 8020e58:	6878      	ldr	r0, [r7, #4]
 8020e5a:	4798      	blx	r3
    }
 8020e5c:	bf00      	nop
 8020e5e:	3708      	adds	r7, #8
 8020e60:	46bd      	mov	sp, r7
 8020e62:	bd80      	pop	{r7, pc}

08020e64 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8020e64:	b480      	push	{r7}
 8020e66:	b083      	sub	sp, #12
 8020e68:	af00      	add	r7, sp, #0
 8020e6a:	6078      	str	r0, [r7, #4]
 8020e6c:	6039      	str	r1, [r7, #0]
        return false;
 8020e6e:	2300      	movs	r3, #0
    }
 8020e70:	4618      	mov	r0, r3
 8020e72:	370c      	adds	r7, #12
 8020e74:	46bd      	mov	sp, r7
 8020e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e7a:	4770      	bx	lr

08020e7c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8020e7c:	b590      	push	{r4, r7, lr}
 8020e7e:	b08b      	sub	sp, #44	; 0x2c
 8020e80:	af00      	add	r7, sp, #0
 8020e82:	60f8      	str	r0, [r7, #12]
 8020e84:	60b9      	str	r1, [r7, #8]
 8020e86:	4611      	mov	r1, r2
 8020e88:	461a      	mov	r2, r3
 8020e8a:	460b      	mov	r3, r1
 8020e8c:	80fb      	strh	r3, [r7, #6]
 8020e8e:	4613      	mov	r3, r2
 8020e90:	717b      	strb	r3, [r7, #5]
        uint16_t stride = lcd().framebufferStride();
 8020e92:	f7f1 fa9b 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 8020e96:	4602      	mov	r2, r0
 8020e98:	6813      	ldr	r3, [r2, #0]
 8020e9a:	3328      	adds	r3, #40	; 0x28
 8020e9c:	681b      	ldr	r3, [r3, #0]
 8020e9e:	4610      	mov	r0, r2
 8020ea0:	4798      	blx	r3
 8020ea2:	4603      	mov	r3, r0
 8020ea4:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8020ea6:	8b7b      	ldrh	r3, [r7, #26]
 8020ea8:	4a3d      	ldr	r2, [pc, #244]	; (8020fa0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8020eaa:	8812      	ldrh	r2, [r2, #0]
 8020eac:	fb02 f303 	mul.w	r3, r2, r3
 8020eb0:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8020eb2:	68bb      	ldr	r3, [r7, #8]
 8020eb4:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8020eb6:	2300      	movs	r3, #0
 8020eb8:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8020eba:	2300      	movs	r3, #0
 8020ebc:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8020ebe:	797b      	ldrb	r3, [r7, #5]
 8020ec0:	2b00      	cmp	r3, #0
 8020ec2:	d005      	beq.n	8020ed0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8020ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020ec6:	697b      	ldr	r3, [r7, #20]
 8020ec8:	4413      	add	r3, r2
 8020eca:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8020ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ece:	623b      	str	r3, [r7, #32]
        if (useAnimationStorage)
 8020ed0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8020ed4:	2b00      	cmp	r3, #0
 8020ed6:	d005      	beq.n	8020ee4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8020ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020eda:	697b      	ldr	r3, [r7, #20]
 8020edc:	4413      	add	r3, r2
 8020ede:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8020ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ee2:	61fb      	str	r3, [r7, #28]
        switch (depth)
 8020ee4:	88fb      	ldrh	r3, [r7, #6]
 8020ee6:	3b01      	subs	r3, #1
 8020ee8:	2b1f      	cmp	r3, #31
 8020eea:	d84d      	bhi.n	8020f88 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8020eec:	a201      	add	r2, pc, #4	; (adr r2, 8020ef4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8020eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020ef2:	bf00      	nop
 8020ef4:	08020f75 	.word	0x08020f75
 8020ef8:	08020f75 	.word	0x08020f75
 8020efc:	08020f89 	.word	0x08020f89
 8020f00:	08020f75 	.word	0x08020f75
 8020f04:	08020f89 	.word	0x08020f89
 8020f08:	08020f89 	.word	0x08020f89
 8020f0c:	08020f89 	.word	0x08020f89
 8020f10:	08020f75 	.word	0x08020f75
 8020f14:	08020f89 	.word	0x08020f89
 8020f18:	08020f89 	.word	0x08020f89
 8020f1c:	08020f89 	.word	0x08020f89
 8020f20:	08020f89 	.word	0x08020f89
 8020f24:	08020f89 	.word	0x08020f89
 8020f28:	08020f89 	.word	0x08020f89
 8020f2c:	08020f89 	.word	0x08020f89
 8020f30:	08020f75 	.word	0x08020f75
 8020f34:	08020f89 	.word	0x08020f89
 8020f38:	08020f89 	.word	0x08020f89
 8020f3c:	08020f89 	.word	0x08020f89
 8020f40:	08020f89 	.word	0x08020f89
 8020f44:	08020f89 	.word	0x08020f89
 8020f48:	08020f89 	.word	0x08020f89
 8020f4c:	08020f89 	.word	0x08020f89
 8020f50:	08020f75 	.word	0x08020f75
 8020f54:	08020f89 	.word	0x08020f89
 8020f58:	08020f89 	.word	0x08020f89
 8020f5c:	08020f89 	.word	0x08020f89
 8020f60:	08020f89 	.word	0x08020f89
 8020f64:	08020f89 	.word	0x08020f89
 8020f68:	08020f89 	.word	0x08020f89
 8020f6c:	08020f89 	.word	0x08020f89
 8020f70:	08020f75 	.word	0x08020f75
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8020f74:	68fb      	ldr	r3, [r7, #12]
 8020f76:	681b      	ldr	r3, [r3, #0]
 8020f78:	3380      	adds	r3, #128	; 0x80
 8020f7a:	681c      	ldr	r4, [r3, #0]
 8020f7c:	69fb      	ldr	r3, [r7, #28]
 8020f7e:	6a3a      	ldr	r2, [r7, #32]
 8020f80:	68b9      	ldr	r1, [r7, #8]
 8020f82:	68f8      	ldr	r0, [r7, #12]
 8020f84:	47a0      	blx	r4
            break;
 8020f86:	e006      	b.n	8020f96 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
            assert(0 && "Unsupported bit depth");
 8020f88:	4b06      	ldr	r3, [pc, #24]	; (8020fa4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8020f8a:	4a07      	ldr	r2, [pc, #28]	; (8020fa8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8020f8c:	f240 3152 	movw	r1, #850	; 0x352
 8020f90:	4806      	ldr	r0, [pc, #24]	; (8020fac <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8020f92:	f00a f8b1 	bl	802b0f8 <__assert_func>
    }
 8020f96:	bf00      	nop
 8020f98:	372c      	adds	r7, #44	; 0x2c
 8020f9a:	46bd      	mov	sp, r7
 8020f9c:	bd90      	pop	{r4, r7, pc}
 8020f9e:	bf00      	nop
 8020fa0:	2000cf72 	.word	0x2000cf72
 8020fa4:	0802c95c 	.word	0x0802c95c
 8020fa8:	0802e3e0 	.word	0x0802e3e0
 8020fac:	0802c97c 	.word	0x0802c97c

08020fb0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8020fb0:	b580      	push	{r7, lr}
 8020fb2:	b084      	sub	sp, #16
 8020fb4:	af00      	add	r7, sp, #0
 8020fb6:	60f8      	str	r0, [r7, #12]
 8020fb8:	60b9      	str	r1, [r7, #8]
 8020fba:	607a      	str	r2, [r7, #4]
 8020fbc:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8020fbe:	68bb      	ldr	r3, [r7, #8]
 8020fc0:	2b00      	cmp	r3, #0
 8020fc2:	d106      	bne.n	8020fd2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8020fc4:	4b11      	ldr	r3, [pc, #68]	; (802100c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8020fc6:	4a12      	ldr	r2, [pc, #72]	; (8021010 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8020fc8:	f44f 7159 	mov.w	r1, #868	; 0x364
 8020fcc:	4811      	ldr	r0, [pc, #68]	; (8021014 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8020fce:	f00a f893 	bl	802b0f8 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8020fd2:	68fb      	ldr	r3, [r7, #12]
 8020fd4:	68ba      	ldr	r2, [r7, #8]
 8020fd6:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8020fd8:	68fb      	ldr	r3, [r7, #12]
 8020fda:	687a      	ldr	r2, [r7, #4]
 8020fdc:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8020fde:	68fb      	ldr	r3, [r7, #12]
 8020fe0:	683a      	ldr	r2, [r7, #0]
 8020fe2:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8020fe4:	687b      	ldr	r3, [r7, #4]
 8020fe6:	2b00      	cmp	r3, #0
 8020fe8:	bf14      	ite	ne
 8020fea:	2301      	movne	r3, #1
 8020fec:	2300      	moveq	r3, #0
 8020fee:	b2da      	uxtb	r2, r3
 8020ff0:	4b09      	ldr	r3, [pc, #36]	; (8021018 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8020ff2:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8020ff4:	683b      	ldr	r3, [r7, #0]
 8020ff6:	2b00      	cmp	r3, #0
 8020ff8:	bf14      	ite	ne
 8020ffa:	2301      	movne	r3, #1
 8020ffc:	2300      	moveq	r3, #0
 8020ffe:	b2da      	uxtb	r2, r3
 8021000:	4b06      	ldr	r3, [pc, #24]	; (802101c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8021002:	701a      	strb	r2, [r3, #0]
    }
 8021004:	bf00      	nop
 8021006:	3710      	adds	r7, #16
 8021008:	46bd      	mov	sp, r7
 802100a:	bd80      	pop	{r7, pc}
 802100c:	0802c9c8 	.word	0x0802c9c8
 8021010:	0802e390 	.word	0x0802e390
 8021014:	0802c97c 	.word	0x0802c97c
 8021018:	2000cf74 	.word	0x2000cf74
 802101c:	2000cf75 	.word	0x2000cf75

08021020 <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 8021020:	b580      	push	{r7, lr}
 8021022:	b082      	sub	sp, #8
 8021024:	af00      	add	r7, sp, #0
 8021026:	6078      	str	r0, [r7, #4]
 8021028:	460b      	mov	r3, r1
 802102a:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 802102c:	687b      	ldr	r3, [r7, #4]
 802102e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021030:	2b00      	cmp	r3, #0
 8021032:	d004      	beq.n	802103e <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 8021034:	687b      	ldr	r3, [r7, #4]
 8021036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021038:	887a      	ldrh	r2, [r7, #2]
 802103a:	4610      	mov	r0, r2
 802103c:	4798      	blx	r3
    }
 802103e:	bf00      	nop
 8021040:	3708      	adds	r7, #8
 8021042:	46bd      	mov	sp, r7
 8021044:	bd80      	pop	{r7, pc}

08021046 <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 8021046:	b580      	push	{r7, lr}
 8021048:	b082      	sub	sp, #8
 802104a:	af00      	add	r7, sp, #0
 802104c:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 802104e:	687b      	ldr	r3, [r7, #4]
 8021050:	685a      	ldr	r2, [r3, #4]
 8021052:	687b      	ldr	r3, [r7, #4]
 8021054:	685b      	ldr	r3, [r3, #4]
 8021056:	681b      	ldr	r3, [r3, #0]
 8021058:	3318      	adds	r3, #24
 802105a:	681b      	ldr	r3, [r3, #0]
 802105c:	4610      	mov	r0, r2
 802105e:	4798      	blx	r3
 8021060:	4603      	mov	r3, r0
    }
 8021062:	4618      	mov	r0, r3
 8021064:	3708      	adds	r7, #8
 8021066:	46bd      	mov	sp, r7
 8021068:	bd80      	pop	{r7, pc}
	...

0802106c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 802106c:	b480      	push	{r7}
 802106e:	b083      	sub	sp, #12
 8021070:	af00      	add	r7, sp, #0
 8021072:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8021074:	687b      	ldr	r3, [r7, #4]
 8021076:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 802107a:	687b      	ldr	r3, [r7, #4]
 802107c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021080:	429a      	cmp	r2, r3
 8021082:	d017      	beq.n	80210b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8021084:	4b1a      	ldr	r3, [pc, #104]	; (80210f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8021086:	781b      	ldrb	r3, [r3, #0]
 8021088:	2b00      	cmp	r3, #0
 802108a:	d12a      	bne.n	80210e2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 802108c:	4b19      	ldr	r3, [pc, #100]	; (80210f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 802108e:	881a      	ldrh	r2, [r3, #0]
 8021090:	4b19      	ldr	r3, [pc, #100]	; (80210f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8021092:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8021094:	4b19      	ldr	r3, [pc, #100]	; (80210fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8021096:	881a      	ldrh	r2, [r3, #0]
 8021098:	4b19      	ldr	r3, [pc, #100]	; (8021100 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 802109a:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 802109c:	4b16      	ldr	r3, [pc, #88]	; (80210f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 802109e:	881a      	ldrh	r2, [r3, #0]
 80210a0:	4b16      	ldr	r3, [pc, #88]	; (80210fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80210a2:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80210a4:	4b16      	ldr	r3, [pc, #88]	; (8021100 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80210a6:	881a      	ldrh	r2, [r3, #0]
 80210a8:	4b12      	ldr	r3, [pc, #72]	; (80210f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80210aa:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80210ac:	4b10      	ldr	r3, [pc, #64]	; (80210f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80210ae:	2201      	movs	r2, #1
 80210b0:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80210b2:	e016      	b.n	80210e2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80210b4:	4b0e      	ldr	r3, [pc, #56]	; (80210f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80210b6:	781b      	ldrb	r3, [r3, #0]
 80210b8:	2b00      	cmp	r3, #0
 80210ba:	d012      	beq.n	80210e2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80210bc:	4b0f      	ldr	r3, [pc, #60]	; (80210fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80210be:	881a      	ldrh	r2, [r3, #0]
 80210c0:	4b0d      	ldr	r3, [pc, #52]	; (80210f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80210c2:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80210c4:	4b0b      	ldr	r3, [pc, #44]	; (80210f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80210c6:	881a      	ldrh	r2, [r3, #0]
 80210c8:	4b0d      	ldr	r3, [pc, #52]	; (8021100 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80210ca:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80210cc:	4b0c      	ldr	r3, [pc, #48]	; (8021100 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80210ce:	881a      	ldrh	r2, [r3, #0]
 80210d0:	4b0a      	ldr	r3, [pc, #40]	; (80210fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80210d2:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80210d4:	4b08      	ldr	r3, [pc, #32]	; (80210f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80210d6:	881a      	ldrh	r2, [r3, #0]
 80210d8:	4b06      	ldr	r3, [pc, #24]	; (80210f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80210da:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80210dc:	4b04      	ldr	r3, [pc, #16]	; (80210f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80210de:	2200      	movs	r2, #0
 80210e0:	701a      	strb	r2, [r3, #0]
    }
 80210e2:	bf00      	nop
 80210e4:	370c      	adds	r7, #12
 80210e6:	46bd      	mov	sp, r7
 80210e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210ec:	4770      	bx	lr
 80210ee:	bf00      	nop
 80210f0:	2000cf6e 	.word	0x2000cf6e
 80210f4:	2000cf6a 	.word	0x2000cf6a
 80210f8:	2000cf70 	.word	0x2000cf70
 80210fc:	2000cf6c 	.word	0x2000cf6c
 8021100:	2000cf72 	.word	0x2000cf72

08021104 <_ZN10STM32F7HAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8021104:	b580      	push	{r7, lr}
 8021106:	b082      	sub	sp, #8
 8021108:	af00      	add	r7, sp, #0
 802110a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 802110c:	687b      	ldr	r3, [r7, #4]
 802110e:	4618      	mov	r0, r3
 8021110:	f000 fe5c 	bl	8021dcc <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8021114:	bf00      	nop
 8021116:	3708      	adds	r7, #8
 8021118:	46bd      	mov	sp, r7
 802111a:	bd80      	pop	{r7, pc}

0802111c <_ZNK10STM32F7HAL17getTFTFrameBufferEv>:
/* USER CODE END user includes */

extern LTDC_HandleTypeDef hltdc;

uint16_t* STM32F7HAL::getTFTFrameBuffer() const
{
 802111c:	b480      	push	{r7}
 802111e:	b083      	sub	sp, #12
 8021120:	af00      	add	r7, sp, #0
 8021122:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8021124:	4b03      	ldr	r3, [pc, #12]	; (8021134 <_ZNK10STM32F7HAL17getTFTFrameBufferEv+0x18>)
 8021126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8021128:	4618      	mov	r0, r3
 802112a:	370c      	adds	r7, #12
 802112c:	46bd      	mov	sp, r7
 802112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021132:	4770      	bx	lr
 8021134:	40016884 	.word	0x40016884

08021138 <_ZN10STM32F7HAL17setTFTFrameBufferEPt>:

void STM32F7HAL::setTFTFrameBuffer(uint16_t* adr)
{
 8021138:	b480      	push	{r7}
 802113a:	b083      	sub	sp, #12
 802113c:	af00      	add	r7, sp, #0
 802113e:	6078      	str	r0, [r7, #4]
 8021140:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8021142:	4a06      	ldr	r2, [pc, #24]	; (802115c <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0x24>)
 8021144:	683b      	ldr	r3, [r7, #0]
 8021146:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8021148:	4b05      	ldr	r3, [pc, #20]	; (8021160 <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0x28>)
 802114a:	2201      	movs	r2, #1
 802114c:	625a      	str	r2, [r3, #36]	; 0x24
}
 802114e:	bf00      	nop
 8021150:	370c      	adds	r7, #12
 8021152:	46bd      	mov	sp, r7
 8021154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021158:	4770      	bx	lr
 802115a:	bf00      	nop
 802115c:	40016884 	.word	0x40016884
 8021160:	40016800 	.word	0x40016800

08021164 <_ZN10STM32F7HAL17getTFTCurrentLineEv>:

uint16_t STM32F7HAL::getTFTCurrentLine()
{
 8021164:	b480      	push	{r7}
 8021166:	b085      	sub	sp, #20
 8021168:	af00      	add	r7, sp, #0
 802116a:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 802116c:	4b0d      	ldr	r3, [pc, #52]	; (80211a4 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x40>)
 802116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021170:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8021172:	4b0c      	ldr	r3, [pc, #48]	; (80211a4 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x40>)
 8021174:	68db      	ldr	r3, [r3, #12]
 8021176:	b29b      	uxth	r3, r3
 8021178:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802117c:	b29b      	uxth	r3, r3
 802117e:	3301      	adds	r3, #1
 8021180:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8021182:	89fa      	ldrh	r2, [r7, #14]
 8021184:	89bb      	ldrh	r3, [r7, #12]
 8021186:	429a      	cmp	r2, r3
 8021188:	d201      	bcs.n	802118e <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 802118a:	2300      	movs	r3, #0
 802118c:	e003      	b.n	8021196 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 802118e:	89fa      	ldrh	r2, [r7, #14]
 8021190:	89bb      	ldrh	r3, [r7, #12]
 8021192:	1ad3      	subs	r3, r2, r3
 8021194:	b29b      	uxth	r3, r3
    }
}
 8021196:	4618      	mov	r0, r3
 8021198:	3714      	adds	r7, #20
 802119a:	46bd      	mov	sp, r7
 802119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211a0:	4770      	bx	lr
 80211a2:	bf00      	nop
 80211a4:	40016800 	.word	0x40016800

080211a8 <_ZN10STM32F7HAL19configureInterruptsEv>:

void STM32F7HAL::configureInterrupts()
{
 80211a8:	b580      	push	{r7, lr}
 80211aa:	b082      	sub	sp, #8
 80211ac:	af00      	add	r7, sp, #0
 80211ae:	6078      	str	r0, [r7, #4]
    // These two priorities MUST be EQUAL, and MUST be functionally lower than RTOS scheduler interrupts.
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80211b0:	2109      	movs	r1, #9
 80211b2:	205a      	movs	r0, #90	; 0x5a
 80211b4:	f7ff fdd2 	bl	8020d5c <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80211b8:	2109      	movs	r1, #9
 80211ba:	2058      	movs	r0, #88	; 0x58
 80211bc:	f7ff fdce 	bl	8020d5c <__NVIC_SetPriority>
}
 80211c0:	bf00      	nop
 80211c2:	3708      	adds	r7, #8
 80211c4:	46bd      	mov	sp, r7
 80211c6:	bd80      	pop	{r7, pc}

080211c8 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;

/* Enable LCD line interrupt, when entering video (active) area */
void STM32F7HAL::enableLCDControllerInterrupt()
{
 80211c8:	b580      	push	{r7, lr}
 80211ca:	b082      	sub	sp, #8
 80211cc:	af00      	add	r7, sp, #0
 80211ce:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80211d0:	4b12      	ldr	r3, [pc, #72]	; (802121c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x54>)
 80211d2:	68db      	ldr	r3, [r3, #12]
 80211d4:	b29b      	uxth	r3, r3
 80211d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80211da:	b29b      	uxth	r3, r3
 80211dc:	3b01      	subs	r3, #1
 80211de:	b29a      	uxth	r2, r3
 80211e0:	4b0f      	ldr	r3, [pc, #60]	; (8021220 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x58>)
 80211e2:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80211e4:	4b0d      	ldr	r3, [pc, #52]	; (802121c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x54>)
 80211e6:	691b      	ldr	r3, [r3, #16]
 80211e8:	b29b      	uxth	r3, r3
 80211ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80211ee:	b29b      	uxth	r3, r3
 80211f0:	3b01      	subs	r3, #1
 80211f2:	b29a      	uxth	r2, r3
 80211f4:	4b0b      	ldr	r3, [pc, #44]	; (8021224 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x5c>)
 80211f6:	801a      	strh	r2, [r3, #0]

    HAL_LTDC_ProgramLineEvent(&hltdc, lcd_int_active_line);
 80211f8:	4b09      	ldr	r3, [pc, #36]	; (8021220 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x58>)
 80211fa:	881b      	ldrh	r3, [r3, #0]
 80211fc:	4619      	mov	r1, r3
 80211fe:	480a      	ldr	r0, [pc, #40]	; (8021228 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 8021200:	f7e6 fe6c 	bl	8007edc <HAL_LTDC_ProgramLineEvent>
    __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_LI|LTDC_IT_FU); /* Enable line and FIFO underrun interrupts */
 8021204:	4b08      	ldr	r3, [pc, #32]	; (8021228 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 8021206:	681b      	ldr	r3, [r3, #0]
 8021208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802120a:	4b07      	ldr	r3, [pc, #28]	; (8021228 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 802120c:	681b      	ldr	r3, [r3, #0]
 802120e:	f042 0203 	orr.w	r2, r2, #3
 8021212:	635a      	str	r2, [r3, #52]	; 0x34
}
 8021214:	bf00      	nop
 8021216:	3708      	adds	r7, #8
 8021218:	46bd      	mov	sp, r7
 802121a:	bd80      	pop	{r7, pc}
 802121c:	40016800 	.word	0x40016800
 8021220:	2000cf22 	.word	0x2000cf22
 8021224:	2000cf24 	.word	0x2000cf24
 8021228:	2000cdf0 	.word	0x2000cdf0

0802122c <_ZN10STM32F7HAL17disableInterruptsEv>:

void STM32F7HAL::disableInterrupts()
{
 802122c:	b580      	push	{r7, lr}
 802122e:	b082      	sub	sp, #8
 8021230:	af00      	add	r7, sp, #0
 8021232:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(LTDC_IRQn);
 8021234:	2058      	movs	r0, #88	; 0x58
 8021236:	f7ff fd6d 	bl	8020d14 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(DMA2D_IRQn);
 802123a:	205a      	movs	r0, #90	; 0x5a
 802123c:	f7ff fd6a 	bl	8020d14 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_ER_IRQn);
 8021240:	2059      	movs	r0, #89	; 0x59
 8021242:	f7ff fd67 	bl	8020d14 <__NVIC_DisableIRQ>
}
 8021246:	bf00      	nop
 8021248:	3708      	adds	r7, #8
 802124a:	46bd      	mov	sp, r7
 802124c:	bd80      	pop	{r7, pc}

0802124e <_ZN10STM32F7HAL16enableInterruptsEv>:

void STM32F7HAL::enableInterrupts()
{
 802124e:	b580      	push	{r7, lr}
 8021250:	b082      	sub	sp, #8
 8021252:	af00      	add	r7, sp, #0
 8021254:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(LTDC_IRQn);
 8021256:	2058      	movs	r0, #88	; 0x58
 8021258:	f7ff fd3c 	bl	8020cd4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(DMA2D_IRQn);
 802125c:	205a      	movs	r0, #90	; 0x5a
 802125e:	f7ff fd39 	bl	8020cd4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_ER_IRQn);
 8021262:	2059      	movs	r0, #89	; 0x59
 8021264:	f7ff fd36 	bl	8020cd4 <__NVIC_EnableIRQ>
}
 8021268:	bf00      	nop
 802126a:	3708      	adds	r7, #8
 802126c:	46bd      	mov	sp, r7
 802126e:	bd80      	pop	{r7, pc}

08021270 <_ZN10STM32F7HAL16flushFrameBufferERKN8touchgfx4RectE>:

void STM32F7HAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8021270:	b580      	push	{r7, lr}
 8021272:	b082      	sub	sp, #8
 8021274:	af00      	add	r7, sp, #0
 8021276:	6078      	str	r0, [r7, #4]
 8021278:	6039      	str	r1, [r7, #0]
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // the CPU to read back the latest pixels produced by the h/w accelerator
    // thus we have to both flush and invalidate the Dcache prior to letting
    // DMA2D accessing it. That's done using SCB_CleanInvalidateDCache().
    HAL::flushFrameBuffer(rect);
 802127a:	687b      	ldr	r3, [r7, #4]
 802127c:	6839      	ldr	r1, [r7, #0]
 802127e:	4618      	mov	r0, r3
 8021280:	f000 fdaa 	bl	8021dd8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8021284:	bf00      	nop
 8021286:	3708      	adds	r7, #8
 8021288:	46bd      	mov	sp, r7
 802128a:	bd80      	pop	{r7, pc}

0802128c <HAL_LTDC_LineEventCallback>:

extern "C"
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 802128c:	b580      	push	{r7, lr}
 802128e:	b082      	sub	sp, #8
 8021290:	af00      	add	r7, sp, #0
 8021292:	6078      	str	r0, [r7, #4]
    if (LTDC->LIPCR == lcd_int_active_line)
 8021294:	4b1a      	ldr	r3, [pc, #104]	; (8021300 <HAL_LTDC_LineEventCallback+0x74>)
 8021296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021298:	4a1a      	ldr	r2, [pc, #104]	; (8021304 <HAL_LTDC_LineEventCallback+0x78>)
 802129a:	8812      	ldrh	r2, [r2, #0]
 802129c:	4293      	cmp	r3, r2
 802129e:	bf0c      	ite	eq
 80212a0:	2301      	moveq	r3, #1
 80212a2:	2300      	movne	r3, #0
 80212a4:	b2db      	uxtb	r3, r3
 80212a6:	2b00      	cmp	r3, #0
 80212a8:	d017      	beq.n	80212da <HAL_LTDC_LineEventCallback+0x4e>
    {
        //entering active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80212aa:	4b17      	ldr	r3, [pc, #92]	; (8021308 <HAL_LTDC_LineEventCallback+0x7c>)
 80212ac:	881b      	ldrh	r3, [r3, #0]
 80212ae:	4619      	mov	r1, r3
 80212b0:	6878      	ldr	r0, [r7, #4]
 80212b2:	f7e6 fe13 	bl	8007edc <HAL_LTDC_ProgramLineEvent>
        HAL::getInstance()->vSync();
 80212b6:	f7f1 f87d 	bl	80123b4 <_ZN8touchgfx3HAL11getInstanceEv>
 80212ba:	4603      	mov	r3, r0
 80212bc:	4618      	mov	r0, r3
 80212be:	f7ff fdae 	bl	8020e1e <_ZN8touchgfx3HAL5vSyncEv>
        OSWrappers::signalVSync();
 80212c2:	f7f7 f889 	bl	80183d8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
        // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
        // Note: task will also swap when it wakes up, but that operation is guarded and will not have
        // any effect if already swapped.
        HAL::getInstance()->swapFrameBuffers();
 80212c6:	f7f1 f875 	bl	80123b4 <_ZN8touchgfx3HAL11getInstanceEv>
 80212ca:	4603      	mov	r3, r0
 80212cc:	4618      	mov	r0, r3
 80212ce:	f001 faf7 	bl	80228c0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        GPIO::set(GPIO::VSYNC_FREQ);
 80212d2:	2000      	movs	r0, #0
 80212d4:	f000 f9bf 	bl	8021656 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
        //exiting active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
        GPIO::clear(GPIO::VSYNC_FREQ);
        HAL::getInstance()->frontPorchEntered();
    }
}
 80212d8:	e00e      	b.n	80212f8 <HAL_LTDC_LineEventCallback+0x6c>
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80212da:	4b0a      	ldr	r3, [pc, #40]	; (8021304 <HAL_LTDC_LineEventCallback+0x78>)
 80212dc:	881b      	ldrh	r3, [r3, #0]
 80212de:	4619      	mov	r1, r3
 80212e0:	6878      	ldr	r0, [r7, #4]
 80212e2:	f7e6 fdfb 	bl	8007edc <HAL_LTDC_ProgramLineEvent>
        GPIO::clear(GPIO::VSYNC_FREQ);
 80212e6:	2000      	movs	r0, #0
 80212e8:	f000 f9c0 	bl	802166c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        HAL::getInstance()->frontPorchEntered();
 80212ec:	f7f1 f862 	bl	80123b4 <_ZN8touchgfx3HAL11getInstanceEv>
 80212f0:	4603      	mov	r3, r0
 80212f2:	4618      	mov	r0, r3
 80212f4:	f7ff fd74 	bl	8020de0 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
}
 80212f8:	bf00      	nop
 80212fa:	3708      	adds	r7, #8
 80212fc:	46bd      	mov	sp, r7
 80212fe:	bd80      	pop	{r7, pc}
 8021300:	40016800 	.word	0x40016800
 8021304:	2000cf22 	.word	0x2000cf22
 8021308:	2000cf24 	.word	0x2000cf24

0802130c <_ZN8touchgfx22STM32F7Instrumentation4initEv>:
namespace touchgfx
{
static TIM_HandleTypeDef htim1;

void STM32F7Instrumentation::init()
{
 802130c:	b580      	push	{r7, lr}
 802130e:	b0a4      	sub	sp, #144	; 0x90
 8021310:	af00      	add	r7, sp, #0
 8021312:	6078      	str	r0, [r7, #4]
   RCC_ClkInitTypeDef clkconfig;
    uint32_t uwTimclock, uwAPB1Prescaler = 0U;
 8021314:	2300      	movs	r3, #0
 8021316:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    uint32_t pFLatency;

    __TIM2_CLK_ENABLE();
 802131a:	4b84      	ldr	r3, [pc, #528]	; (802152c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 802131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802131e:	4a83      	ldr	r2, [pc, #524]	; (802152c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 8021320:	f043 0301 	orr.w	r3, r3, #1
 8021324:	6413      	str	r3, [r2, #64]	; 0x40
 8021326:	4b81      	ldr	r3, [pc, #516]	; (802152c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 8021328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802132a:	f003 0301 	and.w	r3, r3, #1
 802132e:	60bb      	str	r3, [r7, #8]
 8021330:	68bb      	ldr	r3, [r7, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8021332:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8021336:	2200      	movs	r2, #0
 8021338:	601a      	str	r2, [r3, #0]
 802133a:	605a      	str	r2, [r3, #4]
 802133c:	609a      	str	r2, [r3, #8]
 802133e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021340:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021344:	2200      	movs	r2, #0
 8021346:	601a      	str	r2, [r3, #0]
 8021348:	605a      	str	r2, [r3, #4]
 802134a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 802134c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8021350:	2200      	movs	r2, #0
 8021352:	601a      	str	r2, [r3, #0]
 8021354:	605a      	str	r2, [r3, #4]
 8021356:	609a      	str	r2, [r3, #8]
 8021358:	60da      	str	r2, [r3, #12]
 802135a:	611a      	str	r2, [r3, #16]
 802135c:	615a      	str	r2, [r3, #20]
 802135e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8021360:	f107 030c 	add.w	r3, r7, #12
 8021364:	222c      	movs	r2, #44	; 0x2c
 8021366:	2100      	movs	r1, #0
 8021368:	4618      	mov	r0, r3
 802136a:	f009 ff40 	bl	802b1ee <memset>
  htim1.Instance = TIM1;
 802136e:	4b70      	ldr	r3, [pc, #448]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8021370:	4a70      	ldr	r2, [pc, #448]	; (8021534 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x228>)
 8021372:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8021374:	4b6e      	ldr	r3, [pc, #440]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8021376:	2200      	movs	r2, #0
 8021378:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 802137a:	4b6d      	ldr	r3, [pc, #436]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 802137c:	2200      	movs	r2, #0
 802137e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8021380:	4b6b      	ldr	r3, [pc, #428]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8021382:	2200      	movs	r2, #0
 8021384:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021386:	4b6a      	ldr	r3, [pc, #424]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8021388:	2200      	movs	r2, #0
 802138a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 802138c:	4b68      	ldr	r3, [pc, #416]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 802138e:	2200      	movs	r2, #0
 8021390:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021392:	4b67      	ldr	r3, [pc, #412]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8021394:	2200      	movs	r2, #0
 8021396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8021398:	4865      	ldr	r0, [pc, #404]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 802139a:	f7ea fe57 	bl	800c04c <HAL_TIM_Base_Init>
 802139e:	4603      	mov	r3, r0
 80213a0:	2b00      	cmp	r3, #0
 80213a2:	bf14      	ite	ne
 80213a4:	2301      	movne	r3, #1
 80213a6:	2300      	moveq	r3, #0
 80213a8:	b2db      	uxtb	r3, r3
 80213aa:	2b00      	cmp	r3, #0
 80213ac:	d001      	beq.n	80213b2 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xa6>
  {
    Error_Handler( );
 80213ae:	f7e0 fae7 	bl	8001980 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80213b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80213b6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80213b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80213bc:	4619      	mov	r1, r3
 80213be:	485c      	ldr	r0, [pc, #368]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80213c0:	f7eb f926 	bl	800c610 <HAL_TIM_ConfigClockSource>
 80213c4:	4603      	mov	r3, r0
 80213c6:	2b00      	cmp	r3, #0
 80213c8:	bf14      	ite	ne
 80213ca:	2301      	movne	r3, #1
 80213cc:	2300      	moveq	r3, #0
 80213ce:	b2db      	uxtb	r3, r3
 80213d0:	2b00      	cmp	r3, #0
 80213d2:	d001      	beq.n	80213d8 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xcc>
  {
    Error_Handler( );
 80213d4:	f7e0 fad4 	bl	8001980 <Error_Handler>
  }

  htim1.Instance = TIM1;
 80213d8:	4b55      	ldr	r3, [pc, #340]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80213da:	4a56      	ldr	r2, [pc, #344]	; (8021534 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x228>)
 80213dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80213de:	4b54      	ldr	r3, [pc, #336]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80213e0:	2200      	movs	r2, #0
 80213e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80213e4:	4b52      	ldr	r3, [pc, #328]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80213e6:	2200      	movs	r2, #0
 80213e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80213ea:	4b51      	ldr	r3, [pc, #324]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80213ec:	2200      	movs	r2, #0
 80213ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80213f0:	4b4f      	ldr	r3, [pc, #316]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80213f2:	2200      	movs	r2, #0
 80213f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80213f6:	4b4e      	ldr	r3, [pc, #312]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80213f8:	2200      	movs	r2, #0
 80213fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80213fc:	4b4c      	ldr	r3, [pc, #304]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80213fe:	2200      	movs	r2, #0
 8021400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8021402:	484b      	ldr	r0, [pc, #300]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8021404:	f7ea fea2 	bl	800c14c <HAL_TIM_PWM_Init>
 8021408:	4603      	mov	r3, r0
 802140a:	2b00      	cmp	r3, #0
 802140c:	bf14      	ite	ne
 802140e:	2301      	movne	r3, #1
 8021410:	2300      	moveq	r3, #0
 8021412:	b2db      	uxtb	r3, r3
 8021414:	2b00      	cmp	r3, #0
 8021416:	d001      	beq.n	802141c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x110>
  {
    Error_Handler( );
 8021418:	f7e0 fab2 	bl	8001980 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802141c:	2300      	movs	r3, #0
 802141e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8021420:	2300      	movs	r3, #0
 8021422:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021424:	2300      	movs	r3, #0
 8021426:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8021428:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802142c:	4619      	mov	r1, r3
 802142e:	4840      	ldr	r0, [pc, #256]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8021430:	f7eb fd68 	bl	800cf04 <HAL_TIMEx_MasterConfigSynchronization>
 8021434:	4603      	mov	r3, r0
 8021436:	2b00      	cmp	r3, #0
 8021438:	bf14      	ite	ne
 802143a:	2301      	movne	r3, #1
 802143c:	2300      	moveq	r3, #0
 802143e:	b2db      	uxtb	r3, r3
 8021440:	2b00      	cmp	r3, #0
 8021442:	d001      	beq.n	8021448 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x13c>
  {
    Error_Handler( );
 8021444:	f7e0 fa9c 	bl	8001980 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8021448:	2360      	movs	r3, #96	; 0x60
 802144a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 802144c:	2300      	movs	r3, #0
 802144e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8021450:	2300      	movs	r3, #0
 8021452:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8021454:	2300      	movs	r3, #0
 8021456:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8021458:	2300      	movs	r3, #0
 802145a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 802145c:	2300      	movs	r3, #0
 802145e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8021460:	2300      	movs	r3, #0
 8021462:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8021464:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8021468:	2200      	movs	r2, #0
 802146a:	4619      	mov	r1, r3
 802146c:	4830      	ldr	r0, [pc, #192]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 802146e:	f7ea ffb7 	bl	800c3e0 <HAL_TIM_PWM_ConfigChannel>
 8021472:	4603      	mov	r3, r0
 8021474:	2b00      	cmp	r3, #0
 8021476:	bf14      	ite	ne
 8021478:	2301      	movne	r3, #1
 802147a:	2300      	moveq	r3, #0
 802147c:	b2db      	uxtb	r3, r3
 802147e:	2b00      	cmp	r3, #0
 8021480:	d001      	beq.n	8021486 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x17a>
  {
    Error_Handler( );
 8021482:	f7e0 fa7d 	bl	8001980 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8021486:	2300      	movs	r3, #0
 8021488:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 802148a:	2300      	movs	r3, #0
 802148c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 802148e:	2300      	movs	r3, #0
 8021490:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.DeadTime = 0;
 8021492:	2300      	movs	r3, #0
 8021494:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8021496:	2300      	movs	r3, #0
 8021498:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 802149a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802149e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80214a0:	2300      	movs	r3, #0
 80214a2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80214a4:	2300      	movs	r3, #0
 80214a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80214a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80214ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2Filter = 0;
 80214ae:	2300      	movs	r3, #0
 80214b0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80214b2:	2300      	movs	r3, #0
 80214b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80214b6:	f107 030c 	add.w	r3, r7, #12
 80214ba:	4619      	mov	r1, r3
 80214bc:	481c      	ldr	r0, [pc, #112]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80214be:	f7eb fd7d 	bl	800cfbc <HAL_TIMEx_ConfigBreakDeadTime>
 80214c2:	4603      	mov	r3, r0
 80214c4:	2b00      	cmp	r3, #0
 80214c6:	bf14      	ite	ne
 80214c8:	2301      	movne	r3, #1
 80214ca:	2300      	moveq	r3, #0
 80214cc:	b2db      	uxtb	r3, r3
 80214ce:	2b00      	cmp	r3, #0
 80214d0:	d001      	beq.n	80214d6 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x1ca>
  {
    Error_Handler( );
 80214d2:	f7e0 fa55 	bl	8001980 <Error_Handler>
  }

    /* Get clock configuration */
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80214d6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80214da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80214de:	4611      	mov	r1, r2
 80214e0:	4618      	mov	r0, r3
 80214e2:	f7e8 f8c7 	bl	8009674 <HAL_RCC_GetClockConfig>

    /* TIM2 is on APB1 bus */
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80214e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80214ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80214ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80214f2:	2b00      	cmp	r3, #0
 80214f4:	d104      	bne.n	8021500 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x1f4>
        uwTimclock = HAL_RCC_GetPCLK1Freq();
 80214f6:	f7e8 f895 	bl	8009624 <HAL_RCC_GetPCLK1Freq>
 80214fa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80214fe:	e005      	b.n	802150c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x200>
    else
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8021500:	f7e8 f890 	bl	8009624 <HAL_RCC_GetPCLK1Freq>
 8021504:	4603      	mov	r3, r0
 8021506:	005b      	lsls	r3, r3, #1
 8021508:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    m_sysclkRatio = HAL_RCC_GetHCLKFreq() / uwTimclock;
 802150c:	f7e8 f87e 	bl	800960c <HAL_RCC_GetHCLKFreq>
 8021510:	4602      	mov	r2, r0
 8021512:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021516:	fbb2 f2f3 	udiv	r2, r2, r3
 802151a:	687b      	ldr	r3, [r7, #4]
 802151c:	60da      	str	r2, [r3, #12]

    HAL_TIM_Base_Start(&htim1);
 802151e:	4804      	ldr	r0, [pc, #16]	; (8021530 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8021520:	f7ea fdc0 	bl	800c0a4 <HAL_TIM_Base_Start>
}
 8021524:	bf00      	nop
 8021526:	3790      	adds	r7, #144	; 0x90
 8021528:	46bd      	mov	sp, r7
 802152a:	bd80      	pop	{r7, pc}
 802152c:	40023800 	.word	0x40023800
 8021530:	2000cf28 	.word	0x2000cf28
 8021534:	40010000 	.word	0x40010000

08021538 <_ZN8touchgfx22STM32F7Instrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int STM32F7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 8021538:	b480      	push	{r7}
 802153a:	b085      	sub	sp, #20
 802153c:	af00      	add	r7, sp, #0
 802153e:	60f8      	str	r0, [r7, #12]
 8021540:	60b9      	str	r1, [r7, #8]
 8021542:	607a      	str	r2, [r7, #4]
 8021544:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8021546:	687a      	ldr	r2, [r7, #4]
 8021548:	68bb      	ldr	r3, [r7, #8]
 802154a:	1ad2      	subs	r2, r2, r3
 802154c:	683b      	ldr	r3, [r7, #0]
 802154e:	085b      	lsrs	r3, r3, #1
 8021550:	441a      	add	r2, r3
 8021552:	683b      	ldr	r3, [r7, #0]
 8021554:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8021558:	4618      	mov	r0, r3
 802155a:	3714      	adds	r7, #20
 802155c:	46bd      	mov	sp, r7
 802155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021562:	4770      	bx	lr

08021564 <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv>:

unsigned int STM32F7Instrumentation::getCPUCycles()
{
 8021564:	b480      	push	{r7}
 8021566:	b083      	sub	sp, #12
 8021568:	af00      	add	r7, sp, #0
 802156a:	6078      	str	r0, [r7, #4]
    return __HAL_TIM_GET_COUNTER(&htim1) * m_sysclkRatio;
 802156c:	4b06      	ldr	r3, [pc, #24]	; (8021588 <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv+0x24>)
 802156e:	681b      	ldr	r3, [r3, #0]
 8021570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021572:	687a      	ldr	r2, [r7, #4]
 8021574:	68d2      	ldr	r2, [r2, #12]
 8021576:	fb02 f303 	mul.w	r3, r2, r3
}
 802157a:	4618      	mov	r0, r3
 802157c:	370c      	adds	r7, #12
 802157e:	46bd      	mov	sp, r7
 8021580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021584:	4770      	bx	lr
 8021586:	bf00      	nop
 8021588:	2000cf28 	.word	0x2000cf28

0802158c <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb>:

void STM32F7Instrumentation::setMCUActive(bool active)
{
 802158c:	b580      	push	{r7, lr}
 802158e:	b082      	sub	sp, #8
 8021590:	af00      	add	r7, sp, #0
 8021592:	6078      	str	r0, [r7, #4]
 8021594:	460b      	mov	r3, r1
 8021596:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 8021598:	78fb      	ldrb	r3, [r7, #3]
 802159a:	2b00      	cmp	r3, #0
 802159c:	d00f      	beq.n	80215be <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x32>
    {
        cc_consumed += getCPUCycles() - cc_in;
 802159e:	687b      	ldr	r3, [r7, #4]
 80215a0:	681b      	ldr	r3, [r3, #0]
 80215a2:	3310      	adds	r3, #16
 80215a4:	681b      	ldr	r3, [r3, #0]
 80215a6:	6878      	ldr	r0, [r7, #4]
 80215a8:	4798      	blx	r3
 80215aa:	4602      	mov	r2, r0
 80215ac:	687b      	ldr	r3, [r7, #4]
 80215ae:	689b      	ldr	r3, [r3, #8]
 80215b0:	1ad2      	subs	r2, r2, r3
 80215b2:	687b      	ldr	r3, [r7, #4]
 80215b4:	685b      	ldr	r3, [r3, #4]
 80215b6:	441a      	add	r2, r3
 80215b8:	687b      	ldr	r3, [r7, #4]
 80215ba:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80215bc:	e008      	b.n	80215d0 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x44>
        cc_in = getCPUCycles();
 80215be:	687b      	ldr	r3, [r7, #4]
 80215c0:	681b      	ldr	r3, [r3, #0]
 80215c2:	3310      	adds	r3, #16
 80215c4:	681b      	ldr	r3, [r3, #0]
 80215c6:	6878      	ldr	r0, [r7, #4]
 80215c8:	4798      	blx	r3
 80215ca:	4602      	mov	r2, r0
 80215cc:	687b      	ldr	r3, [r7, #4]
 80215ce:	609a      	str	r2, [r3, #8]
}
 80215d0:	bf00      	nop
 80215d2:	3708      	adds	r7, #8
 80215d4:	46bd      	mov	sp, r7
 80215d6:	bd80      	pop	{r7, pc}

080215d8 <_ZN8touchgfx22STM32F7TouchController4initEv>:
}

using namespace touchgfx;

void STM32F7TouchController::init()
{
 80215d8:	b590      	push	{r4, r7, lr}
 80215da:	b083      	sub	sp, #12
 80215dc:	af00      	add	r7, sp, #0
 80215de:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN F4TouchController_init */

  /* Add code for touch controller Initialization */
   BSP_TS_Init(LCD_GetXSize(), LCD_GetYSize());
 80215e0:	f7fe f8b8 	bl	801f754 <LCD_GetXSize>
 80215e4:	4603      	mov	r3, r0
 80215e6:	b29c      	uxth	r4, r3
 80215e8:	f7fe f8bd 	bl	801f766 <LCD_GetYSize>
 80215ec:	4603      	mov	r3, r0
 80215ee:	b29b      	uxth	r3, r3
 80215f0:	4619      	mov	r1, r3
 80215f2:	4620      	mov	r0, r4
 80215f4:	f7e2 f86a 	bl	80036cc <BSP_TS_Init>

/* USER CODE END F4TouchController_init */
}
 80215f8:	bf00      	nop
 80215fa:	370c      	adds	r7, #12
 80215fc:	46bd      	mov	sp, r7
 80215fe:	bd90      	pop	{r4, r7, pc}

08021600 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_>:

bool STM32F7TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8021600:	b580      	push	{r7, lr}
 8021602:	b090      	sub	sp, #64	; 0x40
 8021604:	af00      	add	r7, sp, #0
 8021606:	60f8      	str	r0, [r7, #12]
 8021608:	60b9      	str	r1, [r7, #8]
 802160a:	607a      	str	r2, [r7, #4]
/* USER CODE BEGIN  F4TouchController_sampleTouch  */

	TS_StateTypeDef state = { 0 };
 802160c:	f107 0314 	add.w	r3, r7, #20
 8021610:	222c      	movs	r2, #44	; 0x2c
 8021612:	2100      	movs	r1, #0
 8021614:	4618      	mov	r0, r3
 8021616:	f009 fdea 	bl	802b1ee <memset>
    BSP_TS_GetState(&state);
 802161a:	f107 0314 	add.w	r3, r7, #20
 802161e:	4618      	mov	r0, r3
 8021620:	f7e2 f894 	bl	800374c <BSP_TS_GetState>
    if (state.touchDetected)
 8021624:	7d3b      	ldrb	r3, [r7, #20]
 8021626:	2b00      	cmp	r3, #0
 8021628:	d009      	beq.n	802163e <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_+0x3e>
    {
        x = state.touchX[0];
 802162a:	8afb      	ldrh	r3, [r7, #22]
 802162c:	461a      	mov	r2, r3
 802162e:	68bb      	ldr	r3, [r7, #8]
 8021630:	601a      	str	r2, [r3, #0]
        y = state.touchY[0];
 8021632:	8c3b      	ldrh	r3, [r7, #32]
 8021634:	461a      	mov	r2, r3
 8021636:	687b      	ldr	r3, [r7, #4]
 8021638:	601a      	str	r2, [r3, #0]

        return true;
 802163a:	2301      	movs	r3, #1
 802163c:	e000      	b.n	8021640 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_+0x40>
    }
    return false; 
 802163e:	2300      	movs	r3, #0

/* USER CODE END F4TouchController_sampleTouch  */
}
 8021640:	4618      	mov	r0, r3
 8021642:	3740      	adds	r7, #64	; 0x40
 8021644:	46bd      	mov	sp, r7
 8021646:	bd80      	pop	{r7, pc}

08021648 <_ZN8touchgfx4GPIO4initEv>:
/* USER CODE END user includes */

using namespace touchgfx;

void GPIO::init()
{
 8021648:	b480      	push	{r7}
 802164a:	af00      	add	r7, sp, #0
  
    /* USER CODE BEGIN GPIO::init */

    /* USER CODE END GPIO::init */
}
 802164c:	bf00      	nop
 802164e:	46bd      	mov	sp, r7
 8021650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021654:	4770      	bx	lr

08021656 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

void GPIO::set(GPIO::GPIO_ID id)
{
 8021656:	b480      	push	{r7}
 8021658:	b083      	sub	sp, #12
 802165a:	af00      	add	r7, sp, #0
 802165c:	4603      	mov	r3, r0
 802165e:	71fb      	strb	r3, [r7, #7]
  
    /* USER CODE BEGIN GPIO::set */

    /* USER CODE END GPIO::set */
}
 8021660:	bf00      	nop
 8021662:	370c      	adds	r7, #12
 8021664:	46bd      	mov	sp, r7
 8021666:	f85d 7b04 	ldr.w	r7, [sp], #4
 802166a:	4770      	bx	lr

0802166c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

void GPIO::clear(GPIO::GPIO_ID id)
{
 802166c:	b480      	push	{r7}
 802166e:	b083      	sub	sp, #12
 8021670:	af00      	add	r7, sp, #0
 8021672:	4603      	mov	r3, r0
 8021674:	71fb      	strb	r3, [r7, #7]

    /* USER CODE BEGIN GPIO::clear */
    
    /* USER CODE END GPIO::clear */
}
 8021676:	bf00      	nop
 8021678:	370c      	adds	r7, #12
 802167a:	46bd      	mov	sp, r7
 802167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021680:	4770      	bx	lr

08021682 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

void GPIO::toggle(GPIO::GPIO_ID id)
{
 8021682:	b480      	push	{r7}
 8021684:	b083      	sub	sp, #12
 8021686:	af00      	add	r7, sp, #0
 8021688:	4603      	mov	r3, r0
 802168a:	71fb      	strb	r3, [r7, #7]
   
    /* USER CODE BEGIN GPIO::toggle */

    /* USER CODE END GPIO::toggle */
}
 802168c:	bf00      	nop
 802168e:	370c      	adds	r7, #12
 8021690:	46bd      	mov	sp, r7
 8021692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021696:	4770      	bx	lr

08021698 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8021698:	b580      	push	{r7, lr}
 802169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 802169c:	2201      	movs	r2, #1
 802169e:	490e      	ldr	r1, [pc, #56]	; (80216d8 <MX_USB_HOST_Init+0x40>)
 80216a0:	480e      	ldr	r0, [pc, #56]	; (80216dc <MX_USB_HOST_Init+0x44>)
 80216a2:	f7ef f82d 	bl	8010700 <USBH_Init>
 80216a6:	4603      	mov	r3, r0
 80216a8:	2b00      	cmp	r3, #0
 80216aa:	d001      	beq.n	80216b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80216ac:	f7e0 f968 	bl	8001980 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80216b0:	490b      	ldr	r1, [pc, #44]	; (80216e0 <MX_USB_HOST_Init+0x48>)
 80216b2:	480a      	ldr	r0, [pc, #40]	; (80216dc <MX_USB_HOST_Init+0x44>)
 80216b4:	f7ef f8bf 	bl	8010836 <USBH_RegisterClass>
 80216b8:	4603      	mov	r3, r0
 80216ba:	2b00      	cmp	r3, #0
 80216bc:	d001      	beq.n	80216c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80216be:	f7e0 f95f 	bl	8001980 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80216c2:	4806      	ldr	r0, [pc, #24]	; (80216dc <MX_USB_HOST_Init+0x44>)
 80216c4:	f7ef f944 	bl	8010950 <USBH_Start>
 80216c8:	4603      	mov	r3, r0
 80216ca:	2b00      	cmp	r3, #0
 80216cc:	d001      	beq.n	80216d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80216ce:	f7e0 f957 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80216d2:	bf00      	nop
 80216d4:	bd80      	pop	{r7, pc}
 80216d6:	bf00      	nop
 80216d8:	080216e5 	.word	0x080216e5
 80216dc:	2000d5cc 	.word	0x2000d5cc
 80216e0:	20000030 	.word	0x20000030

080216e4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80216e4:	b480      	push	{r7}
 80216e6:	b083      	sub	sp, #12
 80216e8:	af00      	add	r7, sp, #0
 80216ea:	6078      	str	r0, [r7, #4]
 80216ec:	460b      	mov	r3, r1
 80216ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80216f0:	78fb      	ldrb	r3, [r7, #3]
 80216f2:	3b01      	subs	r3, #1
 80216f4:	2b04      	cmp	r3, #4
 80216f6:	d819      	bhi.n	802172c <USBH_UserProcess+0x48>
 80216f8:	a201      	add	r2, pc, #4	; (adr r2, 8021700 <USBH_UserProcess+0x1c>)
 80216fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80216fe:	bf00      	nop
 8021700:	0802172d 	.word	0x0802172d
 8021704:	0802171d 	.word	0x0802171d
 8021708:	0802172d 	.word	0x0802172d
 802170c:	08021725 	.word	0x08021725
 8021710:	08021715 	.word	0x08021715
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8021714:	4b09      	ldr	r3, [pc, #36]	; (802173c <USBH_UserProcess+0x58>)
 8021716:	2203      	movs	r2, #3
 8021718:	701a      	strb	r2, [r3, #0]
  break;
 802171a:	e008      	b.n	802172e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 802171c:	4b07      	ldr	r3, [pc, #28]	; (802173c <USBH_UserProcess+0x58>)
 802171e:	2202      	movs	r2, #2
 8021720:	701a      	strb	r2, [r3, #0]
  break;
 8021722:	e004      	b.n	802172e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8021724:	4b05      	ldr	r3, [pc, #20]	; (802173c <USBH_UserProcess+0x58>)
 8021726:	2201      	movs	r2, #1
 8021728:	701a      	strb	r2, [r3, #0]
  break;
 802172a:	e000      	b.n	802172e <USBH_UserProcess+0x4a>

  default:
  break;
 802172c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 802172e:	bf00      	nop
 8021730:	370c      	adds	r7, #12
 8021732:	46bd      	mov	sp, r7
 8021734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021738:	4770      	bx	lr
 802173a:	bf00      	nop
 802173c:	2000cf68 	.word	0x2000cf68

08021740 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8021740:	b580      	push	{r7, lr}
 8021742:	b08a      	sub	sp, #40	; 0x28
 8021744:	af00      	add	r7, sp, #0
 8021746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021748:	f107 0314 	add.w	r3, r7, #20
 802174c:	2200      	movs	r2, #0
 802174e:	601a      	str	r2, [r3, #0]
 8021750:	605a      	str	r2, [r3, #4]
 8021752:	609a      	str	r2, [r3, #8]
 8021754:	60da      	str	r2, [r3, #12]
 8021756:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8021758:	687b      	ldr	r3, [r7, #4]
 802175a:	681b      	ldr	r3, [r3, #0]
 802175c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8021760:	d13c      	bne.n	80217dc <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021762:	4b20      	ldr	r3, [pc, #128]	; (80217e4 <HAL_HCD_MspInit+0xa4>)
 8021764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021766:	4a1f      	ldr	r2, [pc, #124]	; (80217e4 <HAL_HCD_MspInit+0xa4>)
 8021768:	f043 0301 	orr.w	r3, r3, #1
 802176c:	6313      	str	r3, [r2, #48]	; 0x30
 802176e:	4b1d      	ldr	r3, [pc, #116]	; (80217e4 <HAL_HCD_MspInit+0xa4>)
 8021770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021772:	f003 0301 	and.w	r3, r3, #1
 8021776:	613b      	str	r3, [r7, #16]
 8021778:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 802177a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 802177e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021780:	2302      	movs	r3, #2
 8021782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021784:	2300      	movs	r3, #0
 8021786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021788:	2303      	movs	r3, #3
 802178a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 802178c:	230a      	movs	r3, #10
 802178e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021790:	f107 0314 	add.w	r3, r7, #20
 8021794:	4619      	mov	r1, r3
 8021796:	4814      	ldr	r0, [pc, #80]	; (80217e8 <HAL_HCD_MspInit+0xa8>)
 8021798:	f7e3 fc4c 	bl	8005034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 802179c:	4b11      	ldr	r3, [pc, #68]	; (80217e4 <HAL_HCD_MspInit+0xa4>)
 802179e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80217a0:	4a10      	ldr	r2, [pc, #64]	; (80217e4 <HAL_HCD_MspInit+0xa4>)
 80217a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80217a6:	6353      	str	r3, [r2, #52]	; 0x34
 80217a8:	4b0e      	ldr	r3, [pc, #56]	; (80217e4 <HAL_HCD_MspInit+0xa4>)
 80217aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80217ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80217b0:	60fb      	str	r3, [r7, #12]
 80217b2:	68fb      	ldr	r3, [r7, #12]
 80217b4:	4b0b      	ldr	r3, [pc, #44]	; (80217e4 <HAL_HCD_MspInit+0xa4>)
 80217b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80217b8:	4a0a      	ldr	r2, [pc, #40]	; (80217e4 <HAL_HCD_MspInit+0xa4>)
 80217ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80217be:	6453      	str	r3, [r2, #68]	; 0x44
 80217c0:	4b08      	ldr	r3, [pc, #32]	; (80217e4 <HAL_HCD_MspInit+0xa4>)
 80217c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80217c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80217c8:	60bb      	str	r3, [r7, #8]
 80217ca:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80217cc:	2200      	movs	r2, #0
 80217ce:	2105      	movs	r1, #5
 80217d0:	2043      	movs	r0, #67	; 0x43
 80217d2:	f7e2 fd77 	bl	80042c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80217d6:	2043      	movs	r0, #67	; 0x43
 80217d8:	f7e2 fd90 	bl	80042fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80217dc:	bf00      	nop
 80217de:	3728      	adds	r7, #40	; 0x28
 80217e0:	46bd      	mov	sp, r7
 80217e2:	bd80      	pop	{r7, pc}
 80217e4:	40023800 	.word	0x40023800
 80217e8:	40020000 	.word	0x40020000

080217ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80217ec:	b580      	push	{r7, lr}
 80217ee:	b082      	sub	sp, #8
 80217f0:	af00      	add	r7, sp, #0
 80217f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80217f4:	687b      	ldr	r3, [r7, #4]
 80217f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80217fa:	4618      	mov	r0, r3
 80217fc:	f7ef fbfb 	bl	8010ff6 <USBH_LL_IncTimer>
}
 8021800:	bf00      	nop
 8021802:	3708      	adds	r7, #8
 8021804:	46bd      	mov	sp, r7
 8021806:	bd80      	pop	{r7, pc}

08021808 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8021808:	b580      	push	{r7, lr}
 802180a:	b082      	sub	sp, #8
 802180c:	af00      	add	r7, sp, #0
 802180e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8021810:	687b      	ldr	r3, [r7, #4]
 8021812:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8021816:	4618      	mov	r0, r3
 8021818:	f7ef fc40 	bl	801109c <USBH_LL_Connect>
}
 802181c:	bf00      	nop
 802181e:	3708      	adds	r7, #8
 8021820:	46bd      	mov	sp, r7
 8021822:	bd80      	pop	{r7, pc}

08021824 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8021824:	b580      	push	{r7, lr}
 8021826:	b082      	sub	sp, #8
 8021828:	af00      	add	r7, sp, #0
 802182a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 802182c:	687b      	ldr	r3, [r7, #4]
 802182e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8021832:	4618      	mov	r0, r3
 8021834:	f7ef fc66 	bl	8011104 <USBH_LL_Disconnect>
}
 8021838:	bf00      	nop
 802183a:	3708      	adds	r7, #8
 802183c:	46bd      	mov	sp, r7
 802183e:	bd80      	pop	{r7, pc}

08021840 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8021840:	b580      	push	{r7, lr}
 8021842:	b082      	sub	sp, #8
 8021844:	af00      	add	r7, sp, #0
 8021846:	6078      	str	r0, [r7, #4]
 8021848:	460b      	mov	r3, r1
 802184a:	70fb      	strb	r3, [r7, #3]
 802184c:	4613      	mov	r3, r2
 802184e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8021850:	687b      	ldr	r3, [r7, #4]
 8021852:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8021856:	4618      	mov	r0, r3
 8021858:	f7ef fca4 	bl	80111a4 <USBH_LL_NotifyURBChange>
#endif
}
 802185c:	bf00      	nop
 802185e:	3708      	adds	r7, #8
 8021860:	46bd      	mov	sp, r7
 8021862:	bd80      	pop	{r7, pc}

08021864 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8021864:	b580      	push	{r7, lr}
 8021866:	b082      	sub	sp, #8
 8021868:	af00      	add	r7, sp, #0
 802186a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 802186c:	687b      	ldr	r3, [r7, #4]
 802186e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8021872:	4618      	mov	r0, r3
 8021874:	f7ef fbe9 	bl	801104a <USBH_LL_PortEnabled>
} 
 8021878:	bf00      	nop
 802187a:	3708      	adds	r7, #8
 802187c:	46bd      	mov	sp, r7
 802187e:	bd80      	pop	{r7, pc}

08021880 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8021880:	b580      	push	{r7, lr}
 8021882:	b082      	sub	sp, #8
 8021884:	af00      	add	r7, sp, #0
 8021886:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8021888:	687b      	ldr	r3, [r7, #4]
 802188a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802188e:	4618      	mov	r0, r3
 8021890:	f7ef fbe9 	bl	8011066 <USBH_LL_PortDisabled>
} 
 8021894:	bf00      	nop
 8021896:	3708      	adds	r7, #8
 8021898:	46bd      	mov	sp, r7
 802189a:	bd80      	pop	{r7, pc}

0802189c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 802189c:	b580      	push	{r7, lr}
 802189e:	b082      	sub	sp, #8
 80218a0:	af00      	add	r7, sp, #0
 80218a2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80218a4:	687b      	ldr	r3, [r7, #4]
 80218a6:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80218aa:	2b01      	cmp	r3, #1
 80218ac:	d12a      	bne.n	8021904 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80218ae:	4a18      	ldr	r2, [pc, #96]	; (8021910 <USBH_LL_Init+0x74>)
 80218b0:	687b      	ldr	r3, [r7, #4]
 80218b2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80218b6:	687b      	ldr	r3, [r7, #4]
 80218b8:	4a15      	ldr	r2, [pc, #84]	; (8021910 <USBH_LL_Init+0x74>)
 80218ba:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80218be:	4b14      	ldr	r3, [pc, #80]	; (8021910 <USBH_LL_Init+0x74>)
 80218c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80218c4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80218c6:	4b12      	ldr	r3, [pc, #72]	; (8021910 <USBH_LL_Init+0x74>)
 80218c8:	2208      	movs	r2, #8
 80218ca:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80218cc:	4b10      	ldr	r3, [pc, #64]	; (8021910 <USBH_LL_Init+0x74>)
 80218ce:	2203      	movs	r2, #3
 80218d0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80218d2:	4b0f      	ldr	r3, [pc, #60]	; (8021910 <USBH_LL_Init+0x74>)
 80218d4:	2200      	movs	r2, #0
 80218d6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80218d8:	4b0d      	ldr	r3, [pc, #52]	; (8021910 <USBH_LL_Init+0x74>)
 80218da:	2202      	movs	r2, #2
 80218dc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80218de:	4b0c      	ldr	r3, [pc, #48]	; (8021910 <USBH_LL_Init+0x74>)
 80218e0:	2200      	movs	r2, #0
 80218e2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80218e4:	480a      	ldr	r0, [pc, #40]	; (8021910 <USBH_LL_Init+0x74>)
 80218e6:	f7e3 fe8a 	bl	80055fe <HAL_HCD_Init>
 80218ea:	4603      	mov	r3, r0
 80218ec:	2b00      	cmp	r3, #0
 80218ee:	d001      	beq.n	80218f4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80218f0:	f7e0 f846 	bl	8001980 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80218f4:	4806      	ldr	r0, [pc, #24]	; (8021910 <USBH_LL_Init+0x74>)
 80218f6:	f7e4 fa79 	bl	8005dec <HAL_HCD_GetCurrentFrame>
 80218fa:	4603      	mov	r3, r0
 80218fc:	4619      	mov	r1, r3
 80218fe:	6878      	ldr	r0, [r7, #4]
 8021900:	f7ef fb6a 	bl	8010fd8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8021904:	2300      	movs	r3, #0
}
 8021906:	4618      	mov	r0, r3
 8021908:	3708      	adds	r7, #8
 802190a:	46bd      	mov	sp, r7
 802190c:	bd80      	pop	{r7, pc}
 802190e:	bf00      	nop
 8021910:	2000d9a4 	.word	0x2000d9a4

08021914 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8021914:	b580      	push	{r7, lr}
 8021916:	b084      	sub	sp, #16
 8021918:	af00      	add	r7, sp, #0
 802191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802191c:	2300      	movs	r3, #0
 802191e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8021920:	2300      	movs	r3, #0
 8021922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8021924:	687b      	ldr	r3, [r7, #4]
 8021926:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802192a:	4618      	mov	r0, r3
 802192c:	f7e4 f9e6 	bl	8005cfc <HAL_HCD_Start>
 8021930:	4603      	mov	r3, r0
 8021932:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8021934:	7bfb      	ldrb	r3, [r7, #15]
 8021936:	4618      	mov	r0, r3
 8021938:	f000 f95c 	bl	8021bf4 <USBH_Get_USB_Status>
 802193c:	4603      	mov	r3, r0
 802193e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8021940:	7bbb      	ldrb	r3, [r7, #14]
}
 8021942:	4618      	mov	r0, r3
 8021944:	3710      	adds	r7, #16
 8021946:	46bd      	mov	sp, r7
 8021948:	bd80      	pop	{r7, pc}

0802194a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 802194a:	b580      	push	{r7, lr}
 802194c:	b084      	sub	sp, #16
 802194e:	af00      	add	r7, sp, #0
 8021950:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021952:	2300      	movs	r3, #0
 8021954:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8021956:	2300      	movs	r3, #0
 8021958:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 802195a:	687b      	ldr	r3, [r7, #4]
 802195c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8021960:	4618      	mov	r0, r3
 8021962:	f7e4 f9ee 	bl	8005d42 <HAL_HCD_Stop>
 8021966:	4603      	mov	r3, r0
 8021968:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802196a:	7bfb      	ldrb	r3, [r7, #15]
 802196c:	4618      	mov	r0, r3
 802196e:	f000 f941 	bl	8021bf4 <USBH_Get_USB_Status>
 8021972:	4603      	mov	r3, r0
 8021974:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8021976:	7bbb      	ldrb	r3, [r7, #14]
}
 8021978:	4618      	mov	r0, r3
 802197a:	3710      	adds	r7, #16
 802197c:	46bd      	mov	sp, r7
 802197e:	bd80      	pop	{r7, pc}

08021980 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8021980:	b580      	push	{r7, lr}
 8021982:	b084      	sub	sp, #16
 8021984:	af00      	add	r7, sp, #0
 8021986:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8021988:	2301      	movs	r3, #1
 802198a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 802198c:	687b      	ldr	r3, [r7, #4]
 802198e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8021992:	4618      	mov	r0, r3
 8021994:	f7e4 fa38 	bl	8005e08 <HAL_HCD_GetCurrentSpeed>
 8021998:	4603      	mov	r3, r0
 802199a:	2b01      	cmp	r3, #1
 802199c:	d007      	beq.n	80219ae <USBH_LL_GetSpeed+0x2e>
 802199e:	2b01      	cmp	r3, #1
 80219a0:	d302      	bcc.n	80219a8 <USBH_LL_GetSpeed+0x28>
 80219a2:	2b02      	cmp	r3, #2
 80219a4:	d006      	beq.n	80219b4 <USBH_LL_GetSpeed+0x34>
 80219a6:	e008      	b.n	80219ba <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80219a8:	2300      	movs	r3, #0
 80219aa:	73fb      	strb	r3, [r7, #15]
    break;
 80219ac:	e008      	b.n	80219c0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80219ae:	2301      	movs	r3, #1
 80219b0:	73fb      	strb	r3, [r7, #15]
    break;
 80219b2:	e005      	b.n	80219c0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80219b4:	2302      	movs	r3, #2
 80219b6:	73fb      	strb	r3, [r7, #15]
    break;
 80219b8:	e002      	b.n	80219c0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80219ba:	2301      	movs	r3, #1
 80219bc:	73fb      	strb	r3, [r7, #15]
    break;
 80219be:	bf00      	nop
  }
  return  speed;
 80219c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80219c2:	4618      	mov	r0, r3
 80219c4:	3710      	adds	r7, #16
 80219c6:	46bd      	mov	sp, r7
 80219c8:	bd80      	pop	{r7, pc}

080219ca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80219ca:	b580      	push	{r7, lr}
 80219cc:	b084      	sub	sp, #16
 80219ce:	af00      	add	r7, sp, #0
 80219d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80219d2:	2300      	movs	r3, #0
 80219d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80219d6:	2300      	movs	r3, #0
 80219d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80219da:	687b      	ldr	r3, [r7, #4]
 80219dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80219e0:	4618      	mov	r0, r3
 80219e2:	f7e4 f9cb 	bl	8005d7c <HAL_HCD_ResetPort>
 80219e6:	4603      	mov	r3, r0
 80219e8:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80219ea:	7bfb      	ldrb	r3, [r7, #15]
 80219ec:	4618      	mov	r0, r3
 80219ee:	f000 f901 	bl	8021bf4 <USBH_Get_USB_Status>
 80219f2:	4603      	mov	r3, r0
 80219f4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80219f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80219f8:	4618      	mov	r0, r3
 80219fa:	3710      	adds	r7, #16
 80219fc:	46bd      	mov	sp, r7
 80219fe:	bd80      	pop	{r7, pc}

08021a00 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8021a00:	b580      	push	{r7, lr}
 8021a02:	b082      	sub	sp, #8
 8021a04:	af00      	add	r7, sp, #0
 8021a06:	6078      	str	r0, [r7, #4]
 8021a08:	460b      	mov	r3, r1
 8021a0a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8021a0c:	687b      	ldr	r3, [r7, #4]
 8021a0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8021a12:	78fa      	ldrb	r2, [r7, #3]
 8021a14:	4611      	mov	r1, r2
 8021a16:	4618      	mov	r0, r3
 8021a18:	f7e4 f9d3 	bl	8005dc2 <HAL_HCD_HC_GetXferCount>
 8021a1c:	4603      	mov	r3, r0
}
 8021a1e:	4618      	mov	r0, r3
 8021a20:	3708      	adds	r7, #8
 8021a22:	46bd      	mov	sp, r7
 8021a24:	bd80      	pop	{r7, pc}

08021a26 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8021a26:	b590      	push	{r4, r7, lr}
 8021a28:	b089      	sub	sp, #36	; 0x24
 8021a2a:	af04      	add	r7, sp, #16
 8021a2c:	6078      	str	r0, [r7, #4]
 8021a2e:	4608      	mov	r0, r1
 8021a30:	4611      	mov	r1, r2
 8021a32:	461a      	mov	r2, r3
 8021a34:	4603      	mov	r3, r0
 8021a36:	70fb      	strb	r3, [r7, #3]
 8021a38:	460b      	mov	r3, r1
 8021a3a:	70bb      	strb	r3, [r7, #2]
 8021a3c:	4613      	mov	r3, r2
 8021a3e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021a40:	2300      	movs	r3, #0
 8021a42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8021a44:	2300      	movs	r3, #0
 8021a46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8021a48:	687b      	ldr	r3, [r7, #4]
 8021a4a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8021a4e:	787c      	ldrb	r4, [r7, #1]
 8021a50:	78ba      	ldrb	r2, [r7, #2]
 8021a52:	78f9      	ldrb	r1, [r7, #3]
 8021a54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8021a56:	9302      	str	r3, [sp, #8]
 8021a58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8021a5c:	9301      	str	r3, [sp, #4]
 8021a5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8021a62:	9300      	str	r3, [sp, #0]
 8021a64:	4623      	mov	r3, r4
 8021a66:	f7e3 fe20 	bl	80056aa <HAL_HCD_HC_Init>
 8021a6a:	4603      	mov	r3, r0
 8021a6c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8021a6e:	7bfb      	ldrb	r3, [r7, #15]
 8021a70:	4618      	mov	r0, r3
 8021a72:	f000 f8bf 	bl	8021bf4 <USBH_Get_USB_Status>
 8021a76:	4603      	mov	r3, r0
 8021a78:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8021a7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8021a7c:	4618      	mov	r0, r3
 8021a7e:	3714      	adds	r7, #20
 8021a80:	46bd      	mov	sp, r7
 8021a82:	bd90      	pop	{r4, r7, pc}

08021a84 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8021a84:	b580      	push	{r7, lr}
 8021a86:	b084      	sub	sp, #16
 8021a88:	af00      	add	r7, sp, #0
 8021a8a:	6078      	str	r0, [r7, #4]
 8021a8c:	460b      	mov	r3, r1
 8021a8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021a90:	2300      	movs	r3, #0
 8021a92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8021a94:	2300      	movs	r3, #0
 8021a96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8021a98:	687b      	ldr	r3, [r7, #4]
 8021a9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8021a9e:	78fa      	ldrb	r2, [r7, #3]
 8021aa0:	4611      	mov	r1, r2
 8021aa2:	4618      	mov	r0, r3
 8021aa4:	f7e3 fe99 	bl	80057da <HAL_HCD_HC_Halt>
 8021aa8:	4603      	mov	r3, r0
 8021aaa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8021aac:	7bfb      	ldrb	r3, [r7, #15]
 8021aae:	4618      	mov	r0, r3
 8021ab0:	f000 f8a0 	bl	8021bf4 <USBH_Get_USB_Status>
 8021ab4:	4603      	mov	r3, r0
 8021ab6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8021ab8:	7bbb      	ldrb	r3, [r7, #14]
}
 8021aba:	4618      	mov	r0, r3
 8021abc:	3710      	adds	r7, #16
 8021abe:	46bd      	mov	sp, r7
 8021ac0:	bd80      	pop	{r7, pc}

08021ac2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8021ac2:	b590      	push	{r4, r7, lr}
 8021ac4:	b089      	sub	sp, #36	; 0x24
 8021ac6:	af04      	add	r7, sp, #16
 8021ac8:	6078      	str	r0, [r7, #4]
 8021aca:	4608      	mov	r0, r1
 8021acc:	4611      	mov	r1, r2
 8021ace:	461a      	mov	r2, r3
 8021ad0:	4603      	mov	r3, r0
 8021ad2:	70fb      	strb	r3, [r7, #3]
 8021ad4:	460b      	mov	r3, r1
 8021ad6:	70bb      	strb	r3, [r7, #2]
 8021ad8:	4613      	mov	r3, r2
 8021ada:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021adc:	2300      	movs	r3, #0
 8021ade:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8021ae0:	2300      	movs	r3, #0
 8021ae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8021ae4:	687b      	ldr	r3, [r7, #4]
 8021ae6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8021aea:	787c      	ldrb	r4, [r7, #1]
 8021aec:	78ba      	ldrb	r2, [r7, #2]
 8021aee:	78f9      	ldrb	r1, [r7, #3]
 8021af0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8021af4:	9303      	str	r3, [sp, #12]
 8021af6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8021af8:	9302      	str	r3, [sp, #8]
 8021afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021afc:	9301      	str	r3, [sp, #4]
 8021afe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8021b02:	9300      	str	r3, [sp, #0]
 8021b04:	4623      	mov	r3, r4
 8021b06:	f7e3 fe8b 	bl	8005820 <HAL_HCD_HC_SubmitRequest>
 8021b0a:	4603      	mov	r3, r0
 8021b0c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8021b0e:	7bfb      	ldrb	r3, [r7, #15]
 8021b10:	4618      	mov	r0, r3
 8021b12:	f000 f86f 	bl	8021bf4 <USBH_Get_USB_Status>
 8021b16:	4603      	mov	r3, r0
 8021b18:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8021b1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8021b1c:	4618      	mov	r0, r3
 8021b1e:	3714      	adds	r7, #20
 8021b20:	46bd      	mov	sp, r7
 8021b22:	bd90      	pop	{r4, r7, pc}

08021b24 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8021b24:	b580      	push	{r7, lr}
 8021b26:	b082      	sub	sp, #8
 8021b28:	af00      	add	r7, sp, #0
 8021b2a:	6078      	str	r0, [r7, #4]
 8021b2c:	460b      	mov	r3, r1
 8021b2e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8021b30:	687b      	ldr	r3, [r7, #4]
 8021b32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8021b36:	78fa      	ldrb	r2, [r7, #3]
 8021b38:	4611      	mov	r1, r2
 8021b3a:	4618      	mov	r0, r3
 8021b3c:	f7e4 f92c 	bl	8005d98 <HAL_HCD_HC_GetURBState>
 8021b40:	4603      	mov	r3, r0
}
 8021b42:	4618      	mov	r0, r3
 8021b44:	3708      	adds	r7, #8
 8021b46:	46bd      	mov	sp, r7
 8021b48:	bd80      	pop	{r7, pc}

08021b4a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8021b4a:	b580      	push	{r7, lr}
 8021b4c:	b082      	sub	sp, #8
 8021b4e:	af00      	add	r7, sp, #0
 8021b50:	6078      	str	r0, [r7, #4]
 8021b52:	460b      	mov	r3, r1
 8021b54:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8021b56:	687b      	ldr	r3, [r7, #4]
 8021b58:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8021b5c:	2b01      	cmp	r3, #1
 8021b5e:	d103      	bne.n	8021b68 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8021b60:	78fb      	ldrb	r3, [r7, #3]
 8021b62:	4618      	mov	r0, r3
 8021b64:	f000 f872 	bl	8021c4c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8021b68:	20c8      	movs	r0, #200	; 0xc8
 8021b6a:	f7e2 f83d 	bl	8003be8 <HAL_Delay>
  return USBH_OK;
 8021b6e:	2300      	movs	r3, #0
}
 8021b70:	4618      	mov	r0, r3
 8021b72:	3708      	adds	r7, #8
 8021b74:	46bd      	mov	sp, r7
 8021b76:	bd80      	pop	{r7, pc}

08021b78 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8021b78:	b480      	push	{r7}
 8021b7a:	b085      	sub	sp, #20
 8021b7c:	af00      	add	r7, sp, #0
 8021b7e:	6078      	str	r0, [r7, #4]
 8021b80:	460b      	mov	r3, r1
 8021b82:	70fb      	strb	r3, [r7, #3]
 8021b84:	4613      	mov	r3, r2
 8021b86:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8021b88:	687b      	ldr	r3, [r7, #4]
 8021b8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8021b8e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8021b90:	78fa      	ldrb	r2, [r7, #3]
 8021b92:	68f9      	ldr	r1, [r7, #12]
 8021b94:	4613      	mov	r3, r2
 8021b96:	009b      	lsls	r3, r3, #2
 8021b98:	4413      	add	r3, r2
 8021b9a:	00db      	lsls	r3, r3, #3
 8021b9c:	440b      	add	r3, r1
 8021b9e:	333b      	adds	r3, #59	; 0x3b
 8021ba0:	781b      	ldrb	r3, [r3, #0]
 8021ba2:	2b00      	cmp	r3, #0
 8021ba4:	d00a      	beq.n	8021bbc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8021ba6:	78fa      	ldrb	r2, [r7, #3]
 8021ba8:	68f9      	ldr	r1, [r7, #12]
 8021baa:	4613      	mov	r3, r2
 8021bac:	009b      	lsls	r3, r3, #2
 8021bae:	4413      	add	r3, r2
 8021bb0:	00db      	lsls	r3, r3, #3
 8021bb2:	440b      	add	r3, r1
 8021bb4:	3350      	adds	r3, #80	; 0x50
 8021bb6:	78ba      	ldrb	r2, [r7, #2]
 8021bb8:	701a      	strb	r2, [r3, #0]
 8021bba:	e009      	b.n	8021bd0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8021bbc:	78fa      	ldrb	r2, [r7, #3]
 8021bbe:	68f9      	ldr	r1, [r7, #12]
 8021bc0:	4613      	mov	r3, r2
 8021bc2:	009b      	lsls	r3, r3, #2
 8021bc4:	4413      	add	r3, r2
 8021bc6:	00db      	lsls	r3, r3, #3
 8021bc8:	440b      	add	r3, r1
 8021bca:	3351      	adds	r3, #81	; 0x51
 8021bcc:	78ba      	ldrb	r2, [r7, #2]
 8021bce:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8021bd0:	2300      	movs	r3, #0
}
 8021bd2:	4618      	mov	r0, r3
 8021bd4:	3714      	adds	r7, #20
 8021bd6:	46bd      	mov	sp, r7
 8021bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bdc:	4770      	bx	lr

08021bde <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8021bde:	b580      	push	{r7, lr}
 8021be0:	b082      	sub	sp, #8
 8021be2:	af00      	add	r7, sp, #0
 8021be4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8021be6:	6878      	ldr	r0, [r7, #4]
 8021be8:	f7e1 fffe 	bl	8003be8 <HAL_Delay>
}
 8021bec:	bf00      	nop
 8021bee:	3708      	adds	r7, #8
 8021bf0:	46bd      	mov	sp, r7
 8021bf2:	bd80      	pop	{r7, pc}

08021bf4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8021bf4:	b480      	push	{r7}
 8021bf6:	b085      	sub	sp, #20
 8021bf8:	af00      	add	r7, sp, #0
 8021bfa:	4603      	mov	r3, r0
 8021bfc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8021bfe:	2300      	movs	r3, #0
 8021c00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8021c02:	79fb      	ldrb	r3, [r7, #7]
 8021c04:	2b03      	cmp	r3, #3
 8021c06:	d817      	bhi.n	8021c38 <USBH_Get_USB_Status+0x44>
 8021c08:	a201      	add	r2, pc, #4	; (adr r2, 8021c10 <USBH_Get_USB_Status+0x1c>)
 8021c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021c0e:	bf00      	nop
 8021c10:	08021c21 	.word	0x08021c21
 8021c14:	08021c27 	.word	0x08021c27
 8021c18:	08021c2d 	.word	0x08021c2d
 8021c1c:	08021c33 	.word	0x08021c33
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8021c20:	2300      	movs	r3, #0
 8021c22:	73fb      	strb	r3, [r7, #15]
    break;
 8021c24:	e00b      	b.n	8021c3e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8021c26:	2302      	movs	r3, #2
 8021c28:	73fb      	strb	r3, [r7, #15]
    break;
 8021c2a:	e008      	b.n	8021c3e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8021c2c:	2301      	movs	r3, #1
 8021c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8021c30:	e005      	b.n	8021c3e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8021c32:	2302      	movs	r3, #2
 8021c34:	73fb      	strb	r3, [r7, #15]
    break;
 8021c36:	e002      	b.n	8021c3e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8021c38:	2302      	movs	r3, #2
 8021c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8021c3c:	bf00      	nop
  }
  return usb_status;
 8021c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8021c40:	4618      	mov	r0, r3
 8021c42:	3714      	adds	r7, #20
 8021c44:	46bd      	mov	sp, r7
 8021c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c4a:	4770      	bx	lr

08021c4c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8021c4c:	b580      	push	{r7, lr}
 8021c4e:	b084      	sub	sp, #16
 8021c50:	af00      	add	r7, sp, #0
 8021c52:	4603      	mov	r3, r0
 8021c54:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8021c56:	79fb      	ldrb	r3, [r7, #7]
 8021c58:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8021c5a:	79fb      	ldrb	r3, [r7, #7]
 8021c5c:	2b00      	cmp	r3, #0
 8021c5e:	d102      	bne.n	8021c66 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8021c60:	2301      	movs	r3, #1
 8021c62:	73fb      	strb	r3, [r7, #15]
 8021c64:	e001      	b.n	8021c6a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8021c66:	2300      	movs	r3, #0
 8021c68:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8021c6a:	7bfb      	ldrb	r3, [r7, #15]
 8021c6c:	461a      	mov	r2, r3
 8021c6e:	2120      	movs	r1, #32
 8021c70:	4803      	ldr	r0, [pc, #12]	; (8021c80 <MX_DriverVbusFS+0x34>)
 8021c72:	f7e3 fcab 	bl	80055cc <HAL_GPIO_WritePin>
}
 8021c76:	bf00      	nop
 8021c78:	3710      	adds	r7, #16
 8021c7a:	46bd      	mov	sp, r7
 8021c7c:	bd80      	pop	{r7, pc}
 8021c7e:	bf00      	nop
 8021c80:	40020c00 	.word	0x40020c00

08021c84 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8021c84:	8880      	ldrh	r0, [r0, #4]
 8021c86:	4770      	bx	lr

08021c88 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8021c88:	2300      	movs	r3, #0
 8021c8a:	8083      	strh	r3, [r0, #4]
 8021c8c:	4770      	bx	lr
	...

08021c90 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8021c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c92:	6803      	ldr	r3, [r0, #0]
 8021c94:	460e      	mov	r6, r1
 8021c96:	2100      	movs	r1, #0
 8021c98:	4604      	mov	r4, r0
 8021c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021c9c:	4798      	blx	r3
 8021c9e:	4605      	mov	r5, r0
 8021ca0:	6823      	ldr	r3, [r4, #0]
 8021ca2:	4620      	mov	r0, r4
 8021ca4:	1b75      	subs	r5, r6, r5
 8021ca6:	6a1b      	ldr	r3, [r3, #32]
 8021ca8:	b2ad      	uxth	r5, r5
 8021caa:	4798      	blx	r3
 8021cac:	88a3      	ldrh	r3, [r4, #4]
 8021cae:	fbb5 f0f0 	udiv	r0, r5, r0
 8021cb2:	4298      	cmp	r0, r3
 8021cb4:	b285      	uxth	r5, r0
 8021cb6:	db05      	blt.n	8021cc4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x34>
 8021cb8:	4b0e      	ldr	r3, [pc, #56]	; (8021cf4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8021cba:	211e      	movs	r1, #30
 8021cbc:	4a0e      	ldr	r2, [pc, #56]	; (8021cf8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8021cbe:	480f      	ldr	r0, [pc, #60]	; (8021cfc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8021cc0:	f009 fa1a 	bl	802b0f8 <__assert_func>
 8021cc4:	6823      	ldr	r3, [r4, #0]
 8021cc6:	2100      	movs	r1, #0
 8021cc8:	4620      	mov	r0, r4
 8021cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021ccc:	4798      	blx	r3
 8021cce:	4607      	mov	r7, r0
 8021cd0:	6823      	ldr	r3, [r4, #0]
 8021cd2:	4620      	mov	r0, r4
 8021cd4:	1bf6      	subs	r6, r6, r7
 8021cd6:	6a1b      	ldr	r3, [r3, #32]
 8021cd8:	b2b6      	uxth	r6, r6
 8021cda:	4798      	blx	r3
 8021cdc:	fbb6 f3f0 	udiv	r3, r6, r0
 8021ce0:	fb03 6610 	mls	r6, r3, r0, r6
 8021ce4:	b11e      	cbz	r6, 8021cee <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5e>
 8021ce6:	4b06      	ldr	r3, [pc, #24]	; (8021d00 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x70>)
 8021ce8:	211f      	movs	r1, #31
 8021cea:	4a03      	ldr	r2, [pc, #12]	; (8021cf8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8021cec:	e7e7      	b.n	8021cbe <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2e>
 8021cee:	4628      	mov	r0, r5
 8021cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021cf2:	bf00      	nop
 8021cf4:	0802e474 	.word	0x0802e474
 8021cf8:	0802e5e2 	.word	0x0802e5e2
 8021cfc:	0802e489 	.word	0x0802e489
 8021d00:	0802e4b7 	.word	0x0802e4b7

08021d04 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8021d04:	b538      	push	{r3, r4, r5, lr}
 8021d06:	6803      	ldr	r3, [r0, #0]
 8021d08:	460d      	mov	r5, r1
 8021d0a:	4604      	mov	r4, r0
 8021d0c:	6a1b      	ldr	r3, [r3, #32]
 8021d0e:	4798      	blx	r3
 8021d10:	4285      	cmp	r5, r0
 8021d12:	d905      	bls.n	8021d20 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8021d14:	4b0c      	ldr	r3, [pc, #48]	; (8021d48 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8021d16:	212f      	movs	r1, #47	; 0x2f
 8021d18:	4a0c      	ldr	r2, [pc, #48]	; (8021d4c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8021d1a:	480d      	ldr	r0, [pc, #52]	; (8021d50 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8021d1c:	f009 f9ec 	bl	802b0f8 <__assert_func>
 8021d20:	6823      	ldr	r3, [r4, #0]
 8021d22:	4620      	mov	r0, r4
 8021d24:	88a5      	ldrh	r5, [r4, #4]
 8021d26:	69db      	ldr	r3, [r3, #28]
 8021d28:	4798      	blx	r3
 8021d2a:	4285      	cmp	r5, r0
 8021d2c:	db03      	blt.n	8021d36 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8021d2e:	4b09      	ldr	r3, [pc, #36]	; (8021d54 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8021d30:	2130      	movs	r1, #48	; 0x30
 8021d32:	4a06      	ldr	r2, [pc, #24]	; (8021d4c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8021d34:	e7f1      	b.n	8021d1a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8021d36:	6823      	ldr	r3, [r4, #0]
 8021d38:	4620      	mov	r0, r4
 8021d3a:	88a1      	ldrh	r1, [r4, #4]
 8021d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021d3e:	4798      	blx	r3
 8021d40:	88a3      	ldrh	r3, [r4, #4]
 8021d42:	3301      	adds	r3, #1
 8021d44:	80a3      	strh	r3, [r4, #4]
 8021d46:	bd38      	pop	{r3, r4, r5, pc}
 8021d48:	0802e531 	.word	0x0802e531
 8021d4c:	0802e625 	.word	0x0802e625
 8021d50:	0802e489 	.word	0x0802e489
 8021d54:	0802e548 	.word	0x0802e548

08021d58 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8021d58:	b570      	push	{r4, r5, r6, lr}
 8021d5a:	6803      	ldr	r3, [r0, #0]
 8021d5c:	4616      	mov	r6, r2
 8021d5e:	4604      	mov	r4, r0
 8021d60:	460d      	mov	r5, r1
 8021d62:	6a1b      	ldr	r3, [r3, #32]
 8021d64:	4798      	blx	r3
 8021d66:	4286      	cmp	r6, r0
 8021d68:	d905      	bls.n	8021d76 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8021d6a:	4b06      	ldr	r3, [pc, #24]	; (8021d84 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8021d6c:	2139      	movs	r1, #57	; 0x39
 8021d6e:	4a06      	ldr	r2, [pc, #24]	; (8021d88 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8021d70:	4806      	ldr	r0, [pc, #24]	; (8021d8c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8021d72:	f009 f9c1 	bl	802b0f8 <__assert_func>
 8021d76:	6823      	ldr	r3, [r4, #0]
 8021d78:	4629      	mov	r1, r5
 8021d7a:	4620      	mov	r0, r4
 8021d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021d82:	4718      	bx	r3
 8021d84:	0802e531 	.word	0x0802e531
 8021d88:	0802e598 	.word	0x0802e598
 8021d8c:	0802e489 	.word	0x0802e489

08021d90 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8021d90:	4770      	bx	lr
	...

08021d94 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8021d94:	4a02      	ldr	r2, [pc, #8]	; (8021da0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8021d96:	6002      	str	r2, [r0, #0]
 8021d98:	2200      	movs	r2, #0
 8021d9a:	8082      	strh	r2, [r0, #4]
 8021d9c:	4770      	bx	lr
 8021d9e:	bf00      	nop
 8021da0:	0802e56c 	.word	0x0802e56c

08021da4 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8021da4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8021da8:	4770      	bx	lr

08021daa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8021daa:	6803      	ldr	r3, [r0, #0]
 8021dac:	b513      	push	{r0, r1, r4, lr}
 8021dae:	f8d3 4098 	ldr.w	r4, [r3, #152]	; 0x98
 8021db2:	2300      	movs	r3, #0
 8021db4:	f8ad 3000 	strh.w	r3, [sp]
 8021db8:	f8ad 3002 	strh.w	r3, [sp, #2]
 8021dbc:	f8ad 3004 	strh.w	r3, [sp, #4]
 8021dc0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021dc4:	466b      	mov	r3, sp
 8021dc6:	47a0      	blx	r4
 8021dc8:	b002      	add	sp, #8
 8021dca:	bd10      	pop	{r4, pc}

08021dcc <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8021dcc:	2301      	movs	r3, #1
 8021dce:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8021dd2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8021dd6:	4770      	bx	lr

08021dd8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8021dd8:	2301      	movs	r3, #1
 8021dda:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8021dde:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8021de2:	4770      	bx	lr

08021de4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8021de4:	6843      	ldr	r3, [r0, #4]
 8021de6:	2201      	movs	r2, #1
 8021de8:	725a      	strb	r2, [r3, #9]
 8021dea:	6840      	ldr	r0, [r0, #4]
 8021dec:	6803      	ldr	r3, [r0, #0]
 8021dee:	691b      	ldr	r3, [r3, #16]
 8021df0:	4718      	bx	r3

08021df2 <_ZN8touchgfx3HAL8flushDMAEv>:
 8021df2:	6840      	ldr	r0, [r0, #4]
 8021df4:	6803      	ldr	r3, [r0, #0]
 8021df6:	689b      	ldr	r3, [r3, #8]
 8021df8:	4718      	bx	r3

08021dfa <_ZN8touchgfx3HAL17registerTextCacheEPtt>:
 8021dfa:	4770      	bx	lr

08021dfc <_ZN8touchgfx3HAL15cacheTextStringEPKt>:
 8021dfc:	4608      	mov	r0, r1
 8021dfe:	4770      	bx	lr

08021e00 <_ZN8touchgfx3HAL22blitSetTransparencyKeyEt>:
 8021e00:	4770      	bx	lr
	...

08021e04 <_ZN8touchgfx3HAL10beginFrameEv>:
 8021e04:	4b04      	ldr	r3, [pc, #16]	; (8021e18 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8021e06:	781b      	ldrb	r3, [r3, #0]
 8021e08:	b123      	cbz	r3, 8021e14 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8021e0a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8021e0e:	f080 0001 	eor.w	r0, r0, #1
 8021e12:	4770      	bx	lr
 8021e14:	2001      	movs	r0, #1
 8021e16:	4770      	bx	lr
 8021e18:	2000cf74 	.word	0x2000cf74

08021e1c <_ZN8touchgfx3HAL8endFrameEv>:
 8021e1c:	b510      	push	{r4, lr}
 8021e1e:	4604      	mov	r4, r0
 8021e20:	6840      	ldr	r0, [r0, #4]
 8021e22:	6803      	ldr	r3, [r0, #0]
 8021e24:	689b      	ldr	r3, [r3, #8]
 8021e26:	4798      	blx	r3
 8021e28:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8021e2c:	b113      	cbz	r3, 8021e34 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8021e2e:	2301      	movs	r3, #1
 8021e30:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8021e34:	bd10      	pop	{r4, pc}

08021e36 <_ZN8touchgfx3HAL9taskEntryEv>:
 8021e36:	b508      	push	{r3, lr}
 8021e38:	6803      	ldr	r3, [r0, #0]
 8021e3a:	4604      	mov	r4, r0
 8021e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021e3e:	4798      	blx	r3
 8021e40:	6823      	ldr	r3, [r4, #0]
 8021e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021e44:	4620      	mov	r0, r4
 8021e46:	4798      	blx	r3
 8021e48:	f7f6 faec 	bl	8018424 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8021e4c:	6823      	ldr	r3, [r4, #0]
 8021e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021e50:	e7f8      	b.n	8021e44 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08021e54 <_ZN8touchgfx3HAL4tickEv>:
 8021e54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8021e56:	6803      	ldr	r3, [r0, #0]
 8021e58:	4604      	mov	r4, r0
 8021e5a:	4d5d      	ldr	r5, [pc, #372]	; (8021fd0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8021e5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8021e60:	4798      	blx	r3
 8021e62:	2800      	cmp	r0, #0
 8021e64:	f000 8092 	beq.w	8021f8c <_ZN8touchgfx3HAL4tickEv+0x138>
 8021e68:	2001      	movs	r0, #1
 8021e6a:	2600      	movs	r6, #0
 8021e6c:	f7ff fbf3 	bl	8021656 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8021e70:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8021e74:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8021e78:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8021e7c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8021e80:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8021e84:	b133      	cbz	r3, 8021e94 <_ZN8touchgfx3HAL4tickEv+0x40>
 8021e86:	6823      	ldr	r3, [r4, #0]
 8021e88:	4620      	mov	r0, r4
 8021e8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8021e8e:	4798      	blx	r3
 8021e90:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8021e94:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8021e98:	2601      	movs	r6, #1
 8021e9a:	6862      	ldr	r2, [r4, #4]
 8021e9c:	f083 0301 	eor.w	r3, r3, #1
 8021ea0:	702e      	strb	r6, [r5, #0]
 8021ea2:	7253      	strb	r3, [r2, #9]
 8021ea4:	f002 fb90 	bl	80245c8 <_ZN8touchgfx11Application11getInstanceEv>
 8021ea8:	6803      	ldr	r3, [r0, #0]
 8021eaa:	4631      	mov	r1, r6
 8021eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021eae:	4798      	blx	r3
 8021eb0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8021eb4:	b90b      	cbnz	r3, 8021eba <_ZN8touchgfx3HAL4tickEv+0x66>
 8021eb6:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8021eba:	f002 fb85 	bl	80245c8 <_ZN8touchgfx11Application11getInstanceEv>
 8021ebe:	6803      	ldr	r3, [r0, #0]
 8021ec0:	695b      	ldr	r3, [r3, #20]
 8021ec2:	4798      	blx	r3
 8021ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021ec6:	6803      	ldr	r3, [r0, #0]
 8021ec8:	691b      	ldr	r3, [r3, #16]
 8021eca:	4798      	blx	r3
 8021ecc:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8021ed0:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8021ed4:	3b01      	subs	r3, #1
 8021ed6:	b2db      	uxtb	r3, r3
 8021ed8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8021edc:	b10a      	cbz	r2, 8021ee2 <_ZN8touchgfx3HAL4tickEv+0x8e>
 8021ede:	2b00      	cmp	r3, #0
 8021ee0:	d1eb      	bne.n	8021eba <_ZN8touchgfx3HAL4tickEv+0x66>
 8021ee2:	4a3c      	ldr	r2, [pc, #240]	; (8021fd4 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8021ee4:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8021ee8:	7813      	ldrb	r3, [r2, #0]
 8021eea:	3301      	adds	r3, #1
 8021eec:	b25b      	sxtb	r3, r3
 8021eee:	4299      	cmp	r1, r3
 8021ef0:	7013      	strb	r3, [r2, #0]
 8021ef2:	dc10      	bgt.n	8021f16 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8021ef4:	2300      	movs	r3, #0
 8021ef6:	68e0      	ldr	r0, [r4, #12]
 8021ef8:	a902      	add	r1, sp, #8
 8021efa:	7013      	strb	r3, [r2, #0]
 8021efc:	aa03      	add	r2, sp, #12
 8021efe:	6803      	ldr	r3, [r0, #0]
 8021f00:	68db      	ldr	r3, [r3, #12]
 8021f02:	4798      	blx	r3
 8021f04:	6823      	ldr	r3, [r4, #0]
 8021f06:	2800      	cmp	r0, #0
 8021f08:	d04c      	beq.n	8021fa4 <_ZN8touchgfx3HAL4tickEv+0x150>
 8021f0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8021f0e:	4620      	mov	r0, r4
 8021f10:	9a03      	ldr	r2, [sp, #12]
 8021f12:	9902      	ldr	r1, [sp, #8]
 8021f14:	4798      	blx	r3
 8021f16:	2300      	movs	r3, #0
 8021f18:	6960      	ldr	r0, [r4, #20]
 8021f1a:	f88d 3007 	strb.w	r3, [sp, #7]
 8021f1e:	b130      	cbz	r0, 8021f2e <_ZN8touchgfx3HAL4tickEv+0xda>
 8021f20:	6803      	ldr	r3, [r0, #0]
 8021f22:	f10d 0107 	add.w	r1, sp, #7
 8021f26:	68db      	ldr	r3, [r3, #12]
 8021f28:	4798      	blx	r3
 8021f2a:	2800      	cmp	r0, #0
 8021f2c:	d149      	bne.n	8021fc2 <_ZN8touchgfx3HAL4tickEv+0x16e>
 8021f2e:	f104 001c 	add.w	r0, r4, #28
 8021f32:	f008 fa49 	bl	802a3c8 <_ZN8touchgfx8Gestures4tickEv>
 8021f36:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8021f3a:	b30b      	cbz	r3, 8021f80 <_ZN8touchgfx3HAL4tickEv+0x12c>
 8021f3c:	6920      	ldr	r0, [r4, #16]
 8021f3e:	6803      	ldr	r3, [r0, #0]
 8021f40:	691b      	ldr	r3, [r3, #16]
 8021f42:	4798      	blx	r3
 8021f44:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8021f46:	4606      	mov	r6, r0
 8021f48:	b903      	cbnz	r3, 8021f4c <_ZN8touchgfx3HAL4tickEv+0xf8>
 8021f4a:	6720      	str	r0, [r4, #112]	; 0x70
 8021f4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8021f4e:	4a22      	ldr	r2, [pc, #136]	; (8021fd8 <_ZN8touchgfx3HAL4tickEv+0x184>)
 8021f50:	1af3      	subs	r3, r6, r3
 8021f52:	4293      	cmp	r3, r2
 8021f54:	d914      	bls.n	8021f80 <_ZN8touchgfx3HAL4tickEv+0x12c>
 8021f56:	6920      	ldr	r0, [r4, #16]
 8021f58:	6803      	ldr	r3, [r0, #0]
 8021f5a:	699b      	ldr	r3, [r3, #24]
 8021f5c:	4798      	blx	r3
 8021f5e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8021f60:	2264      	movs	r2, #100	; 0x64
 8021f62:	1af3      	subs	r3, r6, r3
 8021f64:	fbb3 f3f2 	udiv	r3, r3, r2
 8021f68:	fbb0 f0f3 	udiv	r0, r0, r3
 8021f6c:	2800      	cmp	r0, #0
 8021f6e:	dc1e      	bgt.n	8021fae <_ZN8touchgfx3HAL4tickEv+0x15a>
 8021f70:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8021f74:	6920      	ldr	r0, [r4, #16]
 8021f76:	2100      	movs	r1, #0
 8021f78:	6803      	ldr	r3, [r0, #0]
 8021f7a:	69db      	ldr	r3, [r3, #28]
 8021f7c:	4798      	blx	r3
 8021f7e:	6726      	str	r6, [r4, #112]	; 0x70
 8021f80:	f002 fb22 	bl	80245c8 <_ZN8touchgfx11Application11getInstanceEv>
 8021f84:	6803      	ldr	r3, [r0, #0]
 8021f86:	2100      	movs	r1, #0
 8021f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f8a:	4798      	blx	r3
 8021f8c:	6823      	ldr	r3, [r4, #0]
 8021f8e:	4620      	mov	r0, r4
 8021f90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8021f94:	4798      	blx	r3
 8021f96:	2001      	movs	r0, #1
 8021f98:	f7ff fb68 	bl	802166c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8021f9c:	2300      	movs	r3, #0
 8021f9e:	702b      	strb	r3, [r5, #0]
 8021fa0:	b004      	add	sp, #16
 8021fa2:	bd70      	pop	{r4, r5, r6, pc}
 8021fa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8021fa8:	4620      	mov	r0, r4
 8021faa:	4798      	blx	r3
 8021fac:	e7b3      	b.n	8021f16 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8021fae:	2863      	cmp	r0, #99	; 0x63
 8021fb0:	bfcb      	itete	gt
 8021fb2:	2300      	movgt	r3, #0
 8021fb4:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8021fb8:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8021fbc:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8021fc0:	e7d8      	b.n	8021f74 <_ZN8touchgfx3HAL4tickEv+0x120>
 8021fc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021fc4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8021fc8:	6803      	ldr	r3, [r0, #0]
 8021fca:	68db      	ldr	r3, [r3, #12]
 8021fcc:	4798      	blx	r3
 8021fce:	e7ae      	b.n	8021f2e <_ZN8touchgfx3HAL4tickEv+0xda>
 8021fd0:	2000cf7c 	.word	0x2000cf7c
 8021fd4:	2000cf7d 	.word	0x2000cf7d
 8021fd8:	05f5e100 	.word	0x05f5e100

08021fdc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8021fdc:	f7f6 b9c2 	b.w	8018364 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08021fe0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8021fe0:	6581      	str	r1, [r0, #88]	; 0x58
 8021fe2:	301c      	adds	r0, #28
 8021fe4:	f008 b9ee 	b.w	802a3c4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08021fe8 <_ZN8touchgfx3HAL5touchEll>:
 8021fe8:	b530      	push	{r4, r5, lr}
 8021fea:	b085      	sub	sp, #20
 8021fec:	4604      	mov	r4, r0
 8021fee:	a802      	add	r0, sp, #8
 8021ff0:	9102      	str	r1, [sp, #8]
 8021ff2:	9203      	str	r2, [sp, #12]
 8021ff4:	f002 f900 	bl	80241f8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8021ff8:	a903      	add	r1, sp, #12
 8021ffa:	a802      	add	r0, sp, #8
 8021ffc:	f002 f94a 	bl	8024294 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8022000:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8022004:	9d02      	ldr	r5, [sp, #8]
 8022006:	f104 001c 	add.w	r0, r4, #28
 802200a:	9b03      	ldr	r3, [sp, #12]
 802200c:	b179      	cbz	r1, 802202e <_ZN8touchgfx3HAL5touchEll+0x46>
 802200e:	b29b      	uxth	r3, r3
 8022010:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8022014:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8022018:	9300      	str	r3, [sp, #0]
 802201a:	b2ab      	uxth	r3, r5
 802201c:	f008 f9e2 	bl	802a3e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8022020:	b118      	cbz	r0, 802202a <_ZN8touchgfx3HAL5touchEll+0x42>
 8022022:	9b02      	ldr	r3, [sp, #8]
 8022024:	65e3      	str	r3, [r4, #92]	; 0x5c
 8022026:	9b03      	ldr	r3, [sp, #12]
 8022028:	6623      	str	r3, [r4, #96]	; 0x60
 802202a:	b005      	add	sp, #20
 802202c:	bd30      	pop	{r4, r5, pc}
 802202e:	b29b      	uxth	r3, r3
 8022030:	b2aa      	uxth	r2, r5
 8022032:	f008 fa1b 	bl	802a46c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8022036:	2301      	movs	r3, #1
 8022038:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 802203c:	e7f1      	b.n	8022022 <_ZN8touchgfx3HAL5touchEll+0x3a>

0802203e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 802203e:	b530      	push	{r4, r5, lr}
 8022040:	2b00      	cmp	r3, #0
 8022042:	d04e      	beq.n	80220e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 8022044:	ea81 0002 	eor.w	r0, r1, r2
 8022048:	07c0      	lsls	r0, r0, #31
 802204a:	d508      	bpl.n	802205e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 802204c:	3a01      	subs	r2, #1
 802204e:	440b      	add	r3, r1
 8022050:	4299      	cmp	r1, r3
 8022052:	d046      	beq.n	80220e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 8022054:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8022058:	f801 0b01 	strb.w	r0, [r1], #1
 802205c:	e7f8      	b.n	8022050 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 802205e:	07d5      	lsls	r5, r2, #31
 8022060:	bf42      	ittt	mi
 8022062:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8022066:	f103 33ff 	addmi.w	r3, r3, #4294967295
 802206a:	f801 0b01 	strbmi.w	r0, [r1], #1
 802206e:	2b01      	cmp	r3, #1
 8022070:	d915      	bls.n	802209e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8022072:	ea81 0002 	eor.w	r0, r1, r2
 8022076:	0784      	lsls	r4, r0, #30
 8022078:	d01f      	beq.n	80220ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x7c>
 802207a:	1e95      	subs	r5, r2, #2
 802207c:	460c      	mov	r4, r1
 802207e:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 8022082:	f824 0b02 	strh.w	r0, [r4], #2
 8022086:	1b18      	subs	r0, r3, r4
 8022088:	4408      	add	r0, r1
 802208a:	2801      	cmp	r0, #1
 802208c:	d8f7      	bhi.n	802207e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x40>
 802208e:	1e98      	subs	r0, r3, #2
 8022090:	f003 0301 	and.w	r3, r3, #1
 8022094:	f020 0001 	bic.w	r0, r0, #1
 8022098:	3002      	adds	r0, #2
 802209a:	4401      	add	r1, r0
 802209c:	4402      	add	r2, r0
 802209e:	3a01      	subs	r2, #1
 80220a0:	440b      	add	r3, r1
 80220a2:	4299      	cmp	r1, r3
 80220a4:	d01d      	beq.n	80220e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 80220a6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80220aa:	f801 0b01 	strb.w	r0, [r1], #1
 80220ae:	e7f8      	b.n	80220a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x64>
 80220b0:	f855 4f04 	ldr.w	r4, [r5, #4]!
 80220b4:	f840 4b04 	str.w	r4, [r0], #4
 80220b8:	e008      	b.n	80220cc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 80220ba:	0790      	lsls	r0, r2, #30
 80220bc:	d004      	beq.n	80220c8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8a>
 80220be:	f832 0b02 	ldrh.w	r0, [r2], #2
 80220c2:	3b02      	subs	r3, #2
 80220c4:	f821 0b02 	strh.w	r0, [r1], #2
 80220c8:	1f15      	subs	r5, r2, #4
 80220ca:	4608      	mov	r0, r1
 80220cc:	1a1c      	subs	r4, r3, r0
 80220ce:	440c      	add	r4, r1
 80220d0:	2c03      	cmp	r4, #3
 80220d2:	d8ed      	bhi.n	80220b0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x72>
 80220d4:	f023 0003 	bic.w	r0, r3, #3
 80220d8:	f003 0303 	and.w	r3, r3, #3
 80220dc:	4402      	add	r2, r0
 80220de:	4401      	add	r1, r0
 80220e0:	e7dd      	b.n	802209e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80220e2:	2001      	movs	r0, #1
 80220e4:	bd30      	pop	{r4, r5, pc}

080220e6 <_ZN8touchgfx3HAL7noTouchEv>:
 80220e6:	b510      	push	{r4, lr}
 80220e8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80220ec:	4604      	mov	r4, r0
 80220ee:	b153      	cbz	r3, 8022106 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80220f0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80220f4:	2101      	movs	r1, #1
 80220f6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80220fa:	301c      	adds	r0, #28
 80220fc:	f008 f9b6 	bl	802a46c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8022100:	2300      	movs	r3, #0
 8022102:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8022106:	bd10      	pop	{r4, pc}

08022108 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8022108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802210c:	4605      	mov	r5, r0
 802210e:	6980      	ldr	r0, [r0, #24]
 8022110:	b085      	sub	sp, #20
 8022112:	460f      	mov	r7, r1
 8022114:	4690      	mov	r8, r2
 8022116:	4699      	mov	r9, r3
 8022118:	b930      	cbnz	r0, 8022128 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 802211a:	4b1f      	ldr	r3, [pc, #124]	; (8022198 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 802211c:	f44f 7198 	mov.w	r1, #304	; 0x130
 8022120:	4a1e      	ldr	r2, [pc, #120]	; (802219c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8022122:	481f      	ldr	r0, [pc, #124]	; (80221a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8022124:	f008 ffe8 	bl	802b0f8 <__assert_func>
 8022128:	ac04      	add	r4, sp, #16
 802212a:	2600      	movs	r6, #0
 802212c:	f844 6d04 	str.w	r6, [r4, #-4]!
 8022130:	6806      	ldr	r6, [r0, #0]
 8022132:	9401      	str	r4, [sp, #4]
 8022134:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8022138:	9400      	str	r4, [sp, #0]
 802213a:	6834      	ldr	r4, [r6, #0]
 802213c:	47a0      	blx	r4
 802213e:	4c19      	ldr	r4, [pc, #100]	; (80221a4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8022140:	4606      	mov	r6, r0
 8022142:	f8a4 9000 	strh.w	r9, [r4]
 8022146:	f7f0 f941 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 802214a:	6803      	ldr	r3, [r0, #0]
 802214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802214e:	4798      	blx	r3
 8022150:	280b      	cmp	r0, #11
 8022152:	d80e      	bhi.n	8022172 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8022154:	e8df f000 	tbb	[pc, r0]
 8022158:	1a1a1106 	.word	0x1a1a1106
 802215c:	1a1a1a1a 	.word	0x1a1a1a1a
 8022160:	1a1a1a1a 	.word	0x1a1a1a1a
 8022164:	8823      	ldrh	r3, [r4, #0]
 8022166:	fb08 7203 	mla	r2, r8, r3, r7
 802216a:	9b03      	ldr	r3, [sp, #12]
 802216c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8022170:	63eb      	str	r3, [r5, #60]	; 0x3c
 8022172:	4630      	mov	r0, r6
 8022174:	b005      	add	sp, #20
 8022176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802217a:	8822      	ldrh	r2, [r4, #0]
 802217c:	9b03      	ldr	r3, [sp, #12]
 802217e:	fb08 7202 	mla	r2, r8, r2, r7
 8022182:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022186:	1a9a      	subs	r2, r3, r2
 8022188:	63ea      	str	r2, [r5, #60]	; 0x3c
 802218a:	e7f2      	b.n	8022172 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 802218c:	4b06      	ldr	r3, [pc, #24]	; (80221a8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 802218e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8022192:	4a02      	ldr	r2, [pc, #8]	; (802219c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8022194:	e7c5      	b.n	8022122 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8022196:	bf00      	nop
 8022198:	0802e6d1 	.word	0x0802e6d1
 802219c:	0802e9ee 	.word	0x0802e9ee
 80221a0:	0802e716 	.word	0x0802e716
 80221a4:	2000cf70 	.word	0x2000cf70
 80221a8:	0802e73c 	.word	0x0802e73c

080221ac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 80221ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80221b0:	4698      	mov	r8, r3
 80221b2:	6803      	ldr	r3, [r0, #0]
 80221b4:	b087      	sub	sp, #28
 80221b6:	460e      	mov	r6, r1
 80221b8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80221ba:	4617      	mov	r7, r2
 80221bc:	4b0e      	ldr	r3, [pc, #56]	; (80221f8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x4c>)
 80221be:	4604      	mov	r4, r0
 80221c0:	f8b3 9000 	ldrh.w	r9, [r3]
 80221c4:	f7f0 f902 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 80221c8:	6803      	ldr	r3, [r0, #0]
 80221ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80221cc:	4798      	blx	r3
 80221ce:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80221d2:	9004      	str	r0, [sp, #16]
 80221d4:	463a      	mov	r2, r7
 80221d6:	9302      	str	r3, [sp, #8]
 80221d8:	4631      	mov	r1, r6
 80221da:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80221de:	4620      	mov	r0, r4
 80221e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80221e4:	9301      	str	r3, [sp, #4]
 80221e6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80221ea:	9300      	str	r3, [sp, #0]
 80221ec:	4643      	mov	r3, r8
 80221ee:	47a8      	blx	r5
 80221f0:	b007      	add	sp, #28
 80221f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80221f6:	bf00      	nop
 80221f8:	2000cf70 	.word	0x2000cf70

080221fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80221fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022200:	b089      	sub	sp, #36	; 0x24
 8022202:	4606      	mov	r6, r0
 8022204:	4610      	mov	r0, r2
 8022206:	460c      	mov	r4, r1
 8022208:	4691      	mov	r9, r2
 802220a:	9303      	str	r3, [sp, #12]
 802220c:	f004 fb88 	bl	8026920 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8022210:	2800      	cmp	r0, #0
 8022212:	f000 808e 	beq.w	8022332 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x136>
 8022216:	4f4e      	ldr	r7, [pc, #312]	; (8022350 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8022218:	ad08      	add	r5, sp, #32
 802221a:	f8df a138 	ldr.w	sl, [pc, #312]	; 8022354 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 802221e:	6838      	ldr	r0, [r7, #0]
 8022220:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8022358 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8022224:	6802      	ldr	r2, [r0, #0]
 8022226:	6a12      	ldr	r2, [r2, #32]
 8022228:	4790      	blx	r2
 802222a:	6838      	ldr	r0, [r7, #0]
 802222c:	6802      	ldr	r2, [r0, #0]
 802222e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8022230:	4790      	blx	r2
 8022232:	f8ba 3000 	ldrh.w	r3, [sl]
 8022236:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 802223a:	4628      	mov	r0, r5
 802223c:	9300      	str	r3, [sp, #0]
 802223e:	f8b8 3000 	ldrh.w	r3, [r8]
 8022242:	9301      	str	r3, [sp, #4]
 8022244:	f004 fc2c 	bl	8026aa0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022248:	f8aa 0000 	strh.w	r0, [sl]
 802224c:	4628      	mov	r0, r5
 802224e:	f004 fc61 	bl	8026b14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022252:	f8d7 a000 	ldr.w	sl, [r7]
 8022256:	f8a8 0000 	strh.w	r0, [r8]
 802225a:	4648      	mov	r0, r9
 802225c:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8022260:	f8da 703c 	ldr.w	r7, [sl, #60]	; 0x3c
 8022264:	9302      	str	r3, [sp, #8]
 8022266:	f004 fb5b 	bl	8026920 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 802226a:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
 802226e:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
 8022272:	4620      	mov	r0, r4
 8022274:	6822      	ldr	r2, [r4, #0]
 8022276:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 802227a:	f8d2 b034 	ldr.w	fp, [r2, #52]	; 0x34
 802227e:	2200      	movs	r2, #0
 8022280:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8022284:	4611      	mov	r1, r2
 8022286:	47d8      	blx	fp
 8022288:	2201      	movs	r2, #1
 802228a:	9b03      	ldr	r3, [sp, #12]
 802228c:	1d21      	adds	r1, r4, #4
 802228e:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8022292:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8022296:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 802229a:	b11a      	cbz	r2, 80222a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xa8>
 802229c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80222a0:	2a00      	cmp	r2, #0
 80222a2:	d14b      	bne.n	802233c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x140>
 80222a4:	6808      	ldr	r0, [r1, #0]
 80222a6:	ab06      	add	r3, sp, #24
 80222a8:	6849      	ldr	r1, [r1, #4]
 80222aa:	c303      	stmia	r3!, {r0, r1}
 80222ac:	4628      	mov	r0, r5
 80222ae:	f004 fd81 	bl	8026db4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80222b2:	4680      	mov	r8, r0
 80222b4:	f7f0 f88a 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 80222b8:	6802      	ldr	r2, [r0, #0]
 80222ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80222bc:	4790      	blx	r2
 80222be:	4580      	cmp	r8, r0
 80222c0:	d03a      	beq.n	8022338 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13c>
 80222c2:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80222c4:	b150      	cbz	r0, 80222dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xe0>
 80222c6:	4628      	mov	r0, r5
 80222c8:	f004 fd74 	bl	8026db4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80222cc:	4605      	mov	r5, r0
 80222ce:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80222d0:	6803      	ldr	r3, [r0, #0]
 80222d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80222d4:	4798      	blx	r3
 80222d6:	1a2b      	subs	r3, r5, r0
 80222d8:	4258      	negs	r0, r3
 80222da:	4158      	adcs	r0, r3
 80222dc:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 80222e0:	2500      	movs	r5, #0
 80222e2:	6963      	ldr	r3, [r4, #20]
 80222e4:	4620      	mov	r0, r4
 80222e6:	6822      	ldr	r2, [r4, #0]
 80222e8:	a906      	add	r1, sp, #24
 80222ea:	6165      	str	r5, [r4, #20]
 80222ec:	9303      	str	r3, [sp, #12]
 80222ee:	6892      	ldr	r2, [r2, #8]
 80222f0:	4790      	blx	r2
 80222f2:	9b03      	ldr	r3, [sp, #12]
 80222f4:	4620      	mov	r0, r4
 80222f6:	4652      	mov	r2, sl
 80222f8:	6163      	str	r3, [r4, #20]
 80222fa:	4649      	mov	r1, r9
 80222fc:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8022300:	6823      	ldr	r3, [r4, #0]
 8022302:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8022306:	4c12      	ldr	r4, [pc, #72]	; (8022350 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8022308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802230a:	4798      	blx	r3
 802230c:	6820      	ldr	r0, [r4, #0]
 802230e:	9b02      	ldr	r3, [sp, #8]
 8022310:	f8bd 2000 	ldrh.w	r2, [sp]
 8022314:	6403      	str	r3, [r0, #64]	; 0x40
 8022316:	4b0f      	ldr	r3, [pc, #60]	; (8022354 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8022318:	63c7      	str	r7, [r0, #60]	; 0x3c
 802231a:	801a      	strh	r2, [r3, #0]
 802231c:	4b0e      	ldr	r3, [pc, #56]	; (8022358 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 802231e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8022322:	801a      	strh	r2, [r3, #0]
 8022324:	6803      	ldr	r3, [r0, #0]
 8022326:	6a1b      	ldr	r3, [r3, #32]
 8022328:	4798      	blx	r3
 802232a:	6820      	ldr	r0, [r4, #0]
 802232c:	6803      	ldr	r3, [r0, #0]
 802232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022330:	4798      	blx	r3
 8022332:	b009      	add	sp, #36	; 0x24
 8022334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022338:	2000      	movs	r0, #0
 802233a:	e7cf      	b.n	80222dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xe0>
 802233c:	6808      	ldr	r0, [r1, #0]
 802233e:	aa06      	add	r2, sp, #24
 8022340:	6849      	ldr	r1, [r1, #4]
 8022342:	c203      	stmia	r2!, {r0, r1}
 8022344:	4619      	mov	r1, r3
 8022346:	a806      	add	r0, sp, #24
 8022348:	f7f0 f928 	bl	801259c <_ZN8touchgfx4RectaNERKS0_>
 802234c:	e7ae      	b.n	80222ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xb0>
 802234e:	bf00      	nop
 8022350:	2000cf78 	.word	0x2000cf78
 8022354:	2000cf70 	.word	0x2000cf70
 8022358:	2000cf72 	.word	0x2000cf72

0802235c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 802235c:	4b07      	ldr	r3, [pc, #28]	; (802237c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 802235e:	b510      	push	{r4, lr}
 8022360:	781b      	ldrb	r3, [r3, #0]
 8022362:	4604      	mov	r4, r0
 8022364:	b12b      	cbz	r3, 8022372 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x16>
 8022366:	6803      	ldr	r3, [r0, #0]
 8022368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802236a:	4798      	blx	r3
 802236c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802236e:	4283      	cmp	r3, r0
 8022370:	d001      	beq.n	8022376 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8022372:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8022374:	bd10      	pop	{r4, pc}
 8022376:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8022378:	bd10      	pop	{r4, pc}
 802237a:	bf00      	nop
 802237c:	2000cf74 	.word	0x2000cf74

08022380 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8022380:	4b0a      	ldr	r3, [pc, #40]	; (80223ac <_ZN8touchgfx3HAL15lockFrameBufferEv+0x2c>)
 8022382:	b510      	push	{r4, lr}
 8022384:	781b      	ldrb	r3, [r3, #0]
 8022386:	4604      	mov	r4, r0
 8022388:	b12b      	cbz	r3, 8022396 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x16>
 802238a:	f7f5 ffdd 	bl	8018348 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 802238e:	4620      	mov	r0, r4
 8022390:	f7ff ffe4 	bl	802235c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8022394:	bd10      	pop	{r4, pc}
 8022396:	6840      	ldr	r0, [r0, #4]
 8022398:	f000 fbdc 	bl	8022b54 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 802239c:	2800      	cmp	r0, #0
 802239e:	d0f4      	beq.n	802238a <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 80223a0:	6862      	ldr	r2, [r4, #4]
 80223a2:	7a53      	ldrb	r3, [r2, #9]
 80223a4:	2b00      	cmp	r3, #0
 80223a6:	d0fc      	beq.n	80223a2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80223a8:	e7ef      	b.n	802238a <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 80223aa:	bf00      	nop
 80223ac:	2000cf74 	.word	0x2000cf74

080223b0 <_ZN8touchgfx3HAL10initializeEv>:
 80223b0:	b510      	push	{r4, lr}
 80223b2:	4604      	mov	r4, r0
 80223b4:	f7f5 ffa4 	bl	8018300 <_ZN8touchgfx10OSWrappers10initializeEv>
 80223b8:	6860      	ldr	r0, [r4, #4]
 80223ba:	6803      	ldr	r3, [r0, #0]
 80223bc:	68db      	ldr	r3, [r3, #12]
 80223be:	4798      	blx	r3
 80223c0:	68e0      	ldr	r0, [r4, #12]
 80223c2:	6803      	ldr	r3, [r0, #0]
 80223c4:	689b      	ldr	r3, [r3, #8]
 80223c6:	4798      	blx	r3
 80223c8:	6823      	ldr	r3, [r4, #0]
 80223ca:	4620      	mov	r0, r4
 80223cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80223ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80223d2:	4718      	bx	r3

080223d4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80223d4:	b508      	push	{r3, lr}
 80223d6:	290b      	cmp	r1, #11
 80223d8:	d816      	bhi.n	8022408 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x34>
 80223da:	e8df f001 	tbb	[pc, r1]
 80223de:	080a      	.short	0x080a
 80223e0:	0c0c0c06 	.word	0x0c0c0c06
 80223e4:	1313130c 	.word	0x1313130c
 80223e8:	1313      	.short	0x1313
 80223ea:	2020      	movs	r0, #32
 80223ec:	bd08      	pop	{r3, pc}
 80223ee:	2018      	movs	r0, #24
 80223f0:	bd08      	pop	{r3, pc}
 80223f2:	2010      	movs	r0, #16
 80223f4:	bd08      	pop	{r3, pc}
 80223f6:	4b05      	ldr	r3, [pc, #20]	; (802240c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x38>)
 80223f8:	f240 213b 	movw	r1, #571	; 0x23b
 80223fc:	4a04      	ldr	r2, [pc, #16]	; (8022410 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80223fe:	4805      	ldr	r0, [pc, #20]	; (8022414 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8022400:	f008 fe7a 	bl	802b0f8 <__assert_func>
 8022404:	2008      	movs	r0, #8
 8022406:	bd08      	pop	{r3, pc}
 8022408:	2000      	movs	r0, #0
 802240a:	bd08      	pop	{r3, pc}
 802240c:	0802e80f 	.word	0x0802e80f
 8022410:	0802ebb0 	.word	0x0802ebb0
 8022414:	0802e716 	.word	0x0802e716

08022418 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8022418:	b570      	push	{r4, r5, r6, lr}
 802241a:	460d      	mov	r5, r1
 802241c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8022420:	4616      	mov	r6, r2
 8022422:	461c      	mov	r4, r3
 8022424:	f7ff ffd6 	bl	80223d4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8022428:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 802242c:	10c0      	asrs	r0, r0, #3
 802242e:	fb06 5101 	mla	r1, r6, r1, r5
 8022432:	fb00 4001 	mla	r0, r0, r1, r4
 8022436:	bd70      	pop	{r4, r5, r6, pc}

08022438 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8022438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802243c:	b08a      	sub	sp, #40	; 0x28
 802243e:	f04f 0e00 	mov.w	lr, #0
 8022442:	4604      	mov	r4, r0
 8022444:	469a      	mov	sl, r3
 8022446:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 802244a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 802244e:	f1b8 0f02 	cmp.w	r8, #2
 8022452:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8022456:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 802245a:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 802245e:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8022462:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8022466:	f8cd e020 	str.w	lr, [sp, #32]
 802246a:	d031      	beq.n	80224d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x98>
 802246c:	2bff      	cmp	r3, #255	; 0xff
 802246e:	d12d      	bne.n	80224cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x94>
 8022470:	4570      	cmp	r0, lr
 8022472:	bf14      	ite	ne
 8022474:	2004      	movne	r0, #4
 8022476:	2001      	moveq	r0, #1
 8022478:	9204      	str	r2, [sp, #16]
 802247a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 802247e:	9002      	str	r0, [sp, #8]
 8022480:	4620      	mov	r0, r4
 8022482:	9103      	str	r1, [sp, #12]
 8022484:	f8ad 201c 	strh.w	r2, [sp, #28]
 8022488:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 802248c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8022490:	f8ad 501a 	strh.w	r5, [sp, #26]
 8022494:	f7ff ff62 	bl	802235c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8022498:	9701      	str	r7, [sp, #4]
 802249a:	4603      	mov	r3, r0
 802249c:	f8cd 9000 	str.w	r9, [sp]
 80224a0:	4651      	mov	r1, sl
 80224a2:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80224a6:	4620      	mov	r0, r4
 80224a8:	f7ff ffb6 	bl	8022418 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80224ac:	f8ad 901e 	strh.w	r9, [sp, #30]
 80224b0:	9005      	str	r0, [sp, #20]
 80224b2:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 80224b6:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 80224ba:	b106      	cbz	r6, 80224be <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x86>
 80224bc:	b98d      	cbnz	r5, 80224e2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xaa>
 80224be:	4b13      	ldr	r3, [pc, #76]	; (802250c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80224c0:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80224c4:	4a12      	ldr	r2, [pc, #72]	; (8022510 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 80224c6:	4813      	ldr	r0, [pc, #76]	; (8022514 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80224c8:	f008 fe16 	bl	802b0f8 <__assert_func>
 80224cc:	2004      	movs	r0, #4
 80224ce:	e7d3      	b.n	8022478 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80224d0:	2bff      	cmp	r3, #255	; 0xff
 80224d2:	d104      	bne.n	80224de <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa6>
 80224d4:	2800      	cmp	r0, #0
 80224d6:	bf14      	ite	ne
 80224d8:	2040      	movne	r0, #64	; 0x40
 80224da:	2020      	moveq	r0, #32
 80224dc:	e7cc      	b.n	8022478 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80224de:	2040      	movs	r0, #64	; 0x40
 80224e0:	e7ca      	b.n	8022478 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80224e2:	6823      	ldr	r3, [r4, #0]
 80224e4:	4620      	mov	r0, r4
 80224e6:	9d02      	ldr	r5, [sp, #8]
 80224e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80224ea:	4798      	blx	r3
 80224ec:	4228      	tst	r0, r5
 80224ee:	d104      	bne.n	80224fa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc2>
 80224f0:	4b09      	ldr	r3, [pc, #36]	; (8022518 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe0>)
 80224f2:	f240 11bd 	movw	r1, #445	; 0x1bd
 80224f6:	4a06      	ldr	r2, [pc, #24]	; (8022510 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 80224f8:	e7e5      	b.n	80224c6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8e>
 80224fa:	6860      	ldr	r0, [r4, #4]
 80224fc:	a902      	add	r1, sp, #8
 80224fe:	6803      	ldr	r3, [r0, #0]
 8022500:	685b      	ldr	r3, [r3, #4]
 8022502:	4798      	blx	r3
 8022504:	b00a      	add	sp, #40	; 0x28
 8022506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802250a:	bf00      	nop
 802250c:	0802e792 	.word	0x0802e792
 8022510:	0802ea52 	.word	0x0802ea52
 8022514:	0802e716 	.word	0x0802e716
 8022518:	0802e7ca 	.word	0x0802e7ca

0802251c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 802251c:	b510      	push	{r4, lr}
 802251e:	b08a      	sub	sp, #40	; 0x28
 8022520:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8022524:	9408      	str	r4, [sp, #32]
 8022526:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 802252a:	9407      	str	r4, [sp, #28]
 802252c:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8022530:	9406      	str	r4, [sp, #24]
 8022532:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8022536:	9405      	str	r4, [sp, #20]
 8022538:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 802253c:	9404      	str	r4, [sp, #16]
 802253e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8022542:	9403      	str	r4, [sp, #12]
 8022544:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8022548:	9402      	str	r4, [sp, #8]
 802254a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 802254e:	e88d 0018 	stmia.w	sp, {r3, r4}
 8022552:	4613      	mov	r3, r2
 8022554:	2200      	movs	r2, #0
 8022556:	f7ff ff6f 	bl	8022438 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802255a:	b00a      	add	sp, #40	; 0x28
 802255c:	bd10      	pop	{r4, pc}
	...

08022560 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8022560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022562:	b08b      	sub	sp, #44	; 0x2c
 8022564:	4616      	mov	r6, r2
 8022566:	460d      	mov	r5, r1
 8022568:	461f      	mov	r7, r3
 802256a:	4604      	mov	r4, r0
 802256c:	f7ef ff2e 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 8022570:	6803      	ldr	r3, [r0, #0]
 8022572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022574:	4798      	blx	r3
 8022576:	4b0e      	ldr	r3, [pc, #56]	; (80225b0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8022578:	9008      	str	r0, [sp, #32]
 802257a:	2200      	movs	r2, #0
 802257c:	9007      	str	r0, [sp, #28]
 802257e:	4629      	mov	r1, r5
 8022580:	881b      	ldrh	r3, [r3, #0]
 8022582:	4620      	mov	r0, r4
 8022584:	9700      	str	r7, [sp, #0]
 8022586:	9306      	str	r3, [sp, #24]
 8022588:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 802258c:	9305      	str	r3, [sp, #20]
 802258e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8022592:	9304      	str	r3, [sp, #16]
 8022594:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8022598:	9303      	str	r3, [sp, #12]
 802259a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 802259e:	9302      	str	r3, [sp, #8]
 80225a0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80225a4:	9301      	str	r3, [sp, #4]
 80225a6:	4633      	mov	r3, r6
 80225a8:	f7ff ff46 	bl	8022438 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80225ac:	b00b      	add	sp, #44	; 0x2c
 80225ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80225b0:	2000cf70 	.word	0x2000cf70

080225b4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 80225b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80225b8:	461f      	mov	r7, r3
 80225ba:	4b14      	ldr	r3, [pc, #80]	; (802260c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 80225bc:	b08a      	sub	sp, #40	; 0x28
 80225be:	4616      	mov	r6, r2
 80225c0:	f8b3 8000 	ldrh.w	r8, [r3]
 80225c4:	460d      	mov	r5, r1
 80225c6:	4604      	mov	r4, r0
 80225c8:	f7ef ff00 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 80225cc:	6803      	ldr	r3, [r0, #0]
 80225ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80225d0:	4798      	blx	r3
 80225d2:	2302      	movs	r3, #2
 80225d4:	9008      	str	r0, [sp, #32]
 80225d6:	2200      	movs	r2, #0
 80225d8:	9307      	str	r3, [sp, #28]
 80225da:	2301      	movs	r3, #1
 80225dc:	4629      	mov	r1, r5
 80225de:	4620      	mov	r0, r4
 80225e0:	9305      	str	r3, [sp, #20]
 80225e2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80225e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80225ea:	9304      	str	r3, [sp, #16]
 80225ec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80225f0:	9700      	str	r7, [sp, #0]
 80225f2:	9303      	str	r3, [sp, #12]
 80225f4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80225f8:	9302      	str	r3, [sp, #8]
 80225fa:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80225fe:	9301      	str	r3, [sp, #4]
 8022600:	4633      	mov	r3, r6
 8022602:	f7ff ff19 	bl	8022438 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8022606:	b00a      	add	sp, #40	; 0x28
 8022608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802260c:	2000cf70 	.word	0x2000cf70

08022610 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8022610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022614:	b08b      	sub	sp, #44	; 0x2c
 8022616:	469b      	mov	fp, r3
 8022618:	4604      	mov	r4, r0
 802261a:	4692      	mov	sl, r2
 802261c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8022620:	2600      	movs	r6, #0
 8022622:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8022626:	4689      	mov	r9, r1
 8022628:	2fff      	cmp	r7, #255	; 0xff
 802262a:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 802262e:	9608      	str	r6, [sp, #32]
 8022630:	bf0c      	ite	eq
 8022632:	2302      	moveq	r3, #2
 8022634:	2308      	movne	r3, #8
 8022636:	9603      	str	r6, [sp, #12]
 8022638:	9302      	str	r3, [sp, #8]
 802263a:	f7ff fe8f 	bl	802235c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 802263e:	9501      	str	r5, [sp, #4]
 8022640:	4603      	mov	r3, r0
 8022642:	465a      	mov	r2, fp
 8022644:	4651      	mov	r1, sl
 8022646:	f8cd 8000 	str.w	r8, [sp]
 802264a:	4620      	mov	r0, r4
 802264c:	f7ff fee4 	bl	8022418 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8022650:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8022654:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8022658:	f8ad 3018 	strh.w	r3, [sp, #24]
 802265c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8022660:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8022664:	f8ad 301a 	strh.w	r3, [sp, #26]
 8022668:	6823      	ldr	r3, [r4, #0]
 802266a:	9d02      	ldr	r5, [sp, #8]
 802266c:	9005      	str	r0, [sp, #20]
 802266e:	4620      	mov	r0, r4
 8022670:	f8ad 601c 	strh.w	r6, [sp, #28]
 8022674:	f8ad 801e 	strh.w	r8, [sp, #30]
 8022678:	f8cd 9020 	str.w	r9, [sp, #32]
 802267c:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8022680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022682:	4798      	blx	r3
 8022684:	4228      	tst	r0, r5
 8022686:	d106      	bne.n	8022696 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x86>
 8022688:	4b07      	ldr	r3, [pc, #28]	; (80226a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 802268a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 802268e:	4a07      	ldr	r2, [pc, #28]	; (80226ac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8022690:	4807      	ldr	r0, [pc, #28]	; (80226b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0xa0>)
 8022692:	f008 fd31 	bl	802b0f8 <__assert_func>
 8022696:	6860      	ldr	r0, [r4, #4]
 8022698:	a902      	add	r1, sp, #8
 802269a:	6803      	ldr	r3, [r0, #0]
 802269c:	685b      	ldr	r3, [r3, #4]
 802269e:	4798      	blx	r3
 80226a0:	b00b      	add	sp, #44	; 0x2c
 80226a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226a6:	bf00      	nop
 80226a8:	0802e7ca 	.word	0x0802e7ca
 80226ac:	0802eb1b 	.word	0x0802eb1b
 80226b0:	0802e716 	.word	0x0802e716

080226b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80226b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80226b8:	461f      	mov	r7, r3
 80226ba:	4b0b      	ldr	r3, [pc, #44]	; (80226e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80226bc:	460d      	mov	r5, r1
 80226be:	4616      	mov	r6, r2
 80226c0:	f8b3 8000 	ldrh.w	r8, [r3]
 80226c4:	4604      	mov	r4, r0
 80226c6:	f7ef fe81 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 80226ca:	6803      	ldr	r3, [r0, #0]
 80226cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80226ce:	4798      	blx	r3
 80226d0:	463b      	mov	r3, r7
 80226d2:	4632      	mov	r2, r6
 80226d4:	4629      	mov	r1, r5
 80226d6:	9001      	str	r0, [sp, #4]
 80226d8:	4620      	mov	r0, r4
 80226da:	f8cd 8000 	str.w	r8, [sp]
 80226de:	f7ff fe9b 	bl	8022418 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80226e2:	b002      	add	sp, #8
 80226e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80226e8:	2000cf70 	.word	0x2000cf70

080226ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80226ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80226f0:	4698      	mov	r8, r3
 80226f2:	b088      	sub	sp, #32
 80226f4:	2300      	movs	r3, #0
 80226f6:	4617      	mov	r7, r2
 80226f8:	4604      	mov	r4, r0
 80226fa:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80226fe:	9306      	str	r3, [sp, #24]
 8022700:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8022704:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8022708:	9300      	str	r3, [sp, #0]
 802270a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 802270e:	9101      	str	r1, [sp, #4]
 8022710:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022714:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8022718:	f8ad 6010 	strh.w	r6, [sp, #16]
 802271c:	f88d 301c 	strb.w	r3, [sp, #28]
 8022720:	f8ad 5012 	strh.w	r5, [sp, #18]
 8022724:	f7ff fe1a 	bl	802235c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8022728:	4642      	mov	r2, r8
 802272a:	4603      	mov	r3, r0
 802272c:	4639      	mov	r1, r7
 802272e:	4620      	mov	r0, r4
 8022730:	f7ff ffc0 	bl	80226b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8022734:	4b16      	ldr	r3, [pc, #88]	; (8022790 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8022736:	9003      	str	r0, [sp, #12]
 8022738:	881b      	ldrh	r3, [r3, #0]
 802273a:	f8ad 3016 	strh.w	r3, [sp, #22]
 802273e:	f7ef fe45 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 8022742:	6803      	ldr	r3, [r0, #0]
 8022744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022746:	4798      	blx	r3
 8022748:	f88d 001e 	strb.w	r0, [sp, #30]
 802274c:	f88d 001d 	strb.w	r0, [sp, #29]
 8022750:	b106      	cbz	r6, 8022754 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8022752:	b935      	cbnz	r5, 8022762 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8022754:	4b0f      	ldr	r3, [pc, #60]	; (8022794 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8022756:	f240 11d9 	movw	r1, #473	; 0x1d9
 802275a:	4a0f      	ldr	r2, [pc, #60]	; (8022798 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 802275c:	480f      	ldr	r0, [pc, #60]	; (802279c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 802275e:	f008 fccb 	bl	802b0f8 <__assert_func>
 8022762:	6823      	ldr	r3, [r4, #0]
 8022764:	4620      	mov	r0, r4
 8022766:	9d00      	ldr	r5, [sp, #0]
 8022768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802276a:	4798      	blx	r3
 802276c:	4228      	tst	r0, r5
 802276e:	d104      	bne.n	802277a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8022770:	4b0b      	ldr	r3, [pc, #44]	; (80227a0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8022772:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8022776:	4a08      	ldr	r2, [pc, #32]	; (8022798 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8022778:	e7f0      	b.n	802275c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 802277a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802277c:	4669      	mov	r1, sp
 802277e:	6860      	ldr	r0, [r4, #4]
 8022780:	9306      	str	r3, [sp, #24]
 8022782:	6803      	ldr	r3, [r0, #0]
 8022784:	685b      	ldr	r3, [r3, #4]
 8022786:	4798      	blx	r3
 8022788:	b008      	add	sp, #32
 802278a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802278e:	bf00      	nop
 8022790:	2000cf70 	.word	0x2000cf70
 8022794:	0802e792 	.word	0x0802e792
 8022798:	0802e904 	.word	0x0802e904
 802279c:	0802e716 	.word	0x0802e716
 80227a0:	0802e7ca 	.word	0x0802e7ca

080227a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80227a4:	4b22      	ldr	r3, [pc, #136]	; (8022830 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 80227a6:	b570      	push	{r4, r5, r6, lr}
 80227a8:	b08a      	sub	sp, #40	; 0x28
 80227aa:	781b      	ldrb	r3, [r3, #0]
 80227ac:	4604      	mov	r4, r0
 80227ae:	e88d 0006 	stmia.w	sp, {r1, r2}
 80227b2:	b933      	cbnz	r3, 80227c2 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x1e>
 80227b4:	4b1f      	ldr	r3, [pc, #124]	; (8022834 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 80227b6:	f240 2105 	movw	r1, #517	; 0x205
 80227ba:	4a1f      	ldr	r2, [pc, #124]	; (8022838 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80227bc:	481f      	ldr	r0, [pc, #124]	; (802283c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80227be:	f008 fc9b 	bl	802b0f8 <__assert_func>
 80227c2:	2300      	movs	r3, #0
 80227c4:	f8bd 5000 	ldrh.w	r5, [sp]
 80227c8:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80227cc:	9308      	str	r3, [sp, #32]
 80227ce:	2301      	movs	r3, #1
 80227d0:	9302      	str	r3, [sp, #8]
 80227d2:	6803      	ldr	r3, [r0, #0]
 80227d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80227d6:	4798      	blx	r3
 80227d8:	4632      	mov	r2, r6
 80227da:	4629      	mov	r1, r5
 80227dc:	4603      	mov	r3, r0
 80227de:	4620      	mov	r0, r4
 80227e0:	f7ff ff68 	bl	80226b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80227e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80227e6:	9003      	str	r0, [sp, #12]
 80227e8:	9305      	str	r3, [sp, #20]
 80227ea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80227ee:	f8ad 3018 	strh.w	r3, [sp, #24]
 80227f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80227f6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80227fa:	4b11      	ldr	r3, [pc, #68]	; (8022840 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80227fc:	881b      	ldrh	r3, [r3, #0]
 80227fe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022802:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022806:	f7ef fde1 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 802280a:	6803      	ldr	r3, [r0, #0]
 802280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802280e:	4798      	blx	r3
 8022810:	23ff      	movs	r3, #255	; 0xff
 8022812:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8022816:	a902      	add	r1, sp, #8
 8022818:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 802281c:	6860      	ldr	r0, [r4, #4]
 802281e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8022822:	6803      	ldr	r3, [r0, #0]
 8022824:	685b      	ldr	r3, [r3, #4]
 8022826:	4798      	blx	r3
 8022828:	6c60      	ldr	r0, [r4, #68]	; 0x44
 802282a:	b00a      	add	sp, #40	; 0x28
 802282c:	bd70      	pop	{r4, r5, r6, pc}
 802282e:	bf00      	nop
 8022830:	2000cf75 	.word	0x2000cf75
 8022834:	0802e663 	.word	0x0802e663
 8022838:	0802e9a8 	.word	0x0802e9a8
 802283c:	0802e716 	.word	0x0802e716
 8022840:	2000cf70 	.word	0x2000cf70

08022844 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8022844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022846:	461d      	mov	r5, r3
 8022848:	b08b      	sub	sp, #44	; 0x2c
 802284a:	2300      	movs	r3, #0
 802284c:	4604      	mov	r4, r0
 802284e:	9308      	str	r3, [sp, #32]
 8022850:	2301      	movs	r3, #1
 8022852:	9302      	str	r3, [sp, #8]
 8022854:	6803      	ldr	r3, [r0, #0]
 8022856:	e88d 0006 	stmia.w	sp, {r1, r2}
 802285a:	f8bd 6000 	ldrh.w	r6, [sp]
 802285e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8022862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022864:	4798      	blx	r3
 8022866:	463a      	mov	r2, r7
 8022868:	4631      	mov	r1, r6
 802286a:	4603      	mov	r3, r0
 802286c:	4620      	mov	r0, r4
 802286e:	f7ff ff21 	bl	80226b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8022872:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8022876:	9003      	str	r0, [sp, #12]
 8022878:	f8ad 3018 	strh.w	r3, [sp, #24]
 802287c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8022880:	9505      	str	r5, [sp, #20]
 8022882:	f8ad 301a 	strh.w	r3, [sp, #26]
 8022886:	4b0d      	ldr	r3, [pc, #52]	; (80228bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x78>)
 8022888:	881b      	ldrh	r3, [r3, #0]
 802288a:	f8ad 301c 	strh.w	r3, [sp, #28]
 802288e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022890:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022894:	f7ef fd9a 	bl	80123cc <_ZN8touchgfx3HAL3lcdEv>
 8022898:	6803      	ldr	r3, [r0, #0]
 802289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802289c:	4798      	blx	r3
 802289e:	23ff      	movs	r3, #255	; 0xff
 80228a0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80228a4:	a902      	add	r1, sp, #8
 80228a6:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80228aa:	6860      	ldr	r0, [r4, #4]
 80228ac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80228b0:	6803      	ldr	r3, [r0, #0]
 80228b2:	685b      	ldr	r3, [r3, #4]
 80228b4:	4798      	blx	r3
 80228b6:	4628      	mov	r0, r5
 80228b8:	b00b      	add	sp, #44	; 0x2c
 80228ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80228bc:	2000cf70 	.word	0x2000cf70

080228c0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80228c0:	b570      	push	{r4, r5, r6, lr}
 80228c2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80228c6:	4604      	mov	r4, r0
 80228c8:	b19b      	cbz	r3, 80228f2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80228ca:	2002      	movs	r0, #2
 80228cc:	f7fe fed9 	bl	8021682 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80228d0:	2300      	movs	r3, #0
 80228d2:	4620      	mov	r0, r4
 80228d4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80228d8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80228dc:	6823      	ldr	r3, [r4, #0]
 80228de:	f8d3 50a8 	ldr.w	r5, [r3, #168]	; 0xa8
 80228e2:	f7ff fd3b 	bl	802235c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80228e6:	4601      	mov	r1, r0
 80228e8:	4620      	mov	r0, r4
 80228ea:	462b      	mov	r3, r5
 80228ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80228f0:	4718      	bx	r3
 80228f2:	bd70      	pop	{r4, r5, r6, pc}

080228f4 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 80228f4:	b570      	push	{r4, r5, r6, lr}
 80228f6:	4605      	mov	r5, r0
 80228f8:	460c      	mov	r4, r1
 80228fa:	2003      	movs	r0, #3
 80228fc:	b149      	cbz	r1, 8022912 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 80228fe:	f7fe feaa 	bl	8021656 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8022902:	6928      	ldr	r0, [r5, #16]
 8022904:	b168      	cbz	r0, 8022922 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8022906:	6803      	ldr	r3, [r0, #0]
 8022908:	2101      	movs	r1, #1
 802290a:	695b      	ldr	r3, [r3, #20]
 802290c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022910:	4718      	bx	r3
 8022912:	f7fe feab 	bl	802166c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8022916:	6928      	ldr	r0, [r5, #16]
 8022918:	b118      	cbz	r0, 8022922 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 802291a:	6803      	ldr	r3, [r0, #0]
 802291c:	4621      	mov	r1, r4
 802291e:	695b      	ldr	r3, [r3, #20]
 8022920:	e7f4      	b.n	802290c <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8022922:	bd70      	pop	{r4, r5, r6, pc}

08022924 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8022924:	4770      	bx	lr

08022926 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8022926:	68c2      	ldr	r2, [r0, #12]
 8022928:	6900      	ldr	r0, [r0, #16]
 802292a:	1a13      	subs	r3, r2, r0
 802292c:	4258      	negs	r0, r3
 802292e:	4158      	adcs	r0, r3
 8022930:	4770      	bx	lr

08022932 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8022932:	68c2      	ldr	r2, [r0, #12]
 8022934:	6903      	ldr	r3, [r0, #16]
 8022936:	1a9b      	subs	r3, r3, r2
 8022938:	2b00      	cmp	r3, #0
 802293a:	bfdc      	itt	le
 802293c:	6882      	ldrle	r2, [r0, #8]
 802293e:	189b      	addle	r3, r3, r2
 8022940:	2b01      	cmp	r3, #1
 8022942:	bfcc      	ite	gt
 8022944:	2000      	movgt	r0, #0
 8022946:	2001      	movle	r0, #1
 8022948:	4770      	bx	lr

0802294a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 802294a:	6902      	ldr	r2, [r0, #16]
 802294c:	6840      	ldr	r0, [r0, #4]
 802294e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8022952:	4770      	bx	lr

08022954 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8022954:	6803      	ldr	r3, [r0, #0]
 8022956:	691b      	ldr	r3, [r3, #16]
 8022958:	4718      	bx	r3

0802295a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 802295a:	4770      	bx	lr

0802295c <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 802295c:	4770      	bx	lr
	...

08022960 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8022960:	2301      	movs	r3, #1
 8022962:	b570      	push	{r4, r5, r6, lr}
 8022964:	7203      	strb	r3, [r0, #8]
 8022966:	4604      	mov	r4, r0
 8022968:	6840      	ldr	r0, [r0, #4]
 802296a:	6803      	ldr	r3, [r0, #0]
 802296c:	699b      	ldr	r3, [r3, #24]
 802296e:	4798      	blx	r3
 8022970:	6803      	ldr	r3, [r0, #0]
 8022972:	4605      	mov	r5, r0
 8022974:	2b08      	cmp	r3, #8
 8022976:	d01e      	beq.n	80229b6 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8022978:	d80b      	bhi.n	8022992 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 802297a:	2b02      	cmp	r3, #2
 802297c:	d027      	beq.n	80229ce <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 802297e:	2b04      	cmp	r3, #4
 8022980:	d011      	beq.n	80229a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8022982:	2b01      	cmp	r3, #1
 8022984:	d028      	beq.n	80229d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8022986:	4b17      	ldr	r3, [pc, #92]	; (80229e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8022988:	218b      	movs	r1, #139	; 0x8b
 802298a:	4a17      	ldr	r2, [pc, #92]	; (80229e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 802298c:	4817      	ldr	r0, [pc, #92]	; (80229ec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 802298e:	f008 fbb3 	bl	802b0f8 <__assert_func>
 8022992:	2b40      	cmp	r3, #64	; 0x40
 8022994:	d020      	beq.n	80229d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8022996:	d801      	bhi.n	802299c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8022998:	2b20      	cmp	r3, #32
 802299a:	e7f3      	b.n	8022984 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 802299c:	2b80      	cmp	r3, #128	; 0x80
 802299e:	d01b      	beq.n	80229d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80229a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80229a4:	e7ee      	b.n	8022984 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80229a6:	6823      	ldr	r3, [r4, #0]
 80229a8:	7f01      	ldrb	r1, [r0, #28]
 80229aa:	4620      	mov	r0, r4
 80229ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80229ae:	4798      	blx	r3
 80229b0:	6823      	ldr	r3, [r4, #0]
 80229b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229b4:	e006      	b.n	80229c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80229b6:	6823      	ldr	r3, [r4, #0]
 80229b8:	7f01      	ldrb	r1, [r0, #28]
 80229ba:	4620      	mov	r0, r4
 80229bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80229be:	4798      	blx	r3
 80229c0:	6823      	ldr	r3, [r4, #0]
 80229c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80229c4:	4629      	mov	r1, r5
 80229c6:	4620      	mov	r0, r4
 80229c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80229cc:	4718      	bx	r3
 80229ce:	6823      	ldr	r3, [r4, #0]
 80229d0:	4620      	mov	r0, r4
 80229d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80229d4:	4798      	blx	r3
 80229d6:	e7f3      	b.n	80229c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 80229d8:	6823      	ldr	r3, [r4, #0]
 80229da:	4620      	mov	r0, r4
 80229dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80229de:	4798      	blx	r3
 80229e0:	e7e6      	b.n	80229b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 80229e2:	bf00      	nop
 80229e4:	0802ebf9 	.word	0x0802ebf9
 80229e8:	0802ed08 	.word	0x0802ed08
 80229ec:	0802ec1e 	.word	0x0802ec1e

080229f0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80229f0:	b570      	push	{r4, r5, r6, lr}
 80229f2:	4604      	mov	r4, r0
 80229f4:	460e      	mov	r6, r1
 80229f6:	6860      	ldr	r0, [r4, #4]
 80229f8:	6803      	ldr	r3, [r0, #0]
 80229fa:	685b      	ldr	r3, [r3, #4]
 80229fc:	4798      	blx	r3
 80229fe:	2800      	cmp	r0, #0
 8022a00:	d1f9      	bne.n	80229f6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8022a02:	4d0b      	ldr	r5, [pc, #44]	; (8022a30 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8022a04:	6828      	ldr	r0, [r5, #0]
 8022a06:	6803      	ldr	r3, [r0, #0]
 8022a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022a0a:	4798      	blx	r3
 8022a0c:	f7f5 fcb8 	bl	8018380 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8022a10:	6860      	ldr	r0, [r4, #4]
 8022a12:	4631      	mov	r1, r6
 8022a14:	6803      	ldr	r3, [r0, #0]
 8022a16:	689b      	ldr	r3, [r3, #8]
 8022a18:	4798      	blx	r3
 8022a1a:	6823      	ldr	r3, [r4, #0]
 8022a1c:	4620      	mov	r0, r4
 8022a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022a20:	4798      	blx	r3
 8022a22:	6828      	ldr	r0, [r5, #0]
 8022a24:	6803      	ldr	r3, [r0, #0]
 8022a26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022a2c:	4718      	bx	r3
 8022a2e:	bf00      	nop
 8022a30:	2000cf78 	.word	0x2000cf78

08022a34 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8022a34:	b508      	push	{r3, lr}
 8022a36:	f7f5 fc87 	bl	8018348 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8022a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8022a3e:	f7f5 bc91 	b.w	8018364 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08022a42 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8022a42:	b570      	push	{r4, r5, r6, lr}
 8022a44:	4604      	mov	r4, r0
 8022a46:	6840      	ldr	r0, [r0, #4]
 8022a48:	6803      	ldr	r3, [r0, #0]
 8022a4a:	681b      	ldr	r3, [r3, #0]
 8022a4c:	4798      	blx	r3
 8022a4e:	4605      	mov	r5, r0
 8022a50:	b908      	cbnz	r0, 8022a56 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>
 8022a52:	7a23      	ldrb	r3, [r4, #8]
 8022a54:	b973      	cbnz	r3, 8022a74 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x32>
 8022a56:	6860      	ldr	r0, [r4, #4]
 8022a58:	6803      	ldr	r3, [r0, #0]
 8022a5a:	681b      	ldr	r3, [r3, #0]
 8022a5c:	4798      	blx	r3
 8022a5e:	b928      	cbnz	r0, 8022a6c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x2a>
 8022a60:	6823      	ldr	r3, [r4, #0]
 8022a62:	4620      	mov	r0, r4
 8022a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022a6a:	4718      	bx	r3
 8022a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022a70:	f7f5 bc92 	b.w	8018398 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
 8022a74:	6860      	ldr	r0, [r4, #4]
 8022a76:	6803      	ldr	r3, [r0, #0]
 8022a78:	695b      	ldr	r3, [r3, #20]
 8022a7a:	4798      	blx	r3
 8022a7c:	7225      	strb	r5, [r4, #8]
 8022a7e:	e7ea      	b.n	8022a56 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>

08022a80 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8022a80:	b510      	push	{r4, lr}
 8022a82:	68c4      	ldr	r4, [r0, #12]
 8022a84:	6902      	ldr	r2, [r0, #16]
 8022a86:	1b12      	subs	r2, r2, r4
 8022a88:	2a00      	cmp	r2, #0
 8022a8a:	bfdc      	itt	le
 8022a8c:	6883      	ldrle	r3, [r0, #8]
 8022a8e:	18d2      	addle	r2, r2, r3
 8022a90:	2a01      	cmp	r2, #1
 8022a92:	dd18      	ble.n	8022ac6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8022a94:	6843      	ldr	r3, [r0, #4]
 8022a96:	f101 021c 	add.w	r2, r1, #28
 8022a9a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8022a9e:	f851 4b04 	ldr.w	r4, [r1], #4
 8022aa2:	4291      	cmp	r1, r2
 8022aa4:	f843 4b04 	str.w	r4, [r3], #4
 8022aa8:	d1f9      	bne.n	8022a9e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8022aaa:	880a      	ldrh	r2, [r1, #0]
 8022aac:	801a      	strh	r2, [r3, #0]
 8022aae:	788a      	ldrb	r2, [r1, #2]
 8022ab0:	709a      	strb	r2, [r3, #2]
 8022ab2:	68c3      	ldr	r3, [r0, #12]
 8022ab4:	6882      	ldr	r2, [r0, #8]
 8022ab6:	f3bf 8f5b 	dmb	ish
 8022aba:	3301      	adds	r3, #1
 8022abc:	4293      	cmp	r3, r2
 8022abe:	bfa8      	it	ge
 8022ac0:	1a9b      	subge	r3, r3, r2
 8022ac2:	60c3      	str	r3, [r0, #12]
 8022ac4:	bd10      	pop	{r4, pc}
 8022ac6:	4b03      	ldr	r3, [pc, #12]	; (8022ad4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8022ac8:	2139      	movs	r1, #57	; 0x39
 8022aca:	4a03      	ldr	r2, [pc, #12]	; (8022ad8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8022acc:	4803      	ldr	r0, [pc, #12]	; (8022adc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8022ace:	f008 fb13 	bl	802b0f8 <__assert_func>
 8022ad2:	bf00      	nop
 8022ad4:	0802ec44 	.word	0x0802ec44
 8022ad8:	0802ed38 	.word	0x0802ed38
 8022adc:	0802ec1e 	.word	0x0802ec1e

08022ae0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8022ae0:	b510      	push	{r4, lr}
 8022ae2:	6803      	ldr	r3, [r0, #0]
 8022ae4:	4604      	mov	r4, r0
 8022ae6:	681b      	ldr	r3, [r3, #0]
 8022ae8:	4798      	blx	r3
 8022aea:	b128      	cbz	r0, 8022af8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8022aec:	4b07      	ldr	r3, [pc, #28]	; (8022b0c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8022aee:	213f      	movs	r1, #63	; 0x3f
 8022af0:	4a07      	ldr	r2, [pc, #28]	; (8022b10 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8022af2:	4808      	ldr	r0, [pc, #32]	; (8022b14 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8022af4:	f008 fb00 	bl	802b0f8 <__assert_func>
 8022af8:	6923      	ldr	r3, [r4, #16]
 8022afa:	68a2      	ldr	r2, [r4, #8]
 8022afc:	f3bf 8f5b 	dmb	ish
 8022b00:	3301      	adds	r3, #1
 8022b02:	4293      	cmp	r3, r2
 8022b04:	bfa8      	it	ge
 8022b06:	1a9b      	subge	r3, r3, r2
 8022b08:	6123      	str	r3, [r4, #16]
 8022b0a:	bd10      	pop	{r4, pc}
 8022b0c:	0802ec67 	.word	0x0802ec67
 8022b10:	0802ed86 	.word	0x0802ed86
 8022b14:	0802ec1e 	.word	0x0802ec1e

08022b18 <_ZN8touchgfx13DMA_Interface5startEv>:
 8022b18:	b510      	push	{r4, lr}
 8022b1a:	4604      	mov	r4, r0
 8022b1c:	6840      	ldr	r0, [r0, #4]
 8022b1e:	6803      	ldr	r3, [r0, #0]
 8022b20:	681b      	ldr	r3, [r3, #0]
 8022b22:	4798      	blx	r3
 8022b24:	b948      	cbnz	r0, 8022b3a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8022b26:	7a63      	ldrb	r3, [r4, #9]
 8022b28:	b13b      	cbz	r3, 8022b3a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8022b2a:	7a23      	ldrb	r3, [r4, #8]
 8022b2c:	b92b      	cbnz	r3, 8022b3a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8022b2e:	6823      	ldr	r3, [r4, #0]
 8022b30:	4620      	mov	r0, r4
 8022b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022b38:	4718      	bx	r3
 8022b3a:	bd10      	pop	{r4, pc}

08022b3c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8022b3c:	b510      	push	{r4, lr}
 8022b3e:	6082      	str	r2, [r0, #8]
 8022b40:	2200      	movs	r2, #0
 8022b42:	4c03      	ldr	r4, [pc, #12]	; (8022b50 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8022b44:	6041      	str	r1, [r0, #4]
 8022b46:	6004      	str	r4, [r0, #0]
 8022b48:	60c2      	str	r2, [r0, #12]
 8022b4a:	6102      	str	r2, [r0, #16]
 8022b4c:	bd10      	pop	{r4, pc}
 8022b4e:	bf00      	nop
 8022b50:	0802ecec 	.word	0x0802ecec

08022b54 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8022b54:	6840      	ldr	r0, [r0, #4]
 8022b56:	6803      	ldr	r3, [r0, #0]
 8022b58:	681b      	ldr	r3, [r3, #0]
 8022b5a:	4718      	bx	r3

08022b5c <_ZN8touchgfx7OutlineD1Ev>:
 8022b5c:	4770      	bx	lr

08022b5e <_ZN8touchgfx7OutlineD0Ev>:
 8022b5e:	b510      	push	{r4, lr}
 8022b60:	4604      	mov	r4, r0
 8022b62:	2148      	movs	r1, #72	; 0x48
 8022b64:	f007 fcdd 	bl	802a522 <_ZdlPvj>
 8022b68:	4620      	mov	r0, r4
 8022b6a:	bd10      	pop	{r4, pc}

08022b6c <_ZN8touchgfx7Outline5resetEv>:
 8022b6c:	b510      	push	{r4, lr}
 8022b6e:	4604      	mov	r4, r0
 8022b70:	f001 f8aa 	bl	8023cc8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8022b74:	60e0      	str	r0, [r4, #12]
 8022b76:	f001 f8ad 	bl	8023cd4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8022b7a:	68e3      	ldr	r3, [r4, #12]
 8022b7c:	2200      	movs	r2, #0
 8022b7e:	08c0      	lsrs	r0, r0, #3
 8022b80:	6123      	str	r3, [r4, #16]
 8022b82:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8022b86:	6060      	str	r0, [r4, #4]
 8022b88:	82a3      	strh	r3, [r4, #20]
 8022b8a:	82e3      	strh	r3, [r4, #22]
 8022b8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022b8e:	60a2      	str	r2, [r4, #8]
 8022b90:	f023 0301 	bic.w	r3, r3, #1
 8022b94:	8322      	strh	r2, [r4, #24]
 8022b96:	8362      	strh	r2, [r4, #26]
 8022b98:	f043 0302 	orr.w	r3, r3, #2
 8022b9c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8022ba0:	63e3      	str	r3, [r4, #60]	; 0x3c
 8022ba2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022ba6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022ba8:	6323      	str	r3, [r4, #48]	; 0x30
 8022baa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8022bae:	6363      	str	r3, [r4, #52]	; 0x34
 8022bb0:	63a3      	str	r3, [r4, #56]	; 0x38
 8022bb2:	bd10      	pop	{r4, pc}

08022bb4 <_ZN8touchgfx7OutlineC1Ev>:
 8022bb4:	4b0f      	ldr	r3, [pc, #60]	; (8022bf4 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8022bb6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022bba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8022bbe:	b510      	push	{r4, lr}
 8022bc0:	6003      	str	r3, [r0, #0]
 8022bc2:	2300      	movs	r3, #0
 8022bc4:	4604      	mov	r4, r0
 8022bc6:	62c2      	str	r2, [r0, #44]	; 0x2c
 8022bc8:	6043      	str	r3, [r0, #4]
 8022bca:	6083      	str	r3, [r0, #8]
 8022bcc:	60c3      	str	r3, [r0, #12]
 8022bce:	6103      	str	r3, [r0, #16]
 8022bd0:	6143      	str	r3, [r0, #20]
 8022bd2:	6183      	str	r3, [r0, #24]
 8022bd4:	61c3      	str	r3, [r0, #28]
 8022bd6:	6203      	str	r3, [r0, #32]
 8022bd8:	6243      	str	r3, [r0, #36]	; 0x24
 8022bda:	6283      	str	r3, [r0, #40]	; 0x28
 8022bdc:	6302      	str	r2, [r0, #48]	; 0x30
 8022bde:	6341      	str	r1, [r0, #52]	; 0x34
 8022be0:	6381      	str	r1, [r0, #56]	; 0x38
 8022be2:	63c3      	str	r3, [r0, #60]	; 0x3c
 8022be4:	6402      	str	r2, [r0, #64]	; 0x40
 8022be6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8022bea:	f7ff ffbf 	bl	8022b6c <_ZN8touchgfx7Outline5resetEv>
 8022bee:	4620      	mov	r0, r4
 8022bf0:	bd10      	pop	{r4, pc}
 8022bf2:	bf00      	nop
 8022bf4:	0802edc0 	.word	0x0802edc0

08022bf8 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8022bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bfc:	b093      	sub	sp, #76	; 0x4c
 8022bfe:	4604      	mov	r4, r0
 8022c00:	1155      	asrs	r5, r2, #5
 8022c02:	f002 0c1f 	and.w	ip, r2, #31
 8022c06:	981c      	ldr	r0, [sp, #112]	; 0x70
 8022c08:	9305      	str	r3, [sp, #20]
 8022c0a:	1143      	asrs	r3, r0, #5
 8022c0c:	1146      	asrs	r6, r0, #5
 8022c0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8022c10:	f000 031f 	and.w	r3, r0, #31
 8022c14:	9303      	str	r3, [sp, #12]
 8022c16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022c18:	429d      	cmp	r5, r3
 8022c1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022c1c:	bfb8      	it	lt
 8022c1e:	6325      	strlt	r5, [r4, #48]	; 0x30
 8022c20:	429d      	cmp	r5, r3
 8022c22:	bfa4      	itt	ge
 8022c24:	1c6b      	addge	r3, r5, #1
 8022c26:	63a3      	strge	r3, [r4, #56]	; 0x38
 8022c28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022c2a:	429e      	cmp	r6, r3
 8022c2c:	bfb8      	it	lt
 8022c2e:	4633      	movlt	r3, r6
 8022c30:	ea4f 1660 	mov.w	r6, r0, asr #5
 8022c34:	bfb8      	it	lt
 8022c36:	6323      	strlt	r3, [r4, #48]	; 0x30
 8022c38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022c3a:	429e      	cmp	r6, r3
 8022c3c:	bfa2      	ittt	ge
 8022c3e:	4633      	movge	r3, r6
 8022c40:	3301      	addge	r3, #1
 8022c42:	63a3      	strge	r3, [r4, #56]	; 0x38
 8022c44:	9b05      	ldr	r3, [sp, #20]
 8022c46:	eba3 0a01 	sub.w	sl, r3, r1
 8022c4a:	1143      	asrs	r3, r0, #5
 8022c4c:	429d      	cmp	r5, r3
 8022c4e:	f040 811e 	bne.w	8022e8e <_ZN8touchgfx7Outline10renderLineEiiii+0x296>
 8022c52:	9b05      	ldr	r3, [sp, #20]
 8022c54:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8022c58:	9b03      	ldr	r3, [sp, #12]
 8022c5a:	459c      	cmp	ip, r3
 8022c5c:	d12d      	bne.n	8022cba <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 8022c5e:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8022c62:	eb0e 4105 	add.w	r1, lr, r5, lsl #16
 8022c66:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8022c6a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8022c6e:	4299      	cmp	r1, r3
 8022c70:	d038      	beq.n	8022ce4 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 8022c72:	8b63      	ldrh	r3, [r4, #26]
 8022c74:	8b21      	ldrh	r1, [r4, #24]
 8022c76:	430b      	orrs	r3, r1
 8022c78:	b21b      	sxth	r3, r3
 8022c7a:	b15b      	cbz	r3, 8022c94 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c>
 8022c7c:	2a00      	cmp	r2, #0
 8022c7e:	db09      	blt.n	8022c94 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c>
 8022c80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022c82:	4293      	cmp	r3, r2
 8022c84:	dd06      	ble.n	8022c94 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c>
 8022c86:	68a2      	ldr	r2, [r4, #8]
 8022c88:	6863      	ldr	r3, [r4, #4]
 8022c8a:	429a      	cmp	r2, r3
 8022c8c:	d308      	bcc.n	8022ca0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa8>
 8022c8e:	2301      	movs	r3, #1
 8022c90:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022c94:	f8a4 e014 	strh.w	lr, [r4, #20]
 8022c98:	82e5      	strh	r5, [r4, #22]
 8022c9a:	2300      	movs	r3, #0
 8022c9c:	8323      	strh	r3, [r4, #24]
 8022c9e:	e0d3      	b.n	8022e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8022ca0:	f104 0314 	add.w	r3, r4, #20
 8022ca4:	6922      	ldr	r2, [r4, #16]
 8022ca6:	cb03      	ldmia	r3!, {r0, r1}
 8022ca8:	6010      	str	r0, [r2, #0]
 8022caa:	6051      	str	r1, [r2, #4]
 8022cac:	6923      	ldr	r3, [r4, #16]
 8022cae:	3308      	adds	r3, #8
 8022cb0:	6123      	str	r3, [r4, #16]
 8022cb2:	68a3      	ldr	r3, [r4, #8]
 8022cb4:	3301      	adds	r3, #1
 8022cb6:	60a3      	str	r3, [r4, #8]
 8022cb8:	e7ec      	b.n	8022c94 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c>
 8022cba:	9b05      	ldr	r3, [sp, #20]
 8022cbc:	114f      	asrs	r7, r1, #5
 8022cbe:	f001 011f 	and.w	r1, r1, #31
 8022cc2:	f003 031f 	and.w	r3, r3, #31
 8022cc6:	4577      	cmp	r7, lr
 8022cc8:	9304      	str	r3, [sp, #16]
 8022cca:	9b03      	ldr	r3, [sp, #12]
 8022ccc:	eba3 020c 	sub.w	r2, r3, ip
 8022cd0:	d10b      	bne.n	8022cea <_ZN8touchgfx7Outline10renderLineEiiii+0xf2>
 8022cd2:	8b23      	ldrh	r3, [r4, #24]
 8022cd4:	4413      	add	r3, r2
 8022cd6:	8323      	strh	r3, [r4, #24]
 8022cd8:	9b04      	ldr	r3, [sp, #16]
 8022cda:	4419      	add	r1, r3
 8022cdc:	8b63      	ldrh	r3, [r4, #26]
 8022cde:	fb02 3201 	mla	r2, r2, r1, r3
 8022ce2:	8362      	strh	r2, [r4, #26]
 8022ce4:	b013      	add	sp, #76	; 0x4c
 8022ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022cea:	f1ba 0f00 	cmp.w	sl, #0
 8022cee:	8b20      	ldrh	r0, [r4, #24]
 8022cf0:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8022cf4:	bfaf      	iteee	ge
 8022cf6:	f1c1 0320 	rsbge	r3, r1, #32
 8022cfa:	434a      	mullt	r2, r1
 8022cfc:	f1ca 0a00 	rsblt	sl, sl, #0
 8022d00:	2300      	movlt	r3, #0
 8022d02:	bfa3      	ittte	ge
 8022d04:	435a      	mulge	r2, r3
 8022d06:	2320      	movge	r3, #32
 8022d08:	f04f 0b01 	movge.w	fp, #1
 8022d0c:	f04f 3bff 	movlt.w	fp, #4294967295
 8022d10:	9302      	str	r3, [sp, #8]
 8022d12:	9b02      	ldr	r3, [sp, #8]
 8022d14:	fb92 f6fa 	sdiv	r6, r2, sl
 8022d18:	fb0a 2216 	mls	r2, sl, r6, r2
 8022d1c:	4419      	add	r1, r3
 8022d1e:	8b63      	ldrh	r3, [r4, #26]
 8022d20:	2a00      	cmp	r2, #0
 8022d22:	bfbc      	itt	lt
 8022d24:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8022d28:	4452      	addlt	r2, sl
 8022d2a:	fb06 3101 	mla	r1, r6, r1, r3
 8022d2e:	4430      	add	r0, r6
 8022d30:	b20b      	sxth	r3, r1
 8022d32:	b200      	sxth	r0, r0
 8022d34:	9301      	str	r3, [sp, #4]
 8022d36:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8022d3a:	8320      	strh	r0, [r4, #24]
 8022d3c:	8363      	strh	r3, [r4, #26]
 8022d3e:	eb07 030b 	add.w	r3, r7, fp
 8022d42:	042f      	lsls	r7, r5, #16
 8022d44:	9300      	str	r3, [sp, #0]
 8022d46:	9900      	ldr	r1, [sp, #0]
 8022d48:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8022d4c:	eb01 0907 	add.w	r9, r1, r7
 8022d50:	9705      	str	r7, [sp, #20]
 8022d52:	eb08 4803 	add.w	r8, r8, r3, lsl #16
 8022d56:	45c1      	cmp	r9, r8
 8022d58:	d015      	beq.n	8022d86 <_ZN8touchgfx7Outline10renderLineEiiii+0x18e>
 8022d5a:	9901      	ldr	r1, [sp, #4]
 8022d5c:	4301      	orrs	r1, r0
 8022d5e:	d00b      	beq.n	8022d78 <_ZN8touchgfx7Outline10renderLineEiiii+0x180>
 8022d60:	2b00      	cmp	r3, #0
 8022d62:	db09      	blt.n	8022d78 <_ZN8touchgfx7Outline10renderLineEiiii+0x180>
 8022d64:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022d66:	4299      	cmp	r1, r3
 8022d68:	dd06      	ble.n	8022d78 <_ZN8touchgfx7Outline10renderLineEiiii+0x180>
 8022d6a:	68a1      	ldr	r1, [r4, #8]
 8022d6c:	6863      	ldr	r3, [r4, #4]
 8022d6e:	4299      	cmp	r1, r3
 8022d70:	d36c      	bcc.n	8022e4c <_ZN8touchgfx7Outline10renderLineEiiii+0x254>
 8022d72:	2301      	movs	r3, #1
 8022d74:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022d78:	f8bd 3000 	ldrh.w	r3, [sp]
 8022d7c:	82e5      	strh	r5, [r4, #22]
 8022d7e:	82a3      	strh	r3, [r4, #20]
 8022d80:	2300      	movs	r3, #0
 8022d82:	8323      	strh	r3, [r4, #24]
 8022d84:	8363      	strh	r3, [r4, #26]
 8022d86:	9900      	ldr	r1, [sp, #0]
 8022d88:	eb0c 0306 	add.w	r3, ip, r6
 8022d8c:	458e      	cmp	lr, r1
 8022d8e:	d04e      	beq.n	8022e2e <_ZN8touchgfx7Outline10renderLineEiiii+0x236>
 8022d90:	9903      	ldr	r1, [sp, #12]
 8022d92:	eba2 020a 	sub.w	r2, r2, sl
 8022d96:	1ac9      	subs	r1, r1, r3
 8022d98:	9201      	str	r2, [sp, #4]
 8022d9a:	440e      	add	r6, r1
 8022d9c:	0176      	lsls	r6, r6, #5
 8022d9e:	fb96 fcfa 	sdiv	ip, r6, sl
 8022da2:	fb0a 661c 	mls	r6, sl, ip, r6
 8022da6:	2e00      	cmp	r6, #0
 8022da8:	bfbc      	itt	lt
 8022daa:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8022dae:	4456      	addlt	r6, sl
 8022db0:	f10c 0101 	add.w	r1, ip, #1
 8022db4:	9106      	str	r1, [sp, #24]
 8022db6:	9a01      	ldr	r2, [sp, #4]
 8022db8:	8b20      	ldrh	r0, [r4, #24]
 8022dba:	1992      	adds	r2, r2, r6
 8022dbc:	8b61      	ldrh	r1, [r4, #26]
 8022dbe:	9f05      	ldr	r7, [sp, #20]
 8022dc0:	9201      	str	r2, [sp, #4]
 8022dc2:	bf5b      	ittet	pl
 8022dc4:	eba2 020a 	subpl.w	r2, r2, sl
 8022dc8:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8022dcc:	46e0      	movmi	r8, ip
 8022dce:	9201      	strpl	r2, [sp, #4]
 8022dd0:	9a00      	ldr	r2, [sp, #0]
 8022dd2:	4440      	add	r0, r8
 8022dd4:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8022dd8:	4443      	add	r3, r8
 8022dda:	445a      	add	r2, fp
 8022ddc:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8022de0:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8022de4:	b200      	sxth	r0, r0
 8022de6:	4417      	add	r7, r2
 8022de8:	b209      	sxth	r1, r1
 8022dea:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8022dee:	8320      	strh	r0, [r4, #24]
 8022df0:	8361      	strh	r1, [r4, #26]
 8022df2:	454f      	cmp	r7, r9
 8022df4:	9200      	str	r2, [sp, #0]
 8022df6:	d017      	beq.n	8022e28 <_ZN8touchgfx7Outline10renderLineEiiii+0x230>
 8022df8:	4301      	orrs	r1, r0
 8022dfa:	d00d      	beq.n	8022e18 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8022dfc:	f1b8 0f00 	cmp.w	r8, #0
 8022e00:	db0a      	blt.n	8022e18 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8022e02:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022e04:	4541      	cmp	r1, r8
 8022e06:	dd07      	ble.n	8022e18 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8022e08:	68a0      	ldr	r0, [r4, #8]
 8022e0a:	6861      	ldr	r1, [r4, #4]
 8022e0c:	4288      	cmp	r0, r1
 8022e0e:	d32d      	bcc.n	8022e6c <_ZN8touchgfx7Outline10renderLineEiiii+0x274>
 8022e10:	f04f 0101 	mov.w	r1, #1
 8022e14:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8022e18:	f04f 0100 	mov.w	r1, #0
 8022e1c:	f8bd 2000 	ldrh.w	r2, [sp]
 8022e20:	82e5      	strh	r5, [r4, #22]
 8022e22:	82a2      	strh	r2, [r4, #20]
 8022e24:	8321      	strh	r1, [r4, #24]
 8022e26:	8361      	strh	r1, [r4, #26]
 8022e28:	9a00      	ldr	r2, [sp, #0]
 8022e2a:	4596      	cmp	lr, r2
 8022e2c:	d1c3      	bne.n	8022db6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1be>
 8022e2e:	9a03      	ldr	r2, [sp, #12]
 8022e30:	9902      	ldr	r1, [sp, #8]
 8022e32:	1ad3      	subs	r3, r2, r3
 8022e34:	8b22      	ldrh	r2, [r4, #24]
 8022e36:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 8022e3a:	441a      	add	r2, r3
 8022e3c:	8322      	strh	r2, [r4, #24]
 8022e3e:	9a04      	ldr	r2, [sp, #16]
 8022e40:	3220      	adds	r2, #32
 8022e42:	1a52      	subs	r2, r2, r1
 8022e44:	fb03 e302 	mla	r3, r3, r2, lr
 8022e48:	8363      	strh	r3, [r4, #26]
 8022e4a:	e74b      	b.n	8022ce4 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 8022e4c:	f104 0314 	add.w	r3, r4, #20
 8022e50:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8022e54:	cb03      	ldmia	r3!, {r0, r1}
 8022e56:	f8c8 0000 	str.w	r0, [r8]
 8022e5a:	f8c8 1004 	str.w	r1, [r8, #4]
 8022e5e:	6923      	ldr	r3, [r4, #16]
 8022e60:	3308      	adds	r3, #8
 8022e62:	6123      	str	r3, [r4, #16]
 8022e64:	68a3      	ldr	r3, [r4, #8]
 8022e66:	3301      	adds	r3, #1
 8022e68:	60a3      	str	r3, [r4, #8]
 8022e6a:	e785      	b.n	8022d78 <_ZN8touchgfx7Outline10renderLineEiiii+0x180>
 8022e6c:	f104 0814 	add.w	r8, r4, #20
 8022e70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8022e74:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8022e78:	f8c9 0000 	str.w	r0, [r9]
 8022e7c:	f8c9 1004 	str.w	r1, [r9, #4]
 8022e80:	6921      	ldr	r1, [r4, #16]
 8022e82:	3108      	adds	r1, #8
 8022e84:	6121      	str	r1, [r4, #16]
 8022e86:	68a1      	ldr	r1, [r4, #8]
 8022e88:	3101      	adds	r1, #1
 8022e8a:	60a1      	str	r1, [r4, #8]
 8022e8c:	e7c4      	b.n	8022e18 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8022e8e:	1a83      	subs	r3, r0, r2
 8022e90:	9301      	str	r3, [sp, #4]
 8022e92:	f1ba 0f00 	cmp.w	sl, #0
 8022e96:	f040 8095 	bne.w	8022fc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3cc>
 8022e9a:	9a01      	ldr	r2, [sp, #4]
 8022e9c:	004b      	lsls	r3, r1, #1
 8022e9e:	114e      	asrs	r6, r1, #5
 8022ea0:	8b21      	ldrh	r1, [r4, #24]
 8022ea2:	2a00      	cmp	r2, #0
 8022ea4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8022ea8:	8b62      	ldrh	r2, [r4, #26]
 8022eaa:	bfa6      	itte	ge
 8022eac:	f04f 0a20 	movge.w	sl, #32
 8022eb0:	f04f 0801 	movge.w	r8, #1
 8022eb4:	f04f 38ff 	movlt.w	r8, #4294967295
 8022eb8:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8022ebc:	ebaa 0c0c 	sub.w	ip, sl, ip
 8022ec0:	4461      	add	r1, ip
 8022ec2:	fb0c 2c03 	mla	ip, ip, r3, r2
 8022ec6:	eb08 0205 	add.w	r2, r8, r5
 8022eca:	f9b4 5014 	ldrsh.w	r5, [r4, #20]
 8022ece:	b209      	sxth	r1, r1
 8022ed0:	eb06 4702 	add.w	r7, r6, r2, lsl #16
 8022ed4:	eb05 4500 	add.w	r5, r5, r0, lsl #16
 8022ed8:	8321      	strh	r1, [r4, #24]
 8022eda:	fa0f fc8c 	sxth.w	ip, ip
 8022ede:	42af      	cmp	r7, r5
 8022ee0:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8022ee4:	d013      	beq.n	8022f0e <_ZN8touchgfx7Outline10renderLineEiiii+0x316>
 8022ee6:	ea51 010c 	orrs.w	r1, r1, ip
 8022eea:	d00b      	beq.n	8022f04 <_ZN8touchgfx7Outline10renderLineEiiii+0x30c>
 8022eec:	2800      	cmp	r0, #0
 8022eee:	db09      	blt.n	8022f04 <_ZN8touchgfx7Outline10renderLineEiiii+0x30c>
 8022ef0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022ef2:	4281      	cmp	r1, r0
 8022ef4:	dd06      	ble.n	8022f04 <_ZN8touchgfx7Outline10renderLineEiiii+0x30c>
 8022ef6:	68a0      	ldr	r0, [r4, #8]
 8022ef8:	6861      	ldr	r1, [r4, #4]
 8022efa:	4288      	cmp	r0, r1
 8022efc:	d339      	bcc.n	8022f72 <_ZN8touchgfx7Outline10renderLineEiiii+0x37a>
 8022efe:	2101      	movs	r1, #1
 8022f00:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8022f04:	2100      	movs	r1, #0
 8022f06:	82a6      	strh	r6, [r4, #20]
 8022f08:	82e2      	strh	r2, [r4, #22]
 8022f0a:	8321      	strh	r1, [r4, #24]
 8022f0c:	8361      	strh	r1, [r4, #26]
 8022f0e:	ea4f 054a 	mov.w	r5, sl, lsl #1
 8022f12:	f04f 0c00 	mov.w	ip, #0
 8022f16:	f04f 0b01 	mov.w	fp, #1
 8022f1a:	3d20      	subs	r5, #32
 8022f1c:	fb05 f703 	mul.w	r7, r5, r3
 8022f20:	b22d      	sxth	r5, r5
 8022f22:	b23f      	sxth	r7, r7
 8022f24:	ea45 0107 	orr.w	r1, r5, r7
 8022f28:	9100      	str	r1, [sp, #0]
 8022f2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022f2c:	428a      	cmp	r2, r1
 8022f2e:	d03e      	beq.n	8022fae <_ZN8touchgfx7Outline10renderLineEiiii+0x3b6>
 8022f30:	4442      	add	r2, r8
 8022f32:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8022f36:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8022f3a:	eb06 4e02 	add.w	lr, r6, r2, lsl #16
 8022f3e:	8325      	strh	r5, [r4, #24]
 8022f40:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8022f44:	8367      	strh	r7, [r4, #26]
 8022f46:	4586      	cmp	lr, r0
 8022f48:	d0ef      	beq.n	8022f2a <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8022f4a:	9800      	ldr	r0, [sp, #0]
 8022f4c:	b150      	cbz	r0, 8022f64 <_ZN8touchgfx7Outline10renderLineEiiii+0x36c>
 8022f4e:	2900      	cmp	r1, #0
 8022f50:	db08      	blt.n	8022f64 <_ZN8touchgfx7Outline10renderLineEiiii+0x36c>
 8022f52:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8022f54:	4288      	cmp	r0, r1
 8022f56:	dd05      	ble.n	8022f64 <_ZN8touchgfx7Outline10renderLineEiiii+0x36c>
 8022f58:	68a0      	ldr	r0, [r4, #8]
 8022f5a:	6861      	ldr	r1, [r4, #4]
 8022f5c:	4288      	cmp	r0, r1
 8022f5e:	d315      	bcc.n	8022f8c <_ZN8touchgfx7Outline10renderLineEiiii+0x394>
 8022f60:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8022f64:	82a6      	strh	r6, [r4, #20]
 8022f66:	82e2      	strh	r2, [r4, #22]
 8022f68:	f8a4 c018 	strh.w	ip, [r4, #24]
 8022f6c:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8022f70:	e7db      	b.n	8022f2a <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8022f72:	f104 0514 	add.w	r5, r4, #20
 8022f76:	6927      	ldr	r7, [r4, #16]
 8022f78:	cd03      	ldmia	r5!, {r0, r1}
 8022f7a:	6038      	str	r0, [r7, #0]
 8022f7c:	6079      	str	r1, [r7, #4]
 8022f7e:	6921      	ldr	r1, [r4, #16]
 8022f80:	3108      	adds	r1, #8
 8022f82:	6121      	str	r1, [r4, #16]
 8022f84:	68a1      	ldr	r1, [r4, #8]
 8022f86:	3101      	adds	r1, #1
 8022f88:	60a1      	str	r1, [r4, #8]
 8022f8a:	e7bb      	b.n	8022f04 <_ZN8touchgfx7Outline10renderLineEiiii+0x30c>
 8022f8c:	f104 0e14 	add.w	lr, r4, #20
 8022f90:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8022f94:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8022f98:	f8c9 0000 	str.w	r0, [r9]
 8022f9c:	f8c9 1004 	str.w	r1, [r9, #4]
 8022fa0:	6921      	ldr	r1, [r4, #16]
 8022fa2:	3108      	adds	r1, #8
 8022fa4:	6121      	str	r1, [r4, #16]
 8022fa6:	68a1      	ldr	r1, [r4, #8]
 8022fa8:	3101      	adds	r1, #1
 8022faa:	60a1      	str	r1, [r4, #8]
 8022fac:	e7da      	b.n	8022f64 <_ZN8touchgfx7Outline10renderLineEiiii+0x36c>
 8022fae:	9a03      	ldr	r2, [sp, #12]
 8022fb0:	8b61      	ldrh	r1, [r4, #26]
 8022fb2:	f1a2 0e20 	sub.w	lr, r2, #32
 8022fb6:	8b22      	ldrh	r2, [r4, #24]
 8022fb8:	44d6      	add	lr, sl
 8022fba:	4472      	add	r2, lr
 8022fbc:	fb0e 1303 	mla	r3, lr, r3, r1
 8022fc0:	8322      	strh	r2, [r4, #24]
 8022fc2:	e741      	b.n	8022e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8022fc4:	9b01      	ldr	r3, [sp, #4]
 8022fc6:	2b00      	cmp	r3, #0
 8022fc8:	db40      	blt.n	802304c <_ZN8touchgfx7Outline10renderLineEiiii+0x454>
 8022fca:	2201      	movs	r2, #1
 8022fcc:	f1cc 0320 	rsb	r3, ip, #32
 8022fd0:	920a      	str	r2, [sp, #40]	; 0x28
 8022fd2:	2220      	movs	r2, #32
 8022fd4:	fb0a f303 	mul.w	r3, sl, r3
 8022fd8:	9202      	str	r2, [sp, #8]
 8022fda:	9a01      	ldr	r2, [sp, #4]
 8022fdc:	fb93 f6f2 	sdiv	r6, r3, r2
 8022fe0:	fb02 3316 	mls	r3, r2, r6, r3
 8022fe4:	2b00      	cmp	r3, #0
 8022fe6:	9308      	str	r3, [sp, #32]
 8022fe8:	bfbc      	itt	lt
 8022fea:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8022fee:	189b      	addlt	r3, r3, r2
 8022ff0:	eb06 0b01 	add.w	fp, r6, r1
 8022ff4:	bfb8      	it	lt
 8022ff6:	9308      	strlt	r3, [sp, #32]
 8022ff8:	ea4f 136b 	mov.w	r3, fp, asr #5
 8022ffc:	9304      	str	r3, [sp, #16]
 8022ffe:	9b02      	ldr	r3, [sp, #8]
 8023000:	4563      	cmp	r3, ip
 8023002:	d13a      	bne.n	802307a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8023004:	9b04      	ldr	r3, [sp, #16]
 8023006:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802300a:	eb03 4105 	add.w	r1, r3, r5, lsl #16
 802300e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8023012:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8023016:	4299      	cmp	r1, r3
 8023018:	d046      	beq.n	80230a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4b0>
 802301a:	8b63      	ldrh	r3, [r4, #26]
 802301c:	8b21      	ldrh	r1, [r4, #24]
 802301e:	430b      	orrs	r3, r1
 8023020:	b21b      	sxth	r3, r3
 8023022:	b15b      	cbz	r3, 802303c <_ZN8touchgfx7Outline10renderLineEiiii+0x444>
 8023024:	2a00      	cmp	r2, #0
 8023026:	db09      	blt.n	802303c <_ZN8touchgfx7Outline10renderLineEiiii+0x444>
 8023028:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802302a:	4293      	cmp	r3, r2
 802302c:	dd06      	ble.n	802303c <_ZN8touchgfx7Outline10renderLineEiiii+0x444>
 802302e:	68a2      	ldr	r2, [r4, #8]
 8023030:	6863      	ldr	r3, [r4, #4]
 8023032:	429a      	cmp	r2, r3
 8023034:	d314      	bcc.n	8023060 <_ZN8touchgfx7Outline10renderLineEiiii+0x468>
 8023036:	2301      	movs	r3, #1
 8023038:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802303c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8023040:	82e5      	strh	r5, [r4, #22]
 8023042:	82a3      	strh	r3, [r4, #20]
 8023044:	2300      	movs	r3, #0
 8023046:	8323      	strh	r3, [r4, #24]
 8023048:	8363      	strh	r3, [r4, #26]
 802304a:	e02d      	b.n	80230a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4b0>
 802304c:	9a01      	ldr	r2, [sp, #4]
 802304e:	fb0a f30c 	mul.w	r3, sl, ip
 8023052:	4252      	negs	r2, r2
 8023054:	9201      	str	r2, [sp, #4]
 8023056:	f04f 32ff 	mov.w	r2, #4294967295
 802305a:	920a      	str	r2, [sp, #40]	; 0x28
 802305c:	2200      	movs	r2, #0
 802305e:	e7bb      	b.n	8022fd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3e0>
 8023060:	f104 0314 	add.w	r3, r4, #20
 8023064:	6922      	ldr	r2, [r4, #16]
 8023066:	cb03      	ldmia	r3!, {r0, r1}
 8023068:	6010      	str	r0, [r2, #0]
 802306a:	6051      	str	r1, [r2, #4]
 802306c:	6923      	ldr	r3, [r4, #16]
 802306e:	3308      	adds	r3, #8
 8023070:	6123      	str	r3, [r4, #16]
 8023072:	68a3      	ldr	r3, [r4, #8]
 8023074:	3301      	adds	r3, #1
 8023076:	60a3      	str	r3, [r4, #8]
 8023078:	e7e0      	b.n	802303c <_ZN8touchgfx7Outline10renderLineEiiii+0x444>
 802307a:	f00b 021f 	and.w	r2, fp, #31
 802307e:	ea4f 1e61 	mov.w	lr, r1, asr #5
 8023082:	f001 031f 	and.w	r3, r1, #31
 8023086:	9209      	str	r2, [sp, #36]	; 0x24
 8023088:	9a04      	ldr	r2, [sp, #16]
 802308a:	4596      	cmp	lr, r2
 802308c:	9a02      	ldr	r2, [sp, #8]
 802308e:	eba2 020c 	sub.w	r2, r2, ip
 8023092:	f040 80f6 	bne.w	8023282 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8023096:	8b21      	ldrh	r1, [r4, #24]
 8023098:	4411      	add	r1, r2
 802309a:	8321      	strh	r1, [r4, #24]
 802309c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802309e:	440b      	add	r3, r1
 80230a0:	8b61      	ldrh	r1, [r4, #26]
 80230a2:	fb02 1203 	mla	r2, r2, r3, r1
 80230a6:	8362      	strh	r2, [r4, #26]
 80230a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80230aa:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80230ae:	442b      	add	r3, r5
 80230b0:	9300      	str	r3, [sp, #0]
 80230b2:	9a00      	ldr	r2, [sp, #0]
 80230b4:	9b04      	ldr	r3, [sp, #16]
 80230b6:	eb03 4002 	add.w	r0, r3, r2, lsl #16
 80230ba:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80230be:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 80230c2:	4298      	cmp	r0, r3
 80230c4:	d01a      	beq.n	80230fc <_ZN8touchgfx7Outline10renderLineEiiii+0x504>
 80230c6:	8b63      	ldrh	r3, [r4, #26]
 80230c8:	8b20      	ldrh	r0, [r4, #24]
 80230ca:	4303      	orrs	r3, r0
 80230cc:	b21b      	sxth	r3, r3
 80230ce:	b163      	cbz	r3, 80230ea <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 80230d0:	2900      	cmp	r1, #0
 80230d2:	db0a      	blt.n	80230ea <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 80230d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80230d6:	428b      	cmp	r3, r1
 80230d8:	dd07      	ble.n	80230ea <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 80230da:	68a1      	ldr	r1, [r4, #8]
 80230dc:	6863      	ldr	r3, [r4, #4]
 80230de:	4299      	cmp	r1, r3
 80230e0:	f0c0 819a 	bcc.w	8023418 <_ZN8touchgfx7Outline10renderLineEiiii+0x820>
 80230e4:	2301      	movs	r3, #1
 80230e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80230ea:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80230ee:	82a3      	strh	r3, [r4, #20]
 80230f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80230f4:	82e3      	strh	r3, [r4, #22]
 80230f6:	2300      	movs	r3, #0
 80230f8:	8323      	strh	r3, [r4, #24]
 80230fa:	8363      	strh	r3, [r4, #26]
 80230fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80230fe:	9a00      	ldr	r2, [sp, #0]
 8023100:	4293      	cmp	r3, r2
 8023102:	f000 8090 	beq.w	8023226 <_ZN8touchgfx7Outline10renderLineEiiii+0x62e>
 8023106:	ea4f 134a 	mov.w	r3, sl, lsl #5
 802310a:	9901      	ldr	r1, [sp, #4]
 802310c:	9801      	ldr	r0, [sp, #4]
 802310e:	fb93 f1f1 	sdiv	r1, r3, r1
 8023112:	fb00 3311 	mls	r3, r0, r1, r3
 8023116:	9106      	str	r1, [sp, #24]
 8023118:	2b00      	cmp	r3, #0
 802311a:	9307      	str	r3, [sp, #28]
 802311c:	da04      	bge.n	8023128 <_ZN8touchgfx7Outline10renderLineEiiii+0x530>
 802311e:	1e4b      	subs	r3, r1, #1
 8023120:	9306      	str	r3, [sp, #24]
 8023122:	9b07      	ldr	r3, [sp, #28]
 8023124:	4403      	add	r3, r0
 8023126:	9307      	str	r3, [sp, #28]
 8023128:	9b08      	ldr	r3, [sp, #32]
 802312a:	f04f 0e00 	mov.w	lr, #0
 802312e:	9901      	ldr	r1, [sp, #4]
 8023130:	1a5b      	subs	r3, r3, r1
 8023132:	4659      	mov	r1, fp
 8023134:	9308      	str	r3, [sp, #32]
 8023136:	9b02      	ldr	r3, [sp, #8]
 8023138:	f1c3 0320 	rsb	r3, r3, #32
 802313c:	930c      	str	r3, [sp, #48]	; 0x30
 802313e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8023140:	9b02      	ldr	r3, [sp, #8]
 8023142:	1a1b      	subs	r3, r3, r0
 8023144:	9309      	str	r3, [sp, #36]	; 0x24
 8023146:	9807      	ldr	r0, [sp, #28]
 8023148:	9b08      	ldr	r3, [sp, #32]
 802314a:	181b      	adds	r3, r3, r0
 802314c:	bf58      	it	pl
 802314e:	9801      	ldrpl	r0, [sp, #4]
 8023150:	9308      	str	r3, [sp, #32]
 8023152:	bf54      	ite	pl
 8023154:	1a1b      	subpl	r3, r3, r0
 8023156:	9d06      	ldrmi	r5, [sp, #24]
 8023158:	980c      	ldr	r0, [sp, #48]	; 0x30
 802315a:	bf5e      	ittt	pl
 802315c:	9308      	strpl	r3, [sp, #32]
 802315e:	9b06      	ldrpl	r3, [sp, #24]
 8023160:	1c5d      	addpl	r5, r3, #1
 8023162:	44ab      	add	fp, r5
 8023164:	ea4f 136b 	mov.w	r3, fp, asr #5
 8023168:	9304      	str	r3, [sp, #16]
 802316a:	9b02      	ldr	r3, [sp, #8]
 802316c:	4283      	cmp	r3, r0
 802316e:	f040 816d 	bne.w	802344c <_ZN8touchgfx7Outline10renderLineEiiii+0x854>
 8023172:	9b04      	ldr	r3, [sp, #16]
 8023174:	9a00      	ldr	r2, [sp, #0]
 8023176:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802317a:	eb03 4002 	add.w	r0, r3, r2, lsl #16
 802317e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8023182:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8023186:	4298      	cmp	r0, r3
 8023188:	d01c      	beq.n	80231c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5cc>
 802318a:	8b63      	ldrh	r3, [r4, #26]
 802318c:	8b20      	ldrh	r0, [r4, #24]
 802318e:	4303      	orrs	r3, r0
 8023190:	b21b      	sxth	r3, r3
 8023192:	b16b      	cbz	r3, 80231b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5b8>
 8023194:	2900      	cmp	r1, #0
 8023196:	db0b      	blt.n	80231b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5b8>
 8023198:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802319a:	428b      	cmp	r3, r1
 802319c:	dd08      	ble.n	80231b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5b8>
 802319e:	68a1      	ldr	r1, [r4, #8]
 80231a0:	6863      	ldr	r3, [r4, #4]
 80231a2:	4299      	cmp	r1, r3
 80231a4:	f0c0 8145 	bcc.w	8023432 <_ZN8touchgfx7Outline10renderLineEiiii+0x83a>
 80231a8:	f04f 0301 	mov.w	r3, #1
 80231ac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80231b0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80231b4:	f8a4 e018 	strh.w	lr, [r4, #24]
 80231b8:	82a3      	strh	r3, [r4, #20]
 80231ba:	f8bd 3000 	ldrh.w	r3, [sp]
 80231be:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80231c2:	82e3      	strh	r3, [r4, #22]
 80231c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80231c6:	9a00      	ldr	r2, [sp, #0]
 80231c8:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80231cc:	441a      	add	r2, r3
 80231ce:	9b04      	ldr	r3, [sp, #16]
 80231d0:	eb03 4002 	add.w	r0, r3, r2, lsl #16
 80231d4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80231d8:	9200      	str	r2, [sp, #0]
 80231da:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 80231de:	4298      	cmp	r0, r3
 80231e0:	d01c      	beq.n	802321c <_ZN8touchgfx7Outline10renderLineEiiii+0x624>
 80231e2:	8b63      	ldrh	r3, [r4, #26]
 80231e4:	8b20      	ldrh	r0, [r4, #24]
 80231e6:	4303      	orrs	r3, r0
 80231e8:	b21b      	sxth	r3, r3
 80231ea:	b16b      	cbz	r3, 8023208 <_ZN8touchgfx7Outline10renderLineEiiii+0x610>
 80231ec:	2900      	cmp	r1, #0
 80231ee:	db0b      	blt.n	8023208 <_ZN8touchgfx7Outline10renderLineEiiii+0x610>
 80231f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80231f2:	428b      	cmp	r3, r1
 80231f4:	dd08      	ble.n	8023208 <_ZN8touchgfx7Outline10renderLineEiiii+0x610>
 80231f6:	68a1      	ldr	r1, [r4, #8]
 80231f8:	6863      	ldr	r3, [r4, #4]
 80231fa:	4299      	cmp	r1, r3
 80231fc:	f0c0 820d 	bcc.w	802361a <_ZN8touchgfx7Outline10renderLineEiiii+0xa22>
 8023200:	f04f 0301 	mov.w	r3, #1
 8023204:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023208:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802320c:	f8a4 e018 	strh.w	lr, [r4, #24]
 8023210:	82a3      	strh	r3, [r4, #20]
 8023212:	f8bd 3000 	ldrh.w	r3, [sp]
 8023216:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802321a:	82e3      	strh	r3, [r4, #22]
 802321c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802321e:	4659      	mov	r1, fp
 8023220:	9a00      	ldr	r2, [sp, #0]
 8023222:	4293      	cmp	r3, r2
 8023224:	d18f      	bne.n	8023146 <_ZN8touchgfx7Outline10renderLineEiiii+0x54e>
 8023226:	9b02      	ldr	r3, [sp, #8]
 8023228:	f1c3 0e20 	rsb	lr, r3, #32
 802322c:	9b05      	ldr	r3, [sp, #20]
 802322e:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8023232:	9b03      	ldr	r3, [sp, #12]
 8023234:	4573      	cmp	r3, lr
 8023236:	f040 820a 	bne.w	802364e <_ZN8touchgfx7Outline10renderLineEiiii+0xa56>
 802323a:	9b00      	ldr	r3, [sp, #0]
 802323c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8023240:	eb0c 4003 	add.w	r0, ip, r3, lsl #16
 8023244:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8023248:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 802324c:	4298      	cmp	r0, r3
 802324e:	f43f ad49 	beq.w	8022ce4 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 8023252:	8b63      	ldrh	r3, [r4, #26]
 8023254:	8b20      	ldrh	r0, [r4, #24]
 8023256:	4303      	orrs	r3, r0
 8023258:	b21b      	sxth	r3, r3
 802325a:	b163      	cbz	r3, 8023276 <_ZN8touchgfx7Outline10renderLineEiiii+0x67e>
 802325c:	2900      	cmp	r1, #0
 802325e:	db0a      	blt.n	8023276 <_ZN8touchgfx7Outline10renderLineEiiii+0x67e>
 8023260:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023262:	428b      	cmp	r3, r1
 8023264:	dd07      	ble.n	8023276 <_ZN8touchgfx7Outline10renderLineEiiii+0x67e>
 8023266:	68a1      	ldr	r1, [r4, #8]
 8023268:	6863      	ldr	r3, [r4, #4]
 802326a:	4299      	cmp	r1, r3
 802326c:	f0c0 81e2 	bcc.w	8023634 <_ZN8touchgfx7Outline10renderLineEiiii+0xa3c>
 8023270:	2301      	movs	r3, #1
 8023272:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023276:	f8bd 3000 	ldrh.w	r3, [sp]
 802327a:	f8a4 c014 	strh.w	ip, [r4, #20]
 802327e:	82e3      	strh	r3, [r4, #22]
 8023280:	e50b      	b.n	8022c9a <_ZN8touchgfx7Outline10renderLineEiiii+0xa2>
 8023282:	2e00      	cmp	r6, #0
 8023284:	f2c0 80a0 	blt.w	80233c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d0>
 8023288:	f1c3 0120 	rsb	r1, r3, #32
 802328c:	434a      	muls	r2, r1
 802328e:	2101      	movs	r1, #1
 8023290:	9107      	str	r1, [sp, #28]
 8023292:	2120      	movs	r1, #32
 8023294:	9106      	str	r1, [sp, #24]
 8023296:	9906      	ldr	r1, [sp, #24]
 8023298:	8b20      	ldrh	r0, [r4, #24]
 802329a:	440b      	add	r3, r1
 802329c:	8b61      	ldrh	r1, [r4, #26]
 802329e:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80232a2:	fb92 f7f6 	sdiv	r7, r2, r6
 80232a6:	fb06 2217 	mls	r2, r6, r7, r2
 80232aa:	2a00      	cmp	r2, #0
 80232ac:	bfbc      	itt	lt
 80232ae:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80232b2:	1992      	addlt	r2, r2, r6
 80232b4:	fb07 1303 	mla	r3, r7, r3, r1
 80232b8:	9907      	ldr	r1, [sp, #28]
 80232ba:	4438      	add	r0, r7
 80232bc:	b21b      	sxth	r3, r3
 80232be:	448e      	add	lr, r1
 80232c0:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80232c4:	b200      	sxth	r0, r0
 80232c6:	9300      	str	r3, [sp, #0]
 80232c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80232cc:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 80232d0:	8320      	strh	r0, [r4, #24]
 80232d2:	8363      	strh	r3, [r4, #26]
 80232d4:	042b      	lsls	r3, r5, #16
 80232d6:	eb0e 0903 	add.w	r9, lr, r3
 80232da:	930c      	str	r3, [sp, #48]	; 0x30
 80232dc:	45c1      	cmp	r9, r8
 80232de:	d014      	beq.n	802330a <_ZN8touchgfx7Outline10renderLineEiiii+0x712>
 80232e0:	9b00      	ldr	r3, [sp, #0]
 80232e2:	4303      	orrs	r3, r0
 80232e4:	d00b      	beq.n	80232fe <_ZN8touchgfx7Outline10renderLineEiiii+0x706>
 80232e6:	2900      	cmp	r1, #0
 80232e8:	db09      	blt.n	80232fe <_ZN8touchgfx7Outline10renderLineEiiii+0x706>
 80232ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80232ec:	428b      	cmp	r3, r1
 80232ee:	dd06      	ble.n	80232fe <_ZN8touchgfx7Outline10renderLineEiiii+0x706>
 80232f0:	68a1      	ldr	r1, [r4, #8]
 80232f2:	6863      	ldr	r3, [r4, #4]
 80232f4:	4299      	cmp	r1, r3
 80232f6:	d36e      	bcc.n	80233d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x7de>
 80232f8:	2301      	movs	r3, #1
 80232fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80232fe:	2300      	movs	r3, #0
 8023300:	f8a4 e014 	strh.w	lr, [r4, #20]
 8023304:	82e5      	strh	r5, [r4, #22]
 8023306:	8323      	strh	r3, [r4, #24]
 8023308:	8363      	strh	r3, [r4, #26]
 802330a:	9904      	ldr	r1, [sp, #16]
 802330c:	eb0c 0307 	add.w	r3, ip, r7
 8023310:	4571      	cmp	r1, lr
 8023312:	d04b      	beq.n	80233ac <_ZN8touchgfx7Outline10renderLineEiiii+0x7b4>
 8023314:	9902      	ldr	r1, [sp, #8]
 8023316:	1b92      	subs	r2, r2, r6
 8023318:	1ac9      	subs	r1, r1, r3
 802331a:	9200      	str	r2, [sp, #0]
 802331c:	440f      	add	r7, r1
 802331e:	017f      	lsls	r7, r7, #5
 8023320:	fb97 fcf6 	sdiv	ip, r7, r6
 8023324:	fb06 771c 	mls	r7, r6, ip, r7
 8023328:	2f00      	cmp	r7, #0
 802332a:	bfbc      	itt	lt
 802332c:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8023330:	19bf      	addlt	r7, r7, r6
 8023332:	f10c 0101 	add.w	r1, ip, #1
 8023336:	910d      	str	r1, [sp, #52]	; 0x34
 8023338:	9a00      	ldr	r2, [sp, #0]
 802333a:	8b20      	ldrh	r0, [r4, #24]
 802333c:	19d2      	adds	r2, r2, r7
 802333e:	8b61      	ldrh	r1, [r4, #26]
 8023340:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8023344:	9200      	str	r2, [sp, #0]
 8023346:	bf5b      	ittet	pl
 8023348:	1b92      	subpl	r2, r2, r6
 802334a:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 802334e:	46e0      	movmi	r8, ip
 8023350:	9200      	strpl	r2, [sp, #0]
 8023352:	9a07      	ldr	r2, [sp, #28]
 8023354:	4440      	add	r0, r8
 8023356:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 802335a:	4443      	add	r3, r8
 802335c:	4496      	add	lr, r2
 802335e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023362:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023364:	b200      	sxth	r0, r0
 8023366:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802336a:	4472      	add	r2, lr
 802336c:	b209      	sxth	r1, r1
 802336e:	8320      	strh	r0, [r4, #24]
 8023370:	454a      	cmp	r2, r9
 8023372:	8361      	strh	r1, [r4, #26]
 8023374:	d017      	beq.n	80233a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ae>
 8023376:	ea50 0201 	orrs.w	r2, r0, r1
 802337a:	d00d      	beq.n	8023398 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a0>
 802337c:	f1b8 0f00 	cmp.w	r8, #0
 8023380:	db0a      	blt.n	8023398 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a0>
 8023382:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023384:	4541      	cmp	r1, r8
 8023386:	dd07      	ble.n	8023398 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a0>
 8023388:	68a0      	ldr	r0, [r4, #8]
 802338a:	6861      	ldr	r1, [r4, #4]
 802338c:	4288      	cmp	r0, r1
 802338e:	d332      	bcc.n	80233f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fe>
 8023390:	f04f 0201 	mov.w	r2, #1
 8023394:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023398:	f04f 0200 	mov.w	r2, #0
 802339c:	f8a4 e014 	strh.w	lr, [r4, #20]
 80233a0:	82e5      	strh	r5, [r4, #22]
 80233a2:	8322      	strh	r2, [r4, #24]
 80233a4:	8362      	strh	r2, [r4, #26]
 80233a6:	9904      	ldr	r1, [sp, #16]
 80233a8:	4571      	cmp	r1, lr
 80233aa:	d1c5      	bne.n	8023338 <_ZN8touchgfx7Outline10renderLineEiiii+0x740>
 80233ac:	9a02      	ldr	r2, [sp, #8]
 80233ae:	eba2 0c03 	sub.w	ip, r2, r3
 80233b2:	8b23      	ldrh	r3, [r4, #24]
 80233b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80233b6:	4463      	add	r3, ip
 80233b8:	3220      	adds	r2, #32
 80233ba:	8323      	strh	r3, [r4, #24]
 80233bc:	9b06      	ldr	r3, [sp, #24]
 80233be:	1ad2      	subs	r2, r2, r3
 80233c0:	8b63      	ldrh	r3, [r4, #26]
 80233c2:	fb0c 3302 	mla	r3, ip, r2, r3
 80233c6:	e63f      	b.n	8023048 <_ZN8touchgfx7Outline10renderLineEiiii+0x450>
 80233c8:	f04f 31ff 	mov.w	r1, #4294967295
 80233cc:	435a      	muls	r2, r3
 80233ce:	4276      	negs	r6, r6
 80233d0:	9107      	str	r1, [sp, #28]
 80233d2:	2100      	movs	r1, #0
 80233d4:	e75e      	b.n	8023294 <_ZN8touchgfx7Outline10renderLineEiiii+0x69c>
 80233d6:	f104 0314 	add.w	r3, r4, #20
 80233da:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80233de:	cb03      	ldmia	r3!, {r0, r1}
 80233e0:	f8c8 0000 	str.w	r0, [r8]
 80233e4:	f8c8 1004 	str.w	r1, [r8, #4]
 80233e8:	6923      	ldr	r3, [r4, #16]
 80233ea:	3308      	adds	r3, #8
 80233ec:	6123      	str	r3, [r4, #16]
 80233ee:	68a3      	ldr	r3, [r4, #8]
 80233f0:	3301      	adds	r3, #1
 80233f2:	60a3      	str	r3, [r4, #8]
 80233f4:	e783      	b.n	80232fe <_ZN8touchgfx7Outline10renderLineEiiii+0x706>
 80233f6:	f104 0814 	add.w	r8, r4, #20
 80233fa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80233fe:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8023402:	f8c9 0000 	str.w	r0, [r9]
 8023406:	f8c9 1004 	str.w	r1, [r9, #4]
 802340a:	6921      	ldr	r1, [r4, #16]
 802340c:	3108      	adds	r1, #8
 802340e:	6121      	str	r1, [r4, #16]
 8023410:	68a1      	ldr	r1, [r4, #8]
 8023412:	3101      	adds	r1, #1
 8023414:	60a1      	str	r1, [r4, #8]
 8023416:	e7bf      	b.n	8023398 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a0>
 8023418:	f104 0314 	add.w	r3, r4, #20
 802341c:	6925      	ldr	r5, [r4, #16]
 802341e:	cb03      	ldmia	r3!, {r0, r1}
 8023420:	6028      	str	r0, [r5, #0]
 8023422:	6069      	str	r1, [r5, #4]
 8023424:	6923      	ldr	r3, [r4, #16]
 8023426:	3308      	adds	r3, #8
 8023428:	6123      	str	r3, [r4, #16]
 802342a:	68a3      	ldr	r3, [r4, #8]
 802342c:	3301      	adds	r3, #1
 802342e:	60a3      	str	r3, [r4, #8]
 8023430:	e65b      	b.n	80230ea <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 8023432:	f104 0314 	add.w	r3, r4, #20
 8023436:	6925      	ldr	r5, [r4, #16]
 8023438:	cb03      	ldmia	r3!, {r0, r1}
 802343a:	6028      	str	r0, [r5, #0]
 802343c:	6069      	str	r1, [r5, #4]
 802343e:	6923      	ldr	r3, [r4, #16]
 8023440:	3308      	adds	r3, #8
 8023442:	6123      	str	r3, [r4, #16]
 8023444:	68a3      	ldr	r3, [r4, #8]
 8023446:	3301      	adds	r3, #1
 8023448:	60a3      	str	r3, [r4, #8]
 802344a:	e6b1      	b.n	80231b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5b8>
 802344c:	f00b 031f 	and.w	r3, fp, #31
 8023450:	114f      	asrs	r7, r1, #5
 8023452:	f001 011f 	and.w	r1, r1, #31
 8023456:	930f      	str	r3, [sp, #60]	; 0x3c
 8023458:	9b04      	ldr	r3, [sp, #16]
 802345a:	429f      	cmp	r7, r3
 802345c:	d10a      	bne.n	8023474 <_ZN8touchgfx7Outline10renderLineEiiii+0x87c>
 802345e:	8b23      	ldrh	r3, [r4, #24]
 8023460:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023462:	4403      	add	r3, r0
 8023464:	8323      	strh	r3, [r4, #24]
 8023466:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023468:	4419      	add	r1, r3
 802346a:	8b63      	ldrh	r3, [r4, #26]
 802346c:	fb00 3101 	mla	r1, r0, r1, r3
 8023470:	8361      	strh	r1, [r4, #26]
 8023472:	e6a7      	b.n	80231c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5cc>
 8023474:	2d00      	cmp	r5, #0
 8023476:	f2c0 80a6 	blt.w	80235c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ce>
 802347a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802347c:	f1c1 0320 	rsb	r3, r1, #32
 8023480:	4343      	muls	r3, r0
 8023482:	2001      	movs	r0, #1
 8023484:	900e      	str	r0, [sp, #56]	; 0x38
 8023486:	2020      	movs	r0, #32
 8023488:	900d      	str	r0, [sp, #52]	; 0x34
 802348a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802348c:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8023490:	4411      	add	r1, r2
 8023492:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023494:	8b20      	ldrh	r0, [r4, #24]
 8023496:	4417      	add	r7, r2
 8023498:	9a00      	ldr	r2, [sp, #0]
 802349a:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802349e:	0412      	lsls	r2, r2, #16
 80234a0:	fb93 f6f5 	sdiv	r6, r3, r5
 80234a4:	fb05 3316 	mls	r3, r5, r6, r3
 80234a8:	eb07 0902 	add.w	r9, r7, r2
 80234ac:	9210      	str	r2, [sp, #64]	; 0x40
 80234ae:	2b00      	cmp	r3, #0
 80234b0:	bfbc      	itt	lt
 80234b2:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80234b6:	195b      	addlt	r3, r3, r5
 80234b8:	fb06 c101 	mla	r1, r6, r1, ip
 80234bc:	f9b4 c016 	ldrsh.w	ip, [r4, #22]
 80234c0:	4430      	add	r0, r6
 80234c2:	eb08 480c 	add.w	r8, r8, ip, lsl #16
 80234c6:	b200      	sxth	r0, r0
 80234c8:	b209      	sxth	r1, r1
 80234ca:	45c1      	cmp	r9, r8
 80234cc:	8320      	strh	r0, [r4, #24]
 80234ce:	8361      	strh	r1, [r4, #26]
 80234d0:	d018      	beq.n	8023504 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 80234d2:	ea50 0201 	orrs.w	r2, r0, r1
 80234d6:	d00d      	beq.n	80234f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x8fc>
 80234d8:	f1bc 0f00 	cmp.w	ip, #0
 80234dc:	db0a      	blt.n	80234f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x8fc>
 80234de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80234e0:	4561      	cmp	r1, ip
 80234e2:	dd07      	ble.n	80234f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x8fc>
 80234e4:	68a0      	ldr	r0, [r4, #8]
 80234e6:	6861      	ldr	r1, [r4, #4]
 80234e8:	4288      	cmp	r0, r1
 80234ea:	d374      	bcc.n	80235d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9de>
 80234ec:	f04f 0201 	mov.w	r2, #1
 80234f0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80234f4:	f8bd 2000 	ldrh.w	r2, [sp]
 80234f8:	82a7      	strh	r7, [r4, #20]
 80234fa:	82e2      	strh	r2, [r4, #22]
 80234fc:	f8a4 e018 	strh.w	lr, [r4, #24]
 8023500:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8023504:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023506:	eb02 0c06 	add.w	ip, r2, r6
 802350a:	9a04      	ldr	r2, [sp, #16]
 802350c:	42ba      	cmp	r2, r7
 802350e:	d04a      	beq.n	80235a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 8023510:	9a02      	ldr	r2, [sp, #8]
 8023512:	1b5b      	subs	r3, r3, r5
 8023514:	eba2 010c 	sub.w	r1, r2, ip
 8023518:	440e      	add	r6, r1
 802351a:	0176      	lsls	r6, r6, #5
 802351c:	fb96 f8f5 	sdiv	r8, r6, r5
 8023520:	fb05 6618 	mls	r6, r5, r8, r6
 8023524:	2e00      	cmp	r6, #0
 8023526:	bfbc      	itt	lt
 8023528:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802352c:	1976      	addlt	r6, r6, r5
 802352e:	f108 0201 	add.w	r2, r8, #1
 8023532:	9211      	str	r2, [sp, #68]	; 0x44
 8023534:	199b      	adds	r3, r3, r6
 8023536:	8b20      	ldrh	r0, [r4, #24]
 8023538:	8b61      	ldrh	r1, [r4, #26]
 802353a:	bf54      	ite	pl
 802353c:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8023540:	46c1      	movmi	r9, r8
 8023542:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023544:	bf58      	it	pl
 8023546:	1b5b      	subpl	r3, r3, r5
 8023548:	4448      	add	r0, r9
 802354a:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802354e:	4417      	add	r7, r2
 8023550:	44cc      	add	ip, r9
 8023552:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023554:	b200      	sxth	r0, r0
 8023556:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802355a:	b209      	sxth	r1, r1
 802355c:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8023560:	443a      	add	r2, r7
 8023562:	8320      	strh	r0, [r4, #24]
 8023564:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8023568:	8361      	strh	r1, [r4, #26]
 802356a:	4552      	cmp	r2, sl
 802356c:	d018      	beq.n	80235a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 802356e:	ea50 0201 	orrs.w	r2, r0, r1
 8023572:	d00d      	beq.n	8023590 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8023574:	f1b9 0f00 	cmp.w	r9, #0
 8023578:	db0a      	blt.n	8023590 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 802357a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802357c:	4549      	cmp	r1, r9
 802357e:	dd07      	ble.n	8023590 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8023580:	68a0      	ldr	r0, [r4, #8]
 8023582:	6861      	ldr	r1, [r4, #4]
 8023584:	4288      	cmp	r0, r1
 8023586:	d337      	bcc.n	80235f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa00>
 8023588:	f04f 0201 	mov.w	r2, #1
 802358c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023590:	f8bd 2000 	ldrh.w	r2, [sp]
 8023594:	82a7      	strh	r7, [r4, #20]
 8023596:	82e2      	strh	r2, [r4, #22]
 8023598:	f8a4 e018 	strh.w	lr, [r4, #24]
 802359c:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80235a0:	9a04      	ldr	r2, [sp, #16]
 80235a2:	42ba      	cmp	r2, r7
 80235a4:	d1c6      	bne.n	8023534 <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 80235a6:	9b02      	ldr	r3, [sp, #8]
 80235a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80235aa:	eba3 0c0c 	sub.w	ip, r3, ip
 80235ae:	8b23      	ldrh	r3, [r4, #24]
 80235b0:	3120      	adds	r1, #32
 80235b2:	4463      	add	r3, ip
 80235b4:	8323      	strh	r3, [r4, #24]
 80235b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80235b8:	1ac9      	subs	r1, r1, r3
 80235ba:	8b63      	ldrh	r3, [r4, #26]
 80235bc:	fb0c 3c01 	mla	ip, ip, r1, r3
 80235c0:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80235c4:	e5fe      	b.n	80231c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5cc>
 80235c6:	f04f 30ff 	mov.w	r0, #4294967295
 80235ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80235cc:	426d      	negs	r5, r5
 80235ce:	900e      	str	r0, [sp, #56]	; 0x38
 80235d0:	2000      	movs	r0, #0
 80235d2:	434b      	muls	r3, r1
 80235d4:	e758      	b.n	8023488 <_ZN8touchgfx7Outline10renderLineEiiii+0x890>
 80235d6:	f104 0c14 	add.w	ip, r4, #20
 80235da:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80235de:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 80235e2:	f8c8 0000 	str.w	r0, [r8]
 80235e6:	f8c8 1004 	str.w	r1, [r8, #4]
 80235ea:	6921      	ldr	r1, [r4, #16]
 80235ec:	3108      	adds	r1, #8
 80235ee:	6121      	str	r1, [r4, #16]
 80235f0:	68a1      	ldr	r1, [r4, #8]
 80235f2:	3101      	adds	r1, #1
 80235f4:	60a1      	str	r1, [r4, #8]
 80235f6:	e77d      	b.n	80234f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x8fc>
 80235f8:	f104 0914 	add.w	r9, r4, #20
 80235fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8023600:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8023604:	f8ca 0000 	str.w	r0, [sl]
 8023608:	f8ca 1004 	str.w	r1, [sl, #4]
 802360c:	6921      	ldr	r1, [r4, #16]
 802360e:	3108      	adds	r1, #8
 8023610:	6121      	str	r1, [r4, #16]
 8023612:	68a1      	ldr	r1, [r4, #8]
 8023614:	3101      	adds	r1, #1
 8023616:	60a1      	str	r1, [r4, #8]
 8023618:	e7ba      	b.n	8023590 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 802361a:	f104 0314 	add.w	r3, r4, #20
 802361e:	6925      	ldr	r5, [r4, #16]
 8023620:	cb03      	ldmia	r3!, {r0, r1}
 8023622:	6028      	str	r0, [r5, #0]
 8023624:	6069      	str	r1, [r5, #4]
 8023626:	6923      	ldr	r3, [r4, #16]
 8023628:	3308      	adds	r3, #8
 802362a:	6123      	str	r3, [r4, #16]
 802362c:	68a3      	ldr	r3, [r4, #8]
 802362e:	3301      	adds	r3, #1
 8023630:	60a3      	str	r3, [r4, #8]
 8023632:	e5e9      	b.n	8023208 <_ZN8touchgfx7Outline10renderLineEiiii+0x610>
 8023634:	f104 0314 	add.w	r3, r4, #20
 8023638:	6925      	ldr	r5, [r4, #16]
 802363a:	cb03      	ldmia	r3!, {r0, r1}
 802363c:	6028      	str	r0, [r5, #0]
 802363e:	6069      	str	r1, [r5, #4]
 8023640:	6923      	ldr	r3, [r4, #16]
 8023642:	3308      	adds	r3, #8
 8023644:	6123      	str	r3, [r4, #16]
 8023646:	68a3      	ldr	r3, [r4, #8]
 8023648:	3301      	adds	r3, #1
 802364a:	60a3      	str	r3, [r4, #8]
 802364c:	e613      	b.n	8023276 <_ZN8touchgfx7Outline10renderLineEiiii+0x67e>
 802364e:	9b05      	ldr	r3, [sp, #20]
 8023650:	ea4f 176b 	mov.w	r7, fp, asr #5
 8023654:	f00b 011f 	and.w	r1, fp, #31
 8023658:	f003 031f 	and.w	r3, r3, #31
 802365c:	4567      	cmp	r7, ip
 802365e:	9302      	str	r3, [sp, #8]
 8023660:	9b03      	ldr	r3, [sp, #12]
 8023662:	eba3 060e 	sub.w	r6, r3, lr
 8023666:	d10a      	bne.n	802367e <_ZN8touchgfx7Outline10renderLineEiiii+0xa86>
 8023668:	8b23      	ldrh	r3, [r4, #24]
 802366a:	4433      	add	r3, r6
 802366c:	8323      	strh	r3, [r4, #24]
 802366e:	9b02      	ldr	r3, [sp, #8]
 8023670:	4419      	add	r1, r3
 8023672:	8b63      	ldrh	r3, [r4, #26]
 8023674:	fb06 3601 	mla	r6, r6, r1, r3
 8023678:	8366      	strh	r6, [r4, #26]
 802367a:	f7ff bb33 	b.w	8022ce4 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 802367e:	9b05      	ldr	r3, [sp, #20]
 8023680:	ebb3 030b 	subs.w	r3, r3, fp
 8023684:	f100 809f 	bmi.w	80237c6 <_ZN8touchgfx7Outline10renderLineEiiii+0xbce>
 8023688:	f1c1 0020 	rsb	r0, r1, #32
 802368c:	2201      	movs	r2, #1
 802368e:	f04f 0b20 	mov.w	fp, #32
 8023692:	4346      	muls	r6, r0
 8023694:	9201      	str	r2, [sp, #4]
 8023696:	9a01      	ldr	r2, [sp, #4]
 8023698:	4459      	add	r1, fp
 802369a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 802369e:	4417      	add	r7, r2
 80236a0:	9a00      	ldr	r2, [sp, #0]
 80236a2:	8b20      	ldrh	r0, [r4, #24]
 80236a4:	0412      	lsls	r2, r2, #16
 80236a6:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80236aa:	fb96 f5f3 	sdiv	r5, r6, r3
 80236ae:	fb03 6615 	mls	r6, r3, r5, r6
 80236b2:	eb07 0a02 	add.w	sl, r7, r2
 80236b6:	9204      	str	r2, [sp, #16]
 80236b8:	2e00      	cmp	r6, #0
 80236ba:	bfbc      	itt	lt
 80236bc:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80236c0:	18f6      	addlt	r6, r6, r3
 80236c2:	fb05 8101 	mla	r1, r5, r1, r8
 80236c6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80236ca:	4428      	add	r0, r5
 80236cc:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80236d0:	b200      	sxth	r0, r0
 80236d2:	b209      	sxth	r1, r1
 80236d4:	45ca      	cmp	sl, r9
 80236d6:	8320      	strh	r0, [r4, #24]
 80236d8:	8361      	strh	r1, [r4, #26]
 80236da:	d016      	beq.n	802370a <_ZN8touchgfx7Outline10renderLineEiiii+0xb12>
 80236dc:	ea50 0201 	orrs.w	r2, r0, r1
 80236e0:	d00c      	beq.n	80236fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80236e2:	f1b8 0f00 	cmp.w	r8, #0
 80236e6:	db09      	blt.n	80236fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80236e8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80236ea:	4541      	cmp	r1, r8
 80236ec:	dd06      	ble.n	80236fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80236ee:	68a0      	ldr	r0, [r4, #8]
 80236f0:	6861      	ldr	r1, [r4, #4]
 80236f2:	4288      	cmp	r0, r1
 80236f4:	d36f      	bcc.n	80237d6 <_ZN8touchgfx7Outline10renderLineEiiii+0xbde>
 80236f6:	2101      	movs	r1, #1
 80236f8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80236fc:	2100      	movs	r1, #0
 80236fe:	f8bd 2000 	ldrh.w	r2, [sp]
 8023702:	82a7      	strh	r7, [r4, #20]
 8023704:	82e2      	strh	r2, [r4, #22]
 8023706:	8321      	strh	r1, [r4, #24]
 8023708:	8361      	strh	r1, [r4, #26]
 802370a:	45bc      	cmp	ip, r7
 802370c:	44ae      	add	lr, r5
 802370e:	d049      	beq.n	80237a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xbac>
 8023710:	9a03      	ldr	r2, [sp, #12]
 8023712:	1af6      	subs	r6, r6, r3
 8023714:	eba2 010e 	sub.w	r1, r2, lr
 8023718:	440d      	add	r5, r1
 802371a:	016d      	lsls	r5, r5, #5
 802371c:	fb95 f8f3 	sdiv	r8, r5, r3
 8023720:	fb03 5518 	mls	r5, r3, r8, r5
 8023724:	2d00      	cmp	r5, #0
 8023726:	bfbc      	itt	lt
 8023728:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802372c:	18ed      	addlt	r5, r5, r3
 802372e:	f108 0201 	add.w	r2, r8, #1
 8023732:	9205      	str	r2, [sp, #20]
 8023734:	1976      	adds	r6, r6, r5
 8023736:	8b20      	ldrh	r0, [r4, #24]
 8023738:	8b61      	ldrh	r1, [r4, #26]
 802373a:	bf54      	ite	pl
 802373c:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8023740:	46c1      	movmi	r9, r8
 8023742:	9a01      	ldr	r2, [sp, #4]
 8023744:	bf58      	it	pl
 8023746:	1af6      	subpl	r6, r6, r3
 8023748:	4448      	add	r0, r9
 802374a:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802374e:	4417      	add	r7, r2
 8023750:	44ce      	add	lr, r9
 8023752:	9a04      	ldr	r2, [sp, #16]
 8023754:	b200      	sxth	r0, r0
 8023756:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802375a:	b209      	sxth	r1, r1
 802375c:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8023760:	443a      	add	r2, r7
 8023762:	8320      	strh	r0, [r4, #24]
 8023764:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8023768:	8361      	strh	r1, [r4, #26]
 802376a:	4552      	cmp	r2, sl
 802376c:	d018      	beq.n	80237a0 <_ZN8touchgfx7Outline10renderLineEiiii+0xba8>
 802376e:	ea50 0201 	orrs.w	r2, r0, r1
 8023772:	d00d      	beq.n	8023790 <_ZN8touchgfx7Outline10renderLineEiiii+0xb98>
 8023774:	f1b9 0f00 	cmp.w	r9, #0
 8023778:	db0a      	blt.n	8023790 <_ZN8touchgfx7Outline10renderLineEiiii+0xb98>
 802377a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802377c:	4549      	cmp	r1, r9
 802377e:	dd07      	ble.n	8023790 <_ZN8touchgfx7Outline10renderLineEiiii+0xb98>
 8023780:	68a0      	ldr	r0, [r4, #8]
 8023782:	6861      	ldr	r1, [r4, #4]
 8023784:	4288      	cmp	r0, r1
 8023786:	d337      	bcc.n	80237f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xc00>
 8023788:	f04f 0201 	mov.w	r2, #1
 802378c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023790:	f8bd 2000 	ldrh.w	r2, [sp]
 8023794:	82a7      	strh	r7, [r4, #20]
 8023796:	82e2      	strh	r2, [r4, #22]
 8023798:	f04f 0200 	mov.w	r2, #0
 802379c:	8322      	strh	r2, [r4, #24]
 802379e:	8362      	strh	r2, [r4, #26]
 80237a0:	45bc      	cmp	ip, r7
 80237a2:	d1c7      	bne.n	8023734 <_ZN8touchgfx7Outline10renderLineEiiii+0xb3c>
 80237a4:	9b03      	ldr	r3, [sp, #12]
 80237a6:	8b62      	ldrh	r2, [r4, #26]
 80237a8:	eba3 0e0e 	sub.w	lr, r3, lr
 80237ac:	8b23      	ldrh	r3, [r4, #24]
 80237ae:	4473      	add	r3, lr
 80237b0:	8323      	strh	r3, [r4, #24]
 80237b2:	9b02      	ldr	r3, [sp, #8]
 80237b4:	3320      	adds	r3, #32
 80237b6:	eba3 030b 	sub.w	r3, r3, fp
 80237ba:	fb0e 2e03 	mla	lr, lr, r3, r2
 80237be:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80237c2:	f7ff ba8f 	b.w	8022ce4 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 80237c6:	f04f 32ff 	mov.w	r2, #4294967295
 80237ca:	434e      	muls	r6, r1
 80237cc:	425b      	negs	r3, r3
 80237ce:	f04f 0b00 	mov.w	fp, #0
 80237d2:	9201      	str	r2, [sp, #4]
 80237d4:	e75f      	b.n	8023696 <_ZN8touchgfx7Outline10renderLineEiiii+0xa9e>
 80237d6:	f104 0814 	add.w	r8, r4, #20
 80237da:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80237de:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80237e2:	f8c9 0000 	str.w	r0, [r9]
 80237e6:	f8c9 1004 	str.w	r1, [r9, #4]
 80237ea:	6921      	ldr	r1, [r4, #16]
 80237ec:	3108      	adds	r1, #8
 80237ee:	6121      	str	r1, [r4, #16]
 80237f0:	68a1      	ldr	r1, [r4, #8]
 80237f2:	3101      	adds	r1, #1
 80237f4:	60a1      	str	r1, [r4, #8]
 80237f6:	e781      	b.n	80236fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80237f8:	f104 0914 	add.w	r9, r4, #20
 80237fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8023800:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8023804:	f8ca 0000 	str.w	r0, [sl]
 8023808:	f8ca 1004 	str.w	r1, [sl, #4]
 802380c:	6921      	ldr	r1, [r4, #16]
 802380e:	3108      	adds	r1, #8
 8023810:	6121      	str	r1, [r4, #16]
 8023812:	68a1      	ldr	r1, [r4, #8]
 8023814:	3101      	adds	r1, #1
 8023816:	60a1      	str	r1, [r4, #8]
 8023818:	e7ba      	b.n	8023790 <_ZN8touchgfx7Outline10renderLineEiiii+0xb98>

0802381a <_ZN8touchgfx7Outline6lineToEii>:
 802381a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802381c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802381e:	4604      	mov	r4, r0
 8023820:	460d      	mov	r5, r1
 8023822:	4616      	mov	r6, r2
 8023824:	079b      	lsls	r3, r3, #30
 8023826:	d526      	bpl.n	8023876 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8023828:	6a02      	ldr	r2, [r0, #32]
 802382a:	69c1      	ldr	r1, [r0, #28]
 802382c:	ea86 0302 	eor.w	r3, r6, r2
 8023830:	ea85 0001 	eor.w	r0, r5, r1
 8023834:	4303      	orrs	r3, r0
 8023836:	d01e      	beq.n	8023876 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8023838:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802383a:	114b      	asrs	r3, r1, #5
 802383c:	9600      	str	r6, [sp, #0]
 802383e:	4283      	cmp	r3, r0
 8023840:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8023842:	bfb8      	it	lt
 8023844:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8023846:	3301      	adds	r3, #1
 8023848:	4283      	cmp	r3, r0
 802384a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802384c:	bfc8      	it	gt
 802384e:	6363      	strgt	r3, [r4, #52]	; 0x34
 8023850:	116b      	asrs	r3, r5, #5
 8023852:	4283      	cmp	r3, r0
 8023854:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8023856:	bfb8      	it	lt
 8023858:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802385a:	3301      	adds	r3, #1
 802385c:	4283      	cmp	r3, r0
 802385e:	4620      	mov	r0, r4
 8023860:	bfc8      	it	gt
 8023862:	6363      	strgt	r3, [r4, #52]	; 0x34
 8023864:	462b      	mov	r3, r5
 8023866:	f7ff f9c7 	bl	8022bf8 <_ZN8touchgfx7Outline10renderLineEiiii>
 802386a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802386c:	61e5      	str	r5, [r4, #28]
 802386e:	f043 0301 	orr.w	r3, r3, #1
 8023872:	6226      	str	r6, [r4, #32]
 8023874:	63e3      	str	r3, [r4, #60]	; 0x3c
 8023876:	b002      	add	sp, #8
 8023878:	bd70      	pop	{r4, r5, r6, pc}

0802387a <_ZN8touchgfx7Outline6moveToEii>:
 802387a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802387c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802387e:	4615      	mov	r5, r2
 8023880:	4604      	mov	r4, r0
 8023882:	460e      	mov	r6, r1
 8023884:	079a      	lsls	r2, r3, #30
 8023886:	d401      	bmi.n	802388c <_ZN8touchgfx7Outline6moveToEii+0x12>
 8023888:	f7ff f970 	bl	8022b6c <_ZN8touchgfx7Outline5resetEv>
 802388c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802388e:	07db      	lsls	r3, r3, #31
 8023890:	d504      	bpl.n	802389c <_ZN8touchgfx7Outline6moveToEii+0x22>
 8023892:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8023894:	4620      	mov	r0, r4
 8023896:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8023898:	f7ff ffbf 	bl	802381a <_ZN8touchgfx7Outline6lineToEii>
 802389c:	1177      	asrs	r7, r6, #5
 802389e:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80238a2:	116a      	asrs	r2, r5, #5
 80238a4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80238a8:	eb07 4002 	add.w	r0, r7, r2, lsl #16
 80238ac:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 80238b0:	4298      	cmp	r0, r3
 80238b2:	d015      	beq.n	80238e0 <_ZN8touchgfx7Outline6moveToEii+0x66>
 80238b4:	8b63      	ldrh	r3, [r4, #26]
 80238b6:	8b20      	ldrh	r0, [r4, #24]
 80238b8:	4303      	orrs	r3, r0
 80238ba:	b21b      	sxth	r3, r3
 80238bc:	b15b      	cbz	r3, 80238d6 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80238be:	2900      	cmp	r1, #0
 80238c0:	db09      	blt.n	80238d6 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80238c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80238c4:	428b      	cmp	r3, r1
 80238c6:	dd06      	ble.n	80238d6 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80238c8:	68a1      	ldr	r1, [r4, #8]
 80238ca:	6863      	ldr	r3, [r4, #4]
 80238cc:	4299      	cmp	r1, r3
 80238ce:	d30c      	bcc.n	80238ea <_ZN8touchgfx7Outline6moveToEii+0x70>
 80238d0:	2301      	movs	r3, #1
 80238d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80238d6:	2300      	movs	r3, #0
 80238d8:	82a7      	strh	r7, [r4, #20]
 80238da:	82e2      	strh	r2, [r4, #22]
 80238dc:	8323      	strh	r3, [r4, #24]
 80238de:	8363      	strh	r3, [r4, #26]
 80238e0:	61e6      	str	r6, [r4, #28]
 80238e2:	6266      	str	r6, [r4, #36]	; 0x24
 80238e4:	6225      	str	r5, [r4, #32]
 80238e6:	62a5      	str	r5, [r4, #40]	; 0x28
 80238e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80238ea:	f104 0314 	add.w	r3, r4, #20
 80238ee:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80238f2:	cb03      	ldmia	r3!, {r0, r1}
 80238f4:	f8ce 0000 	str.w	r0, [lr]
 80238f8:	f8ce 1004 	str.w	r1, [lr, #4]
 80238fc:	6923      	ldr	r3, [r4, #16]
 80238fe:	3308      	adds	r3, #8
 8023900:	6123      	str	r3, [r4, #16]
 8023902:	68a3      	ldr	r3, [r4, #8]
 8023904:	3301      	adds	r3, #1
 8023906:	60a3      	str	r3, [r4, #8]
 8023908:	e7e5      	b.n	80238d6 <_ZN8touchgfx7Outline6moveToEii+0x5c>

0802390a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802390a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802390e:	b0d1      	sub	sp, #324	; 0x144
 8023910:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8023914:	466c      	mov	r4, sp
 8023916:	1a0d      	subs	r5, r1, r0
 8023918:	f100 0208 	add.w	r2, r0, #8
 802391c:	2d4f      	cmp	r5, #79	; 0x4f
 802391e:	f340 80bd 	ble.w	8023a9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x192>
 8023922:	112d      	asrs	r5, r5, #4
 8023924:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8023928:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802392c:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8023930:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8023934:	f9b0 8000 	ldrsh.w	r8, [r0]
 8023938:	681e      	ldr	r6, [r3, #0]
 802393a:	6006      	str	r6, [r0, #0]
 802393c:	685e      	ldr	r6, [r3, #4]
 802393e:	6046      	str	r6, [r0, #4]
 8023940:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8023944:	f8a3 e004 	strh.w	lr, [r3, #4]
 8023948:	f8a3 c002 	strh.w	ip, [r3, #2]
 802394c:	80df      	strh	r7, [r3, #6]
 802394e:	f1a1 0308 	sub.w	r3, r1, #8
 8023952:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8023956:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802395a:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802395e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8023962:	eb07 4e06 	add.w	lr, r7, r6, lsl #16
 8023966:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802396a:	45ae      	cmp	lr, r5
 802396c:	dd0f      	ble.n	802398e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802396e:	681d      	ldr	r5, [r3, #0]
 8023970:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 8023974:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8023978:	6015      	str	r5, [r2, #0]
 802397a:	685d      	ldr	r5, [r3, #4]
 802397c:	6055      	str	r5, [r2, #4]
 802397e:	f821 7c08 	strh.w	r7, [r1, #-8]
 8023982:	f821 6c06 	strh.w	r6, [r1, #-6]
 8023986:	f821 cc04 	strh.w	ip, [r1, #-4]
 802398a:	f821 ec02 	strh.w	lr, [r1, #-2]
 802398e:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8023992:	f9b0 7000 	ldrsh.w	r7, [r0]
 8023996:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802399a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802399e:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80239a2:	eb07 4e06 	add.w	lr, r7, r6, lsl #16
 80239a6:	4575      	cmp	r5, lr
 80239a8:	dd0d      	ble.n	80239c6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 80239aa:	6815      	ldr	r5, [r2, #0]
 80239ac:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 80239b0:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 80239b4:	6005      	str	r5, [r0, #0]
 80239b6:	6855      	ldr	r5, [r2, #4]
 80239b8:	8107      	strh	r7, [r0, #8]
 80239ba:	6045      	str	r5, [r0, #4]
 80239bc:	8146      	strh	r6, [r0, #10]
 80239be:	f8a0 c00c 	strh.w	ip, [r0, #12]
 80239c2:	f8a0 e00e 	strh.w	lr, [r0, #14]
 80239c6:	f9b0 7000 	ldrsh.w	r7, [r0]
 80239ca:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80239ce:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 80239d2:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80239d6:	eb07 4e06 	add.w	lr, r7, r6, lsl #16
 80239da:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80239de:	45ae      	cmp	lr, r5
 80239e0:	dd0f      	ble.n	8023a02 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80239e2:	681d      	ldr	r5, [r3, #0]
 80239e4:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 80239e8:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 80239ec:	6005      	str	r5, [r0, #0]
 80239ee:	685d      	ldr	r5, [r3, #4]
 80239f0:	6045      	str	r5, [r0, #4]
 80239f2:	f821 7c08 	strh.w	r7, [r1, #-8]
 80239f6:	f821 6c06 	strh.w	r6, [r1, #-6]
 80239fa:	f821 cc04 	strh.w	ip, [r1, #-4]
 80239fe:	f821 ec02 	strh.w	lr, [r1, #-2]
 8023a02:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8023a06:	f102 0508 	add.w	r5, r2, #8
 8023a0a:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8023a0e:	f9b0 c000 	ldrsh.w	ip, [r0]
 8023a12:	462f      	mov	r7, r5
 8023a14:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8023a18:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8023a1c:	eb0c 4a0e 	add.w	sl, ip, lr, lsl #16
 8023a20:	45b2      	cmp	sl, r6
 8023a22:	dc18      	bgt.n	8023a56 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8023a24:	3b08      	subs	r3, #8
 8023a26:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8023a2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8023a2e:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8023a32:	45b2      	cmp	sl, r6
 8023a34:	dbf6      	blt.n	8023a24 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8023a36:	42ab      	cmp	r3, r5
 8023a38:	681e      	ldr	r6, [r3, #0]
 8023a3a:	d30e      	bcc.n	8023a5a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8023a3c:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8023a40:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8023a44:	602e      	str	r6, [r5, #0]
 8023a46:	685e      	ldr	r6, [r3, #4]
 8023a48:	606e      	str	r6, [r5, #4]
 8023a4a:	f8a3 9000 	strh.w	r9, [r3]
 8023a4e:	f8a3 8002 	strh.w	r8, [r3, #2]
 8023a52:	809f      	strh	r7, [r3, #4]
 8023a54:	80da      	strh	r2, [r3, #6]
 8023a56:	462a      	mov	r2, r5
 8023a58:	e7d3      	b.n	8023a02 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8023a5a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8023a5e:	6006      	str	r6, [r0, #0]
 8023a60:	685e      	ldr	r6, [r3, #4]
 8023a62:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8023a66:	6046      	str	r6, [r0, #4]
 8023a68:	1a1e      	subs	r6, r3, r0
 8023a6a:	80da      	strh	r2, [r3, #6]
 8023a6c:	1b4a      	subs	r2, r1, r5
 8023a6e:	f8a3 c000 	strh.w	ip, [r3]
 8023a72:	10d2      	asrs	r2, r2, #3
 8023a74:	f8a3 e002 	strh.w	lr, [r3, #2]
 8023a78:	f8a3 8004 	strh.w	r8, [r3, #4]
 8023a7c:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8023a80:	bfb5      	itete	lt
 8023a82:	e884 0009 	stmialt.w	r4, {r0, r3}
 8023a86:	4607      	movge	r7, r0
 8023a88:	460b      	movlt	r3, r1
 8023a8a:	6061      	strge	r1, [r4, #4]
 8023a8c:	f104 0408 	add.w	r4, r4, #8
 8023a90:	bfa8      	it	ge
 8023a92:	f844 5c08 	strge.w	r5, [r4, #-8]
 8023a96:	4638      	mov	r0, r7
 8023a98:	4619      	mov	r1, r3
 8023a9a:	e73c      	b.n	8023916 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8023a9c:	4291      	cmp	r1, r2
 8023a9e:	d925      	bls.n	8023aec <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e2>
 8023aa0:	f1a2 0310 	sub.w	r3, r2, #16
 8023aa4:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8023aa8:	f9b3 e010 	ldrsh.w	lr, [r3, #16]
 8023aac:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8023ab0:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8023ab4:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8023ab8:	eb0e 4607 	add.w	r6, lr, r7, lsl #16
 8023abc:	42b5      	cmp	r5, r6
 8023abe:	dd13      	ble.n	8023ae8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1de>
 8023ac0:	461d      	mov	r5, r3
 8023ac2:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8023ac6:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8023aca:	3b08      	subs	r3, #8
 8023acc:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8023ad0:	619e      	str	r6, [r3, #24]
 8023ad2:	42a8      	cmp	r0, r5
 8023ad4:	686e      	ldr	r6, [r5, #4]
 8023ad6:	f8a3 e010 	strh.w	lr, [r3, #16]
 8023ada:	61de      	str	r6, [r3, #28]
 8023adc:	825f      	strh	r7, [r3, #18]
 8023ade:	f8a3 8014 	strh.w	r8, [r3, #20]
 8023ae2:	f8a3 c016 	strh.w	ip, [r3, #22]
 8023ae6:	d1dd      	bne.n	8023aa4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x19a>
 8023ae8:	3208      	adds	r2, #8
 8023aea:	e7d7      	b.n	8023a9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x192>
 8023aec:	466b      	mov	r3, sp
 8023aee:	429c      	cmp	r4, r3
 8023af0:	d903      	bls.n	8023afa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1f0>
 8023af2:	e914 0003 	ldmdb	r4, {r0, r1}
 8023af6:	3c08      	subs	r4, #8
 8023af8:	e70d      	b.n	8023916 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8023afa:	b051      	add	sp, #324	; 0x144
 8023afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023b00 <_ZN8touchgfx7Outline9sortCellsEv>:
 8023b00:	6881      	ldr	r1, [r0, #8]
 8023b02:	b111      	cbz	r1, 8023b0a <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8023b04:	68c0      	ldr	r0, [r0, #12]
 8023b06:	f7ff bf00 	b.w	802390a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8023b0a:	4770      	bx	lr

08023b0c <_ZN8touchgfx7Outline8getCellsEv>:
 8023b0c:	b510      	push	{r4, lr}
 8023b0e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8023b10:	4604      	mov	r4, r0
 8023b12:	07da      	lsls	r2, r3, #31
 8023b14:	d507      	bpl.n	8023b26 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8023b16:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8023b18:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8023b1a:	f7ff fe7e 	bl	802381a <_ZN8touchgfx7Outline6lineToEii>
 8023b1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023b20:	f023 0301 	bic.w	r3, r3, #1
 8023b24:	63e3      	str	r3, [r4, #60]	; 0x3c
 8023b26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023b28:	079b      	lsls	r3, r3, #30
 8023b2a:	d51b      	bpl.n	8023b64 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8023b2c:	8b63      	ldrh	r3, [r4, #26]
 8023b2e:	8b22      	ldrh	r2, [r4, #24]
 8023b30:	4313      	orrs	r3, r2
 8023b32:	b21b      	sxth	r3, r3
 8023b34:	b16b      	cbz	r3, 8023b52 <_ZN8touchgfx7Outline8getCellsEv+0x46>
 8023b36:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023b3a:	2b00      	cmp	r3, #0
 8023b3c:	db09      	blt.n	8023b52 <_ZN8touchgfx7Outline8getCellsEv+0x46>
 8023b3e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8023b40:	4293      	cmp	r3, r2
 8023b42:	da06      	bge.n	8023b52 <_ZN8touchgfx7Outline8getCellsEv+0x46>
 8023b44:	68a2      	ldr	r2, [r4, #8]
 8023b46:	6863      	ldr	r3, [r4, #4]
 8023b48:	429a      	cmp	r2, r3
 8023b4a:	d30d      	bcc.n	8023b68 <_ZN8touchgfx7Outline8getCellsEv+0x5c>
 8023b4c:	2301      	movs	r3, #1
 8023b4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023b52:	68a0      	ldr	r0, [r4, #8]
 8023b54:	b138      	cbz	r0, 8023b66 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8023b56:	4620      	mov	r0, r4
 8023b58:	f7ff ffd2 	bl	8023b00 <_ZN8touchgfx7Outline9sortCellsEv>
 8023b5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023b5e:	f023 0302 	bic.w	r3, r3, #2
 8023b62:	63e3      	str	r3, [r4, #60]	; 0x3c
 8023b64:	68e0      	ldr	r0, [r4, #12]
 8023b66:	bd10      	pop	{r4, pc}
 8023b68:	f104 0314 	add.w	r3, r4, #20
 8023b6c:	6922      	ldr	r2, [r4, #16]
 8023b6e:	cb03      	ldmia	r3!, {r0, r1}
 8023b70:	6010      	str	r0, [r2, #0]
 8023b72:	6051      	str	r1, [r2, #4]
 8023b74:	6923      	ldr	r3, [r4, #16]
 8023b76:	3308      	adds	r3, #8
 8023b78:	6123      	str	r3, [r4, #16]
 8023b7a:	68a3      	ldr	r3, [r4, #8]
 8023b7c:	3301      	adds	r3, #1
 8023b7e:	60a3      	str	r3, [r4, #8]
 8023b80:	e7e7      	b.n	8023b52 <_ZN8touchgfx7Outline8getCellsEv+0x46>
	...

08023b84 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8023b84:	4b02      	ldr	r3, [pc, #8]	; (8023b90 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8023b86:	6018      	str	r0, [r3, #0]
 8023b88:	4b02      	ldr	r3, [pc, #8]	; (8023b94 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8023b8a:	6019      	str	r1, [r3, #0]
 8023b8c:	4770      	bx	lr
 8023b8e:	bf00      	nop
 8023b90:	2000cf80 	.word	0x2000cf80
 8023b94:	2000cf94 	.word	0x2000cf94

08023b98 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8023b98:	b570      	push	{r4, r5, r6, lr}
 8023b9a:	4c2c      	ldr	r4, [pc, #176]	; (8023c4c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 8023b9c:	4d2c      	ldr	r5, [pc, #176]	; (8023c50 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8023b9e:	6822      	ldr	r2, [r4, #0]
 8023ba0:	4b2c      	ldr	r3, [pc, #176]	; (8023c54 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8023ba2:	4282      	cmp	r2, r0
 8023ba4:	492c      	ldr	r1, [pc, #176]	; (8023c58 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8023ba6:	d109      	bne.n	8023bbc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8023ba8:	682e      	ldr	r6, [r5, #0]
 8023baa:	681a      	ldr	r2, [r3, #0]
 8023bac:	4296      	cmp	r6, r2
 8023bae:	d105      	bne.n	8023bbc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8023bb0:	6808      	ldr	r0, [r1, #0]
 8023bb2:	280f      	cmp	r0, #15
 8023bb4:	bf94      	ite	ls
 8023bb6:	2000      	movls	r0, #0
 8023bb8:	2001      	movhi	r0, #1
 8023bba:	bd70      	pop	{r4, r5, r6, pc}
 8023bbc:	681a      	ldr	r2, [r3, #0]
 8023bbe:	4b27      	ldr	r3, [pc, #156]	; (8023c5c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8023bc0:	6020      	str	r0, [r4, #0]
 8023bc2:	681b      	ldr	r3, [r3, #0]
 8023bc4:	602a      	str	r2, [r5, #0]
 8023bc6:	4298      	cmp	r0, r3
 8023bc8:	d905      	bls.n	8023bd6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3e>
 8023bca:	4b25      	ldr	r3, [pc, #148]	; (8023c60 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8023bcc:	2137      	movs	r1, #55	; 0x37
 8023bce:	4a25      	ldr	r2, [pc, #148]	; (8023c64 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8023bd0:	4825      	ldr	r0, [pc, #148]	; (8023c68 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8023bd2:	f007 fa91 	bl	802b0f8 <__assert_func>
 8023bd6:	f010 0403 	ands.w	r4, r0, #3
 8023bda:	bf1f      	itttt	ne
 8023bdc:	f1c4 0504 	rsbne	r5, r4, #4
 8023be0:	3b04      	subne	r3, #4
 8023be2:	1952      	addne	r2, r2, r5
 8023be4:	191b      	addne	r3, r3, r4
 8023be6:	4d21      	ldr	r5, [pc, #132]	; (8023c6c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8023be8:	4402      	add	r2, r0
 8023bea:	1a1b      	subs	r3, r3, r0
 8023bec:	3001      	adds	r0, #1
 8023bee:	602a      	str	r2, [r5, #0]
 8023bf0:	f020 0401 	bic.w	r4, r0, #1
 8023bf4:	42a3      	cmp	r3, r4
 8023bf6:	d203      	bcs.n	8023c00 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x68>
 8023bf8:	4b19      	ldr	r3, [pc, #100]	; (8023c60 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8023bfa:	214a      	movs	r1, #74	; 0x4a
 8023bfc:	4a19      	ldr	r2, [pc, #100]	; (8023c64 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8023bfe:	e7e7      	b.n	8023bd0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x38>
 8023c00:	f010 0002 	ands.w	r0, r0, #2
 8023c04:	bf1f      	itttt	ne
 8023c06:	f1c0 0504 	rsbne	r5, r0, #4
 8023c0a:	1952      	addne	r2, r2, r5
 8023c0c:	1f05      	subne	r5, r0, #4
 8023c0e:	195b      	addne	r3, r3, r5
 8023c10:	4422      	add	r2, r4
 8023c12:	4d17      	ldr	r5, [pc, #92]	; (8023c70 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8023c14:	1b1b      	subs	r3, r3, r4
 8023c16:	602a      	str	r2, [r5, #0]
 8023c18:	429c      	cmp	r4, r3
 8023c1a:	d903      	bls.n	8023c24 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8c>
 8023c1c:	4b10      	ldr	r3, [pc, #64]	; (8023c60 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8023c1e:	215d      	movs	r1, #93	; 0x5d
 8023c20:	4a10      	ldr	r2, [pc, #64]	; (8023c64 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8023c22:	e7d5      	b.n	8023bd0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x38>
 8023c24:	b120      	cbz	r0, 8023c30 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x98>
 8023c26:	f1c0 0504 	rsb	r5, r0, #4
 8023c2a:	3804      	subs	r0, #4
 8023c2c:	442a      	add	r2, r5
 8023c2e:	4403      	add	r3, r0
 8023c30:	1b1b      	subs	r3, r3, r4
 8023c32:	4422      	add	r2, r4
 8023c34:	480f      	ldr	r0, [pc, #60]	; (8023c74 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8023c36:	2b0f      	cmp	r3, #15
 8023c38:	600b      	str	r3, [r1, #0]
 8023c3a:	6002      	str	r2, [r0, #0]
 8023c3c:	d803      	bhi.n	8023c46 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xae>
 8023c3e:	4b0e      	ldr	r3, [pc, #56]	; (8023c78 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xe0>)
 8023c40:	2170      	movs	r1, #112	; 0x70
 8023c42:	4a08      	ldr	r2, [pc, #32]	; (8023c64 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8023c44:	e7c4      	b.n	8023bd0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x38>
 8023c46:	2001      	movs	r0, #1
 8023c48:	bd70      	pop	{r4, r5, r6, pc}
 8023c4a:	bf00      	nop
 8023c4c:	2000cf88 	.word	0x2000cf88
 8023c50:	2000cf90 	.word	0x2000cf90
 8023c54:	2000cf80 	.word	0x2000cf80
 8023c58:	2000cf98 	.word	0x2000cf98
 8023c5c:	2000cf94 	.word	0x2000cf94
 8023c60:	0802edc8 	.word	0x0802edc8
 8023c64:	0802ee90 	.word	0x0802ee90
 8023c68:	0802ee01 	.word	0x0802ee01
 8023c6c:	2000cf9c 	.word	0x2000cf9c
 8023c70:	2000cf8c 	.word	0x2000cf8c
 8023c74:	2000cf84 	.word	0x2000cf84
 8023c78:	0802ee4b 	.word	0x0802ee4b

08023c7c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8023c7c:	4b04      	ldr	r3, [pc, #16]	; (8023c90 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8023c7e:	6818      	ldr	r0, [r3, #0]
 8023c80:	b120      	cbz	r0, 8023c8c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 8023c82:	4b04      	ldr	r3, [pc, #16]	; (8023c94 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8023c84:	6818      	ldr	r0, [r3, #0]
 8023c86:	3000      	adds	r0, #0
 8023c88:	bf18      	it	ne
 8023c8a:	2001      	movne	r0, #1
 8023c8c:	4770      	bx	lr
 8023c8e:	bf00      	nop
 8023c90:	2000cf80 	.word	0x2000cf80
 8023c94:	2000cf94 	.word	0x2000cf94

08023c98 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8023c98:	4b01      	ldr	r3, [pc, #4]	; (8023ca0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8023c9a:	6818      	ldr	r0, [r3, #0]
 8023c9c:	4770      	bx	lr
 8023c9e:	bf00      	nop
 8023ca0:	2000cf88 	.word	0x2000cf88

08023ca4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8023ca4:	4b01      	ldr	r3, [pc, #4]	; (8023cac <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8023ca6:	6818      	ldr	r0, [r3, #0]
 8023ca8:	4770      	bx	lr
 8023caa:	bf00      	nop
 8023cac:	2000cf90 	.word	0x2000cf90

08023cb0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8023cb0:	4b01      	ldr	r3, [pc, #4]	; (8023cb8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 8023cb2:	6818      	ldr	r0, [r3, #0]
 8023cb4:	4770      	bx	lr
 8023cb6:	bf00      	nop
 8023cb8:	2000cf9c 	.word	0x2000cf9c

08023cbc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8023cbc:	4b01      	ldr	r3, [pc, #4]	; (8023cc4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8023cbe:	6818      	ldr	r0, [r3, #0]
 8023cc0:	4770      	bx	lr
 8023cc2:	bf00      	nop
 8023cc4:	2000cf8c 	.word	0x2000cf8c

08023cc8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8023cc8:	4b01      	ldr	r3, [pc, #4]	; (8023cd0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8023cca:	6818      	ldr	r0, [r3, #0]
 8023ccc:	4770      	bx	lr
 8023cce:	bf00      	nop
 8023cd0:	2000cf84 	.word	0x2000cf84

08023cd4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8023cd4:	4b01      	ldr	r3, [pc, #4]	; (8023cdc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8023cd6:	6818      	ldr	r0, [r3, #0]
 8023cd8:	4770      	bx	lr
 8023cda:	bf00      	nop
 8023cdc:	2000cf98 	.word	0x2000cf98

08023ce0 <_ZN8touchgfx8Scanline5resetEv>:
 8023ce0:	b510      	push	{r4, lr}
 8023ce2:	4604      	mov	r4, r0
 8023ce4:	f7ff ffde 	bl	8023ca4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8023ce8:	61a0      	str	r0, [r4, #24]
 8023cea:	f7ff ffe1 	bl	8023cb0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8023cee:	61e0      	str	r0, [r4, #28]
 8023cf0:	f7ff ffe4 	bl	8023cbc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8023cf4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023cf8:	6220      	str	r0, [r4, #32]
 8023cfa:	6063      	str	r3, [r4, #4]
 8023cfc:	60a3      	str	r3, [r4, #8]
 8023cfe:	69e3      	ldr	r3, [r4, #28]
 8023d00:	6160      	str	r0, [r4, #20]
 8023d02:	6123      	str	r3, [r4, #16]
 8023d04:	2300      	movs	r3, #0
 8023d06:	60e3      	str	r3, [r4, #12]
 8023d08:	bd10      	pop	{r4, pc}
	...

08023d0c <_ZN8touchgfx8ScanlineC1Ev>:
 8023d0c:	4b07      	ldr	r3, [pc, #28]	; (8023d2c <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 8023d0e:	b510      	push	{r4, lr}
 8023d10:	6003      	str	r3, [r0, #0]
 8023d12:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023d16:	4604      	mov	r4, r0
 8023d18:	6043      	str	r3, [r0, #4]
 8023d1a:	6083      	str	r3, [r0, #8]
 8023d1c:	2300      	movs	r3, #0
 8023d1e:	60c3      	str	r3, [r0, #12]
 8023d20:	6103      	str	r3, [r0, #16]
 8023d22:	6143      	str	r3, [r0, #20]
 8023d24:	f7ff ffdc 	bl	8023ce0 <_ZN8touchgfx8Scanline5resetEv>
 8023d28:	4620      	mov	r0, r4
 8023d2a:	bd10      	pop	{r4, pc}
 8023d2c:	0802d40c 	.word	0x0802d40c

08023d30 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8023d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023d34:	1e0c      	subs	r4, r1, #0
 8023d36:	4605      	mov	r5, r0
 8023d38:	4617      	mov	r7, r2
 8023d3a:	461e      	mov	r6, r3
 8023d3c:	da03      	bge.n	8023d46 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8023d3e:	4426      	add	r6, r4
 8023d40:	2e01      	cmp	r6, #1
 8023d42:	d420      	bmi.n	8023d86 <_ZN8touchgfx8Scanline7addSpanEiijj+0x56>
 8023d44:	2400      	movs	r4, #0
 8023d46:	f7ff ffa7 	bl	8023c98 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8023d4a:	42a0      	cmp	r0, r4
 8023d4c:	d91b      	bls.n	8023d86 <_ZN8touchgfx8Scanline7addSpanEiijj+0x56>
 8023d4e:	eb06 0804 	add.w	r8, r6, r4
 8023d52:	f7ff ffa1 	bl	8023c98 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8023d56:	4580      	cmp	r8, r0
 8023d58:	d902      	bls.n	8023d60 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8023d5a:	f7ff ff9d 	bl	8023c98 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8023d5e:	1b06      	subs	r6, r0, r4
 8023d60:	69a8      	ldr	r0, [r5, #24]
 8023d62:	4632      	mov	r2, r6
 8023d64:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8023d68:	4420      	add	r0, r4
 8023d6a:	f001 f9da 	bl	8025122 <_ZN8touchgfx6memsetEPvhm>
 8023d6e:	686b      	ldr	r3, [r5, #4]
 8023d70:	3301      	adds	r3, #1
 8023d72:	429c      	cmp	r4, r3
 8023d74:	696b      	ldr	r3, [r5, #20]
 8023d76:	d108      	bne.n	8023d8a <_ZN8touchgfx8Scanline7addSpanEiijj+0x5a>
 8023d78:	881a      	ldrh	r2, [r3, #0]
 8023d7a:	4432      	add	r2, r6
 8023d7c:	801a      	strh	r2, [r3, #0]
 8023d7e:	3c01      	subs	r4, #1
 8023d80:	60af      	str	r7, [r5, #8]
 8023d82:	4434      	add	r4, r6
 8023d84:	606c      	str	r4, [r5, #4]
 8023d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023d8a:	1c9a      	adds	r2, r3, #2
 8023d8c:	616a      	str	r2, [r5, #20]
 8023d8e:	805e      	strh	r6, [r3, #2]
 8023d90:	692b      	ldr	r3, [r5, #16]
 8023d92:	1c9a      	adds	r2, r3, #2
 8023d94:	612a      	str	r2, [r5, #16]
 8023d96:	805c      	strh	r4, [r3, #2]
 8023d98:	68eb      	ldr	r3, [r5, #12]
 8023d9a:	3301      	adds	r3, #1
 8023d9c:	60eb      	str	r3, [r5, #12]
 8023d9e:	e7ee      	b.n	8023d7e <_ZN8touchgfx8Scanline7addSpanEiijj+0x4e>

08023da0 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8023da0:	2200      	movs	r2, #0
 8023da2:	6002      	str	r2, [r0, #0]
 8023da4:	7102      	strb	r2, [r0, #4]
 8023da6:	6082      	str	r2, [r0, #8]
 8023da8:	60c2      	str	r2, [r0, #12]
 8023daa:	6102      	str	r2, [r0, #16]
 8023dac:	4770      	bx	lr

08023dae <_ZN8touchgfx15RenderingBufferD1Ev>:
 8023dae:	4770      	bx	lr

08023db0 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8023db0:	6083      	str	r3, [r0, #8]
 8023db2:	9b00      	ldr	r3, [sp, #0]
 8023db4:	6001      	str	r1, [r0, #0]
 8023db6:	60c3      	str	r3, [r0, #12]
 8023db8:	9b01      	ldr	r3, [sp, #4]
 8023dba:	7102      	strb	r2, [r0, #4]
 8023dbc:	6103      	str	r3, [r0, #16]
 8023dbe:	4770      	bx	lr

08023dc0 <_ZN8touchgfx4Edge4stepEv>:
 8023dc0:	b510      	push	{r4, lr}
 8023dc2:	e890 0006 	ldmia.w	r0, {r1, r2}
 8023dc6:	4603      	mov	r3, r0
 8023dc8:	4411      	add	r1, r2
 8023dca:	6942      	ldr	r2, [r0, #20]
 8023dcc:	3201      	adds	r2, #1
 8023dce:	6001      	str	r1, [r0, #0]
 8023dd0:	6142      	str	r2, [r0, #20]
 8023dd2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8023dd6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8023dda:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8023dde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8023de2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8023de6:	691a      	ldr	r2, [r3, #16]
 8023de8:	689c      	ldr	r4, [r3, #8]
 8023dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8023dee:	ed93 6a08 	vldr	s12, [r3, #32]
 8023df2:	edd3 6a07 	vldr	s13, [r3, #28]
 8023df6:	4422      	add	r2, r4
 8023df8:	6980      	ldr	r0, [r0, #24]
 8023dfa:	68dc      	ldr	r4, [r3, #12]
 8023dfc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8023e00:	3801      	subs	r0, #1
 8023e02:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
 8023e06:	42a2      	cmp	r2, r4
 8023e08:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8023e0c:	6198      	str	r0, [r3, #24]
 8023e0e:	edc3 6a07 	vstr	s13, [r3, #28]
 8023e12:	611a      	str	r2, [r3, #16]
 8023e14:	db15      	blt.n	8023e42 <_ZN8touchgfx4Edge4stepEv+0x82>
 8023e16:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 8023e1a:	3101      	adds	r1, #1
 8023e1c:	1b12      	subs	r2, r2, r4
 8023e1e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8023e22:	6019      	str	r1, [r3, #0]
 8023e24:	611a      	str	r2, [r3, #16]
 8023e26:	edc3 6a07 	vstr	s13, [r3, #28]
 8023e2a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8023e2e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8023e32:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
 8023e36:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023e3e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8023e42:	bd10      	pop	{r4, pc}

08023e44 <_ZN8touchgfx4Edge4stepEi>:
 8023e44:	b570      	push	{r4, r5, r6, lr}
 8023e46:	4605      	mov	r5, r0
 8023e48:	460e      	mov	r6, r1
 8023e4a:	2400      	movs	r4, #0
 8023e4c:	42b4      	cmp	r4, r6
 8023e4e:	da04      	bge.n	8023e5a <_ZN8touchgfx4Edge4stepEi+0x16>
 8023e50:	4628      	mov	r0, r5
 8023e52:	3401      	adds	r4, #1
 8023e54:	f7ff ffb4 	bl	8023dc0 <_ZN8touchgfx4Edge4stepEv>
 8023e58:	e7f8      	b.n	8023e4c <_ZN8touchgfx4Edge4stepEi+0x8>
 8023e5a:	69a8      	ldr	r0, [r5, #24]
 8023e5c:	bd70      	pop	{r4, r5, r6, pc}

08023e5e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8023e5e:	2b02      	cmp	r3, #2
 8023e60:	d00e      	beq.n	8023e80 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8023e62:	2b03      	cmp	r3, #3
 8023e64:	d012      	beq.n	8023e8c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2e>
 8023e66:	2b01      	cmp	r3, #1
 8023e68:	d003      	beq.n	8023e72 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8023e6a:	f9b0 2000 	ldrsh.w	r2, [r0]
 8023e6e:	1850      	adds	r0, r2, r1
 8023e70:	4770      	bx	lr
 8023e72:	8803      	ldrh	r3, [r0, #0]
 8023e74:	8880      	ldrh	r0, [r0, #4]
 8023e76:	4418      	add	r0, r3
 8023e78:	b200      	sxth	r0, r0
 8023e7a:	1a80      	subs	r0, r0, r2
 8023e7c:	3801      	subs	r0, #1
 8023e7e:	4770      	bx	lr
 8023e80:	8803      	ldrh	r3, [r0, #0]
 8023e82:	8880      	ldrh	r0, [r0, #4]
 8023e84:	4418      	add	r0, r3
 8023e86:	b200      	sxth	r0, r0
 8023e88:	1a40      	subs	r0, r0, r1
 8023e8a:	e7f7      	b.n	8023e7c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8023e8c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8023e90:	4410      	add	r0, r2
 8023e92:	4770      	bx	lr

08023e94 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8023e94:	2b02      	cmp	r3, #2
 8023e96:	d008      	beq.n	8023eaa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8023e98:	2b03      	cmp	r3, #3
 8023e9a:	d00d      	beq.n	8023eb8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8023e9c:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8023ea0:	2b01      	cmp	r3, #1
 8023ea2:	bf14      	ite	ne
 8023ea4:	1880      	addne	r0, r0, r2
 8023ea6:	1840      	addeq	r0, r0, r1
 8023ea8:	4770      	bx	lr
 8023eaa:	8843      	ldrh	r3, [r0, #2]
 8023eac:	88c0      	ldrh	r0, [r0, #6]
 8023eae:	4418      	add	r0, r3
 8023eb0:	b200      	sxth	r0, r0
 8023eb2:	1a80      	subs	r0, r0, r2
 8023eb4:	3801      	subs	r0, #1
 8023eb6:	4770      	bx	lr
 8023eb8:	8843      	ldrh	r3, [r0, #2]
 8023eba:	88c0      	ldrh	r0, [r0, #6]
 8023ebc:	4418      	add	r0, r3
 8023ebe:	b200      	sxth	r0, r0
 8023ec0:	1a40      	subs	r0, r0, r1
 8023ec2:	e7f7      	b.n	8023eb4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

08023ec4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8023ec4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8023ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ecc:	b0d1      	sub	sp, #324	; 0x144
 8023ece:	ed92 7a02 	vldr	s14, [r2, #8]
 8023ed2:	4683      	mov	fp, r0
 8023ed4:	4614      	mov	r4, r2
 8023ed6:	930a      	str	r3, [sp, #40]	; 0x28
 8023ed8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8023edc:	f8bd 3170 	ldrh.w	r3, [sp, #368]	; 0x170
 8023ee0:	9109      	str	r1, [sp, #36]	; 0x24
 8023ee2:	930b      	str	r3, [sp, #44]	; 0x2c
 8023ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ee8:	f89d 3174 	ldrb.w	r3, [sp, #372]	; 0x174
 8023eec:	9f5b      	ldr	r7, [sp, #364]	; 0x16c
 8023eee:	930c      	str	r3, [sp, #48]	; 0x30
 8023ef0:	f8bd 3178 	ldrh.w	r3, [sp, #376]	; 0x178
 8023ef4:	930d      	str	r3, [sp, #52]	; 0x34
 8023ef6:	f240 8140 	bls.w	802417a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8023efa:	ed92 7a07 	vldr	s14, [r2, #28]
 8023efe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8023f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f06:	f240 8138 	bls.w	802417a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8023f0a:	ed92 7a0c 	vldr	s14, [r2, #48]	; 0x30
 8023f0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8023f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f16:	f240 8130 	bls.w	802417a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8023f1a:	6812      	ldr	r2, [r2, #0]
 8023f1c:	4b98      	ldr	r3, [pc, #608]	; (8024180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2bc>)
 8023f1e:	429a      	cmp	r2, r3
 8023f20:	f2c0 812b 	blt.w	802417a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8023f24:	4997      	ldr	r1, [pc, #604]	; (8024184 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c0>)
 8023f26:	6963      	ldr	r3, [r4, #20]
 8023f28:	428a      	cmp	r2, r1
 8023f2a:	f300 8126 	bgt.w	802417a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8023f2e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8023f32:	4895      	ldr	r0, [pc, #596]	; (8024188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c4>)
 8023f34:	33ff      	adds	r3, #255	; 0xff
 8023f36:	4283      	cmp	r3, r0
 8023f38:	f200 811f 	bhi.w	802417a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8023f3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8023f3e:	4d93      	ldr	r5, [pc, #588]	; (802418c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c8>)
 8023f40:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8023f44:	33ff      	adds	r3, #255	; 0xff
 8023f46:	42ab      	cmp	r3, r5
 8023f48:	f200 8117 	bhi.w	802417a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8023f4c:	6862      	ldr	r2, [r4, #4]
 8023f4e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8023f52:	33ff      	adds	r3, #255	; 0xff
 8023f54:	4283      	cmp	r3, r0
 8023f56:	f200 8110 	bhi.w	802417a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8023f5a:	69a1      	ldr	r1, [r4, #24]
 8023f5c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8023f60:	33ff      	adds	r3, #255	; 0xff
 8023f62:	4283      	cmp	r3, r0
 8023f64:	f200 8109 	bhi.w	802417a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8023f68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8023f6a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8023f6e:	30ff      	adds	r0, #255	; 0xff
 8023f70:	42a8      	cmp	r0, r5
 8023f72:	f200 8102 	bhi.w	802417a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8023f76:	428a      	cmp	r2, r1
 8023f78:	da7a      	bge.n	8024070 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1ac>
 8023f7a:	429a      	cmp	r2, r3
 8023f7c:	f300 8084 	bgt.w	8024088 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c4>
 8023f80:	4299      	cmp	r1, r3
 8023f82:	f2c0 8088 	blt.w	8024096 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1d2>
 8023f86:	2501      	movs	r5, #1
 8023f88:	2602      	movs	r6, #2
 8023f8a:	46a9      	mov	r9, r5
 8023f8c:	46b0      	mov	r8, r6
 8023f8e:	f04f 0a00 	mov.w	sl, #0
 8023f92:	4621      	mov	r1, r4
 8023f94:	a83f      	add	r0, sp, #252	; 0xfc
 8023f96:	f002 fadd 	bl	8026554 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8023f9a:	4622      	mov	r2, r4
 8023f9c:	f8cd 9000 	str.w	r9, [sp]
 8023fa0:	4653      	mov	r3, sl
 8023fa2:	a93f      	add	r1, sp, #252	; 0xfc
 8023fa4:	a80f      	add	r0, sp, #60	; 0x3c
 8023fa6:	f002 fc05 	bl	80267b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8023faa:	f8cd 8000 	str.w	r8, [sp]
 8023fae:	4622      	mov	r2, r4
 8023fb0:	4653      	mov	r3, sl
 8023fb2:	a93f      	add	r1, sp, #252	; 0xfc
 8023fb4:	a81f      	add	r0, sp, #124	; 0x7c
 8023fb6:	f002 fbfd 	bl	80267b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8023fba:	4643      	mov	r3, r8
 8023fbc:	4622      	mov	r2, r4
 8023fbe:	f8cd 9000 	str.w	r9, [sp]
 8023fc2:	a93f      	add	r1, sp, #252	; 0xfc
 8023fc4:	a82f      	add	r0, sp, #188	; 0xbc
 8023fc6:	f002 fbf5 	bl	80267b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8023fca:	42ae      	cmp	r6, r5
 8023fcc:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 8023fce:	bfac      	ite	ge
 8023fd0:	ad1f      	addge	r5, sp, #124	; 0x7c
 8023fd2:	ad0f      	addlt	r5, sp, #60	; 0x3c
 8023fd4:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 8023fd8:	bfa8      	it	ge
 8023fda:	2601      	movge	r6, #1
 8023fdc:	696b      	ldr	r3, [r5, #20]
 8023fde:	bfa8      	it	ge
 8023fe0:	f10d 083c 	addge.w	r8, sp, #60	; 0x3c
 8023fe4:	88fa      	ldrh	r2, [r7, #6]
 8023fe6:	bfb8      	it	lt
 8023fe8:	2600      	movlt	r6, #0
 8023fea:	444b      	add	r3, r9
 8023fec:	f9b7 9002 	ldrsh.w	r9, [r7, #2]
 8023ff0:	bfb8      	it	lt
 8023ff2:	f10d 087c 	addlt.w	r8, sp, #124	; 0x7c
 8023ff6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8023ff8:	444a      	add	r2, r9
 8023ffa:	b212      	sxth	r2, r2
 8023ffc:	4293      	cmp	r3, r2
 8023ffe:	da56      	bge.n	80240ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1ea>
 8024000:	454b      	cmp	r3, r9
 8024002:	da08      	bge.n	8024016 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x152>
 8024004:	2c00      	cmp	r4, #0
 8024006:	dd60      	ble.n	80240ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x206>
 8024008:	eba9 0903 	sub.w	r9, r9, r3
 802400c:	454c      	cmp	r4, r9
 802400e:	db50      	blt.n	80240b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1ee>
 8024010:	f1b9 0f00 	cmp.w	r9, #0
 8024014:	dc4e      	bgt.n	80240b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 8024016:	2c00      	cmp	r4, #0
 8024018:	dd57      	ble.n	80240ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x206>
 802401a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802401c:	4658      	mov	r0, fp
 802401e:	f8db 3000 	ldr.w	r3, [fp]
 8024022:	3c01      	subs	r4, #1
 8024024:	9206      	str	r2, [sp, #24]
 8024026:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024028:	9703      	str	r7, [sp, #12]
 802402a:	9205      	str	r2, [sp, #20]
 802402c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802402e:	f8cd 8000 	str.w	r8, [sp]
 8024032:	9204      	str	r2, [sp, #16]
 8024034:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 8024036:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024038:	9202      	str	r2, [sp, #8]
 802403a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802403c:	9201      	str	r2, [sp, #4]
 802403e:	aa3f      	add	r2, sp, #252	; 0xfc
 8024040:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 8024044:	462b      	mov	r3, r5
 8024046:	47c8      	blx	r9
 8024048:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 802404a:	88f9      	ldrh	r1, [r7, #6]
 802404c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8024050:	696b      	ldr	r3, [r5, #20]
 8024052:	441a      	add	r2, r3
 8024054:	887b      	ldrh	r3, [r7, #2]
 8024056:	440b      	add	r3, r1
 8024058:	3201      	adds	r2, #1
 802405a:	b21b      	sxth	r3, r3
 802405c:	429a      	cmp	r2, r3
 802405e:	f280 808c 	bge.w	802417a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8024062:	a81f      	add	r0, sp, #124	; 0x7c
 8024064:	f7ff feac 	bl	8023dc0 <_ZN8touchgfx4Edge4stepEv>
 8024068:	a80f      	add	r0, sp, #60	; 0x3c
 802406a:	f7ff fea9 	bl	8023dc0 <_ZN8touchgfx4Edge4stepEv>
 802406e:	e7d2      	b.n	8024016 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x152>
 8024070:	4299      	cmp	r1, r3
 8024072:	dc13      	bgt.n	802409c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1d8>
 8024074:	429a      	cmp	r2, r3
 8024076:	db14      	blt.n	80240a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1de>
 8024078:	2602      	movs	r6, #2
 802407a:	2503      	movs	r5, #3
 802407c:	f04f 0900 	mov.w	r9, #0
 8024080:	46b0      	mov	r8, r6
 8024082:	f04f 0a01 	mov.w	sl, #1
 8024086:	e784      	b.n	8023f92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xce>
 8024088:	2501      	movs	r5, #1
 802408a:	2600      	movs	r6, #0
 802408c:	46a9      	mov	r9, r5
 802408e:	46b0      	mov	r8, r6
 8024090:	f04f 0a02 	mov.w	sl, #2
 8024094:	e77d      	b.n	8023f92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xce>
 8024096:	2502      	movs	r5, #2
 8024098:	2601      	movs	r6, #1
 802409a:	e776      	b.n	8023f8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xc6>
 802409c:	2500      	movs	r5, #0
 802409e:	2601      	movs	r6, #1
 80240a0:	e7f4      	b.n	802408c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c8>
 80240a2:	2502      	movs	r5, #2
 80240a4:	2603      	movs	r6, #3
 80240a6:	f04f 0800 	mov.w	r8, #0
 80240aa:	46a9      	mov	r9, r5
 80240ac:	e7e9      	b.n	8024082 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1be>
 80240ae:	46a1      	mov	r9, r4
 80240b0:	e7ae      	b.n	8024010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x14c>
 80240b2:	46a1      	mov	r9, r4
 80240b4:	4649      	mov	r1, r9
 80240b6:	a81f      	add	r0, sp, #124	; 0x7c
 80240b8:	f7ff fec4 	bl	8023e44 <_ZN8touchgfx4Edge4stepEi>
 80240bc:	4649      	mov	r1, r9
 80240be:	a80f      	add	r0, sp, #60	; 0x3c
 80240c0:	eba4 0409 	sub.w	r4, r4, r9
 80240c4:	f7ff febe 	bl	8023e44 <_ZN8touchgfx4Edge4stepEi>
 80240c8:	e7a5      	b.n	8024016 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x152>
 80240ca:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 80240cc:	2e00      	cmp	r6, #0
 80240ce:	d143      	bne.n	8024158 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x294>
 80240d0:	ae2f      	add	r6, sp, #188	; 0xbc
 80240d2:	ad0f      	add	r5, sp, #60	; 0x3c
 80240d4:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 80240d6:	88fa      	ldrh	r2, [r7, #6]
 80240d8:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
 80240dc:	696b      	ldr	r3, [r5, #20]
 80240de:	4443      	add	r3, r8
 80240e0:	f9b7 8002 	ldrsh.w	r8, [r7, #2]
 80240e4:	4442      	add	r2, r8
 80240e6:	b212      	sxth	r2, r2
 80240e8:	4293      	cmp	r3, r2
 80240ea:	da38      	bge.n	802415e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x29a>
 80240ec:	4543      	cmp	r3, r8
 80240ee:	da08      	bge.n	8024102 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23e>
 80240f0:	2c00      	cmp	r4, #0
 80240f2:	dd42      	ble.n	802417a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 80240f4:	eba8 0803 	sub.w	r8, r8, r3
 80240f8:	4544      	cmp	r4, r8
 80240fa:	db32      	blt.n	8024162 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x29e>
 80240fc:	f1b8 0f00 	cmp.w	r8, #0
 8024100:	dc30      	bgt.n	8024164 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2a0>
 8024102:	2c00      	cmp	r4, #0
 8024104:	dd39      	ble.n	802417a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8024106:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024108:	4658      	mov	r0, fp
 802410a:	f8db 3000 	ldr.w	r3, [fp]
 802410e:	3c01      	subs	r4, #1
 8024110:	9206      	str	r2, [sp, #24]
 8024112:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024114:	9703      	str	r7, [sp, #12]
 8024116:	9205      	str	r2, [sp, #20]
 8024118:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802411a:	9600      	str	r6, [sp, #0]
 802411c:	9204      	str	r2, [sp, #16]
 802411e:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 8024120:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024122:	9202      	str	r2, [sp, #8]
 8024124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024126:	9201      	str	r2, [sp, #4]
 8024128:	aa3f      	add	r2, sp, #252	; 0xfc
 802412a:	f8d3 803c 	ldr.w	r8, [r3, #60]	; 0x3c
 802412e:	462b      	mov	r3, r5
 8024130:	47c0      	blx	r8
 8024132:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 8024134:	88f9      	ldrh	r1, [r7, #6]
 8024136:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 802413a:	696b      	ldr	r3, [r5, #20]
 802413c:	441a      	add	r2, r3
 802413e:	887b      	ldrh	r3, [r7, #2]
 8024140:	440b      	add	r3, r1
 8024142:	3201      	adds	r2, #1
 8024144:	b21b      	sxth	r3, r3
 8024146:	429a      	cmp	r2, r3
 8024148:	da17      	bge.n	802417a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 802414a:	a82f      	add	r0, sp, #188	; 0xbc
 802414c:	f7ff fe38 	bl	8023dc0 <_ZN8touchgfx4Edge4stepEv>
 8024150:	a80f      	add	r0, sp, #60	; 0x3c
 8024152:	f7ff fe35 	bl	8023dc0 <_ZN8touchgfx4Edge4stepEv>
 8024156:	e7d4      	b.n	8024102 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23e>
 8024158:	ae0f      	add	r6, sp, #60	; 0x3c
 802415a:	ad2f      	add	r5, sp, #188	; 0xbc
 802415c:	e7ba      	b.n	80240d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 802415e:	46a0      	mov	r8, r4
 8024160:	e7cc      	b.n	80240fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x238>
 8024162:	46a0      	mov	r8, r4
 8024164:	4641      	mov	r1, r8
 8024166:	a82f      	add	r0, sp, #188	; 0xbc
 8024168:	f7ff fe6c 	bl	8023e44 <_ZN8touchgfx4Edge4stepEi>
 802416c:	4641      	mov	r1, r8
 802416e:	a80f      	add	r0, sp, #60	; 0x3c
 8024170:	eba4 0408 	sub.w	r4, r4, r8
 8024174:	f7ff fe66 	bl	8023e44 <_ZN8touchgfx4Edge4stepEi>
 8024178:	e7c3      	b.n	8024102 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23e>
 802417a:	b051      	add	sp, #324	; 0x144
 802417c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024180:	fffd8f01 	.word	0xfffd8f01
 8024184:	00027100 	.word	0x00027100
 8024188:	0004e1ff 	.word	0x0004e1ff
 802418c:	0004e1fe 	.word	0x0004e1fe

08024190 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8024190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024192:	f8dd c014 	ldr.w	ip, [sp, #20]
 8024196:	1e05      	subs	r5, r0, #0
 8024198:	f04f 0601 	mov.w	r6, #1
 802419c:	9c06      	ldr	r4, [sp, #24]
 802419e:	bfba      	itte	lt
 80241a0:	f04f 37ff 	movlt.w	r7, #4294967295
 80241a4:	426d      	neglt	r5, r5
 80241a6:	2701      	movge	r7, #1
 80241a8:	f1bc 0f00 	cmp.w	ip, #0
 80241ac:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80241b0:	bfbc      	itt	lt
 80241b2:	f1cc 0c00 	rsblt	ip, ip, #0
 80241b6:	427f      	neglt	r7, r7
 80241b8:	2c00      	cmp	r4, #0
 80241ba:	fa4c f001 	asr.w	r0, ip, r1
 80241be:	fa06 f101 	lsl.w	r1, r6, r1
 80241c2:	bfbc      	itt	lt
 80241c4:	4264      	neglt	r4, r4
 80241c6:	427f      	neglt	r7, r7
 80241c8:	3901      	subs	r1, #1
 80241ca:	ea01 010c 	and.w	r1, r1, ip
 80241ce:	434d      	muls	r5, r1
 80241d0:	f8de 1000 	ldr.w	r1, [lr]
 80241d4:	fb03 1300 	mla	r3, r3, r0, r1
 80241d8:	fb95 f1f4 	sdiv	r1, r5, r4
 80241dc:	fb04 5511 	mls	r5, r4, r1, r5
 80241e0:	441d      	add	r5, r3
 80241e2:	fb95 f3f4 	sdiv	r3, r5, r4
 80241e6:	4419      	add	r1, r3
 80241e8:	fb04 5413 	mls	r4, r4, r3, r5
 80241ec:	fb02 1000 	mla	r0, r2, r0, r1
 80241f0:	f8ce 4000 	str.w	r4, [lr]
 80241f4:	4378      	muls	r0, r7
 80241f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080241f8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80241f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80241fc:	4c24      	ldr	r4, [pc, #144]	; (8024290 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 80241fe:	b086      	sub	sp, #24
 8024200:	4605      	mov	r5, r0
 8024202:	6807      	ldr	r7, [r0, #0]
 8024204:	69a3      	ldr	r3, [r4, #24]
 8024206:	b92b      	cbnz	r3, 8024214 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8024208:	6840      	ldr	r0, [r0, #4]
 802420a:	602f      	str	r7, [r5, #0]
 802420c:	6068      	str	r0, [r5, #4]
 802420e:	b006      	add	sp, #24
 8024210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024214:	f04f 0802 	mov.w	r8, #2
 8024218:	68a2      	ldr	r2, [r4, #8]
 802421a:	ae06      	add	r6, sp, #24
 802421c:	6820      	ldr	r0, [r4, #0]
 802421e:	fb93 f1f8 	sdiv	r1, r3, r8
 8024222:	440a      	add	r2, r1
 8024224:	69e1      	ldr	r1, [r4, #28]
 8024226:	f846 2d04 	str.w	r2, [r6, #-4]!
 802422a:	9301      	str	r3, [sp, #4]
 802422c:	9700      	str	r7, [sp, #0]
 802422e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024230:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8024232:	9602      	str	r6, [sp, #8]
 8024234:	f7ff ffac 	bl	8024190 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8024238:	69a3      	ldr	r3, [r4, #24]
 802423a:	4607      	mov	r7, r0
 802423c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 802423e:	9301      	str	r3, [sp, #4]
 8024240:	686b      	ldr	r3, [r5, #4]
 8024242:	6a21      	ldr	r1, [r4, #32]
 8024244:	9300      	str	r3, [sp, #0]
 8024246:	9602      	str	r6, [sp, #8]
 8024248:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802424a:	6860      	ldr	r0, [r4, #4]
 802424c:	f7ff ffa0 	bl	8024190 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8024250:	69a2      	ldr	r2, [r4, #24]
 8024252:	6963      	ldr	r3, [r4, #20]
 8024254:	4407      	add	r7, r0
 8024256:	9201      	str	r2, [sp, #4]
 8024258:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802425a:	9602      	str	r6, [sp, #8]
 802425c:	68e0      	ldr	r0, [r4, #12]
 802425e:	fb92 f8f8 	sdiv	r8, r2, r8
 8024262:	4443      	add	r3, r8
 8024264:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8024266:	9305      	str	r3, [sp, #20]
 8024268:	682b      	ldr	r3, [r5, #0]
 802426a:	9300      	str	r3, [sp, #0]
 802426c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 802426e:	f7ff ff8f 	bl	8024190 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8024272:	69a3      	ldr	r3, [r4, #24]
 8024274:	4680      	mov	r8, r0
 8024276:	9602      	str	r6, [sp, #8]
 8024278:	9301      	str	r3, [sp, #4]
 802427a:	686b      	ldr	r3, [r5, #4]
 802427c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 802427e:	9300      	str	r3, [sp, #0]
 8024280:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8024282:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8024284:	6920      	ldr	r0, [r4, #16]
 8024286:	f7ff ff83 	bl	8024190 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 802428a:	4440      	add	r0, r8
 802428c:	e7bd      	b.n	802420a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 802428e:	bf00      	nop
 8024290:	2000cfa0 	.word	0x2000cfa0

08024294 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8024294:	4b07      	ldr	r3, [pc, #28]	; (80242b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8024296:	b510      	push	{r4, lr}
 8024298:	781b      	ldrb	r3, [r3, #0]
 802429a:	2b01      	cmp	r3, #1
 802429c:	d108      	bne.n	80242b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 802429e:	4b06      	ldr	r3, [pc, #24]	; (80242b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80242a0:	880c      	ldrh	r4, [r1, #0]
 80242a2:	881b      	ldrh	r3, [r3, #0]
 80242a4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80242a8:	3b01      	subs	r3, #1
 80242aa:	1b1b      	subs	r3, r3, r4
 80242ac:	8003      	strh	r3, [r0, #0]
 80242ae:	800a      	strh	r2, [r1, #0]
 80242b0:	bd10      	pop	{r4, pc}
 80242b2:	bf00      	nop
 80242b4:	2000cf6e 	.word	0x2000cf6e
 80242b8:	2000cf72 	.word	0x2000cf72

080242bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80242bc:	4b07      	ldr	r3, [pc, #28]	; (80242dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80242be:	b510      	push	{r4, lr}
 80242c0:	781b      	ldrb	r3, [r3, #0]
 80242c2:	2b01      	cmp	r3, #1
 80242c4:	d108      	bne.n	80242d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80242c6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80242ca:	f9b0 4000 	ldrsh.w	r4, [r0]
 80242ce:	8003      	strh	r3, [r0, #0]
 80242d0:	8893      	ldrh	r3, [r2, #4]
 80242d2:	3b01      	subs	r3, #1
 80242d4:	1b1b      	subs	r3, r3, r4
 80242d6:	800b      	strh	r3, [r1, #0]
 80242d8:	bd10      	pop	{r4, pc}
 80242da:	bf00      	nop
 80242dc:	2000cf6e 	.word	0x2000cf6e

080242e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80242e0:	4b0a      	ldr	r3, [pc, #40]	; (802430c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x2c>)
 80242e2:	b513      	push	{r0, r1, r4, lr}
 80242e4:	f9b3 4000 	ldrsh.w	r4, [r3]
 80242e8:	4b09      	ldr	r3, [pc, #36]	; (8024310 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x30>)
 80242ea:	f8ad 4004 	strh.w	r4, [sp, #4]
 80242ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80242f2:	2300      	movs	r3, #0
 80242f4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80242f8:	466a      	mov	r2, sp
 80242fa:	f8ad 3000 	strh.w	r3, [sp]
 80242fe:	f8ad 3002 	strh.w	r3, [sp, #2]
 8024302:	f7ff ffdb 	bl	80242bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8024306:	b002      	add	sp, #8
 8024308:	bd10      	pop	{r4, pc}
 802430a:	bf00      	nop
 802430c:	2000cf6a 	.word	0x2000cf6a
 8024310:	2000cf6c 	.word	0x2000cf6c

08024314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 8024314:	4b0b      	ldr	r3, [pc, #44]	; (8024344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 8024316:	781b      	ldrb	r3, [r3, #0]
 8024318:	2b01      	cmp	r3, #1
 802431a:	d111      	bne.n	8024340 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 802431c:	680b      	ldr	r3, [r1, #0]
 802431e:	ed90 7a00 	vldr	s14, [r0]
 8024322:	6003      	str	r3, [r0, #0]
 8024324:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8024328:	eddf 6a07 	vldr	s13, [pc, #28]	; 8024348 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 802432c:	ee07 3a90 	vmov	s15, r3
 8024330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024334:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8024338:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802433c:	edc1 7a00 	vstr	s15, [r1]
 8024340:	4770      	bx	lr
 8024342:	bf00      	nop
 8024344:	2000cf6e 	.word	0x2000cf6e
 8024348:	38d1b717 	.word	0x38d1b717

0802434c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 802434c:	4b0a      	ldr	r3, [pc, #40]	; (8024378 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 802434e:	460a      	mov	r2, r1
 8024350:	b510      	push	{r4, lr}
 8024352:	781b      	ldrb	r3, [r3, #0]
 8024354:	2b01      	cmp	r3, #1
 8024356:	d10d      	bne.n	8024374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8024358:	8881      	ldrh	r1, [r0, #4]
 802435a:	8803      	ldrh	r3, [r0, #0]
 802435c:	440b      	add	r3, r1
 802435e:	4601      	mov	r1, r0
 8024360:	3b01      	subs	r3, #1
 8024362:	f821 3b02 	strh.w	r3, [r1], #2
 8024366:	f7ff ffa9 	bl	80242bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 802436a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802436e:	88c2      	ldrh	r2, [r0, #6]
 8024370:	80c3      	strh	r3, [r0, #6]
 8024372:	8082      	strh	r2, [r0, #4]
 8024374:	bd10      	pop	{r4, pc}
 8024376:	bf00      	nop
 8024378:	2000cf6e 	.word	0x2000cf6e

0802437c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 802437c:	4b0a      	ldr	r3, [pc, #40]	; (80243a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 802437e:	b507      	push	{r0, r1, r2, lr}
 8024380:	f9b3 1000 	ldrsh.w	r1, [r3]
 8024384:	4b09      	ldr	r3, [pc, #36]	; (80243ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x30>)
 8024386:	f8ad 1004 	strh.w	r1, [sp, #4]
 802438a:	4669      	mov	r1, sp
 802438c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8024390:	2300      	movs	r3, #0
 8024392:	f8ad 2006 	strh.w	r2, [sp, #6]
 8024396:	f8ad 3000 	strh.w	r3, [sp]
 802439a:	f8ad 3002 	strh.w	r3, [sp, #2]
 802439e:	f7ff ffd5 	bl	802434c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80243a2:	b003      	add	sp, #12
 80243a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80243a8:	2000cf6a 	.word	0x2000cf6a
 80243ac:	2000cf6c 	.word	0x2000cf6c

080243b0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80243b0:	4b03      	ldr	r3, [pc, #12]	; (80243c0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80243b2:	6818      	ldr	r0, [r3, #0]
 80243b4:	b110      	cbz	r0, 80243bc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80243b6:	6803      	ldr	r3, [r0, #0]
 80243b8:	699b      	ldr	r3, [r3, #24]
 80243ba:	4718      	bx	r3
 80243bc:	4770      	bx	lr
 80243be:	bf00      	nop
 80243c0:	2000cff0 	.word	0x2000cff0

080243c4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80243c4:	4770      	bx	lr
	...

080243c8 <_ZN8touchgfx11Application4drawEv>:
 80243c8:	4b0b      	ldr	r3, [pc, #44]	; (80243f8 <_ZN8touchgfx11Application4drawEv+0x30>)
 80243ca:	b507      	push	{r0, r1, r2, lr}
 80243cc:	f9b3 1000 	ldrsh.w	r1, [r3]
 80243d0:	4b0a      	ldr	r3, [pc, #40]	; (80243fc <_ZN8touchgfx11Application4drawEv+0x34>)
 80243d2:	f8ad 1004 	strh.w	r1, [sp, #4]
 80243d6:	4669      	mov	r1, sp
 80243d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80243dc:	2300      	movs	r3, #0
 80243de:	f8ad 3000 	strh.w	r3, [sp]
 80243e2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80243e6:	6803      	ldr	r3, [r0, #0]
 80243e8:	f8ad 2006 	strh.w	r2, [sp, #6]
 80243ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80243ee:	4798      	blx	r3
 80243f0:	b003      	add	sp, #12
 80243f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80243f6:	bf00      	nop
 80243f8:	2000cf6a 	.word	0x2000cf6a
 80243fc:	2000cf6c 	.word	0x2000cf6c

08024400 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8024400:	4b03      	ldr	r3, [pc, #12]	; (8024410 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8024402:	6818      	ldr	r0, [r3, #0]
 8024404:	b110      	cbz	r0, 802440c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8024406:	6803      	ldr	r3, [r0, #0]
 8024408:	69db      	ldr	r3, [r3, #28]
 802440a:	4718      	bx	r3
 802440c:	4770      	bx	lr
 802440e:	bf00      	nop
 8024410:	2000cff0 	.word	0x2000cff0

08024414 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8024414:	4b03      	ldr	r3, [pc, #12]	; (8024424 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8024416:	6818      	ldr	r0, [r3, #0]
 8024418:	b110      	cbz	r0, 8024420 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 802441a:	6803      	ldr	r3, [r0, #0]
 802441c:	6a1b      	ldr	r3, [r3, #32]
 802441e:	4718      	bx	r3
 8024420:	4770      	bx	lr
 8024422:	bf00      	nop
 8024424:	2000cff0 	.word	0x2000cff0

08024428 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8024428:	4b03      	ldr	r3, [pc, #12]	; (8024438 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 802442a:	6818      	ldr	r0, [r3, #0]
 802442c:	b110      	cbz	r0, 8024434 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 802442e:	6803      	ldr	r3, [r0, #0]
 8024430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024432:	4718      	bx	r3
 8024434:	4770      	bx	lr
 8024436:	bf00      	nop
 8024438:	2000cff0 	.word	0x2000cff0

0802443c <_ZN8touchgfx11Application15handleTickEventEv>:
 802443c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024440:	4d3b      	ldr	r5, [pc, #236]	; (8024530 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8024442:	4604      	mov	r4, r0
 8024444:	6828      	ldr	r0, [r5, #0]
 8024446:	2800      	cmp	r0, #0
 8024448:	d046      	beq.n	80244d8 <_ZN8touchgfx11Application15handleTickEventEv+0x9c>
 802444a:	7a03      	ldrb	r3, [r0, #8]
 802444c:	2b00      	cmp	r3, #0
 802444e:	d143      	bne.n	80244d8 <_ZN8touchgfx11Application15handleTickEventEv+0x9c>
 8024450:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8024454:	6803      	ldr	r3, [r0, #0]
 8024456:	689b      	ldr	r3, [r3, #8]
 8024458:	e03b      	b.n	80244d2 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 802445a:	3b01      	subs	r3, #1
 802445c:	f04f 0c00 	mov.w	ip, #0
 8024460:	1c5a      	adds	r2, r3, #1
 8024462:	d031      	beq.n	80244c8 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 8024464:	18e2      	adds	r2, r4, r3
 8024466:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
 802446a:	bb59      	cbnz	r1, 80244c4 <_ZN8touchgfx11Application15handleTickEventEv+0x88>
 802446c:	b298      	uxth	r0, r3
 802446e:	1d25      	adds	r5, r4, #4
 8024470:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8024474:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8024478:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 802447c:	428a      	cmp	r2, r1
 802447e:	dd14      	ble.n	80244aa <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 8024480:	682e      	ldr	r6, [r5, #0]
 8024482:	45b0      	cmp	r8, r6
 8024484:	d106      	bne.n	8024494 <_ZN8touchgfx11Application15handleTickEventEv+0x58>
 8024486:	46ae      	mov	lr, r5
 8024488:	460e      	mov	r6, r1
 802448a:	2e1e      	cmp	r6, #30
 802448c:	dd05      	ble.n	802449a <_ZN8touchgfx11Application15handleTickEventEv+0x5e>
 802448e:	3a01      	subs	r2, #1
 8024490:	f8a4 2084 	strh.w	r2, [r4, #132]	; 0x84
 8024494:	3101      	adds	r1, #1
 8024496:	3504      	adds	r5, #4
 8024498:	e7ee      	b.n	8024478 <_ZN8touchgfx11Application15handleTickEventEv+0x3c>
 802449a:	3601      	adds	r6, #1
 802449c:	f8de 7004 	ldr.w	r7, [lr, #4]
 80244a0:	42b2      	cmp	r2, r6
 80244a2:	f84e 7b04 	str.w	r7, [lr], #4
 80244a6:	dcf0      	bgt.n	802448a <_ZN8touchgfx11Application15handleTickEventEv+0x4e>
 80244a8:	e7f1      	b.n	802448e <_ZN8touchgfx11Application15handleTickEventEv+0x52>
 80244aa:	4290      	cmp	r0, r2
 80244ac:	da07      	bge.n	80244be <_ZN8touchgfx11Application15handleTickEventEv+0x82>
 80244ae:	1821      	adds	r1, r4, r0
 80244b0:	3001      	adds	r0, #1
 80244b2:	f891 5089 	ldrb.w	r5, [r1, #137]	; 0x89
 80244b6:	b280      	uxth	r0, r0
 80244b8:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 80244bc:	e7f5      	b.n	80244aa <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 80244be:	4422      	add	r2, r4
 80244c0:	f882 c088 	strb.w	ip, [r2, #136]	; 0x88
 80244c4:	3b01      	subs	r3, #1
 80244c6:	e7cb      	b.n	8024460 <_ZN8touchgfx11Application15handleTickEventEv+0x24>
 80244c8:	4b1a      	ldr	r3, [pc, #104]	; (8024534 <_ZN8touchgfx11Application15handleTickEventEv+0xf8>)
 80244ca:	6818      	ldr	r0, [r3, #0]
 80244cc:	b368      	cbz	r0, 802452a <_ZN8touchgfx11Application15handleTickEventEv+0xee>
 80244ce:	6803      	ldr	r3, [r0, #0]
 80244d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80244d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80244d6:	4718      	bx	r3
 80244d8:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 80244dc:	b913      	cbnz	r3, 80244e4 <_ZN8touchgfx11Application15handleTickEventEv+0xa8>
 80244de:	b108      	cbz	r0, 80244e4 <_ZN8touchgfx11Application15handleTickEventEv+0xa8>
 80244e0:	7a03      	ldrb	r3, [r0, #8]
 80244e2:	b9a3      	cbnz	r3, 802450e <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 80244e4:	eba4 0584 	sub.w	r5, r4, r4, lsl #2
 80244e8:	f104 0788 	add.w	r7, r4, #136	; 0x88
 80244ec:	2600      	movs	r6, #0
 80244ee:	f5a5 7508 	sub.w	r5, r5, #544	; 0x220
 80244f2:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 80244f6:	429e      	cmp	r6, r3
 80244f8:	daaf      	bge.n	802445a <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 80244fa:	f817 3b01 	ldrb.w	r3, [r7], #1
 80244fe:	b123      	cbz	r3, 802450a <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 8024500:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 8024504:	6803      	ldr	r3, [r0, #0]
 8024506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8024508:	4798      	blx	r3
 802450a:	3601      	adds	r6, #1
 802450c:	e7f1      	b.n	80244f2 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 802450e:	4b09      	ldr	r3, [pc, #36]	; (8024534 <_ZN8touchgfx11Application15handleTickEventEv+0xf8>)
 8024510:	6818      	ldr	r0, [r3, #0]
 8024512:	b110      	cbz	r0, 802451a <_ZN8touchgfx11Application15handleTickEventEv+0xde>
 8024514:	6803      	ldr	r3, [r0, #0]
 8024516:	691b      	ldr	r3, [r3, #16]
 8024518:	4798      	blx	r3
 802451a:	6828      	ldr	r0, [r5, #0]
 802451c:	6803      	ldr	r3, [r0, #0]
 802451e:	68db      	ldr	r3, [r3, #12]
 8024520:	4798      	blx	r3
 8024522:	2301      	movs	r3, #1
 8024524:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8024528:	e7dc      	b.n	80244e4 <_ZN8touchgfx11Application15handleTickEventEv+0xa8>
 802452a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802452e:	bf00      	nop
 8024530:	2000cff4 	.word	0x2000cff4
 8024534:	2000cff0 	.word	0x2000cff0

08024538 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8024538:	b570      	push	{r4, r5, r6, lr}
 802453a:	4606      	mov	r6, r0
 802453c:	460c      	mov	r4, r1
 802453e:	b929      	cbnz	r1, 802454c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8024540:	4b0c      	ldr	r3, [pc, #48]	; (8024574 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8024542:	2163      	movs	r1, #99	; 0x63
 8024544:	4a0c      	ldr	r2, [pc, #48]	; (8024578 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8024546:	480d      	ldr	r0, [pc, #52]	; (802457c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8024548:	f006 fdd6 	bl	802b0f8 <__assert_func>
 802454c:	2300      	movs	r3, #0
 802454e:	4d0c      	ldr	r5, [pc, #48]	; (8024580 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8024550:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8024554:	6828      	ldr	r0, [r5, #0]
 8024556:	b110      	cbz	r0, 802455e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8024558:	6803      	ldr	r3, [r0, #0]
 802455a:	695b      	ldr	r3, [r3, #20]
 802455c:	4798      	blx	r3
 802455e:	602c      	str	r4, [r5, #0]
 8024560:	4620      	mov	r0, r4
 8024562:	6823      	ldr	r3, [r4, #0]
 8024564:	68db      	ldr	r3, [r3, #12]
 8024566:	4798      	blx	r3
 8024568:	6833      	ldr	r3, [r6, #0]
 802456a:	4630      	mov	r0, r6
 802456c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802456e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024572:	4718      	bx	r3
 8024574:	0802eedb 	.word	0x0802eedb
 8024578:	0802efcc 	.word	0x0802efcc
 802457c:	0802eee5 	.word	0x0802eee5
 8024580:	2000cff0 	.word	0x2000cff0

08024584 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8024584:	b570      	push	{r4, r5, r6, lr}
 8024586:	f9b1 4000 	ldrsh.w	r4, [r1]
 802458a:	f9b0 5000 	ldrsh.w	r5, [r0]
 802458e:	42ac      	cmp	r4, r5
 8024590:	db18      	blt.n	80245c4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8024592:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8024596:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802459a:	429a      	cmp	r2, r3
 802459c:	db12      	blt.n	80245c4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 802459e:	8886      	ldrh	r6, [r0, #4]
 80245a0:	4435      	add	r5, r6
 80245a2:	888e      	ldrh	r6, [r1, #4]
 80245a4:	4434      	add	r4, r6
 80245a6:	b22d      	sxth	r5, r5
 80245a8:	b224      	sxth	r4, r4
 80245aa:	42a5      	cmp	r5, r4
 80245ac:	db0a      	blt.n	80245c4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80245ae:	88c0      	ldrh	r0, [r0, #6]
 80245b0:	4418      	add	r0, r3
 80245b2:	88cb      	ldrh	r3, [r1, #6]
 80245b4:	441a      	add	r2, r3
 80245b6:	b200      	sxth	r0, r0
 80245b8:	b212      	sxth	r2, r2
 80245ba:	4290      	cmp	r0, r2
 80245bc:	bfb4      	ite	lt
 80245be:	2000      	movlt	r0, #0
 80245c0:	2001      	movge	r0, #1
 80245c2:	bd70      	pop	{r4, r5, r6, pc}
 80245c4:	2000      	movs	r0, #0
 80245c6:	bd70      	pop	{r4, r5, r6, pc}

080245c8 <_ZN8touchgfx11Application11getInstanceEv>:
 80245c8:	4b01      	ldr	r3, [pc, #4]	; (80245d0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80245ca:	6818      	ldr	r0, [r3, #0]
 80245cc:	4770      	bx	lr
 80245ce:	bf00      	nop
 80245d0:	2000cff8 	.word	0x2000cff8

080245d4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 80245d4:	b538      	push	{r3, r4, r5, lr}
 80245d6:	2400      	movs	r4, #0
 80245d8:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 80245dc:	b2a2      	uxth	r2, r4
 80245de:	429a      	cmp	r2, r3
 80245e0:	da0e      	bge.n	8024600 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 80245e2:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 80245e6:	3401      	adds	r4, #1
 80245e8:	686d      	ldr	r5, [r5, #4]
 80245ea:	428d      	cmp	r5, r1
 80245ec:	d1f6      	bne.n	80245dc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x8>
 80245ee:	4410      	add	r0, r2
 80245f0:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 80245f4:	2bff      	cmp	r3, #255	; 0xff
 80245f6:	d016      	beq.n	8024626 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x52>
 80245f8:	3301      	adds	r3, #1
 80245fa:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 80245fe:	bd38      	pop	{r3, r4, r5, pc}
 8024600:	2b1f      	cmp	r3, #31
 8024602:	dd06      	ble.n	8024612 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x3e>
 8024604:	4b08      	ldr	r3, [pc, #32]	; (8024628 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x54>)
 8024606:	f240 1121 	movw	r1, #289	; 0x121
 802460a:	4a08      	ldr	r2, [pc, #32]	; (802462c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 802460c:	4808      	ldr	r0, [pc, #32]	; (8024630 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 802460e:	f006 fd73 	bl	802b0f8 <__assert_func>
 8024612:	18c2      	adds	r2, r0, r3
 8024614:	2401      	movs	r4, #1
 8024616:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 802461a:	191a      	adds	r2, r3, r4
 802461c:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 8024620:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8024624:	6041      	str	r1, [r0, #4]
 8024626:	bd38      	pop	{r3, r4, r5, pc}
 8024628:	0802ef0f 	.word	0x0802ef0f
 802462c:	0802f010 	.word	0x0802f010
 8024630:	0802eee5 	.word	0x0802eee5

08024634 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8024634:	2300      	movs	r3, #0
 8024636:	f100 0288 	add.w	r2, r0, #136	; 0x88
 802463a:	30a8      	adds	r0, #168	; 0xa8
 802463c:	f820 3c24 	strh.w	r3, [r0, #-36]
 8024640:	f802 3b01 	strb.w	r3, [r2], #1
 8024644:	4282      	cmp	r2, r0
 8024646:	d1fb      	bne.n	8024640 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8024648:	4770      	bx	lr

0802464a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 802464a:	4603      	mov	r3, r0
 802464c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8024650:	2200      	movs	r2, #0
 8024652:	801a      	strh	r2, [r3, #0]
 8024654:	3308      	adds	r3, #8
 8024656:	f823 2c06 	strh.w	r2, [r3, #-6]
 802465a:	f823 2c04 	strh.w	r2, [r3, #-4]
 802465e:	f823 2c02 	strh.w	r2, [r3, #-2]
 8024662:	428b      	cmp	r3, r1
 8024664:	d1f5      	bne.n	8024652 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8024666:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 802466a:	4770      	bx	lr

0802466c <_ZN8touchgfx11ApplicationC1Ev>:
 802466c:	b570      	push	{r4, r5, r6, lr}
 802466e:	4b16      	ldr	r3, [pc, #88]	; (80246c8 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8024670:	2500      	movs	r5, #0
 8024672:	4604      	mov	r4, r0
 8024674:	30a8      	adds	r0, #168	; 0xa8
 8024676:	f840 3ca8 	str.w	r3, [r0, #-168]
 802467a:	f820 5c24 	strh.w	r5, [r0, #-36]
 802467e:	f7ff ffe4 	bl	802464a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8024682:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8024686:	f7ff ffe0 	bl	802464a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 802468a:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 802468e:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 8024692:	490e      	ldr	r1, [pc, #56]	; (80246cc <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8024694:	480e      	ldr	r0, [pc, #56]	; (80246d0 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8024696:	f005 fe45 	bl	802a324 <CRC_Lock>
 802469a:	4e0e      	ldr	r6, [pc, #56]	; (80246d4 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 802469c:	4b0e      	ldr	r3, [pc, #56]	; (80246d8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 802469e:	b158      	cbz	r0, 80246b8 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 80246a0:	801d      	strh	r5, [r3, #0]
 80246a2:	2300      	movs	r3, #0
 80246a4:	4a0d      	ldr	r2, [pc, #52]	; (80246dc <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80246a6:	4620      	mov	r0, r4
 80246a8:	6013      	str	r3, [r2, #0]
 80246aa:	4a0d      	ldr	r2, [pc, #52]	; (80246e0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80246ac:	6033      	str	r3, [r6, #0]
 80246ae:	6013      	str	r3, [r2, #0]
 80246b0:	f7ff ffc0 	bl	8024634 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80246b4:	4620      	mov	r0, r4
 80246b6:	bd70      	pop	{r4, r5, r6, pc}
 80246b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80246bc:	2002      	movs	r0, #2
 80246be:	801a      	strh	r2, [r3, #0]
 80246c0:	6030      	str	r0, [r6, #0]
 80246c2:	f000 ffbb 	bl	802563c <_ZN8touchgfx6Screen4drawEv>
 80246c6:	e7ec      	b.n	80246a2 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 80246c8:	0802ef98 	.word	0x0802ef98
 80246cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80246d0:	f407a5c2 	.word	0xf407a5c2
 80246d4:	2000cff0 	.word	0x2000cff0
 80246d8:	2000006e 	.word	0x2000006e
 80246dc:	2000cff8 	.word	0x2000cff8
 80246e0:	2000cff4 	.word	0x2000cff4

080246e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80246e4:	2300      	movs	r3, #0
 80246e6:	8003      	strh	r3, [r0, #0]
 80246e8:	8043      	strh	r3, [r0, #2]
 80246ea:	8083      	strh	r3, [r0, #4]
 80246ec:	80c3      	strh	r3, [r0, #6]
 80246ee:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 80246f2:	429a      	cmp	r2, r3
 80246f4:	b530      	push	{r4, r5, lr}
 80246f6:	da12      	bge.n	802471e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80246f8:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 80246fc:	3b01      	subs	r3, #1
 80246fe:	6825      	ldr	r5, [r4, #0]
 8024700:	b29b      	uxth	r3, r3
 8024702:	6005      	str	r5, [r0, #0]
 8024704:	429a      	cmp	r2, r3
 8024706:	6865      	ldr	r5, [r4, #4]
 8024708:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 802470c:	6045      	str	r5, [r0, #4]
 802470e:	da06      	bge.n	802471e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8024710:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8024714:	681d      	ldr	r5, [r3, #0]
 8024716:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 802471a:	685d      	ldr	r5, [r3, #4]
 802471c:	6065      	str	r5, [r4, #4]
 802471e:	bd30      	pop	{r4, r5, pc}

08024720 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8024720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024722:	e88d 0006 	stmia.w	sp, {r1, r2}
 8024726:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 802472a:	4604      	mov	r4, r0
 802472c:	466b      	mov	r3, sp
 802472e:	2a07      	cmp	r2, #7
 8024730:	dd06      	ble.n	8024740 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8024732:	4b09      	ldr	r3, [pc, #36]	; (8024758 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8024734:	f44f 7102 	mov.w	r1, #520	; 0x208
 8024738:	4a08      	ldr	r2, [pc, #32]	; (802475c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 802473a:	4809      	ldr	r0, [pc, #36]	; (8024760 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 802473c:	f006 fcdc 	bl	802b0f8 <__assert_func>
 8024740:	1c51      	adds	r1, r2, #1
 8024742:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8024746:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 802474a:	cb03      	ldmia	r3!, {r0, r1}
 802474c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8024750:	6069      	str	r1, [r5, #4]
 8024752:	b003      	add	sp, #12
 8024754:	bd30      	pop	{r4, r5, pc}
 8024756:	bf00      	nop
 8024758:	0802ef37 	.word	0x0802ef37
 802475c:	0802f055 	.word	0x0802f055
 8024760:	0802ef66 	.word	0x0802ef66

08024764 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8024764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024768:	b089      	sub	sp, #36	; 0x24
 802476a:	4606      	mov	r6, r0
 802476c:	4668      	mov	r0, sp
 802476e:	466c      	mov	r4, sp
 8024770:	e88d 0006 	stmia.w	sp, {r1, r2}
 8024774:	f7ee f81a 	bl	80127ac <_ZNK8touchgfx4Rect7isEmptyEv>
 8024778:	bbb0      	cbnz	r0, 80247e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 802477a:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 802477e:	b1fd      	cbz	r5, 80247c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8024780:	3d01      	subs	r5, #1
 8024782:	af04      	add	r7, sp, #16
 8024784:	f04f 090a 	mov.w	r9, #10
 8024788:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 802478c:	ab02      	add	r3, sp, #8
 802478e:	fa1f f885 	uxth.w	r8, r5
 8024792:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8024796:	6851      	ldr	r1, [r2, #4]
 8024798:	c303      	stmia	r3!, {r0, r1}
 802479a:	4621      	mov	r1, r4
 802479c:	a802      	add	r0, sp, #8
 802479e:	f7ff fef1 	bl	8024584 <_ZNK8touchgfx4Rect8includesERKS0_>
 80247a2:	bb08      	cbnz	r0, 80247e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80247a4:	a902      	add	r1, sp, #8
 80247a6:	4620      	mov	r0, r4
 80247a8:	f7ff feec 	bl	8024584 <_ZNK8touchgfx4Rect8includesERKS0_>
 80247ac:	b1f8      	cbz	r0, 80247ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 80247ae:	4642      	mov	r2, r8
 80247b0:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80247b4:	a806      	add	r0, sp, #24
 80247b6:	f7ff ff95 	bl	80246e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80247ba:	f115 35ff 	adds.w	r5, r5, #4294967295
 80247be:	d2e3      	bcs.n	8024788 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 80247c0:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 80247c4:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 80247c8:	2b08      	cmp	r3, #8
 80247ca:	d108      	bne.n	80247de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80247cc:	4629      	mov	r1, r5
 80247ce:	a806      	add	r0, sp, #24
 80247d0:	2207      	movs	r2, #7
 80247d2:	f7ff ff87 	bl	80246e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80247d6:	a906      	add	r1, sp, #24
 80247d8:	4620      	mov	r0, r4
 80247da:	f7ed ff5b 	bl	8012694 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80247de:	4628      	mov	r0, r5
 80247e0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80247e4:	f7ff ff9c 	bl	8024720 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80247e8:	b009      	add	sp, #36	; 0x24
 80247ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80247ee:	4621      	mov	r1, r4
 80247f0:	a802      	add	r0, sp, #8
 80247f2:	f7ed fe8c 	bl	801250e <_ZNK8touchgfx4Rect9intersectERKS0_>
 80247f6:	b150      	cbz	r0, 802480e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 80247f8:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80247fc:	a806      	add	r0, sp, #24
 80247fe:	4642      	mov	r2, r8
 8024800:	f7ff ff70 	bl	80246e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8024804:	a902      	add	r1, sp, #8
 8024806:	4620      	mov	r0, r4
 8024808:	f7ed ff44 	bl	8012694 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 802480c:	e7d5      	b.n	80247ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 802480e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024812:	e887 0003 	stmia.w	r7, {r0, r1}
 8024816:	a902      	add	r1, sp, #8
 8024818:	4638      	mov	r0, r7
 802481a:	f7ed ff3b 	bl	8012694 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 802481e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8024822:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8024826:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 802482a:	fb13 f302 	smulbb	r3, r3, r2
 802482e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8024832:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8024836:	fb11 f102 	smulbb	r1, r1, r2
 802483a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 802483e:	fb09 f303 	mul.w	r3, r9, r3
 8024842:	fb12 1100 	smlabb	r1, r2, r0, r1
 8024846:	220b      	movs	r2, #11
 8024848:	434a      	muls	r2, r1
 802484a:	4293      	cmp	r3, r2
 802484c:	dab5      	bge.n	80247ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 802484e:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8024852:	a806      	add	r0, sp, #24
 8024854:	4642      	mov	r2, r8
 8024856:	f7ff ff45 	bl	80246e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 802485a:	e897 0003 	ldmia.w	r7, {r0, r1}
 802485e:	e884 0003 	stmia.w	r4, {r0, r1}
 8024862:	e7aa      	b.n	80247ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08024864 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8024864:	4b1b      	ldr	r3, [pc, #108]	; (80248d4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x70>)
 8024866:	b530      	push	{r4, r5, lr}
 8024868:	460c      	mov	r4, r1
 802486a:	f9b3 1000 	ldrsh.w	r1, [r3]
 802486e:	4b1a      	ldr	r3, [pc, #104]	; (80248d8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x74>)
 8024870:	b085      	sub	sp, #20
 8024872:	4605      	mov	r5, r0
 8024874:	6820      	ldr	r0, [r4, #0]
 8024876:	f9b3 2000 	ldrsh.w	r2, [r3]
 802487a:	2300      	movs	r3, #0
 802487c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8024880:	f8ad 3000 	strh.w	r3, [sp]
 8024884:	6861      	ldr	r1, [r4, #4]
 8024886:	f8ad 3002 	strh.w	r3, [sp, #2]
 802488a:	ab02      	add	r3, sp, #8
 802488c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8024890:	c303      	stmia	r3!, {r0, r1}
 8024892:	4669      	mov	r1, sp
 8024894:	a802      	add	r0, sp, #8
 8024896:	f7ed fe81 	bl	801259c <_ZN8touchgfx4RectaNERKS0_>
 802489a:	ab02      	add	r3, sp, #8
 802489c:	cb03      	ldmia	r3!, {r0, r1}
 802489e:	4b0f      	ldr	r3, [pc, #60]	; (80248dc <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 80248a0:	6020      	str	r0, [r4, #0]
 80248a2:	6818      	ldr	r0, [r3, #0]
 80248a4:	6061      	str	r1, [r4, #4]
 80248a6:	b138      	cbz	r0, 80248b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 80248a8:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 80248ac:	b133      	cbz	r3, 80248bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x58>
 80248ae:	6821      	ldr	r1, [r4, #0]
 80248b0:	4628      	mov	r0, r5
 80248b2:	6862      	ldr	r2, [r4, #4]
 80248b4:	f7ff ff56 	bl	8024764 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80248b8:	b005      	add	sp, #20
 80248ba:	bd30      	pop	{r4, r5, pc}
 80248bc:	6803      	ldr	r3, [r0, #0]
 80248be:	4621      	mov	r1, r4
 80248c0:	689b      	ldr	r3, [r3, #8]
 80248c2:	4798      	blx	r3
 80248c4:	4b06      	ldr	r3, [pc, #24]	; (80248e0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 80248c6:	4621      	mov	r1, r4
 80248c8:	6818      	ldr	r0, [r3, #0]
 80248ca:	6803      	ldr	r3, [r0, #0]
 80248cc:	695b      	ldr	r3, [r3, #20]
 80248ce:	4798      	blx	r3
 80248d0:	e7f2      	b.n	80248b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 80248d2:	bf00      	nop
 80248d4:	2000cf6a 	.word	0x2000cf6a
 80248d8:	2000cf6c 	.word	0x2000cf6c
 80248dc:	2000cff0 	.word	0x2000cff0
 80248e0:	2000cf78 	.word	0x2000cf78

080248e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80248e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80248e8:	4604      	mov	r4, r0
 80248ea:	b09a      	sub	sp, #104	; 0x68
 80248ec:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 80248f0:	b129      	cbz	r1, 80248fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80248f2:	2300      	movs	r3, #0
 80248f4:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80248f8:	b01a      	add	sp, #104	; 0x68
 80248fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80248fe:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	; 0xe8
 8024902:	2b00      	cmp	r3, #0
 8024904:	d0f8      	beq.n	80248f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8024906:	4fc6      	ldr	r7, [pc, #792]	; (8024c20 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x33c>)
 8024908:	a809      	add	r0, sp, #36	; 0x24
 802490a:	f7ff fe9e 	bl	802464a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 802490e:	883d      	ldrh	r5, [r7, #0]
 8024910:	462e      	mov	r6, r5
 8024912:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8024916:	429e      	cmp	r6, r3
 8024918:	db10      	blt.n	802493c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x58>
 802491a:	462e      	mov	r6, r5
 802491c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8024920:	429e      	cmp	r6, r3
 8024922:	da17      	bge.n	8024954 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8024924:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8024928:	3601      	adds	r6, #1
 802492a:	4620      	mov	r0, r4
 802492c:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8024930:	b2b6      	uxth	r6, r6
 8024932:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8024936:	f7ff ff15 	bl	8024764 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 802493a:	e7ef      	b.n	802491c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38>
 802493c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8024940:	3601      	adds	r6, #1
 8024942:	a809      	add	r0, sp, #36	; 0x24
 8024944:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8024948:	b2b6      	uxth	r6, r6
 802494a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 802494e:	f7ff fee7 	bl	8024720 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8024952:	e7de      	b.n	8024912 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e>
 8024954:	4eb3      	ldr	r6, [pc, #716]	; (8024c24 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x340>)
 8024956:	6833      	ldr	r3, [r6, #0]
 8024958:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802495c:	2b01      	cmp	r3, #1
 802495e:	f040 80a5 	bne.w	8024aac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1c8>
 8024962:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8024966:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 802496a:	f04f 0900 	mov.w	r9, #0
 802496e:	33aa      	adds	r3, #170	; 0xaa
 8024970:	42a8      	cmp	r0, r5
 8024972:	f103 0308 	add.w	r3, r3, #8
 8024976:	dd0a      	ble.n	802498e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xaa>
 8024978:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 802497c:	3501      	adds	r5, #1
 802497e:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8024982:	440a      	add	r2, r1
 8024984:	b212      	sxth	r2, r2
 8024986:	4591      	cmp	r9, r2
 8024988:	bfb8      	it	lt
 802498a:	4691      	movlt	r9, r2
 802498c:	e7f0      	b.n	8024970 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x8c>
 802498e:	4ba6      	ldr	r3, [pc, #664]	; (8024c28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x344>)
 8024990:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 8024c34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x350>
 8024994:	881d      	ldrh	r5, [r3, #0]
 8024996:	2300      	movs	r3, #0
 8024998:	08ed      	lsrs	r5, r5, #3
 802499a:	f8ad 3014 	strh.w	r3, [sp, #20]
 802499e:	f8ad 3016 	strh.w	r3, [sp, #22]
 80249a2:	2d01      	cmp	r5, #1
 80249a4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80249a8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80249ac:	bfb8      	it	lt
 80249ae:	2501      	movlt	r5, #1
 80249b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80249b4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80249b8:	6830      	ldr	r0, [r6, #0]
 80249ba:	4413      	add	r3, r2
 80249bc:	b21b      	sxth	r3, r3
 80249be:	4599      	cmp	r9, r3
 80249c0:	6803      	ldr	r3, [r0, #0]
 80249c2:	dd49      	ble.n	8024a58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x174>
 80249c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80249c8:	4798      	blx	r3
 80249ca:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80249ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80249d2:	4413      	add	r3, r2
 80249d4:	b21b      	sxth	r3, r3
 80249d6:	18ea      	adds	r2, r5, r3
 80249d8:	4290      	cmp	r0, r2
 80249da:	f280 812f 	bge.w	8024c3c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x358>
 80249de:	4581      	cmp	r9, r0
 80249e0:	f340 812c 	ble.w	8024c3c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x358>
 80249e4:	4298      	cmp	r0, r3
 80249e6:	da02      	bge.n	80249ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10a>
 80249e8:	2b00      	cmp	r3, #0
 80249ea:	f300 812a 	bgt.w	8024c42 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x35e>
 80249ee:	6830      	ldr	r0, [r6, #0]
 80249f0:	2101      	movs	r1, #1
 80249f2:	6803      	ldr	r3, [r0, #0]
 80249f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80249f8:	4798      	blx	r3
 80249fa:	e7d9      	b.n	80249b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 80249fc:	4548      	cmp	r0, r9
 80249fe:	bfa8      	it	ge
 8024a00:	4648      	movge	r0, r9
 8024a02:	f9b8 2000 	ldrsh.w	r2, [r8]
 8024a06:	2100      	movs	r1, #0
 8024a08:	1ac0      	subs	r0, r0, r3
 8024a0a:	f8b7 a000 	ldrh.w	sl, [r7]
 8024a0e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8024a12:	f8ad 3016 	strh.w	r3, [sp, #22]
 8024a16:	f8ad 2018 	strh.w	r2, [sp, #24]
 8024a1a:	f8ad 001a 	strh.w	r0, [sp, #26]
 8024a1e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8024a22:	459a      	cmp	sl, r3
 8024a24:	dac4      	bge.n	80249b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 8024a26:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8024a2a:	ab07      	add	r3, sp, #28
 8024a2c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8024a30:	6851      	ldr	r1, [r2, #4]
 8024a32:	c303      	stmia	r3!, {r0, r1}
 8024a34:	a807      	add	r0, sp, #28
 8024a36:	a905      	add	r1, sp, #20
 8024a38:	f7ed fdb0 	bl	801259c <_ZN8touchgfx4RectaNERKS0_>
 8024a3c:	a807      	add	r0, sp, #28
 8024a3e:	f7ed feb5 	bl	80127ac <_ZNK8touchgfx4Rect7isEmptyEv>
 8024a42:	b920      	cbnz	r0, 8024a4e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16a>
 8024a44:	6823      	ldr	r3, [r4, #0]
 8024a46:	a907      	add	r1, sp, #28
 8024a48:	4620      	mov	r0, r4
 8024a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a4c:	4798      	blx	r3
 8024a4e:	f10a 0a01 	add.w	sl, sl, #1
 8024a52:	fa1f fa8a 	uxth.w	sl, sl
 8024a56:	e7e2      	b.n	8024a1e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x13a>
 8024a58:	69db      	ldr	r3, [r3, #28]
 8024a5a:	4798      	blx	r3
 8024a5c:	4b73      	ldr	r3, [pc, #460]	; (8024c2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x348>)
 8024a5e:	6818      	ldr	r0, [r3, #0]
 8024a60:	b148      	cbz	r0, 8024a76 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x192>
 8024a62:	6803      	ldr	r3, [r0, #0]
 8024a64:	689a      	ldr	r2, [r3, #8]
 8024a66:	6833      	ldr	r3, [r6, #0]
 8024a68:	f893 1076 	ldrb.w	r1, [r3, #118]	; 0x76
 8024a6c:	b109      	cbz	r1, 8024a72 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x18e>
 8024a6e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8024a70:	b901      	cbnz	r1, 8024a74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x190>
 8024a72:	6899      	ldr	r1, [r3, #8]
 8024a74:	4790      	blx	r2
 8024a76:	4b6e      	ldr	r3, [pc, #440]	; (8024c30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x34c>)
 8024a78:	781b      	ldrb	r3, [r3, #0]
 8024a7a:	2b00      	cmp	r3, #0
 8024a7c:	f43f af3c 	beq.w	80248f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8024a80:	2300      	movs	r3, #0
 8024a82:	883d      	ldrh	r5, [r7, #0]
 8024a84:	34ea      	adds	r4, #234	; 0xea
 8024a86:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8024a8a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8024a8e:	429d      	cmp	r5, r3
 8024a90:	f6bf af32 	bge.w	80248f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8024a94:	ab1a      	add	r3, sp, #104	; 0x68
 8024a96:	4620      	mov	r0, r4
 8024a98:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8024a9c:	3501      	adds	r5, #1
 8024a9e:	3b44      	subs	r3, #68	; 0x44
 8024aa0:	b2ad      	uxth	r5, r5
 8024aa2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8024aa6:	f7ff fe3b 	bl	8024720 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8024aaa:	e7ee      	b.n	8024a8a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 8024aac:	2b02      	cmp	r3, #2
 8024aae:	f040 809f 	bne.w	8024bf0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x30c>
 8024ab2:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8024c38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x354>
 8024ab6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8024aba:	429d      	cmp	r5, r3
 8024abc:	dace      	bge.n	8024a5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x178>
 8024abe:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8024ac2:	ab03      	add	r3, sp, #12
 8024ac4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8024ac8:	6851      	ldr	r1, [r2, #4]
 8024aca:	c303      	stmia	r3!, {r0, r1}
 8024acc:	f899 3000 	ldrb.w	r3, [r9]
 8024ad0:	2b01      	cmp	r3, #1
 8024ad2:	d102      	bne.n	8024ada <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f6>
 8024ad4:	a803      	add	r0, sp, #12
 8024ad6:	f7ff fc51 	bl	802437c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024ada:	a803      	add	r0, sp, #12
 8024adc:	f7ed fe66 	bl	80127ac <_ZNK8touchgfx4Rect7isEmptyEv>
 8024ae0:	2800      	cmp	r0, #0
 8024ae2:	d17e      	bne.n	8024be2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2fe>
 8024ae4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8024ae8:	4680      	mov	r8, r0
 8024aea:	f8ad 001a 	strh.w	r0, [sp, #26]
 8024aee:	f8ad 3014 	strh.w	r3, [sp, #20]
 8024af2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8024af6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8024afa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8024afe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8024b02:	f8bd a012 	ldrh.w	sl, [sp, #18]
 8024b06:	f8bd e00e 	ldrh.w	lr, [sp, #14]
 8024b0a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8024b0e:	44d6      	add	lr, sl
 8024b10:	6830      	ldr	r0, [r6, #0]
 8024b12:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8024b16:	ebae 0e02 	sub.w	lr, lr, r2
 8024b1a:	f8d0 c000 	ldr.w	ip, [r0]
 8024b1e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8024b22:	fa1f fe8e 	uxth.w	lr, lr
 8024b26:	f8cd e000 	str.w	lr, [sp]
 8024b2a:	f8dc a084 	ldr.w	sl, [ip, #132]	; 0x84
 8024b2e:	47d0      	blx	sl
 8024b30:	f899 3000 	ldrb.w	r3, [r9]
 8024b34:	f8ad 001a 	strh.w	r0, [sp, #26]
 8024b38:	2b01      	cmp	r3, #1
 8024b3a:	d155      	bne.n	8024be8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x304>
 8024b3c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8024b40:	f10d 010a 	add.w	r1, sp, #10
 8024b44:	f8ad 801c 	strh.w	r8, [sp, #28]
 8024b48:	f8ad 3008 	strh.w	r3, [sp, #8]
 8024b4c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8024b50:	f8ad 801e 	strh.w	r8, [sp, #30]
 8024b54:	3b01      	subs	r3, #1
 8024b56:	f8ad 8020 	strh.w	r8, [sp, #32]
 8024b5a:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8024b5e:	4418      	add	r0, r3
 8024b60:	f8ad 000a 	strh.w	r0, [sp, #10]
 8024b64:	a802      	add	r0, sp, #8
 8024b66:	f7ff fb95 	bl	8024294 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8024b6a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8024b6e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8024b72:	f10d 010a 	add.w	r1, sp, #10
 8024b76:	f8ad 301c 	strh.w	r3, [sp, #28]
 8024b7a:	a802      	add	r0, sp, #8
 8024b7c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8024b80:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024b84:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8024b88:	4413      	add	r3, r2
 8024b8a:	f8ad 3008 	strh.w	r3, [sp, #8]
 8024b8e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8024b92:	f8ad 300a 	strh.w	r3, [sp, #10]
 8024b96:	f7ff fb7d 	bl	8024294 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8024b9a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8024b9e:	a907      	add	r1, sp, #28
 8024ba0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8024ba4:	3301      	adds	r3, #1
 8024ba6:	1a9b      	subs	r3, r3, r2
 8024ba8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8024bac:	f8ad 3020 	strh.w	r3, [sp, #32]
 8024bb0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8024bb4:	1a9b      	subs	r3, r3, r2
 8024bb6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8024bba:	6823      	ldr	r3, [r4, #0]
 8024bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024bbe:	4620      	mov	r0, r4
 8024bc0:	4798      	blx	r3
 8024bc2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8024bc6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8024bca:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8024bce:	4413      	add	r3, r2
 8024bd0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8024bd4:	440a      	add	r2, r1
 8024bd6:	b21b      	sxth	r3, r3
 8024bd8:	b212      	sxth	r2, r2
 8024bda:	f8ad 3016 	strh.w	r3, [sp, #22]
 8024bde:	4293      	cmp	r3, r2
 8024be0:	db8f      	blt.n	8024b02 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x21e>
 8024be2:	3501      	adds	r5, #1
 8024be4:	b2ad      	uxth	r5, r5
 8024be6:	e766      	b.n	8024ab6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 8024be8:	6823      	ldr	r3, [r4, #0]
 8024bea:	a905      	add	r1, sp, #20
 8024bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024bee:	e7e6      	b.n	8024bbe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2da>
 8024bf0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8024bf4:	429d      	cmp	r5, r3
 8024bf6:	f6bf af31 	bge.w	8024a5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x178>
 8024bfa:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8024bfe:	ab07      	add	r3, sp, #28
 8024c00:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8024c04:	6851      	ldr	r1, [r2, #4]
 8024c06:	c303      	stmia	r3!, {r0, r1}
 8024c08:	a807      	add	r0, sp, #28
 8024c0a:	f7ed fdcf 	bl	80127ac <_ZNK8touchgfx4Rect7isEmptyEv>
 8024c0e:	b920      	cbnz	r0, 8024c1a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x336>
 8024c10:	6823      	ldr	r3, [r4, #0]
 8024c12:	a907      	add	r1, sp, #28
 8024c14:	4620      	mov	r0, r4
 8024c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024c18:	4798      	blx	r3
 8024c1a:	3501      	adds	r5, #1
 8024c1c:	b2ad      	uxth	r5, r5
 8024c1e:	e7e7      	b.n	8024bf0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x30c>
 8024c20:	2000006e 	.word	0x2000006e
 8024c24:	2000cf78 	.word	0x2000cf78
 8024c28:	2000cf6c 	.word	0x2000cf6c
 8024c2c:	2000cfec 	.word	0x2000cfec
 8024c30:	2000cf74 	.word	0x2000cf74
 8024c34:	2000cf6a 	.word	0x2000cf6a
 8024c38:	2000cf6e 	.word	0x2000cf6e
 8024c3c:	4298      	cmp	r0, r3
 8024c3e:	f6bf aedd 	bge.w	80249fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x118>
 8024c42:	4648      	mov	r0, r9
 8024c44:	e6dd      	b.n	8024a02 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x11e>
 8024c46:	bf00      	nop

08024c48 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8024c48:	2000      	movs	r0, #0
 8024c4a:	4770      	bx	lr

08024c4c <_ZNK8touchgfx4Font12getGSUBTableEv>:
 8024c4c:	2000      	movs	r0, #0
 8024c4e:	4770      	bx	lr

08024c50 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8024c50:	b508      	push	{r3, lr}
 8024c52:	6803      	ldr	r3, [r0, #0]
 8024c54:	68db      	ldr	r3, [r3, #12]
 8024c56:	4798      	blx	r3
 8024c58:	b140      	cbz	r0, 8024c6c <_ZNK8touchgfx4Font12getCharWidthEt+0x1c>
 8024c5a:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8024c5e:	7a83      	ldrb	r3, [r0, #10]
 8024c60:	2a00      	cmp	r2, #0
 8024c62:	bfb4      	ite	lt
 8024c64:	f44f 7080 	movlt.w	r0, #256	; 0x100
 8024c68:	2000      	movge	r0, #0
 8024c6a:	4318      	orrs	r0, r3
 8024c6c:	bd08      	pop	{r3, pc}
	...

08024c70 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8024c70:	b40e      	push	{r1, r2, r3}
 8024c72:	b533      	push	{r0, r1, r4, r5, lr}
 8024c74:	ab05      	add	r3, sp, #20
 8024c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8024c7a:	9301      	str	r3, [sp, #4]
 8024c7c:	4b0a      	ldr	r3, [pc, #40]	; (8024ca8 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 8024c7e:	685c      	ldr	r4, [r3, #4]
 8024c80:	f014 0f01 	tst.w	r4, #1
 8024c84:	ea4f 0464 	mov.w	r4, r4, asr #1
 8024c88:	bf1c      	itt	ne
 8024c8a:	681b      	ldrne	r3, [r3, #0]
 8024c8c:	5901      	ldrne	r1, [r0, r4]
 8024c8e:	4420      	add	r0, r4
 8024c90:	bf0c      	ite	eq
 8024c92:	681d      	ldreq	r5, [r3, #0]
 8024c94:	58cd      	ldrne	r5, [r1, r3]
 8024c96:	2100      	movs	r1, #0
 8024c98:	9b01      	ldr	r3, [sp, #4]
 8024c9a:	47a8      	blx	r5
 8024c9c:	b002      	add	sp, #8
 8024c9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024ca2:	b003      	add	sp, #12
 8024ca4:	4770      	bx	lr
 8024ca6:	bf00      	nop
 8024ca8:	20000058 	.word	0x20000058

08024cac <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8024cac:	b40c      	push	{r2, r3}
 8024cae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024cb0:	ab06      	add	r3, sp, #24
 8024cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8024cb6:	9301      	str	r3, [sp, #4]
 8024cb8:	4b09      	ldr	r3, [pc, #36]	; (8024ce0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 8024cba:	685c      	ldr	r4, [r3, #4]
 8024cbc:	f014 0f01 	tst.w	r4, #1
 8024cc0:	ea4f 0464 	mov.w	r4, r4, asr #1
 8024cc4:	bf1c      	itt	ne
 8024cc6:	681b      	ldrne	r3, [r3, #0]
 8024cc8:	5905      	ldrne	r5, [r0, r4]
 8024cca:	4420      	add	r0, r4
 8024ccc:	bf0c      	ite	eq
 8024cce:	681d      	ldreq	r5, [r3, #0]
 8024cd0:	58ed      	ldrne	r5, [r5, r3]
 8024cd2:	9b01      	ldr	r3, [sp, #4]
 8024cd4:	47a8      	blx	r5
 8024cd6:	b003      	add	sp, #12
 8024cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024cdc:	b002      	add	sp, #8
 8024cde:	4770      	bx	lr
 8024ce0:	20000058 	.word	0x20000058

08024ce4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8024ce4:	b40e      	push	{r1, r2, r3}
 8024ce6:	b530      	push	{r4, r5, lr}
 8024ce8:	b098      	sub	sp, #96	; 0x60
 8024cea:	4604      	mov	r4, r0
 8024cec:	ab1b      	add	r3, sp, #108	; 0x6c
 8024cee:	a802      	add	r0, sp, #8
 8024cf0:	f853 5b04 	ldr.w	r5, [r3], #4
 8024cf4:	9301      	str	r3, [sp, #4]
 8024cf6:	f001 f8e3 	bl	8025ec0 <_ZN8touchgfx12TextProviderC1Ev>
 8024cfa:	6823      	ldr	r3, [r4, #0]
 8024cfc:	4620      	mov	r0, r4
 8024cfe:	2401      	movs	r4, #1
 8024d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024d02:	4798      	blx	r3
 8024d04:	9a01      	ldr	r2, [sp, #4]
 8024d06:	4603      	mov	r3, r0
 8024d08:	4629      	mov	r1, r5
 8024d0a:	a802      	add	r0, sp, #8
 8024d0c:	f001 f8f5 	bl	8025efa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8024d10:	a802      	add	r0, sp, #8
 8024d12:	f001 f92b 	bl	8025f6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8024d16:	b138      	cbz	r0, 8024d28 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x44>
 8024d18:	280a      	cmp	r0, #10
 8024d1a:	a802      	add	r0, sp, #8
 8024d1c:	bf04      	itt	eq
 8024d1e:	3401      	addeq	r4, #1
 8024d20:	b224      	sxtheq	r4, r4
 8024d22:	f001 f923 	bl	8025f6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8024d26:	e7f6      	b.n	8024d16 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8024d28:	b2a0      	uxth	r0, r4
 8024d2a:	b018      	add	sp, #96	; 0x60
 8024d2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024d30:	b003      	add	sp, #12
 8024d32:	4770      	bx	lr

08024d34 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8024d34:	b40e      	push	{r1, r2, r3}
 8024d36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024d38:	b098      	sub	sp, #96	; 0x60
 8024d3a:	4605      	mov	r5, r0
 8024d3c:	4f28      	ldr	r7, [pc, #160]	; (8024de0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xac>)
 8024d3e:	ab1d      	add	r3, sp, #116	; 0x74
 8024d40:	a802      	add	r0, sp, #8
 8024d42:	ae18      	add	r6, sp, #96	; 0x60
 8024d44:	f853 4b04 	ldr.w	r4, [r3], #4
 8024d48:	9300      	str	r3, [sp, #0]
 8024d4a:	f001 f8b9 	bl	8025ec0 <_ZN8touchgfx12TextProviderC1Ev>
 8024d4e:	682b      	ldr	r3, [r5, #0]
 8024d50:	4628      	mov	r0, r5
 8024d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024d54:	4798      	blx	r3
 8024d56:	4621      	mov	r1, r4
 8024d58:	2400      	movs	r4, #0
 8024d5a:	4603      	mov	r3, r0
 8024d5c:	9a00      	ldr	r2, [sp, #0]
 8024d5e:	a802      	add	r0, sp, #8
 8024d60:	f001 f8cb 	bl	8025efa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8024d64:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8024d68:	462a      	mov	r2, r5
 8024d6a:	4633      	mov	r3, r6
 8024d6c:	4621      	mov	r1, r4
 8024d6e:	a802      	add	r0, sp, #8
 8024d70:	f001 fa2e 	bl	80261d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8024d74:	b370      	cbz	r0, 8024dd4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>
 8024d76:	280a      	cmp	r0, #10
 8024d78:	d025      	beq.n	8024dc6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x92>
 8024d7a:	9a01      	ldr	r2, [sp, #4]
 8024d7c:	b31a      	cbz	r2, 8024dc6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x92>
 8024d7e:	7b51      	ldrb	r1, [r2, #13]
 8024d80:	f892 c008 	ldrb.w	ip, [r2, #8]
 8024d84:	f011 0f40 	tst.w	r1, #64	; 0x40
 8024d88:	88ab      	ldrh	r3, [r5, #4]
 8024d8a:	bf14      	ite	ne
 8024d8c:	46be      	movne	lr, r7
 8024d8e:	f04f 0e00 	moveq.w	lr, #0
 8024d92:	f011 0f20 	tst.w	r1, #32
 8024d96:	ea4e 0e0c 	orr.w	lr, lr, ip
 8024d9a:	bf14      	ite	ne
 8024d9c:	f44f 7080 	movne.w	r0, #256	; 0x100
 8024da0:	2000      	moveq	r0, #0
 8024da2:	f011 0f10 	tst.w	r1, #16
 8024da6:	ea40 000e 	orr.w	r0, r0, lr
 8024daa:	eba3 0300 	sub.w	r3, r3, r0
 8024dae:	79d0      	ldrb	r0, [r2, #7]
 8024db0:	bf14      	ite	ne
 8024db2:	f44f 7280 	movne.w	r2, #256	; 0x100
 8024db6:	2200      	moveq	r2, #0
 8024db8:	4302      	orrs	r2, r0
 8024dba:	fa12 f383 	uxtah	r3, r2, r3
 8024dbe:	b29b      	uxth	r3, r3
 8024dc0:	42a3      	cmp	r3, r4
 8024dc2:	bfc8      	it	gt
 8024dc4:	b21c      	sxthgt	r4, r3
 8024dc6:	4633      	mov	r3, r6
 8024dc8:	462a      	mov	r2, r5
 8024dca:	2100      	movs	r1, #0
 8024dcc:	a802      	add	r0, sp, #8
 8024dce:	f001 f9ff 	bl	80261d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8024dd2:	e7cf      	b.n	8024d74 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 8024dd4:	b2a0      	uxth	r0, r4
 8024dd6:	b018      	add	sp, #96	; 0x60
 8024dd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8024ddc:	b003      	add	sp, #12
 8024dde:	4770      	bx	lr
 8024de0:	fffffe00 	.word	0xfffffe00

08024de4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8024de4:	b40e      	push	{r1, r2, r3}
 8024de6:	b570      	push	{r4, r5, r6, lr}
 8024de8:	b099      	sub	sp, #100	; 0x64
 8024dea:	4604      	mov	r4, r0
 8024dec:	26ff      	movs	r6, #255	; 0xff
 8024dee:	ab1d      	add	r3, sp, #116	; 0x74
 8024df0:	a802      	add	r0, sp, #8
 8024df2:	f853 5b04 	ldr.w	r5, [r3], #4
 8024df6:	9300      	str	r3, [sp, #0]
 8024df8:	f001 f862 	bl	8025ec0 <_ZN8touchgfx12TextProviderC1Ev>
 8024dfc:	6823      	ldr	r3, [r4, #0]
 8024dfe:	4620      	mov	r0, r4
 8024e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024e02:	4798      	blx	r3
 8024e04:	4629      	mov	r1, r5
 8024e06:	4603      	mov	r3, r0
 8024e08:	9a00      	ldr	r2, [sp, #0]
 8024e0a:	a802      	add	r0, sp, #8
 8024e0c:	ad18      	add	r5, sp, #96	; 0x60
 8024e0e:	f001 f874 	bl	8025efa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8024e12:	2100      	movs	r1, #0
 8024e14:	4622      	mov	r2, r4
 8024e16:	a802      	add	r0, sp, #8
 8024e18:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8024e1c:	462b      	mov	r3, r5
 8024e1e:	f001 f9d7 	bl	80261d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8024e22:	b190      	cbz	r0, 8024e4a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 8024e24:	280a      	cmp	r0, #10
 8024e26:	d009      	beq.n	8024e3c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8024e28:	9a01      	ldr	r2, [sp, #4]
 8024e2a:	b13a      	cbz	r2, 8024e3c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8024e2c:	7923      	ldrb	r3, [r4, #4]
 8024e2e:	7a12      	ldrb	r2, [r2, #8]
 8024e30:	1a9b      	subs	r3, r3, r2
 8024e32:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8024e36:	429e      	cmp	r6, r3
 8024e38:	bfa8      	it	ge
 8024e3a:	461e      	movge	r6, r3
 8024e3c:	462b      	mov	r3, r5
 8024e3e:	4622      	mov	r2, r4
 8024e40:	2100      	movs	r1, #0
 8024e42:	a802      	add	r0, sp, #8
 8024e44:	f001 f9c4 	bl	80261d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8024e48:	e7eb      	b.n	8024e22 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8024e4a:	4630      	mov	r0, r6
 8024e4c:	b019      	add	sp, #100	; 0x64
 8024e4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024e52:	b003      	add	sp, #12
 8024e54:	4770      	bx	lr

08024e56 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8024e56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e5a:	b099      	sub	sp, #100	; 0x64
 8024e5c:	4607      	mov	r7, r0
 8024e5e:	4614      	mov	r4, r2
 8024e60:	461d      	mov	r5, r3
 8024e62:	a802      	add	r0, sp, #8
 8024e64:	468a      	mov	sl, r1
 8024e66:	f001 f82b 	bl	8025ec0 <_ZN8touchgfx12TextProviderC1Ev>
 8024e6a:	683b      	ldr	r3, [r7, #0]
 8024e6c:	f04f 0800 	mov.w	r8, #0
 8024e70:	4638      	mov	r0, r7
 8024e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024e74:	4798      	blx	r3
 8024e76:	46c1      	mov	r9, r8
 8024e78:	462a      	mov	r2, r5
 8024e7a:	4645      	mov	r5, r8
 8024e7c:	4603      	mov	r3, r0
 8024e7e:	4621      	mov	r1, r4
 8024e80:	a802      	add	r0, sp, #8
 8024e82:	f001 f83a 	bl	8025efa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8024e86:	2300      	movs	r3, #0
 8024e88:	463a      	mov	r2, r7
 8024e8a:	4651      	mov	r1, sl
 8024e8c:	a802      	add	r0, sp, #8
 8024e8e:	9301      	str	r3, [sp, #4]
 8024e90:	ab01      	add	r3, sp, #4
 8024e92:	f001 f99d 	bl	80261d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8024e96:	4606      	mov	r6, r0
 8024e98:	b108      	cbz	r0, 8024e9e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x48>
 8024e9a:	280a      	cmp	r0, #10
 8024e9c:	d106      	bne.n	8024eac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x56>
 8024e9e:	454d      	cmp	r5, r9
 8024ea0:	dd00      	ble.n	8024ea4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4e>
 8024ea2:	46a9      	mov	r9, r5
 8024ea4:	2500      	movs	r5, #0
 8024ea6:	e018      	b.n	8024eda <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x84>
 8024ea8:	46b0      	mov	r8, r6
 8024eaa:	e7ec      	b.n	8024e86 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x30>
 8024eac:	9a01      	ldr	r2, [sp, #4]
 8024eae:	2a00      	cmp	r2, #0
 8024eb0:	d0fa      	beq.n	8024ea8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8024eb2:	f992 300d 	ldrsb.w	r3, [r2, #13]
 8024eb6:	4641      	mov	r1, r8
 8024eb8:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8024ebc:	4638      	mov	r0, r7
 8024ebe:	2b00      	cmp	r3, #0
 8024ec0:	683b      	ldr	r3, [r7, #0]
 8024ec2:	8896      	ldrh	r6, [r2, #4]
 8024ec4:	bfb4      	ite	lt
 8024ec6:	f44f 7480 	movlt.w	r4, #256	; 0x100
 8024eca:	2400      	movge	r4, #0
 8024ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024ece:	ea44 040b 	orr.w	r4, r4, fp
 8024ed2:	4798      	blx	r3
 8024ed4:	4404      	add	r4, r0
 8024ed6:	4425      	add	r5, r4
 8024ed8:	b2ad      	uxth	r5, r5
 8024eda:	2e00      	cmp	r6, #0
 8024edc:	d1e4      	bne.n	8024ea8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8024ede:	4648      	mov	r0, r9
 8024ee0:	b019      	add	sp, #100	; 0x64
 8024ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024ee6 <_ZNK8touchgfx8Drawable7getTypeEv>:
 8024ee6:	2000      	movs	r0, #0
 8024ee8:	4770      	bx	lr

08024eea <_ZNK8touchgfx8Drawable10invalidateEv>:
 8024eea:	b513      	push	{r0, r1, r4, lr}
 8024eec:	1d01      	adds	r1, r0, #4
 8024eee:	4603      	mov	r3, r0
 8024ef0:	c903      	ldmia	r1, {r0, r1}
 8024ef2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8024ef6:	2100      	movs	r1, #0
 8024ef8:	4618      	mov	r0, r3
 8024efa:	f8ad 1000 	strh.w	r1, [sp]
 8024efe:	f8ad 1002 	strh.w	r1, [sp, #2]
 8024f02:	6819      	ldr	r1, [r3, #0]
 8024f04:	690c      	ldr	r4, [r1, #16]
 8024f06:	4669      	mov	r1, sp
 8024f08:	47a0      	blx	r4
 8024f0a:	b002      	add	sp, #8
 8024f0c:	bd10      	pop	{r4, pc}

08024f0e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8024f0e:	b538      	push	{r3, r4, r5, lr}
 8024f10:	680b      	ldr	r3, [r1, #0]
 8024f12:	460c      	mov	r4, r1
 8024f14:	4605      	mov	r5, r0
 8024f16:	68db      	ldr	r3, [r3, #12]
 8024f18:	4798      	blx	r3
 8024f1a:	6823      	ldr	r3, [r4, #0]
 8024f1c:	4620      	mov	r0, r4
 8024f1e:	4629      	mov	r1, r5
 8024f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024f22:	4798      	blx	r3
 8024f24:	4628      	mov	r0, r5
 8024f26:	bd38      	pop	{r3, r4, r5, pc}

08024f28 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8024f28:	b410      	push	{r4}
 8024f2a:	880a      	ldrh	r2, [r1, #0]
 8024f2c:	8884      	ldrh	r4, [r0, #4]
 8024f2e:	4422      	add	r2, r4
 8024f30:	800a      	strh	r2, [r1, #0]
 8024f32:	884a      	ldrh	r2, [r1, #2]
 8024f34:	88c4      	ldrh	r4, [r0, #6]
 8024f36:	4422      	add	r2, r4
 8024f38:	804a      	strh	r2, [r1, #2]
 8024f3a:	6940      	ldr	r0, [r0, #20]
 8024f3c:	b120      	cbz	r0, 8024f48 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8024f3e:	6803      	ldr	r3, [r0, #0]
 8024f40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024f46:	4718      	bx	r3
 8024f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024f4c:	4770      	bx	lr

08024f4e <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8024f4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024f50:	460b      	mov	r3, r1
 8024f52:	b085      	sub	sp, #20
 8024f54:	4604      	mov	r4, r0
 8024f56:	b901      	cbnz	r1, 8024f5a <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8024f58:	b1f2      	cbz	r2, 8024f98 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4a>
 8024f5a:	1d27      	adds	r7, r4, #4
 8024f5c:	ad02      	add	r5, sp, #8
 8024f5e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8024f62:	e88d 0003 	stmia.w	sp, {r0, r1}
 8024f66:	88e1      	ldrh	r1, [r4, #6]
 8024f68:	4620      	mov	r0, r4
 8024f6a:	440a      	add	r2, r1
 8024f6c:	88a1      	ldrh	r1, [r4, #4]
 8024f6e:	4419      	add	r1, r3
 8024f70:	6823      	ldr	r3, [r4, #0]
 8024f72:	b212      	sxth	r2, r2
 8024f74:	b209      	sxth	r1, r1
 8024f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024f78:	4798      	blx	r3
 8024f7a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8024f7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8024f82:	6960      	ldr	r0, [r4, #20]
 8024f84:	b150      	cbz	r0, 8024f9c <_ZN8touchgfx8Drawable12moveRelativeEss+0x4e>
 8024f86:	6803      	ldr	r3, [r0, #0]
 8024f88:	4669      	mov	r1, sp
 8024f8a:	691b      	ldr	r3, [r3, #16]
 8024f8c:	4798      	blx	r3
 8024f8e:	6960      	ldr	r0, [r4, #20]
 8024f90:	6803      	ldr	r3, [r0, #0]
 8024f92:	691b      	ldr	r3, [r3, #16]
 8024f94:	4629      	mov	r1, r5
 8024f96:	4798      	blx	r3
 8024f98:	b005      	add	sp, #20
 8024f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024f9c:	f7ff fb14 	bl	80245c8 <_ZN8touchgfx11Application11getInstanceEv>
 8024fa0:	6803      	ldr	r3, [r0, #0]
 8024fa2:	4669      	mov	r1, sp
 8024fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024fa6:	4798      	blx	r3
 8024fa8:	f7ff fb0e 	bl	80245c8 <_ZN8touchgfx11Application11getInstanceEv>
 8024fac:	6803      	ldr	r3, [r0, #0]
 8024fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024fb0:	e7f0      	b.n	8024f94 <_ZN8touchgfx8Drawable12moveRelativeEss+0x46>

08024fb2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8024fb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024fb4:	8882      	ldrh	r2, [r0, #4]
 8024fb6:	4605      	mov	r5, r0
 8024fb8:	880b      	ldrh	r3, [r1, #0]
 8024fba:	460c      	mov	r4, r1
 8024fbc:	4413      	add	r3, r2
 8024fbe:	800b      	strh	r3, [r1, #0]
 8024fc0:	884b      	ldrh	r3, [r1, #2]
 8024fc2:	88c2      	ldrh	r2, [r0, #6]
 8024fc4:	4413      	add	r3, r2
 8024fc6:	4602      	mov	r2, r0
 8024fc8:	804b      	strh	r3, [r1, #2]
 8024fca:	466b      	mov	r3, sp
 8024fcc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8024fd0:	6851      	ldr	r1, [r2, #4]
 8024fd2:	c303      	stmia	r3!, {r0, r1}
 8024fd4:	4621      	mov	r1, r4
 8024fd6:	4668      	mov	r0, sp
 8024fd8:	f7ed fae0 	bl	801259c <_ZN8touchgfx4RectaNERKS0_>
 8024fdc:	466b      	mov	r3, sp
 8024fde:	cb03      	ldmia	r3!, {r0, r1}
 8024fe0:	6020      	str	r0, [r4, #0]
 8024fe2:	6061      	str	r1, [r4, #4]
 8024fe4:	6968      	ldr	r0, [r5, #20]
 8024fe6:	b128      	cbz	r0, 8024ff4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8024fe8:	6803      	ldr	r3, [r0, #0]
 8024fea:	691b      	ldr	r3, [r3, #16]
 8024fec:	4621      	mov	r1, r4
 8024fee:	4798      	blx	r3
 8024ff0:	b003      	add	sp, #12
 8024ff2:	bd30      	pop	{r4, r5, pc}
 8024ff4:	f7ff fae8 	bl	80245c8 <_ZN8touchgfx11Application11getInstanceEv>
 8024ff8:	6803      	ldr	r3, [r0, #0]
 8024ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024ffc:	e7f6      	b.n	8024fec <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08024ffe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8024ffe:	b570      	push	{r4, r5, r6, lr}
 8025000:	8882      	ldrh	r2, [r0, #4]
 8025002:	460c      	mov	r4, r1
 8025004:	880b      	ldrh	r3, [r1, #0]
 8025006:	4605      	mov	r5, r0
 8025008:	4413      	add	r3, r2
 802500a:	800b      	strh	r3, [r1, #0]
 802500c:	884b      	ldrh	r3, [r1, #2]
 802500e:	88c2      	ldrh	r2, [r0, #6]
 8025010:	4413      	add	r3, r2
 8025012:	804b      	strh	r3, [r1, #2]
 8025014:	1d01      	adds	r1, r0, #4
 8025016:	4620      	mov	r0, r4
 8025018:	f7ed fac0 	bl	801259c <_ZN8touchgfx4RectaNERKS0_>
 802501c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8025020:	b163      	cbz	r3, 802503c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8025022:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025026:	b933      	cbnz	r3, 8025036 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x38>
 8025028:	bd70      	pop	{r4, r5, r6, pc}
 802502a:	6803      	ldr	r3, [r0, #0]
 802502c:	4621      	mov	r1, r4
 802502e:	6a1b      	ldr	r3, [r3, #32]
 8025030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025034:	4718      	bx	r3
 8025036:	6968      	ldr	r0, [r5, #20]
 8025038:	2800      	cmp	r0, #0
 802503a:	d1f6      	bne.n	802502a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x2c>
 802503c:	bd70      	pop	{r4, r5, r6, pc}

0802503e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 802503e:	b510      	push	{r4, lr}
 8025040:	2300      	movs	r3, #0
 8025042:	4604      	mov	r4, r0
 8025044:	4608      	mov	r0, r1
 8025046:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 802504a:	8023      	strh	r3, [r4, #0]
 802504c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8025050:	8063      	strh	r3, [r4, #2]
 8025052:	6803      	ldr	r3, [r0, #0]
 8025054:	80a1      	strh	r1, [r4, #4]
 8025056:	4621      	mov	r1, r4
 8025058:	80e2      	strh	r2, [r4, #6]
 802505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802505c:	4798      	blx	r3
 802505e:	4620      	mov	r0, r4
 8025060:	bd10      	pop	{r4, pc}
	...

08025064 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8025064:	b530      	push	{r4, r5, lr}
 8025066:	8083      	strh	r3, [r0, #4]
 8025068:	f89d 300c 	ldrb.w	r3, [sp, #12]
 802506c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8025070:	7183      	strb	r3, [r0, #6]
 8025072:	79c3      	ldrb	r3, [r0, #7]
 8025074:	6101      	str	r1, [r0, #16]
 8025076:	f365 0306 	bfi	r3, r5, #0, #7
 802507a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802507e:	8282      	strh	r2, [r0, #20]
 8025080:	f365 13c7 	bfi	r3, r5, #7, #1
 8025084:	71c3      	strb	r3, [r0, #7]
 8025086:	f89d 3018 	ldrb.w	r3, [sp, #24]
 802508a:	7203      	strb	r3, [r0, #8]
 802508c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8025090:	7243      	strb	r3, [r0, #9]
 8025092:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8025096:	8143      	strh	r3, [r0, #10]
 8025098:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 802509c:	8183      	strh	r3, [r0, #12]
 802509e:	4b01      	ldr	r3, [pc, #4]	; (80250a4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80250a0:	6003      	str	r3, [r0, #0]
 80250a2:	bd30      	pop	{r4, r5, pc}
 80250a4:	0802f180 	.word	0x0802f180

080250a8 <_ZNK8touchgfx9ConstFont4findEt>:
 80250a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80250aa:	8a84      	ldrh	r4, [r0, #20]
 80250ac:	2500      	movs	r5, #0
 80250ae:	260e      	movs	r6, #14
 80250b0:	3c01      	subs	r4, #1
 80250b2:	42a5      	cmp	r5, r4
 80250b4:	dc0c      	bgt.n	80250d0 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 80250b6:	192a      	adds	r2, r5, r4
 80250b8:	6903      	ldr	r3, [r0, #16]
 80250ba:	1052      	asrs	r2, r2, #1
 80250bc:	fb06 3302 	mla	r3, r6, r2, r3
 80250c0:	889f      	ldrh	r7, [r3, #4]
 80250c2:	42b9      	cmp	r1, r7
 80250c4:	da01      	bge.n	80250ca <_ZNK8touchgfx9ConstFont4findEt+0x22>
 80250c6:	1e54      	subs	r4, r2, #1
 80250c8:	e7f3      	b.n	80250b2 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 80250ca:	dd02      	ble.n	80250d2 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 80250cc:	1c55      	adds	r5, r2, #1
 80250ce:	e7f0      	b.n	80250b2 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 80250d0:	2300      	movs	r3, #0
 80250d2:	4618      	mov	r0, r3
 80250d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080250d6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80250d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80250d8:	4605      	mov	r5, r0
 80250da:	4617      	mov	r7, r2
 80250dc:	461e      	mov	r6, r3
 80250de:	f7ff ffe3 	bl	80250a8 <_ZNK8touchgfx9ConstFont4findEt>
 80250e2:	b9e0      	cbnz	r0, 802511e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 80250e4:	b911      	cbnz	r1, 80250ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 80250e6:	2400      	movs	r4, #0
 80250e8:	4620      	mov	r0, r4
 80250ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80250ec:	290a      	cmp	r1, #10
 80250ee:	d0fa      	beq.n	80250e6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80250f0:	682b      	ldr	r3, [r5, #0]
 80250f2:	4628      	mov	r0, r5
 80250f4:	691b      	ldr	r3, [r3, #16]
 80250f6:	4798      	blx	r3
 80250f8:	4601      	mov	r1, r0
 80250fa:	4628      	mov	r0, r5
 80250fc:	f7ff ffd4 	bl	80250a8 <_ZNK8touchgfx9ConstFont4findEt>
 8025100:	4604      	mov	r4, r0
 8025102:	2800      	cmp	r0, #0
 8025104:	d0ef      	beq.n	80250e6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8025106:	682b      	ldr	r3, [r5, #0]
 8025108:	4621      	mov	r1, r4
 802510a:	4628      	mov	r0, r5
 802510c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802510e:	4798      	blx	r3
 8025110:	6038      	str	r0, [r7, #0]
 8025112:	682b      	ldr	r3, [r5, #0]
 8025114:	4628      	mov	r0, r5
 8025116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025118:	4798      	blx	r3
 802511a:	7030      	strb	r0, [r6, #0]
 802511c:	e7e4      	b.n	80250e8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 802511e:	4604      	mov	r4, r0
 8025120:	e7f1      	b.n	8025106 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

08025122 <_ZN8touchgfx6memsetEPvhm>:
 8025122:	4402      	add	r2, r0
 8025124:	4290      	cmp	r0, r2
 8025126:	d002      	beq.n	802512e <_ZN8touchgfx6memsetEPvhm+0xc>
 8025128:	f800 1b01 	strb.w	r1, [r0], #1
 802512c:	e7fa      	b.n	8025124 <_ZN8touchgfx6memsetEPvhm+0x2>
 802512e:	4770      	bx	lr

08025130 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 8025130:	b538      	push	{r3, r4, r5, lr}
 8025132:	4605      	mov	r5, r0
 8025134:	f001 fe3e 	bl	8026db4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8025138:	4604      	mov	r4, r0
 802513a:	4628      	mov	r0, r5
 802513c:	f001 fd7e 	bl	8026c3c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8025140:	2800      	cmp	r0, #0
 8025142:	bf14      	ite	ne
 8025144:	2002      	movne	r0, #2
 8025146:	2000      	moveq	r0, #0
 8025148:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 802514c:	b280      	uxth	r0, r0
 802514e:	bd38      	pop	{r3, r4, r5, pc}

08025150 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 8025150:	b538      	push	{r3, r4, r5, lr}
 8025152:	4605      	mov	r5, r0
 8025154:	f001 fe2e 	bl	8026db4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8025158:	4604      	mov	r4, r0
 802515a:	4628      	mov	r0, r5
 802515c:	f001 fd6e 	bl	8026c3c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8025160:	2800      	cmp	r0, #0
 8025162:	bf14      	ite	ne
 8025164:	2002      	movne	r0, #2
 8025166:	2000      	moveq	r0, #0
 8025168:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 802516c:	f040 0001 	orr.w	r0, r0, #1
 8025170:	b280      	uxth	r0, r0
 8025172:	bd38      	pop	{r3, r4, r5, pc}

08025174 <_ZN8touchgfx3clzEl>:
 8025174:	b1e8      	cbz	r0, 80251b2 <_ZN8touchgfx3clzEl+0x3e>
 8025176:	2800      	cmp	r0, #0
 8025178:	bfb8      	it	lt
 802517a:	4240      	neglt	r0, r0
 802517c:	0c03      	lsrs	r3, r0, #16
 802517e:	041b      	lsls	r3, r3, #16
 8025180:	b9ab      	cbnz	r3, 80251ae <_ZN8touchgfx3clzEl+0x3a>
 8025182:	0400      	lsls	r0, r0, #16
 8025184:	2310      	movs	r3, #16
 8025186:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802518a:	bf04      	itt	eq
 802518c:	0200      	lsleq	r0, r0, #8
 802518e:	3308      	addeq	r3, #8
 8025190:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8025194:	bf04      	itt	eq
 8025196:	0100      	lsleq	r0, r0, #4
 8025198:	3304      	addeq	r3, #4
 802519a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802519e:	bf04      	itt	eq
 80251a0:	0080      	lsleq	r0, r0, #2
 80251a2:	3302      	addeq	r3, #2
 80251a4:	2800      	cmp	r0, #0
 80251a6:	bfa8      	it	ge
 80251a8:	3301      	addge	r3, #1
 80251aa:	1e58      	subs	r0, r3, #1
 80251ac:	4770      	bx	lr
 80251ae:	2300      	movs	r3, #0
 80251b0:	e7e9      	b.n	8025186 <_ZN8touchgfx3clzEl+0x12>
 80251b2:	201f      	movs	r0, #31
 80251b4:	4770      	bx	lr

080251b6 <_ZN8touchgfx6muldivElllRl>:
 80251b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80251ba:	4604      	mov	r4, r0
 80251bc:	4698      	mov	r8, r3
 80251be:	2601      	movs	r6, #1
 80251c0:	f7ff ffd8 	bl	8025174 <_ZN8touchgfx3clzEl>
 80251c4:	2c00      	cmp	r4, #0
 80251c6:	fa04 f500 	lsl.w	r5, r4, r0
 80251ca:	fa06 f600 	lsl.w	r6, r6, r0
 80251ce:	bfba      	itte	lt
 80251d0:	f04f 37ff 	movlt.w	r7, #4294967295
 80251d4:	4264      	neglt	r4, r4
 80251d6:	2701      	movge	r7, #1
 80251d8:	2900      	cmp	r1, #0
 80251da:	f106 36ff 	add.w	r6, r6, #4294967295
 80251de:	bfbc      	itt	lt
 80251e0:	4249      	neglt	r1, r1
 80251e2:	427f      	neglt	r7, r7
 80251e4:	2a00      	cmp	r2, #0
 80251e6:	fa41 fe00 	asr.w	lr, r1, r0
 80251ea:	ea01 0106 	and.w	r1, r1, r6
 80251ee:	bfb8      	it	lt
 80251f0:	427f      	neglt	r7, r7
 80251f2:	fb04 f401 	mul.w	r4, r4, r1
 80251f6:	fb95 f3f2 	sdiv	r3, r5, r2
 80251fa:	fb02 5513 	mls	r5, r2, r3, r5
 80251fe:	bfb8      	it	lt
 8025200:	4252      	neglt	r2, r2
 8025202:	fb94 f0f2 	sdiv	r0, r4, r2
 8025206:	fb02 4410 	mls	r4, r2, r0, r4
 802520a:	fb0e 4405 	mla	r4, lr, r5, r4
 802520e:	fb94 f1f2 	sdiv	r1, r4, r2
 8025212:	4408      	add	r0, r1
 8025214:	fb02 4211 	mls	r2, r2, r1, r4
 8025218:	fb0e 0003 	mla	r0, lr, r3, r0
 802521c:	f8c8 2000 	str.w	r2, [r8]
 8025220:	4378      	muls	r0, r7
 8025222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08025226 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8025226:	2002      	movs	r0, #2
 8025228:	4770      	bx	lr

0802522a <_ZN8touchgfx12GestureEventD1Ev>:
 802522a:	4770      	bx	lr

0802522c <_ZN8touchgfx12GestureEventD0Ev>:
 802522c:	b510      	push	{r4, lr}
 802522e:	4604      	mov	r4, r0
 8025230:	210c      	movs	r1, #12
 8025232:	f005 f976 	bl	802a522 <_ZdlPvj>
 8025236:	4620      	mov	r0, r4
 8025238:	bd10      	pop	{r4, pc}
	...

0802523c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 802523c:	b530      	push	{r4, r5, lr}
 802523e:	460d      	mov	r5, r1
 8025240:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8025242:	b087      	sub	sp, #28
 8025244:	4604      	mov	r4, r0
 8025246:	b301      	cbz	r1, 802528a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8025248:	a801      	add	r0, sp, #4
 802524a:	f7ff fef8 	bl	802503e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 802524e:	892a      	ldrh	r2, [r5, #8]
 8025250:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8025254:	7928      	ldrb	r0, [r5, #4]
 8025256:	1ad2      	subs	r2, r2, r3
 8025258:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 802525a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802525e:	441a      	add	r2, r3
 8025260:	896b      	ldrh	r3, [r5, #10]
 8025262:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8025266:	f88d 0010 	strb.w	r0, [sp, #16]
 802526a:	1b5b      	subs	r3, r3, r5
 802526c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 802526e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8025270:	442b      	add	r3, r5
 8025272:	4d07      	ldr	r5, [pc, #28]	; (8025290 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8025274:	f8ad 1012 	strh.w	r1, [sp, #18]
 8025278:	a903      	add	r1, sp, #12
 802527a:	9503      	str	r5, [sp, #12]
 802527c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8025280:	f8ad 3016 	strh.w	r3, [sp, #22]
 8025284:	6803      	ldr	r3, [r0, #0]
 8025286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8025288:	4798      	blx	r3
 802528a:	b007      	add	sp, #28
 802528c:	bd30      	pop	{r4, r5, pc}
 802528e:	bf00      	nop
 8025290:	0802f1d4 	.word	0x0802f1d4

08025294 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8025294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025296:	460c      	mov	r4, r1
 8025298:	6b01      	ldr	r1, [r0, #48]	; 0x30
 802529a:	b089      	sub	sp, #36	; 0x24
 802529c:	4605      	mov	r5, r0
 802529e:	2900      	cmp	r1, #0
 80252a0:	d053      	beq.n	802534a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb6>
 80252a2:	4668      	mov	r0, sp
 80252a4:	f7ff fecb 	bl	802503e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80252a8:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 80252aa:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 80252ac:	4668      	mov	r0, sp
 80252ae:	8922      	ldrh	r2, [r4, #8]
 80252b0:	88e1      	ldrh	r1, [r4, #6]
 80252b2:	443a      	add	r2, r7
 80252b4:	4431      	add	r1, r6
 80252b6:	b212      	sxth	r2, r2
 80252b8:	b209      	sxth	r1, r1
 80252ba:	f7ed f8f9 	bl	80124b0 <_ZNK8touchgfx4Rect9intersectEss>
 80252be:	b1c8      	cbz	r0, 80252f4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 80252c0:	89a2      	ldrh	r2, [r4, #12]
 80252c2:	4668      	mov	r0, sp
 80252c4:	8961      	ldrh	r1, [r4, #10]
 80252c6:	443a      	add	r2, r7
 80252c8:	4431      	add	r1, r6
 80252ca:	b212      	sxth	r2, r2
 80252cc:	b209      	sxth	r1, r1
 80252ce:	f7ed f8ef 	bl	80124b0 <_ZNK8touchgfx4Rect9intersectEss>
 80252d2:	b978      	cbnz	r0, 80252f4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 80252d4:	4b1e      	ldr	r3, [pc, #120]	; (8025350 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 80252d6:	a904      	add	r1, sp, #16
 80252d8:	f8ad 0016 	strh.w	r0, [sp, #22]
 80252dc:	9304      	str	r3, [sp, #16]
 80252de:	2302      	movs	r3, #2
 80252e0:	f8ad 0018 	strh.w	r0, [sp, #24]
 80252e4:	f8ad 001a 	strh.w	r0, [sp, #26]
 80252e8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80252ea:	f88d 3014 	strb.w	r3, [sp, #20]
 80252ee:	6803      	ldr	r3, [r0, #0]
 80252f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80252f2:	4798      	blx	r3
 80252f4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80252f6:	a802      	add	r0, sp, #8
 80252f8:	f7ff fea1 	bl	802503e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80252fc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8025300:	88e0      	ldrh	r0, [r4, #6]
 8025302:	8961      	ldrh	r1, [r4, #10]
 8025304:	f8b5 e034 	ldrh.w	lr, [r5, #52]	; 0x34
 8025308:	1a80      	subs	r0, r0, r2
 802530a:	f8bd c00a 	ldrh.w	ip, [sp, #10]
 802530e:	1a89      	subs	r1, r1, r2
 8025310:	8923      	ldrh	r3, [r4, #8]
 8025312:	4470      	add	r0, lr
 8025314:	89a2      	ldrh	r2, [r4, #12]
 8025316:	4471      	add	r1, lr
 8025318:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 802531a:	eba3 030c 	sub.w	r3, r3, ip
 802531e:	eba2 020c 	sub.w	r2, r2, ip
 8025322:	f8ad 0016 	strh.w	r0, [sp, #22]
 8025326:	7927      	ldrb	r7, [r4, #4]
 8025328:	4433      	add	r3, r6
 802532a:	4432      	add	r2, r6
 802532c:	4c09      	ldr	r4, [pc, #36]	; (8025354 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 802532e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8025330:	f8ad 101a 	strh.w	r1, [sp, #26]
 8025334:	a904      	add	r1, sp, #16
 8025336:	9404      	str	r4, [sp, #16]
 8025338:	f88d 7014 	strb.w	r7, [sp, #20]
 802533c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8025340:	f8ad 201c 	strh.w	r2, [sp, #28]
 8025344:	6803      	ldr	r3, [r0, #0]
 8025346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8025348:	4798      	blx	r3
 802534a:	b009      	add	sp, #36	; 0x24
 802534c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802534e:	bf00      	nop
 8025350:	0802cec4 	.word	0x0802cec4
 8025354:	0802ceb0 	.word	0x0802ceb0

08025358 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8025358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802535c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 802535e:	b0a1      	sub	sp, #132	; 0x84
 8025360:	4604      	mov	r4, r0
 8025362:	460d      	mov	r5, r1
 8025364:	790b      	ldrb	r3, [r1, #4]
 8025366:	b16a      	cbz	r2, 8025384 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 8025368:	b963      	cbnz	r3, 8025384 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 802536a:	b021      	add	sp, #132	; 0x84
 802536c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025370:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8025374:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8025378:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802537c:	1d20      	adds	r0, r4, #4
 802537e:	f7ed fba3 	bl	8012ac8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8025382:	e0a2      	b.n	80254ca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 8025384:	2b00      	cmp	r3, #0
 8025386:	f040 80a0 	bne.w	80254ca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 802538a:	4a66      	ldr	r2, [pc, #408]	; (8025524 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1cc>)
 802538c:	6812      	ldr	r2, [r2, #0]
 802538e:	f892 b049 	ldrb.w	fp, [r2, #73]	; 0x49
 8025392:	86a3      	strh	r3, [r4, #52]	; 0x34
 8025394:	f1bb 0f03 	cmp.w	fp, #3
 8025398:	86e3      	strh	r3, [r4, #54]	; 0x36
 802539a:	dde9      	ble.n	8025370 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x18>
 802539c:	f1bb 0f0c 	cmp.w	fp, #12
 80253a0:	6323      	str	r3, [r4, #48]	; 0x30
 80253a2:	f04f 0303 	mov.w	r3, #3
 80253a6:	f04f 0600 	mov.w	r6, #0
 80253aa:	bfd8      	it	le
 80253ac:	f10b 32ff 	addle.w	r2, fp, #4294967295
 80253b0:	495d      	ldr	r1, [pc, #372]	; (8025528 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d0>)
 80253b2:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 80253b6:	f04f 0a01 	mov.w	sl, #1
 80253ba:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 80253be:	bfd8      	it	le
 80253c0:	fb92 f3f3 	sdivle	r3, r2, r3
 80253c4:	9300      	str	r3, [sp, #0]
 80253c6:	4b59      	ldr	r3, [pc, #356]	; (802552c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d4>)
 80253c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80253cc:	4b58      	ldr	r3, [pc, #352]	; (8025530 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d8>)
 80253ce:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80253d2:	2248      	movs	r2, #72	; 0x48
 80253d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80253d8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80253dc:	ab0e      	add	r3, sp, #56	; 0x38
 80253de:	4618      	mov	r0, r3
 80253e0:	f005 fefa 	bl	802b1d8 <memcpy>
 80253e4:	f04f 32ff 	mov.w	r2, #4294967295
 80253e8:	f8cd b008 	str.w	fp, [sp, #8]
 80253ec:	9206      	str	r2, [sp, #24]
 80253ee:	9007      	str	r0, [sp, #28]
 80253f0:	9a00      	ldr	r2, [sp, #0]
 80253f2:	9b02      	ldr	r3, [sp, #8]
 80253f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80253f8:	f10a 32ff 	add.w	r2, sl, #4294967295
 80253fc:	b29b      	uxth	r3, r3
 80253fe:	9201      	str	r2, [sp, #4]
 8025400:	9a07      	ldr	r2, [sp, #28]
 8025402:	9303      	str	r3, [sp, #12]
 8025404:	eb02 07ca 	add.w	r7, r2, sl, lsl #3
 8025408:	3f04      	subs	r7, #4
 802540a:	2300      	movs	r3, #0
 802540c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8025410:	f8b5 8006 	ldrh.w	r8, [r5, #6]
 8025414:	a80a      	add	r0, sp, #40	; 0x28
 8025416:	9309      	str	r3, [sp, #36]	; 0x24
 8025418:	f857 3c04 	ldr.w	r3, [r7, #-4]
 802541c:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8025420:	fb13 f302 	smulbb	r3, r3, r2
 8025424:	b29b      	uxth	r3, r3
 8025426:	9304      	str	r3, [sp, #16]
 8025428:	683b      	ldr	r3, [r7, #0]
 802542a:	fb13 f302 	smulbb	r3, r3, r2
 802542e:	b29b      	uxth	r3, r3
 8025430:	9305      	str	r3, [sp, #20]
 8025432:	9b04      	ldr	r3, [sp, #16]
 8025434:	4498      	add	r8, r3
 8025436:	9b05      	ldr	r3, [sp, #20]
 8025438:	4499      	add	r9, r3
 802543a:	fa0f f888 	sxth.w	r8, r8
 802543e:	fa0f f989 	sxth.w	r9, r9
 8025442:	4641      	mov	r1, r8
 8025444:	464a      	mov	r2, r9
 8025446:	f7ed f833 	bl	80124b0 <_ZNK8touchgfx4Rect9intersectEss>
 802544a:	b380      	cbz	r0, 80254ae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 802544c:	4641      	mov	r1, r8
 802544e:	ab09      	add	r3, sp, #36	; 0x24
 8025450:	464a      	mov	r2, r9
 8025452:	1d20      	adds	r0, r4, #4
 8025454:	f7ed fb38 	bl	8012ac8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8025458:	9909      	ldr	r1, [sp, #36]	; 0x24
 802545a:	b341      	cbz	r1, 80254ae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 802545c:	42b1      	cmp	r1, r6
 802545e:	d026      	beq.n	80254ae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 8025460:	a80c      	add	r0, sp, #48	; 0x30
 8025462:	f7ff fdec 	bl	802503e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8025466:	2002      	movs	r0, #2
 8025468:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 802546c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8025470:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8025474:	fb92 f2f0 	sdiv	r2, r2, r0
 8025478:	440a      	add	r2, r1
 802547a:	1a99      	subs	r1, r3, r2
 802547c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8025480:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8025484:	fb93 f3f0 	sdiv	r3, r3, r0
 8025488:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 802548c:	4403      	add	r3, r0
 802548e:	1ad3      	subs	r3, r2, r3
 8025490:	9a06      	ldr	r2, [sp, #24]
 8025492:	435b      	muls	r3, r3
 8025494:	fb01 3301 	mla	r3, r1, r1, r3
 8025498:	4293      	cmp	r3, r2
 802549a:	d208      	bcs.n	80254ae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 802549c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80254a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80254a2:	86a2      	strh	r2, [r4, #52]	; 0x34
 80254a4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80254a8:	6326      	str	r6, [r4, #48]	; 0x30
 80254aa:	86e2      	strh	r2, [r4, #54]	; 0x36
 80254ac:	9306      	str	r3, [sp, #24]
 80254ae:	9b01      	ldr	r3, [sp, #4]
 80254b0:	3710      	adds	r7, #16
 80254b2:	3302      	adds	r3, #2
 80254b4:	2b08      	cmp	r3, #8
 80254b6:	9301      	str	r3, [sp, #4]
 80254b8:	dda7      	ble.n	802540a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xb2>
 80254ba:	9b02      	ldr	r3, [sp, #8]
 80254bc:	f10a 0a01 	add.w	sl, sl, #1
 80254c0:	445b      	add	r3, fp
 80254c2:	9302      	str	r3, [sp, #8]
 80254c4:	9b00      	ldr	r3, [sp, #0]
 80254c6:	4553      	cmp	r3, sl
 80254c8:	da92      	bge.n	80253f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x98>
 80254ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80254cc:	2900      	cmp	r1, #0
 80254ce:	f43f af4c 	beq.w	802536a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 80254d2:	a80c      	add	r0, sp, #48	; 0x30
 80254d4:	2600      	movs	r6, #0
 80254d6:	f7ff fdb2 	bl	802503e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80254da:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80254de:	88ea      	ldrh	r2, [r5, #6]
 80254e0:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 80254e4:	1ad2      	subs	r2, r2, r3
 80254e6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80254e8:	7929      	ldrb	r1, [r5, #4]
 80254ea:	441a      	add	r2, r3
 80254ec:	892b      	ldrh	r3, [r5, #8]
 80254ee:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80254f2:	a90e      	add	r1, sp, #56	; 0x38
 80254f4:	1a1b      	subs	r3, r3, r0
 80254f6:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80254f8:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80254fc:	4403      	add	r3, r0
 80254fe:	480d      	ldr	r0, [pc, #52]	; (8025534 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1dc>)
 8025500:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8025504:	900e      	str	r0, [sp, #56]	; 0x38
 8025506:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8025508:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 802550c:	6803      	ldr	r3, [r0, #0]
 802550e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025510:	4798      	blx	r3
 8025512:	792b      	ldrb	r3, [r5, #4]
 8025514:	2b00      	cmp	r3, #0
 8025516:	f43f af28 	beq.w	802536a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 802551a:	6326      	str	r6, [r4, #48]	; 0x30
 802551c:	86a6      	strh	r6, [r4, #52]	; 0x34
 802551e:	86e6      	strh	r6, [r4, #54]	; 0x36
 8025520:	e723      	b.n	802536a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 8025522:	bf00      	nop
 8025524:	2000cf78 	.word	0x2000cf78
 8025528:	0802ca00 	.word	0x0802ca00
 802552c:	2000cf6a 	.word	0x2000cf6a
 8025530:	2000cf6c 	.word	0x2000cf6c
 8025534:	0802cec4 	.word	0x0802cec4

08025538 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8025538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802553a:	4604      	mov	r4, r0
 802553c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8025540:	3201      	adds	r2, #1
 8025542:	d114      	bne.n	802556e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x36>
 8025544:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 8025548:	2200      	movs	r2, #0
 802554a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802554e:	6803      	ldr	r3, [r0, #0]
 8025550:	f8ad 1006 	strh.w	r1, [sp, #6]
 8025554:	4669      	mov	r1, sp
 8025556:	f8ad 2000 	strh.w	r2, [sp]
 802555a:	f8ad 2002 	strh.w	r2, [sp, #2]
 802555e:	f8ad 5004 	strh.w	r5, [sp, #4]
 8025562:	6a1b      	ldr	r3, [r3, #32]
 8025564:	4798      	blx	r3
 8025566:	e89d 0003 	ldmia.w	sp, {r0, r1}
 802556a:	e884 0003 	stmia.w	r4, {r0, r1}
 802556e:	4620      	mov	r0, r4
 8025570:	b003      	add	sp, #12
 8025572:	bd30      	pop	{r4, r5, pc}

08025574 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8025574:	b513      	push	{r0, r1, r4, lr}
 8025576:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 802557a:	4604      	mov	r4, r0
 802557c:	3301      	adds	r3, #1
 802557e:	d109      	bne.n	8025594 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8025580:	4601      	mov	r1, r0
 8025582:	4668      	mov	r0, sp
 8025584:	f7ff fd5b 	bl	802503e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8025588:	f8bd 3000 	ldrh.w	r3, [sp]
 802558c:	8423      	strh	r3, [r4, #32]
 802558e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8025592:	8463      	strh	r3, [r4, #34]	; 0x22
 8025594:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8025598:	b002      	add	sp, #8
 802559a:	bd10      	pop	{r4, pc}

0802559c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 802559c:	b513      	push	{r0, r1, r4, lr}
 802559e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80255a2:	4604      	mov	r4, r0
 80255a4:	3301      	adds	r3, #1
 80255a6:	d109      	bne.n	80255bc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80255a8:	4601      	mov	r1, r0
 80255aa:	4668      	mov	r0, sp
 80255ac:	f7ff fd47 	bl	802503e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80255b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80255b4:	8423      	strh	r3, [r4, #32]
 80255b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80255ba:	8463      	strh	r3, [r4, #34]	; 0x22
 80255bc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80255c0:	b002      	add	sp, #8
 80255c2:	bd10      	pop	{r4, pc}

080255c4 <_ZN8touchgfx6ScreenC1Ev>:
 80255c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80255c6:	4605      	mov	r5, r0
 80255c8:	4b18      	ldr	r3, [pc, #96]	; (802562c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80255ca:	2200      	movs	r2, #0
 80255cc:	4918      	ldr	r1, [pc, #96]	; (8025630 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80255ce:	f845 3b04 	str.w	r3, [r5], #4
 80255d2:	2301      	movs	r3, #1
 80255d4:	8102      	strh	r2, [r0, #8]
 80255d6:	4604      	mov	r4, r0
 80255d8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 80255dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80255e0:	4b14      	ldr	r3, [pc, #80]	; (8025634 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 80255e2:	8142      	strh	r2, [r0, #10]
 80255e4:	f9b3 7000 	ldrsh.w	r7, [r3]
 80255e8:	4b13      	ldr	r3, [pc, #76]	; (8025638 <_ZN8touchgfx6ScreenC1Ev+0x74>)
 80255ea:	8182      	strh	r2, [r0, #12]
 80255ec:	81c2      	strh	r2, [r0, #14]
 80255ee:	8202      	strh	r2, [r0, #16]
 80255f0:	8242      	strh	r2, [r0, #18]
 80255f2:	8282      	strh	r2, [r0, #20]
 80255f4:	82c2      	strh	r2, [r0, #22]
 80255f6:	6182      	str	r2, [r0, #24]
 80255f8:	61c2      	str	r2, [r0, #28]
 80255fa:	6202      	str	r2, [r0, #32]
 80255fc:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8025600:	62c2      	str	r2, [r0, #44]	; 0x2c
 8025602:	6302      	str	r2, [r0, #48]	; 0x30
 8025604:	8682      	strh	r2, [r0, #52]	; 0x34
 8025606:	86c2      	strh	r2, [r0, #54]	; 0x36
 8025608:	f9b3 6000 	ldrsh.w	r6, [r3]
 802560c:	6041      	str	r1, [r0, #4]
 802560e:	4611      	mov	r1, r2
 8025610:	4628      	mov	r0, r5
 8025612:	f7ec fd4a 	bl	80120aa <_ZN8touchgfx8Drawable5setXYEss>
 8025616:	4639      	mov	r1, r7
 8025618:	4628      	mov	r0, r5
 802561a:	f7ec fd64 	bl	80120e6 <_ZN8touchgfx8Drawable8setWidthEs>
 802561e:	4628      	mov	r0, r5
 8025620:	4631      	mov	r1, r6
 8025622:	f7ec fd6f 	bl	8012104 <_ZN8touchgfx8Drawable9setHeightEs>
 8025626:	4620      	mov	r0, r4
 8025628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802562a:	bf00      	nop
 802562c:	0802f1e8 	.word	0x0802f1e8
 8025630:	0802cb00 	.word	0x0802cb00
 8025634:	2000cf6a 	.word	0x2000cf6a
 8025638:	2000cf6c 	.word	0x2000cf6c

0802563c <_ZN8touchgfx6Screen4drawEv>:
 802563c:	4b0b      	ldr	r3, [pc, #44]	; (802566c <_ZN8touchgfx6Screen4drawEv+0x30>)
 802563e:	b507      	push	{r0, r1, r2, lr}
 8025640:	f9b3 1000 	ldrsh.w	r1, [r3]
 8025644:	4b0a      	ldr	r3, [pc, #40]	; (8025670 <_ZN8touchgfx6Screen4drawEv+0x34>)
 8025646:	f8ad 1004 	strh.w	r1, [sp, #4]
 802564a:	4669      	mov	r1, sp
 802564c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8025650:	2300      	movs	r3, #0
 8025652:	f8ad 3000 	strh.w	r3, [sp]
 8025656:	f8ad 3002 	strh.w	r3, [sp, #2]
 802565a:	6803      	ldr	r3, [r0, #0]
 802565c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8025660:	689b      	ldr	r3, [r3, #8]
 8025662:	4798      	blx	r3
 8025664:	b003      	add	sp, #12
 8025666:	f85d fb04 	ldr.w	pc, [sp], #4
 802566a:	bf00      	nop
 802566c:	2000cf6a 	.word	0x2000cf6a
 8025670:	2000cf6c 	.word	0x2000cf6c

08025674 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8025674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025678:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 802567c:	b087      	sub	sp, #28
 802567e:	4681      	mov	r9, r0
 8025680:	460c      	mov	r4, r1
 8025682:	4615      	mov	r5, r2
 8025684:	b16b      	cbz	r3, 80256a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8025686:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 802568a:	b153      	cbz	r3, 80256a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 802568c:	4628      	mov	r0, r5
 802568e:	f7ff ff53 	bl	8025538 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8025692:	4621      	mov	r1, r4
 8025694:	f7ec ff3b 	bl	801250e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8025698:	69eb      	ldr	r3, [r5, #28]
 802569a:	b928      	cbnz	r0, 80256a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 802569c:	461d      	mov	r5, r3
 802569e:	2b00      	cmp	r3, #0
 80256a0:	d1f4      	bne.n	802568c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 80256a2:	b007      	add	sp, #28
 80256a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80256a8:	ae02      	add	r6, sp, #8
 80256aa:	2b00      	cmp	r3, #0
 80256ac:	d04a      	beq.n	8025744 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 80256ae:	682b      	ldr	r3, [r5, #0]
 80256b0:	4629      	mov	r1, r5
 80256b2:	4668      	mov	r0, sp
 80256b4:	68db      	ldr	r3, [r3, #12]
 80256b6:	4798      	blx	r3
 80256b8:	4628      	mov	r0, r5
 80256ba:	f7ff ff5b 	bl	8025574 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80256be:	f8bd 7000 	ldrh.w	r7, [sp]
 80256c2:	4407      	add	r7, r0
 80256c4:	4628      	mov	r0, r5
 80256c6:	f7ff ff69 	bl	802559c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80256ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80256ce:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80256d2:	b23f      	sxth	r7, r7
 80256d4:	4418      	add	r0, r3
 80256d6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80256da:	4621      	mov	r1, r4
 80256dc:	f8ad 200c 	strh.w	r2, [sp, #12]
 80256e0:	f8ad 000a 	strh.w	r0, [sp, #10]
 80256e4:	4630      	mov	r0, r6
 80256e6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80256ea:	f8ad 7008 	strh.w	r7, [sp, #8]
 80256ee:	f7ec ff55 	bl	801259c <_ZN8touchgfx4RectaNERKS0_>
 80256f2:	4628      	mov	r0, r5
 80256f4:	f7ff ff20 	bl	8025538 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80256f8:	ab04      	add	r3, sp, #16
 80256fa:	4602      	mov	r2, r0
 80256fc:	e896 0003 	ldmia.w	r6, {r0, r1}
 8025700:	e883 0003 	stmia.w	r3, {r0, r1}
 8025704:	4611      	mov	r1, r2
 8025706:	4618      	mov	r0, r3
 8025708:	f7ec ff48 	bl	801259c <_ZN8touchgfx4RectaNERKS0_>
 802570c:	f9bd b010 	ldrsh.w	fp, [sp, #16]
 8025710:	f9b4 2000 	ldrsh.w	r2, [r4]
 8025714:	f9bd a012 	ldrsh.w	sl, [sp, #18]
 8025718:	455a      	cmp	r2, fp
 802571a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 802571e:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8025722:	f040 8096 	bne.w	8025852 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 8025726:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 802572a:	4553      	cmp	r3, sl
 802572c:	f040 8091 	bne.w	8025852 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 8025730:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8025734:	4543      	cmp	r3, r8
 8025736:	f040 808c 	bne.w	8025852 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 802573a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802573e:	42bb      	cmp	r3, r7
 8025740:	f040 8087 	bne.w	8025852 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 8025744:	4628      	mov	r0, r5
 8025746:	f7ff fef7 	bl	8025538 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 802574a:	6861      	ldr	r1, [r4, #4]
 802574c:	4602      	mov	r2, r0
 802574e:	4633      	mov	r3, r6
 8025750:	6820      	ldr	r0, [r4, #0]
 8025752:	c303      	stmia	r3!, {r0, r1}
 8025754:	4611      	mov	r1, r2
 8025756:	4630      	mov	r0, r6
 8025758:	f7ec ff20 	bl	801259c <_ZN8touchgfx4RectaNERKS0_>
 802575c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8025760:	2b00      	cmp	r3, #0
 8025762:	d09e      	beq.n	80256a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8025764:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8025768:	2b00      	cmp	r3, #0
 802576a:	d09a      	beq.n	80256a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 802576c:	4628      	mov	r0, r5
 802576e:	f7ff ff01 	bl	8025574 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8025772:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8025776:	1a18      	subs	r0, r3, r0
 8025778:	f8ad 0008 	strh.w	r0, [sp, #8]
 802577c:	4628      	mov	r0, r5
 802577e:	f7ff ff0d 	bl	802559c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8025782:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8025786:	4631      	mov	r1, r6
 8025788:	1a18      	subs	r0, r3, r0
 802578a:	f8ad 000a 	strh.w	r0, [sp, #10]
 802578e:	4628      	mov	r0, r5
 8025790:	682b      	ldr	r3, [r5, #0]
 8025792:	689b      	ldr	r3, [r3, #8]
 8025794:	4798      	blx	r3
 8025796:	e784      	b.n	80256a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8025798:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 802579c:	4553      	cmp	r3, sl
 802579e:	da10      	bge.n	80257c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x14e>
 80257a0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80257a4:	4648      	mov	r0, r9
 80257a6:	f8ad 300a 	strh.w	r3, [sp, #10]
 80257aa:	ebaa 0303 	sub.w	r3, sl, r3
 80257ae:	f8ad 100c 	strh.w	r1, [sp, #12]
 80257b2:	4631      	mov	r1, r6
 80257b4:	f8ad 2008 	strh.w	r2, [sp, #8]
 80257b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80257bc:	69ea      	ldr	r2, [r5, #28]
 80257be:	f7ff ff59 	bl	8025674 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80257c2:	f9b4 3000 	ldrsh.w	r3, [r4]
 80257c6:	455b      	cmp	r3, fp
 80257c8:	da0e      	bge.n	80257e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x174>
 80257ca:	f8ad 3008 	strh.w	r3, [sp, #8]
 80257ce:	ebab 0303 	sub.w	r3, fp, r3
 80257d2:	f8ad a00a 	strh.w	sl, [sp, #10]
 80257d6:	4631      	mov	r1, r6
 80257d8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80257dc:	4648      	mov	r0, r9
 80257de:	f8ad 700e 	strh.w	r7, [sp, #14]
 80257e2:	69ea      	ldr	r2, [r5, #28]
 80257e4:	f7ff ff46 	bl	8025674 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80257e8:	8822      	ldrh	r2, [r4, #0]
 80257ea:	44d8      	add	r8, fp
 80257ec:	88a3      	ldrh	r3, [r4, #4]
 80257ee:	fa1f f888 	uxth.w	r8, r8
 80257f2:	4413      	add	r3, r2
 80257f4:	fa0f f288 	sxth.w	r2, r8
 80257f8:	b29b      	uxth	r3, r3
 80257fa:	b219      	sxth	r1, r3
 80257fc:	4291      	cmp	r1, r2
 80257fe:	dd0e      	ble.n	802581e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8025800:	eba3 0308 	sub.w	r3, r3, r8
 8025804:	f8ad 2008 	strh.w	r2, [sp, #8]
 8025808:	f8ad a00a 	strh.w	sl, [sp, #10]
 802580c:	4631      	mov	r1, r6
 802580e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8025812:	4648      	mov	r0, r9
 8025814:	f8ad 700e 	strh.w	r7, [sp, #14]
 8025818:	69ea      	ldr	r2, [r5, #28]
 802581a:	f7ff ff2b 	bl	8025674 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 802581e:	88e2      	ldrh	r2, [r4, #6]
 8025820:	4457      	add	r7, sl
 8025822:	8863      	ldrh	r3, [r4, #2]
 8025824:	b2bf      	uxth	r7, r7
 8025826:	4413      	add	r3, r2
 8025828:	b23a      	sxth	r2, r7
 802582a:	b29b      	uxth	r3, r3
 802582c:	b219      	sxth	r1, r3
 802582e:	428a      	cmp	r2, r1
 8025830:	da88      	bge.n	8025744 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 8025832:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025836:	1bdb      	subs	r3, r3, r7
 8025838:	f9b4 0000 	ldrsh.w	r0, [r4]
 802583c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025840:	4631      	mov	r1, r6
 8025842:	f8ad 0008 	strh.w	r0, [sp, #8]
 8025846:	f8ad 200a 	strh.w	r2, [sp, #10]
 802584a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802584e:	69ea      	ldr	r2, [r5, #28]
 8025850:	e006      	b.n	8025860 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1ec>
 8025852:	f1b8 0f00 	cmp.w	r8, #0
 8025856:	d001      	beq.n	802585c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1e8>
 8025858:	2f00      	cmp	r7, #0
 802585a:	d19d      	bne.n	8025798 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x124>
 802585c:	69ea      	ldr	r2, [r5, #28]
 802585e:	4621      	mov	r1, r4
 8025860:	4648      	mov	r0, r9
 8025862:	f7ff ff07 	bl	8025674 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8025866:	e76d      	b.n	8025744 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>

08025868 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8025868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802586a:	2300      	movs	r3, #0
 802586c:	aa02      	add	r2, sp, #8
 802586e:	4604      	mov	r4, r0
 8025870:	3004      	adds	r0, #4
 8025872:	f842 3d04 	str.w	r3, [r2, #-4]!
 8025876:	460d      	mov	r5, r1
 8025878:	f7ed fa27 	bl	8012cca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 802587c:	9a01      	ldr	r2, [sp, #4]
 802587e:	b11a      	cbz	r2, 8025888 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8025880:	4629      	mov	r1, r5
 8025882:	4620      	mov	r0, r4
 8025884:	f7ff fef6 	bl	8025674 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8025888:	b003      	add	sp, #12
 802588a:	bd30      	pop	{r4, r5, pc}

0802588c <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 802588c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802588e:	4602      	mov	r2, r0
 8025890:	4604      	mov	r4, r0
 8025892:	460d      	mov	r5, r1
 8025894:	466b      	mov	r3, sp
 8025896:	f852 0f08 	ldr.w	r0, [r2, #8]!
 802589a:	6851      	ldr	r1, [r2, #4]
 802589c:	c303      	stmia	r3!, {r0, r1}
 802589e:	4629      	mov	r1, r5
 80258a0:	4668      	mov	r0, sp
 80258a2:	f7ec fe7b 	bl	801259c <_ZN8touchgfx4RectaNERKS0_>
 80258a6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80258aa:	4669      	mov	r1, sp
 80258ac:	b123      	cbz	r3, 80258b8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 80258ae:	4620      	mov	r0, r4
 80258b0:	f7ff ffda 	bl	8025868 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80258b4:	b003      	add	sp, #12
 80258b6:	bd30      	pop	{r4, r5, pc}
 80258b8:	1d20      	adds	r0, r4, #4
 80258ba:	f7ed f89a 	bl	80129f2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80258be:	e7f9      	b.n	80258b4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

080258c0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80258c0:	460b      	mov	r3, r1
 80258c2:	680a      	ldr	r2, [r1, #0]
 80258c4:	1d01      	adds	r1, r0, #4
 80258c6:	6952      	ldr	r2, [r2, #20]
 80258c8:	4618      	mov	r0, r3
 80258ca:	4710      	bx	r2

080258cc <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 80258cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80258d0:	b082      	sub	sp, #8
 80258d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80258d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80258da:	bfcc      	ite	gt
 80258dc:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 80258e0:	ee30 0a67 	vsuble.f32	s0, s0, s15
 80258e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80258e8:	edcd 7a01 	vstr	s15, [sp, #4]
 80258ec:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80258f0:	b002      	add	sp, #8
 80258f2:	4770      	bx	lr

080258f4 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>:
 80258f4:	b510      	push	{r4, lr}
 80258f6:	4298      	cmp	r0, r3
 80258f8:	eb01 0402 	add.w	r4, r1, r2
 80258fc:	b224      	sxth	r4, r4
 80258fe:	da25      	bge.n	802594c <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x58>
 8025900:	b323      	cbz	r3, 802594c <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x58>
 8025902:	ee07 0a90 	vmov	s15, r0
 8025906:	ee06 1a10 	vmov	s12, r1
 802590a:	ed9f 5a11 	vldr	s10, [pc, #68]	; 8025950 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x5c>
 802590e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8025912:	ee07 3a90 	vmov	s15, r3
 8025916:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 802591a:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8025954 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x60>
 802591e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8025922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025926:	ee06 2a90 	vmov	s13, r2
 802592a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802592e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8025932:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025936:	eea7 6a85 	vfma.f32	s12, s15, s10
 802593a:	ee67 5aa7 	vmul.f32	s11, s15, s15
 802593e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8025942:	eea6 0a87 	vfma.f32	s0, s13, s14
 8025946:	f7ff ffc1 	bl	80258cc <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 802594a:	4604      	mov	r4, r0
 802594c:	4620      	mov	r0, r4
 802594e:	bd10      	pop	{r4, pc}
 8025950:	402ce6b0 	.word	0x402ce6b0
 8025954:	3fd9cd60 	.word	0x3fd9cd60

08025958 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8025958:	b510      	push	{r4, lr}
 802595a:	4298      	cmp	r0, r3
 802595c:	eb01 0402 	add.w	r4, r1, r2
 8025960:	b224      	sxth	r4, r4
 8025962:	da1f      	bge.n	80259a4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 8025964:	b1f3      	cbz	r3, 80259a4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 8025966:	ee07 0a90 	vmov	s15, r0
 802596a:	ee06 1a10 	vmov	s12, r1
 802596e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8025972:	ee07 3a90 	vmov	s15, r3
 8025976:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 802597a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802597e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025982:	ee06 2a90 	vmov	s13, r2
 8025986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802598a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 802598e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025992:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8025996:	eea7 7a86 	vfma.f32	s14, s15, s12
 802599a:	eea6 0a87 	vfma.f32	s0, s13, s14
 802599e:	f7ff ff95 	bl	80258cc <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 80259a2:	4604      	mov	r4, r0
 80259a4:	4620      	mov	r0, r4
 80259a6:	bd10      	pop	{r4, pc}

080259a8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 80259a8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80259ac:	4b06      	ldr	r3, [pc, #24]	; (80259c8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x20>)
 80259ae:	bf08      	it	eq
 80259b0:	2300      	moveq	r3, #0
 80259b2:	f011 0f20 	tst.w	r1, #32
 80259b6:	ea40 0003 	orr.w	r0, r0, r3
 80259ba:	bf14      	ite	ne
 80259bc:	f44f 7280 	movne.w	r2, #256	; 0x100
 80259c0:	2200      	moveq	r2, #0
 80259c2:	4310      	orrs	r0, r2
 80259c4:	4770      	bx	lr
 80259c6:	bf00      	nop
 80259c8:	fffffe00 	.word	0xfffffe00

080259cc <_ZN8touchgfx9GlyphNode6setTopEs>:
 80259cc:	7b43      	ldrb	r3, [r0, #13]
 80259ce:	7201      	strb	r1, [r0, #8]
 80259d0:	b289      	uxth	r1, r1
 80259d2:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80259d6:	05ca      	lsls	r2, r1, #23
 80259d8:	bf48      	it	mi
 80259da:	f043 0320 	orrmi.w	r3, r3, #32
 80259de:	7343      	strb	r3, [r0, #13]
 80259e0:	058b      	lsls	r3, r1, #22
 80259e2:	bf42      	ittt	mi
 80259e4:	7b43      	ldrbmi	r3, [r0, #13]
 80259e6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80259ea:	7343      	strbmi	r3, [r0, #13]
 80259ec:	4770      	bx	lr
	...

080259f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80259f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80259f2:	4604      	mov	r4, r0
 80259f4:	4d1b      	ldr	r5, [pc, #108]	; (8025a64 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x74>)
 80259f6:	2700      	movs	r7, #0
 80259f8:	2601      	movs	r6, #1
 80259fa:	6863      	ldr	r3, [r4, #4]
 80259fc:	b93b      	cbnz	r3, 8025a0e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x1e>
 80259fe:	6821      	ldr	r1, [r4, #0]
 8025a00:	2900      	cmp	r1, #0
 8025a02:	d02c      	beq.n	8025a5e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 8025a04:	6828      	ldr	r0, [r5, #0]
 8025a06:	6803      	ldr	r3, [r0, #0]
 8025a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025a0a:	4798      	blx	r3
 8025a0c:	6060      	str	r0, [r4, #4]
 8025a0e:	7c23      	ldrb	r3, [r4, #16]
 8025a10:	b16b      	cbz	r3, 8025a2e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x3e>
 8025a12:	68e3      	ldr	r3, [r4, #12]
 8025a14:	b12b      	cbz	r3, 8025a22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 8025a16:	881a      	ldrh	r2, [r3, #0]
 8025a18:	b11a      	cbz	r2, 8025a22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 8025a1a:	1c9a      	adds	r2, r3, #2
 8025a1c:	60e2      	str	r2, [r4, #12]
 8025a1e:	8818      	ldrh	r0, [r3, #0]
 8025a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025a22:	6828      	ldr	r0, [r5, #0]
 8025a24:	7427      	strb	r7, [r4, #16]
 8025a26:	6803      	ldr	r3, [r0, #0]
 8025a28:	6821      	ldr	r1, [r4, #0]
 8025a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025a2c:	4798      	blx	r3
 8025a2e:	6863      	ldr	r3, [r4, #4]
 8025a30:	881a      	ldrh	r2, [r3, #0]
 8025a32:	b1a2      	cbz	r2, 8025a5e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 8025a34:	2a02      	cmp	r2, #2
 8025a36:	f103 0202 	add.w	r2, r3, #2
 8025a3a:	6062      	str	r2, [r4, #4]
 8025a3c:	d1ef      	bne.n	8025a1e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2e>
 8025a3e:	6828      	ldr	r0, [r5, #0]
 8025a40:	6803      	ldr	r3, [r0, #0]
 8025a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8025a44:	68a3      	ldr	r3, [r4, #8]
 8025a46:	1d19      	adds	r1, r3, #4
 8025a48:	60a1      	str	r1, [r4, #8]
 8025a4a:	6819      	ldr	r1, [r3, #0]
 8025a4c:	4790      	blx	r2
 8025a4e:	60e0      	str	r0, [r4, #12]
 8025a50:	2800      	cmp	r0, #0
 8025a52:	d0d2      	beq.n	80259fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 8025a54:	8803      	ldrh	r3, [r0, #0]
 8025a56:	2b00      	cmp	r3, #0
 8025a58:	d0cf      	beq.n	80259fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 8025a5a:	7426      	strb	r6, [r4, #16]
 8025a5c:	e7cd      	b.n	80259fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 8025a5e:	2000      	movs	r0, #0
 8025a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025a62:	bf00      	nop
 8025a64:	2000cf78 	.word	0x2000cf78

08025a68 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8025a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025a6a:	4605      	mov	r5, r0
 8025a6c:	4608      	mov	r0, r1
 8025a6e:	b309      	cbz	r1, 8025ab4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x4c>
 8025a70:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8025a74:	460b      	mov	r3, r1
 8025a76:	f101 0708 	add.w	r7, r1, #8
 8025a7a:	4622      	mov	r2, r4
 8025a7c:	6818      	ldr	r0, [r3, #0]
 8025a7e:	3308      	adds	r3, #8
 8025a80:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8025a84:	4626      	mov	r6, r4
 8025a86:	42bb      	cmp	r3, r7
 8025a88:	c603      	stmia	r6!, {r0, r1}
 8025a8a:	4634      	mov	r4, r6
 8025a8c:	d1f6      	bne.n	8025a7c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8025a8e:	6818      	ldr	r0, [r3, #0]
 8025a90:	6030      	str	r0, [r6, #0]
 8025a92:	4610      	mov	r0, r2
 8025a94:	889b      	ldrh	r3, [r3, #4]
 8025a96:	80b3      	strh	r3, [r6, #4]
 8025a98:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8025a9c:	f895 1046 	ldrb.w	r1, [r5, #70]	; 0x46
 8025aa0:	f013 0f08 	tst.w	r3, #8
 8025aa4:	bf14      	ite	ne
 8025aa6:	f44f 7380 	movne.w	r3, #256	; 0x100
 8025aaa:	2300      	moveq	r3, #0
 8025aac:	430b      	orrs	r3, r1
 8025aae:	425b      	negs	r3, r3
 8025ab0:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8025ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08025ab6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8025ab6:	b538      	push	{r3, r4, r5, lr}
 8025ab8:	460c      	mov	r4, r1
 8025aba:	6811      	ldr	r1, [r2, #0]
 8025abc:	4610      	mov	r0, r2
 8025abe:	68cd      	ldr	r5, [r1, #12]
 8025ac0:	4619      	mov	r1, r3
 8025ac2:	47a8      	blx	r5
 8025ac4:	2800      	cmp	r0, #0
 8025ac6:	bf08      	it	eq
 8025ac8:	4620      	moveq	r0, r4
 8025aca:	bd38      	pop	{r3, r4, r5, pc}

08025acc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8025acc:	b570      	push	{r4, r5, r6, lr}
 8025ace:	8810      	ldrh	r0, [r2, #0]
 8025ad0:	4283      	cmp	r3, r0
 8025ad2:	db17      	blt.n	8025b04 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8025ad4:	1e48      	subs	r0, r1, #1
 8025ad6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8025ada:	4283      	cmp	r3, r0
 8025adc:	dc12      	bgt.n	8025b04 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8025ade:	2400      	movs	r4, #0
 8025ae0:	428c      	cmp	r4, r1
 8025ae2:	da0f      	bge.n	8025b04 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8025ae4:	1860      	adds	r0, r4, r1
 8025ae6:	1040      	asrs	r0, r0, #1
 8025ae8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8025aec:	0085      	lsls	r5, r0, #2
 8025aee:	42b3      	cmp	r3, r6
 8025af0:	dd02      	ble.n	8025af8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8025af2:	3001      	adds	r0, #1
 8025af4:	b284      	uxth	r4, r0
 8025af6:	e7f3      	b.n	8025ae0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8025af8:	d102      	bne.n	8025b00 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 8025afa:	442a      	add	r2, r5
 8025afc:	8850      	ldrh	r0, [r2, #2]
 8025afe:	bd70      	pop	{r4, r5, r6, pc}
 8025b00:	b281      	uxth	r1, r0
 8025b02:	e7ed      	b.n	8025ae0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8025b04:	2000      	movs	r0, #0
 8025b06:	bd70      	pop	{r4, r5, r6, pc}

08025b08 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 8025b08:	b510      	push	{r4, lr}
 8025b0a:	8ac3      	ldrh	r3, [r0, #22]
 8025b0c:	4299      	cmp	r1, r3
 8025b0e:	db05      	blt.n	8025b1c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 8025b10:	4b07      	ldr	r3, [pc, #28]	; (8025b30 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 8025b12:	21ee      	movs	r1, #238	; 0xee
 8025b14:	4a07      	ldr	r2, [pc, #28]	; (8025b34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 8025b16:	4808      	ldr	r0, [pc, #32]	; (8025b38 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 8025b18:	f005 faee 	bl	802b0f8 <__assert_func>
 8025b1c:	8a83      	ldrh	r3, [r0, #20]
 8025b1e:	240a      	movs	r4, #10
 8025b20:	4419      	add	r1, r3
 8025b22:	fbb1 f3f4 	udiv	r3, r1, r4
 8025b26:	fb04 1113 	mls	r1, r4, r3, r1
 8025b2a:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8025b2e:	bd10      	pop	{r4, pc}
 8025b30:	0802f235 	.word	0x0802f235
 8025b34:	0802f66a 	.word	0x0802f66a
 8025b38:	0802f243 	.word	0x0802f243

08025b3c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 8025b3c:	b508      	push	{r3, lr}
 8025b3e:	8ac3      	ldrh	r3, [r0, #22]
 8025b40:	4299      	cmp	r1, r3
 8025b42:	db05      	blt.n	8025b50 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 8025b44:	4b07      	ldr	r3, [pc, #28]	; (8025b64 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 8025b46:	21c4      	movs	r1, #196	; 0xc4
 8025b48:	4a07      	ldr	r2, [pc, #28]	; (8025b68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 8025b4a:	4808      	ldr	r0, [pc, #32]	; (8025b6c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 8025b4c:	f005 fad4 	bl	802b0f8 <__assert_func>
 8025b50:	8a83      	ldrh	r3, [r0, #20]
 8025b52:	220a      	movs	r2, #10
 8025b54:	4419      	add	r1, r3
 8025b56:	fbb1 f3f2 	udiv	r3, r1, r2
 8025b5a:	fb02 1113 	mls	r1, r2, r3, r1
 8025b5e:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8025b62:	bd08      	pop	{r3, pc}
 8025b64:	0802f235 	.word	0x0802f235
 8025b68:	0802f3b6 	.word	0x0802f3b6
 8025b6c:	0802f243 	.word	0x0802f243

08025b70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8025b70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b74:	4604      	mov	r4, r0
 8025b76:	4689      	mov	r9, r1
 8025b78:	4616      	mov	r6, r2
 8025b7a:	b942      	cbnz	r2, 8025b8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8025b7c:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8025b80:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8025b84:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8025b88:	4630      	mov	r0, r6
 8025b8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b8e:	8895      	ldrh	r5, [r2, #4]
 8025b90:	4613      	mov	r3, r2
 8025b92:	f100 0240 	add.w	r2, r0, #64	; 0x40
 8025b96:	f106 0e08 	add.w	lr, r6, #8
 8025b9a:	4692      	mov	sl, r2
 8025b9c:	6818      	ldr	r0, [r3, #0]
 8025b9e:	3308      	adds	r3, #8
 8025ba0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8025ba4:	4617      	mov	r7, r2
 8025ba6:	4573      	cmp	r3, lr
 8025ba8:	c703      	stmia	r7!, {r0, r1}
 8025baa:	463a      	mov	r2, r7
 8025bac:	d1f6      	bne.n	8025b9c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2c>
 8025bae:	6818      	ldr	r0, [r3, #0]
 8025bb0:	6038      	str	r0, [r7, #0]
 8025bb2:	889b      	ldrh	r3, [r3, #4]
 8025bb4:	80bb      	strh	r3, [r7, #4]
 8025bb6:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 8025bba:	f894 b04d 	ldrb.w	fp, [r4, #77]	; 0x4d
 8025bbe:	18eb      	adds	r3, r5, r3
 8025bc0:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 8025bc4:	f01b 0f10 	tst.w	fp, #16
 8025bc8:	b29a      	uxth	r2, r3
 8025bca:	bf14      	ite	ne
 8025bcc:	f44f 7880 	movne.w	r8, #256	; 0x100
 8025bd0:	f04f 0800 	moveq.w	r8, #0
 8025bd4:	2a1d      	cmp	r2, #29
 8025bd6:	ea48 0801 	orr.w	r8, r8, r1
 8025bda:	fa1f f788 	uxth.w	r7, r8
 8025bde:	d843      	bhi.n	8025c68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf8>
 8025be0:	2301      	movs	r3, #1
 8025be2:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8025be6:	4093      	lsls	r3, r2
 8025be8:	4a54      	ldr	r2, [pc, #336]	; (8025d3c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>)
 8025bea:	4213      	tst	r3, r2
 8025bec:	d114      	bne.n	8025c18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa8>
 8025bee:	f413 7f60 	tst.w	r3, #896	; 0x380
 8025bf2:	d03d      	beq.n	8025c70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x100>
 8025bf4:	fa1f f888 	uxth.w	r8, r8
 8025bf8:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8025bfc:	4650      	mov	r0, sl
 8025bfe:	eba1 0108 	sub.w	r1, r1, r8
 8025c02:	b209      	sxth	r1, r1
 8025c04:	f7ff fee2 	bl	80259cc <_ZN8touchgfx9GlyphNode6setTopEs>
 8025c08:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8025c0c:	1bc7      	subs	r7, r0, r7
 8025c0e:	eba7 0808 	sub.w	r8, r7, r8
 8025c12:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
 8025c16:	e025      	b.n	8025c64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 8025c18:	2100      	movs	r1, #0
 8025c1a:	f104 001a 	add.w	r0, r4, #26
 8025c1e:	f7ff ff8d 	bl	8025b3c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8025c22:	f640 6333 	movw	r3, #3635	; 0xe33
 8025c26:	4601      	mov	r1, r0
 8025c28:	4298      	cmp	r0, r3
 8025c2a:	d10a      	bne.n	8025c42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd2>
 8025c2c:	f8d9 3000 	ldr.w	r3, [r9]
 8025c30:	4648      	mov	r0, r9
 8025c32:	68db      	ldr	r3, [r3, #12]
 8025c34:	4798      	blx	r3
 8025c36:	7b41      	ldrb	r1, [r0, #13]
 8025c38:	7a00      	ldrb	r0, [r0, #8]
 8025c3a:	f7ff feb5 	bl	80259a8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8025c3e:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8025c42:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8025c46:	4650      	mov	r0, sl
 8025c48:	4439      	add	r1, r7
 8025c4a:	4441      	add	r1, r8
 8025c4c:	b209      	sxth	r1, r1
 8025c4e:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 8025c52:	f7ff febb 	bl	80259cc <_ZN8touchgfx9GlyphNode6setTopEs>
 8025c56:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8025c5a:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8025c5e:	1a9b      	subs	r3, r3, r2
 8025c60:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8025c64:	4656      	mov	r6, sl
 8025c66:	e78f      	b.n	8025b88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8025c68:	f640 631b 	movw	r3, #3611	; 0xe1b
 8025c6c:	429d      	cmp	r5, r3
 8025c6e:	d005      	beq.n	8025c7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x10c>
 8025c70:	f025 0302 	bic.w	r3, r5, #2
 8025c74:	f640 621d 	movw	r2, #3613	; 0xe1d
 8025c78:	4293      	cmp	r3, r2
 8025c7a:	d11c      	bne.n	8025cb6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8025c7c:	1e6b      	subs	r3, r5, #1
 8025c7e:	464a      	mov	r2, r9
 8025c80:	4631      	mov	r1, r6
 8025c82:	4620      	mov	r0, r4
 8025c84:	b29b      	uxth	r3, r3
 8025c86:	f7ff ff16 	bl	8025ab6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8025c8a:	7b41      	ldrb	r1, [r0, #13]
 8025c8c:	7a00      	ldrb	r0, [r0, #8]
 8025c8e:	f7ff fe8b 	bl	80259a8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8025c92:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 8025c96:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 8025c9a:	2b00      	cmp	r3, #0
 8025c9c:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8025ca0:	bfb4      	ite	lt
 8025ca2:	f44f 7380 	movlt.w	r3, #256	; 0x100
 8025ca6:	2300      	movge	r3, #0
 8025ca8:	4313      	orrs	r3, r2
 8025caa:	115a      	asrs	r2, r3, #5
 8025cac:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8025cb0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8025cb4:	e036      	b.n	8025d24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>
 8025cb6:	4659      	mov	r1, fp
 8025cb8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8025cbc:	f7ff fe74 	bl	80259a8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8025cc0:	f025 0310 	bic.w	r3, r5, #16
 8025cc4:	f640 6209 	movw	r2, #3593	; 0xe09
 8025cc8:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8025ccc:	4293      	cmp	r3, r2
 8025cce:	d003      	beq.n	8025cd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x168>
 8025cd0:	f640 6313 	movw	r3, #3603	; 0xe13
 8025cd4:	429d      	cmp	r5, r3
 8025cd6:	d12f      	bne.n	8025d38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c8>
 8025cd8:	f01b 0f80 	tst.w	fp, #128	; 0x80
 8025cdc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8025ce0:	464a      	mov	r2, r9
 8025ce2:	4631      	mov	r1, r6
 8025ce4:	bf14      	ite	ne
 8025ce6:	f44f 7880 	movne.w	r8, #256	; 0x100
 8025cea:	f04f 0800 	moveq.w	r8, #0
 8025cee:	4620      	mov	r0, r4
 8025cf0:	ea48 0803 	orr.w	r8, r8, r3
 8025cf4:	f640 6313 	movw	r3, #3603	; 0xe13
 8025cf8:	429d      	cmp	r5, r3
 8025cfa:	bf16      	itet	ne
 8025cfc:	f105 33ff 	addne.w	r3, r5, #4294967295
 8025d00:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8025d04:	b29b      	uxthne	r3, r3
 8025d06:	f7ff fed6 	bl	8025ab6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8025d0a:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8025d0e:	7a82      	ldrb	r2, [r0, #10]
 8025d10:	2b00      	cmp	r3, #0
 8025d12:	bfb4      	ite	lt
 8025d14:	f44f 7380 	movlt.w	r3, #256	; 0x100
 8025d18:	2300      	movge	r3, #0
 8025d1a:	4313      	orrs	r3, r2
 8025d1c:	eba8 0803 	sub.w	r8, r8, r3
 8025d20:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 8025d24:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8025d28:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8025d2c:	f7ff fe3c 	bl	80259a8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8025d30:	1bc0      	subs	r0, r0, r7
 8025d32:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 8025d36:	e795      	b.n	8025c64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 8025d38:	2300      	movs	r3, #0
 8025d3a:	e7b9      	b.n	8025cb0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x140>
 8025d3c:	3fc00079 	.word	0x3fc00079

08025d40 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8025d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025d44:	460d      	mov	r5, r1
 8025d46:	2600      	movs	r6, #0
 8025d48:	f102 3eff 	add.w	lr, r2, #4294967295
 8025d4c:	b2b1      	uxth	r1, r6
 8025d4e:	4291      	cmp	r1, r2
 8025d50:	da1a      	bge.n	8025d88 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x48>
 8025d52:	ebae 0101 	sub.w	r1, lr, r1
 8025d56:	f835 7b02 	ldrh.w	r7, [r5], #2
 8025d5a:	b28c      	uxth	r4, r1
 8025d5c:	8b01      	ldrh	r1, [r0, #24]
 8025d5e:	428c      	cmp	r4, r1
 8025d60:	db05      	blt.n	8025d6e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2e>
 8025d62:	4b14      	ldr	r3, [pc, #80]	; (8025db4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 8025d64:	21c4      	movs	r1, #196	; 0xc4
 8025d66:	4a14      	ldr	r2, [pc, #80]	; (8025db8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x78>)
 8025d68:	4814      	ldr	r0, [pc, #80]	; (8025dbc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7c>)
 8025d6a:	f005 f9c5 	bl	802b0f8 <__assert_func>
 8025d6e:	8ac1      	ldrh	r1, [r0, #22]
 8025d70:	3601      	adds	r6, #1
 8025d72:	4421      	add	r1, r4
 8025d74:	f001 0101 	and.w	r1, r1, #1
 8025d78:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8025d7c:	8a49      	ldrh	r1, [r1, #18]
 8025d7e:	42b9      	cmp	r1, r7
 8025d80:	d0e4      	beq.n	8025d4c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xc>
 8025d82:	2000      	movs	r0, #0
 8025d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025d88:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8025d8c:	2600      	movs	r6, #0
 8025d8e:	f100 041a 	add.w	r4, r0, #26
 8025d92:	441f      	add	r7, r3
 8025d94:	b2b1      	uxth	r1, r6
 8025d96:	42b9      	cmp	r1, r7
 8025d98:	da08      	bge.n	8025dac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>
 8025d9a:	f835 8016 	ldrh.w	r8, [r5, r6, lsl #1]
 8025d9e:	4620      	mov	r0, r4
 8025da0:	f7ff fecc 	bl	8025b3c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8025da4:	3601      	adds	r6, #1
 8025da6:	4580      	cmp	r8, r0
 8025da8:	d0f4      	beq.n	8025d94 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x54>
 8025daa:	e7ea      	b.n	8025d82 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8025dac:	2001      	movs	r0, #1
 8025dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025db2:	bf00      	nop
 8025db4:	0802f235 	.word	0x0802f235
 8025db8:	0802f7cc 	.word	0x0802f7cc
 8025dbc:	0802f243 	.word	0x0802f243

08025dc0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 8025dc0:	b538      	push	{r3, r4, r5, lr}
 8025dc2:	8ac3      	ldrh	r3, [r0, #22]
 8025dc4:	428b      	cmp	r3, r1
 8025dc6:	da05      	bge.n	8025dd4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 8025dc8:	4b08      	ldr	r3, [pc, #32]	; (8025dec <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 8025dca:	21c9      	movs	r1, #201	; 0xc9
 8025dcc:	4a08      	ldr	r2, [pc, #32]	; (8025df0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 8025dce:	4809      	ldr	r0, [pc, #36]	; (8025df4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 8025dd0:	f005 f992 	bl	802b0f8 <__assert_func>
 8025dd4:	8a82      	ldrh	r2, [r0, #20]
 8025dd6:	250a      	movs	r5, #10
 8025dd8:	1a5b      	subs	r3, r3, r1
 8025dda:	440a      	add	r2, r1
 8025ddc:	82c3      	strh	r3, [r0, #22]
 8025dde:	fbb2 f4f5 	udiv	r4, r2, r5
 8025de2:	fb05 2214 	mls	r2, r5, r4, r2
 8025de6:	8282      	strh	r2, [r0, #20]
 8025de8:	bd38      	pop	{r3, r4, r5, pc}
 8025dea:	bf00      	nop
 8025dec:	0802f229 	.word	0x0802f229
 8025df0:	0802f5e5 	.word	0x0802f5e5
 8025df4:	0802f243 	.word	0x0802f243

08025df8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 8025df8:	b538      	push	{r3, r4, r5, lr}
 8025dfa:	8ac3      	ldrh	r3, [r0, #22]
 8025dfc:	2b09      	cmp	r3, #9
 8025dfe:	d905      	bls.n	8025e0c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 8025e00:	4b08      	ldr	r3, [pc, #32]	; (8025e24 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 8025e02:	21e8      	movs	r1, #232	; 0xe8
 8025e04:	4a08      	ldr	r2, [pc, #32]	; (8025e28 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 8025e06:	4809      	ldr	r0, [pc, #36]	; (8025e2c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 8025e08:	f005 f976 	bl	802b0f8 <__assert_func>
 8025e0c:	8a82      	ldrh	r2, [r0, #20]
 8025e0e:	250a      	movs	r5, #10
 8025e10:	441a      	add	r2, r3
 8025e12:	3301      	adds	r3, #1
 8025e14:	fbb2 f4f5 	udiv	r4, r2, r5
 8025e18:	fb05 2214 	mls	r2, r5, r4, r2
 8025e1c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 8025e20:	82c3      	strh	r3, [r0, #22]
 8025e22:	bd38      	pop	{r3, r4, r5, pc}
 8025e24:	0802f21d 	.word	0x0802f21d
 8025e28:	0802f535 	.word	0x0802f535
 8025e2c:	0802f243 	.word	0x0802f243

08025e30 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8025e30:	b538      	push	{r3, r4, r5, lr}
 8025e32:	4604      	mov	r4, r0
 8025e34:	f100 051a 	add.w	r5, r0, #26
 8025e38:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8025e3a:	2b0a      	cmp	r3, #10
 8025e3c:	d01c      	beq.n	8025e78 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8025e3e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8025e40:	b962      	cbnz	r2, 8025e5c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 8025e42:	f104 051a 	add.w	r5, r4, #26
 8025e46:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8025e48:	2b0a      	cmp	r3, #10
 8025e4a:	d015      	beq.n	8025e78 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8025e4c:	4620      	mov	r0, r4
 8025e4e:	f7ff fdcf 	bl	80259f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8025e52:	4601      	mov	r1, r0
 8025e54:	4628      	mov	r0, r5
 8025e56:	f7ff ffcf 	bl	8025df8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8025e5a:	e7f4      	b.n	8025e46 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 8025e5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8025e5e:	3a01      	subs	r2, #1
 8025e60:	4628      	mov	r0, r5
 8025e62:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8025e66:	3301      	adds	r3, #1
 8025e68:	f003 0301 	and.w	r3, r3, #1
 8025e6c:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 8025e6e:	8722      	strh	r2, [r4, #56]	; 0x38
 8025e70:	86e3      	strh	r3, [r4, #54]	; 0x36
 8025e72:	f7ff ffc1 	bl	8025df8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8025e76:	e7df      	b.n	8025e38 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 8025e78:	bd38      	pop	{r3, r4, r5, pc}
	...

08025e7c <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 8025e7c:	2300      	movs	r3, #0
 8025e7e:	b510      	push	{r4, lr}
 8025e80:	6043      	str	r3, [r0, #4]
 8025e82:	4604      	mov	r4, r0
 8025e84:	60c3      	str	r3, [r0, #12]
 8025e86:	7403      	strb	r3, [r0, #16]
 8025e88:	8603      	strh	r3, [r0, #48]	; 0x30
 8025e8a:	8303      	strh	r3, [r0, #24]
 8025e8c:	8703      	strh	r3, [r0, #56]	; 0x38
 8025e8e:	f7ff ffcf 	bl	8025e30 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8025e92:	4a0a      	ldr	r2, [pc, #40]	; (8025ebc <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 8025e94:	6813      	ldr	r3, [r2, #0]
 8025e96:	4611      	mov	r1, r2
 8025e98:	b913      	cbnz	r3, 8025ea0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 8025e9a:	6852      	ldr	r2, [r2, #4]
 8025e9c:	07d2      	lsls	r2, r2, #31
 8025e9e:	d50c      	bpl.n	8025eba <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3e>
 8025ea0:	6848      	ldr	r0, [r1, #4]
 8025ea2:	f010 0f01 	tst.w	r0, #1
 8025ea6:	ea4f 0060 	mov.w	r0, r0, asr #1
 8025eaa:	bf18      	it	ne
 8025eac:	5822      	ldrne	r2, [r4, r0]
 8025eae:	4420      	add	r0, r4
 8025eb0:	bf18      	it	ne
 8025eb2:	58d3      	ldrne	r3, [r2, r3]
 8025eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025eb8:	4718      	bx	r3
 8025eba:	bd10      	pop	{r4, pc}
 8025ebc:	20008d9c 	.word	0x20008d9c

08025ec0 <_ZN8touchgfx12TextProviderC1Ev>:
 8025ec0:	2300      	movs	r3, #0
 8025ec2:	2201      	movs	r2, #1
 8025ec4:	b510      	push	{r4, lr}
 8025ec6:	4604      	mov	r4, r0
 8025ec8:	6003      	str	r3, [r0, #0]
 8025eca:	6043      	str	r3, [r0, #4]
 8025ecc:	60c3      	str	r3, [r0, #12]
 8025ece:	7403      	strb	r3, [r0, #16]
 8025ed0:	82c3      	strh	r3, [r0, #22]
 8025ed2:	8303      	strh	r3, [r0, #24]
 8025ed4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8025ed6:	8603      	strh	r3, [r0, #48]	; 0x30
 8025ed8:	86c3      	strh	r3, [r0, #54]	; 0x36
 8025eda:	8703      	strh	r3, [r0, #56]	; 0x38
 8025edc:	63c3      	str	r3, [r0, #60]	; 0x3c
 8025ede:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8025ee2:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8025ee6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8025eea:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8025eee:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 8025ef2:	f7ff ffc3 	bl	8025e7c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8025ef6:	4620      	mov	r0, r4
 8025ef8:	bd10      	pop	{r4, pc}

08025efa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 8025efa:	b410      	push	{r4}
 8025efc:	6082      	str	r2, [r0, #8]
 8025efe:	6001      	str	r1, [r0, #0]
 8025f00:	63c3      	str	r3, [r0, #60]	; 0x3c
 8025f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025f06:	f7ff bfb9 	b.w	8025e7c <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

08025f0c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 8025f0c:	b508      	push	{r3, lr}
 8025f0e:	88c2      	ldrh	r2, [r0, #6]
 8025f10:	440a      	add	r2, r1
 8025f12:	2a02      	cmp	r2, #2
 8025f14:	dd05      	ble.n	8025f22 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 8025f16:	4b06      	ldr	r3, [pc, #24]	; (8025f30 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 8025f18:	21dd      	movs	r1, #221	; 0xdd
 8025f1a:	4a06      	ldr	r2, [pc, #24]	; (8025f34 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 8025f1c:	4806      	ldr	r0, [pc, #24]	; (8025f38 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 8025f1e:	f005 f8eb 	bl	802b0f8 <__assert_func>
 8025f22:	8883      	ldrh	r3, [r0, #4]
 8025f24:	80c2      	strh	r2, [r0, #6]
 8025f26:	1a59      	subs	r1, r3, r1
 8025f28:	f001 0101 	and.w	r1, r1, #1
 8025f2c:	8081      	strh	r1, [r0, #4]
 8025f2e:	bd08      	pop	{r3, pc}
 8025f30:	0802f26f 	.word	0x0802f26f
 8025f34:	0802f744 	.word	0x0802f744
 8025f38:	0802f243 	.word	0x0802f243

08025f3c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 8025f3c:	b508      	push	{r3, lr}
 8025f3e:	88c3      	ldrh	r3, [r0, #6]
 8025f40:	4299      	cmp	r1, r3
 8025f42:	db05      	blt.n	8025f50 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 8025f44:	4b06      	ldr	r3, [pc, #24]	; (8025f60 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 8025f46:	21ee      	movs	r1, #238	; 0xee
 8025f48:	4a06      	ldr	r2, [pc, #24]	; (8025f64 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 8025f4a:	4807      	ldr	r0, [pc, #28]	; (8025f68 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 8025f4c:	f005 f8d4 	bl	802b0f8 <__assert_func>
 8025f50:	8883      	ldrh	r3, [r0, #4]
 8025f52:	4419      	add	r1, r3
 8025f54:	f001 0101 	and.w	r1, r1, #1
 8025f58:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8025f5c:	bd08      	pop	{r3, pc}
 8025f5e:	bf00      	nop
 8025f60:	0802f235 	.word	0x0802f235
 8025f64:	0802f89e 	.word	0x0802f89e
 8025f68:	0802f243 	.word	0x0802f243

08025f6c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8025f6c:	b570      	push	{r4, r5, r6, lr}
 8025f6e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8025f70:	4604      	mov	r4, r0
 8025f72:	b92a      	cbnz	r2, 8025f80 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8025f74:	4b12      	ldr	r3, [pc, #72]	; (8025fc0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 8025f76:	21cf      	movs	r1, #207	; 0xcf
 8025f78:	4a12      	ldr	r2, [pc, #72]	; (8025fc4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8025f7a:	4813      	ldr	r0, [pc, #76]	; (8025fc8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8025f7c:	f005 f8bc 	bl	802b0f8 <__assert_func>
 8025f80:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8025f82:	260a      	movs	r6, #10
 8025f84:	3a01      	subs	r2, #1
 8025f86:	3412      	adds	r4, #18
 8025f88:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8025f8c:	3301      	adds	r3, #1
 8025f8e:	8b4d      	ldrh	r5, [r1, #26]
 8025f90:	8602      	strh	r2, [r0, #48]	; 0x30
 8025f92:	fbb3 f1f6 	udiv	r1, r3, r6
 8025f96:	fb06 3311 	mls	r3, r6, r1, r3
 8025f9a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8025f9c:	f7ff ff48 	bl	8025e30 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8025fa0:	88e3      	ldrh	r3, [r4, #6]
 8025fa2:	2101      	movs	r1, #1
 8025fa4:	2b02      	cmp	r3, #2
 8025fa6:	bf04      	itt	eq
 8025fa8:	2301      	moveq	r3, #1
 8025faa:	80e3      	strheq	r3, [r4, #6]
 8025fac:	4620      	mov	r0, r4
 8025fae:	f7ff ffad 	bl	8025f0c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8025fb2:	4620      	mov	r0, r4
 8025fb4:	462a      	mov	r2, r5
 8025fb6:	2100      	movs	r1, #0
 8025fb8:	f7ff ffc0 	bl	8025f3c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8025fbc:	4628      	mov	r0, r5
 8025fbe:	bd70      	pop	{r4, r5, r6, pc}
 8025fc0:	0802f214 	.word	0x0802f214
 8025fc4:	0802f489 	.word	0x0802f489
 8025fc8:	0802f243 	.word	0x0802f243

08025fcc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8025fcc:	428a      	cmp	r2, r1
 8025fce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025fd2:	4604      	mov	r4, r0
 8025fd4:	460e      	mov	r6, r1
 8025fd6:	4615      	mov	r5, r2
 8025fd8:	469a      	mov	sl, r3
 8025fda:	dd2b      	ble.n	8026034 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 8025fdc:	eba2 0801 	sub.w	r8, r2, r1
 8025fe0:	2700      	movs	r7, #0
 8025fe2:	f100 0932 	add.w	r9, r0, #50	; 0x32
 8025fe6:	f04f 0b0a 	mov.w	fp, #10
 8025fea:	fa1f f888 	uxth.w	r8, r8
 8025fee:	b2bb      	uxth	r3, r7
 8025ff0:	4543      	cmp	r3, r8
 8025ff2:	da1f      	bge.n	8026034 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 8025ff4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8025ff6:	3701      	adds	r7, #1
 8025ff8:	b92b      	cbnz	r3, 8026006 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x3a>
 8025ffa:	4b22      	ldr	r3, [pc, #136]	; (8026084 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 8025ffc:	21d7      	movs	r1, #215	; 0xd7
 8025ffe:	4a22      	ldr	r2, [pc, #136]	; (8026088 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 8026000:	4822      	ldr	r0, [pc, #136]	; (802608c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 8026002:	f005 f879 	bl	802b0f8 <__assert_func>
 8026006:	3b01      	subs	r3, #1
 8026008:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 802600a:	4648      	mov	r0, r9
 802600c:	2101      	movs	r1, #1
 802600e:	b29b      	uxth	r3, r3
 8026010:	441a      	add	r2, r3
 8026012:	8623      	strh	r3, [r4, #48]	; 0x30
 8026014:	fbb2 f3fb 	udiv	r3, r2, fp
 8026018:	fb0b 2313 	mls	r3, fp, r3, r2
 802601c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8026020:	8b5a      	ldrh	r2, [r3, #26]
 8026022:	9201      	str	r2, [sp, #4]
 8026024:	f7ff ff72 	bl	8025f0c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8026028:	9a01      	ldr	r2, [sp, #4]
 802602a:	2100      	movs	r1, #0
 802602c:	4648      	mov	r0, r9
 802602e:	f7ff ff85 	bl	8025f3c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8026032:	e7dc      	b.n	8025fee <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8026034:	f104 071a 	add.w	r7, r4, #26
 8026038:	4631      	mov	r1, r6
 802603a:	260a      	movs	r6, #10
 802603c:	4638      	mov	r0, r7
 802603e:	f7ff febf 	bl	8025dc0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 8026042:	b1c5      	cbz	r5, 8026076 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8026044:	3d01      	subs	r5, #1
 8026046:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8026048:	b2ad      	uxth	r5, r5
 802604a:	2b09      	cmp	r3, #9
 802604c:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 8026050:	dd03      	ble.n	802605a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 8026052:	4b0f      	ldr	r3, [pc, #60]	; (8026090 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 8026054:	21dd      	movs	r1, #221	; 0xdd
 8026056:	4a0f      	ldr	r2, [pc, #60]	; (8026094 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 8026058:	e7d2      	b.n	8026000 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x34>
 802605a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 802605c:	3301      	adds	r3, #1
 802605e:	3109      	adds	r1, #9
 8026060:	8623      	strh	r3, [r4, #48]	; 0x30
 8026062:	fbb1 f0f6 	udiv	r0, r1, r6
 8026066:	fb06 1110 	mls	r1, r6, r0, r1
 802606a:	4638      	mov	r0, r7
 802606c:	85e1      	strh	r1, [r4, #46]	; 0x2e
 802606e:	2100      	movs	r1, #0
 8026070:	f7ff fd4a 	bl	8025b08 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8026074:	e7e5      	b.n	8026042 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 8026076:	4620      	mov	r0, r4
 8026078:	b003      	add	sp, #12
 802607a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802607e:	f7ff bed7 	b.w	8025e30 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8026082:	bf00      	nop
 8026084:	0802f214 	.word	0x0802f214
 8026088:	0802f30b 	.word	0x0802f30b
 802608c:	0802f243 	.word	0x0802f243
 8026090:	0802f26f 	.word	0x0802f26f
 8026094:	0802f282 	.word	0x0802f282

08026098 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8026098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802609c:	4605      	mov	r5, r0
 802609e:	4616      	mov	r6, r2
 80260a0:	1c8c      	adds	r4, r1, #2
 80260a2:	8809      	ldrh	r1, [r1, #0]
 80260a4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80260a8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80260ac:	42b3      	cmp	r3, r6
 80260ae:	d124      	bne.n	80260fa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80260b0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80260b4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80260b8:	f001 070f 	and.w	r7, r1, #15
 80260bc:	4652      	mov	r2, sl
 80260be:	f8cd 8000 	str.w	r8, [sp]
 80260c2:	464b      	mov	r3, r9
 80260c4:	4621      	mov	r1, r4
 80260c6:	4628      	mov	r0, r5
 80260c8:	f7ff fe3a 	bl	8025d40 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80260cc:	4683      	mov	fp, r0
 80260ce:	b168      	cbz	r0, 80260ec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80260d0:	eb0a 0109 	add.w	r1, sl, r9
 80260d4:	463a      	mov	r2, r7
 80260d6:	4628      	mov	r0, r5
 80260d8:	4441      	add	r1, r8
 80260da:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80260de:	4649      	mov	r1, r9
 80260e0:	f7ff ff74 	bl	8025fcc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80260e4:	4658      	mov	r0, fp
 80260e6:	b003      	add	sp, #12
 80260e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80260ec:	eb07 010a 	add.w	r1, r7, sl
 80260f0:	4449      	add	r1, r9
 80260f2:	4441      	add	r1, r8
 80260f4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80260f8:	e7d2      	b.n	80260a0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80260fa:	f04f 0b00 	mov.w	fp, #0
 80260fe:	e7f1      	b.n	80260e4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08026100 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8026100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026104:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8026106:	4604      	mov	r4, r0
 8026108:	260b      	movs	r6, #11
 802610a:	f100 091a 	add.w	r9, r0, #26
 802610e:	886f      	ldrh	r7, [r5, #2]
 8026110:	087f      	lsrs	r7, r7, #1
 8026112:	3e01      	subs	r6, #1
 8026114:	d013      	beq.n	802613e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8026116:	2100      	movs	r1, #0
 8026118:	4648      	mov	r0, r9
 802611a:	f7ff fd0f 	bl	8025b3c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 802611e:	462a      	mov	r2, r5
 8026120:	4680      	mov	r8, r0
 8026122:	4603      	mov	r3, r0
 8026124:	4639      	mov	r1, r7
 8026126:	4620      	mov	r0, r4
 8026128:	f7ff fcd0 	bl	8025acc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 802612c:	b138      	cbz	r0, 802613e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 802612e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8026132:	4642      	mov	r2, r8
 8026134:	4620      	mov	r0, r4
 8026136:	f7ff ffaf 	bl	8026098 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 802613a:	2800      	cmp	r0, #0
 802613c:	d1e9      	bne.n	8026112 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 802613e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08026144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 8026144:	4b21      	ldr	r3, [pc, #132]	; (80261cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x88>)
 8026146:	b570      	push	{r4, r5, r6, lr}
 8026148:	681a      	ldr	r2, [r3, #0]
 802614a:	4604      	mov	r4, r0
 802614c:	b912      	cbnz	r2, 8026154 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x10>
 802614e:	6858      	ldr	r0, [r3, #4]
 8026150:	07c0      	lsls	r0, r0, #31
 8026152:	d511      	bpl.n	8026178 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8026154:	6858      	ldr	r0, [r3, #4]
 8026156:	f104 051a 	add.w	r5, r4, #26
 802615a:	f010 0f01 	tst.w	r0, #1
 802615e:	ea4f 0060 	mov.w	r0, r0, asr #1
 8026162:	bf18      	it	ne
 8026164:	5823      	ldrne	r3, [r4, r0]
 8026166:	4420      	add	r0, r4
 8026168:	bf18      	it	ne
 802616a:	589a      	ldrne	r2, [r3, r2]
 802616c:	4790      	blx	r2
 802616e:	2100      	movs	r1, #0
 8026170:	4602      	mov	r2, r0
 8026172:	4628      	mov	r0, r5
 8026174:	f7ff fcc8 	bl	8025b08 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8026178:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802617a:	b133      	cbz	r3, 802618a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x46>
 802617c:	f104 051a 	add.w	r5, r4, #26
 8026180:	2100      	movs	r1, #0
 8026182:	4628      	mov	r0, r5
 8026184:	f7ff fcda 	bl	8025b3c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8026188:	b920      	cbnz	r0, 8026194 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x50>
 802618a:	4620      	mov	r0, r4
 802618c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8026190:	f7ff beec 	b.w	8025f6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8026194:	4620      	mov	r0, r4
 8026196:	f7ff ffb3 	bl	8026100 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 802619a:	2101      	movs	r1, #1
 802619c:	4628      	mov	r0, r5
 802619e:	f7ff fccd 	bl	8025b3c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80261a2:	f640 133f 	movw	r3, #2367	; 0x93f
 80261a6:	4606      	mov	r6, r0
 80261a8:	4298      	cmp	r0, r3
 80261aa:	d1ee      	bne.n	802618a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x46>
 80261ac:	2100      	movs	r1, #0
 80261ae:	4628      	mov	r0, r5
 80261b0:	f7ff fcc4 	bl	8025b3c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80261b4:	2101      	movs	r1, #1
 80261b6:	4602      	mov	r2, r0
 80261b8:	4628      	mov	r0, r5
 80261ba:	f7ff fca5 	bl	8025b08 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 80261be:	4632      	mov	r2, r6
 80261c0:	2100      	movs	r1, #0
 80261c2:	4628      	mov	r0, r5
 80261c4:	f7ff fca0 	bl	8025b08 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 80261c8:	e7df      	b.n	802618a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x46>
 80261ca:	bf00      	nop
 80261cc:	20008da4 	.word	0x20008da4

080261d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80261d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80261d2:	4617      	mov	r7, r2
 80261d4:	461e      	mov	r6, r3
 80261d6:	4605      	mov	r5, r0
 80261d8:	f7ff ffb4 	bl	8026144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80261dc:	683b      	ldr	r3, [r7, #0]
 80261de:	4604      	mov	r4, r0
 80261e0:	4601      	mov	r1, r0
 80261e2:	4638      	mov	r0, r7
 80261e4:	68db      	ldr	r3, [r3, #12]
 80261e6:	4798      	blx	r3
 80261e8:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 80261ec:	4602      	mov	r2, r0
 80261ee:	6030      	str	r0, [r6, #0]
 80261f0:	b29b      	uxth	r3, r3
 80261f2:	2b7f      	cmp	r3, #127	; 0x7f
 80261f4:	d816      	bhi.n	8026224 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x54>
 80261f6:	4639      	mov	r1, r7
 80261f8:	4628      	mov	r0, r5
 80261fa:	f7ff fcb9 	bl	8025b70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80261fe:	6030      	str	r0, [r6, #0]
 8026200:	6833      	ldr	r3, [r6, #0]
 8026202:	b15b      	cbz	r3, 802621c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 8026204:	7a9a      	ldrb	r2, [r3, #10]
 8026206:	f993 300d 	ldrsb.w	r3, [r3, #13]
 802620a:	2b00      	cmp	r3, #0
 802620c:	bfb4      	ite	lt
 802620e:	f44f 7380 	movlt.w	r3, #256	; 0x100
 8026212:	2300      	movge	r3, #0
 8026214:	4313      	orrs	r3, r2
 8026216:	bf0c      	ite	eq
 8026218:	2301      	moveq	r3, #1
 802621a:	2300      	movne	r3, #0
 802621c:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8026220:	4620      	mov	r0, r4
 8026222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026224:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8026228:	2b00      	cmp	r3, #0
 802622a:	d0e9      	beq.n	8026200 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 802622c:	f640 1302 	movw	r3, #2306	; 0x902
 8026230:	429c      	cmp	r4, r3
 8026232:	d1e5      	bne.n	8026200 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8026234:	4601      	mov	r1, r0
 8026236:	4628      	mov	r0, r5
 8026238:	f7ff fc16 	bl	8025a68 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 802623c:	e7df      	b.n	80261fe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
	...

08026240 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 8026240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026242:	2300      	movs	r3, #0
 8026244:	b08d      	sub	sp, #52	; 0x34
 8026246:	f100 0640 	add.w	r6, r0, #64	; 0x40
 802624a:	f101 0710 	add.w	r7, r1, #16
 802624e:	9304      	str	r3, [sp, #16]
 8026250:	aa04      	add	r2, sp, #16
 8026252:	9305      	str	r3, [sp, #20]
 8026254:	9306      	str	r3, [sp, #24]
 8026256:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 802625a:	9307      	str	r3, [sp, #28]
 802625c:	4613      	mov	r3, r2
 802625e:	460c      	mov	r4, r1
 8026260:	4605      	mov	r5, r0
 8026262:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802629c <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 8026266:	ecb4 7a01 	vldmia	r4!, {s14}
 802626a:	ecf5 6a01 	vldmia	r5!, {s13}
 802626e:	42bc      	cmp	r4, r7
 8026270:	eee6 7a87 	vfma.f32	s15, s13, s14
 8026274:	d1f7      	bne.n	8026266 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 8026276:	3010      	adds	r0, #16
 8026278:	ece2 7a01 	vstmia	r2!, {s15}
 802627c:	42b0      	cmp	r0, r6
 802627e:	d1ee      	bne.n	802625e <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 8026280:	ac0c      	add	r4, sp, #48	; 0x30
 8026282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026284:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8026288:	ed9d 0a08 	vldr	s0, [sp, #32]
 802628c:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 8026290:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 8026294:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 8026298:	b00d      	add	sp, #52	; 0x34
 802629a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802629c:	00000000 	.word	0x00000000

080262a0 <_ZN8touchgfx9Matrix4x4C1Ev>:
 80262a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80262a4:	2300      	movs	r3, #0
 80262a6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80262d0 <_ZN8touchgfx9Matrix4x4C1Ev+0x30>
 80262aa:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 80262ae:	2200      	movs	r2, #0
 80262b0:	4293      	cmp	r3, r2
 80262b2:	f102 0201 	add.w	r2, r2, #1
 80262b6:	bf14      	ite	ne
 80262b8:	eef0 6a47 	vmovne.f32	s13, s14
 80262bc:	eef0 6a67 	vmoveq.f32	s13, s15
 80262c0:	2a04      	cmp	r2, #4
 80262c2:	ece1 6a01 	vstmia	r1!, {s13}
 80262c6:	d1f3      	bne.n	80262b0 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 80262c8:	3301      	adds	r3, #1
 80262ca:	2b04      	cmp	r3, #4
 80262cc:	d1ed      	bne.n	80262aa <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 80262ce:	4770      	bx	lr
 80262d0:	00000000 	.word	0x00000000

080262d4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 80262d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80262d8:	4605      	mov	r5, r0
 80262da:	4688      	mov	r8, r1
 80262dc:	4691      	mov	r9, r2
 80262de:	f7ff ffdf 	bl	80262a0 <_ZN8touchgfx9Matrix4x4C1Ev>
 80262e2:	2300      	movs	r3, #0
 80262e4:	2000      	movs	r0, #0
 80262e6:	eb08 0703 	add.w	r7, r8, r3
 80262ea:	eb09 0600 	add.w	r6, r9, r0
 80262ee:	2400      	movs	r4, #0
 80262f0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8026324 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x50>
 80262f4:	4632      	mov	r2, r6
 80262f6:	3401      	adds	r4, #1
 80262f8:	ecf7 6a01 	vldmia	r7!, {s13}
 80262fc:	3610      	adds	r6, #16
 80262fe:	ed92 7a00 	vldr	s14, [r2]
 8026302:	2c04      	cmp	r4, #4
 8026304:	eee6 7a87 	vfma.f32	s15, s13, s14
 8026308:	d1f4      	bne.n	80262f4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x20>
 802630a:	18c4      	adds	r4, r0, r3
 802630c:	3004      	adds	r0, #4
 802630e:	442c      	add	r4, r5
 8026310:	2810      	cmp	r0, #16
 8026312:	edc4 7a00 	vstr	s15, [r4]
 8026316:	d1e6      	bne.n	80262e6 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x12>
 8026318:	3310      	adds	r3, #16
 802631a:	2b40      	cmp	r3, #64	; 0x40
 802631c:	d1e2      	bne.n	80262e4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x10>
 802631e:	4628      	mov	r0, r5
 8026320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026324:	00000000 	.word	0x00000000

08026328 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 8026328:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802632c:	f100 0320 	add.w	r3, r0, #32
 8026330:	3030      	adds	r0, #48	; 0x30
 8026332:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8026336:	ecf3 7a01 	vldmia	r3!, {s15}
 802633a:	4283      	cmp	r3, r0
 802633c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8026340:	edc3 7a03 	vstr	s15, [r3, #12]
 8026344:	d1f7      	bne.n	8026336 <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 8026346:	4770      	bx	lr

08026348 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 8026348:	b510      	push	{r4, lr}
 802634a:	ed2d 8b02 	vpush	{d8}
 802634e:	eef0 8a40 	vmov.f32	s17, s0
 8026352:	4604      	mov	r4, r0
 8026354:	f004 f9be 	bl	802a6d4 <sinf>
 8026358:	eeb0 8a40 	vmov.f32	s16, s0
 802635c:	eeb0 0a68 	vmov.f32	s0, s17
 8026360:	f004 f936 	bl	802a5d0 <cosf>
 8026364:	eeb1 6a48 	vneg.f32	s12, s16
 8026368:	f104 0310 	add.w	r3, r4, #16
 802636c:	f104 0220 	add.w	r2, r4, #32
 8026370:	edd3 7a04 	vldr	s15, [r3, #16]
 8026374:	edd3 6a00 	vldr	s13, [r3]
 8026378:	ee26 7a27 	vmul.f32	s14, s12, s15
 802637c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8026380:	eea0 7a26 	vfma.f32	s14, s0, s13
 8026384:	eee8 7a26 	vfma.f32	s15, s16, s13
 8026388:	eca3 7a01 	vstmia	r3!, {s14}
 802638c:	429a      	cmp	r2, r3
 802638e:	edc3 7a03 	vstr	s15, [r3, #12]
 8026392:	d1ed      	bne.n	8026370 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 8026394:	4620      	mov	r0, r4
 8026396:	ecbd 8b02 	vpop	{d8}
 802639a:	bd10      	pop	{r4, pc}

0802639c <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 802639c:	b510      	push	{r4, lr}
 802639e:	ed2d 8b02 	vpush	{d8}
 80263a2:	eef0 8a40 	vmov.f32	s17, s0
 80263a6:	4604      	mov	r4, r0
 80263a8:	f004 f994 	bl	802a6d4 <sinf>
 80263ac:	eeb0 8a40 	vmov.f32	s16, s0
 80263b0:	eeb0 0a68 	vmov.f32	s0, s17
 80263b4:	f004 f90c 	bl	802a5d0 <cosf>
 80263b8:	eeb1 6a48 	vneg.f32	s12, s16
 80263bc:	4623      	mov	r3, r4
 80263be:	f104 0210 	add.w	r2, r4, #16
 80263c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80263c6:	edd3 6a00 	vldr	s13, [r3]
 80263ca:	ee28 7a27 	vmul.f32	s14, s16, s15
 80263ce:	ee60 7a27 	vmul.f32	s15, s0, s15
 80263d2:	eea0 7a26 	vfma.f32	s14, s0, s13
 80263d6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80263da:	eca3 7a01 	vstmia	r3!, {s14}
 80263de:	429a      	cmp	r2, r3
 80263e0:	edc3 7a07 	vstr	s15, [r3, #28]
 80263e4:	d1ed      	bne.n	80263c2 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 80263e6:	4620      	mov	r0, r4
 80263e8:	ecbd 8b02 	vpop	{d8}
 80263ec:	bd10      	pop	{r4, pc}

080263ee <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 80263ee:	b510      	push	{r4, lr}
 80263f0:	ed2d 8b02 	vpush	{d8}
 80263f4:	eef0 8a40 	vmov.f32	s17, s0
 80263f8:	4604      	mov	r4, r0
 80263fa:	f004 f96b 	bl	802a6d4 <sinf>
 80263fe:	eeb0 8a40 	vmov.f32	s16, s0
 8026402:	eeb0 0a68 	vmov.f32	s0, s17
 8026406:	f004 f8e3 	bl	802a5d0 <cosf>
 802640a:	eeb1 6a48 	vneg.f32	s12, s16
 802640e:	4623      	mov	r3, r4
 8026410:	f104 0210 	add.w	r2, r4, #16
 8026414:	edd3 7a04 	vldr	s15, [r3, #16]
 8026418:	edd3 6a00 	vldr	s13, [r3]
 802641c:	ee26 7a27 	vmul.f32	s14, s12, s15
 8026420:	ee60 7a27 	vmul.f32	s15, s0, s15
 8026424:	eea0 7a26 	vfma.f32	s14, s0, s13
 8026428:	eee8 7a26 	vfma.f32	s15, s16, s13
 802642c:	eca3 7a01 	vstmia	r3!, {s14}
 8026430:	429a      	cmp	r2, r3
 8026432:	edc3 7a03 	vstr	s15, [r3, #12]
 8026436:	d1ed      	bne.n	8026414 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 8026438:	4620      	mov	r0, r4
 802643a:	ecbd 8b02 	vpop	{d8}
 802643e:	bd10      	pop	{r4, pc}

08026440 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 8026440:	4603      	mov	r3, r0
 8026442:	f100 0210 	add.w	r2, r0, #16
 8026446:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 802644a:	edd3 7a00 	vldr	s15, [r3]
 802644e:	eee7 7a00 	vfma.f32	s15, s14, s0
 8026452:	ece3 7a01 	vstmia	r3!, {s15}
 8026456:	4293      	cmp	r3, r2
 8026458:	d1f5      	bne.n	8026446 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 802645a:	4770      	bx	lr

0802645c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 802645c:	f100 0310 	add.w	r3, r0, #16
 8026460:	f100 0220 	add.w	r2, r0, #32
 8026464:	ed93 7a08 	vldr	s14, [r3, #32]
 8026468:	edd3 7a00 	vldr	s15, [r3]
 802646c:	eee7 7a00 	vfma.f32	s15, s14, s0
 8026470:	ece3 7a01 	vstmia	r3!, {s15}
 8026474:	4293      	cmp	r3, r2
 8026476:	d1f5      	bne.n	8026464 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 8026478:	4770      	bx	lr

0802647a <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 802647a:	f100 0320 	add.w	r3, r0, #32
 802647e:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8026482:	ed93 7a04 	vldr	s14, [r3, #16]
 8026486:	edd3 7a00 	vldr	s15, [r3]
 802648a:	eee7 7a00 	vfma.f32	s15, s14, s0
 802648e:	ece3 7a01 	vstmia	r3!, {s15}
 8026492:	4293      	cmp	r3, r2
 8026494:	d1f5      	bne.n	8026482 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 8026496:	4770      	bx	lr

08026498 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 8026498:	4603      	mov	r3, r0
 802649a:	f100 0210 	add.w	r2, r0, #16
 802649e:	edd3 7a00 	vldr	s15, [r3]
 80264a2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80264a6:	ece3 7a01 	vstmia	r3!, {s15}
 80264aa:	4293      	cmp	r3, r2
 80264ac:	d1f7      	bne.n	802649e <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 80264ae:	4770      	bx	lr

080264b0 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 80264b0:	f100 0310 	add.w	r3, r0, #16
 80264b4:	f100 0220 	add.w	r2, r0, #32
 80264b8:	edd3 7a00 	vldr	s15, [r3]
 80264bc:	ee67 7a80 	vmul.f32	s15, s15, s0
 80264c0:	ece3 7a01 	vstmia	r3!, {s15}
 80264c4:	4293      	cmp	r3, r2
 80264c6:	d1f7      	bne.n	80264b8 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 80264c8:	4770      	bx	lr

080264ca <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 80264ca:	f100 0320 	add.w	r3, r0, #32
 80264ce:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80264d2:	edd3 7a00 	vldr	s15, [r3]
 80264d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80264da:	ece3 7a01 	vstmia	r3!, {s15}
 80264de:	4293      	cmp	r3, r2
 80264e0:	d1f7      	bne.n	80264d2 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 80264e2:	4770      	bx	lr

080264e4 <_ZN8touchgfx8ceil28_4El>:
 80264e4:	f110 030f 	adds.w	r3, r0, #15
 80264e8:	d401      	bmi.n	80264ee <_ZN8touchgfx8ceil28_4El+0xa>
 80264ea:	1118      	asrs	r0, r3, #4
 80264ec:	4770      	bx	lr
 80264ee:	2210      	movs	r2, #16
 80264f0:	f1c0 0001 	rsb	r0, r0, #1
 80264f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80264f8:	f010 000f 	ands.w	r0, r0, #15
 80264fc:	bf18      	it	ne
 80264fe:	2001      	movne	r0, #1
 8026500:	1a18      	subs	r0, r3, r0
 8026502:	4770      	bx	lr

08026504 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8026504:	2900      	cmp	r1, #0
 8026506:	b510      	push	{r4, lr}
 8026508:	dc06      	bgt.n	8026518 <_ZN8touchgfx11floorDivModEllRlS0_+0x14>
 802650a:	4b0f      	ldr	r3, [pc, #60]	; (8026548 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 802650c:	f240 1111 	movw	r1, #273	; 0x111
 8026510:	4a0e      	ldr	r2, [pc, #56]	; (802654c <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 8026512:	480f      	ldr	r0, [pc, #60]	; (8026550 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 8026514:	f004 fdf0 	bl	802b0f8 <__assert_func>
 8026518:	fb90 f4f1 	sdiv	r4, r0, r1
 802651c:	2800      	cmp	r0, #0
 802651e:	6014      	str	r4, [r2, #0]
 8026520:	db03      	blt.n	802652a <_ZN8touchgfx11floorDivModEllRlS0_+0x26>
 8026522:	fb01 0114 	mls	r1, r1, r4, r0
 8026526:	6019      	str	r1, [r3, #0]
 8026528:	bd10      	pop	{r4, pc}
 802652a:	4240      	negs	r0, r0
 802652c:	fb90 f4f1 	sdiv	r4, r0, r1
 8026530:	fb01 0014 	mls	r0, r1, r4, r0
 8026534:	6018      	str	r0, [r3, #0]
 8026536:	2800      	cmp	r0, #0
 8026538:	d0f6      	beq.n	8026528 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 802653a:	6810      	ldr	r0, [r2, #0]
 802653c:	3801      	subs	r0, #1
 802653e:	6010      	str	r0, [r2, #0]
 8026540:	6818      	ldr	r0, [r3, #0]
 8026542:	1a09      	subs	r1, r1, r0
 8026544:	e7ef      	b.n	8026526 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 8026546:	bf00      	nop
 8026548:	0802f977 	.word	0x0802f977
 802654c:	0802f9b6 	.word	0x0802f9b6
 8026550:	0802f987 	.word	0x0802f987

08026554 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8026554:	b570      	push	{r4, r5, r6, lr}
 8026556:	694a      	ldr	r2, [r1, #20]
 8026558:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 802655a:	684b      	ldr	r3, [r1, #4]
 802655c:	1b54      	subs	r4, r2, r5
 802655e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8026560:	f000 8106 	beq.w	8026770 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8026564:	1b9b      	subs	r3, r3, r6
 8026566:	d003      	beq.n	8026570 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8026568:	4363      	muls	r3, r4
 802656a:	2210      	movs	r2, #16
 802656c:	fb93 f3f2 	sdiv	r3, r3, r2
 8026570:	680c      	ldr	r4, [r1, #0]
 8026572:	698a      	ldr	r2, [r1, #24]
 8026574:	1b65      	subs	r5, r4, r5
 8026576:	f000 80fd 	beq.w	8026774 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 802657a:	1b92      	subs	r2, r2, r6
 802657c:	d003      	beq.n	8026586 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 802657e:	436a      	muls	r2, r5
 8026580:	2410      	movs	r4, #16
 8026582:	fb92 f2f4 	sdiv	r2, r2, r4
 8026586:	1a9b      	subs	r3, r3, r2
 8026588:	ed9f 4a89 	vldr	s8, [pc, #548]	; 80267b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 802658c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026590:	460a      	mov	r2, r1
 8026592:	ee07 3a90 	vmov	s15, r3
 8026596:	f100 040c 	add.w	r4, r0, #12
 802659a:	4603      	mov	r3, r0
 802659c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80265a0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80265a4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80265a8:	eeb1 6a43 	vneg.f32	s12, s6
 80265ac:	edd2 7a02 	vldr	s15, [r2, #8]
 80265b0:	3214      	adds	r2, #20
 80265b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80265b6:	ece3 6a01 	vstmia	r3!, {s13}
 80265ba:	429c      	cmp	r4, r3
 80265bc:	ed52 7a02 	vldr	s15, [r2, #-8]
 80265c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80265c4:	edc3 7a02 	vstr	s15, [r3, #8]
 80265c8:	ed52 7a01 	vldr	s15, [r2, #-4]
 80265cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80265d0:	edc3 7a05 	vstr	s15, [r3, #20]
 80265d4:	d1ea      	bne.n	80265ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80265d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80265d8:	698b      	ldr	r3, [r1, #24]
 80265da:	edd0 4a02 	vldr	s9, [r0, #8]
 80265de:	1a9b      	subs	r3, r3, r2
 80265e0:	edd0 3a00 	vldr	s7, [r0]
 80265e4:	edd0 6a01 	vldr	s13, [r0, #4]
 80265e8:	ee07 3a90 	vmov	s15, r3
 80265ec:	684b      	ldr	r3, [r1, #4]
 80265ee:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80265f2:	ed90 5a05 	vldr	s10, [r0, #20]
 80265f6:	1a9b      	subs	r3, r3, r2
 80265f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80265fc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8026600:	ed90 2a03 	vldr	s4, [r0, #12]
 8026604:	ee07 3a10 	vmov	s14, r3
 8026608:	edd0 2a04 	vldr	s5, [r0, #16]
 802660c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8026610:	ed90 1a07 	vldr	s2, [r0, #28]
 8026614:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026618:	ee72 2ac5 	vsub.f32	s5, s5, s10
 802661c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8026620:	ee27 7a04 	vmul.f32	s14, s14, s8
 8026624:	ee32 5a45 	vsub.f32	s10, s4, s10
 8026628:	eee6 7a87 	vfma.f32	s15, s13, s14
 802662c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8026630:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8026634:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8026636:	694a      	ldr	r2, [r1, #20]
 8026638:	1b13      	subs	r3, r2, r4
 802663a:	ee07 3a10 	vmov	s14, r3
 802663e:	680b      	ldr	r3, [r1, #0]
 8026640:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026644:	1b1b      	subs	r3, r3, r4
 8026646:	ee27 7a04 	vmul.f32	s14, s14, s8
 802664a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 802664e:	ee07 3a10 	vmov	s14, r3
 8026652:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026656:	ee27 7a04 	vmul.f32	s14, s14, s8
 802665a:	eee6 4a87 	vfma.f32	s9, s13, s14
 802665e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8026662:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8026666:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8026668:	698b      	ldr	r3, [r1, #24]
 802666a:	1a9b      	subs	r3, r3, r2
 802666c:	ee06 3a90 	vmov	s13, r3
 8026670:	684b      	ldr	r3, [r1, #4]
 8026672:	1a9b      	subs	r3, r3, r2
 8026674:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8026678:	ee07 3a10 	vmov	s14, r3
 802667c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8026680:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026684:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8026688:	ee27 7a04 	vmul.f32	s14, s14, s8
 802668c:	eee2 6a87 	vfma.f32	s13, s5, s14
 8026690:	ee66 6a83 	vmul.f32	s13, s13, s6
 8026694:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8026698:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 802669a:	680b      	ldr	r3, [r1, #0]
 802669c:	1a9b      	subs	r3, r3, r2
 802669e:	ee07 3a10 	vmov	s14, r3
 80266a2:	694b      	ldr	r3, [r1, #20]
 80266a4:	1a9b      	subs	r3, r3, r2
 80266a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80266aa:	ee05 3a90 	vmov	s11, r3
 80266ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 80266b2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80266b6:	ee65 5a84 	vmul.f32	s11, s11, s8
 80266ba:	ee25 5a65 	vnmul.f32	s10, s10, s11
 80266be:	edd0 5a08 	vldr	s11, [r0, #32]
 80266c2:	ee31 1a65 	vsub.f32	s2, s2, s11
 80266c6:	eea7 5a22 	vfma.f32	s10, s14, s5
 80266ca:	edd0 2a06 	vldr	s5, [r0, #24]
 80266ce:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80266d2:	ee25 5a06 	vmul.f32	s10, s10, s12
 80266d6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80266da:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80266dc:	684a      	ldr	r2, [r1, #4]
 80266de:	1b13      	subs	r3, r2, r4
 80266e0:	ee01 3a90 	vmov	s3, r3
 80266e4:	698b      	ldr	r3, [r1, #24]
 80266e6:	1b1b      	subs	r3, r3, r4
 80266e8:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80266ec:	ee07 3a10 	vmov	s14, r3
 80266f0:	ee61 1a84 	vmul.f32	s3, s3, s8
 80266f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80266f8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80266fc:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8026700:	eea1 7a81 	vfma.f32	s14, s3, s2
 8026704:	ee27 7a03 	vmul.f32	s14, s14, s6
 8026708:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 802670c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 802670e:	680b      	ldr	r3, [r1, #0]
 8026710:	1a9b      	subs	r3, r3, r2
 8026712:	ee03 3a10 	vmov	s6, r3
 8026716:	694b      	ldr	r3, [r1, #20]
 8026718:	1a9b      	subs	r3, r3, r2
 802671a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 802671e:	ee01 3a90 	vmov	s3, r3
 8026722:	ee23 3a04 	vmul.f32	s6, s6, s8
 8026726:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 802672a:	ee21 4a84 	vmul.f32	s8, s3, s8
 802672e:	ee65 5ac4 	vnmul.f32	s11, s11, s8
 8026732:	eee3 5a01 	vfma.f32	s11, s6, s2
 8026736:	ee25 6a86 	vmul.f32	s12, s11, s12
 802673a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 802673e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8026742:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8026746:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 802674a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802674e:	dd13      	ble.n	8026778 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8026750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8026754:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8026758:	63c3      	str	r3, [r0, #60]	; 0x3c
 802675a:	eee3 7a87 	vfma.f32	s15, s7, s14
 802675e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8026762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026766:	dd15      	ble.n	8026794 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8026768:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802676c:	6403      	str	r3, [r0, #64]	; 0x40
 802676e:	bd70      	pop	{r4, r5, r6, pc}
 8026770:	4623      	mov	r3, r4
 8026772:	e6fd      	b.n	8026570 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8026774:	462a      	mov	r2, r5
 8026776:	e706      	b.n	8026586 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8026778:	d502      	bpl.n	8026780 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 802677a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802677e:	e7e9      	b.n	8026754 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8026780:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8026784:	eea3 2a85 	vfma.f32	s4, s7, s10
 8026788:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 802678c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026790:	dade      	bge.n	8026750 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8026792:	e7f2      	b.n	802677a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8026794:	d502      	bpl.n	802679c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8026796:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802679a:	e7e7      	b.n	802676c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 802679c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80267a0:	eee3 4a86 	vfma.f32	s9, s7, s12
 80267a4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80267a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80267ac:	dadc      	bge.n	8026768 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80267ae:	e7f2      	b.n	8026796 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80267b0:	3d800000 	.word	0x3d800000

080267b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80267b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80267b8:	f04f 0814 	mov.w	r8, #20
 80267bc:	4604      	mov	r4, r0
 80267be:	4617      	mov	r7, r2
 80267c0:	460d      	mov	r5, r1
 80267c2:	fb08 f903 	mul.w	r9, r8, r3
 80267c6:	461e      	mov	r6, r3
 80267c8:	eb02 0a09 	add.w	sl, r2, r9
 80267cc:	f8da 0004 	ldr.w	r0, [sl, #4]
 80267d0:	f7ff fe88 	bl	80264e4 <_ZN8touchgfx8ceil28_4El>
 80267d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80267d6:	6160      	str	r0, [r4, #20]
 80267d8:	fb08 f803 	mul.w	r8, r8, r3
 80267dc:	9001      	str	r0, [sp, #4]
 80267de:	eb07 0b08 	add.w	fp, r7, r8
 80267e2:	f8db 0004 	ldr.w	r0, [fp, #4]
 80267e6:	f7ff fe7d 	bl	80264e4 <_ZN8touchgfx8ceil28_4El>
 80267ea:	9a01      	ldr	r2, [sp, #4]
 80267ec:	1a80      	subs	r0, r0, r2
 80267ee:	61a0      	str	r0, [r4, #24]
 80267f0:	2800      	cmp	r0, #0
 80267f2:	f000 8088 	beq.w	8026906 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 80267f6:	f857 0009 	ldr.w	r0, [r7, r9]
 80267fa:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80267fe:	f857 e008 	ldr.w	lr, [r7, r8]
 8026802:	f8db 3004 	ldr.w	r3, [fp, #4]
 8026806:	ebae 0e00 	sub.w	lr, lr, r0
 802680a:	f8da 1004 	ldr.w	r1, [sl, #4]
 802680e:	ea4f 1b0e 	mov.w	fp, lr, lsl #4
 8026812:	1a5b      	subs	r3, r3, r1
 8026814:	fb0b f202 	mul.w	r2, fp, r2
 8026818:	ea4f 1803 	mov.w	r8, r3, lsl #4
 802681c:	fb0e 2211 	mls	r2, lr, r1, r2
 8026820:	4641      	mov	r1, r8
 8026822:	fb00 2003 	mla	r0, r0, r3, r2
 8026826:	f104 0310 	add.w	r3, r4, #16
 802682a:	4622      	mov	r2, r4
 802682c:	3801      	subs	r0, #1
 802682e:	4440      	add	r0, r8
 8026830:	f7ff fe68 	bl	8026504 <_ZN8touchgfx11floorDivModEllRlS0_>
 8026834:	f104 0308 	add.w	r3, r4, #8
 8026838:	1d22      	adds	r2, r4, #4
 802683a:	4641      	mov	r1, r8
 802683c:	4658      	mov	r0, fp
 802683e:	f7ff fe61 	bl	8026504 <_ZN8touchgfx11floorDivModEllRlS0_>
 8026842:	f8c4 800c 	str.w	r8, [r4, #12]
 8026846:	6962      	ldr	r2, [r4, #20]
 8026848:	f8da 3004 	ldr.w	r3, [sl, #4]
 802684c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8026910 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8026850:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8026854:	6822      	ldr	r2, [r4, #0]
 8026856:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 802685a:	ee07 3a10 	vmov	s14, r3
 802685e:	f857 3009 	ldr.w	r3, [r7, r9]
 8026862:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8026866:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802686a:	ee07 3a90 	vmov	s15, r3
 802686e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8026872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026876:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802687a:	edd6 6a00 	vldr	s13, [r6]
 802687e:	eee7 6a06 	vfma.f32	s13, s14, s12
 8026882:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8026886:	eee7 6a86 	vfma.f32	s13, s15, s12
 802688a:	edc4 6a07 	vstr	s13, [r4, #28]
 802688e:	edd4 6a01 	vldr	s13, [r4, #4]
 8026892:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 8026896:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 802689a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 802689e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80268a2:	ed84 6a08 	vstr	s12, [r4, #32]
 80268a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80268a8:	6263      	str	r3, [r4, #36]	; 0x24
 80268aa:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 80268ae:	ed96 6a03 	vldr	s12, [r6, #12]
 80268b2:	eea7 6a25 	vfma.f32	s12, s14, s11
 80268b6:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 80268ba:	eea7 6aa5 	vfma.f32	s12, s15, s11
 80268be:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 80268c2:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 80268c6:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 80268ca:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80268ce:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 80268d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80268d4:	6323      	str	r3, [r4, #48]	; 0x30
 80268d6:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 80268da:	ed96 6a06 	vldr	s12, [r6, #24]
 80268de:	eea7 6a25 	vfma.f32	s12, s14, s11
 80268e2:	eeb0 7a46 	vmov.f32	s14, s12
 80268e6:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 80268ea:	eea7 7a86 	vfma.f32	s14, s15, s12
 80268ee:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 80268f2:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 80268f6:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 80268fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80268fe:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 8026902:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8026904:	63e3      	str	r3, [r4, #60]	; 0x3c
 8026906:	4620      	mov	r0, r4
 8026908:	b003      	add	sp, #12
 802690a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802690e:	bf00      	nop
 8026910:	3d800000 	.word	0x3d800000

08026914 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8026914:	4b01      	ldr	r3, [pc, #4]	; (802691c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8026916:	6018      	str	r0, [r3, #0]
 8026918:	4770      	bx	lr
 802691a:	bf00      	nop
 802691c:	2000d00c 	.word	0x2000d00c

08026920 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8026920:	4b07      	ldr	r3, [pc, #28]	; (8026940 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 8026922:	881a      	ldrh	r2, [r3, #0]
 8026924:	4290      	cmp	r0, r2
 8026926:	db09      	blt.n	802693c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8026928:	4b06      	ldr	r3, [pc, #24]	; (8026944 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 802692a:	881b      	ldrh	r3, [r3, #0]
 802692c:	4413      	add	r3, r2
 802692e:	4298      	cmp	r0, r3
 8026930:	da04      	bge.n	802693c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8026932:	4b05      	ldr	r3, [pc, #20]	; (8026948 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 8026934:	681b      	ldr	r3, [r3, #0]
 8026936:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 802693a:	4770      	bx	lr
 802693c:	2000      	movs	r0, #0
 802693e:	4770      	bx	lr
 8026940:	2000d02c 	.word	0x2000d02c
 8026944:	2000d030 	.word	0x2000d030
 8026948:	2000d010 	.word	0x2000d010

0802694c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 802694c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026950:	4e26      	ldr	r6, [pc, #152]	; (80269ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8026952:	6833      	ldr	r3, [r6, #0]
 8026954:	2b00      	cmp	r3, #0
 8026956:	d046      	beq.n	80269e6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8026958:	4a25      	ldr	r2, [pc, #148]	; (80269f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 802695a:	4d26      	ldr	r5, [pc, #152]	; (80269f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 802695c:	8810      	ldrh	r0, [r2, #0]
 802695e:	882c      	ldrh	r4, [r5, #0]
 8026960:	4f25      	ldr	r7, [pc, #148]	; (80269f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8026962:	4420      	add	r0, r4
 8026964:	1c42      	adds	r2, r0, #1
 8026966:	ea4f 0880 	mov.w	r8, r0, lsl #2
 802696a:	f022 0201 	bic.w	r2, r2, #1
 802696e:	0412      	lsls	r2, r2, #16
 8026970:	0c12      	lsrs	r2, r2, #16
 8026972:	0051      	lsls	r1, r2, #1
 8026974:	220e      	movs	r2, #14
 8026976:	eb08 0c01 	add.w	ip, r8, r1
 802697a:	fb02 fe04 	mul.w	lr, r2, r4
 802697e:	eb03 0208 	add.w	r2, r3, r8
 8026982:	4c1e      	ldr	r4, [pc, #120]	; (80269fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8026984:	603a      	str	r2, [r7, #0]
 8026986:	eb03 020c 	add.w	r2, r3, ip
 802698a:	44f4      	add	ip, lr
 802698c:	6022      	str	r2, [r4, #0]
 802698e:	4463      	add	r3, ip
 8026990:	4a1b      	ldr	r2, [pc, #108]	; (8026a00 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8026992:	6013      	str	r3, [r2, #0]
 8026994:	2300      	movs	r3, #0
 8026996:	4a1b      	ldr	r2, [pc, #108]	; (8026a04 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8026998:	8013      	strh	r3, [r2, #0]
 802699a:	4a1b      	ldr	r2, [pc, #108]	; (8026a08 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 802699c:	6812      	ldr	r2, [r2, #0]
 802699e:	eba2 0208 	sub.w	r2, r2, r8
 80269a2:	1a52      	subs	r2, r2, r1
 80269a4:	4919      	ldr	r1, [pc, #100]	; (8026a0c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 80269a6:	eba2 020e 	sub.w	r2, r2, lr
 80269aa:	469e      	mov	lr, r3
 80269ac:	600a      	str	r2, [r1, #0]
 80269ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80269b2:	4a17      	ldr	r2, [pc, #92]	; (8026a10 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 80269b4:	8013      	strh	r3, [r2, #0]
 80269b6:	4283      	cmp	r3, r0
 80269b8:	d007      	beq.n	80269ca <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 80269ba:	6832      	ldr	r2, [r6, #0]
 80269bc:	f842 e023 	str.w	lr, [r2, r3, lsl #2]
 80269c0:	683a      	ldr	r2, [r7, #0]
 80269c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80269c6:	3301      	adds	r3, #1
 80269c8:	e7f5      	b.n	80269b6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 80269ca:	6820      	ldr	r0, [r4, #0]
 80269cc:	2300      	movs	r3, #0
 80269ce:	882d      	ldrh	r5, [r5, #0]
 80269d0:	240e      	movs	r4, #14
 80269d2:	42ab      	cmp	r3, r5
 80269d4:	d207      	bcs.n	80269e6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 80269d6:	fb04 0203 	mla	r2, r4, r3, r0
 80269da:	3301      	adds	r3, #1
 80269dc:	7b11      	ldrb	r1, [r2, #12]
 80269de:	f36f 1145 	bfc	r1, #5, #1
 80269e2:	7311      	strb	r1, [r2, #12]
 80269e4:	e7f5      	b.n	80269d2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x86>
 80269e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80269ea:	bf00      	nop
 80269ec:	2000d010 	.word	0x2000d010
 80269f0:	2000d02c 	.word	0x2000d02c
 80269f4:	2000d030 	.word	0x2000d030
 80269f8:	2000d024 	.word	0x2000d024
 80269fc:	2000d014 	.word	0x2000d014
 8026a00:	2000d01c 	.word	0x2000d01c
 8026a04:	2000d02e 	.word	0x2000d02e
 8026a08:	2000d018 	.word	0x2000d018
 8026a0c:	2000d028 	.word	0x2000d028
 8026a10:	2000d020 	.word	0x2000d020

08026a14 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8026a14:	4b10      	ldr	r3, [pc, #64]	; (8026a58 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8026a16:	b510      	push	{r4, lr}
 8026a18:	681b      	ldr	r3, [r3, #0]
 8026a1a:	b9db      	cbnz	r3, 8026a54 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8026a1c:	b1d1      	cbz	r1, 8026a54 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8026a1e:	4b0f      	ldr	r3, [pc, #60]	; (8026a5c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8026a20:	240e      	movs	r4, #14
 8026a22:	801a      	strh	r2, [r3, #0]
 8026a24:	b292      	uxth	r2, r2
 8026a26:	4b0e      	ldr	r3, [pc, #56]	; (8026a60 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8026a28:	881b      	ldrh	r3, [r3, #0]
 8026a2a:	4413      	add	r3, r2
 8026a2c:	4362      	muls	r2, r4
 8026a2e:	2406      	movs	r4, #6
 8026a30:	fb04 2203 	mla	r2, r4, r3, r2
 8026a34:	4291      	cmp	r1, r2
 8026a36:	d805      	bhi.n	8026a44 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8026a38:	4b0a      	ldr	r3, [pc, #40]	; (8026a64 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8026a3a:	2137      	movs	r1, #55	; 0x37
 8026a3c:	4a0a      	ldr	r2, [pc, #40]	; (8026a68 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8026a3e:	480b      	ldr	r0, [pc, #44]	; (8026a6c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8026a40:	f004 fb5a 	bl	802b0f8 <__assert_func>
 8026a44:	4b0a      	ldr	r3, [pc, #40]	; (8026a70 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8026a46:	6019      	str	r1, [r3, #0]
 8026a48:	4b0a      	ldr	r3, [pc, #40]	; (8026a74 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8026a4a:	6018      	str	r0, [r3, #0]
 8026a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026a50:	f7ff bf7c 	b.w	802694c <_ZN8touchgfx6Bitmap10clearCacheEv>
 8026a54:	bd10      	pop	{r4, pc}
 8026a56:	bf00      	nop
 8026a58:	2000d01c 	.word	0x2000d01c
 8026a5c:	2000d030 	.word	0x2000d030
 8026a60:	2000d02c 	.word	0x2000d02c
 8026a64:	0802fa54 	.word	0x0802fa54
 8026a68:	0802fae9 	.word	0x0802fae9
 8026a6c:	0802fa2f 	.word	0x0802fa2f
 8026a70:	2000d018 	.word	0x2000d018
 8026a74:	2000d010 	.word	0x2000d010

08026a78 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8026a78:	b470      	push	{r4, r5, r6}
 8026a7a:	4c07      	ldr	r4, [pc, #28]	; (8026a98 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8026a7c:	4605      	mov	r5, r0
 8026a7e:	4610      	mov	r0, r2
 8026a80:	9a03      	ldr	r2, [sp, #12]
 8026a82:	6826      	ldr	r6, [r4, #0]
 8026a84:	b936      	cbnz	r6, 8026a94 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8026a86:	6025      	str	r5, [r4, #0]
 8026a88:	4c04      	ldr	r4, [pc, #16]	; (8026a9c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8026a8a:	8021      	strh	r1, [r4, #0]
 8026a8c:	4619      	mov	r1, r3
 8026a8e:	bc70      	pop	{r4, r5, r6}
 8026a90:	f7ff bfc0 	b.w	8026a14 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8026a94:	bc70      	pop	{r4, r5, r6}
 8026a96:	4770      	bx	lr
 8026a98:	2000d034 	.word	0x2000d034
 8026a9c:	2000d02c 	.word	0x2000d02c

08026aa0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8026aa0:	b508      	push	{r3, lr}
 8026aa2:	4b14      	ldr	r3, [pc, #80]	; (8026af4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8026aa4:	6819      	ldr	r1, [r3, #0]
 8026aa6:	b931      	cbnz	r1, 8026ab6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8026aa8:	4b13      	ldr	r3, [pc, #76]	; (8026af8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8026aaa:	f240 21e3 	movw	r1, #739	; 0x2e3
 8026aae:	4a13      	ldr	r2, [pc, #76]	; (8026afc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8026ab0:	4813      	ldr	r0, [pc, #76]	; (8026b00 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8026ab2:	f004 fb21 	bl	802b0f8 <__assert_func>
 8026ab6:	4a13      	ldr	r2, [pc, #76]	; (8026b04 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8026ab8:	8803      	ldrh	r3, [r0, #0]
 8026aba:	8812      	ldrh	r2, [r2, #0]
 8026abc:	4293      	cmp	r3, r2
 8026abe:	da04      	bge.n	8026aca <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8026ac0:	2214      	movs	r2, #20
 8026ac2:	fb02 1303 	mla	r3, r2, r3, r1
 8026ac6:	8918      	ldrh	r0, [r3, #8]
 8026ac8:	bd08      	pop	{r3, pc}
 8026aca:	490f      	ldr	r1, [pc, #60]	; (8026b08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8026acc:	8809      	ldrh	r1, [r1, #0]
 8026ace:	4411      	add	r1, r2
 8026ad0:	428b      	cmp	r3, r1
 8026ad2:	da06      	bge.n	8026ae2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8026ad4:	1a9b      	subs	r3, r3, r2
 8026ad6:	4a0d      	ldr	r2, [pc, #52]	; (8026b0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8026ad8:	210e      	movs	r1, #14
 8026ada:	6812      	ldr	r2, [r2, #0]
 8026adc:	fb01 2303 	mla	r3, r1, r3, r2
 8026ae0:	e7f1      	b.n	8026ac6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8026ae2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8026ae6:	4293      	cmp	r3, r2
 8026ae8:	bf06      	itte	eq
 8026aea:	4b09      	ldreq	r3, [pc, #36]	; (8026b10 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8026aec:	8818      	ldrheq	r0, [r3, #0]
 8026aee:	2000      	movne	r0, #0
 8026af0:	bd08      	pop	{r3, pc}
 8026af2:	bf00      	nop
 8026af4:	2000d034 	.word	0x2000d034
 8026af8:	0802faad 	.word	0x0802faad
 8026afc:	0802fb96 	.word	0x0802fb96
 8026b00:	0802fa2f 	.word	0x0802fa2f
 8026b04:	2000d02c 	.word	0x2000d02c
 8026b08:	2000d030 	.word	0x2000d030
 8026b0c:	2000d014 	.word	0x2000d014
 8026b10:	2000cf6a 	.word	0x2000cf6a

08026b14 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8026b14:	b508      	push	{r3, lr}
 8026b16:	4b14      	ldr	r3, [pc, #80]	; (8026b68 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8026b18:	6819      	ldr	r1, [r3, #0]
 8026b1a:	b931      	cbnz	r1, 8026b2a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8026b1c:	4b13      	ldr	r3, [pc, #76]	; (8026b6c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8026b1e:	f240 21f7 	movw	r1, #759	; 0x2f7
 8026b22:	4a13      	ldr	r2, [pc, #76]	; (8026b70 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8026b24:	4813      	ldr	r0, [pc, #76]	; (8026b74 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8026b26:	f004 fae7 	bl	802b0f8 <__assert_func>
 8026b2a:	4a13      	ldr	r2, [pc, #76]	; (8026b78 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8026b2c:	8803      	ldrh	r3, [r0, #0]
 8026b2e:	8812      	ldrh	r2, [r2, #0]
 8026b30:	4293      	cmp	r3, r2
 8026b32:	da04      	bge.n	8026b3e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8026b34:	2214      	movs	r2, #20
 8026b36:	fb02 1303 	mla	r3, r2, r3, r1
 8026b3a:	8958      	ldrh	r0, [r3, #10]
 8026b3c:	bd08      	pop	{r3, pc}
 8026b3e:	490f      	ldr	r1, [pc, #60]	; (8026b7c <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8026b40:	8809      	ldrh	r1, [r1, #0]
 8026b42:	4411      	add	r1, r2
 8026b44:	428b      	cmp	r3, r1
 8026b46:	da06      	bge.n	8026b56 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8026b48:	1a9b      	subs	r3, r3, r2
 8026b4a:	4a0d      	ldr	r2, [pc, #52]	; (8026b80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8026b4c:	210e      	movs	r1, #14
 8026b4e:	6812      	ldr	r2, [r2, #0]
 8026b50:	fb01 2303 	mla	r3, r1, r3, r2
 8026b54:	e7f1      	b.n	8026b3a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8026b56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8026b5a:	4293      	cmp	r3, r2
 8026b5c:	bf06      	itte	eq
 8026b5e:	4b09      	ldreq	r3, [pc, #36]	; (8026b84 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8026b60:	8818      	ldrheq	r0, [r3, #0]
 8026b62:	2000      	movne	r0, #0
 8026b64:	bd08      	pop	{r3, pc}
 8026b66:	bf00      	nop
 8026b68:	2000d034 	.word	0x2000d034
 8026b6c:	0802faad 	.word	0x0802faad
 8026b70:	0802fbc2 	.word	0x0802fbc2
 8026b74:	0802fa2f 	.word	0x0802fa2f
 8026b78:	2000d02c 	.word	0x2000d02c
 8026b7c:	2000d030 	.word	0x2000d030
 8026b80:	2000d014 	.word	0x2000d014
 8026b84:	2000cf6c 	.word	0x2000cf6c

08026b88 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8026b88:	4b23      	ldr	r3, [pc, #140]	; (8026c18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8026b8a:	b510      	push	{r4, lr}
 8026b8c:	681c      	ldr	r4, [r3, #0]
 8026b8e:	b934      	cbnz	r4, 8026b9e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8026b90:	4b22      	ldr	r3, [pc, #136]	; (8026c1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8026b92:	f240 310b 	movw	r1, #779	; 0x30b
 8026b96:	4a22      	ldr	r2, [pc, #136]	; (8026c20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8026b98:	4822      	ldr	r0, [pc, #136]	; (8026c24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8026b9a:	f004 faad 	bl	802b0f8 <__assert_func>
 8026b9e:	4a22      	ldr	r2, [pc, #136]	; (8026c28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8026ba0:	880b      	ldrh	r3, [r1, #0]
 8026ba2:	8812      	ldrh	r2, [r2, #0]
 8026ba4:	4293      	cmp	r3, r2
 8026ba6:	da11      	bge.n	8026bcc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8026ba8:	2214      	movs	r2, #20
 8026baa:	fb02 4303 	mla	r3, r2, r3, r4
 8026bae:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8026bb2:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8026bb6:	8a1a      	ldrh	r2, [r3, #16]
 8026bb8:	8a5b      	ldrh	r3, [r3, #18]
 8026bba:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8026bbe:	8004      	strh	r4, [r0, #0]
 8026bc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8026bc4:	8041      	strh	r1, [r0, #2]
 8026bc6:	8082      	strh	r2, [r0, #4]
 8026bc8:	80c3      	strh	r3, [r0, #6]
 8026bca:	bd10      	pop	{r4, pc}
 8026bcc:	4917      	ldr	r1, [pc, #92]	; (8026c2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8026bce:	8809      	ldrh	r1, [r1, #0]
 8026bd0:	4411      	add	r1, r2
 8026bd2:	428b      	cmp	r3, r1
 8026bd4:	da0a      	bge.n	8026bec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8026bd6:	1a9b      	subs	r3, r3, r2
 8026bd8:	4a15      	ldr	r2, [pc, #84]	; (8026c30 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8026bda:	210e      	movs	r1, #14
 8026bdc:	6812      	ldr	r2, [r2, #0]
 8026bde:	fb01 2303 	mla	r3, r1, r3, r2
 8026be2:	681a      	ldr	r2, [r3, #0]
 8026be4:	6002      	str	r2, [r0, #0]
 8026be6:	685a      	ldr	r2, [r3, #4]
 8026be8:	6042      	str	r2, [r0, #4]
 8026bea:	bd10      	pop	{r4, pc}
 8026bec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8026bf0:	4293      	cmp	r3, r2
 8026bf2:	d10b      	bne.n	8026c0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8026bf4:	4b0f      	ldr	r3, [pc, #60]	; (8026c34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8026bf6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8026bfa:	4b0f      	ldr	r3, [pc, #60]	; (8026c38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8026bfc:	8081      	strh	r1, [r0, #4]
 8026bfe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8026c02:	2300      	movs	r3, #0
 8026c04:	80c2      	strh	r2, [r0, #6]
 8026c06:	8003      	strh	r3, [r0, #0]
 8026c08:	8043      	strh	r3, [r0, #2]
 8026c0a:	bd10      	pop	{r4, pc}
 8026c0c:	2300      	movs	r3, #0
 8026c0e:	8003      	strh	r3, [r0, #0]
 8026c10:	8043      	strh	r3, [r0, #2]
 8026c12:	8083      	strh	r3, [r0, #4]
 8026c14:	e7d8      	b.n	8026bc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8026c16:	bf00      	nop
 8026c18:	2000d034 	.word	0x2000d034
 8026c1c:	0802faad 	.word	0x0802faad
 8026c20:	0802fb2f 	.word	0x0802fb2f
 8026c24:	0802fa2f 	.word	0x0802fa2f
 8026c28:	2000d02c 	.word	0x2000d02c
 8026c2c:	2000d030 	.word	0x2000d030
 8026c30:	2000d014 	.word	0x2000d014
 8026c34:	2000cf6a 	.word	0x2000cf6a
 8026c38:	2000cf6c 	.word	0x2000cf6c

08026c3c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8026c3c:	4b18      	ldr	r3, [pc, #96]	; (8026ca0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8026c3e:	681b      	ldr	r3, [r3, #0]
 8026c40:	b34b      	cbz	r3, 8026c96 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8026c42:	4a18      	ldr	r2, [pc, #96]	; (8026ca4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8026c44:	8800      	ldrh	r0, [r0, #0]
 8026c46:	8812      	ldrh	r2, [r2, #0]
 8026c48:	4290      	cmp	r0, r2
 8026c4a:	da11      	bge.n	8026c70 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8026c4c:	2214      	movs	r2, #20
 8026c4e:	fb02 3300 	mla	r3, r2, r0, r3
 8026c52:	8a1a      	ldrh	r2, [r3, #16]
 8026c54:	8919      	ldrh	r1, [r3, #8]
 8026c56:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8026c5a:	428a      	cmp	r2, r1
 8026c5c:	db1d      	blt.n	8026c9a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8026c5e:	8a58      	ldrh	r0, [r3, #18]
 8026c60:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8026c64:	895b      	ldrh	r3, [r3, #10]
 8026c66:	4298      	cmp	r0, r3
 8026c68:	bfac      	ite	ge
 8026c6a:	2000      	movge	r0, #0
 8026c6c:	2001      	movlt	r0, #1
 8026c6e:	4770      	bx	lr
 8026c70:	4b0d      	ldr	r3, [pc, #52]	; (8026ca8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8026c72:	881b      	ldrh	r3, [r3, #0]
 8026c74:	4413      	add	r3, r2
 8026c76:	4298      	cmp	r0, r3
 8026c78:	da0d      	bge.n	8026c96 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8026c7a:	4b0c      	ldr	r3, [pc, #48]	; (8026cac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8026c7c:	1a80      	subs	r0, r0, r2
 8026c7e:	220e      	movs	r2, #14
 8026c80:	681b      	ldr	r3, [r3, #0]
 8026c82:	fb02 3300 	mla	r3, r2, r0, r3
 8026c86:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8026c8a:	891a      	ldrh	r2, [r3, #8]
 8026c8c:	4291      	cmp	r1, r2
 8026c8e:	db04      	blt.n	8026c9a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8026c90:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8026c94:	e7e6      	b.n	8026c64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8026c96:	2000      	movs	r0, #0
 8026c98:	4770      	bx	lr
 8026c9a:	2001      	movs	r0, #1
 8026c9c:	4770      	bx	lr
 8026c9e:	bf00      	nop
 8026ca0:	2000d034 	.word	0x2000d034
 8026ca4:	2000d02c 	.word	0x2000d02c
 8026ca8:	2000d030 	.word	0x2000d030
 8026cac:	2000d014 	.word	0x2000d014

08026cb0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8026cb0:	b508      	push	{r3, lr}
 8026cb2:	4b11      	ldr	r3, [pc, #68]	; (8026cf8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>)
 8026cb4:	6819      	ldr	r1, [r3, #0]
 8026cb6:	b931      	cbnz	r1, 8026cc6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8026cb8:	4b10      	ldr	r3, [pc, #64]	; (8026cfc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8026cba:	f240 312f 	movw	r1, #815	; 0x32f
 8026cbe:	4a10      	ldr	r2, [pc, #64]	; (8026d00 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8026cc0:	4810      	ldr	r0, [pc, #64]	; (8026d04 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8026cc2:	f004 fa19 	bl	802b0f8 <__assert_func>
 8026cc6:	8803      	ldrh	r3, [r0, #0]
 8026cc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8026ccc:	4293      	cmp	r3, r2
 8026cce:	d011      	beq.n	8026cf4 <_ZNK8touchgfx6Bitmap7getDataEv+0x44>
 8026cd0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8026cd4:	4293      	cmp	r3, r2
 8026cd6:	d103      	bne.n	8026ce0 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8026cd8:	4b0b      	ldr	r3, [pc, #44]	; (8026d08 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8026cda:	681b      	ldr	r3, [r3, #0]
 8026cdc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8026cde:	bd08      	pop	{r3, pc}
 8026ce0:	4a0a      	ldr	r2, [pc, #40]	; (8026d0c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8026ce2:	6812      	ldr	r2, [r2, #0]
 8026ce4:	b112      	cbz	r2, 8026cec <_ZNK8touchgfx6Bitmap7getDataEv+0x3c>
 8026ce6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8026cea:	b920      	cbnz	r0, 8026cf6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8026cec:	2214      	movs	r2, #20
 8026cee:	4353      	muls	r3, r2
 8026cf0:	58c8      	ldr	r0, [r1, r3]
 8026cf2:	bd08      	pop	{r3, pc}
 8026cf4:	2000      	movs	r0, #0
 8026cf6:	bd08      	pop	{r3, pc}
 8026cf8:	2000d034 	.word	0x2000d034
 8026cfc:	0802faad 	.word	0x0802faad
 8026d00:	0802fb65 	.word	0x0802fb65
 8026d04:	0802fa2f 	.word	0x0802fa2f
 8026d08:	2000cf78 	.word	0x2000cf78
 8026d0c:	2000d010 	.word	0x2000d010

08026d10 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8026d10:	8802      	ldrh	r2, [r0, #0]
 8026d12:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8026d16:	429a      	cmp	r2, r3
 8026d18:	dc40      	bgt.n	8026d9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8026d1a:	4b21      	ldr	r3, [pc, #132]	; (8026da0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 8026d1c:	881b      	ldrh	r3, [r3, #0]
 8026d1e:	429a      	cmp	r2, r3
 8026d20:	da20      	bge.n	8026d64 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 8026d22:	4b20      	ldr	r3, [pc, #128]	; (8026da4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8026d24:	6819      	ldr	r1, [r3, #0]
 8026d26:	2314      	movs	r3, #20
 8026d28:	fb03 1302 	mla	r3, r3, r2, r1
 8026d2c:	6858      	ldr	r0, [r3, #4]
 8026d2e:	2800      	cmp	r0, #0
 8026d30:	d035      	beq.n	8026d9e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8026d32:	491d      	ldr	r1, [pc, #116]	; (8026da8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8026d34:	6809      	ldr	r1, [r1, #0]
 8026d36:	2900      	cmp	r1, #0
 8026d38:	d031      	beq.n	8026d9e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8026d3a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8026d3e:	b371      	cbz	r1, 8026d9e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8026d40:	7c5a      	ldrb	r2, [r3, #17]
 8026d42:	7cd8      	ldrb	r0, [r3, #19]
 8026d44:	0952      	lsrs	r2, r2, #5
 8026d46:	00d2      	lsls	r2, r2, #3
 8026d48:	ea42 1250 	orr.w	r2, r2, r0, lsr #5
 8026d4c:	8958      	ldrh	r0, [r3, #10]
 8026d4e:	2a0b      	cmp	r2, #11
 8026d50:	891a      	ldrh	r2, [r3, #8]
 8026d52:	fb00 f002 	mul.w	r0, r0, r2
 8026d56:	bf18      	it	ne
 8026d58:	0040      	lslne	r0, r0, #1
 8026d5a:	3003      	adds	r0, #3
 8026d5c:	f020 0003 	bic.w	r0, r0, #3
 8026d60:	4408      	add	r0, r1
 8026d62:	4770      	bx	lr
 8026d64:	4911      	ldr	r1, [pc, #68]	; (8026dac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8026d66:	8809      	ldrh	r1, [r1, #0]
 8026d68:	4419      	add	r1, r3
 8026d6a:	428a      	cmp	r2, r1
 8026d6c:	da16      	bge.n	8026d9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8026d6e:	4910      	ldr	r1, [pc, #64]	; (8026db0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8026d70:	1ad3      	subs	r3, r2, r3
 8026d72:	200e      	movs	r0, #14
 8026d74:	6809      	ldr	r1, [r1, #0]
 8026d76:	fb00 1303 	mla	r3, r0, r3, r1
 8026d7a:	7b19      	ldrb	r1, [r3, #12]
 8026d7c:	f001 011f 	and.w	r1, r1, #31
 8026d80:	290b      	cmp	r1, #11
 8026d82:	d10b      	bne.n	8026d9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8026d84:	8919      	ldrh	r1, [r3, #8]
 8026d86:	8958      	ldrh	r0, [r3, #10]
 8026d88:	4b07      	ldr	r3, [pc, #28]	; (8026da8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8026d8a:	4348      	muls	r0, r1
 8026d8c:	6819      	ldr	r1, [r3, #0]
 8026d8e:	3003      	adds	r0, #3
 8026d90:	f020 0303 	bic.w	r3, r0, #3
 8026d94:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8026d98:	4418      	add	r0, r3
 8026d9a:	4770      	bx	lr
 8026d9c:	2000      	movs	r0, #0
 8026d9e:	4770      	bx	lr
 8026da0:	2000d02c 	.word	0x2000d02c
 8026da4:	2000d034 	.word	0x2000d034
 8026da8:	2000d010 	.word	0x2000d010
 8026dac:	2000d030 	.word	0x2000d030
 8026db0:	2000d014 	.word	0x2000d014

08026db4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8026db4:	4b18      	ldr	r3, [pc, #96]	; (8026e18 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8026db6:	6819      	ldr	r1, [r3, #0]
 8026db8:	8803      	ldrh	r3, [r0, #0]
 8026dba:	b1e1      	cbz	r1, 8026df6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8026dbc:	4a17      	ldr	r2, [pc, #92]	; (8026e1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8026dbe:	8812      	ldrh	r2, [r2, #0]
 8026dc0:	4293      	cmp	r3, r2
 8026dc2:	da09      	bge.n	8026dd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8026dc4:	2214      	movs	r2, #20
 8026dc6:	fb02 1303 	mla	r3, r2, r3, r1
 8026dca:	7c58      	ldrb	r0, [r3, #17]
 8026dcc:	7cdb      	ldrb	r3, [r3, #19]
 8026dce:	0940      	lsrs	r0, r0, #5
 8026dd0:	00c0      	lsls	r0, r0, #3
 8026dd2:	ea40 1053 	orr.w	r0, r0, r3, lsr #5
 8026dd6:	4770      	bx	lr
 8026dd8:	4911      	ldr	r1, [pc, #68]	; (8026e20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8026dda:	8809      	ldrh	r1, [r1, #0]
 8026ddc:	4411      	add	r1, r2
 8026dde:	428b      	cmp	r3, r1
 8026de0:	da09      	bge.n	8026df6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8026de2:	1a9b      	subs	r3, r3, r2
 8026de4:	4a0f      	ldr	r2, [pc, #60]	; (8026e24 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8026de6:	210e      	movs	r1, #14
 8026de8:	6812      	ldr	r2, [r2, #0]
 8026dea:	fb01 2303 	mla	r3, r1, r3, r2
 8026dee:	7b18      	ldrb	r0, [r3, #12]
 8026df0:	f000 001f 	and.w	r0, r0, #31
 8026df4:	4770      	bx	lr
 8026df6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8026dfa:	4293      	cmp	r3, r2
 8026dfc:	d10a      	bne.n	8026e14 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8026dfe:	4b0a      	ldr	r3, [pc, #40]	; (8026e28 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8026e00:	681b      	ldr	r3, [r3, #0]
 8026e02:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8026e06:	b10a      	cbz	r2, 8026e0c <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 8026e08:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8026e0a:	b900      	cbnz	r0, 8026e0e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8026e0c:	6898      	ldr	r0, [r3, #8]
 8026e0e:	6803      	ldr	r3, [r0, #0]
 8026e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026e12:	4718      	bx	r3
 8026e14:	2000      	movs	r0, #0
 8026e16:	4770      	bx	lr
 8026e18:	2000d034 	.word	0x2000d034
 8026e1c:	2000d02c 	.word	0x2000d02c
 8026e20:	2000d030 	.word	0x2000d030
 8026e24:	2000d014 	.word	0x2000d014
 8026e28:	2000cf78 	.word	0x2000cf78

08026e2c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8026e2c:	2010      	movs	r0, #16
 8026e2e:	4770      	bx	lr

08026e30 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8026e30:	2000      	movs	r0, #0
 8026e32:	4770      	bx	lr

08026e34 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 8026e34:	00d2      	lsls	r2, r2, #3
 8026e36:	0209      	lsls	r1, r1, #8
 8026e38:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026e3c:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8026e40:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8026e44:	4310      	orrs	r0, r2
 8026e46:	4770      	bx	lr

08026e48 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 8026e48:	1209      	asrs	r1, r1, #8
 8026e4a:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8026e4e:	4770      	bx	lr

08026e50 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 8026e50:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8026e54:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8026e58:	4770      	bx	lr

08026e5a <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 8026e5a:	00c9      	lsls	r1, r1, #3
 8026e5c:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8026e60:	4770      	bx	lr

08026e62 <_ZN8touchgfx8LCD16bpp4initEv>:
 8026e62:	4770      	bx	lr

08026e64 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8026e64:	b508      	push	{r3, lr}
 8026e66:	4b06      	ldr	r3, [pc, #24]	; (8026e80 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 8026e68:	8818      	ldrh	r0, [r3, #0]
 8026e6a:	b928      	cbnz	r0, 8026e78 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8026e6c:	4b05      	ldr	r3, [pc, #20]	; (8026e84 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8026e6e:	21d5      	movs	r1, #213	; 0xd5
 8026e70:	4a05      	ldr	r2, [pc, #20]	; (8026e88 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8026e72:	4806      	ldr	r0, [pc, #24]	; (8026e8c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8026e74:	f004 f940 	bl	802b0f8 <__assert_func>
 8026e78:	0040      	lsls	r0, r0, #1
 8026e7a:	b280      	uxth	r0, r0
 8026e7c:	bd08      	pop	{r3, pc}
 8026e7e:	bf00      	nop
 8026e80:	2000cf70 	.word	0x2000cf70
 8026e84:	0802ff7e 	.word	0x0802ff7e
 8026e88:	08030261 	.word	0x08030261
 8026e8c:	0802ffc0 	.word	0x0802ffc0

08026e90 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8026e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e94:	b099      	sub	sp, #100	; 0x64
 8026e96:	461d      	mov	r5, r3
 8026e98:	2600      	movs	r6, #0
 8026e9a:	4617      	mov	r7, r2
 8026e9c:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8026ea0:	a816      	add	r0, sp, #88	; 0x58
 8026ea2:	468a      	mov	sl, r1
 8026ea4:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 8026ea8:	9307      	str	r3, [sp, #28]
 8026eaa:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8026eae:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 8026eb2:	9306      	str	r3, [sp, #24]
 8026eb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026eb6:	f8ad 6058 	strh.w	r6, [sp, #88]	; 0x58
 8026eba:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8026ebe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8026ec2:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
 8026ec6:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
 8026eca:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
 8026ece:	f7fd fa55 	bl	802437c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026ed2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026ed4:	682c      	ldr	r4, [r5, #0]
 8026ed6:	6818      	ldr	r0, [r3, #0]
 8026ed8:	f9b8 3000 	ldrsh.w	r3, [r8]
 8026edc:	f9b9 e000 	ldrsh.w	lr, [r9]
 8026ee0:	1b00      	subs	r0, r0, r4
 8026ee2:	18e1      	adds	r1, r4, r3
 8026ee4:	ebae 0c01 	sub.w	ip, lr, r1
 8026ee8:	4560      	cmp	r0, ip
 8026eea:	f341 8621 	ble.w	8028b30 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca0>
 8026eee:	f8b9 9004 	ldrh.w	r9, [r9, #4]
 8026ef2:	44f1      	add	r9, lr
 8026ef4:	fa0f f989 	sxth.w	r9, r9
 8026ef8:	4549      	cmp	r1, r9
 8026efa:	f301 8619 	bgt.w	8028b30 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca0>
 8026efe:	9a06      	ldr	r2, [sp, #24]
 8026f00:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 8026f04:	f9b8 8002 	ldrsh.w	r8, [r8, #2]
 8026f08:	43d2      	mvns	r2, r2
 8026f0a:	ed95 3a07 	vldr	s6, [r5, #28]
 8026f0e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8026f12:	b2d2      	uxtb	r2, r2
 8026f14:	eec4 3a03 	vdiv.f32	s7, s8, s6
 8026f18:	ed97 5a09 	vldr	s10, [r7, #36]	; 0x24
 8026f1c:	9208      	str	r2, [sp, #32]
 8026f1e:	696a      	ldr	r2, [r5, #20]
 8026f20:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8026f24:	4442      	add	r2, r8
 8026f26:	f8da 8004 	ldr.w	r8, [sl, #4]
 8026f2a:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8026f2e:	fb08 4802 	mla	r8, r8, r2, r4
 8026f32:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 8026f36:	ed95 2a0d 	vldr	s4, [r5, #52]	; 0x34
 8026f3a:	4282      	cmp	r2, r0
 8026f3c:	f8da b000 	ldr.w	fp, [sl]
 8026f40:	4498      	add	r8, r3
 8026f42:	bfa8      	it	ge
 8026f44:	4602      	movge	r2, r0
 8026f46:	458e      	cmp	lr, r1
 8026f48:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8026f4c:	ee07 2a10 	vmov	s14, r2
 8026f50:	9209      	str	r2, [sp, #36]	; 0x24
 8026f52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026f56:	ee27 5a05 	vmul.f32	s10, s14, s10
 8026f5a:	ee67 4a24 	vmul.f32	s9, s14, s9
 8026f5e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8026f62:	ee73 6a05 	vadd.f32	s13, s6, s10
 8026f66:	ee37 6aa4 	vadd.f32	s12, s15, s9
 8026f6a:	ee72 5a07 	vadd.f32	s11, s4, s14
 8026f6e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8026f72:	ee22 2a23 	vmul.f32	s4, s4, s7
 8026f76:	dc01      	bgt.n	8026f7c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xec>
 8026f78:	960b      	str	r6, [sp, #44]	; 0x2c
 8026f7a:	e029      	b.n	8026fd0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x140>
 8026f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026f7e:	fb9c f1f2 	sdiv	r1, ip, r2
 8026f82:	ee03 1a90 	vmov	s7, r1
 8026f86:	434a      	muls	r2, r1
 8026f88:	2900      	cmp	r1, #0
 8026f8a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8026f8e:	ebac 0502 	sub.w	r5, ip, r2
 8026f92:	950b      	str	r5, [sp, #44]	; 0x2c
 8026f94:	eee5 6a23 	vfma.f32	s13, s10, s7
 8026f98:	eea4 6aa3 	vfma.f32	s12, s9, s7
 8026f9c:	eee7 5a23 	vfma.f32	s11, s14, s7
 8026fa0:	dd12      	ble.n	8026fc8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x138>
 8026fa2:	ee76 7ac5 	vsub.f32	s15, s13, s10
 8026fa6:	ee35 2ac7 	vsub.f32	s4, s11, s14
 8026faa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8026fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026fb2:	bf14      	ite	ne
 8026fb4:	eec4 3a27 	vdivne.f32	s7, s8, s15
 8026fb8:	eef0 3a44 	vmoveq.f32	s7, s8
 8026fbc:	ee76 7a64 	vsub.f32	s15, s12, s9
 8026fc0:	ee22 2a23 	vmul.f32	s4, s4, s7
 8026fc4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8026fc8:	1a80      	subs	r0, r0, r2
 8026fca:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8026fce:	4414      	add	r4, r2
 8026fd0:	18e2      	adds	r2, r4, r3
 8026fd2:	4402      	add	r2, r0
 8026fd4:	4591      	cmp	r9, r2
 8026fd6:	bfbc      	itt	lt
 8026fd8:	eba9 0003 	sublt.w	r0, r9, r3
 8026fdc:	1b00      	sublt	r0, r0, r4
 8026fde:	2800      	cmp	r0, #0
 8026fe0:	f341 85a6 	ble.w	8028b30 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca0>
 8026fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026fe8:	fb90 f3f3 	sdiv	r3, r0, r3
 8026fec:	930a      	str	r3, [sp, #40]	; 0x28
 8026fee:	fb02 0313 	mls	r3, r2, r3, r0
 8026ff2:	930d      	str	r3, [sp, #52]	; 0x34
 8026ff4:	b91b      	cbnz	r3, 8026ffe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x16e>
 8026ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026ff8:	920d      	str	r2, [sp, #52]	; 0x34
 8026ffa:	3b01      	subs	r3, #1
 8026ffc:	930a      	str	r3, [sp, #40]	; 0x28
 8026ffe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027000:	eddf 3a7f 	vldr	s7, [pc, #508]	; 8027200 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x370>
 8027004:	681b      	ldr	r3, [r3, #0]
 8027006:	9302      	str	r3, [sp, #8]
 8027008:	9b07      	ldr	r3, [sp, #28]
 802700a:	f003 0301 	and.w	r3, r3, #1
 802700e:	9315      	str	r3, [sp, #84]	; 0x54
 8027010:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8027014:	9300      	str	r3, [sp, #0]
 8027016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027018:	2b00      	cmp	r3, #0
 802701a:	dc03      	bgt.n	8027024 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x194>
 802701c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802701e:	2b00      	cmp	r3, #0
 8027020:	f341 8586 	ble.w	8028b30 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca0>
 8027024:	ee84 3a26 	vdiv.f32	s6, s8, s13
 8027028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802702a:	990a      	ldr	r1, [sp, #40]	; 0x28
 802702c:	eef0 1a67 	vmov.f32	s3, s15
 8027030:	eefe 1ac8 	vcvt.s32.f32	s3, s3, #16
 8027034:	ee11 ca90 	vmov	ip, s3
 8027038:	eef0 1a42 	vmov.f32	s3, s4
 802703c:	eefe 1ac8 	vcvt.s32.f32	s3, s3, #16
 8027040:	ee66 2a03 	vmul.f32	s5, s12, s6
 8027044:	ee25 3a83 	vmul.f32	s6, s11, s6
 8027048:	ee11 aa90 	vmov	sl, s3
 802704c:	ee72 7ae7 	vsub.f32	s15, s5, s15
 8027050:	ee33 2a42 	vsub.f32	s4, s6, s4
 8027054:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8027058:	eebe 2ac8 	vcvt.s32.f32	s4, s4, #16
 802705c:	ee17 2a90 	vmov	r2, s15
 8027060:	fb92 f3f3 	sdiv	r3, r2, r3
 8027064:	ee12 2a10 	vmov	r2, s4
 8027068:	9304      	str	r3, [sp, #16]
 802706a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802706c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027072:	9305      	str	r3, [sp, #20]
 8027074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027076:	2900      	cmp	r1, #0
 8027078:	bfc8      	it	gt
 802707a:	4613      	movgt	r3, r2
 802707c:	9301      	str	r3, [sp, #4]
 802707e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027080:	2b00      	cmp	r3, #0
 8027082:	dd0d      	ble.n	80270a0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x210>
 8027084:	9a04      	ldr	r2, [sp, #16]
 8027086:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 802708a:	fb02 cc03 	mla	ip, r2, r3, ip
 802708e:	9a05      	ldr	r2, [sp, #20]
 8027090:	fb02 aa03 	mla	sl, r2, r3, sl
 8027094:	9b01      	ldr	r3, [sp, #4]
 8027096:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027098:	1a9b      	subs	r3, r3, r2
 802709a:	9301      	str	r3, [sp, #4]
 802709c:	2300      	movs	r3, #0
 802709e:	930b      	str	r3, [sp, #44]	; 0x2c
 80270a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80270a2:	b91b      	cbnz	r3, 80270ac <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x21c>
 80270a4:	f50c 4c00 	add.w	ip, ip, #32768	; 0x8000
 80270a8:	f50a 4a00 	add.w	sl, sl, #32768	; 0x8000
 80270ac:	ea5f 432c 	movs.w	r3, ip, asr #16
 80270b0:	d43e      	bmi.n	8027130 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a0>
 80270b2:	f9bd 005c 	ldrsh.w	r0, [sp, #92]	; 0x5c
 80270b6:	4283      	cmp	r3, r0
 80270b8:	da3a      	bge.n	8027130 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a0>
 80270ba:	ea5f 432a 	movs.w	r3, sl, asr #16
 80270be:	d437      	bmi.n	8027130 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a0>
 80270c0:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
 80270c4:	428b      	cmp	r3, r1
 80270c6:	da33      	bge.n	8027130 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a0>
 80270c8:	9b01      	ldr	r3, [sp, #4]
 80270ca:	9a04      	ldr	r2, [sp, #16]
 80270cc:	3b01      	subs	r3, #1
 80270ce:	fb03 c202 	mla	r2, r3, r2, ip
 80270d2:	1412      	asrs	r2, r2, #16
 80270d4:	d42c      	bmi.n	8027130 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a0>
 80270d6:	4282      	cmp	r2, r0
 80270d8:	da2a      	bge.n	8027130 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a0>
 80270da:	9a05      	ldr	r2, [sp, #20]
 80270dc:	fb03 a302 	mla	r3, r3, r2, sl
 80270e0:	141b      	asrs	r3, r3, #16
 80270e2:	d425      	bmi.n	8027130 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a0>
 80270e4:	428b      	cmp	r3, r1
 80270e6:	bfb4      	ite	lt
 80270e8:	2300      	movlt	r3, #0
 80270ea:	2301      	movge	r3, #1
 80270ec:	9303      	str	r3, [sp, #12]
 80270ee:	9b07      	ldr	r3, [sp, #28]
 80270f0:	2b09      	cmp	r3, #9
 80270f2:	f000 846b 	beq.w	80279cc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xb3c>
 80270f6:	f200 8085 	bhi.w	8027204 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x374>
 80270fa:	2b02      	cmp	r3, #2
 80270fc:	f000 86c2 	beq.w	8027e84 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xff4>
 8027100:	d818      	bhi.n	8027134 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a4>
 8027102:	2b00      	cmp	r3, #0
 8027104:	f001 845e 	beq.w	80289c4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1b34>
 8027108:	2b01      	cmp	r3, #1
 802710a:	f000 8724 	beq.w	8027f56 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10c6>
 802710e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027110:	ee76 6a85 	vadd.f32	s13, s13, s10
 8027114:	ee36 6a24 	vadd.f32	s12, s12, s9
 8027118:	2b00      	cmp	r3, #0
 802711a:	ee75 5a87 	vadd.f32	s11, s11, s14
 802711e:	f341 8507 	ble.w	8028b30 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca0>
 8027122:	3b01      	subs	r3, #1
 8027124:	eeb0 2a43 	vmov.f32	s4, s6
 8027128:	eef0 7a62 	vmov.f32	s15, s5
 802712c:	930a      	str	r3, [sp, #40]	; 0x28
 802712e:	e772      	b.n	8027016 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x186>
 8027130:	2301      	movs	r3, #1
 8027132:	e7db      	b.n	80270ec <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x25c>
 8027134:	9b07      	ldr	r3, [sp, #28]
 8027136:	2b03      	cmp	r3, #3
 8027138:	f000 84f4 	beq.w	8027b24 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc94>
 802713c:	2b08      	cmp	r3, #8
 802713e:	d1e6      	bne.n	802710e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x27e>
 8027140:	465c      	mov	r4, fp
 8027142:	2500      	movs	r5, #0
 8027144:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8027148:	9b01      	ldr	r3, [sp, #4]
 802714a:	42ab      	cmp	r3, r5
 802714c:	f341 8094 	ble.w	8028278 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e8>
 8027150:	9b03      	ldr	r3, [sp, #12]
 8027152:	ea4f 422c 	mov.w	r2, ip, asr #16
 8027156:	ea4f 412a 	mov.w	r1, sl, asr #16
 802715a:	b15b      	cbz	r3, 8027174 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2e4>
 802715c:	2a00      	cmp	r2, #0
 802715e:	db48      	blt.n	80271f2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x362>
 8027160:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8027164:	429a      	cmp	r2, r3
 8027166:	da44      	bge.n	80271f2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x362>
 8027168:	2900      	cmp	r1, #0
 802716a:	db42      	blt.n	80271f2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x362>
 802716c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8027170:	4299      	cmp	r1, r3
 8027172:	da3e      	bge.n	80271f2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x362>
 8027174:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8027178:	fb01 2303 	mla	r3, r1, r3, r2
 802717c:	9a02      	ldr	r2, [sp, #8]
 802717e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027182:	9a06      	ldr	r2, [sp, #24]
 8027184:	2aff      	cmp	r2, #255	; 0xff
 8027186:	f001 84b1 	beq.w	8028aec <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c5c>
 802718a:	8822      	ldrh	r2, [r4, #0]
 802718c:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8027190:	f8bd 7000 	ldrh.w	r7, [sp]
 8027194:	1210      	asrs	r0, r2, #8
 8027196:	f8bd e000 	ldrh.w	lr, [sp]
 802719a:	fb11 f107 	smulbb	r1, r1, r7
 802719e:	f3c3 2707 	ubfx	r7, r3, #8, #8
 80271a2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80271a6:	b2db      	uxtb	r3, r3
 80271a8:	fb17 f70e 	smulbb	r7, r7, lr
 80271ac:	fb00 1006 	mla	r0, r0, r6, r1
 80271b0:	10d1      	asrs	r1, r2, #3
 80271b2:	fb13 f30e 	smulbb	r3, r3, lr
 80271b6:	00d2      	lsls	r2, r2, #3
 80271b8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80271bc:	b280      	uxth	r0, r0
 80271be:	b2d2      	uxtb	r2, r2
 80271c0:	fb01 7106 	mla	r1, r1, r6, r7
 80271c4:	fb02 3306 	mla	r3, r2, r6, r3
 80271c8:	1c42      	adds	r2, r0, #1
 80271ca:	b289      	uxth	r1, r1
 80271cc:	b29b      	uxth	r3, r3
 80271ce:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80271d2:	1c4f      	adds	r7, r1, #1
 80271d4:	1c5a      	adds	r2, r3, #1
 80271d6:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 80271da:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80271de:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80271e2:	097f      	lsrs	r7, r7, #5
 80271e4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80271e8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80271ec:	4318      	orrs	r0, r3
 80271ee:	4338      	orrs	r0, r7
 80271f0:	8020      	strh	r0, [r4, #0]
 80271f2:	9b04      	ldr	r3, [sp, #16]
 80271f4:	3402      	adds	r4, #2
 80271f6:	3501      	adds	r5, #1
 80271f8:	449c      	add	ip, r3
 80271fa:	9b05      	ldr	r3, [sp, #20]
 80271fc:	449a      	add	sl, r3
 80271fe:	e7a3      	b.n	8027148 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2b8>
 8027200:	37800000 	.word	0x37800000
 8027204:	9b07      	ldr	r3, [sp, #28]
 8027206:	2b2c      	cmp	r3, #44	; 0x2c
 8027208:	f001 81ca 	beq.w	80285a0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1710>
 802720c:	f200 81b0 	bhi.w	8027570 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6e0>
 8027210:	2b0a      	cmp	r3, #10
 8027212:	f000 836f 	beq.w	80278f4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa64>
 8027216:	2b0b      	cmp	r3, #11
 8027218:	f47f af79 	bne.w	802710e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x27e>
 802721c:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8027220:	2300      	movs	r3, #0
 8027222:	465f      	mov	r7, fp
 8027224:	930c      	str	r3, [sp, #48]	; 0x30
 8027226:	9b01      	ldr	r3, [sp, #4]
 8027228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802722a:	4293      	cmp	r3, r2
 802722c:	f341 8024 	ble.w	8028278 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e8>
 8027230:	9a03      	ldr	r2, [sp, #12]
 8027232:	ea4f 412c 	mov.w	r1, ip, asr #16
 8027236:	ea4f 432a 	mov.w	r3, sl, asr #16
 802723a:	b17a      	cbz	r2, 802725c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x3cc>
 802723c:	2900      	cmp	r1, #0
 802723e:	f2c0 818e 	blt.w	802755e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6ce>
 8027242:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8027246:	4291      	cmp	r1, r2
 8027248:	f280 8189 	bge.w	802755e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6ce>
 802724c:	2b00      	cmp	r3, #0
 802724e:	f2c0 8186 	blt.w	802755e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6ce>
 8027252:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 8027256:	4293      	cmp	r3, r2
 8027258:	f280 8181 	bge.w	802755e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6ce>
 802725c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8027260:	9802      	ldr	r0, [sp, #8]
 8027262:	fb03 1102 	mla	r1, r3, r2, r1
 8027266:	9b02      	ldr	r3, [sp, #8]
 8027268:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 802726c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8027270:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8027274:	0e0e      	lsrs	r6, r1, #24
 8027276:	685d      	ldr	r5, [r3, #4]
 8027278:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802727c:	ee07 6a90 	vmov	s15, r6
 8027280:	6858      	ldr	r0, [r3, #4]
 8027282:	0e23      	lsrs	r3, r4, #24
 8027284:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8027288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802728c:	930e      	str	r3, [sp, #56]	; 0x38
 802728e:	fa1f f38c 	uxth.w	r3, ip
 8027292:	ee02 8a10 	vmov	s4, r8
 8027296:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 802729a:	ee01 3a10 	vmov	s2, r3
 802729e:	fa1f f38a 	uxth.w	r3, sl
 80272a2:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 80272a6:	ee00 ea10 	vmov	s0, lr
 80272aa:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80272ae:	ee00 3a90 	vmov	s1, r3
 80272b2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80272b6:	ee32 2a67 	vsub.f32	s4, s4, s15
 80272ba:	ee21 1a23 	vmul.f32	s2, s2, s7
 80272be:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80272c2:	eee1 7a02 	vfma.f32	s15, s2, s4
 80272c6:	ed9d 2a0e 	vldr	s4, [sp, #56]	; 0x38
 80272ca:	ee60 0aa3 	vmul.f32	s1, s1, s7
 80272ce:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 80272d2:	ee30 0a42 	vsub.f32	s0, s0, s4
 80272d6:	eea1 2a00 	vfma.f32	s4, s2, s0
 80272da:	ee32 2a67 	vsub.f32	s4, s4, s15
 80272de:	eee0 7a82 	vfma.f32	s15, s1, s4
 80272e2:	ee77 7aa1 	vadd.f32	s15, s15, s3
 80272e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80272ea:	ee17 2a90 	vmov	r2, s15
 80272ee:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80272f2:	f000 8134 	beq.w	802755e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6ce>
 80272f6:	f001 19ff 	and.w	r9, r1, #16711935	; 0xff00ff
 80272fa:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80272fe:	2aff      	cmp	r2, #255	; 0xff
 8027300:	fb06 f909 	mul.w	r9, r6, r9
 8027304:	fb06 f601 	mul.w	r6, r6, r1
 8027308:	ea4f 2119 	mov.w	r1, r9, lsr #8
 802730c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8027310:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8027314:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027318:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 802731c:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8027320:	4449      	add	r1, r9
 8027322:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027326:	ea4f 2313 	mov.w	r3, r3, lsr #8
 802732a:	fb08 f606 	mul.w	r6, r8, r6
 802732e:	ea4f 2111 	mov.w	r1, r1, lsr #8
 8027332:	fb08 f805 	mul.w	r8, r8, r5
 8027336:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802733a:	ea4f 6514 	mov.w	r5, r4, lsr #24
 802733e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027342:	ea41 0103 	orr.w	r1, r1, r3
 8027346:	ea4f 2316 	mov.w	r3, r6, lsr #8
 802734a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802734e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027352:	441e      	add	r6, r3
 8027354:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8027358:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 802735c:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8027360:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8027364:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027368:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802736c:	ea46 0603 	orr.w	r6, r6, r3
 8027370:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8027374:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027378:	fb05 f303 	mul.w	r3, r5, r3
 802737c:	fb05 f804 	mul.w	r8, r5, r4
 8027380:	ea4f 2413 	mov.w	r4, r3, lsr #8
 8027384:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8027388:	f508 7580 	add.w	r5, r8, #256	; 0x100
 802738c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027390:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 8027394:	4423      	add	r3, r4
 8027396:	ea4f 2515 	mov.w	r5, r5, lsr #8
 802739a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 802739e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80273a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80273a6:	ea43 0305 	orr.w	r3, r3, r5
 80273aa:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80273ae:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80273b2:	fb0e f505 	mul.w	r5, lr, r5
 80273b6:	fb0e fe00 	mul.w	lr, lr, r0
 80273ba:	ea4f 2015 	mov.w	r0, r5, lsr #8
 80273be:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80273c2:	f50e 7480 	add.w	r4, lr, #256	; 0x100
 80273c6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80273ca:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 80273ce:	4405      	add	r5, r0
 80273d0:	ea4f 4011 	mov.w	r0, r1, lsr #16
 80273d4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80273d8:	ee07 0a90 	vmov	s15, r0
 80273dc:	ea4f 4016 	mov.w	r0, r6, lsr #16
 80273e0:	ea4f 2515 	mov.w	r5, r5, lsr #8
 80273e4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80273e8:	ee02 0a10 	vmov	s4, r0
 80273ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80273f0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80273f4:	ea4f 4013 	mov.w	r0, r3, lsr #16
 80273f8:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 80273fc:	ea45 0e0e 	orr.w	lr, r5, lr
 8027400:	ee32 2a67 	vsub.f32	s4, s4, s15
 8027404:	eee1 7a02 	vfma.f32	s15, s2, s4
 8027408:	ee02 0a10 	vmov	s4, r0
 802740c:	ea4f 401e 	mov.w	r0, lr, lsr #16
 8027410:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 8027414:	ee00 0a10 	vmov	s0, r0
 8027418:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 802741c:	ee30 0a42 	vsub.f32	s0, s0, s4
 8027420:	eea1 2a00 	vfma.f32	s4, s2, s0
 8027424:	ee32 2a67 	vsub.f32	s4, s4, s15
 8027428:	eee0 7a82 	vfma.f32	s15, s1, s4
 802742c:	ee77 7aa1 	vadd.f32	s15, s15, s3
 8027430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8027434:	ee17 0a90 	vmov	r0, s15
 8027438:	f000 04f8 	and.w	r4, r0, #248	; 0xf8
 802743c:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8027440:	b2c9      	uxtb	r1, r1
 8027442:	ee07 0a90 	vmov	s15, r0
 8027446:	f3c6 2007 	ubfx	r0, r6, #8, #8
 802744a:	b2f6      	uxtb	r6, r6
 802744c:	ee02 0a10 	vmov	s4, r0
 8027450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8027454:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8027458:	b2db      	uxtb	r3, r3
 802745a:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 802745e:	ee32 2a67 	vsub.f32	s4, s4, s15
 8027462:	eee1 7a02 	vfma.f32	s15, s2, s4
 8027466:	ee02 0a10 	vmov	s4, r0
 802746a:	f3ce 2007 	ubfx	r0, lr, #8, #8
 802746e:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 8027472:	ee00 0a10 	vmov	s0, r0
 8027476:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 802747a:	ee30 0a42 	vsub.f32	s0, s0, s4
 802747e:	eea1 2a00 	vfma.f32	s4, s2, s0
 8027482:	ee32 2a67 	vsub.f32	s4, s4, s15
 8027486:	eee0 7a82 	vfma.f32	s15, s1, s4
 802748a:	ee02 6a10 	vmov	s4, r6
 802748e:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 8027492:	ee77 7aa1 	vadd.f32	s15, s15, s3
 8027496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802749a:	ee17 0a90 	vmov	r0, s15
 802749e:	ee07 1a90 	vmov	s15, r1
 80274a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80274a6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80274aa:	ee32 2a67 	vsub.f32	s4, s4, s15
 80274ae:	eee1 7a02 	vfma.f32	s15, s2, s4
 80274b2:	ee02 3a10 	vmov	s4, r3
 80274b6:	fa5f f38e 	uxtb.w	r3, lr
 80274ba:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 80274be:	ee00 3a10 	vmov	s0, r3
 80274c2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80274c6:	ee30 0a42 	vsub.f32	s0, s0, s4
 80274ca:	eea1 2a00 	vfma.f32	s4, s2, s0
 80274ce:	ee32 2a67 	vsub.f32	s4, s4, s15
 80274d2:	eee0 7a82 	vfma.f32	s15, s1, s4
 80274d6:	ee77 7aa1 	vadd.f32	s15, s15, s3
 80274da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80274de:	ee17 3a90 	vmov	r3, s15
 80274e2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80274e6:	d103      	bne.n	80274f0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x660>
 80274e8:	9906      	ldr	r1, [sp, #24]
 80274ea:	29ff      	cmp	r1, #255	; 0xff
 80274ec:	f001 830b 	beq.w	8028b06 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c76>
 80274f0:	9d00      	ldr	r5, [sp, #0]
 80274f2:	8839      	ldrh	r1, [r7, #0]
 80274f4:	436a      	muls	r2, r5
 80274f6:	120e      	asrs	r6, r1, #8
 80274f8:	1c55      	adds	r5, r2, #1
 80274fa:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80274fe:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8027502:	f8bd 5000 	ldrh.w	r5, [sp]
 8027506:	fb14 f405 	smulbb	r4, r4, r5
 802750a:	ea6f 2222 	mvn.w	r2, r2, asr #8
 802750e:	10cd      	asrs	r5, r1, #3
 8027510:	b2d2      	uxtb	r2, r2
 8027512:	00c9      	lsls	r1, r1, #3
 8027514:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027518:	fb06 4602 	mla	r6, r6, r2, r4
 802751c:	f8bd 4000 	ldrh.w	r4, [sp]
 8027520:	b2c9      	uxtb	r1, r1
 8027522:	fb13 f304 	smulbb	r3, r3, r4
 8027526:	b2b6      	uxth	r6, r6
 8027528:	fb10 f004 	smulbb	r0, r0, r4
 802752c:	fb01 3102 	mla	r1, r1, r2, r3
 8027530:	1c74      	adds	r4, r6, #1
 8027532:	fb05 0002 	mla	r0, r5, r2, r0
 8027536:	b289      	uxth	r1, r1
 8027538:	b285      	uxth	r5, r0
 802753a:	1c48      	adds	r0, r1, #1
 802753c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8027540:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8027544:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8027548:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802754c:	4306      	orrs	r6, r0
 802754e:	1c68      	adds	r0, r5, #1
 8027550:	eb00 2015 	add.w	r0, r0, r5, lsr #8
 8027554:	0940      	lsrs	r0, r0, #5
 8027556:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802755a:	4306      	orrs	r6, r0
 802755c:	803e      	strh	r6, [r7, #0]
 802755e:	9b04      	ldr	r3, [sp, #16]
 8027560:	3702      	adds	r7, #2
 8027562:	449c      	add	ip, r3
 8027564:	9b05      	ldr	r3, [sp, #20]
 8027566:	449a      	add	sl, r3
 8027568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802756a:	3301      	adds	r3, #1
 802756c:	930c      	str	r3, [sp, #48]	; 0x30
 802756e:	e65a      	b.n	8027226 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x396>
 8027570:	9b07      	ldr	r3, [sp, #28]
 8027572:	2b2e      	cmp	r3, #46	; 0x2e
 8027574:	f001 819d 	beq.w	80288b2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1a22>
 8027578:	f0c0 85a2 	bcc.w	80280c0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1230>
 802757c:	2b2f      	cmp	r3, #47	; 0x2f
 802757e:	f47f adc6 	bne.w	802710e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x27e>
 8027582:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027584:	685b      	ldr	r3, [r3, #4]
 8027586:	781b      	ldrb	r3, [r3, #0]
 8027588:	2b00      	cmp	r3, #0
 802758a:	f47f adc0 	bne.w	802710e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x27e>
 802758e:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8027592:	465f      	mov	r7, fp
 8027594:	930c      	str	r3, [sp, #48]	; 0x30
 8027596:	9b01      	ldr	r3, [sp, #4]
 8027598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802759a:	4293      	cmp	r3, r2
 802759c:	f340 866c 	ble.w	8028278 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e8>
 80275a0:	9a03      	ldr	r2, [sp, #12]
 80275a2:	ea4f 432c 	mov.w	r3, ip, asr #16
 80275a6:	ea4f 412a 	mov.w	r1, sl, asr #16
 80275aa:	b17a      	cbz	r2, 80275cc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x73c>
 80275ac:	2b00      	cmp	r3, #0
 80275ae:	f2c0 8198 	blt.w	80278e2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa52>
 80275b2:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80275b6:	4293      	cmp	r3, r2
 80275b8:	f280 8193 	bge.w	80278e2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa52>
 80275bc:	2900      	cmp	r1, #0
 80275be:	f2c0 8190 	blt.w	80278e2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa52>
 80275c2:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 80275c6:	4291      	cmp	r1, r2
 80275c8:	f280 818b 	bge.w	80278e2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa52>
 80275cc:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80275d0:	9802      	ldr	r0, [sp, #8]
 80275d2:	fb01 3102 	mla	r1, r1, r2, r3
 80275d6:	9b02      	ldr	r3, [sp, #8]
 80275d8:	185c      	adds	r4, r3, r1
 80275da:	5c41      	ldrb	r1, [r0, r1]
 80275dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80275de:	7860      	ldrb	r0, [r4, #1]
 80275e0:	3101      	adds	r1, #1
 80275e2:	685b      	ldr	r3, [r3, #4]
 80275e4:	3001      	adds	r0, #1
 80275e6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80275ea:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80275ee:	18a0      	adds	r0, r4, r2
 80275f0:	5ca2      	ldrb	r2, [r4, r2]
 80275f2:	0e0e      	lsrs	r6, r1, #24
 80275f4:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80275f8:	3201      	adds	r2, #1
 80275fa:	ee07 6a90 	vmov	s15, r6
 80275fe:	ee02 8a10 	vmov	s4, r8
 8027602:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8027606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802760a:	7842      	ldrb	r2, [r0, #1]
 802760c:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 8027610:	3201      	adds	r2, #1
 8027612:	ee32 2a67 	vsub.f32	s4, s4, s15
 8027616:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802761a:	0e23      	lsrs	r3, r4, #24
 802761c:	930e      	str	r3, [sp, #56]	; 0x38
 802761e:	fa1f f38c 	uxth.w	r3, ip
 8027622:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8027626:	ee01 3a10 	vmov	s2, r3
 802762a:	fa1f f38a 	uxth.w	r3, sl
 802762e:	ee00 ea10 	vmov	s0, lr
 8027632:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8027636:	ee00 3a90 	vmov	s1, r3
 802763a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 802763e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8027642:	ee21 1a23 	vmul.f32	s2, s2, s7
 8027646:	ee60 0aa3 	vmul.f32	s1, s1, s7
 802764a:	eee1 7a02 	vfma.f32	s15, s2, s4
 802764e:	ed9d 2a0e 	vldr	s4, [sp, #56]	; 0x38
 8027652:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 8027656:	ee30 0a42 	vsub.f32	s0, s0, s4
 802765a:	eea1 2a00 	vfma.f32	s4, s2, s0
 802765e:	ee32 2a67 	vsub.f32	s4, s4, s15
 8027662:	eee0 7a82 	vfma.f32	s15, s1, s4
 8027666:	ee77 7aa1 	vadd.f32	s15, s15, s3
 802766a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802766e:	ee17 2a90 	vmov	r2, s15
 8027672:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8027676:	f000 8134 	beq.w	80278e2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa52>
 802767a:	f001 19ff 	and.w	r9, r1, #16711935	; 0xff00ff
 802767e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027682:	2aff      	cmp	r2, #255	; 0xff
 8027684:	fb06 f909 	mul.w	r9, r6, r9
 8027688:	fb06 f601 	mul.w	r6, r6, r1
 802768c:	ea4f 2119 	mov.w	r1, r9, lsr #8
 8027690:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8027694:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8027698:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802769c:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 80276a0:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 80276a4:	4449      	add	r1, r9
 80276a6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80276aa:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80276ae:	fb08 f606 	mul.w	r6, r8, r6
 80276b2:	ea4f 2111 	mov.w	r1, r1, lsr #8
 80276b6:	fb08 f805 	mul.w	r8, r8, r5
 80276ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80276be:	ea4f 6514 	mov.w	r5, r4, lsr #24
 80276c2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80276c6:	ea41 0103 	orr.w	r1, r1, r3
 80276ca:	ea4f 2316 	mov.w	r3, r6, lsr #8
 80276ce:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80276d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80276d6:	441e      	add	r6, r3
 80276d8:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80276dc:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80276e0:	ea4f 2616 	mov.w	r6, r6, lsr #8
 80276e4:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80276e8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80276ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80276f0:	ea46 0603 	orr.w	r6, r6, r3
 80276f4:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80276f8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80276fc:	fb05 f303 	mul.w	r3, r5, r3
 8027700:	fb05 f804 	mul.w	r8, r5, r4
 8027704:	ea4f 2413 	mov.w	r4, r3, lsr #8
 8027708:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802770c:	f508 7580 	add.w	r5, r8, #256	; 0x100
 8027710:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027714:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 8027718:	4423      	add	r3, r4
 802771a:	ea4f 2515 	mov.w	r5, r5, lsr #8
 802771e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8027722:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027726:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802772a:	ea43 0305 	orr.w	r3, r3, r5
 802772e:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8027732:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027736:	fb0e f505 	mul.w	r5, lr, r5
 802773a:	fb0e fe00 	mul.w	lr, lr, r0
 802773e:	ea4f 2015 	mov.w	r0, r5, lsr #8
 8027742:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8027746:	f50e 7480 	add.w	r4, lr, #256	; 0x100
 802774a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802774e:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8027752:	4405      	add	r5, r0
 8027754:	ea4f 4011 	mov.w	r0, r1, lsr #16
 8027758:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802775c:	ee07 0a90 	vmov	s15, r0
 8027760:	ea4f 4016 	mov.w	r0, r6, lsr #16
 8027764:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8027768:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802776c:	ee02 0a10 	vmov	s4, r0
 8027770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8027774:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027778:	ea4f 4013 	mov.w	r0, r3, lsr #16
 802777c:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 8027780:	ea45 0e0e 	orr.w	lr, r5, lr
 8027784:	ee32 2a67 	vsub.f32	s4, s4, s15
 8027788:	eee1 7a02 	vfma.f32	s15, s2, s4
 802778c:	ee02 0a10 	vmov	s4, r0
 8027790:	ea4f 401e 	mov.w	r0, lr, lsr #16
 8027794:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 8027798:	ee00 0a10 	vmov	s0, r0
 802779c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80277a0:	ee30 0a42 	vsub.f32	s0, s0, s4
 80277a4:	eea1 2a00 	vfma.f32	s4, s2, s0
 80277a8:	ee32 2a67 	vsub.f32	s4, s4, s15
 80277ac:	eee0 7a82 	vfma.f32	s15, s1, s4
 80277b0:	ee77 7aa1 	vadd.f32	s15, s15, s3
 80277b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80277b8:	ee17 0a90 	vmov	r0, s15
 80277bc:	f000 04f8 	and.w	r4, r0, #248	; 0xf8
 80277c0:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80277c4:	b2c9      	uxtb	r1, r1
 80277c6:	ee07 0a90 	vmov	s15, r0
 80277ca:	f3c6 2007 	ubfx	r0, r6, #8, #8
 80277ce:	b2f6      	uxtb	r6, r6
 80277d0:	ee02 0a10 	vmov	s4, r0
 80277d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80277d8:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80277dc:	b2db      	uxtb	r3, r3
 80277de:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 80277e2:	ee32 2a67 	vsub.f32	s4, s4, s15
 80277e6:	eee1 7a02 	vfma.f32	s15, s2, s4
 80277ea:	ee02 0a10 	vmov	s4, r0
 80277ee:	f3ce 2007 	ubfx	r0, lr, #8, #8
 80277f2:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 80277f6:	ee00 0a10 	vmov	s0, r0
 80277fa:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80277fe:	ee30 0a42 	vsub.f32	s0, s0, s4
 8027802:	eea1 2a00 	vfma.f32	s4, s2, s0
 8027806:	ee32 2a67 	vsub.f32	s4, s4, s15
 802780a:	eee0 7a82 	vfma.f32	s15, s1, s4
 802780e:	ee02 6a10 	vmov	s4, r6
 8027812:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 8027816:	ee77 7aa1 	vadd.f32	s15, s15, s3
 802781a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802781e:	ee17 0a90 	vmov	r0, s15
 8027822:	ee07 1a90 	vmov	s15, r1
 8027826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802782a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802782e:	ee32 2a67 	vsub.f32	s4, s4, s15
 8027832:	eee1 7a02 	vfma.f32	s15, s2, s4
 8027836:	ee02 3a10 	vmov	s4, r3
 802783a:	fa5f f38e 	uxtb.w	r3, lr
 802783e:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 8027842:	ee00 3a10 	vmov	s0, r3
 8027846:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 802784a:	ee30 0a42 	vsub.f32	s0, s0, s4
 802784e:	eea1 2a00 	vfma.f32	s4, s2, s0
 8027852:	ee32 2a67 	vsub.f32	s4, s4, s15
 8027856:	eee0 7a82 	vfma.f32	s15, s1, s4
 802785a:	ee77 7aa1 	vadd.f32	s15, s15, s3
 802785e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8027862:	ee17 3a90 	vmov	r3, s15
 8027866:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802786a:	d103      	bne.n	8027874 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x9e4>
 802786c:	9906      	ldr	r1, [sp, #24]
 802786e:	29ff      	cmp	r1, #255	; 0xff
 8027870:	f001 8017 	beq.w	80288a2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1a12>
 8027874:	9d00      	ldr	r5, [sp, #0]
 8027876:	8839      	ldrh	r1, [r7, #0]
 8027878:	436a      	muls	r2, r5
 802787a:	120e      	asrs	r6, r1, #8
 802787c:	1c55      	adds	r5, r2, #1
 802787e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8027882:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8027886:	f8bd 5000 	ldrh.w	r5, [sp]
 802788a:	fb14 f405 	smulbb	r4, r4, r5
 802788e:	ea6f 2222 	mvn.w	r2, r2, asr #8
 8027892:	10cd      	asrs	r5, r1, #3
 8027894:	b2d2      	uxtb	r2, r2
 8027896:	00c9      	lsls	r1, r1, #3
 8027898:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802789c:	fb06 4602 	mla	r6, r6, r2, r4
 80278a0:	f8bd 4000 	ldrh.w	r4, [sp]
 80278a4:	b2c9      	uxtb	r1, r1
 80278a6:	fb13 f304 	smulbb	r3, r3, r4
 80278aa:	b2b6      	uxth	r6, r6
 80278ac:	fb10 f004 	smulbb	r0, r0, r4
 80278b0:	fb01 3102 	mla	r1, r1, r2, r3
 80278b4:	1c74      	adds	r4, r6, #1
 80278b6:	fb05 0002 	mla	r0, r5, r2, r0
 80278ba:	b289      	uxth	r1, r1
 80278bc:	b285      	uxth	r5, r0
 80278be:	1c48      	adds	r0, r1, #1
 80278c0:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 80278c4:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 80278c8:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80278cc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80278d0:	4306      	orrs	r6, r0
 80278d2:	1c68      	adds	r0, r5, #1
 80278d4:	eb00 2015 	add.w	r0, r0, r5, lsr #8
 80278d8:	0940      	lsrs	r0, r0, #5
 80278da:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80278de:	4306      	orrs	r6, r0
 80278e0:	803e      	strh	r6, [r7, #0]
 80278e2:	9b04      	ldr	r3, [sp, #16]
 80278e4:	3702      	adds	r7, #2
 80278e6:	449c      	add	ip, r3
 80278e8:	9b05      	ldr	r3, [sp, #20]
 80278ea:	449a      	add	sl, r3
 80278ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80278ee:	3301      	adds	r3, #1
 80278f0:	930c      	str	r3, [sp, #48]	; 0x30
 80278f2:	e650      	b.n	8027596 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x706>
 80278f4:	465d      	mov	r5, fp
 80278f6:	2600      	movs	r6, #0
 80278f8:	9b01      	ldr	r3, [sp, #4]
 80278fa:	42b3      	cmp	r3, r6
 80278fc:	f340 84bc 	ble.w	8028278 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e8>
 8027900:	9b03      	ldr	r3, [sp, #12]
 8027902:	ea4f 422c 	mov.w	r2, ip, asr #16
 8027906:	ea4f 412a 	mov.w	r1, sl, asr #16
 802790a:	b15b      	cbz	r3, 8027924 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa94>
 802790c:	2a00      	cmp	r2, #0
 802790e:	db56      	blt.n	80279be <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xb2e>
 8027910:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8027914:	429a      	cmp	r2, r3
 8027916:	da52      	bge.n	80279be <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xb2e>
 8027918:	2900      	cmp	r1, #0
 802791a:	db50      	blt.n	80279be <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xb2e>
 802791c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8027920:	4299      	cmp	r1, r3
 8027922:	da4c      	bge.n	80279be <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xb2e>
 8027924:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8027928:	fb01 2303 	mla	r3, r1, r3, r2
 802792c:	9a02      	ldr	r2, [sp, #8]
 802792e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8027932:	0e11      	lsrs	r1, r2, #24
 8027934:	d043      	beq.n	80279be <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xb2e>
 8027936:	29ff      	cmp	r1, #255	; 0xff
 8027938:	d103      	bne.n	8027942 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xab2>
 802793a:	9b06      	ldr	r3, [sp, #24]
 802793c:	2bff      	cmp	r3, #255	; 0xff
 802793e:	f001 80c8 	beq.w	8028ad2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c42>
 8027942:	9b06      	ldr	r3, [sp, #24]
 8027944:	f3c2 2e07 	ubfx	lr, r2, #8, #8
 8027948:	882c      	ldrh	r4, [r5, #0]
 802794a:	4359      	muls	r1, r3
 802794c:	1220      	asrs	r0, r4, #8
 802794e:	1c4b      	adds	r3, r1, #1
 8027950:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027954:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8027958:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802795c:	b2d2      	uxtb	r2, r2
 802795e:	121b      	asrs	r3, r3, #8
 8027960:	b29f      	uxth	r7, r3
 8027962:	43db      	mvns	r3, r3
 8027964:	fb11 f107 	smulbb	r1, r1, r7
 8027968:	b2db      	uxtb	r3, r3
 802796a:	fb12 f207 	smulbb	r2, r2, r7
 802796e:	fb00 1003 	mla	r0, r0, r3, r1
 8027972:	10e1      	asrs	r1, r4, #3
 8027974:	fb1e fe07 	smulbb	lr, lr, r7
 8027978:	00e4      	lsls	r4, r4, #3
 802797a:	b280      	uxth	r0, r0
 802797c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027980:	b2e4      	uxtb	r4, r4
 8027982:	fb01 e103 	mla	r1, r1, r3, lr
 8027986:	fb04 2203 	mla	r2, r4, r3, r2
 802798a:	1c43      	adds	r3, r0, #1
 802798c:	b289      	uxth	r1, r1
 802798e:	b292      	uxth	r2, r2
 8027990:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027994:	f102 0e01 	add.w	lr, r2, #1
 8027998:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802799c:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 80279a0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80279a4:	ea40 000e 	orr.w	r0, r0, lr
 80279a8:	f101 0e01 	add.w	lr, r1, #1
 80279ac:	eb0e 2e11 	add.w	lr, lr, r1, lsr #8
 80279b0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80279b4:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80279b8:	ea40 000e 	orr.w	r0, r0, lr
 80279bc:	8028      	strh	r0, [r5, #0]
 80279be:	9b04      	ldr	r3, [sp, #16]
 80279c0:	3502      	adds	r5, #2
 80279c2:	3601      	adds	r6, #1
 80279c4:	449c      	add	ip, r3
 80279c6:	9b05      	ldr	r3, [sp, #20]
 80279c8:	449a      	add	sl, r3
 80279ca:	e795      	b.n	80278f8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa68>
 80279cc:	465f      	mov	r7, fp
 80279ce:	f04f 0800 	mov.w	r8, #0
 80279d2:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 80279d6:	9b01      	ldr	r3, [sp, #4]
 80279d8:	4543      	cmp	r3, r8
 80279da:	f340 844d 	ble.w	8028278 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e8>
 80279de:	9903      	ldr	r1, [sp, #12]
 80279e0:	ea4f 422c 	mov.w	r2, ip, asr #16
 80279e4:	ea4f 432a 	mov.w	r3, sl, asr #16
 80279e8:	b179      	cbz	r1, 8027a0a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xb7a>
 80279ea:	2a00      	cmp	r2, #0
 80279ec:	f2c0 8092 	blt.w	8027b14 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc84>
 80279f0:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 80279f4:	428a      	cmp	r2, r1
 80279f6:	f280 808d 	bge.w	8027b14 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc84>
 80279fa:	2b00      	cmp	r3, #0
 80279fc:	f2c0 808a 	blt.w	8027b14 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc84>
 8027a00:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
 8027a04:	428b      	cmp	r3, r1
 8027a06:	f280 8085 	bge.w	8027b14 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc84>
 8027a0a:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 8027a0e:	f3ca 2407 	ubfx	r4, sl, #8, #8
 8027a12:	9802      	ldr	r0, [sp, #8]
 8027a14:	fb03 2301 	mla	r3, r3, r1, r2
 8027a18:	9a02      	ldr	r2, [sp, #8]
 8027a1a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8027a1e:	f850 e023 	ldr.w	lr, [r0, r3, lsl #2]
 8027a22:	6853      	ldr	r3, [r2, #4]
 8027a24:	930c      	str	r3, [sp, #48]	; 0x30
 8027a26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027a2a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8027a2e:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8027a32:	6855      	ldr	r5, [r2, #4]
 8027a34:	fb04 f001 	mul.w	r0, r4, r1
 8027a38:	930e      	str	r3, [sp, #56]	; 0x38
 8027a3a:	0a00      	lsrs	r0, r0, #8
 8027a3c:	1a22      	subs	r2, r4, r0
 8027a3e:	1a0e      	subs	r6, r1, r0
 8027a40:	920f      	str	r2, [sp, #60]	; 0x3c
 8027a42:	190a      	adds	r2, r1, r4
 8027a44:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027a46:	f00e 11ff 	and.w	r1, lr, #16711935	; 0xff00ff
 8027a4a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8027a4e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027a52:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027a56:	4402      	add	r2, r0
 8027a58:	4374      	muls	r4, r6
 8027a5a:	fb02 4401 	mla	r4, r2, r1, r4
 8027a5e:	f005 11ff 	and.w	r1, r5, #16711935	; 0xff00ff
 8027a62:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027a66:	fb00 4301 	mla	r3, r0, r1, r4
 8027a6a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027a6c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027a70:	460c      	mov	r4, r1
 8027a72:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027a74:	fb01 3104 	mla	r1, r1, r4, r3
 8027a78:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027a7c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027a80:	0a09      	lsrs	r1, r1, #8
 8027a82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027a86:	4374      	muls	r4, r6
 8027a88:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027a8c:	fb02 4e0e 	mla	lr, r2, lr, r4
 8027a90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027a92:	fb00 ee05 	mla	lr, r0, r5, lr
 8027a96:	fb02 ee03 	mla	lr, r2, r3, lr
 8027a9a:	9b06      	ldr	r3, [sp, #24]
 8027a9c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027aa0:	2bff      	cmp	r3, #255	; 0xff
 8027aa2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027aa6:	ea41 010e 	orr.w	r1, r1, lr
 8027aaa:	f001 8034 	beq.w	8028b16 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c86>
 8027aae:	883b      	ldrh	r3, [r7, #0]
 8027ab0:	0c0a      	lsrs	r2, r1, #16
 8027ab2:	f8bd 4000 	ldrh.w	r4, [sp]
 8027ab6:	1218      	asrs	r0, r3, #8
 8027ab8:	f8bd 5000 	ldrh.w	r5, [sp]
 8027abc:	fb12 f204 	smulbb	r2, r2, r4
 8027ac0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8027ac4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027ac8:	b2c9      	uxtb	r1, r1
 8027aca:	fb14 f405 	smulbb	r4, r4, r5
 8027ace:	fb00 2009 	mla	r0, r0, r9, r2
 8027ad2:	10da      	asrs	r2, r3, #3
 8027ad4:	fb11 f105 	smulbb	r1, r1, r5
 8027ad8:	00db      	lsls	r3, r3, #3
 8027ada:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027ade:	b280      	uxth	r0, r0
 8027ae0:	b2db      	uxtb	r3, r3
 8027ae2:	fb02 4209 	mla	r2, r2, r9, r4
 8027ae6:	fb03 1109 	mla	r1, r3, r9, r1
 8027aea:	1c43      	adds	r3, r0, #1
 8027aec:	b292      	uxth	r2, r2
 8027aee:	b289      	uxth	r1, r1
 8027af0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027af4:	1c54      	adds	r4, r2, #1
 8027af6:	1c4b      	adds	r3, r1, #1
 8027af8:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8027afc:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8027b00:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027b04:	0964      	lsrs	r4, r4, #5
 8027b06:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8027b0a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8027b0e:	4308      	orrs	r0, r1
 8027b10:	4320      	orrs	r0, r4
 8027b12:	8038      	strh	r0, [r7, #0]
 8027b14:	9b04      	ldr	r3, [sp, #16]
 8027b16:	3702      	adds	r7, #2
 8027b18:	f108 0801 	add.w	r8, r8, #1
 8027b1c:	449c      	add	ip, r3
 8027b1e:	9b05      	ldr	r3, [sp, #20]
 8027b20:	449a      	add	sl, r3
 8027b22:	e758      	b.n	80279d6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xb46>
 8027b24:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8027b28:	2300      	movs	r3, #0
 8027b2a:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8027b2e:	930e      	str	r3, [sp, #56]	; 0x38
 8027b30:	9b01      	ldr	r3, [sp, #4]
 8027b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027b34:	4293      	cmp	r3, r2
 8027b36:	f340 839f 	ble.w	8028278 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e8>
 8027b3a:	9903      	ldr	r1, [sp, #12]
 8027b3c:	ea4f 432c 	mov.w	r3, ip, asr #16
 8027b40:	ea4f 422a 	mov.w	r2, sl, asr #16
 8027b44:	b179      	cbz	r1, 8027b66 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcd6>
 8027b46:	2b00      	cmp	r3, #0
 8027b48:	f2c0 8191 	blt.w	8027e6e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfde>
 8027b4c:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 8027b50:	428b      	cmp	r3, r1
 8027b52:	f280 818c 	bge.w	8027e6e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfde>
 8027b56:	2a00      	cmp	r2, #0
 8027b58:	f2c0 8189 	blt.w	8027e6e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfde>
 8027b5c:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
 8027b60:	428a      	cmp	r2, r1
 8027b62:	f280 8184 	bge.w	8027e6e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfde>
 8027b66:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 8027b6a:	fb02 3301 	mla	r3, r2, r1, r3
 8027b6e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8027b70:	6850      	ldr	r0, [r2, #4]
 8027b72:	18c2      	adds	r2, r0, r3
 8027b74:	5cc0      	ldrb	r0, [r0, r3]
 8027b76:	f892 e001 	ldrb.w	lr, [r2, #1]
 8027b7a:	ee07 0a90 	vmov	s15, r0
 8027b7e:	5c57      	ldrb	r7, [r2, r1]
 8027b80:	440a      	add	r2, r1
 8027b82:	ee00 ea90 	vmov	s1, lr
 8027b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8027b8a:	7856      	ldrb	r6, [r2, #1]
 8027b8c:	fa1f f28c 	uxth.w	r2, ip
 8027b90:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8027b94:	ee02 2a10 	vmov	s4, r2
 8027b98:	ee00 6a10 	vmov	s0, r6
 8027b9c:	fa1f f28a 	uxth.w	r2, sl
 8027ba0:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8027ba4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8027ba8:	ee01 2a10 	vmov	s2, r2
 8027bac:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8027bb0:	ee22 2a23 	vmul.f32	s4, s4, s7
 8027bb4:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8027bb8:	eee2 7a20 	vfma.f32	s15, s4, s1
 8027bbc:	ee00 7a90 	vmov	s1, r7
 8027bc0:	ee21 1a23 	vmul.f32	s2, s2, s7
 8027bc4:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8027bc8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8027bcc:	eee2 0a00 	vfma.f32	s1, s4, s0
 8027bd0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8027bd4:	eee1 7a20 	vfma.f32	s15, s2, s1
 8027bd8:	ee77 7aa1 	vadd.f32	s15, s15, s3
 8027bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8027be0:	ee17 2a90 	vmov	r2, s15
 8027be4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8027be8:	9211      	str	r2, [sp, #68]	; 0x44
 8027bea:	f000 8140 	beq.w	8027e6e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfde>
 8027bee:	9c02      	ldr	r4, [sp, #8]
 8027bf0:	fa1f fe8e 	uxth.w	lr, lr
 8027bf4:	9a02      	ldr	r2, [sp, #8]
 8027bf6:	b2bf      	uxth	r7, r7
 8027bf8:	f834 5013 	ldrh.w	r5, [r4, r3, lsl #1]
 8027bfc:	b2b6      	uxth	r6, r6
 8027bfe:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8027c02:	b283      	uxth	r3, r0
 8027c04:	8854      	ldrh	r4, [r2, #2]
 8027c06:	930f      	str	r3, [sp, #60]	; 0x3c
 8027c08:	122b      	asrs	r3, r5, #8
 8027c0a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027c0c:	ea4f 2924 	mov.w	r9, r4, asr #8
 8027c10:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8027c14:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8027c18:	4343      	muls	r3, r0
 8027c1a:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 8027c1e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8027c22:	fb09 f90e 	mul.w	r9, r9, lr
 8027c26:	1c59      	adds	r1, r3, #1
 8027c28:	ea4f 2820 	mov.w	r8, r0, asr #8
 8027c2c:	8852      	ldrh	r2, [r2, #2]
 8027c2e:	eb01 2323 	add.w	r3, r1, r3, asr #8
 8027c32:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8027c36:	9210      	str	r2, [sp, #64]	; 0x40
 8027c38:	1212      	asrs	r2, r2, #8
 8027c3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027c3e:	fb08 f807 	mul.w	r8, r8, r7
 8027c42:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8027c46:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027c48:	ee07 3a90 	vmov	s15, r3
 8027c4c:	f109 0301 	add.w	r3, r9, #1
 8027c50:	4372      	muls	r2, r6
 8027c52:	eb03 2929 	add.w	r9, r3, r9, asr #8
 8027c56:	f108 0301 	add.w	r3, r8, #1
 8027c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8027c5e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8027c62:	eb03 2828 	add.w	r8, r3, r8, asr #8
 8027c66:	1c53      	adds	r3, r2, #1
 8027c68:	ee00 9a90 	vmov	s1, r9
 8027c6c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8027c70:	eb03 2222 	add.w	r2, r3, r2, asr #8
 8027c74:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8027c78:	ea4f 09e0 	mov.w	r9, r0, asr #3
 8027c7c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027c80:	00c0      	lsls	r0, r0, #3
 8027c82:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8027c86:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8027c8a:	ee00 2a10 	vmov	s0, r2
 8027c8e:	fb09 f907 	mul.w	r9, r9, r7
 8027c92:	b2c0      	uxtb	r0, r0
 8027c94:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8027c98:	eee2 7a20 	vfma.f32	s15, s4, s1
 8027c9c:	ee00 8a90 	vmov	s1, r8
 8027ca0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027ca4:	4378      	muls	r0, r7
 8027ca6:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8027caa:	00e4      	lsls	r4, r4, #3
 8027cac:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8027cb0:	1c47      	adds	r7, r0, #1
 8027cb2:	b2e4      	uxtb	r4, r4
 8027cb4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8027cb8:	eb07 2020 	add.w	r0, r7, r0, asr #8
 8027cbc:	fb04 f40e 	mul.w	r4, r4, lr
 8027cc0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027cc4:	eee2 0a00 	vfma.f32	s1, s4, s0
 8027cc8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8027ccc:	eee1 7a20 	vfma.f32	s15, s2, s1
 8027cd0:	ee77 7aa1 	vadd.f32	s15, s15, s3
 8027cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8027cd8:	ee17 3a90 	vmov	r3, s15
 8027cdc:	f003 02f8 	and.w	r2, r3, #248	; 0xf8
 8027ce0:	10eb      	asrs	r3, r5, #3
 8027ce2:	00ed      	lsls	r5, r5, #3
 8027ce4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8027ce8:	b2ed      	uxtb	r5, r5
 8027cea:	434b      	muls	r3, r1
 8027cec:	fb08 f10e 	mul.w	r1, r8, lr
 8027cf0:	f104 0e01 	add.w	lr, r4, #1
 8027cf4:	9112      	str	r1, [sp, #72]	; 0x48
 8027cf6:	eb0e 2424 	add.w	r4, lr, r4, asr #8
 8027cfa:	9910      	ldr	r1, [sp, #64]	; 0x40
 8027cfc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8027d00:	ea4f 08e1 	mov.w	r8, r1, asr #3
 8027d04:	1c59      	adds	r1, r3, #1
 8027d06:	eb01 2323 	add.w	r3, r1, r3, asr #8
 8027d0a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027d0c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8027d10:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027d14:	fb08 f806 	mul.w	r8, r8, r6
 8027d18:	ee07 3a90 	vmov	s15, r3
 8027d1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027d1e:	3301      	adds	r3, #1
 8027d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8027d24:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8027d28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027d2a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027d2e:	434d      	muls	r5, r1
 8027d30:	9910      	ldr	r1, [sp, #64]	; 0x40
 8027d32:	ee00 3a90 	vmov	s1, r3
 8027d36:	f109 0301 	add.w	r3, r9, #1
 8027d3a:	00c9      	lsls	r1, r1, #3
 8027d3c:	eb03 2929 	add.w	r9, r3, r9, asr #8
 8027d40:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8027d44:	f108 0301 	add.w	r3, r8, #1
 8027d48:	b2c9      	uxtb	r1, r1
 8027d4a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8027d4e:	eb03 2828 	add.w	r8, r3, r8, asr #8
 8027d52:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8027d56:	434e      	muls	r6, r1
 8027d58:	1c69      	adds	r1, r5, #1
 8027d5a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8027d5e:	eee2 7a20 	vfma.f32	s15, s4, s1
 8027d62:	ee00 9a90 	vmov	s1, r9
 8027d66:	ee00 8a10 	vmov	s0, r8
 8027d6a:	eb01 2525 	add.w	r5, r1, r5, asr #8
 8027d6e:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8027d72:	1c71      	adds	r1, r6, #1
 8027d74:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8027d78:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8027d7c:	eb01 2626 	add.w	r6, r1, r6, asr #8
 8027d80:	ee30 0a60 	vsub.f32	s0, s0, s1
 8027d84:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8027d88:	eee2 0a00 	vfma.f32	s1, s4, s0
 8027d8c:	ee00 6a10 	vmov	s0, r6
 8027d90:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8027d94:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8027d98:	eee1 7a20 	vfma.f32	s15, s2, s1
 8027d9c:	ee00 4a90 	vmov	s1, r4
 8027da0:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8027da4:	ee77 7aa1 	vadd.f32	s15, s15, s3
 8027da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8027dac:	ee17 3a90 	vmov	r3, s15
 8027db0:	ee07 5a90 	vmov	s15, r5
 8027db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8027db8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8027dbc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8027dc0:	eee2 7a20 	vfma.f32	s15, s4, s1
 8027dc4:	ee00 0a90 	vmov	s1, r0
 8027dc8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027dca:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8027dce:	28ff      	cmp	r0, #255	; 0xff
 8027dd0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8027dd4:	eee2 0a00 	vfma.f32	s1, s4, s0
 8027dd8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8027ddc:	eee1 7a20 	vfma.f32	s15, s2, s1
 8027de0:	ee77 7aa1 	vadd.f32	s15, s15, s3
 8027de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8027de8:	ee17 1a90 	vmov	r1, s15
 8027dec:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027df0:	d103      	bne.n	8027dfa <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf6a>
 8027df2:	9806      	ldr	r0, [sp, #24]
 8027df4:	28ff      	cmp	r0, #255	; 0xff
 8027df6:	f000 85dc 	beq.w	80289b2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1b22>
 8027dfa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027dfc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027dfe:	8804      	ldrh	r4, [r0, #0]
 8027e00:	9800      	ldr	r0, [sp, #0]
 8027e02:	1226      	asrs	r6, r4, #8
 8027e04:	4345      	muls	r5, r0
 8027e06:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8027e0a:	1c68      	adds	r0, r5, #1
 8027e0c:	eb00 2025 	add.w	r0, r0, r5, asr #8
 8027e10:	f8bd 5000 	ldrh.w	r5, [sp]
 8027e14:	fb12 f205 	smulbb	r2, r2, r5
 8027e18:	ea6f 2020 	mvn.w	r0, r0, asr #8
 8027e1c:	10e5      	asrs	r5, r4, #3
 8027e1e:	b2c0      	uxtb	r0, r0
 8027e20:	00e4      	lsls	r4, r4, #3
 8027e22:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027e26:	fb06 2600 	mla	r6, r6, r0, r2
 8027e2a:	f8bd 2000 	ldrh.w	r2, [sp]
 8027e2e:	b2e4      	uxtb	r4, r4
 8027e30:	fb11 f102 	smulbb	r1, r1, r2
 8027e34:	b2b6      	uxth	r6, r6
 8027e36:	fb13 f302 	smulbb	r3, r3, r2
 8027e3a:	fb04 1400 	mla	r4, r4, r0, r1
 8027e3e:	1c72      	adds	r2, r6, #1
 8027e40:	fb05 3300 	mla	r3, r5, r0, r3
 8027e44:	b2a4      	uxth	r4, r4
 8027e46:	b29d      	uxth	r5, r3
 8027e48:	1c63      	adds	r3, r4, #1
 8027e4a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8027e4e:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8027e52:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8027e56:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027e5a:	431e      	orrs	r6, r3
 8027e5c:	1c6b      	adds	r3, r5, #1
 8027e5e:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8027e62:	095b      	lsrs	r3, r3, #5
 8027e64:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027e68:	431e      	orrs	r6, r3
 8027e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027e6c:	801e      	strh	r6, [r3, #0]
 8027e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027e70:	3302      	adds	r3, #2
 8027e72:	930c      	str	r3, [sp, #48]	; 0x30
 8027e74:	9b04      	ldr	r3, [sp, #16]
 8027e76:	449c      	add	ip, r3
 8027e78:	9b05      	ldr	r3, [sp, #20]
 8027e7a:	449a      	add	sl, r3
 8027e7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027e7e:	3301      	adds	r3, #1
 8027e80:	930e      	str	r3, [sp, #56]	; 0x38
 8027e82:	e655      	b.n	8027b30 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca0>
 8027e84:	2500      	movs	r5, #0
 8027e86:	9b01      	ldr	r3, [sp, #4]
 8027e88:	42ab      	cmp	r3, r5
 8027e8a:	f340 81f5 	ble.w	8028278 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e8>
 8027e8e:	9903      	ldr	r1, [sp, #12]
 8027e90:	ea4f 432c 	mov.w	r3, ip, asr #16
 8027e94:	ea4f 422a 	mov.w	r2, sl, asr #16
 8027e98:	b159      	cbz	r1, 8027eb2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1022>
 8027e9a:	2b00      	cmp	r3, #0
 8027e9c:	db55      	blt.n	8027f4a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10ba>
 8027e9e:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 8027ea2:	428b      	cmp	r3, r1
 8027ea4:	da51      	bge.n	8027f4a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10ba>
 8027ea6:	2a00      	cmp	r2, #0
 8027ea8:	db4f      	blt.n	8027f4a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10ba>
 8027eaa:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
 8027eae:	428a      	cmp	r2, r1
 8027eb0:	da4b      	bge.n	8027f4a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10ba>
 8027eb2:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 8027eb6:	fb02 3101 	mla	r1, r2, r1, r3
 8027eba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027ebc:	685b      	ldr	r3, [r3, #4]
 8027ebe:	5c5a      	ldrb	r2, [r3, r1]
 8027ec0:	2a00      	cmp	r2, #0
 8027ec2:	d042      	beq.n	8027f4a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10ba>
 8027ec4:	9b02      	ldr	r3, [sp, #8]
 8027ec6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8027eca:	9906      	ldr	r1, [sp, #24]
 8027ecc:	434a      	muls	r2, r1
 8027ece:	1c51      	adds	r1, r2, #1
 8027ed0:	eb01 2222 	add.w	r2, r1, r2, asr #8
 8027ed4:	1212      	asrs	r2, r2, #8
 8027ed6:	2aff      	cmp	r2, #255	; 0xff
 8027ed8:	d035      	beq.n	8027f46 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10b6>
 8027eda:	f83b 4015 	ldrh.w	r4, [fp, r5, lsl #1]
 8027ede:	1219      	asrs	r1, r3, #8
 8027ee0:	b297      	uxth	r7, r2
 8027ee2:	43d2      	mvns	r2, r2
 8027ee4:	1220      	asrs	r0, r4, #8
 8027ee6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027eea:	b2d2      	uxtb	r2, r2
 8027eec:	fb11 f107 	smulbb	r1, r1, r7
 8027ef0:	10de      	asrs	r6, r3, #3
 8027ef2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027ef6:	00db      	lsls	r3, r3, #3
 8027ef8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8027efc:	fb00 1002 	mla	r0, r0, r2, r1
 8027f00:	b2db      	uxtb	r3, r3
 8027f02:	fb16 f607 	smulbb	r6, r6, r7
 8027f06:	10e1      	asrs	r1, r4, #3
 8027f08:	fb13 f307 	smulbb	r3, r3, r7
 8027f0c:	00e4      	lsls	r4, r4, #3
 8027f0e:	b280      	uxth	r0, r0
 8027f10:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027f14:	b2e4      	uxtb	r4, r4
 8027f16:	fb01 6102 	mla	r1, r1, r2, r6
 8027f1a:	fb04 3302 	mla	r3, r4, r2, r3
 8027f1e:	1c42      	adds	r2, r0, #1
 8027f20:	b289      	uxth	r1, r1
 8027f22:	b29b      	uxth	r3, r3
 8027f24:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027f28:	1c4e      	adds	r6, r1, #1
 8027f2a:	1c5c      	adds	r4, r3, #1
 8027f2c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8027f30:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8027f34:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027f38:	4318      	orrs	r0, r3
 8027f3a:	eb06 2311 	add.w	r3, r6, r1, lsr #8
 8027f3e:	095b      	lsrs	r3, r3, #5
 8027f40:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027f44:	4303      	orrs	r3, r0
 8027f46:	f82b 3015 	strh.w	r3, [fp, r5, lsl #1]
 8027f4a:	9b04      	ldr	r3, [sp, #16]
 8027f4c:	3501      	adds	r5, #1
 8027f4e:	449c      	add	ip, r3
 8027f50:	9b05      	ldr	r3, [sp, #20]
 8027f52:	449a      	add	sl, r3
 8027f54:	e797      	b.n	8027e86 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xff6>
 8027f56:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8027f5a:	2000      	movs	r0, #0
 8027f5c:	930c      	str	r3, [sp, #48]	; 0x30
 8027f5e:	9b01      	ldr	r3, [sp, #4]
 8027f60:	4283      	cmp	r3, r0
 8027f62:	f340 8189 	ble.w	8028278 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e8>
 8027f66:	9b03      	ldr	r3, [sp, #12]
 8027f68:	ea4f 422c 	mov.w	r2, ip, asr #16
 8027f6c:	ea4f 412a 	mov.w	r1, sl, asr #16
 8027f70:	b17b      	cbz	r3, 8027f92 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1102>
 8027f72:	2a00      	cmp	r2, #0
 8027f74:	f2c0 809e 	blt.w	80280b4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1224>
 8027f78:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8027f7c:	429a      	cmp	r2, r3
 8027f7e:	f280 8099 	bge.w	80280b4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1224>
 8027f82:	2900      	cmp	r1, #0
 8027f84:	f2c0 8096 	blt.w	80280b4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1224>
 8027f88:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8027f8c:	4299      	cmp	r1, r3
 8027f8e:	f280 8091 	bge.w	80280b4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1224>
 8027f92:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8027f96:	f3ca 3403 	ubfx	r4, sl, #12, #4
 8027f9a:	9d02      	ldr	r5, [sp, #8]
 8027f9c:	fb01 2103 	mla	r1, r1, r3, r2
 8027fa0:	9a02      	ldr	r2, [sp, #8]
 8027fa2:	eb02 0641 	add.w	r6, r2, r1, lsl #1
 8027fa6:	f835 5011 	ldrh.w	r5, [r5, r1, lsl #1]
 8027faa:	f3cc 3203 	ubfx	r2, ip, #12, #4
 8027fae:	f836 7013 	ldrh.w	r7, [r6, r3, lsl #1]
 8027fb2:	8871      	ldrh	r1, [r6, #2]
 8027fb4:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8027fb8:	fb04 f302 	mul.w	r3, r4, r2
 8027fbc:	f8b6 e002 	ldrh.w	lr, [r6, #2]
 8027fc0:	042e      	lsls	r6, r5, #16
 8027fc2:	ea4f 4801 	mov.w	r8, r1, lsl #16
 8027fc6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8027fca:	f006 66fc 	and.w	r6, r6, #132120576	; 0x7e00000
 8027fce:	10db      	asrs	r3, r3, #3
 8027fd0:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 8027fd4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027fd8:	4335      	orrs	r5, r6
 8027fda:	f1c4 0610 	rsb	r6, r4, #16
 8027fde:	ea48 0101 	orr.w	r1, r8, r1
 8027fe2:	ea4f 490e 	mov.w	r9, lr, lsl #16
 8027fe6:	1ab6      	subs	r6, r6, r2
 8027fe8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027fec:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 8027ff0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027ff4:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 8027ff8:	4351      	muls	r1, r2
 8027ffa:	ea49 0e0e 	orr.w	lr, r9, lr
 8027ffe:	9a06      	ldr	r2, [sp, #24]
 8028000:	fb06 1105 	mla	r1, r6, r5, r1
 8028004:	2aff      	cmp	r2, #255	; 0xff
 8028006:	fb03 110e 	mla	r1, r3, lr, r1
 802800a:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 802800e:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8028012:	ebc3 0344 	rsb	r3, r3, r4, lsl #1
 8028016:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802801a:	ea4e 0707 	orr.w	r7, lr, r7
 802801e:	fb03 1107 	mla	r1, r3, r7, r1
 8028022:	ea4f 5851 	mov.w	r8, r1, lsr #21
 8028026:	ea4f 1351 	mov.w	r3, r1, lsr #5
 802802a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802802e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028032:	ea48 0303 	orr.w	r3, r8, r3
 8028036:	b29b      	uxth	r3, r3
 8028038:	d03a      	beq.n	80280b0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1220>
 802803a:	f83b 2010 	ldrh.w	r2, [fp, r0, lsl #1]
 802803e:	121c      	asrs	r4, r3, #8
 8028040:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8028044:	1211      	asrs	r1, r2, #8
 8028046:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802804a:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 802804e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028052:	fb11 f105 	smulbb	r1, r1, r5
 8028056:	9d00      	ldr	r5, [sp, #0]
 8028058:	fb04 1405 	mla	r4, r4, r5, r1
 802805c:	10d5      	asrs	r5, r2, #3
 802805e:	10d9      	asrs	r1, r3, #3
 8028060:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8028064:	00d2      	lsls	r2, r2, #3
 8028066:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802806a:	00db      	lsls	r3, r3, #3
 802806c:	fb15 f506 	smulbb	r5, r5, r6
 8028070:	9e00      	ldr	r6, [sp, #0]
 8028072:	b2d2      	uxtb	r2, r2
 8028074:	fb01 5106 	mla	r1, r1, r6, r5
 8028078:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 802807c:	b2db      	uxtb	r3, r3
 802807e:	fb12 f205 	smulbb	r2, r2, r5
 8028082:	b2a4      	uxth	r4, r4
 8028084:	b289      	uxth	r1, r1
 8028086:	fb03 2306 	mla	r3, r3, r6, r2
 802808a:	1c62      	adds	r2, r4, #1
 802808c:	b29b      	uxth	r3, r3
 802808e:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8028092:	1c4a      	adds	r2, r1, #1
 8028094:	1c5d      	adds	r5, r3, #1
 8028096:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802809a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 802809e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80280a2:	431c      	orrs	r4, r3
 80280a4:	eb02 2311 	add.w	r3, r2, r1, lsr #8
 80280a8:	095b      	lsrs	r3, r3, #5
 80280aa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80280ae:	4323      	orrs	r3, r4
 80280b0:	f82b 3010 	strh.w	r3, [fp, r0, lsl #1]
 80280b4:	9b04      	ldr	r3, [sp, #16]
 80280b6:	3001      	adds	r0, #1
 80280b8:	449c      	add	ip, r3
 80280ba:	9b05      	ldr	r3, [sp, #20]
 80280bc:	449a      	add	sl, r3
 80280be:	e74e      	b.n	8027f5e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10ce>
 80280c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80280c2:	685b      	ldr	r3, [r3, #4]
 80280c4:	781b      	ldrb	r3, [r3, #0]
 80280c6:	2b01      	cmp	r3, #1
 80280c8:	f000 80c7 	beq.w	802825a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13ca>
 80280cc:	f0c0 80da 	bcc.w	8028284 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13f4>
 80280d0:	2b02      	cmp	r3, #2
 80280d2:	f47f a81c 	bne.w	802710e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x27e>
 80280d6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80280da:	2000      	movs	r0, #0
 80280dc:	930c      	str	r3, [sp, #48]	; 0x30
 80280de:	9b01      	ldr	r3, [sp, #4]
 80280e0:	4283      	cmp	r3, r0
 80280e2:	f340 80c9 	ble.w	8028278 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e8>
 80280e6:	9a03      	ldr	r2, [sp, #12]
 80280e8:	ea4f 432c 	mov.w	r3, ip, asr #16
 80280ec:	ea4f 412a 	mov.w	r1, sl, asr #16
 80280f0:	b17a      	cbz	r2, 8028112 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1282>
 80280f2:	2b00      	cmp	r3, #0
 80280f4:	f2c0 80ab 	blt.w	802824e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13be>
 80280f8:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80280fc:	4293      	cmp	r3, r2
 80280fe:	f280 80a6 	bge.w	802824e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13be>
 8028102:	2900      	cmp	r1, #0
 8028104:	f2c0 80a3 	blt.w	802824e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13be>
 8028108:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 802810c:	4291      	cmp	r1, r2
 802810e:	f280 809e 	bge.w	802824e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13be>
 8028112:	f9bd 705c 	ldrsh.w	r7, [sp, #92]	; 0x5c
 8028116:	f3cc 3203 	ubfx	r2, ip, #12, #4
 802811a:	9e02      	ldr	r6, [sp, #8]
 802811c:	f3ca 3403 	ubfx	r4, sl, #12, #4
 8028120:	fb01 3107 	mla	r1, r1, r7, r3
 8028124:	9b02      	ldr	r3, [sp, #8]
 8028126:	eb03 0e01 	add.w	lr, r3, r1
 802812a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802812c:	5c71      	ldrb	r1, [r6, r1]
 802812e:	685d      	ldr	r5, [r3, #4]
 8028130:	eb0e 0307 	add.w	r3, lr, r7
 8028134:	3102      	adds	r1, #2
 8028136:	f81e 7007 	ldrb.w	r7, [lr, r7]
 802813a:	785b      	ldrb	r3, [r3, #1]
 802813c:	f835 6011 	ldrh.w	r6, [r5, r1, lsl #1]
 8028140:	3702      	adds	r7, #2
 8028142:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8028146:	3302      	adds	r3, #2
 8028148:	f835 7017 	ldrh.w	r7, [r5, r7, lsl #1]
 802814c:	3102      	adds	r1, #2
 802814e:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
 8028152:	fb04 f302 	mul.w	r3, r4, r2
 8028156:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
 802815a:	0435      	lsls	r5, r6, #16
 802815c:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8028160:	10db      	asrs	r3, r3, #3
 8028162:	ea4f 4801 	mov.w	r8, r1, lsl #16
 8028166:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 802816a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802816e:	ea4f 490e 	mov.w	r9, lr, lsl #16
 8028172:	4335      	orrs	r5, r6
 8028174:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 8028178:	f1c4 0610 	rsb	r6, r4, #16
 802817c:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 8028180:	ea48 0101 	orr.w	r1, r8, r1
 8028184:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028188:	1ab6      	subs	r6, r6, r2
 802818a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802818e:	ea49 0e0e 	orr.w	lr, r9, lr
 8028192:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 8028196:	4351      	muls	r1, r2
 8028198:	9a06      	ldr	r2, [sp, #24]
 802819a:	fb06 1105 	mla	r1, r6, r5, r1
 802819e:	2aff      	cmp	r2, #255	; 0xff
 80281a0:	fb03 110e 	mla	r1, r3, lr, r1
 80281a4:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 80281a8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80281ac:	ebc3 0344 	rsb	r3, r3, r4, lsl #1
 80281b0:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80281b4:	ea4e 0707 	orr.w	r7, lr, r7
 80281b8:	fb03 1107 	mla	r1, r3, r7, r1
 80281bc:	ea4f 5851 	mov.w	r8, r1, lsr #21
 80281c0:	ea4f 1351 	mov.w	r3, r1, lsr #5
 80281c4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80281c8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80281cc:	ea48 0303 	orr.w	r3, r8, r3
 80281d0:	b29b      	uxth	r3, r3
 80281d2:	d03a      	beq.n	802824a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13ba>
 80281d4:	f83b 2010 	ldrh.w	r2, [fp, r0, lsl #1]
 80281d8:	121c      	asrs	r4, r3, #8
 80281da:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80281de:	1211      	asrs	r1, r2, #8
 80281e0:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80281e4:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 80281e8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80281ec:	fb11 f105 	smulbb	r1, r1, r5
 80281f0:	9d00      	ldr	r5, [sp, #0]
 80281f2:	fb04 1405 	mla	r4, r4, r5, r1
 80281f6:	10d5      	asrs	r5, r2, #3
 80281f8:	10d9      	asrs	r1, r3, #3
 80281fa:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80281fe:	00d2      	lsls	r2, r2, #3
 8028200:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028204:	00db      	lsls	r3, r3, #3
 8028206:	fb15 f506 	smulbb	r5, r5, r6
 802820a:	9e00      	ldr	r6, [sp, #0]
 802820c:	b2d2      	uxtb	r2, r2
 802820e:	fb01 5106 	mla	r1, r1, r6, r5
 8028212:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8028216:	b2db      	uxtb	r3, r3
 8028218:	fb12 f205 	smulbb	r2, r2, r5
 802821c:	b2a4      	uxth	r4, r4
 802821e:	b289      	uxth	r1, r1
 8028220:	fb03 2306 	mla	r3, r3, r6, r2
 8028224:	1c62      	adds	r2, r4, #1
 8028226:	b29b      	uxth	r3, r3
 8028228:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802822c:	1c4a      	adds	r2, r1, #1
 802822e:	1c5d      	adds	r5, r3, #1
 8028230:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8028234:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8028238:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802823c:	431c      	orrs	r4, r3
 802823e:	eb02 2311 	add.w	r3, r2, r1, lsr #8
 8028242:	095b      	lsrs	r3, r3, #5
 8028244:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028248:	4323      	orrs	r3, r4
 802824a:	f82b 3010 	strh.w	r3, [fp, r0, lsl #1]
 802824e:	9b04      	ldr	r3, [sp, #16]
 8028250:	3001      	adds	r0, #1
 8028252:	449c      	add	ip, r3
 8028254:	9b05      	ldr	r3, [sp, #20]
 8028256:	449a      	add	sl, r3
 8028258:	e741      	b.n	80280de <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x124e>
 802825a:	2300      	movs	r3, #0
 802825c:	465d      	mov	r5, fp
 802825e:	f04f 0903 	mov.w	r9, #3
 8028262:	f04f 0804 	mov.w	r8, #4
 8028266:	930c      	str	r3, [sp, #48]	; 0x30
 8028268:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802826c:	930e      	str	r3, [sp, #56]	; 0x38
 802826e:	9b01      	ldr	r3, [sp, #4]
 8028270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028272:	4293      	cmp	r3, r2
 8028274:	f300 80bb 	bgt.w	80283ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x155e>
 8028278:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802827c:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8028280:	f7fe bf45 	b.w	802710e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x27e>
 8028284:	465f      	mov	r7, fp
 8028286:	f04f 0800 	mov.w	r8, #0
 802828a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 802828e:	9b01      	ldr	r3, [sp, #4]
 8028290:	4543      	cmp	r3, r8
 8028292:	ddf1      	ble.n	8028278 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e8>
 8028294:	9b03      	ldr	r3, [sp, #12]
 8028296:	ea4f 422c 	mov.w	r2, ip, asr #16
 802829a:	ea4f 412a 	mov.w	r1, sl, asr #16
 802829e:	b17b      	cbz	r3, 80282c0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1430>
 80282a0:	2a00      	cmp	r2, #0
 80282a2:	f2c0 809c 	blt.w	80283de <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x154e>
 80282a6:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 80282aa:	429a      	cmp	r2, r3
 80282ac:	f280 8097 	bge.w	80283de <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x154e>
 80282b0:	2900      	cmp	r1, #0
 80282b2:	f2c0 8094 	blt.w	80283de <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x154e>
 80282b6:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80282ba:	4299      	cmp	r1, r3
 80282bc:	f280 808f 	bge.w	80283de <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x154e>
 80282c0:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 80282c4:	9c02      	ldr	r4, [sp, #8]
 80282c6:	fb01 2103 	mla	r1, r1, r3, r2
 80282ca:	9a02      	ldr	r2, [sp, #8]
 80282cc:	1850      	adds	r0, r2, r1
 80282ce:	5c61      	ldrb	r1, [r4, r1]
 80282d0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80282d2:	f3ca 2407 	ubfx	r4, sl, #8, #8
 80282d6:	3101      	adds	r1, #1
 80282d8:	6852      	ldr	r2, [r2, #4]
 80282da:	f852 e021 	ldr.w	lr, [r2, r1, lsl #2]
 80282de:	7841      	ldrb	r1, [r0, #1]
 80282e0:	3101      	adds	r1, #1
 80282e2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80282e6:	910e      	str	r1, [sp, #56]	; 0x38
 80282e8:	18c1      	adds	r1, r0, r3
 80282ea:	5cc3      	ldrb	r3, [r0, r3]
 80282ec:	7849      	ldrb	r1, [r1, #1]
 80282ee:	3301      	adds	r3, #1
 80282f0:	3101      	adds	r1, #1
 80282f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80282f6:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80282fa:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80282fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8028300:	fb04 f001 	mul.w	r0, r4, r1
 8028304:	0a00      	lsrs	r0, r0, #8
 8028306:	1a22      	subs	r2, r4, r0
 8028308:	1a0e      	subs	r6, r1, r0
 802830a:	920c      	str	r2, [sp, #48]	; 0x30
 802830c:	190a      	adds	r2, r1, r4
 802830e:	f00e 14ff 	and.w	r4, lr, #16711935	; 0xff00ff
 8028312:	990e      	ldr	r1, [sp, #56]	; 0x38
 8028314:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8028318:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802831c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028320:	4402      	add	r2, r0
 8028322:	4354      	muls	r4, r2
 8028324:	fb06 4401 	mla	r4, r6, r1, r4
 8028328:	f005 11ff 	and.w	r1, r5, #16711935	; 0xff00ff
 802832c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8028330:	fb00 4301 	mla	r3, r0, r1, r4
 8028334:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028336:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802833a:	460c      	mov	r4, r1
 802833c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802833e:	fb01 3104 	mla	r1, r1, r4, r3
 8028342:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028346:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802834a:	0a09      	lsrs	r1, r1, #8
 802834c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028350:	4374      	muls	r4, r6
 8028352:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028356:	fb02 4e0e 	mla	lr, r2, lr, r4
 802835a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802835c:	fb00 ee05 	mla	lr, r0, r5, lr
 8028360:	fb02 ee03 	mla	lr, r2, r3, lr
 8028364:	9b06      	ldr	r3, [sp, #24]
 8028366:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802836a:	2bff      	cmp	r3, #255	; 0xff
 802836c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8028370:	ea41 010e 	orr.w	r1, r1, lr
 8028374:	f000 8108 	beq.w	8028588 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x16f8>
 8028378:	883b      	ldrh	r3, [r7, #0]
 802837a:	0c0a      	lsrs	r2, r1, #16
 802837c:	f8bd 4000 	ldrh.w	r4, [sp]
 8028380:	1218      	asrs	r0, r3, #8
 8028382:	f8bd 5000 	ldrh.w	r5, [sp]
 8028386:	fb12 f204 	smulbb	r2, r2, r4
 802838a:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802838e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028392:	b2c9      	uxtb	r1, r1
 8028394:	fb14 f405 	smulbb	r4, r4, r5
 8028398:	fb00 2009 	mla	r0, r0, r9, r2
 802839c:	10da      	asrs	r2, r3, #3
 802839e:	fb11 f105 	smulbb	r1, r1, r5
 80283a2:	00db      	lsls	r3, r3, #3
 80283a4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80283a8:	b280      	uxth	r0, r0
 80283aa:	b2db      	uxtb	r3, r3
 80283ac:	fb02 4209 	mla	r2, r2, r9, r4
 80283b0:	fb03 1109 	mla	r1, r3, r9, r1
 80283b4:	1c43      	adds	r3, r0, #1
 80283b6:	b292      	uxth	r2, r2
 80283b8:	b289      	uxth	r1, r1
 80283ba:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80283be:	1c54      	adds	r4, r2, #1
 80283c0:	1c4b      	adds	r3, r1, #1
 80283c2:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80283c6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80283ca:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80283ce:	0964      	lsrs	r4, r4, #5
 80283d0:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80283d4:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80283d8:	4308      	orrs	r0, r1
 80283da:	4320      	orrs	r0, r4
 80283dc:	8038      	strh	r0, [r7, #0]
 80283de:	9b04      	ldr	r3, [sp, #16]
 80283e0:	3702      	adds	r7, #2
 80283e2:	f108 0801 	add.w	r8, r8, #1
 80283e6:	449c      	add	ip, r3
 80283e8:	9b05      	ldr	r3, [sp, #20]
 80283ea:	449a      	add	sl, r3
 80283ec:	e74f      	b.n	802828e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13fe>
 80283ee:	9a03      	ldr	r2, [sp, #12]
 80283f0:	ea4f 432c 	mov.w	r3, ip, asr #16
 80283f4:	ea4f 412a 	mov.w	r1, sl, asr #16
 80283f8:	b17a      	cbz	r2, 802841a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x158a>
 80283fa:	2b00      	cmp	r3, #0
 80283fc:	f2c0 80af 	blt.w	802855e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x16ce>
 8028400:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8028404:	4293      	cmp	r3, r2
 8028406:	f280 80aa 	bge.w	802855e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x16ce>
 802840a:	2900      	cmp	r1, #0
 802840c:	f2c0 80a7 	blt.w	802855e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x16ce>
 8028410:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 8028414:	4291      	cmp	r1, r2
 8028416:	f280 80a2 	bge.w	802855e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x16ce>
 802841a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 802841e:	9c02      	ldr	r4, [sp, #8]
 8028420:	fb01 3302 	mla	r3, r1, r2, r3
 8028424:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8028426:	9902      	ldr	r1, [sp, #8]
 8028428:	5ce6      	ldrb	r6, [r4, r3]
 802842a:	f3ca 3403 	ubfx	r4, sl, #12, #4
 802842e:	6840      	ldr	r0, [r0, #4]
 8028430:	4419      	add	r1, r3
 8028432:	fb19 8606 	smlabb	r6, r9, r6, r8
 8028436:	f811 e002 	ldrb.w	lr, [r1, r2]
 802843a:	1983      	adds	r3, r0, r6
 802843c:	5d86      	ldrb	r6, [r0, r6]
 802843e:	fb19 8e0e 	smlabb	lr, r9, lr, r8
 8028442:	930f      	str	r3, [sp, #60]	; 0x3c
 8028444:	784b      	ldrb	r3, [r1, #1]
 8028446:	fb19 8303 	smlabb	r3, r9, r3, r8
 802844a:	9313      	str	r3, [sp, #76]	; 0x4c
 802844c:	18c3      	adds	r3, r0, r3
 802844e:	9310      	str	r3, [sp, #64]	; 0x40
 8028450:	188b      	adds	r3, r1, r2
 8028452:	eb00 020e 	add.w	r2, r0, lr
 8028456:	f810 e00e 	ldrb.w	lr, [r0, lr]
 802845a:	785f      	ldrb	r7, [r3, #1]
 802845c:	9211      	str	r2, [sp, #68]	; 0x44
 802845e:	f3cc 3203 	ubfx	r2, ip, #12, #4
 8028462:	fb19 8307 	smlabb	r3, r9, r7, r8
 8028466:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8028468:	fb04 f102 	mul.w	r1, r4, r2
 802846c:	9314      	str	r3, [sp, #80]	; 0x50
 802846e:	18c3      	adds	r3, r0, r3
 8028470:	10c9      	asrs	r1, r1, #3
 8028472:	5dc7      	ldrb	r7, [r0, r7]
 8028474:	9312      	str	r3, [sp, #72]	; 0x48
 8028476:	f1c4 0310 	rsb	r3, r4, #16
 802847a:	ebc1 0444 	rsb	r4, r1, r4, lsl #1
 802847e:	1a9b      	subs	r3, r3, r2
 8028480:	ebc1 0242 	rsb	r2, r1, r2, lsl #1
 8028484:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8028488:	435e      	muls	r6, r3
 802848a:	fb02 6607 	mla	r6, r2, r7, r6
 802848e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8028490:	fb04 660e 	mla	r6, r4, lr, r6
 8028494:	5dc0      	ldrb	r0, [r0, r7]
 8028496:	fb01 6000 	mla	r0, r1, r0, r6
 802849a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802849c:	9013      	str	r0, [sp, #76]	; 0x4c
 802849e:	7876      	ldrb	r6, [r6, #1]
 80284a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80284a2:	435e      	muls	r6, r3
 80284a4:	7840      	ldrb	r0, [r0, #1]
 80284a6:	fb02 6600 	mla	r6, r2, r0, r6
 80284aa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80284ac:	7840      	ldrb	r0, [r0, #1]
 80284ae:	fb04 6600 	mla	r6, r4, r0, r6
 80284b2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80284b4:	7840      	ldrb	r0, [r0, #1]
 80284b6:	fb01 6000 	mla	r0, r1, r0, r6
 80284ba:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80284bc:	78b6      	ldrb	r6, [r6, #2]
 80284be:	1140      	asrs	r0, r0, #5
 80284c0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80284c2:	78bf      	ldrb	r7, [r7, #2]
 80284c4:	437b      	muls	r3, r7
 80284c6:	fb02 3306 	mla	r3, r2, r6, r3
 80284ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80284cc:	7897      	ldrb	r7, [r2, #2]
 80284ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80284d0:	fb04 3307 	mla	r3, r4, r7, r3
 80284d4:	7897      	ldrb	r7, [r2, #2]
 80284d6:	fb01 3307 	mla	r3, r1, r7, r3
 80284da:	1159      	asrs	r1, r3, #5
 80284dc:	9b06      	ldr	r3, [sp, #24]
 80284de:	2bff      	cmp	r3, #255	; 0xff
 80284e0:	d046      	beq.n	8028570 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x16e0>
 80284e2:	f8b5 e000 	ldrh.w	lr, [r5]
 80284e6:	b2c9      	uxtb	r1, r1
 80284e8:	f8bd 2000 	ldrh.w	r2, [sp]
 80284ec:	b2c0      	uxtb	r0, r0
 80284ee:	ea4f 232e 	mov.w	r3, lr, asr #8
 80284f2:	fb11 f102 	smulbb	r1, r1, r2
 80284f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80284f8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80284fc:	fb03 1102 	mla	r1, r3, r2, r1
 8028500:	ea4f 03ee 	mov.w	r3, lr, asr #3
 8028504:	f8bd 2000 	ldrh.w	r2, [sp]
 8028508:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802850c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8028510:	b289      	uxth	r1, r1
 8028512:	fb10 f002 	smulbb	r0, r0, r2
 8028516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028518:	fa5f fe8e 	uxtb.w	lr, lr
 802851c:	fb03 0302 	mla	r3, r3, r2, r0
 8028520:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 8028524:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028526:	fb1e fe00 	smulbb	lr, lr, r0
 802852a:	9800      	ldr	r0, [sp, #0]
 802852c:	f3c2 1247 	ubfx	r2, r2, #5, #8
 8028530:	b29b      	uxth	r3, r3
 8028532:	fb02 e200 	mla	r2, r2, r0, lr
 8028536:	b290      	uxth	r0, r2
 8028538:	1c4a      	adds	r2, r1, #1
 802853a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802853e:	1c42      	adds	r2, r0, #1
 8028540:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8028544:	1c58      	adds	r0, r3, #1
 8028546:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802854a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802854e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8028552:	0940      	lsrs	r0, r0, #5
 8028554:	4311      	orrs	r1, r2
 8028556:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802855a:	4301      	orrs	r1, r0
 802855c:	8029      	strh	r1, [r5, #0]
 802855e:	9b04      	ldr	r3, [sp, #16]
 8028560:	3502      	adds	r5, #2
 8028562:	449c      	add	ip, r3
 8028564:	9b05      	ldr	r3, [sp, #20]
 8028566:	449a      	add	sl, r3
 8028568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802856a:	3301      	adds	r3, #1
 802856c:	930c      	str	r3, [sp, #48]	; 0x30
 802856e:	e67e      	b.n	802826e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13de>
 8028570:	4b9a      	ldr	r3, [pc, #616]	; (80287dc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x194c>)
 8028572:	00c0      	lsls	r0, r0, #3
 8028574:	ea03 2101 	and.w	r1, r3, r1, lsl #8
 8028578:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802857a:	f3c3 2304 	ubfx	r3, r3, #8, #5
 802857e:	4319      	orrs	r1, r3
 8028580:	f400 63fc 	and.w	r3, r0, #2016	; 0x7e0
 8028584:	4319      	orrs	r1, r3
 8028586:	e7e9      	b.n	802855c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x16cc>
 8028588:	4b94      	ldr	r3, [pc, #592]	; (80287dc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x194c>)
 802858a:	ea03 2211 	and.w	r2, r3, r1, lsr #8
 802858e:	094b      	lsrs	r3, r1, #5
 8028590:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8028594:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028598:	4313      	orrs	r3, r2
 802859a:	4319      	orrs	r1, r3
 802859c:	8039      	strh	r1, [r7, #0]
 802859e:	e71e      	b.n	80283de <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x154e>
 80285a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80285a2:	685b      	ldr	r3, [r3, #4]
 80285a4:	781b      	ldrb	r3, [r3, #0]
 80285a6:	2b01      	cmp	r3, #1
 80285a8:	d032      	beq.n	8028610 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1780>
 80285aa:	f0c0 8098 	bcc.w	80286de <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x184e>
 80285ae:	2b02      	cmp	r3, #2
 80285b0:	f47e adad 	bne.w	802710e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x27e>
 80285b4:	9b06      	ldr	r3, [sp, #24]
 80285b6:	2bff      	cmp	r3, #255	; 0xff
 80285b8:	f040 8112 	bne.w	80287e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1950>
 80285bc:	2200      	movs	r2, #0
 80285be:	9b01      	ldr	r3, [sp, #4]
 80285c0:	4293      	cmp	r3, r2
 80285c2:	f77f ae59 	ble.w	8028278 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e8>
 80285c6:	9903      	ldr	r1, [sp, #12]
 80285c8:	ea4f 432c 	mov.w	r3, ip, asr #16
 80285cc:	ea4f 402a 	mov.w	r0, sl, asr #16
 80285d0:	b159      	cbz	r1, 80285ea <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x175a>
 80285d2:	2b00      	cmp	r3, #0
 80285d4:	db16      	blt.n	8028604 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1774>
 80285d6:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 80285da:	428b      	cmp	r3, r1
 80285dc:	da12      	bge.n	8028604 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1774>
 80285de:	2800      	cmp	r0, #0
 80285e0:	db10      	blt.n	8028604 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1774>
 80285e2:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
 80285e6:	4288      	cmp	r0, r1
 80285e8:	da0c      	bge.n	8028604 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1774>
 80285ea:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 80285ee:	9c02      	ldr	r4, [sp, #8]
 80285f0:	fb00 4101 	mla	r1, r0, r1, r4
 80285f4:	5cc9      	ldrb	r1, [r1, r3]
 80285f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80285f8:	3102      	adds	r1, #2
 80285fa:	685b      	ldr	r3, [r3, #4]
 80285fc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8028600:	f82b 3012 	strh.w	r3, [fp, r2, lsl #1]
 8028604:	9b04      	ldr	r3, [sp, #16]
 8028606:	3201      	adds	r2, #1
 8028608:	449c      	add	ip, r3
 802860a:	9b05      	ldr	r3, [sp, #20]
 802860c:	449a      	add	sl, r3
 802860e:	e7d6      	b.n	80285be <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x172e>
 8028610:	4658      	mov	r0, fp
 8028612:	2600      	movs	r6, #0
 8028614:	f04f 0903 	mov.w	r9, #3
 8028618:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 802861c:	9b01      	ldr	r3, [sp, #4]
 802861e:	42b3      	cmp	r3, r6
 8028620:	f77f ae2a 	ble.w	8028278 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e8>
 8028624:	9a03      	ldr	r2, [sp, #12]
 8028626:	ea4f 432c 	mov.w	r3, ip, asr #16
 802862a:	ea4f 412a 	mov.w	r1, sl, asr #16
 802862e:	b15a      	cbz	r2, 8028648 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17b8>
 8028630:	2b00      	cmp	r3, #0
 8028632:	db4d      	blt.n	80286d0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1840>
 8028634:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8028638:	4293      	cmp	r3, r2
 802863a:	da49      	bge.n	80286d0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1840>
 802863c:	2900      	cmp	r1, #0
 802863e:	db47      	blt.n	80286d0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1840>
 8028640:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 8028644:	4291      	cmp	r1, r2
 8028646:	da43      	bge.n	80286d0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1840>
 8028648:	9c02      	ldr	r4, [sp, #8]
 802864a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 802864e:	fb01 4202 	mla	r2, r1, r2, r4
 8028652:	5cd4      	ldrb	r4, [r2, r3]
 8028654:	2304      	movs	r3, #4
 8028656:	fb19 3404 	smlabb	r4, r9, r4, r3
 802865a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802865c:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8028660:	9b06      	ldr	r3, [sp, #24]
 8028662:	eb0e 0504 	add.w	r5, lr, r4
 8028666:	2bff      	cmp	r3, #255	; 0xff
 8028668:	f000 809c 	beq.w	80287a4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1914>
 802866c:	8801      	ldrh	r1, [r0, #0]
 802866e:	78ab      	ldrb	r3, [r5, #2]
 8028670:	120a      	asrs	r2, r1, #8
 8028672:	f8bd 8000 	ldrh.w	r8, [sp]
 8028676:	786d      	ldrb	r5, [r5, #1]
 8028678:	fb13 f308 	smulbb	r3, r3, r8
 802867c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8028680:	fb15 f508 	smulbb	r5, r5, r8
 8028684:	f81e 4004 	ldrb.w	r4, [lr, r4]
 8028688:	fb02 3207 	mla	r2, r2, r7, r3
 802868c:	10cb      	asrs	r3, r1, #3
 802868e:	00c9      	lsls	r1, r1, #3
 8028690:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8028694:	b292      	uxth	r2, r2
 8028696:	b2c9      	uxtb	r1, r1
 8028698:	fb03 5307 	mla	r3, r3, r7, r5
 802869c:	9d00      	ldr	r5, [sp, #0]
 802869e:	fb11 f107 	smulbb	r1, r1, r7
 80286a2:	b29b      	uxth	r3, r3
 80286a4:	fb04 1405 	mla	r4, r4, r5, r1
 80286a8:	1c51      	adds	r1, r2, #1
 80286aa:	1c5d      	adds	r5, r3, #1
 80286ac:	b2a4      	uxth	r4, r4
 80286ae:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80286b2:	1c61      	adds	r1, r4, #1
 80286b4:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 80286b8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80286bc:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80286c0:	096d      	lsrs	r5, r5, #5
 80286c2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80286c6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80286ca:	430a      	orrs	r2, r1
 80286cc:	432a      	orrs	r2, r5
 80286ce:	8002      	strh	r2, [r0, #0]
 80286d0:	9b04      	ldr	r3, [sp, #16]
 80286d2:	3002      	adds	r0, #2
 80286d4:	3601      	adds	r6, #1
 80286d6:	449c      	add	ip, r3
 80286d8:	9b05      	ldr	r3, [sp, #20]
 80286da:	449a      	add	sl, r3
 80286dc:	e79e      	b.n	802861c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x178c>
 80286de:	465c      	mov	r4, fp
 80286e0:	2500      	movs	r5, #0
 80286e2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80286e6:	9b01      	ldr	r3, [sp, #4]
 80286e8:	42ab      	cmp	r3, r5
 80286ea:	f77f adc5 	ble.w	8028278 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e8>
 80286ee:	9a03      	ldr	r2, [sp, #12]
 80286f0:	ea4f 432c 	mov.w	r3, ip, asr #16
 80286f4:	ea4f 412a 	mov.w	r1, sl, asr #16
 80286f8:	b15a      	cbz	r2, 8028712 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1882>
 80286fa:	2b00      	cmp	r3, #0
 80286fc:	db4b      	blt.n	8028796 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1906>
 80286fe:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8028702:	4293      	cmp	r3, r2
 8028704:	da47      	bge.n	8028796 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1906>
 8028706:	2900      	cmp	r1, #0
 8028708:	db45      	blt.n	8028796 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1906>
 802870a:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 802870e:	4291      	cmp	r1, r2
 8028710:	da41      	bge.n	8028796 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1906>
 8028712:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8028716:	9802      	ldr	r0, [sp, #8]
 8028718:	fb01 0202 	mla	r2, r1, r2, r0
 802871c:	5cd2      	ldrb	r2, [r2, r3]
 802871e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028720:	3201      	adds	r2, #1
 8028722:	685b      	ldr	r3, [r3, #4]
 8028724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028728:	9a06      	ldr	r2, [sp, #24]
 802872a:	2aff      	cmp	r2, #255	; 0xff
 802872c:	d049      	beq.n	80287c2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1932>
 802872e:	8822      	ldrh	r2, [r4, #0]
 8028730:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8028734:	f8bd 7000 	ldrh.w	r7, [sp]
 8028738:	1210      	asrs	r0, r2, #8
 802873a:	f8bd e000 	ldrh.w	lr, [sp]
 802873e:	fb11 f107 	smulbb	r1, r1, r7
 8028742:	f3c3 2707 	ubfx	r7, r3, #8, #8
 8028746:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802874a:	b2db      	uxtb	r3, r3
 802874c:	fb17 f70e 	smulbb	r7, r7, lr
 8028750:	fb00 1006 	mla	r0, r0, r6, r1
 8028754:	10d1      	asrs	r1, r2, #3
 8028756:	fb13 f30e 	smulbb	r3, r3, lr
 802875a:	00d2      	lsls	r2, r2, #3
 802875c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028760:	b280      	uxth	r0, r0
 8028762:	b2d2      	uxtb	r2, r2
 8028764:	fb01 7106 	mla	r1, r1, r6, r7
 8028768:	fb02 3306 	mla	r3, r2, r6, r3
 802876c:	1c42      	adds	r2, r0, #1
 802876e:	b289      	uxth	r1, r1
 8028770:	b29b      	uxth	r3, r3
 8028772:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028776:	1c4f      	adds	r7, r1, #1
 8028778:	1c5a      	adds	r2, r3, #1
 802877a:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 802877e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028782:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028786:	097f      	lsrs	r7, r7, #5
 8028788:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802878c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028790:	4318      	orrs	r0, r3
 8028792:	4338      	orrs	r0, r7
 8028794:	8020      	strh	r0, [r4, #0]
 8028796:	9b04      	ldr	r3, [sp, #16]
 8028798:	3402      	adds	r4, #2
 802879a:	3501      	adds	r5, #1
 802879c:	449c      	add	ip, r3
 802879e:	9b05      	ldr	r3, [sp, #20]
 80287a0:	449a      	add	sl, r3
 80287a2:	e7a0      	b.n	80286e6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1856>
 80287a4:	78ab      	ldrb	r3, [r5, #2]
 80287a6:	4a0d      	ldr	r2, [pc, #52]	; (80287dc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x194c>)
 80287a8:	ea02 2303 	and.w	r3, r2, r3, lsl #8
 80287ac:	786a      	ldrb	r2, [r5, #1]
 80287ae:	00d2      	lsls	r2, r2, #3
 80287b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80287b4:	4313      	orrs	r3, r2
 80287b6:	f81e 2004 	ldrb.w	r2, [lr, r4]
 80287ba:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 80287be:	8003      	strh	r3, [r0, #0]
 80287c0:	e786      	b.n	80286d0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1840>
 80287c2:	4a06      	ldr	r2, [pc, #24]	; (80287dc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x194c>)
 80287c4:	ea02 2113 	and.w	r1, r2, r3, lsr #8
 80287c8:	095a      	lsrs	r2, r3, #5
 80287ca:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80287ce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80287d2:	430a      	orrs	r2, r1
 80287d4:	431a      	orrs	r2, r3
 80287d6:	8022      	strh	r2, [r4, #0]
 80287d8:	e7dd      	b.n	8028796 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1906>
 80287da:	bf00      	nop
 80287dc:	fffff800 	.word	0xfffff800
 80287e0:	2400      	movs	r4, #0
 80287e2:	f8bd 5020 	ldrh.w	r5, [sp, #32]
 80287e6:	9b01      	ldr	r3, [sp, #4]
 80287e8:	42a3      	cmp	r3, r4
 80287ea:	f77f ad45 	ble.w	8028278 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e8>
 80287ee:	9a03      	ldr	r2, [sp, #12]
 80287f0:	ea4f 432c 	mov.w	r3, ip, asr #16
 80287f4:	ea4f 402a 	mov.w	r0, sl, asr #16
 80287f8:	b15a      	cbz	r2, 8028812 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1982>
 80287fa:	2b00      	cmp	r3, #0
 80287fc:	db4b      	blt.n	8028896 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1a06>
 80287fe:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8028802:	4293      	cmp	r3, r2
 8028804:	da47      	bge.n	8028896 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1a06>
 8028806:	2800      	cmp	r0, #0
 8028808:	db45      	blt.n	8028896 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1a06>
 802880a:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 802880e:	4290      	cmp	r0, r2
 8028810:	da41      	bge.n	8028896 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1a06>
 8028812:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 8028816:	9e02      	ldr	r6, [sp, #8]
 8028818:	f83b 2014 	ldrh.w	r2, [fp, r4, lsl #1]
 802881c:	fb00 6101 	mla	r1, r0, r1, r6
 8028820:	9e00      	ldr	r6, [sp, #0]
 8028822:	9f00      	ldr	r7, [sp, #0]
 8028824:	5cc9      	ldrb	r1, [r1, r3]
 8028826:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028828:	3102      	adds	r1, #2
 802882a:	685b      	ldr	r3, [r3, #4]
 802882c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8028830:	1211      	asrs	r1, r2, #8
 8028832:	1218      	asrs	r0, r3, #8
 8028834:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028838:	fb11 f105 	smulbb	r1, r1, r5
 802883c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028840:	fb00 1006 	mla	r0, r0, r6, r1
 8028844:	10d6      	asrs	r6, r2, #3
 8028846:	00d2      	lsls	r2, r2, #3
 8028848:	10d9      	asrs	r1, r3, #3
 802884a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802884e:	00db      	lsls	r3, r3, #3
 8028850:	b2d2      	uxtb	r2, r2
 8028852:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028856:	fb16 f605 	smulbb	r6, r6, r5
 802885a:	b2db      	uxtb	r3, r3
 802885c:	fb12 f205 	smulbb	r2, r2, r5
 8028860:	b280      	uxth	r0, r0
 8028862:	fb01 6107 	mla	r1, r1, r7, r6
 8028866:	fb03 2307 	mla	r3, r3, r7, r2
 802886a:	1c42      	adds	r2, r0, #1
 802886c:	b289      	uxth	r1, r1
 802886e:	b29b      	uxth	r3, r3
 8028870:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028874:	1c4e      	adds	r6, r1, #1
 8028876:	1c5a      	adds	r2, r3, #1
 8028878:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 802887c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028880:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028884:	0976      	lsrs	r6, r6, #5
 8028886:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802888a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802888e:	4310      	orrs	r0, r2
 8028890:	4330      	orrs	r0, r6
 8028892:	f82b 0014 	strh.w	r0, [fp, r4, lsl #1]
 8028896:	9b04      	ldr	r3, [sp, #16]
 8028898:	3401      	adds	r4, #1
 802889a:	449c      	add	ip, r3
 802889c:	9b05      	ldr	r3, [sp, #20]
 802889e:	449a      	add	sl, r3
 80288a0:	e7a1      	b.n	80287e6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1956>
 80288a2:	00c0      	lsls	r0, r0, #3
 80288a4:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80288a8:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 80288ac:	8038      	strh	r0, [r7, #0]
 80288ae:	f7ff b818 	b.w	80278e2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa52>
 80288b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80288b4:	685b      	ldr	r3, [r3, #4]
 80288b6:	781d      	ldrb	r5, [r3, #0]
 80288b8:	2d00      	cmp	r5, #0
 80288ba:	f47e ac28 	bne.w	802710e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x27e>
 80288be:	465e      	mov	r6, fp
 80288c0:	9b01      	ldr	r3, [sp, #4]
 80288c2:	42ab      	cmp	r3, r5
 80288c4:	f77f acd8 	ble.w	8028278 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e8>
 80288c8:	9a03      	ldr	r2, [sp, #12]
 80288ca:	ea4f 432c 	mov.w	r3, ip, asr #16
 80288ce:	ea4f 412a 	mov.w	r1, sl, asr #16
 80288d2:	b15a      	cbz	r2, 80288ec <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1a5c>
 80288d4:	2b00      	cmp	r3, #0
 80288d6:	db59      	blt.n	802898c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1afc>
 80288d8:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80288dc:	4293      	cmp	r3, r2
 80288de:	da55      	bge.n	802898c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1afc>
 80288e0:	2900      	cmp	r1, #0
 80288e2:	db53      	blt.n	802898c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1afc>
 80288e4:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 80288e8:	4291      	cmp	r1, r2
 80288ea:	da4f      	bge.n	802898c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1afc>
 80288ec:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80288f0:	9802      	ldr	r0, [sp, #8]
 80288f2:	fb01 0202 	mla	r2, r1, r2, r0
 80288f6:	5cd2      	ldrb	r2, [r2, r3]
 80288f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80288fa:	3201      	adds	r2, #1
 80288fc:	685b      	ldr	r3, [r3, #4]
 80288fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8028902:	0e11      	lsrs	r1, r2, #24
 8028904:	d042      	beq.n	802898c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1afc>
 8028906:	29ff      	cmp	r1, #255	; 0xff
 8028908:	d102      	bne.n	8028910 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1a80>
 802890a:	9b06      	ldr	r3, [sp, #24]
 802890c:	2bff      	cmp	r3, #255	; 0xff
 802890e:	d044      	beq.n	802899a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1b0a>
 8028910:	9b06      	ldr	r3, [sp, #24]
 8028912:	f3c2 2e07 	ubfx	lr, r2, #8, #8
 8028916:	8834      	ldrh	r4, [r6, #0]
 8028918:	4359      	muls	r1, r3
 802891a:	1220      	asrs	r0, r4, #8
 802891c:	1c4b      	adds	r3, r1, #1
 802891e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028922:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8028926:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802892a:	b2d2      	uxtb	r2, r2
 802892c:	121b      	asrs	r3, r3, #8
 802892e:	b29f      	uxth	r7, r3
 8028930:	43db      	mvns	r3, r3
 8028932:	fb11 f107 	smulbb	r1, r1, r7
 8028936:	b2db      	uxtb	r3, r3
 8028938:	fb12 f207 	smulbb	r2, r2, r7
 802893c:	fb00 1003 	mla	r0, r0, r3, r1
 8028940:	10e1      	asrs	r1, r4, #3
 8028942:	fb1e fe07 	smulbb	lr, lr, r7
 8028946:	00e4      	lsls	r4, r4, #3
 8028948:	b280      	uxth	r0, r0
 802894a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802894e:	b2e4      	uxtb	r4, r4
 8028950:	fb01 e103 	mla	r1, r1, r3, lr
 8028954:	fb04 2203 	mla	r2, r4, r3, r2
 8028958:	1c43      	adds	r3, r0, #1
 802895a:	b289      	uxth	r1, r1
 802895c:	b292      	uxth	r2, r2
 802895e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028962:	f102 0e01 	add.w	lr, r2, #1
 8028966:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802896a:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 802896e:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8028972:	ea40 000e 	orr.w	r0, r0, lr
 8028976:	f101 0e01 	add.w	lr, r1, #1
 802897a:	eb0e 2e11 	add.w	lr, lr, r1, lsr #8
 802897e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8028982:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8028986:	ea40 000e 	orr.w	r0, r0, lr
 802898a:	8030      	strh	r0, [r6, #0]
 802898c:	9b04      	ldr	r3, [sp, #16]
 802898e:	3602      	adds	r6, #2
 8028990:	3501      	adds	r5, #1
 8028992:	449c      	add	ip, r3
 8028994:	9b05      	ldr	r3, [sp, #20]
 8028996:	449a      	add	sl, r3
 8028998:	e792      	b.n	80288c0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1a30>
 802899a:	4b67      	ldr	r3, [pc, #412]	; (8028b38 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca8>)
 802899c:	ea03 2112 	and.w	r1, r3, r2, lsr #8
 80289a0:	0953      	lsrs	r3, r2, #5
 80289a2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80289a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80289aa:	430b      	orrs	r3, r1
 80289ac:	4313      	orrs	r3, r2
 80289ae:	8033      	strh	r3, [r6, #0]
 80289b0:	e7ec      	b.n	802898c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1afc>
 80289b2:	00db      	lsls	r3, r3, #3
 80289b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80289b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80289ba:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80289be:	8013      	strh	r3, [r2, #0]
 80289c0:	f7ff ba55 	b.w	8027e6e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfde>
 80289c4:	9b06      	ldr	r3, [sp, #24]
 80289c6:	2bff      	cmp	r3, #255	; 0xff
 80289c8:	d105      	bne.n	80289d6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1b46>
 80289ca:	9b07      	ldr	r3, [sp, #28]
 80289cc:	9a01      	ldr	r2, [sp, #4]
 80289ce:	429a      	cmp	r2, r3
 80289d0:	dc5e      	bgt.n	8028a90 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c00>
 80289d2:	4613      	mov	r3, r2
 80289d4:	e450      	b.n	8028278 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e8>
 80289d6:	9c07      	ldr	r4, [sp, #28]
 80289d8:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80289dc:	9b01      	ldr	r3, [sp, #4]
 80289de:	42a3      	cmp	r3, r4
 80289e0:	f77f ac4a 	ble.w	8028278 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e8>
 80289e4:	9b03      	ldr	r3, [sp, #12]
 80289e6:	ea4f 422c 	mov.w	r2, ip, asr #16
 80289ea:	ea4f 412a 	mov.w	r1, sl, asr #16
 80289ee:	b15b      	cbz	r3, 8028a08 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1b78>
 80289f0:	2a00      	cmp	r2, #0
 80289f2:	db47      	blt.n	8028a84 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1bf4>
 80289f4:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 80289f8:	429a      	cmp	r2, r3
 80289fa:	da43      	bge.n	8028a84 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1bf4>
 80289fc:	2900      	cmp	r1, #0
 80289fe:	db41      	blt.n	8028a84 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1bf4>
 8028a00:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8028a04:	4299      	cmp	r1, r3
 8028a06:	da3d      	bge.n	8028a84 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1bf4>
 8028a08:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8028a0c:	9d00      	ldr	r5, [sp, #0]
 8028a0e:	fb01 2303 	mla	r3, r1, r3, r2
 8028a12:	9a02      	ldr	r2, [sp, #8]
 8028a14:	9f00      	ldr	r7, [sp, #0]
 8028a16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8028a1a:	f83b 2014 	ldrh.w	r2, [fp, r4, lsl #1]
 8028a1e:	1218      	asrs	r0, r3, #8
 8028a20:	1211      	asrs	r1, r2, #8
 8028a22:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028a26:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028a2a:	fb11 f106 	smulbb	r1, r1, r6
 8028a2e:	fb00 1005 	mla	r0, r0, r5, r1
 8028a32:	10d5      	asrs	r5, r2, #3
 8028a34:	00d2      	lsls	r2, r2, #3
 8028a36:	10d9      	asrs	r1, r3, #3
 8028a38:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8028a3c:	00db      	lsls	r3, r3, #3
 8028a3e:	b2d2      	uxtb	r2, r2
 8028a40:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028a44:	fb15 f506 	smulbb	r5, r5, r6
 8028a48:	b2db      	uxtb	r3, r3
 8028a4a:	fb12 f206 	smulbb	r2, r2, r6
 8028a4e:	b280      	uxth	r0, r0
 8028a50:	fb01 5107 	mla	r1, r1, r7, r5
 8028a54:	fb03 2307 	mla	r3, r3, r7, r2
 8028a58:	1c42      	adds	r2, r0, #1
 8028a5a:	b289      	uxth	r1, r1
 8028a5c:	b29b      	uxth	r3, r3
 8028a5e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028a62:	1c4d      	adds	r5, r1, #1
 8028a64:	1c5a      	adds	r2, r3, #1
 8028a66:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8028a6a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028a6e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028a72:	096d      	lsrs	r5, r5, #5
 8028a74:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8028a78:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8028a7c:	4310      	orrs	r0, r2
 8028a7e:	4328      	orrs	r0, r5
 8028a80:	f82b 0014 	strh.w	r0, [fp, r4, lsl #1]
 8028a84:	9b04      	ldr	r3, [sp, #16]
 8028a86:	3401      	adds	r4, #1
 8028a88:	449c      	add	ip, r3
 8028a8a:	9b05      	ldr	r3, [sp, #20]
 8028a8c:	449a      	add	sl, r3
 8028a8e:	e7a5      	b.n	80289dc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1b4c>
 8028a90:	9a03      	ldr	r2, [sp, #12]
 8028a92:	ea4f 412c 	mov.w	r1, ip, asr #16
 8028a96:	ea4f 402a 	mov.w	r0, sl, asr #16
 8028a9a:	b15a      	cbz	r2, 8028ab4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c24>
 8028a9c:	2900      	cmp	r1, #0
 8028a9e:	db12      	blt.n	8028ac6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c36>
 8028aa0:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8028aa4:	4291      	cmp	r1, r2
 8028aa6:	da0e      	bge.n	8028ac6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c36>
 8028aa8:	2800      	cmp	r0, #0
 8028aaa:	db0c      	blt.n	8028ac6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c36>
 8028aac:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 8028ab0:	4290      	cmp	r0, r2
 8028ab2:	da08      	bge.n	8028ac6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c36>
 8028ab4:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8028ab8:	fb00 1202 	mla	r2, r0, r2, r1
 8028abc:	9902      	ldr	r1, [sp, #8]
 8028abe:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8028ac2:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
 8028ac6:	9a04      	ldr	r2, [sp, #16]
 8028ac8:	3301      	adds	r3, #1
 8028aca:	4494      	add	ip, r2
 8028acc:	9a05      	ldr	r2, [sp, #20]
 8028ace:	4492      	add	sl, r2
 8028ad0:	e77c      	b.n	80289cc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1b3c>
 8028ad2:	4b19      	ldr	r3, [pc, #100]	; (8028b38 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca8>)
 8028ad4:	ea03 2112 	and.w	r1, r3, r2, lsr #8
 8028ad8:	0953      	lsrs	r3, r2, #5
 8028ada:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028ade:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028ae2:	430b      	orrs	r3, r1
 8028ae4:	4313      	orrs	r3, r2
 8028ae6:	802b      	strh	r3, [r5, #0]
 8028ae8:	f7fe bf69 	b.w	80279be <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xb2e>
 8028aec:	4a12      	ldr	r2, [pc, #72]	; (8028b38 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca8>)
 8028aee:	ea02 2113 	and.w	r1, r2, r3, lsr #8
 8028af2:	095a      	lsrs	r2, r3, #5
 8028af4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8028af8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028afc:	430a      	orrs	r2, r1
 8028afe:	431a      	orrs	r2, r3
 8028b00:	8022      	strh	r2, [r4, #0]
 8028b02:	f7fe bb76 	b.w	80271f2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x362>
 8028b06:	00c0      	lsls	r0, r0, #3
 8028b08:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8028b0c:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8028b10:	8038      	strh	r0, [r7, #0]
 8028b12:	f7fe bd24 	b.w	802755e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6ce>
 8028b16:	4b08      	ldr	r3, [pc, #32]	; (8028b38 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca8>)
 8028b18:	ea03 2211 	and.w	r2, r3, r1, lsr #8
 8028b1c:	094b      	lsrs	r3, r1, #5
 8028b1e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8028b22:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028b26:	4313      	orrs	r3, r2
 8028b28:	4319      	orrs	r1, r3
 8028b2a:	8039      	strh	r1, [r7, #0]
 8028b2c:	f7fe bff2 	b.w	8027b14 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc84>
 8028b30:	b019      	add	sp, #100	; 0x64
 8028b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028b36:	bf00      	nop
 8028b38:	fffff800 	.word	0xfffff800

08028b3c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8028b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b40:	b08d      	sub	sp, #52	; 0x34
 8028b42:	460f      	mov	r7, r1
 8028b44:	4616      	mov	r6, r2
 8028b46:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8028b4a:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8028b4e:	f1b9 0f00 	cmp.w	r9, #0
 8028b52:	d047      	beq.n	8028be4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa8>
 8028b54:	6810      	ldr	r0, [r2, #0]
 8028b56:	ad08      	add	r5, sp, #32
 8028b58:	6851      	ldr	r1, [r2, #4]
 8028b5a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8028d24 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 8028b5e:	c503      	stmia	r5!, {r0, r1}
 8028b60:	6818      	ldr	r0, [r3, #0]
 8028b62:	ad0a      	add	r5, sp, #40	; 0x28
 8028b64:	6859      	ldr	r1, [r3, #4]
 8028b66:	c503      	stmia	r5!, {r0, r1}
 8028b68:	a808      	add	r0, sp, #32
 8028b6a:	f7fb fc07 	bl	802437c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028b6e:	4631      	mov	r1, r6
 8028b70:	a80a      	add	r0, sp, #40	; 0x28
 8028b72:	f7fb fbeb 	bl	802434c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028b76:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8028b7a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8028b7e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8028b82:	f8d8 0000 	ldr.w	r0, [r8]
 8028b86:	fb16 2103 	smlabb	r1, r6, r3, r2
 8028b8a:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8028b8e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8028b92:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8028b96:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 8028b9a:	440a      	add	r2, r1
 8028b9c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8028ba0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8028ba4:	4413      	add	r3, r2
 8028ba6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8028baa:	6803      	ldr	r3, [r0, #0]
 8028bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028bae:	4798      	blx	r3
 8028bb0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028bb4:	d019      	beq.n	8028bea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8028bb6:	f010 0f04 	tst.w	r0, #4
 8028bba:	d01a      	beq.n	8028bf2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb6>
 8028bbc:	f8d8 0000 	ldr.w	r0, [r8]
 8028bc0:	b2bf      	uxth	r7, r7
 8028bc2:	b2ad      	uxth	r5, r5
 8028bc4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8028bc8:	6801      	ldr	r1, [r0, #0]
 8028bca:	9404      	str	r4, [sp, #16]
 8028bcc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8028bd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8028bd4:	9402      	str	r4, [sp, #8]
 8028bd6:	9701      	str	r7, [sp, #4]
 8028bd8:	9500      	str	r5, [sp, #0]
 8028bda:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8028bde:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8028be0:	4631      	mov	r1, r6
 8028be2:	47a0      	blx	r4
 8028be4:	b00d      	add	sp, #52	; 0x34
 8028be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028bea:	b914      	cbnz	r4, 8028bf2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb6>
 8028bec:	f010 0f01 	tst.w	r0, #1
 8028bf0:	e7e3      	b.n	8028bba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 8028bf2:	f8d8 0000 	ldr.w	r0, [r8]
 8028bf6:	6803      	ldr	r3, [r0, #0]
 8028bf8:	6a1b      	ldr	r3, [r3, #32]
 8028bfa:	4798      	blx	r3
 8028bfc:	4a48      	ldr	r2, [pc, #288]	; (8028d20 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>)
 8028bfe:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8028c02:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028c06:	8814      	ldrh	r4, [r2, #0]
 8028c08:	4692      	mov	sl, r2
 8028c0a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8028c0e:	fb01 3404 	mla	r4, r1, r4, r3
 8028c12:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8028c16:	d064      	beq.n	8028ce2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a6>
 8028c18:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8028c1c:	f1c9 0cff 	rsb	ip, r9, #255	; 0xff
 8028c20:	f04f 0a00 	mov.w	sl, #0
 8028c24:	9207      	str	r2, [sp, #28]
 8028c26:	005b      	lsls	r3, r3, #1
 8028c28:	fa1f fc8c 	uxth.w	ip, ip
 8028c2c:	9306      	str	r3, [sp, #24]
 8028c2e:	fa1f f389 	uxth.w	r3, r9
 8028c32:	45ba      	cmp	sl, r7
 8028c34:	da6e      	bge.n	8028d14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>
 8028c36:	46a3      	mov	fp, r4
 8028c38:	f04f 0900 	mov.w	r9, #0
 8028c3c:	45a9      	cmp	r9, r5
 8028c3e:	da40      	bge.n	8028cc2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x186>
 8028c40:	f8bb 1000 	ldrh.w	r1, [fp]
 8028c44:	f836 2019 	ldrh.w	r2, [r6, r9, lsl #1]
 8028c48:	f109 0901 	add.w	r9, r9, #1
 8028c4c:	1208      	asrs	r0, r1, #8
 8028c4e:	ea4f 2e22 	mov.w	lr, r2, asr #8
 8028c52:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028c56:	ea4f 08e1 	mov.w	r8, r1, asr #3
 8028c5a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8028c5e:	00c9      	lsls	r1, r1, #3
 8028c60:	fb10 f00c 	smulbb	r0, r0, ip
 8028c64:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8028c68:	b2c9      	uxtb	r1, r1
 8028c6a:	fb0e 0e03 	mla	lr, lr, r3, r0
 8028c6e:	10d0      	asrs	r0, r2, #3
 8028c70:	fb18 f80c 	smulbb	r8, r8, ip
 8028c74:	00d2      	lsls	r2, r2, #3
 8028c76:	fb11 f10c 	smulbb	r1, r1, ip
 8028c7a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028c7e:	b2d2      	uxtb	r2, r2
 8028c80:	fa1f fe8e 	uxth.w	lr, lr
 8028c84:	fb00 8003 	mla	r0, r0, r3, r8
 8028c88:	fb02 1203 	mla	r2, r2, r3, r1
 8028c8c:	b280      	uxth	r0, r0
 8028c8e:	f10e 0101 	add.w	r1, lr, #1
 8028c92:	b292      	uxth	r2, r2
 8028c94:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8028c98:	f100 0801 	add.w	r8, r0, #1
 8028c9c:	1c51      	adds	r1, r2, #1
 8028c9e:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 8028ca2:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8028ca6:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8028caa:	0940      	lsrs	r0, r0, #5
 8028cac:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8028cb0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028cb4:	ea4e 0e01 	orr.w	lr, lr, r1
 8028cb8:	ea4e 0e00 	orr.w	lr, lr, r0
 8028cbc:	f82b eb02 	strh.w	lr, [fp], #2
 8028cc0:	e7bc      	b.n	8028c3c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x100>
 8028cc2:	9a07      	ldr	r2, [sp, #28]
 8028cc4:	f10a 0a01 	add.w	sl, sl, #1
 8028cc8:	9906      	ldr	r1, [sp, #24]
 8028cca:	8812      	ldrh	r2, [r2, #0]
 8028ccc:	1b52      	subs	r2, r2, r5
 8028cce:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8028cd2:	4414      	add	r4, r2
 8028cd4:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8028cd8:	1b52      	subs	r2, r2, r5
 8028cda:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8028cde:	4416      	add	r6, r2
 8028ce0:	e7a7      	b.n	8028c32 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf6>
 8028ce2:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 8028ce6:	f04f 0900 	mov.w	r9, #0
 8028cea:	45b9      	cmp	r9, r7
 8028cec:	da12      	bge.n	8028d14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>
 8028cee:	f8d8 0000 	ldr.w	r0, [r8]
 8028cf2:	4632      	mov	r2, r6
 8028cf4:	4621      	mov	r1, r4
 8028cf6:	f109 0901 	add.w	r9, r9, #1
 8028cfa:	6803      	ldr	r3, [r0, #0]
 8028cfc:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8028cfe:	465b      	mov	r3, fp
 8028d00:	47a8      	blx	r5
 8028d02:	f8ba 3000 	ldrh.w	r3, [sl]
 8028d06:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8028d0a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8028d0e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8028d12:	e7ea      	b.n	8028cea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ae>
 8028d14:	4b03      	ldr	r3, [pc, #12]	; (8028d24 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>)
 8028d16:	6818      	ldr	r0, [r3, #0]
 8028d18:	6803      	ldr	r3, [r0, #0]
 8028d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028d1c:	4798      	blx	r3
 8028d1e:	e761      	b.n	8028be4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa8>
 8028d20:	2000cf70 	.word	0x2000cf70
 8028d24:	2000cf78 	.word	0x2000cf78

08028d28 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8028d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028d2c:	4615      	mov	r5, r2
 8028d2e:	b08b      	sub	sp, #44	; 0x2c
 8028d30:	461c      	mov	r4, r3
 8028d32:	b13b      	cbz	r3, 8028d44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8028d34:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8028d38:	b123      	cbz	r3, 8028d44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8028d3a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8028d3e:	2b00      	cmp	r3, #0
 8028d40:	f040 809d 	bne.w	8028e7e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x156>
 8028d44:	b00b      	add	sp, #44	; 0x2c
 8028d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028d4a:	f010 0f08 	tst.w	r0, #8
 8028d4e:	d010      	beq.n	8028d72 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x4a>
 8028d50:	6830      	ldr	r0, [r6, #0]
 8028d52:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8028d56:	6801      	ldr	r1, [r0, #0]
 8028d58:	9402      	str	r4, [sp, #8]
 8028d5a:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8028d5e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8028d62:	9401      	str	r4, [sp, #4]
 8028d64:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8028d68:	9400      	str	r4, [sp, #0]
 8028d6a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8028d6c:	4629      	mov	r1, r5
 8028d6e:	47a0      	blx	r4
 8028d70:	e7e8      	b.n	8028d44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8028d72:	6830      	ldr	r0, [r6, #0]
 8028d74:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8028d78:	6803      	ldr	r3, [r0, #0]
 8028d7a:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 8028d7e:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 8028d82:	6a1b      	ldr	r3, [r3, #32]
 8028d84:	4798      	blx	r3
 8028d86:	4a47      	ldr	r2, [pc, #284]	; (8028ea4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>)
 8028d88:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8028d8c:	2cff      	cmp	r4, #255	; 0xff
 8028d8e:	8816      	ldrh	r6, [r2, #0]
 8028d90:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8028d94:	fb06 1303 	mla	r3, r6, r3, r1
 8028d98:	4616      	mov	r6, r2
 8028d9a:	ea28 71e8 	bic.w	r1, r8, r8, asr #31
 8028d9e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8028da2:	d054      	beq.n	8028e4e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x126>
 8028da4:	122b      	asrs	r3, r5, #8
 8028da6:	f1c4 07ff 	rsb	r7, r4, #255	; 0xff
 8028daa:	b2a4      	uxth	r4, r4
 8028dac:	f3c5 06cc 	ubfx	r6, r5, #3, #13
 8028db0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8028db4:	0049      	lsls	r1, r1, #1
 8028db6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8028dba:	f04f 0e00 	mov.w	lr, #0
 8028dbe:	4363      	muls	r3, r4
 8028dc0:	b2bf      	uxth	r7, r7
 8028dc2:	4366      	muls	r6, r4
 8028dc4:	9305      	str	r3, [sp, #20]
 8028dc6:	00eb      	lsls	r3, r5, #3
 8028dc8:	9106      	str	r1, [sp, #24]
 8028dca:	b2db      	uxtb	r3, r3
 8028dcc:	9207      	str	r2, [sp, #28]
 8028dce:	4363      	muls	r3, r4
 8028dd0:	45ce      	cmp	lr, r9
 8028dd2:	da4e      	bge.n	8028e72 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 8028dd4:	4682      	mov	sl, r0
 8028dd6:	f04f 0c00 	mov.w	ip, #0
 8028dda:	45c4      	cmp	ip, r8
 8028ddc:	da2d      	bge.n	8028e3a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x112>
 8028dde:	f8ba 2000 	ldrh.w	r2, [sl]
 8028de2:	f10c 0c01 	add.w	ip, ip, #1
 8028de6:	9905      	ldr	r1, [sp, #20]
 8028de8:	1214      	asrs	r4, r2, #8
 8028dea:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8028dee:	fb14 f407 	smulbb	r4, r4, r7
 8028df2:	440c      	add	r4, r1
 8028df4:	10d1      	asrs	r1, r2, #3
 8028df6:	00d2      	lsls	r2, r2, #3
 8028df8:	b2a4      	uxth	r4, r4
 8028dfa:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028dfe:	b2d2      	uxtb	r2, r2
 8028e00:	fb11 f107 	smulbb	r1, r1, r7
 8028e04:	1c65      	adds	r5, r4, #1
 8028e06:	fb12 f207 	smulbb	r2, r2, r7
 8028e0a:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 8028e0e:	4431      	add	r1, r6
 8028e10:	441a      	add	r2, r3
 8028e12:	b289      	uxth	r1, r1
 8028e14:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8028e18:	b292      	uxth	r2, r2
 8028e1a:	1c55      	adds	r5, r2, #1
 8028e1c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8028e20:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8028e24:	4314      	orrs	r4, r2
 8028e26:	1c4a      	adds	r2, r1, #1
 8028e28:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8028e2c:	0949      	lsrs	r1, r1, #5
 8028e2e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028e32:	430c      	orrs	r4, r1
 8028e34:	f82a 4b02 	strh.w	r4, [sl], #2
 8028e38:	e7cf      	b.n	8028dda <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 8028e3a:	9a07      	ldr	r2, [sp, #28]
 8028e3c:	f10e 0e01 	add.w	lr, lr, #1
 8028e40:	9906      	ldr	r1, [sp, #24]
 8028e42:	8812      	ldrh	r2, [r2, #0]
 8028e44:	ebcb 0242 	rsb	r2, fp, r2, lsl #1
 8028e48:	440a      	add	r2, r1
 8028e4a:	4410      	add	r0, r2
 8028e4c:	e7c0      	b.n	8028dd0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xa8>
 8028e4e:	0049      	lsls	r1, r1, #1
 8028e50:	2200      	movs	r2, #0
 8028e52:	454a      	cmp	r2, r9
 8028e54:	da0d      	bge.n	8028e72 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 8028e56:	2300      	movs	r3, #0
 8028e58:	4543      	cmp	r3, r8
 8028e5a:	da03      	bge.n	8028e64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x13c>
 8028e5c:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 8028e60:	3301      	adds	r3, #1
 8028e62:	e7f9      	b.n	8028e58 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x130>
 8028e64:	8833      	ldrh	r3, [r6, #0]
 8028e66:	3201      	adds	r2, #1
 8028e68:	ebcb 0343 	rsb	r3, fp, r3, lsl #1
 8028e6c:	440b      	add	r3, r1
 8028e6e:	4418      	add	r0, r3
 8028e70:	e7ef      	b.n	8028e52 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x12a>
 8028e72:	4b0d      	ldr	r3, [pc, #52]	; (8028ea8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>)
 8028e74:	6818      	ldr	r0, [r3, #0]
 8028e76:	6803      	ldr	r3, [r0, #0]
 8028e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028e7a:	4798      	blx	r3
 8028e7c:	e762      	b.n	8028d44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8028e7e:	6808      	ldr	r0, [r1, #0]
 8028e80:	ab08      	add	r3, sp, #32
 8028e82:	6849      	ldr	r1, [r1, #4]
 8028e84:	4e08      	ldr	r6, [pc, #32]	; (8028ea8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>)
 8028e86:	c303      	stmia	r3!, {r0, r1}
 8028e88:	a808      	add	r0, sp, #32
 8028e8a:	f7fb fa77 	bl	802437c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028e8e:	6830      	ldr	r0, [r6, #0]
 8028e90:	6803      	ldr	r3, [r0, #0]
 8028e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028e94:	4798      	blx	r3
 8028e96:	2cff      	cmp	r4, #255	; 0xff
 8028e98:	f47f af57 	bne.w	8028d4a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x22>
 8028e9c:	f010 0f02 	tst.w	r0, #2
 8028ea0:	e755      	b.n	8028d4e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x26>
 8028ea2:	bf00      	nop
 8028ea4:	2000cf70 	.word	0x2000cf70
 8028ea8:	2000cf78 	.word	0x2000cf78

08028eac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8028eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028eb0:	4ea0      	ldr	r6, [pc, #640]	; (8029134 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8028eb2:	4690      	mov	r8, r2
 8028eb4:	b08f      	sub	sp, #60	; 0x3c
 8028eb6:	4605      	mov	r5, r0
 8028eb8:	6832      	ldr	r2, [r6, #0]
 8028eba:	4689      	mov	r9, r1
 8028ebc:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8028ec0:	2a02      	cmp	r2, #2
 8028ec2:	d106      	bne.n	8028ed2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8028ec4:	4b9c      	ldr	r3, [pc, #624]	; (8029138 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 8028ec6:	f240 21a2 	movw	r1, #674	; 0x2a2
 8028eca:	4a9c      	ldr	r2, [pc, #624]	; (802913c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 8028ecc:	489c      	ldr	r0, [pc, #624]	; (8029140 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 8028ece:	f002 f913 	bl	802b0f8 <__assert_func>
 8028ed2:	af0e      	add	r7, sp, #56	; 0x38
 8028ed4:	f827 3d24 	strh.w	r3, [r7, #-36]!
 8028ed8:	4638      	mov	r0, r7
 8028eda:	f7fd ff6b 	bl	8026db4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8028ede:	682b      	ldr	r3, [r5, #0]
 8028ee0:	4604      	mov	r4, r0
 8028ee2:	4628      	mov	r0, r5
 8028ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028ee6:	4798      	blx	r3
 8028ee8:	4284      	cmp	r4, r0
 8028eea:	d004      	beq.n	8028ef6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8028eec:	4b95      	ldr	r3, [pc, #596]	; (8029144 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 8028eee:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 8028ef2:	4a92      	ldr	r2, [pc, #584]	; (802913c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 8028ef4:	e7ea      	b.n	8028ecc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8028ef6:	4638      	mov	r0, r7
 8028ef8:	f7fd feda 	bl	8026cb0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8028efc:	4604      	mov	r4, r0
 8028efe:	b920      	cbnz	r0, 8028f0a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8028f00:	4b91      	ldr	r3, [pc, #580]	; (8029148 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 8028f02:	f240 21a6 	movw	r1, #678	; 0x2a6
 8028f06:	4a8d      	ldr	r2, [pc, #564]	; (802913c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 8028f08:	e7e0      	b.n	8028ecc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8028f0a:	f8d8 0000 	ldr.w	r0, [r8]
 8028f0e:	ab06      	add	r3, sp, #24
 8028f10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8028f14:	f9b8 a000 	ldrsh.w	sl, [r8]
 8028f18:	c303      	stmia	r3!, {r0, r1}
 8028f1a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8028f1e:	ab08      	add	r3, sp, #32
 8028f20:	f8d9 0000 	ldr.w	r0, [r9]
 8028f24:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8028f28:	c303      	stmia	r3!, {r0, r1}
 8028f2a:	4638      	mov	r0, r7
 8028f2c:	f7fd fdb8 	bl	8026aa0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8028f30:	4680      	mov	r8, r0
 8028f32:	4638      	mov	r0, r7
 8028f34:	4f85      	ldr	r7, [pc, #532]	; (802914c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 8028f36:	f7fd fded 	bl	8026b14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8028f3a:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8028f3e:	f10d 0a20 	add.w	sl, sp, #32
 8028f42:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8028f46:	a806      	add	r0, sp, #24
 8028f48:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8028f4c:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8028f50:	f7fb fa14 	bl	802437c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028f54:	4650      	mov	r0, sl
 8028f56:	f7fb fa11 	bl	802437c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028f5a:	a80a      	add	r0, sp, #40	; 0x28
 8028f5c:	f7fb fa0e 	bl	802437c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028f60:	4b7b      	ldr	r3, [pc, #492]	; (8029150 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a4>)
 8028f62:	f9b7 1000 	ldrsh.w	r1, [r7]
 8028f66:	4650      	mov	r0, sl
 8028f68:	f9b3 2000 	ldrsh.w	r2, [r3]
 8028f6c:	2300      	movs	r3, #0
 8028f6e:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
 8028f72:	a90c      	add	r1, sp, #48	; 0x30
 8028f74:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8028f78:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8028f7c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8028f80:	f7e9 fb0c 	bl	801259c <_ZN8touchgfx4RectaNERKS0_>
 8028f84:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8028f88:	f1bc 0f00 	cmp.w	ip, #0
 8028f8c:	d005      	beq.n	8028f9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 8028f8e:	f9bd e026 	ldrsh.w	lr, [sp, #38]	; 0x26
 8028f92:	f1be 0f00 	cmp.w	lr, #0
 8028f96:	f040 80c1 	bne.w	802911c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>
 8028f9a:	4620      	mov	r0, r4
 8028f9c:	b00f      	add	sp, #60	; 0x3c
 8028f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028fa2:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8028fa6:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8028faa:	429a      	cmp	r2, r3
 8028fac:	f2c0 80bd 	blt.w	802912a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27e>
 8028fb0:	4460      	add	r0, ip
 8028fb2:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 8028fb6:	4461      	add	r1, ip
 8028fb8:	b200      	sxth	r0, r0
 8028fba:	b209      	sxth	r1, r1
 8028fbc:	4288      	cmp	r0, r1
 8028fbe:	f300 80b4 	bgt.w	802912a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27e>
 8028fc2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8028fc6:	4472      	add	r2, lr
 8028fc8:	440b      	add	r3, r1
 8028fca:	b212      	sxth	r2, r2
 8028fcc:	b21b      	sxth	r3, r3
 8028fce:	429a      	cmp	r2, r3
 8028fd0:	f300 80ab 	bgt.w	802912a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27e>
 8028fd4:	682b      	ldr	r3, [r5, #0]
 8028fd6:	4628      	mov	r0, r5
 8028fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028fda:	4798      	blx	r3
 8028fdc:	4681      	mov	r9, r0
 8028fde:	6830      	ldr	r0, [r6, #0]
 8028fe0:	6803      	ldr	r3, [r0, #0]
 8028fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028fe4:	4798      	blx	r3
 8028fe6:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8028fea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8028fee:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8028ff2:	1a9b      	subs	r3, r3, r2
 8028ff4:	b29b      	uxth	r3, r3
 8028ff6:	b21d      	sxth	r5, r3
 8028ff8:	2d00      	cmp	r5, #0
 8028ffa:	dc09      	bgt.n	8029010 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8028ffc:	b135      	cbz	r5, 802900c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 8028ffe:	f8ad 2020 	strh.w	r2, [sp, #32]
 8029002:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8029006:	4413      	add	r3, r2
 8029008:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 802900c:	4625      	mov	r5, r4
 802900e:	e005      	b.n	802901c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x170>
 8029010:	ebab 0303 	sub.w	r3, fp, r3
 8029014:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8029018:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 802901c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8029020:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8029024:	1a5b      	subs	r3, r3, r1
 8029026:	b29b      	uxth	r3, r3
 8029028:	b21a      	sxth	r2, r3
 802902a:	2a00      	cmp	r2, #0
 802902c:	dd4c      	ble.n	80290c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x21c>
 802902e:	fb0b f202 	mul.w	r2, fp, r2
 8029032:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 8029036:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 802903a:	1ad3      	subs	r3, r2, r3
 802903c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8029040:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8029044:	2b00      	cmp	r3, #0
 8029046:	dda8      	ble.n	8028f9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 8029048:	f9bd e02e 	ldrsh.w	lr, [sp, #46]	; 0x2e
 802904c:	f1be 0f00 	cmp.w	lr, #0
 8029050:	dda3      	ble.n	8028f9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 8029052:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8029056:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802905a:	fb09 f801 	mul.w	r8, r9, r1
 802905e:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8029062:	4480      	add	r8, r0
 8029064:	8838      	ldrh	r0, [r7, #0]
 8029066:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 802906a:	1a82      	subs	r2, r0, r2
 802906c:	42bb      	cmp	r3, r7
 802906e:	bfa8      	it	ge
 8029070:	463b      	movge	r3, r7
 8029072:	f9bd 7026 	ldrsh.w	r7, [sp, #38]	; 0x26
 8029076:	4293      	cmp	r3, r2
 8029078:	bfa8      	it	ge
 802907a:	4613      	movge	r3, r2
 802907c:	4a34      	ldr	r2, [pc, #208]	; (8029150 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a4>)
 802907e:	4577      	cmp	r7, lr
 8029080:	8812      	ldrh	r2, [r2, #0]
 8029082:	bfa8      	it	ge
 8029084:	4677      	movge	r7, lr
 8029086:	1a51      	subs	r1, r2, r1
 8029088:	463a      	mov	r2, r7
 802908a:	428f      	cmp	r7, r1
 802908c:	bfa8      	it	ge
 802908e:	460a      	movge	r2, r1
 8029090:	4298      	cmp	r0, r3
 8029092:	9202      	str	r2, [sp, #8]
 8029094:	d12b      	bne.n	80290ee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 8029096:	4583      	cmp	fp, r0
 8029098:	d129      	bne.n	80290ee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 802909a:	6830      	ldr	r0, [r6, #0]
 802909c:	6803      	ldr	r3, [r0, #0]
 802909e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80290a0:	4798      	blx	r3
 80290a2:	07c3      	lsls	r3, r0, #31
 80290a4:	d519      	bpl.n	80290da <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22e>
 80290a6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80290aa:	6830      	ldr	r0, [r6, #0]
 80290ac:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 80290b0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80290b4:	6803      	ldr	r3, [r0, #0]
 80290b6:	f8cd b000 	str.w	fp, [sp]
 80290ba:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80290bc:	462b      	mov	r3, r5
 80290be:	e89a 0006 	ldmia.w	sl, {r1, r2}
 80290c2:	47a0      	blx	r4
 80290c4:	4604      	mov	r4, r0
 80290c6:	e768      	b.n	8028f9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 80290c8:	bf1f      	itttt	ne
 80290ca:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 80290ce:	f8ad 1022 	strhne.w	r1, [sp, #34]	; 0x22
 80290d2:	189b      	addne	r3, r3, r2
 80290d4:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 80290d8:	e7b2      	b.n	8029040 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x194>
 80290da:	6830      	ldr	r0, [r6, #0]
 80290dc:	4642      	mov	r2, r8
 80290de:	4629      	mov	r1, r5
 80290e0:	6803      	ldr	r3, [r0, #0]
 80290e2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80290e4:	9b02      	ldr	r3, [sp, #8]
 80290e6:	fb03 f309 	mul.w	r3, r3, r9
 80290ea:	47b0      	blx	r6
 80290ec:	e755      	b.n	8028f9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 80290ee:	005b      	lsls	r3, r3, #1
 80290f0:	f04f 0a00 	mov.w	sl, #0
 80290f4:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80290f8:	9303      	str	r3, [sp, #12]
 80290fa:	9b02      	ldr	r3, [sp, #8]
 80290fc:	459a      	cmp	sl, r3
 80290fe:	f6bf af4c 	bge.w	8028f9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 8029102:	6830      	ldr	r0, [r6, #0]
 8029104:	4642      	mov	r2, r8
 8029106:	4629      	mov	r1, r5
 8029108:	44c8      	add	r8, r9
 802910a:	6803      	ldr	r3, [r0, #0]
 802910c:	445d      	add	r5, fp
 802910e:	f10a 0a01 	add.w	sl, sl, #1
 8029112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029114:	461f      	mov	r7, r3
 8029116:	9b03      	ldr	r3, [sp, #12]
 8029118:	47b8      	blx	r7
 802911a:	e7ee      	b.n	80290fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x24e>
 802911c:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8029120:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8029124:	4288      	cmp	r0, r1
 8029126:	f6bf af3c 	bge.w	8028fa2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xf6>
 802912a:	4b0a      	ldr	r3, [pc, #40]	; (8029154 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a8>)
 802912c:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8029130:	4a02      	ldr	r2, [pc, #8]	; (802913c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 8029132:	e6cb      	b.n	8028ecc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8029134:	2000cf78 	.word	0x2000cf78
 8029138:	0802fd81 	.word	0x0802fd81
 802913c:	0803029c 	.word	0x0803029c
 8029140:	0802fe35 	.word	0x0802fe35
 8029144:	0802fe67 	.word	0x0802fe67
 8029148:	0802febc 	.word	0x0802febc
 802914c:	2000cf70 	.word	0x2000cf70
 8029150:	2000cf72 	.word	0x2000cf72
 8029154:	0802fefa 	.word	0x0802fefa

08029158 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8029158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802915c:	b08d      	sub	sp, #52	; 0x34
 802915e:	460c      	mov	r4, r1
 8029160:	4680      	mov	r8, r0
 8029162:	4699      	mov	r9, r3
 8029164:	6808      	ldr	r0, [r1, #0]
 8029166:	ab08      	add	r3, sp, #32
 8029168:	6849      	ldr	r1, [r1, #4]
 802916a:	c303      	stmia	r3!, {r0, r1}
 802916c:	6810      	ldr	r0, [r2, #0]
 802916e:	ab0a      	add	r3, sp, #40	; 0x28
 8029170:	6851      	ldr	r1, [r2, #4]
 8029172:	c303      	stmia	r3!, {r0, r1}
 8029174:	a808      	add	r0, sp, #32
 8029176:	f7fb f901 	bl	802437c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802917a:	4621      	mov	r1, r4
 802917c:	a80a      	add	r0, sp, #40	; 0x28
 802917e:	4c67      	ldr	r4, [pc, #412]	; (802931c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8029180:	f7fb f8e4 	bl	802434c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029184:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8029188:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 802918c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8029190:	6820      	ldr	r0, [r4, #0]
 8029192:	fb11 2103 	smlabb	r1, r1, r3, r2
 8029196:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 802919a:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 802919e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80291a2:	440a      	add	r2, r1
 80291a4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80291a8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80291ac:	4413      	add	r3, r2
 80291ae:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80291b2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80291b6:	9304      	str	r3, [sp, #16]
 80291b8:	6803      	ldr	r3, [r0, #0]
 80291ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80291bc:	4798      	blx	r3
 80291be:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80291c2:	d118      	bne.n	80291f6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80291c4:	f010 0f20 	tst.w	r0, #32
 80291c8:	6820      	ldr	r0, [r4, #0]
 80291ca:	d017      	beq.n	80291fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 80291cc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80291d0:	b2bf      	uxth	r7, r7
 80291d2:	6801      	ldr	r1, [r0, #0]
 80291d4:	9402      	str	r4, [sp, #8]
 80291d6:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 80291da:	f8cd 900c 	str.w	r9, [sp, #12]
 80291de:	9401      	str	r4, [sp, #4]
 80291e0:	9700      	str	r7, [sp, #0]
 80291e2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80291e6:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 80291e8:	4641      	mov	r1, r8
 80291ea:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80291ee:	47a0      	blx	r4
 80291f0:	b00d      	add	sp, #52	; 0x34
 80291f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80291f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80291fa:	e7e5      	b.n	80291c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x70>
 80291fc:	6803      	ldr	r3, [r0, #0]
 80291fe:	6a1b      	ldr	r3, [r3, #32]
 8029200:	4798      	blx	r3
 8029202:	4a47      	ldr	r2, [pc, #284]	; (8029320 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8029204:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8029208:	f04f 0c00 	mov.w	ip, #0
 802920c:	8813      	ldrh	r3, [r2, #0]
 802920e:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 8029212:	9207      	str	r2, [sp, #28]
 8029214:	fb04 1303 	mla	r3, r4, r3, r1
 8029218:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802921c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 8029220:	0099      	lsls	r1, r3, #2
 8029222:	005b      	lsls	r3, r3, #1
 8029224:	9106      	str	r1, [sp, #24]
 8029226:	9305      	str	r3, [sp, #20]
 8029228:	9b04      	ldr	r3, [sp, #16]
 802922a:	459c      	cmp	ip, r3
 802922c:	da70      	bge.n	8029310 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>
 802922e:	4601      	mov	r1, r0
 8029230:	2300      	movs	r3, #0
 8029232:	42bb      	cmp	r3, r7
 8029234:	da5b      	bge.n	80292ee <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x196>
 8029236:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
 802923a:	0e25      	lsrs	r5, r4, #24
 802923c:	d00f      	beq.n	802925e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 802923e:	2dff      	cmp	r5, #255	; 0xff
 8029240:	d110      	bne.n	8029264 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8029242:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8029246:	d10d      	bne.n	8029264 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8029248:	4a36      	ldr	r2, [pc, #216]	; (8029324 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1cc>)
 802924a:	ea02 2514 	and.w	r5, r2, r4, lsr #8
 802924e:	0962      	lsrs	r2, r4, #5
 8029250:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8029254:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029258:	432a      	orrs	r2, r5
 802925a:	4322      	orrs	r2, r4
 802925c:	800a      	strh	r2, [r1, #0]
 802925e:	3102      	adds	r1, #2
 8029260:	3301      	adds	r3, #1
 8029262:	e7e6      	b.n	8029232 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 8029264:	fb09 f505 	mul.w	r5, r9, r5
 8029268:	f8b1 e000 	ldrh.w	lr, [r1]
 802926c:	f3c4 2b07 	ubfx	fp, r4, #8, #8
 8029270:	1c6a      	adds	r2, r5, #1
 8029272:	ea4f 262e 	mov.w	r6, lr, asr #8
 8029276:	eb02 2225 	add.w	r2, r2, r5, asr #8
 802927a:	f3c4 4507 	ubfx	r5, r4, #16, #8
 802927e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8029282:	b2e4      	uxtb	r4, r4
 8029284:	1212      	asrs	r2, r2, #8
 8029286:	fa1f fa82 	uxth.w	sl, r2
 802928a:	43d2      	mvns	r2, r2
 802928c:	fb15 f50a 	smulbb	r5, r5, sl
 8029290:	b2d2      	uxtb	r2, r2
 8029292:	fb14 f40a 	smulbb	r4, r4, sl
 8029296:	fb06 5602 	mla	r6, r6, r2, r5
 802929a:	ea4f 05ee 	mov.w	r5, lr, asr #3
 802929e:	fb1b fb0a 	smulbb	fp, fp, sl
 80292a2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80292a6:	b2b6      	uxth	r6, r6
 80292a8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80292ac:	fa5f fe8e 	uxtb.w	lr, lr
 80292b0:	fb05 b502 	mla	r5, r5, r2, fp
 80292b4:	fb0e 4402 	mla	r4, lr, r2, r4
 80292b8:	1c72      	adds	r2, r6, #1
 80292ba:	b2ad      	uxth	r5, r5
 80292bc:	b2a4      	uxth	r4, r4
 80292be:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80292c2:	f104 0b01 	add.w	fp, r4, #1
 80292c6:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80292ca:	eb0b 2b14 	add.w	fp, fp, r4, lsr #8
 80292ce:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80292d2:	ea46 060b 	orr.w	r6, r6, fp
 80292d6:	f105 0b01 	add.w	fp, r5, #1
 80292da:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 80292de:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80292e2:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80292e6:	ea46 060b 	orr.w	r6, r6, fp
 80292ea:	800e      	strh	r6, [r1, #0]
 80292ec:	e7b7      	b.n	802925e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 80292ee:	9b07      	ldr	r3, [sp, #28]
 80292f0:	f10c 0c01 	add.w	ip, ip, #1
 80292f4:	9a05      	ldr	r2, [sp, #20]
 80292f6:	881b      	ldrh	r3, [r3, #0]
 80292f8:	1bdb      	subs	r3, r3, r7
 80292fa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80292fe:	9a06      	ldr	r2, [sp, #24]
 8029300:	4418      	add	r0, r3
 8029302:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8029306:	1bdb      	subs	r3, r3, r7
 8029308:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802930c:	4498      	add	r8, r3
 802930e:	e78b      	b.n	8029228 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 8029310:	4b02      	ldr	r3, [pc, #8]	; (802931c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8029312:	6818      	ldr	r0, [r3, #0]
 8029314:	6803      	ldr	r3, [r0, #0]
 8029316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029318:	4798      	blx	r3
 802931a:	e769      	b.n	80291f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 802931c:	2000cf78 	.word	0x2000cf78
 8029320:	2000cf70 	.word	0x2000cf70
 8029324:	fffff800 	.word	0xfffff800

08029328 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8029328:	b570      	push	{r4, r5, r6, lr}
 802932a:	9d04      	ldr	r5, [sp, #16]
 802932c:	460c      	mov	r4, r1
 802932e:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8029332:	4619      	mov	r1, r3
 8029334:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8029338:	2a0b      	cmp	r2, #11
 802933a:	d81f      	bhi.n	802937c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x54>
 802933c:	e8df f002 	tbb	[pc, r2]
 8029340:	17111706 	.word	0x17111706
 8029344:	17171717 	.word	0x17171717
 8029348:	17171717 	.word	0x17171717
 802934c:	6802      	ldr	r2, [r0, #0]
 802934e:	9304      	str	r3, [sp, #16]
 8029350:	462b      	mov	r3, r5
 8029352:	9605      	str	r6, [sp, #20]
 8029354:	6916      	ldr	r6, [r2, #16]
 8029356:	460a      	mov	r2, r1
 8029358:	4621      	mov	r1, r4
 802935a:	46b4      	mov	ip, r6
 802935c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8029360:	4760      	bx	ip
 8029362:	462a      	mov	r2, r5
 8029364:	4620      	mov	r0, r4
 8029366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802936a:	f7ff bef5 	b.w	8029158 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802936e:	4b04      	ldr	r3, [pc, #16]	; (8029380 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 8029370:	f240 219b 	movw	r1, #667	; 0x29b
 8029374:	4a03      	ldr	r2, [pc, #12]	; (8029384 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 8029376:	4804      	ldr	r0, [pc, #16]	; (8029388 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 8029378:	f001 febe 	bl	802b0f8 <__assert_func>
 802937c:	bd70      	pop	{r4, r5, r6, pc}
 802937e:	bf00      	nop
 8029380:	0802ff49 	.word	0x0802ff49
 8029384:	08030322 	.word	0x08030322
 8029388:	0802fe35 	.word	0x0802fe35

0802938c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 802938c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029390:	b095      	sub	sp, #84	; 0x54
 8029392:	4617      	mov	r7, r2
 8029394:	880d      	ldrh	r5, [r1, #0]
 8029396:	4606      	mov	r6, r0
 8029398:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 802939c:	4688      	mov	r8, r1
 802939e:	920b      	str	r2, [sp, #44]	; 0x2c
 80293a0:	b12d      	cbz	r5, 80293ae <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 80293a2:	4b75      	ldr	r3, [pc, #468]	; (8029578 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>)
 80293a4:	21cc      	movs	r1, #204	; 0xcc
 80293a6:	4a75      	ldr	r2, [pc, #468]	; (802957c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1f0>)
 80293a8:	4875      	ldr	r0, [pc, #468]	; (8029580 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1f4>)
 80293aa:	f001 fea5 	bl	802b0f8 <__assert_func>
 80293ae:	6838      	ldr	r0, [r7, #0]
 80293b0:	ac10      	add	r4, sp, #64	; 0x40
 80293b2:	6879      	ldr	r1, [r7, #4]
 80293b4:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8029588 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1fc>
 80293b8:	c403      	stmia	r4!, {r0, r1}
 80293ba:	6818      	ldr	r0, [r3, #0]
 80293bc:	ac12      	add	r4, sp, #72	; 0x48
 80293be:	6859      	ldr	r1, [r3, #4]
 80293c0:	c403      	stmia	r4!, {r0, r1}
 80293c2:	a810      	add	r0, sp, #64	; 0x40
 80293c4:	4c6f      	ldr	r4, [pc, #444]	; (8029584 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 80293c6:	f7fa ffd9 	bl	802437c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80293ca:	4639      	mov	r1, r7
 80293cc:	a812      	add	r0, sp, #72	; 0x48
 80293ce:	f7fa ffbd 	bl	802434c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80293d2:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 80293d6:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 80293da:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 80293de:	f8da 0000 	ldr.w	r0, [sl]
 80293e2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80293e6:	f9bd 704c 	ldrsh.w	r7, [sp, #76]	; 0x4c
 80293ea:	440e      	add	r6, r1
 80293ec:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80293f0:	440a      	add	r2, r1
 80293f2:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 80293f6:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80293fa:	4413      	add	r3, r2
 80293fc:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8029400:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8029404:	930c      	str	r3, [sp, #48]	; 0x30
 8029406:	6803      	ldr	r3, [r0, #0]
 8029408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802940c:	4798      	blx	r3
 802940e:	2801      	cmp	r0, #1
 8029410:	d11d      	bne.n	802944e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc2>
 8029412:	220b      	movs	r2, #11
 8029414:	9508      	str	r5, [sp, #32]
 8029416:	b2bf      	uxth	r7, r7
 8029418:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 802941c:	9207      	str	r2, [sp, #28]
 802941e:	4631      	mov	r1, r6
 8029420:	8822      	ldrh	r2, [r4, #0]
 8029422:	9005      	str	r0, [sp, #20]
 8029424:	9206      	str	r2, [sp, #24]
 8029426:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029428:	9701      	str	r7, [sp, #4]
 802942a:	9204      	str	r2, [sp, #16]
 802942c:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8029430:	9203      	str	r2, [sp, #12]
 8029432:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8029436:	9202      	str	r2, [sp, #8]
 8029438:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 802943c:	9200      	str	r2, [sp, #0]
 802943e:	4642      	mov	r2, r8
 8029440:	f8da 0000 	ldr.w	r0, [sl]
 8029444:	f7f8 fff8 	bl	8022438 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8029448:	b015      	add	sp, #84	; 0x54
 802944a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802944e:	f8da 0000 	ldr.w	r0, [sl]
 8029452:	46a9      	mov	r9, r5
 8029454:	6803      	ldr	r3, [r0, #0]
 8029456:	6a1b      	ldr	r3, [r3, #32]
 8029458:	4798      	blx	r3
 802945a:	8823      	ldrh	r3, [r4, #0]
 802945c:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 8029460:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8029464:	940f      	str	r4, [sp, #60]	; 0x3c
 8029466:	fb01 2303 	mla	r3, r1, r3, r2
 802946a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802946e:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 8029472:	930d      	str	r3, [sp, #52]	; 0x34
 8029474:	005b      	lsls	r3, r3, #1
 8029476:	930e      	str	r3, [sp, #56]	; 0x38
 8029478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802947a:	4599      	cmp	r9, r3
 802947c:	da76      	bge.n	802956c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>
 802947e:	46b4      	mov	ip, r6
 8029480:	4686      	mov	lr, r0
 8029482:	ebac 0306 	sub.w	r3, ip, r6
 8029486:	429f      	cmp	r7, r3
 8029488:	dd60      	ble.n	802954c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>
 802948a:	2204      	movs	r2, #4
 802948c:	f81c 3b01 	ldrb.w	r3, [ip], #1
 8029490:	2104      	movs	r1, #4
 8029492:	fb12 1303 	smlabb	r3, r2, r3, r1
 8029496:	f858 2003 	ldr.w	r2, [r8, r3]
 802949a:	0e14      	lsrs	r4, r2, #24
 802949c:	d011      	beq.n	80294c2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x136>
 802949e:	2cff      	cmp	r4, #255	; 0xff
 80294a0:	d112      	bne.n	80294c8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 80294a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80294a4:	2bff      	cmp	r3, #255	; 0xff
 80294a6:	d10f      	bne.n	80294c8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 80294a8:	f6a3 03ff 	subw	r3, r3, #2303	; 0x8ff
 80294ac:	ea03 2112 	and.w	r1, r3, r2, lsr #8
 80294b0:	0953      	lsrs	r3, r2, #5
 80294b2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80294b6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80294ba:	430b      	orrs	r3, r1
 80294bc:	4313      	orrs	r3, r2
 80294be:	f8ae 3000 	strh.w	r3, [lr]
 80294c2:	f10e 0e02 	add.w	lr, lr, #2
 80294c6:	e7dc      	b.n	8029482 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf6>
 80294c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80294ca:	f3c2 2b07 	ubfx	fp, r2, #8, #8
 80294ce:	f8be 1000 	ldrh.w	r1, [lr]
 80294d2:	435c      	muls	r4, r3
 80294d4:	120d      	asrs	r5, r1, #8
 80294d6:	1c63      	adds	r3, r4, #1
 80294d8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80294dc:	eb03 2324 	add.w	r3, r3, r4, asr #8
 80294e0:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80294e4:	b2d2      	uxtb	r2, r2
 80294e6:	121b      	asrs	r3, r3, #8
 80294e8:	fa1f fa83 	uxth.w	sl, r3
 80294ec:	43db      	mvns	r3, r3
 80294ee:	fb14 f40a 	smulbb	r4, r4, sl
 80294f2:	b2db      	uxtb	r3, r3
 80294f4:	fb12 f20a 	smulbb	r2, r2, sl
 80294f8:	fb05 4503 	mla	r5, r5, r3, r4
 80294fc:	10cc      	asrs	r4, r1, #3
 80294fe:	fb1b fb0a 	smulbb	fp, fp, sl
 8029502:	00c9      	lsls	r1, r1, #3
 8029504:	b2ad      	uxth	r5, r5
 8029506:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802950a:	b2c9      	uxtb	r1, r1
 802950c:	fb04 b403 	mla	r4, r4, r3, fp
 8029510:	fb01 2203 	mla	r2, r1, r3, r2
 8029514:	1c6b      	adds	r3, r5, #1
 8029516:	b2a4      	uxth	r4, r4
 8029518:	b292      	uxth	r2, r2
 802951a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802951e:	f102 0b01 	add.w	fp, r2, #1
 8029522:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8029526:	eb0b 2b12 	add.w	fp, fp, r2, lsr #8
 802952a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802952e:	ea45 050b 	orr.w	r5, r5, fp
 8029532:	f104 0b01 	add.w	fp, r4, #1
 8029536:	eb0b 2b14 	add.w	fp, fp, r4, lsr #8
 802953a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 802953e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8029542:	ea45 050b 	orr.w	r5, r5, fp
 8029546:	f8ae 5000 	strh.w	r5, [lr]
 802954a:	e7ba      	b.n	80294c2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x136>
 802954c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802954e:	f109 0901 	add.w	r9, r9, #1
 8029552:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029554:	881b      	ldrh	r3, [r3, #0]
 8029556:	1bdb      	subs	r3, r3, r7
 8029558:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802955c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802955e:	4418      	add	r0, r3
 8029560:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8029564:	1bdb      	subs	r3, r3, r7
 8029566:	4413      	add	r3, r2
 8029568:	441e      	add	r6, r3
 802956a:	e785      	b.n	8029478 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 802956c:	4b06      	ldr	r3, [pc, #24]	; (8029588 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1fc>)
 802956e:	6818      	ldr	r0, [r3, #0]
 8029570:	6803      	ldr	r3, [r0, #0]
 8029572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029574:	4798      	blx	r3
 8029576:	e767      	b.n	8029448 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbc>
 8029578:	0802fd31 	.word	0x0802fd31
 802957c:	080301d6 	.word	0x080301d6
 8029580:	0802fe35 	.word	0x0802fe35
 8029584:	2000cf70 	.word	0x2000cf70
 8029588:	2000cf78 	.word	0x2000cf78

0802958c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 802958c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029590:	4614      	mov	r4, r2
 8029592:	880a      	ldrh	r2, [r1, #0]
 8029594:	b093      	sub	sp, #76	; 0x4c
 8029596:	4606      	mov	r6, r0
 8029598:	2a02      	cmp	r2, #2
 802959a:	4689      	mov	r9, r1
 802959c:	f89d 7070 	ldrb.w	r7, [sp, #112]	; 0x70
 80295a0:	d006      	beq.n	80295b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 80295a2:	4b7a      	ldr	r3, [pc, #488]	; (802978c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 80295a4:	f240 1127 	movw	r1, #295	; 0x127
 80295a8:	4a79      	ldr	r2, [pc, #484]	; (8029790 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 80295aa:	487a      	ldr	r0, [pc, #488]	; (8029794 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x208>)
 80295ac:	f001 fda4 	bl	802b0f8 <__assert_func>
 80295b0:	2f00      	cmp	r7, #0
 80295b2:	d04b      	beq.n	802964c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 80295b4:	6820      	ldr	r0, [r4, #0]
 80295b6:	ad0e      	add	r5, sp, #56	; 0x38
 80295b8:	6861      	ldr	r1, [r4, #4]
 80295ba:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 802979c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>
 80295be:	c503      	stmia	r5!, {r0, r1}
 80295c0:	6818      	ldr	r0, [r3, #0]
 80295c2:	ad10      	add	r5, sp, #64	; 0x40
 80295c4:	6859      	ldr	r1, [r3, #4]
 80295c6:	c503      	stmia	r5!, {r0, r1}
 80295c8:	a80e      	add	r0, sp, #56	; 0x38
 80295ca:	f7fa fed7 	bl	802437c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80295ce:	4621      	mov	r1, r4
 80295d0:	a810      	add	r0, sp, #64	; 0x40
 80295d2:	f7fa febb 	bl	802434c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80295d6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80295da:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80295de:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80295e2:	f8da 0000 	ldr.w	r0, [sl]
 80295e6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80295ea:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 80295ee:	f9bd 8046 	ldrsh.w	r8, [sp, #70]	; 0x46
 80295f2:	1874      	adds	r4, r6, r1
 80295f4:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80295f8:	4e67      	ldr	r6, [pc, #412]	; (8029798 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x20c>)
 80295fa:	440a      	add	r2, r1
 80295fc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8029600:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8029604:	4413      	add	r3, r2
 8029606:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802960a:	6803      	ldr	r3, [r0, #0]
 802960c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8029610:	4798      	blx	r3
 8029612:	2801      	cmp	r0, #1
 8029614:	d11d      	bne.n	8029652 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 8029616:	2200      	movs	r2, #0
 8029618:	210b      	movs	r1, #11
 802961a:	b2ad      	uxth	r5, r5
 802961c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8029620:	9208      	str	r2, [sp, #32]
 8029622:	9107      	str	r1, [sp, #28]
 8029624:	8831      	ldrh	r1, [r6, #0]
 8029626:	9205      	str	r2, [sp, #20]
 8029628:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 802962c:	9106      	str	r1, [sp, #24]
 802962e:	4621      	mov	r1, r4
 8029630:	9203      	str	r2, [sp, #12]
 8029632:	fa1f f288 	uxth.w	r2, r8
 8029636:	9704      	str	r7, [sp, #16]
 8029638:	9202      	str	r2, [sp, #8]
 802963a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 802963e:	9501      	str	r5, [sp, #4]
 8029640:	9200      	str	r2, [sp, #0]
 8029642:	464a      	mov	r2, r9
 8029644:	f8da 0000 	ldr.w	r0, [sl]
 8029648:	f7f8 fef6 	bl	8022438 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802964c:	b013      	add	sp, #76	; 0x4c
 802964e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029652:	f8da 0000 	ldr.w	r0, [sl]
 8029656:	6803      	ldr	r3, [r0, #0]
 8029658:	6a1b      	ldr	r3, [r3, #32]
 802965a:	4798      	blx	r3
 802965c:	8833      	ldrh	r3, [r6, #0]
 802965e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8029662:	2fff      	cmp	r7, #255	; 0xff
 8029664:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8029668:	fb01 2303 	mla	r3, r1, r3, r2
 802966c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8029670:	f109 0304 	add.w	r3, r9, #4
 8029674:	930a      	str	r3, [sp, #40]	; 0x28
 8029676:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 802967a:	d062      	beq.n	8029742 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 802967c:	b21b      	sxth	r3, r3
 802967e:	f1c7 0eff 	rsb	lr, r7, #255	; 0xff
 8029682:	f04f 0900 	mov.w	r9, #0
 8029686:	b2ba      	uxth	r2, r7
 8029688:	930b      	str	r3, [sp, #44]	; 0x2c
 802968a:	fa1f fe8e 	uxth.w	lr, lr
 802968e:	005b      	lsls	r3, r3, #1
 8029690:	960d      	str	r6, [sp, #52]	; 0x34
 8029692:	930c      	str	r3, [sp, #48]	; 0x30
 8029694:	45c1      	cmp	r9, r8
 8029696:	da72      	bge.n	802977e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 8029698:	46a3      	mov	fp, r4
 802969a:	4682      	mov	sl, r0
 802969c:	ebab 0304 	sub.w	r3, fp, r4
 80296a0:	429d      	cmp	r5, r3
 80296a2:	dd3e      	ble.n	8029722 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x196>
 80296a4:	f8ba 1000 	ldrh.w	r1, [sl]
 80296a8:	f81b 3b01 	ldrb.w	r3, [fp], #1
 80296ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80296ae:	ea4f 0ce1 	mov.w	ip, r1, asr #3
 80296b2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80296b6:	120e      	asrs	r6, r1, #8
 80296b8:	00c9      	lsls	r1, r1, #3
 80296ba:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80296be:	121f      	asrs	r7, r3, #8
 80296c0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80296c4:	fb1c fc0e 	smulbb	ip, ip, lr
 80296c8:	b2c9      	uxtb	r1, r1
 80296ca:	fb16 f60e 	smulbb	r6, r6, lr
 80296ce:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80296d2:	fb11 f10e 	smulbb	r1, r1, lr
 80296d6:	fb07 6702 	mla	r7, r7, r2, r6
 80296da:	10de      	asrs	r6, r3, #3
 80296dc:	00db      	lsls	r3, r3, #3
 80296de:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80296e2:	b2bf      	uxth	r7, r7
 80296e4:	b2db      	uxtb	r3, r3
 80296e6:	fb06 c602 	mla	r6, r6, r2, ip
 80296ea:	fb03 1302 	mla	r3, r3, r2, r1
 80296ee:	1c79      	adds	r1, r7, #1
 80296f0:	b2b6      	uxth	r6, r6
 80296f2:	b29b      	uxth	r3, r3
 80296f4:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80296f8:	f106 0c01 	add.w	ip, r6, #1
 80296fc:	1c59      	adds	r1, r3, #1
 80296fe:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 8029702:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8029706:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802970a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802970e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8029712:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8029716:	430f      	orrs	r7, r1
 8029718:	ea47 070c 	orr.w	r7, r7, ip
 802971c:	f82a 7b02 	strh.w	r7, [sl], #2
 8029720:	e7bc      	b.n	802969c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x110>
 8029722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029724:	f109 0901 	add.w	r9, r9, #1
 8029728:	990c      	ldr	r1, [sp, #48]	; 0x30
 802972a:	881b      	ldrh	r3, [r3, #0]
 802972c:	1b5b      	subs	r3, r3, r5
 802972e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8029732:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8029734:	4418      	add	r0, r3
 8029736:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 802973a:	1b5b      	subs	r3, r3, r5
 802973c:	440b      	add	r3, r1
 802973e:	441c      	add	r4, r3
 8029740:	e7a8      	b.n	8029694 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x108>
 8029742:	b21b      	sxth	r3, r3
 8029744:	2100      	movs	r1, #0
 8029746:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 802974a:	4541      	cmp	r1, r8
 802974c:	da17      	bge.n	802977e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 802974e:	2200      	movs	r2, #0
 8029750:	42aa      	cmp	r2, r5
 8029752:	da08      	bge.n	8029766 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1da>
 8029754:	f814 e002 	ldrb.w	lr, [r4, r2]
 8029758:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802975a:	f837 e01e 	ldrh.w	lr, [r7, lr, lsl #1]
 802975e:	f820 e012 	strh.w	lr, [r0, r2, lsl #1]
 8029762:	3201      	adds	r2, #1
 8029764:	e7f4      	b.n	8029750 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c4>
 8029766:	8832      	ldrh	r2, [r6, #0]
 8029768:	3101      	adds	r1, #1
 802976a:	1b52      	subs	r2, r2, r5
 802976c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8029770:	4410      	add	r0, r2
 8029772:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8029776:	1b52      	subs	r2, r2, r5
 8029778:	441a      	add	r2, r3
 802977a:	4414      	add	r4, r2
 802977c:	e7e5      	b.n	802974a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 802977e:	4b07      	ldr	r3, [pc, #28]	; (802979c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>)
 8029780:	6818      	ldr	r0, [r3, #0]
 8029782:	6803      	ldr	r3, [r0, #0]
 8029784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029786:	4798      	blx	r3
 8029788:	e760      	b.n	802964c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 802978a:	bf00      	nop
 802978c:	0802fbef 	.word	0x0802fbef
 8029790:	08030040 	.word	0x08030040
 8029794:	0802fe35 	.word	0x0802fe35
 8029798:	2000cf70 	.word	0x2000cf70
 802979c:	2000cf78 	.word	0x2000cf78

080297a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80297a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80297a4:	4615      	mov	r5, r2
 80297a6:	880a      	ldrh	r2, [r1, #0]
 80297a8:	b095      	sub	sp, #84	; 0x54
 80297aa:	4606      	mov	r6, r0
 80297ac:	2a01      	cmp	r2, #1
 80297ae:	460f      	mov	r7, r1
 80297b0:	f89d 8078 	ldrb.w	r8, [sp, #120]	; 0x78
 80297b4:	d006      	beq.n	80297c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 80297b6:	4b78      	ldr	r3, [pc, #480]	; (8029998 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 80297b8:	f44f 71c1 	mov.w	r1, #386	; 0x182
 80297bc:	4a77      	ldr	r2, [pc, #476]	; (802999c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fc>)
 80297be:	4878      	ldr	r0, [pc, #480]	; (80299a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x200>)
 80297c0:	f001 fc9a 	bl	802b0f8 <__assert_func>
 80297c4:	f1b8 0f00 	cmp.w	r8, #0
 80297c8:	d04d      	beq.n	8029866 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 80297ca:	6828      	ldr	r0, [r5, #0]
 80297cc:	ac10      	add	r4, sp, #64	; 0x40
 80297ce:	6869      	ldr	r1, [r5, #4]
 80297d0:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 80299a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>
 80297d4:	c403      	stmia	r4!, {r0, r1}
 80297d6:	6818      	ldr	r0, [r3, #0]
 80297d8:	ac12      	add	r4, sp, #72	; 0x48
 80297da:	6859      	ldr	r1, [r3, #4]
 80297dc:	c403      	stmia	r4!, {r0, r1}
 80297de:	a810      	add	r0, sp, #64	; 0x40
 80297e0:	4c70      	ldr	r4, [pc, #448]	; (80299a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x204>)
 80297e2:	f7fa fdcb 	bl	802437c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80297e6:	4629      	mov	r1, r5
 80297e8:	a812      	add	r0, sp, #72	; 0x48
 80297ea:	f7fa fdaf 	bl	802434c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80297ee:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 80297f2:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 80297f6:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 80297fa:	f8d9 0000 	ldr.w	r0, [r9]
 80297fe:	fb11 2103 	smlabb	r1, r1, r3, r2
 8029802:	1875      	adds	r5, r6, r1
 8029804:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8029808:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	; 0x4c
 802980c:	440a      	add	r2, r1
 802980e:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8029812:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8029816:	4413      	add	r3, r2
 8029818:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 802981c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8029820:	930c      	str	r3, [sp, #48]	; 0x30
 8029822:	6803      	ldr	r3, [r0, #0]
 8029824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8029828:	4798      	blx	r3
 802982a:	2801      	cmp	r0, #1
 802982c:	d11e      	bne.n	802986c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 802982e:	2200      	movs	r2, #0
 8029830:	b2b6      	uxth	r6, r6
 8029832:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8029836:	4629      	mov	r1, r5
 8029838:	9208      	str	r2, [sp, #32]
 802983a:	220b      	movs	r2, #11
 802983c:	9207      	str	r2, [sp, #28]
 802983e:	8822      	ldrh	r2, [r4, #0]
 8029840:	9005      	str	r0, [sp, #20]
 8029842:	9206      	str	r2, [sp, #24]
 8029844:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8029848:	f8cd 8010 	str.w	r8, [sp, #16]
 802984c:	9203      	str	r2, [sp, #12]
 802984e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8029852:	9601      	str	r6, [sp, #4]
 8029854:	9202      	str	r2, [sp, #8]
 8029856:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 802985a:	9200      	str	r2, [sp, #0]
 802985c:	463a      	mov	r2, r7
 802985e:	f8d9 0000 	ldr.w	r0, [r9]
 8029862:	f7f8 fde9 	bl	8022438 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8029866:	b015      	add	sp, #84	; 0x54
 8029868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802986c:	f8d9 0000 	ldr.w	r0, [r9]
 8029870:	f04f 0a00 	mov.w	sl, #0
 8029874:	6803      	ldr	r3, [r0, #0]
 8029876:	6a1b      	ldr	r3, [r3, #32]
 8029878:	4798      	blx	r3
 802987a:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 802987e:	8823      	ldrh	r3, [r4, #0]
 8029880:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8029884:	940f      	str	r4, [sp, #60]	; 0x3c
 8029886:	fb01 2303 	mla	r3, r1, r3, r2
 802988a:	ea6f 0108 	mvn.w	r1, r8
 802988e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8029892:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8029896:	b2c9      	uxtb	r1, r1
 8029898:	930d      	str	r3, [sp, #52]	; 0x34
 802989a:	005b      	lsls	r3, r3, #1
 802989c:	930e      	str	r3, [sp, #56]	; 0x38
 802989e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80298a0:	459a      	cmp	sl, r3
 80298a2:	da73      	bge.n	802998c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ec>
 80298a4:	4686      	mov	lr, r0
 80298a6:	fa1f fb88 	uxth.w	fp, r8
 80298aa:	950b      	str	r5, [sp, #44]	; 0x2c
 80298ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80298ae:	1b5b      	subs	r3, r3, r5
 80298b0:	429e      	cmp	r6, r3
 80298b2:	dd5b      	ble.n	802996c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 80298b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80298b6:	2204      	movs	r2, #4
 80298b8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80298bc:	f813 cb01 	ldrb.w	ip, [r3], #1
 80298c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80298c2:	f04f 0303 	mov.w	r3, #3
 80298c6:	fb13 2c0c 	smlabb	ip, r3, ip, r2
 80298ca:	eb07 090c 	add.w	r9, r7, ip
 80298ce:	d114      	bne.n	80298fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x15a>
 80298d0:	f899 3002 	ldrb.w	r3, [r9, #2]
 80298d4:	f6a2 0204 	subw	r2, r2, #2052	; 0x804
 80298d8:	ea02 2303 	and.w	r3, r2, r3, lsl #8
 80298dc:	f899 2001 	ldrb.w	r2, [r9, #1]
 80298e0:	00d2      	lsls	r2, r2, #3
 80298e2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80298e6:	4313      	orrs	r3, r2
 80298e8:	f817 200c 	ldrb.w	r2, [r7, ip]
 80298ec:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 80298f0:	f8ae 3000 	strh.w	r3, [lr]
 80298f4:	f10e 0e02 	add.w	lr, lr, #2
 80298f8:	e7d8      	b.n	80298ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 80298fa:	f8be 3000 	ldrh.w	r3, [lr]
 80298fe:	f899 2002 	ldrb.w	r2, [r9, #2]
 8029902:	121c      	asrs	r4, r3, #8
 8029904:	f899 9001 	ldrb.w	r9, [r9, #1]
 8029908:	fb12 f20b 	smulbb	r2, r2, fp
 802990c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029910:	fb19 f90b 	smulbb	r9, r9, fp
 8029914:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8029918:	fb04 2401 	mla	r4, r4, r1, r2
 802991c:	10da      	asrs	r2, r3, #3
 802991e:	00db      	lsls	r3, r3, #3
 8029920:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029924:	b2a4      	uxth	r4, r4
 8029926:	b2db      	uxtb	r3, r3
 8029928:	fb02 9201 	mla	r2, r2, r1, r9
 802992c:	fb13 f301 	smulbb	r3, r3, r1
 8029930:	b292      	uxth	r2, r2
 8029932:	fb0c 3c0b 	mla	ip, ip, fp, r3
 8029936:	1c63      	adds	r3, r4, #1
 8029938:	f102 0901 	add.w	r9, r2, #1
 802993c:	fa1f fc8c 	uxth.w	ip, ip
 8029940:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8029944:	f10c 0301 	add.w	r3, ip, #1
 8029948:	eb09 2912 	add.w	r9, r9, r2, lsr #8
 802994c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8029950:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8029954:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8029958:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802995c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8029960:	431c      	orrs	r4, r3
 8029962:	ea44 0409 	orr.w	r4, r4, r9
 8029966:	f8ae 4000 	strh.w	r4, [lr]
 802996a:	e7c3      	b.n	80298f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x154>
 802996c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802996e:	f10a 0a01 	add.w	sl, sl, #1
 8029972:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029974:	881b      	ldrh	r3, [r3, #0]
 8029976:	1b9b      	subs	r3, r3, r6
 8029978:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802997c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802997e:	4418      	add	r0, r3
 8029980:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8029984:	1b9b      	subs	r3, r3, r6
 8029986:	4413      	add	r3, r2
 8029988:	441d      	add	r5, r3
 802998a:	e788      	b.n	802989e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 802998c:	4b06      	ldr	r3, [pc, #24]	; (80299a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 802998e:	6818      	ldr	r0, [r3, #0]
 8029990:	6803      	ldr	r3, [r0, #0]
 8029992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029994:	4798      	blx	r3
 8029996:	e766      	b.n	8029866 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 8029998:	0802fc3d 	.word	0x0802fc3d
 802999c:	080300c9 	.word	0x080300c9
 80299a0:	0802fe35 	.word	0x0802fe35
 80299a4:	2000cf70 	.word	0x2000cf70
 80299a8:	2000cf78 	.word	0x2000cf78

080299ac <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80299ac:	b430      	push	{r4, r5}
 80299ae:	780d      	ldrb	r5, [r1, #0]
 80299b0:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80299b4:	2d01      	cmp	r5, #1
 80299b6:	d00a      	beq.n	80299ce <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 80299b8:	d305      	bcc.n	80299c6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 80299ba:	2d02      	cmp	r5, #2
 80299bc:	d10b      	bne.n	80299d6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 80299be:	9402      	str	r4, [sp, #8]
 80299c0:	bc30      	pop	{r4, r5}
 80299c2:	f7ff bde3 	b.w	802958c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80299c6:	9402      	str	r4, [sp, #8]
 80299c8:	bc30      	pop	{r4, r5}
 80299ca:	f7ff bcdf 	b.w	802938c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80299ce:	9402      	str	r4, [sp, #8]
 80299d0:	bc30      	pop	{r4, r5}
 80299d2:	f7ff bee5 	b.w	80297a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80299d6:	bc30      	pop	{r4, r5}
 80299d8:	4770      	bx	lr
	...

080299dc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80299dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80299e0:	b089      	sub	sp, #36	; 0x24
 80299e2:	4605      	mov	r5, r0
 80299e4:	460c      	mov	r4, r1
 80299e6:	6810      	ldr	r0, [r2, #0]
 80299e8:	6851      	ldr	r1, [r2, #4]
 80299ea:	ae04      	add	r6, sp, #16
 80299ec:	4617      	mov	r7, r2
 80299ee:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 80299f2:	c603      	stmia	r6!, {r0, r1}
 80299f4:	6818      	ldr	r0, [r3, #0]
 80299f6:	ae06      	add	r6, sp, #24
 80299f8:	6859      	ldr	r1, [r3, #4]
 80299fa:	c603      	stmia	r6!, {r0, r1}
 80299fc:	a804      	add	r0, sp, #16
 80299fe:	f7fa fcbd 	bl	802437c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8029a02:	4639      	mov	r1, r7
 8029a04:	a806      	add	r0, sp, #24
 8029a06:	f7fa fca1 	bl	802434c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029a0a:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8029a0e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8029a12:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8029a16:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 8029a1a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8029a1e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8029a22:	440c      	add	r4, r1
 8029a24:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8029a28:	440a      	add	r2, r1
 8029a2a:	f8ad 2018 	strh.w	r2, [sp, #24]
 8029a2e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8029a32:	4413      	add	r3, r2
 8029a34:	f8ad 301a 	strh.w	r3, [sp, #26]
 8029a38:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8029a3c:	9300      	str	r3, [sp, #0]
 8029a3e:	4b81      	ldr	r3, [pc, #516]	; (8029c44 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x268>)
 8029a40:	6818      	ldr	r0, [r3, #0]
 8029a42:	6803      	ldr	r3, [r0, #0]
 8029a44:	6a1b      	ldr	r3, [r3, #32]
 8029a46:	4798      	blx	r3
 8029a48:	4b7f      	ldr	r3, [pc, #508]	; (8029c48 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x26c>)
 8029a4a:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 8029a4e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8029a52:	881a      	ldrh	r2, [r3, #0]
 8029a54:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8029a58:	fb06 1202 	mla	r2, r6, r2, r1
 8029a5c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8029a60:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 8029a64:	b212      	sxth	r2, r2
 8029a66:	d071      	beq.n	8029b4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x170>
 8029a68:	9201      	str	r2, [sp, #4]
 8029a6a:	f04f 0a00 	mov.w	sl, #0
 8029a6e:	0052      	lsls	r2, r2, #1
 8029a70:	9303      	str	r3, [sp, #12]
 8029a72:	9202      	str	r2, [sp, #8]
 8029a74:	9b00      	ldr	r3, [sp, #0]
 8029a76:	459a      	cmp	sl, r3
 8029a78:	f280 80db 	bge.w	8029c32 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x256>
 8029a7c:	f04f 0e00 	mov.w	lr, #0
 8029a80:	45be      	cmp	lr, r7
 8029a82:	da50      	bge.n	8029b26 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8029a84:	f814 300e 	ldrb.w	r3, [r4, lr]
 8029a88:	2b00      	cmp	r3, #0
 8029a8a:	d049      	beq.n	8029b20 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8029a8c:	fb08 f303 	mul.w	r3, r8, r3
 8029a90:	1c5a      	adds	r2, r3, #1
 8029a92:	eb02 2323 	add.w	r3, r2, r3, asr #8
 8029a96:	121b      	asrs	r3, r3, #8
 8029a98:	d042      	beq.n	8029b20 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8029a9a:	f835 201e 	ldrh.w	r2, [r5, lr, lsl #1]
 8029a9e:	fa1f fb83 	uxth.w	fp, r3
 8029aa2:	f830 c01e 	ldrh.w	ip, [r0, lr, lsl #1]
 8029aa6:	43db      	mvns	r3, r3
 8029aa8:	1211      	asrs	r1, r2, #8
 8029aaa:	ea4f 262c 	mov.w	r6, ip, asr #8
 8029aae:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029ab2:	b2db      	uxtb	r3, r3
 8029ab4:	ea4f 09e2 	mov.w	r9, r2, asr #3
 8029ab8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8029abc:	fb11 f10b 	smulbb	r1, r1, fp
 8029ac0:	00d2      	lsls	r2, r2, #3
 8029ac2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8029ac6:	fb06 1603 	mla	r6, r6, r3, r1
 8029aca:	b2d2      	uxtb	r2, r2
 8029acc:	fb19 f90b 	smulbb	r9, r9, fp
 8029ad0:	ea4f 01ec 	mov.w	r1, ip, asr #3
 8029ad4:	fb12 f20b 	smulbb	r2, r2, fp
 8029ad8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8029adc:	b2b6      	uxth	r6, r6
 8029ade:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029ae2:	fa5f fc8c 	uxtb.w	ip, ip
 8029ae6:	fb01 9103 	mla	r1, r1, r3, r9
 8029aea:	fb0c 2203 	mla	r2, ip, r3, r2
 8029aee:	1c73      	adds	r3, r6, #1
 8029af0:	b289      	uxth	r1, r1
 8029af2:	b292      	uxth	r2, r2
 8029af4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8029af8:	f102 0901 	add.w	r9, r2, #1
 8029afc:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8029b00:	eb09 2912 	add.w	r9, r9, r2, lsr #8
 8029b04:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8029b08:	ea46 0609 	orr.w	r6, r6, r9
 8029b0c:	f101 0901 	add.w	r9, r1, #1
 8029b10:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8029b14:	0949      	lsrs	r1, r1, #5
 8029b16:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029b1a:	430e      	orrs	r6, r1
 8029b1c:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
 8029b20:	f10e 0e01 	add.w	lr, lr, #1
 8029b24:	e7ac      	b.n	8029a80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8029b26:	9b03      	ldr	r3, [sp, #12]
 8029b28:	f10a 0a01 	add.w	sl, sl, #1
 8029b2c:	9a02      	ldr	r2, [sp, #8]
 8029b2e:	881b      	ldrh	r3, [r3, #0]
 8029b30:	1bdb      	subs	r3, r3, r7
 8029b32:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8029b36:	4418      	add	r0, r3
 8029b38:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8029b3c:	1bdb      	subs	r3, r3, r7
 8029b3e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8029b42:	4415      	add	r5, r2
 8029b44:	9a01      	ldr	r2, [sp, #4]
 8029b46:	4413      	add	r3, r2
 8029b48:	441c      	add	r4, r3
 8029b4a:	e793      	b.n	8029a74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x98>
 8029b4c:	9202      	str	r2, [sp, #8]
 8029b4e:	f04f 0b00 	mov.w	fp, #0
 8029b52:	0052      	lsls	r2, r2, #1
 8029b54:	9303      	str	r3, [sp, #12]
 8029b56:	9201      	str	r2, [sp, #4]
 8029b58:	9b00      	ldr	r3, [sp, #0]
 8029b5a:	459b      	cmp	fp, r3
 8029b5c:	da69      	bge.n	8029c32 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x256>
 8029b5e:	4681      	mov	r9, r0
 8029b60:	f04f 0800 	mov.w	r8, #0
 8029b64:	45b8      	cmp	r8, r7
 8029b66:	da51      	bge.n	8029c0c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x230>
 8029b68:	f814 3008 	ldrb.w	r3, [r4, r8]
 8029b6c:	b12b      	cbz	r3, 8029b7a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x19e>
 8029b6e:	2bff      	cmp	r3, #255	; 0xff
 8029b70:	f835 c018 	ldrh.w	ip, [r5, r8, lsl #1]
 8029b74:	d106      	bne.n	8029b84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1a8>
 8029b76:	f8a9 c000 	strh.w	ip, [r9]
 8029b7a:	f109 0902 	add.w	r9, r9, #2
 8029b7e:	f108 0801 	add.w	r8, r8, #1
 8029b82:	e7ef      	b.n	8029b64 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x188>
 8029b84:	f8b9 2000 	ldrh.w	r2, [r9]
 8029b88:	b29e      	uxth	r6, r3
 8029b8a:	43db      	mvns	r3, r3
 8029b8c:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 8029b90:	1211      	asrs	r1, r2, #8
 8029b92:	b2db      	uxtb	r3, r3
 8029b94:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8029b98:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029b9c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8029ba0:	00d2      	lsls	r2, r2, #3
 8029ba2:	fb11 f103 	smulbb	r1, r1, r3
 8029ba6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8029baa:	b2d2      	uxtb	r2, r2
 8029bac:	fb0e 1e06 	mla	lr, lr, r6, r1
 8029bb0:	ea4f 01ec 	mov.w	r1, ip, asr #3
 8029bb4:	fb12 f203 	smulbb	r2, r2, r3
 8029bb8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8029bbc:	fb1a fa03 	smulbb	sl, sl, r3
 8029bc0:	fa1f fe8e 	uxth.w	lr, lr
 8029bc4:	fa5f fc8c 	uxtb.w	ip, ip
 8029bc8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029bcc:	f10e 0301 	add.w	r3, lr, #1
 8029bd0:	fb0c 2206 	mla	r2, ip, r6, r2
 8029bd4:	fb01 a106 	mla	r1, r1, r6, sl
 8029bd8:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8029bdc:	b292      	uxth	r2, r2
 8029bde:	b289      	uxth	r1, r1
 8029be0:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8029be4:	f102 0a01 	add.w	sl, r2, #1
 8029be8:	eb0a 2a12 	add.w	sl, sl, r2, lsr #8
 8029bec:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8029bf0:	ea4e 0e0a 	orr.w	lr, lr, sl
 8029bf4:	f101 0a01 	add.w	sl, r1, #1
 8029bf8:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 8029bfc:	0949      	lsrs	r1, r1, #5
 8029bfe:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029c02:	ea4e 0e01 	orr.w	lr, lr, r1
 8029c06:	f8a9 e000 	strh.w	lr, [r9]
 8029c0a:	e7b6      	b.n	8029b7a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x19e>
 8029c0c:	9b03      	ldr	r3, [sp, #12]
 8029c0e:	f10b 0b01 	add.w	fp, fp, #1
 8029c12:	9a01      	ldr	r2, [sp, #4]
 8029c14:	881b      	ldrh	r3, [r3, #0]
 8029c16:	1bdb      	subs	r3, r3, r7
 8029c18:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8029c1c:	4418      	add	r0, r3
 8029c1e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8029c22:	1bdb      	subs	r3, r3, r7
 8029c24:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8029c28:	4415      	add	r5, r2
 8029c2a:	9a02      	ldr	r2, [sp, #8]
 8029c2c:	4413      	add	r3, r2
 8029c2e:	441c      	add	r4, r3
 8029c30:	e792      	b.n	8029b58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x17c>
 8029c32:	4b04      	ldr	r3, [pc, #16]	; (8029c44 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x268>)
 8029c34:	6818      	ldr	r0, [r3, #0]
 8029c36:	6803      	ldr	r3, [r0, #0]
 8029c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029c3a:	4798      	blx	r3
 8029c3c:	b009      	add	sp, #36	; 0x24
 8029c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029c42:	bf00      	nop
 8029c44:	2000cf78 	.word	0x2000cf78
 8029c48:	2000cf70 	.word	0x2000cf70

08029c4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8029c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029c50:	b089      	sub	sp, #36	; 0x24
 8029c52:	4682      	mov	sl, r0
 8029c54:	460d      	mov	r5, r1
 8029c56:	4691      	mov	r9, r2
 8029c58:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8029c5c:	4698      	mov	r8, r3
 8029c5e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8029c60:	b3ae      	cbz	r6, 8029cce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8029c62:	4608      	mov	r0, r1
 8029c64:	f7fc ff1c 	bl	8026aa0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8029c68:	4607      	mov	r7, r0
 8029c6a:	4628      	mov	r0, r5
 8029c6c:	f7fc ff52 	bl	8026b14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8029c70:	f8ad 000e 	strh.w	r0, [sp, #14]
 8029c74:	4628      	mov	r0, r5
 8029c76:	f8ad 9008 	strh.w	r9, [sp, #8]
 8029c7a:	f8ad 800a 	strh.w	r8, [sp, #10]
 8029c7e:	f8ad 700c 	strh.w	r7, [sp, #12]
 8029c82:	f7fd f897 	bl	8026db4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8029c86:	b178      	cbz	r0, 8029ca8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8029c88:	4628      	mov	r0, r5
 8029c8a:	f7fd f893 	bl	8026db4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8029c8e:	2802      	cmp	r0, #2
 8029c90:	d00a      	beq.n	8029ca8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8029c92:	4628      	mov	r0, r5
 8029c94:	f7fd f88e 	bl	8026db4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8029c98:	280b      	cmp	r0, #11
 8029c9a:	d005      	beq.n	8029ca8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8029c9c:	4b6a      	ldr	r3, [pc, #424]	; (8029e48 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 8029c9e:	212e      	movs	r1, #46	; 0x2e
 8029ca0:	4a6a      	ldr	r2, [pc, #424]	; (8029e4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 8029ca2:	486b      	ldr	r0, [pc, #428]	; (8029e50 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>)
 8029ca4:	f001 fa28 	bl	802b0f8 <__assert_func>
 8029ca8:	4628      	mov	r0, r5
 8029caa:	f7fd f801 	bl	8026cb0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8029cae:	4607      	mov	r7, r0
 8029cb0:	4628      	mov	r0, r5
 8029cb2:	f7fd f82d 	bl	8026d10 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8029cb6:	4681      	mov	r9, r0
 8029cb8:	4628      	mov	r0, r5
 8029cba:	f7fd f87b 	bl	8026db4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8029cbe:	2802      	cmp	r0, #2
 8029cc0:	d108      	bne.n	8029cd4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8029cc2:	4633      	mov	r3, r6
 8029cc4:	4622      	mov	r2, r4
 8029cc6:	a902      	add	r1, sp, #8
 8029cc8:	4638      	mov	r0, r7
 8029cca:	f7ff fa45 	bl	8029158 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8029cce:	b009      	add	sp, #36	; 0x24
 8029cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029cd4:	4628      	mov	r0, r5
 8029cd6:	f7fd f86d 	bl	8026db4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8029cda:	280b      	cmp	r0, #11
 8029cdc:	d107      	bne.n	8029cee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 8029cde:	9600      	str	r6, [sp, #0]
 8029ce0:	4623      	mov	r3, r4
 8029ce2:	aa02      	add	r2, sp, #8
 8029ce4:	4649      	mov	r1, r9
 8029ce6:	4638      	mov	r0, r7
 8029ce8:	f7ff fe60 	bl	80299ac <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8029cec:	e7ef      	b.n	8029cce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8029cee:	4628      	mov	r0, r5
 8029cf0:	f7fc ffa4 	bl	8026c3c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8029cf4:	b950      	cbnz	r0, 8029d0c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8029cf6:	f8da 3000 	ldr.w	r3, [sl]
 8029cfa:	aa02      	add	r2, sp, #8
 8029cfc:	9001      	str	r0, [sp, #4]
 8029cfe:	4639      	mov	r1, r7
 8029d00:	9600      	str	r6, [sp, #0]
 8029d02:	4650      	mov	r0, sl
 8029d04:	691d      	ldr	r5, [r3, #16]
 8029d06:	4623      	mov	r3, r4
 8029d08:	47a8      	blx	r5
 8029d0a:	e7e0      	b.n	8029cce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8029d0c:	f10d 0818 	add.w	r8, sp, #24
 8029d10:	4629      	mov	r1, r5
 8029d12:	ad04      	add	r5, sp, #16
 8029d14:	4640      	mov	r0, r8
 8029d16:	f7fc ff37 	bl	8026b88 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8029d1a:	e898 0003 	ldmia.w	r8, {r0, r1}
 8029d1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8029d22:	4621      	mov	r1, r4
 8029d24:	4628      	mov	r0, r5
 8029d26:	f7e8 fc39 	bl	801259c <_ZN8touchgfx4RectaNERKS0_>
 8029d2a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8029d2e:	b113      	cbz	r3, 8029d36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 8029d30:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8029d34:	b913      	cbnz	r3, 8029d3c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf0>
 8029d36:	9600      	str	r6, [sp, #0]
 8029d38:	4623      	mov	r3, r4
 8029d3a:	e07f      	b.n	8029e3c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f0>
 8029d3c:	f8da 3000 	ldr.w	r3, [sl]
 8029d40:	2200      	movs	r2, #0
 8029d42:	9600      	str	r6, [sp, #0]
 8029d44:	4639      	mov	r1, r7
 8029d46:	9201      	str	r2, [sp, #4]
 8029d48:	4650      	mov	r0, sl
 8029d4a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8029d4e:	aa02      	add	r2, sp, #8
 8029d50:	462b      	mov	r3, r5
 8029d52:	47d8      	blx	fp
 8029d54:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029d58:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8029d5c:	4293      	cmp	r3, r2
 8029d5e:	dd13      	ble.n	8029d88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13c>
 8029d60:	f9b4 0000 	ldrsh.w	r0, [r4]
 8029d64:	1a9b      	subs	r3, r3, r2
 8029d66:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029d6a:	f8ad 0018 	strh.w	r0, [sp, #24]
 8029d6e:	4638      	mov	r0, r7
 8029d70:	f8ad 201a 	strh.w	r2, [sp, #26]
 8029d74:	aa02      	add	r2, sp, #8
 8029d76:	f8ad 101c 	strh.w	r1, [sp, #28]
 8029d7a:	4649      	mov	r1, r9
 8029d7c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8029d80:	4643      	mov	r3, r8
 8029d82:	9600      	str	r6, [sp, #0]
 8029d84:	f7ff fe2a 	bl	80299dc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8029d88:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8029d8c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8029d90:	4293      	cmp	r3, r2
 8029d92:	dd13      	ble.n	8029dbc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x170>
 8029d94:	1a9b      	subs	r3, r3, r2
 8029d96:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8029d9a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8029d9e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8029da2:	aa02      	add	r2, sp, #8
 8029da4:	f8ad 001a 	strh.w	r0, [sp, #26]
 8029da8:	4638      	mov	r0, r7
 8029daa:	f8ad 301c 	strh.w	r3, [sp, #28]
 8029dae:	4643      	mov	r3, r8
 8029db0:	f8ad 101e 	strh.w	r1, [sp, #30]
 8029db4:	4649      	mov	r1, r9
 8029db6:	9600      	str	r6, [sp, #0]
 8029db8:	f7ff fe10 	bl	80299dc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8029dbc:	88a2      	ldrh	r2, [r4, #4]
 8029dbe:	8823      	ldrh	r3, [r4, #0]
 8029dc0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8029dc4:	4413      	add	r3, r2
 8029dc6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8029dca:	440a      	add	r2, r1
 8029dcc:	b29b      	uxth	r3, r3
 8029dce:	b292      	uxth	r2, r2
 8029dd0:	b218      	sxth	r0, r3
 8029dd2:	b211      	sxth	r1, r2
 8029dd4:	4288      	cmp	r0, r1
 8029dd6:	dd13      	ble.n	8029e00 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b4>
 8029dd8:	1a9b      	subs	r3, r3, r2
 8029dda:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8029dde:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 8029de2:	aa02      	add	r2, sp, #8
 8029de4:	f8ad 1018 	strh.w	r1, [sp, #24]
 8029de8:	4649      	mov	r1, r9
 8029dea:	f8ad 301c 	strh.w	r3, [sp, #28]
 8029dee:	4643      	mov	r3, r8
 8029df0:	f8ad 001e 	strh.w	r0, [sp, #30]
 8029df4:	4638      	mov	r0, r7
 8029df6:	9600      	str	r6, [sp, #0]
 8029df8:	f8ad 501a 	strh.w	r5, [sp, #26]
 8029dfc:	f7ff fdee 	bl	80299dc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8029e00:	88e2      	ldrh	r2, [r4, #6]
 8029e02:	8863      	ldrh	r3, [r4, #2]
 8029e04:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8029e08:	4413      	add	r3, r2
 8029e0a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8029e0e:	440a      	add	r2, r1
 8029e10:	b29b      	uxth	r3, r3
 8029e12:	b292      	uxth	r2, r2
 8029e14:	b218      	sxth	r0, r3
 8029e16:	b211      	sxth	r1, r2
 8029e18:	4288      	cmp	r0, r1
 8029e1a:	f77f af58 	ble.w	8029cce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8029e1e:	1a9b      	subs	r3, r3, r2
 8029e20:	f9b4 5000 	ldrsh.w	r5, [r4]
 8029e24:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8029e28:	f8ad 301e 	strh.w	r3, [sp, #30]
 8029e2c:	4643      	mov	r3, r8
 8029e2e:	f8ad 5018 	strh.w	r5, [sp, #24]
 8029e32:	f8ad 101a 	strh.w	r1, [sp, #26]
 8029e36:	f8ad 001c 	strh.w	r0, [sp, #28]
 8029e3a:	9600      	str	r6, [sp, #0]
 8029e3c:	aa02      	add	r2, sp, #8
 8029e3e:	4649      	mov	r1, r9
 8029e40:	4638      	mov	r0, r7
 8029e42:	f7ff fdcb 	bl	80299dc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8029e46:	e742      	b.n	8029cce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8029e48:	0802fc8b 	.word	0x0802fc8b
 8029e4c:	08030152 	.word	0x08030152
 8029e50:	0802fe35 	.word	0x0802fe35

08029e54 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8029e54:	b508      	push	{r3, lr}
 8029e56:	b180      	cbz	r0, 8029e7a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8029e58:	2902      	cmp	r1, #2
 8029e5a:	d014      	beq.n	8029e86 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8029e5c:	2903      	cmp	r1, #3
 8029e5e:	d019      	beq.n	8029e94 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8029e60:	2901      	cmp	r1, #1
 8029e62:	d101      	bne.n	8029e68 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8029e64:	2001      	movs	r0, #1
 8029e66:	bd08      	pop	{r3, pc}
 8029e68:	4b0e      	ldr	r3, [pc, #56]	; (8029ea4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8029e6a:	8818      	ldrh	r0, [r3, #0]
 8029e6c:	b9a8      	cbnz	r0, 8029e9a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x46>
 8029e6e:	4b0e      	ldr	r3, [pc, #56]	; (8029ea8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8029e70:	21d5      	movs	r1, #213	; 0xd5
 8029e72:	4a0e      	ldr	r2, [pc, #56]	; (8029eac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8029e74:	480e      	ldr	r0, [pc, #56]	; (8029eb0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8029e76:	f001 f93f 	bl	802b0f8 <__assert_func>
 8029e7a:	2902      	cmp	r1, #2
 8029e7c:	d00a      	beq.n	8029e94 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8029e7e:	2903      	cmp	r1, #3
 8029e80:	d0f2      	beq.n	8029e68 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8029e82:	2901      	cmp	r1, #1
 8029e84:	d1ee      	bne.n	8029e64 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8029e86:	4b07      	ldr	r3, [pc, #28]	; (8029ea4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8029e88:	8818      	ldrh	r0, [r3, #0]
 8029e8a:	2800      	cmp	r0, #0
 8029e8c:	d0ef      	beq.n	8029e6e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8029e8e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8029e92:	bd08      	pop	{r3, pc}
 8029e94:	f04f 30ff 	mov.w	r0, #4294967295
 8029e98:	bd08      	pop	{r3, pc}
 8029e9a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8029e9e:	4240      	negs	r0, r0
 8029ea0:	bd08      	pop	{r3, pc}
 8029ea2:	bf00      	nop
 8029ea4:	2000cf70 	.word	0x2000cf70
 8029ea8:	0802ff7e 	.word	0x0802ff7e
 8029eac:	08030261 	.word	0x08030261
 8029eb0:	0802ffc0 	.word	0x0802ffc0

08029eb4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8029eb4:	b508      	push	{r3, lr}
 8029eb6:	b170      	cbz	r0, 8029ed6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x22>
 8029eb8:	2902      	cmp	r1, #2
 8029eba:	d012      	beq.n	8029ee2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 8029ebc:	2903      	cmp	r1, #3
 8029ebe:	d016      	beq.n	8029eee <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3a>
 8029ec0:	2901      	cmp	r1, #1
 8029ec2:	d11c      	bne.n	8029efe <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x4a>
 8029ec4:	4b0f      	ldr	r3, [pc, #60]	; (8029f04 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8029ec6:	8818      	ldrh	r0, [r3, #0]
 8029ec8:	b970      	cbnz	r0, 8029ee8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>
 8029eca:	4b0f      	ldr	r3, [pc, #60]	; (8029f08 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8029ecc:	21d5      	movs	r1, #213	; 0xd5
 8029ece:	4a0f      	ldr	r2, [pc, #60]	; (8029f0c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8029ed0:	480f      	ldr	r0, [pc, #60]	; (8029f10 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8029ed2:	f001 f911 	bl	802b0f8 <__assert_func>
 8029ed6:	2902      	cmp	r1, #2
 8029ed8:	d009      	beq.n	8029eee <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3a>
 8029eda:	2903      	cmp	r1, #3
 8029edc:	d00f      	beq.n	8029efe <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x4a>
 8029ede:	2901      	cmp	r1, #1
 8029ee0:	d1f0      	bne.n	8029ec4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8029ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8029ee6:	bd08      	pop	{r3, pc}
 8029ee8:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8029eec:	bd08      	pop	{r3, pc}
 8029eee:	4b05      	ldr	r3, [pc, #20]	; (8029f04 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8029ef0:	8818      	ldrh	r0, [r3, #0]
 8029ef2:	2800      	cmp	r0, #0
 8029ef4:	d0e9      	beq.n	8029eca <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x16>
 8029ef6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8029efa:	4240      	negs	r0, r0
 8029efc:	bd08      	pop	{r3, pc}
 8029efe:	2001      	movs	r0, #1
 8029f00:	bd08      	pop	{r3, pc}
 8029f02:	bf00      	nop
 8029f04:	2000cf70 	.word	0x2000cf70
 8029f08:	0802ff7e 	.word	0x0802ff7e
 8029f0c:	08030261 	.word	0x08030261
 8029f10:	0802ffc0 	.word	0x0802ffc0

08029f14 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8029f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029f18:	b097      	sub	sp, #92	; 0x5c
 8029f1a:	910b      	str	r1, [sp, #44]	; 0x2c
 8029f1c:	a912      	add	r1, sp, #72	; 0x48
 8029f1e:	f9bd 9080 	ldrsh.w	r9, [sp, #128]	; 0x80
 8029f22:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8029f26:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8029f2a:	f89d 50a4 	ldrb.w	r5, [sp, #164]	; 0xa4
 8029f2e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8029f32:	e881 000c 	stmia.w	r1, {r2, r3}
 8029f36:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8029f38:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
 8029f3c:	7b56      	ldrb	r6, [r2, #13]
 8029f3e:	9110      	str	r1, [sp, #64]	; 0x40
 8029f40:	f016 0f08 	tst.w	r6, #8
 8029f44:	f89d 10a8 	ldrb.w	r1, [sp, #168]	; 0xa8
 8029f48:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8029f4c:	bf14      	ite	ne
 8029f4e:	f44f 7080 	movne.w	r0, #256	; 0x100
 8029f52:	2000      	moveq	r0, #0
 8029f54:	910c      	str	r1, [sp, #48]	; 0x30
 8029f56:	f016 0f10 	tst.w	r6, #16
 8029f5a:	7991      	ldrb	r1, [r2, #6]
 8029f5c:	bf14      	ite	ne
 8029f5e:	f44f 7680 	movne.w	r6, #256	; 0x100
 8029f62:	2600      	moveq	r6, #0
 8029f64:	4301      	orrs	r1, r0
 8029f66:	9308      	str	r3, [sp, #32]
 8029f68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029f6a:	910a      	str	r1, [sp, #40]	; 0x28
 8029f6c:	f000 814e 	beq.w	802a20c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 8029f70:	79d1      	ldrb	r1, [r2, #7]
 8029f72:	430e      	orrs	r6, r1
 8029f74:	f000 814a 	beq.w	802a20c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 8029f78:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8029f7c:	2f00      	cmp	r7, #0
 8029f7e:	f000 80ed 	beq.w	802a15c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x248>
 8029f82:	1a79      	subs	r1, r7, r1
 8029f84:	b28f      	uxth	r7, r1
 8029f86:	043a      	lsls	r2, r7, #16
 8029f88:	d504      	bpl.n	8029f94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 8029f8a:	eba9 0707 	sub.w	r7, r9, r7
 8029f8e:	fa0f f987 	sxth.w	r9, r7
 8029f92:	2700      	movs	r7, #0
 8029f94:	f9b3 0000 	ldrsh.w	r0, [r3]
 8029f98:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 8029f9c:	4581      	cmp	r9, r0
 8029f9e:	b282      	uxth	r2, r0
 8029fa0:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 8029fa4:	bfbe      	ittt	lt
 8029fa6:	18b9      	addlt	r1, r7, r2
 8029fa8:	eba1 0109 	sublt.w	r1, r1, r9
 8029fac:	4681      	movlt	r9, r0
 8029fae:	a812      	add	r0, sp, #72	; 0x48
 8029fb0:	bfb8      	it	lt
 8029fb2:	b28f      	uxthlt	r7, r1
 8029fb4:	8899      	ldrh	r1, [r3, #4]
 8029fb6:	88db      	ldrh	r3, [r3, #6]
 8029fb8:	440a      	add	r2, r1
 8029fba:	4649      	mov	r1, r9
 8029fbc:	449c      	add	ip, r3
 8029fbe:	b212      	sxth	r2, r2
 8029fc0:	fa0f f38c 	sxth.w	r3, ip
 8029fc4:	920f      	str	r2, [sp, #60]	; 0x3c
 8029fc6:	930e      	str	r3, [sp, #56]	; 0x38
 8029fc8:	b2b3      	uxth	r3, r6
 8029fca:	9a08      	ldr	r2, [sp, #32]
 8029fcc:	9307      	str	r3, [sp, #28]
 8029fce:	4bb9      	ldr	r3, [pc, #740]	; (802a2b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8029fd0:	f893 a000 	ldrb.w	sl, [r3]
 8029fd4:	f10a 3eff 	add.w	lr, sl, #4294967295
 8029fd8:	f1de 0300 	rsbs	r3, lr, #0
 8029fdc:	eb43 030e 	adc.w	r3, r3, lr
 8029fe0:	930d      	str	r3, [sp, #52]	; 0x34
 8029fe2:	465b      	mov	r3, fp
 8029fe4:	f7f9 ff3b 	bl	8023e5e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8029fe8:	4649      	mov	r1, r9
 8029fea:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8029fee:	465b      	mov	r3, fp
 8029ff0:	9a08      	ldr	r2, [sp, #32]
 8029ff2:	a812      	add	r0, sp, #72	; 0x48
 8029ff4:	f7f9 ff4e 	bl	8023e94 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8029ff8:	a916      	add	r1, sp, #88	; 0x58
 8029ffa:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8029ffe:	a815      	add	r0, sp, #84	; 0x54
 802a000:	f7fa f96e 	bl	80242e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802a004:	f1bb 0f00 	cmp.w	fp, #0
 802a008:	f040 80ac 	bne.w	802a164 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x250>
 802a00c:	f1ba 0f01 	cmp.w	sl, #1
 802a010:	f040 80b0 	bne.w	802a174 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 802a014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a016:	2b00      	cmp	r3, #0
 802a018:	f040 80fd 	bne.w	802a216 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 802a01c:	4ba6      	ldr	r3, [pc, #664]	; (802a2b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 802a01e:	6818      	ldr	r0, [r3, #0]
 802a020:	6803      	ldr	r3, [r0, #0]
 802a022:	6a1b      	ldr	r3, [r3, #32]
 802a024:	4798      	blx	r3
 802a026:	4aa5      	ldr	r2, [pc, #660]	; (802a2bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 802a028:	2601      	movs	r6, #1
 802a02a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 802a02e:	8811      	ldrh	r1, [r2, #0]
 802a030:	42b5      	cmp	r5, r6
 802a032:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 802a036:	fb01 2303 	mla	r3, r1, r3, r2
 802a03a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802a03e:	9309      	str	r3, [sp, #36]	; 0x24
 802a040:	fa06 f305 	lsl.w	r3, r6, r5
 802a044:	f103 33ff 	add.w	r3, r3, #4294967295
 802a048:	b2db      	uxtb	r3, r3
 802a04a:	9311      	str	r3, [sp, #68]	; 0x44
 802a04c:	f000 80e5 	beq.w	802a21a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x306>
 802a050:	2d02      	cmp	r5, #2
 802a052:	f000 8162 	beq.w	802a31a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x406>
 802a056:	2d04      	cmp	r5, #4
 802a058:	f000 8154 	beq.w	802a304 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>
 802a05c:	b907      	cbnz	r7, 802a060 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 802a05e:	b184      	cbz	r4, 802a082 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x16e>
 802a060:	fb18 7304 	smlabb	r3, r8, r4, r7
 802a064:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802a066:	fb13 f305 	smulbb	r3, r3, r5
 802a06a:	b29b      	uxth	r3, r3
 802a06c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 802a070:	9226      	str	r2, [sp, #152]	; 0x98
 802a072:	9a07      	ldr	r2, [sp, #28]
 802a074:	eba2 0c04 	sub.w	ip, r2, r4
 802a078:	f003 0407 	and.w	r4, r3, #7
 802a07c:	fa1f f28c 	uxth.w	r2, ip
 802a080:	9207      	str	r2, [sp, #28]
 802a082:	4659      	mov	r1, fp
 802a084:	980d      	ldr	r0, [sp, #52]	; 0x34
 802a086:	f7ff fee5 	bl	8029e54 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 802a08a:	4659      	mov	r1, fp
 802a08c:	4682      	mov	sl, r0
 802a08e:	980d      	ldr	r0, [sp, #52]	; 0x34
 802a090:	f7ff ff10 	bl	8029eb4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 802a094:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802a096:	9a08      	ldr	r2, [sp, #32]
 802a098:	eba9 0107 	sub.w	r1, r9, r7
 802a09c:	eba3 0c02 	sub.w	ip, r3, r2
 802a0a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802a0a2:	1a59      	subs	r1, r3, r1
 802a0a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a0a6:	4299      	cmp	r1, r3
 802a0a8:	bfd4      	ite	le
 802a0aa:	ebc7 0101 	rsble	r1, r7, r1
 802a0ae:	ebc7 0103 	rsbgt	r1, r7, r3
 802a0b2:	eba8 0801 	sub.w	r8, r8, r1
 802a0b6:	fb0a 0011 	mls	r0, sl, r1, r0
 802a0ba:	fb05 f308 	mul.w	r3, r5, r8
 802a0be:	9308      	str	r3, [sp, #32]
 802a0c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a0c2:	781a      	ldrb	r2, [r3, #0]
 802a0c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a0c6:	4122      	asrs	r2, r4
 802a0c8:	121b      	asrs	r3, r3, #8
 802a0ca:	b2d2      	uxtb	r2, r2
 802a0cc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802a0d0:	930d      	str	r3, [sp, #52]	; 0x34
 802a0d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a0d4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 802a0d8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802a0dc:	930e      	str	r3, [sp, #56]	; 0x38
 802a0de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a0e0:	00db      	lsls	r3, r3, #3
 802a0e2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802a0e6:	930f      	str	r3, [sp, #60]	; 0x3c
 802a0e8:	ea4f 034a 	mov.w	r3, sl, lsl #1
 802a0ec:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 802a0f0:	930a      	str	r3, [sp, #40]	; 0x28
 802a0f2:	fb03 fa0a 	mul.w	sl, r3, sl
 802a0f6:	9b07      	ldr	r3, [sp, #28]
 802a0f8:	459c      	cmp	ip, r3
 802a0fa:	bfa8      	it	ge
 802a0fc:	469c      	movge	ip, r3
 802a0fe:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 802a102:	9307      	str	r3, [sp, #28]
 802a104:	eb0a 0340 	add.w	r3, sl, r0, lsl #1
 802a108:	9310      	str	r3, [sp, #64]	; 0x40
 802a10a:	f1bc 0f00 	cmp.w	ip, #0
 802a10e:	f340 80eb 	ble.w	802a2e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d4>
 802a112:	468a      	mov	sl, r1
 802a114:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 802a118:	f1ba 0f00 	cmp.w	sl, #0
 802a11c:	f340 80d0 	ble.w	802a2c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 802a120:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802a122:	4013      	ands	r3, r2
 802a124:	d009      	beq.n	802a13a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x226>
 802a126:	fb13 f306 	smulbb	r3, r3, r6
 802a12a:	2bfe      	cmp	r3, #254	; 0xfe
 802a12c:	dd77      	ble.n	802a21e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30a>
 802a12e:	980c      	ldr	r0, [sp, #48]	; 0x30
 802a130:	28ff      	cmp	r0, #255	; 0xff
 802a132:	d174      	bne.n	802a21e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30a>
 802a134:	9f07      	ldr	r7, [sp, #28]
 802a136:	f8a9 7000 	strh.w	r7, [r9]
 802a13a:	442c      	add	r4, r5
 802a13c:	f10a 3aff 	add.w	sl, sl, #4294967295
 802a140:	b2a4      	uxth	r4, r4
 802a142:	2c07      	cmp	r4, #7
 802a144:	bf89      	itett	hi
 802a146:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 802a148:	412a      	asrls	r2, r5
 802a14a:	2400      	movhi	r4, #0
 802a14c:	785a      	ldrbhi	r2, [r3, #1]
 802a14e:	bf8a      	itet	hi
 802a150:	3301      	addhi	r3, #1
 802a152:	b2d2      	uxtbls	r2, r2
 802a154:	9326      	strhi	r3, [sp, #152]	; 0x98
 802a156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a158:	4499      	add	r9, r3
 802a15a:	e7dd      	b.n	802a118 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x204>
 802a15c:	4489      	add	r9, r1
 802a15e:	fa0f f989 	sxth.w	r9, r9
 802a162:	e717      	b.n	8029f94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 802a164:	f1bb 0f01 	cmp.w	fp, #1
 802a168:	f47f af54 	bne.w	802a014 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 802a16c:	f1ba 0f01 	cmp.w	sl, #1
 802a170:	f47f af50 	bne.w	802a014 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 802a174:	f8df a140 	ldr.w	sl, [pc, #320]	; 802a2b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 802a178:	f8da 0000 	ldr.w	r0, [sl]
 802a17c:	6803      	ldr	r3, [r0, #0]
 802a17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a180:	4798      	blx	r3
 802a182:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 802a186:	4652      	mov	r2, sl
 802a188:	d005      	beq.n	802a196 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x282>
 802a18a:	2d04      	cmp	r5, #4
 802a18c:	d141      	bne.n	802a212 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2fe>
 802a18e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802a190:	3300      	adds	r3, #0
 802a192:	bf18      	it	ne
 802a194:	2301      	movne	r3, #1
 802a196:	05c0      	lsls	r0, r0, #23
 802a198:	f140 80af 	bpl.w	802a2fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e6>
 802a19c:	2d08      	cmp	r5, #8
 802a19e:	f040 80ac 	bne.w	802a2fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e6>
 802a1a2:	2b00      	cmp	r3, #0
 802a1a4:	bf14      	ite	ne
 802a1a6:	2180      	movne	r1, #128	; 0x80
 802a1a8:	f44f 7180 	moveq.w	r1, #256	; 0x100
 802a1ac:	2f00      	cmp	r7, #0
 802a1ae:	f47f af31 	bne.w	802a014 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 802a1b2:	2c00      	cmp	r4, #0
 802a1b4:	f47f af2e 	bne.w	802a014 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 802a1b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a1ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802a1bc:	444b      	add	r3, r9
 802a1be:	4298      	cmp	r0, r3
 802a1c0:	f6ff af28 	blt.w	802a014 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 802a1c4:	9b08      	ldr	r3, [sp, #32]
 802a1c6:	441e      	add	r6, r3
 802a1c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802a1ca:	42b3      	cmp	r3, r6
 802a1cc:	f6ff af22 	blt.w	802a014 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 802a1d0:	6810      	ldr	r0, [r2, #0]
 802a1d2:	2d08      	cmp	r5, #8
 802a1d4:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 802a1d8:	6804      	ldr	r4, [r0, #0]
 802a1da:	bf18      	it	ne
 802a1dc:	f108 0801 	addne.w	r8, r8, #1
 802a1e0:	9105      	str	r1, [sp, #20]
 802a1e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a1e4:	bf18      	it	ne
 802a1e6:	f028 0801 	bicne.w	r8, r8, #1
 802a1ea:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 802a1ee:	9104      	str	r1, [sp, #16]
 802a1f0:	bf18      	it	ne
 802a1f2:	fa1f f888 	uxthne.w	r8, r8
 802a1f6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802a1f8:	f8cd 8008 	str.w	r8, [sp, #8]
 802a1fc:	9103      	str	r1, [sp, #12]
 802a1fe:	9907      	ldr	r1, [sp, #28]
 802a200:	f8cd 8000 	str.w	r8, [sp]
 802a204:	9101      	str	r1, [sp, #4]
 802a206:	9926      	ldr	r1, [sp, #152]	; 0x98
 802a208:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
 802a20a:	47a0      	blx	r4
 802a20c:	b017      	add	sp, #92	; 0x5c
 802a20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a212:	2300      	movs	r3, #0
 802a214:	e7bf      	b.n	802a196 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x282>
 802a216:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802a218:	e705      	b.n	802a026 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 802a21a:	26ff      	movs	r6, #255	; 0xff
 802a21c:	e71e      	b.n	802a05c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x148>
 802a21e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 802a222:	f8b9 e000 	ldrh.w	lr, [r9]
 802a226:	fb10 f303 	smulbb	r3, r0, r3
 802a22a:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 802a22e:	ea4f 272e 	mov.w	r7, lr, asr #8
 802a232:	b29b      	uxth	r3, r3
 802a234:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802a238:	1c58      	adds	r0, r3, #1
 802a23a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802a23e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 802a242:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a246:	fa1f f883 	uxth.w	r8, r3
 802a24a:	43db      	mvns	r3, r3
 802a24c:	fb10 f008 	smulbb	r0, r0, r8
 802a250:	b2db      	uxtb	r3, r3
 802a252:	fb18 fb0b 	smulbb	fp, r8, fp
 802a256:	fb07 0703 	mla	r7, r7, r3, r0
 802a25a:	ea4f 00ee 	mov.w	r0, lr, asr #3
 802a25e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802a262:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a266:	b2bf      	uxth	r7, r7
 802a268:	fa5f fe8e 	uxtb.w	lr, lr
 802a26c:	fb00 b003 	mla	r0, r0, r3, fp
 802a270:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 802a274:	fb18 f80b 	smulbb	r8, r8, fp
 802a278:	b280      	uxth	r0, r0
 802a27a:	fb0e 8803 	mla	r8, lr, r3, r8
 802a27e:	1c7b      	adds	r3, r7, #1
 802a280:	fa1f f888 	uxth.w	r8, r8
 802a284:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802a288:	f108 0b01 	add.w	fp, r8, #1
 802a28c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802a290:	eb0b 2b18 	add.w	fp, fp, r8, lsr #8
 802a294:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802a298:	ea47 070b 	orr.w	r7, r7, fp
 802a29c:	f100 0b01 	add.w	fp, r0, #1
 802a2a0:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802a2a4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 802a2a8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802a2ac:	ea47 070b 	orr.w	r7, r7, fp
 802a2b0:	e741      	b.n	802a136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
 802a2b2:	bf00      	nop
 802a2b4:	2000cf6e 	.word	0x2000cf6e
 802a2b8:	2000cf78 	.word	0x2000cf78
 802a2bc:	2000cf70 	.word	0x2000cf70
 802a2c0:	9b08      	ldr	r3, [sp, #32]
 802a2c2:	b153      	cbz	r3, 802a2da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 802a2c4:	441c      	add	r4, r3
 802a2c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a2c8:	b2a4      	uxth	r4, r4
 802a2ca:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 802a2ce:	f004 0407 	and.w	r4, r4, #7
 802a2d2:	781a      	ldrb	r2, [r3, #0]
 802a2d4:	9326      	str	r3, [sp, #152]	; 0x98
 802a2d6:	4122      	asrs	r2, r4
 802a2d8:	b2d2      	uxtb	r2, r2
 802a2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a2dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 802a2e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 802a2e2:	4403      	add	r3, r0
 802a2e4:	9309      	str	r3, [sp, #36]	; 0x24
 802a2e6:	e710      	b.n	802a10a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f6>
 802a2e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a2ea:	2b00      	cmp	r3, #0
 802a2ec:	d18e      	bne.n	802a20c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 802a2ee:	4b0c      	ldr	r3, [pc, #48]	; (802a320 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x40c>)
 802a2f0:	6818      	ldr	r0, [r3, #0]
 802a2f2:	6803      	ldr	r3, [r0, #0]
 802a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a2f6:	4798      	blx	r3
 802a2f8:	e788      	b.n	802a20c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 802a2fa:	2b00      	cmp	r3, #0
 802a2fc:	f43f ae8a 	beq.w	802a014 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 802a300:	2180      	movs	r1, #128	; 0x80
 802a302:	e753      	b.n	802a1ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 802a304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802a306:	b133      	cbz	r3, 802a316 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x402>
 802a308:	f018 0f01 	tst.w	r8, #1
 802a30c:	d003      	beq.n	802a316 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x402>
 802a30e:	f108 0801 	add.w	r8, r8, #1
 802a312:	fa1f f888 	uxth.w	r8, r8
 802a316:	2611      	movs	r6, #17
 802a318:	e6a0      	b.n	802a05c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x148>
 802a31a:	2655      	movs	r6, #85	; 0x55
 802a31c:	e69e      	b.n	802a05c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x148>
 802a31e:	bf00      	nop
 802a320:	2000cf78 	.word	0x2000cf78

0802a324 <CRC_Lock>:
 802a324:	4a1f      	ldr	r2, [pc, #124]	; (802a3a4 <CRC_Lock+0x80>)
 802a326:	b530      	push	{r4, r5, lr}
 802a328:	6813      	ldr	r3, [r2, #0]
 802a32a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802a32e:	f24c 2540 	movw	r5, #49728	; 0xc240
 802a332:	f023 0301 	bic.w	r3, r3, #1
 802a336:	6013      	str	r3, [r2, #0]
 802a338:	4b1b      	ldr	r3, [pc, #108]	; (802a3a8 <CRC_Lock+0x84>)
 802a33a:	681a      	ldr	r2, [r3, #0]
 802a33c:	4022      	ands	r2, r4
 802a33e:	42aa      	cmp	r2, r5
 802a340:	d005      	beq.n	802a34e <CRC_Lock+0x2a>
 802a342:	681b      	ldr	r3, [r3, #0]
 802a344:	f24c 2270 	movw	r2, #49776	; 0xc270
 802a348:	4023      	ands	r3, r4
 802a34a:	4293      	cmp	r3, r2
 802a34c:	d11e      	bne.n	802a38c <CRC_Lock+0x68>
 802a34e:	4b17      	ldr	r3, [pc, #92]	; (802a3ac <CRC_Lock+0x88>)
 802a350:	681b      	ldr	r3, [r3, #0]
 802a352:	b9db      	cbnz	r3, 802a38c <CRC_Lock+0x68>
 802a354:	4a16      	ldr	r2, [pc, #88]	; (802a3b0 <CRC_Lock+0x8c>)
 802a356:	6813      	ldr	r3, [r2, #0]
 802a358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802a35c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 802a360:	d006      	beq.n	802a370 <CRC_Lock+0x4c>
 802a362:	6813      	ldr	r3, [r2, #0]
 802a364:	f240 4283 	movw	r2, #1155	; 0x483
 802a368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802a36c:	4293      	cmp	r3, r2
 802a36e:	d10d      	bne.n	802a38c <CRC_Lock+0x68>
 802a370:	4b10      	ldr	r3, [pc, #64]	; (802a3b4 <CRC_Lock+0x90>)
 802a372:	2201      	movs	r2, #1
 802a374:	601a      	str	r2, [r3, #0]
 802a376:	681a      	ldr	r2, [r3, #0]
 802a378:	2a00      	cmp	r2, #0
 802a37a:	d1fc      	bne.n	802a376 <CRC_Lock+0x52>
 802a37c:	4b0e      	ldr	r3, [pc, #56]	; (802a3b8 <CRC_Lock+0x94>)
 802a37e:	6018      	str	r0, [r3, #0]
 802a380:	6818      	ldr	r0, [r3, #0]
 802a382:	4288      	cmp	r0, r1
 802a384:	bf14      	ite	ne
 802a386:	2000      	movne	r0, #0
 802a388:	2001      	moveq	r0, #1
 802a38a:	bd30      	pop	{r4, r5, pc}
 802a38c:	4b0b      	ldr	r3, [pc, #44]	; (802a3bc <CRC_Lock+0x98>)
 802a38e:	2201      	movs	r2, #1
 802a390:	601a      	str	r2, [r3, #0]
 802a392:	681a      	ldr	r2, [r3, #0]
 802a394:	2a00      	cmp	r2, #0
 802a396:	d1fc      	bne.n	802a392 <CRC_Lock+0x6e>
 802a398:	4b09      	ldr	r3, [pc, #36]	; (802a3c0 <CRC_Lock+0x9c>)
 802a39a:	6018      	str	r0, [r3, #0]
 802a39c:	6818      	ldr	r0, [r3, #0]
 802a39e:	4281      	cmp	r1, r0
 802a3a0:	e7f0      	b.n	802a384 <CRC_Lock+0x60>
 802a3a2:	bf00      	nop
 802a3a4:	e0002000 	.word	0xe0002000
 802a3a8:	e000ed00 	.word	0xe000ed00
 802a3ac:	e0042000 	.word	0xe0042000
 802a3b0:	5c001000 	.word	0x5c001000
 802a3b4:	58024c08 	.word	0x58024c08
 802a3b8:	58024c00 	.word	0x58024c00
 802a3bc:	40023008 	.word	0x40023008
 802a3c0:	40023000 	.word	0x40023000

0802a3c4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802a3c4:	6101      	str	r1, [r0, #16]
 802a3c6:	4770      	bx	lr

0802a3c8 <_ZN8touchgfx8Gestures4tickEv>:
 802a3c8:	7b83      	ldrb	r3, [r0, #14]
 802a3ca:	b14b      	cbz	r3, 802a3e0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802a3cc:	8903      	ldrh	r3, [r0, #8]
 802a3ce:	3301      	adds	r3, #1
 802a3d0:	b29b      	uxth	r3, r3
 802a3d2:	2b07      	cmp	r3, #7
 802a3d4:	8103      	strh	r3, [r0, #8]
 802a3d6:	bf81      	itttt	hi
 802a3d8:	2300      	movhi	r3, #0
 802a3da:	8143      	strhhi	r3, [r0, #10]
 802a3dc:	8183      	strhhi	r3, [r0, #12]
 802a3de:	7383      	strbhi	r3, [r0, #14]
 802a3e0:	4770      	bx	lr
	...

0802a3e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802a3e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802a3e8:	4604      	mov	r4, r0
 802a3ea:	4698      	mov	r8, r3
 802a3ec:	8880      	ldrh	r0, [r0, #4]
 802a3ee:	4617      	mov	r7, r2
 802a3f0:	4b1d      	ldr	r3, [pc, #116]	; (802a468 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802a3f2:	460e      	mov	r6, r1
 802a3f4:	f8ad 0006 	strh.w	r0, [sp, #6]
 802a3f8:	eba8 0000 	sub.w	r0, r8, r0
 802a3fc:	9300      	str	r3, [sp, #0]
 802a3fe:	2300      	movs	r3, #0
 802a400:	b280      	uxth	r0, r0
 802a402:	8aa2      	ldrh	r2, [r4, #20]
 802a404:	f88d 3004 	strb.w	r3, [sp, #4]
 802a408:	b203      	sxth	r3, r0
 802a40a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802a40e:	88e1      	ldrh	r1, [r4, #6]
 802a410:	2b00      	cmp	r3, #0
 802a412:	f8ad 800a 	strh.w	r8, [sp, #10]
 802a416:	f8ad 1008 	strh.w	r1, [sp, #8]
 802a41a:	bfb8      	it	lt
 802a41c:	4240      	neglt	r0, r0
 802a41e:	f8ad 500c 	strh.w	r5, [sp, #12]
 802a422:	bfb8      	it	lt
 802a424:	b203      	sxthlt	r3, r0
 802a426:	4293      	cmp	r3, r2
 802a428:	dc0c      	bgt.n	802a444 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 802a42a:	1a69      	subs	r1, r5, r1
 802a42c:	b289      	uxth	r1, r1
 802a42e:	b20b      	sxth	r3, r1
 802a430:	2b00      	cmp	r3, #0
 802a432:	bfbc      	itt	lt
 802a434:	4249      	neglt	r1, r1
 802a436:	b20b      	sxthlt	r3, r1
 802a438:	429a      	cmp	r2, r3
 802a43a:	db03      	blt.n	802a444 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 802a43c:	2000      	movs	r0, #0
 802a43e:	b004      	add	sp, #16
 802a440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a444:	6920      	ldr	r0, [r4, #16]
 802a446:	4669      	mov	r1, sp
 802a448:	eba8 0606 	sub.w	r6, r8, r6
 802a44c:	1bef      	subs	r7, r5, r7
 802a44e:	6803      	ldr	r3, [r0, #0]
 802a450:	685b      	ldr	r3, [r3, #4]
 802a452:	4798      	blx	r3
 802a454:	2300      	movs	r3, #0
 802a456:	2001      	movs	r0, #1
 802a458:	8166      	strh	r6, [r4, #10]
 802a45a:	8123      	strh	r3, [r4, #8]
 802a45c:	81a7      	strh	r7, [r4, #12]
 802a45e:	f8a4 8004 	strh.w	r8, [r4, #4]
 802a462:	80e5      	strh	r5, [r4, #6]
 802a464:	73a0      	strb	r0, [r4, #14]
 802a466:	e7ea      	b.n	802a43e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x5a>
 802a468:	0802ceb0 	.word	0x0802ceb0

0802a46c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802a46c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a46e:	461e      	mov	r6, r3
 802a470:	1e4b      	subs	r3, r1, #1
 802a472:	b085      	sub	sp, #20
 802a474:	4604      	mov	r4, r0
 802a476:	2b01      	cmp	r3, #1
 802a478:	460d      	mov	r5, r1
 802a47a:	4617      	mov	r7, r2
 802a47c:	d845      	bhi.n	802a50a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x9e>
 802a47e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802a482:	1cd3      	adds	r3, r2, #3
 802a484:	b29b      	uxth	r3, r3
 802a486:	2b06      	cmp	r3, #6
 802a488:	d913      	bls.n	802a4b2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x46>
 802a48a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 802a48e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802a492:	4820      	ldr	r0, [pc, #128]	; (802a514 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 802a494:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a498:	a901      	add	r1, sp, #4
 802a49a:	9001      	str	r0, [sp, #4]
 802a49c:	2000      	movs	r0, #0
 802a49e:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a4a2:	f88d 0008 	strb.w	r0, [sp, #8]
 802a4a6:	6920      	ldr	r0, [r4, #16]
 802a4a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a4ac:	6803      	ldr	r3, [r0, #0]
 802a4ae:	689b      	ldr	r3, [r3, #8]
 802a4b0:	4798      	blx	r3
 802a4b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a4b6:	1cd3      	adds	r3, r2, #3
 802a4b8:	b29b      	uxth	r3, r3
 802a4ba:	2b06      	cmp	r3, #6
 802a4bc:	d913      	bls.n	802a4e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 802a4be:	4815      	ldr	r0, [pc, #84]	; (802a514 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 802a4c0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a4c4:	9001      	str	r0, [sp, #4]
 802a4c6:	2001      	movs	r0, #1
 802a4c8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a4cc:	f88d 0008 	strb.w	r0, [sp, #8]
 802a4d0:	6920      	ldr	r0, [r4, #16]
 802a4d2:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a4d6:	a901      	add	r1, sp, #4
 802a4d8:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a4dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a4e0:	6803      	ldr	r3, [r0, #0]
 802a4e2:	689b      	ldr	r3, [r3, #8]
 802a4e4:	4798      	blx	r3
 802a4e6:	4b0c      	ldr	r3, [pc, #48]	; (802a518 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xac>)
 802a4e8:	a901      	add	r1, sp, #4
 802a4ea:	6920      	ldr	r0, [r4, #16]
 802a4ec:	9301      	str	r3, [sp, #4]
 802a4ee:	2300      	movs	r3, #0
 802a4f0:	f88d 5008 	strb.w	r5, [sp, #8]
 802a4f4:	f8ad 700a 	strh.w	r7, [sp, #10]
 802a4f8:	f8ad 600c 	strh.w	r6, [sp, #12]
 802a4fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a500:	6803      	ldr	r3, [r0, #0]
 802a502:	681b      	ldr	r3, [r3, #0]
 802a504:	4798      	blx	r3
 802a506:	b005      	add	sp, #20
 802a508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a50a:	2900      	cmp	r1, #0
 802a50c:	d1eb      	bne.n	802a4e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 802a50e:	80a2      	strh	r2, [r4, #4]
 802a510:	80c6      	strh	r6, [r0, #6]
 802a512:	e7e8      	b.n	802a4e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 802a514:	0802f1d4 	.word	0x0802f1d4
 802a518:	0802cec4 	.word	0x0802cec4

0802a51c <__cxa_pure_virtual>:
 802a51c:	b508      	push	{r3, lr}
 802a51e:	f000 f811 	bl	802a544 <_ZSt9terminatev>

0802a522 <_ZdlPvj>:
 802a522:	f000 b800 	b.w	802a526 <_ZdlPv>

0802a526 <_ZdlPv>:
 802a526:	f000 be4f 	b.w	802b1c8 <free>

0802a52a <_ZN10__cxxabiv111__terminateEPFvvE>:
 802a52a:	b508      	push	{r3, lr}
 802a52c:	4780      	blx	r0
 802a52e:	f000 fddb 	bl	802b0e8 <abort>
	...

0802a534 <_ZSt13get_terminatev>:
 802a534:	4b02      	ldr	r3, [pc, #8]	; (802a540 <_ZSt13get_terminatev+0xc>)
 802a536:	6818      	ldr	r0, [r3, #0]
 802a538:	f3bf 8f5b 	dmb	ish
 802a53c:	4770      	bx	lr
 802a53e:	bf00      	nop
 802a540:	20000070 	.word	0x20000070

0802a544 <_ZSt9terminatev>:
 802a544:	b508      	push	{r3, lr}
 802a546:	f7ff fff5 	bl	802a534 <_ZSt13get_terminatev>
 802a54a:	f7ff ffee 	bl	802a52a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0802a550 <ceilf>:
 802a550:	ee10 3a10 	vmov	r3, s0
 802a554:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802a558:	0dca      	lsrs	r2, r1, #23
 802a55a:	3a7f      	subs	r2, #127	; 0x7f
 802a55c:	2a16      	cmp	r2, #22
 802a55e:	dc2a      	bgt.n	802a5b6 <ceilf+0x66>
 802a560:	2a00      	cmp	r2, #0
 802a562:	da11      	bge.n	802a588 <ceilf+0x38>
 802a564:	eddf 7a18 	vldr	s15, [pc, #96]	; 802a5c8 <ceilf+0x78>
 802a568:	ee30 0a27 	vadd.f32	s0, s0, s15
 802a56c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802a570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a574:	dd05      	ble.n	802a582 <ceilf+0x32>
 802a576:	2b00      	cmp	r3, #0
 802a578:	db23      	blt.n	802a5c2 <ceilf+0x72>
 802a57a:	2900      	cmp	r1, #0
 802a57c:	bf18      	it	ne
 802a57e:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 802a582:	ee00 3a10 	vmov	s0, r3
 802a586:	4770      	bx	lr
 802a588:	4910      	ldr	r1, [pc, #64]	; (802a5cc <ceilf+0x7c>)
 802a58a:	4111      	asrs	r1, r2
 802a58c:	420b      	tst	r3, r1
 802a58e:	d0fa      	beq.n	802a586 <ceilf+0x36>
 802a590:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802a5c8 <ceilf+0x78>
 802a594:	ee30 0a27 	vadd.f32	s0, s0, s15
 802a598:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802a59c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a5a0:	ddef      	ble.n	802a582 <ceilf+0x32>
 802a5a2:	2b00      	cmp	r3, #0
 802a5a4:	bfc2      	ittt	gt
 802a5a6:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 802a5aa:	fa40 f202 	asrgt.w	r2, r0, r2
 802a5ae:	189b      	addgt	r3, r3, r2
 802a5b0:	ea23 0301 	bic.w	r3, r3, r1
 802a5b4:	e7e5      	b.n	802a582 <ceilf+0x32>
 802a5b6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802a5ba:	d3e4      	bcc.n	802a586 <ceilf+0x36>
 802a5bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 802a5c0:	4770      	bx	lr
 802a5c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a5c6:	e7dc      	b.n	802a582 <ceilf+0x32>
 802a5c8:	7149f2ca 	.word	0x7149f2ca
 802a5cc:	007fffff 	.word	0x007fffff

0802a5d0 <cosf>:
 802a5d0:	ee10 3a10 	vmov	r3, s0
 802a5d4:	b507      	push	{r0, r1, r2, lr}
 802a5d6:	4a1c      	ldr	r2, [pc, #112]	; (802a648 <cosf+0x78>)
 802a5d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802a5dc:	4293      	cmp	r3, r2
 802a5de:	dc04      	bgt.n	802a5ea <cosf+0x1a>
 802a5e0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 802a64c <cosf+0x7c>
 802a5e4:	f000 f9e4 	bl	802a9b0 <__kernel_cosf>
 802a5e8:	e004      	b.n	802a5f4 <cosf+0x24>
 802a5ea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802a5ee:	db04      	blt.n	802a5fa <cosf+0x2a>
 802a5f0:	ee30 0a40 	vsub.f32	s0, s0, s0
 802a5f4:	b003      	add	sp, #12
 802a5f6:	f85d fb04 	ldr.w	pc, [sp], #4
 802a5fa:	4668      	mov	r0, sp
 802a5fc:	f000 f8ac 	bl	802a758 <__ieee754_rem_pio2f>
 802a600:	f000 0003 	and.w	r0, r0, #3
 802a604:	2801      	cmp	r0, #1
 802a606:	d007      	beq.n	802a618 <cosf+0x48>
 802a608:	2802      	cmp	r0, #2
 802a60a:	d00e      	beq.n	802a62a <cosf+0x5a>
 802a60c:	b9a0      	cbnz	r0, 802a638 <cosf+0x68>
 802a60e:	eddd 0a01 	vldr	s1, [sp, #4]
 802a612:	ed9d 0a00 	vldr	s0, [sp]
 802a616:	e7e5      	b.n	802a5e4 <cosf+0x14>
 802a618:	eddd 0a01 	vldr	s1, [sp, #4]
 802a61c:	ed9d 0a00 	vldr	s0, [sp]
 802a620:	f000 fca6 	bl	802af70 <__kernel_sinf>
 802a624:	eeb1 0a40 	vneg.f32	s0, s0
 802a628:	e7e4      	b.n	802a5f4 <cosf+0x24>
 802a62a:	eddd 0a01 	vldr	s1, [sp, #4]
 802a62e:	ed9d 0a00 	vldr	s0, [sp]
 802a632:	f000 f9bd 	bl	802a9b0 <__kernel_cosf>
 802a636:	e7f5      	b.n	802a624 <cosf+0x54>
 802a638:	2001      	movs	r0, #1
 802a63a:	eddd 0a01 	vldr	s1, [sp, #4]
 802a63e:	ed9d 0a00 	vldr	s0, [sp]
 802a642:	f000 fc95 	bl	802af70 <__kernel_sinf>
 802a646:	e7d5      	b.n	802a5f4 <cosf+0x24>
 802a648:	3f490fd8 	.word	0x3f490fd8
 802a64c:	00000000 	.word	0x00000000

0802a650 <floorf>:
 802a650:	ee10 3a10 	vmov	r3, s0
 802a654:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802a658:	0dca      	lsrs	r2, r1, #23
 802a65a:	3a7f      	subs	r2, #127	; 0x7f
 802a65c:	2a16      	cmp	r2, #22
 802a65e:	dc2a      	bgt.n	802a6b6 <floorf+0x66>
 802a660:	2a00      	cmp	r2, #0
 802a662:	da11      	bge.n	802a688 <floorf+0x38>
 802a664:	eddf 7a18 	vldr	s15, [pc, #96]	; 802a6c8 <floorf+0x78>
 802a668:	ee30 0a27 	vadd.f32	s0, s0, s15
 802a66c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802a670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a674:	dd05      	ble.n	802a682 <floorf+0x32>
 802a676:	2b00      	cmp	r3, #0
 802a678:	da23      	bge.n	802a6c2 <floorf+0x72>
 802a67a:	4a14      	ldr	r2, [pc, #80]	; (802a6cc <floorf+0x7c>)
 802a67c:	2900      	cmp	r1, #0
 802a67e:	bf18      	it	ne
 802a680:	4613      	movne	r3, r2
 802a682:	ee00 3a10 	vmov	s0, r3
 802a686:	4770      	bx	lr
 802a688:	4911      	ldr	r1, [pc, #68]	; (802a6d0 <floorf+0x80>)
 802a68a:	4111      	asrs	r1, r2
 802a68c:	420b      	tst	r3, r1
 802a68e:	d0fa      	beq.n	802a686 <floorf+0x36>
 802a690:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802a6c8 <floorf+0x78>
 802a694:	ee30 0a27 	vadd.f32	s0, s0, s15
 802a698:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802a69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a6a0:	ddef      	ble.n	802a682 <floorf+0x32>
 802a6a2:	2b00      	cmp	r3, #0
 802a6a4:	bfbe      	ittt	lt
 802a6a6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802a6aa:	fa40 f202 	asrlt.w	r2, r0, r2
 802a6ae:	189b      	addlt	r3, r3, r2
 802a6b0:	ea23 0301 	bic.w	r3, r3, r1
 802a6b4:	e7e5      	b.n	802a682 <floorf+0x32>
 802a6b6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802a6ba:	d3e4      	bcc.n	802a686 <floorf+0x36>
 802a6bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 802a6c0:	4770      	bx	lr
 802a6c2:	2300      	movs	r3, #0
 802a6c4:	e7dd      	b.n	802a682 <floorf+0x32>
 802a6c6:	bf00      	nop
 802a6c8:	7149f2ca 	.word	0x7149f2ca
 802a6cc:	bf800000 	.word	0xbf800000
 802a6d0:	007fffff 	.word	0x007fffff

0802a6d4 <sinf>:
 802a6d4:	ee10 3a10 	vmov	r3, s0
 802a6d8:	b507      	push	{r0, r1, r2, lr}
 802a6da:	4a1d      	ldr	r2, [pc, #116]	; (802a750 <sinf+0x7c>)
 802a6dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802a6e0:	4293      	cmp	r3, r2
 802a6e2:	dc05      	bgt.n	802a6f0 <sinf+0x1c>
 802a6e4:	eddf 0a1b 	vldr	s1, [pc, #108]	; 802a754 <sinf+0x80>
 802a6e8:	2000      	movs	r0, #0
 802a6ea:	f000 fc41 	bl	802af70 <__kernel_sinf>
 802a6ee:	e004      	b.n	802a6fa <sinf+0x26>
 802a6f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802a6f4:	db04      	blt.n	802a700 <sinf+0x2c>
 802a6f6:	ee30 0a40 	vsub.f32	s0, s0, s0
 802a6fa:	b003      	add	sp, #12
 802a6fc:	f85d fb04 	ldr.w	pc, [sp], #4
 802a700:	4668      	mov	r0, sp
 802a702:	f000 f829 	bl	802a758 <__ieee754_rem_pio2f>
 802a706:	f000 0003 	and.w	r0, r0, #3
 802a70a:	2801      	cmp	r0, #1
 802a70c:	d008      	beq.n	802a720 <sinf+0x4c>
 802a70e:	2802      	cmp	r0, #2
 802a710:	d00d      	beq.n	802a72e <sinf+0x5a>
 802a712:	b9b0      	cbnz	r0, 802a742 <sinf+0x6e>
 802a714:	2001      	movs	r0, #1
 802a716:	eddd 0a01 	vldr	s1, [sp, #4]
 802a71a:	ed9d 0a00 	vldr	s0, [sp]
 802a71e:	e7e4      	b.n	802a6ea <sinf+0x16>
 802a720:	eddd 0a01 	vldr	s1, [sp, #4]
 802a724:	ed9d 0a00 	vldr	s0, [sp]
 802a728:	f000 f942 	bl	802a9b0 <__kernel_cosf>
 802a72c:	e7e5      	b.n	802a6fa <sinf+0x26>
 802a72e:	2001      	movs	r0, #1
 802a730:	eddd 0a01 	vldr	s1, [sp, #4]
 802a734:	ed9d 0a00 	vldr	s0, [sp]
 802a738:	f000 fc1a 	bl	802af70 <__kernel_sinf>
 802a73c:	eeb1 0a40 	vneg.f32	s0, s0
 802a740:	e7db      	b.n	802a6fa <sinf+0x26>
 802a742:	eddd 0a01 	vldr	s1, [sp, #4]
 802a746:	ed9d 0a00 	vldr	s0, [sp]
 802a74a:	f000 f931 	bl	802a9b0 <__kernel_cosf>
 802a74e:	e7f5      	b.n	802a73c <sinf+0x68>
 802a750:	3f490fd8 	.word	0x3f490fd8
 802a754:	00000000 	.word	0x00000000

0802a758 <__ieee754_rem_pio2f>:
 802a758:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a75a:	ee10 6a10 	vmov	r6, s0
 802a75e:	4b86      	ldr	r3, [pc, #536]	; (802a978 <__ieee754_rem_pio2f+0x220>)
 802a760:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 802a764:	429c      	cmp	r4, r3
 802a766:	b087      	sub	sp, #28
 802a768:	4605      	mov	r5, r0
 802a76a:	dc05      	bgt.n	802a778 <__ieee754_rem_pio2f+0x20>
 802a76c:	2300      	movs	r3, #0
 802a76e:	ed85 0a00 	vstr	s0, [r5]
 802a772:	6043      	str	r3, [r0, #4]
 802a774:	2000      	movs	r0, #0
 802a776:	e020      	b.n	802a7ba <__ieee754_rem_pio2f+0x62>
 802a778:	4b80      	ldr	r3, [pc, #512]	; (802a97c <__ieee754_rem_pio2f+0x224>)
 802a77a:	429c      	cmp	r4, r3
 802a77c:	dc38      	bgt.n	802a7f0 <__ieee754_rem_pio2f+0x98>
 802a77e:	2e00      	cmp	r6, #0
 802a780:	f024 040f 	bic.w	r4, r4, #15
 802a784:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 802a980 <__ieee754_rem_pio2f+0x228>
 802a788:	4b7e      	ldr	r3, [pc, #504]	; (802a984 <__ieee754_rem_pio2f+0x22c>)
 802a78a:	dd18      	ble.n	802a7be <__ieee754_rem_pio2f+0x66>
 802a78c:	429c      	cmp	r4, r3
 802a78e:	ee70 7a47 	vsub.f32	s15, s0, s14
 802a792:	bf09      	itett	eq
 802a794:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 802a988 <__ieee754_rem_pio2f+0x230>
 802a798:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 802a98c <__ieee754_rem_pio2f+0x234>
 802a79c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 802a7a0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 802a990 <__ieee754_rem_pio2f+0x238>
 802a7a4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802a7a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802a7ac:	edc0 6a00 	vstr	s13, [r0]
 802a7b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a7b4:	edc0 7a01 	vstr	s15, [r0, #4]
 802a7b8:	2001      	movs	r0, #1
 802a7ba:	b007      	add	sp, #28
 802a7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a7be:	429c      	cmp	r4, r3
 802a7c0:	ee70 7a07 	vadd.f32	s15, s0, s14
 802a7c4:	bf09      	itett	eq
 802a7c6:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 802a988 <__ieee754_rem_pio2f+0x230>
 802a7ca:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 802a98c <__ieee754_rem_pio2f+0x234>
 802a7ce:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 802a7d2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 802a990 <__ieee754_rem_pio2f+0x238>
 802a7d6:	ee77 6a87 	vadd.f32	s13, s15, s14
 802a7da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802a7de:	edc0 6a00 	vstr	s13, [r0]
 802a7e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 802a7e6:	edc0 7a01 	vstr	s15, [r0, #4]
 802a7ea:	f04f 30ff 	mov.w	r0, #4294967295
 802a7ee:	e7e4      	b.n	802a7ba <__ieee754_rem_pio2f+0x62>
 802a7f0:	4b68      	ldr	r3, [pc, #416]	; (802a994 <__ieee754_rem_pio2f+0x23c>)
 802a7f2:	429c      	cmp	r4, r3
 802a7f4:	dc71      	bgt.n	802a8da <__ieee754_rem_pio2f+0x182>
 802a7f6:	f000 fc03 	bl	802b000 <fabsf>
 802a7fa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802a998 <__ieee754_rem_pio2f+0x240>
 802a7fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802a802:	eee0 7a07 	vfma.f32	s15, s0, s14
 802a806:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802a80a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 802a80e:	ee17 0a90 	vmov	r0, s15
 802a812:	eddf 7a5b 	vldr	s15, [pc, #364]	; 802a980 <__ieee754_rem_pio2f+0x228>
 802a816:	eeb1 7a46 	vneg.f32	s14, s12
 802a81a:	eea7 0a27 	vfma.f32	s0, s14, s15
 802a81e:	281f      	cmp	r0, #31
 802a820:	eddf 7a5a 	vldr	s15, [pc, #360]	; 802a98c <__ieee754_rem_pio2f+0x234>
 802a824:	ee66 7a27 	vmul.f32	s15, s12, s15
 802a828:	ee70 6a67 	vsub.f32	s13, s0, s15
 802a82c:	ee16 3a90 	vmov	r3, s13
 802a830:	dc1c      	bgt.n	802a86c <__ieee754_rem_pio2f+0x114>
 802a832:	1e47      	subs	r7, r0, #1
 802a834:	4959      	ldr	r1, [pc, #356]	; (802a99c <__ieee754_rem_pio2f+0x244>)
 802a836:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802a83a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 802a83e:	428a      	cmp	r2, r1
 802a840:	d014      	beq.n	802a86c <__ieee754_rem_pio2f+0x114>
 802a842:	602b      	str	r3, [r5, #0]
 802a844:	ed95 7a00 	vldr	s14, [r5]
 802a848:	ee30 0a47 	vsub.f32	s0, s0, s14
 802a84c:	2e00      	cmp	r6, #0
 802a84e:	ee30 0a67 	vsub.f32	s0, s0, s15
 802a852:	ed85 0a01 	vstr	s0, [r5, #4]
 802a856:	dab0      	bge.n	802a7ba <__ieee754_rem_pio2f+0x62>
 802a858:	eeb1 7a47 	vneg.f32	s14, s14
 802a85c:	eeb1 0a40 	vneg.f32	s0, s0
 802a860:	ed85 7a00 	vstr	s14, [r5]
 802a864:	ed85 0a01 	vstr	s0, [r5, #4]
 802a868:	4240      	negs	r0, r0
 802a86a:	e7a6      	b.n	802a7ba <__ieee754_rem_pio2f+0x62>
 802a86c:	15e4      	asrs	r4, r4, #23
 802a86e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802a872:	1aa2      	subs	r2, r4, r2
 802a874:	2a08      	cmp	r2, #8
 802a876:	dde4      	ble.n	802a842 <__ieee754_rem_pio2f+0xea>
 802a878:	eddf 7a43 	vldr	s15, [pc, #268]	; 802a988 <__ieee754_rem_pio2f+0x230>
 802a87c:	eef0 6a40 	vmov.f32	s13, s0
 802a880:	eee7 6a27 	vfma.f32	s13, s14, s15
 802a884:	ee30 0a66 	vsub.f32	s0, s0, s13
 802a888:	eea7 0a27 	vfma.f32	s0, s14, s15
 802a88c:	eddf 7a40 	vldr	s15, [pc, #256]	; 802a990 <__ieee754_rem_pio2f+0x238>
 802a890:	ee96 0a27 	vfnms.f32	s0, s12, s15
 802a894:	ee76 5ac0 	vsub.f32	s11, s13, s0
 802a898:	eef0 7a40 	vmov.f32	s15, s0
 802a89c:	ee15 3a90 	vmov	r3, s11
 802a8a0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802a8a4:	1aa4      	subs	r4, r4, r2
 802a8a6:	2c19      	cmp	r4, #25
 802a8a8:	dc04      	bgt.n	802a8b4 <__ieee754_rem_pio2f+0x15c>
 802a8aa:	edc5 5a00 	vstr	s11, [r5]
 802a8ae:	eeb0 0a66 	vmov.f32	s0, s13
 802a8b2:	e7c7      	b.n	802a844 <__ieee754_rem_pio2f+0xec>
 802a8b4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 802a9a0 <__ieee754_rem_pio2f+0x248>
 802a8b8:	eeb0 0a66 	vmov.f32	s0, s13
 802a8bc:	eea7 0a25 	vfma.f32	s0, s14, s11
 802a8c0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802a8c4:	eee7 7a25 	vfma.f32	s15, s14, s11
 802a8c8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 802a9a4 <__ieee754_rem_pio2f+0x24c>
 802a8cc:	eed6 7a07 	vfnms.f32	s15, s12, s14
 802a8d0:	ee30 7a67 	vsub.f32	s14, s0, s15
 802a8d4:	ed85 7a00 	vstr	s14, [r5]
 802a8d8:	e7b4      	b.n	802a844 <__ieee754_rem_pio2f+0xec>
 802a8da:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 802a8de:	db06      	blt.n	802a8ee <__ieee754_rem_pio2f+0x196>
 802a8e0:	ee70 7a40 	vsub.f32	s15, s0, s0
 802a8e4:	edc0 7a01 	vstr	s15, [r0, #4]
 802a8e8:	edc0 7a00 	vstr	s15, [r0]
 802a8ec:	e742      	b.n	802a774 <__ieee754_rem_pio2f+0x1c>
 802a8ee:	15e2      	asrs	r2, r4, #23
 802a8f0:	3a86      	subs	r2, #134	; 0x86
 802a8f2:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 802a8f6:	ee07 3a90 	vmov	s15, r3
 802a8fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802a8fe:	eddf 6a2a 	vldr	s13, [pc, #168]	; 802a9a8 <__ieee754_rem_pio2f+0x250>
 802a902:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802a906:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a90a:	ed8d 7a03 	vstr	s14, [sp, #12]
 802a90e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802a912:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802a916:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802a91a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a91e:	ed8d 7a04 	vstr	s14, [sp, #16]
 802a922:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802a926:	eef5 7a40 	vcmp.f32	s15, #0.0
 802a92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a92e:	edcd 7a05 	vstr	s15, [sp, #20]
 802a932:	d11e      	bne.n	802a972 <__ieee754_rem_pio2f+0x21a>
 802a934:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802a938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a93c:	bf0c      	ite	eq
 802a93e:	2301      	moveq	r3, #1
 802a940:	2302      	movne	r3, #2
 802a942:	491a      	ldr	r1, [pc, #104]	; (802a9ac <__ieee754_rem_pio2f+0x254>)
 802a944:	9101      	str	r1, [sp, #4]
 802a946:	2102      	movs	r1, #2
 802a948:	9100      	str	r1, [sp, #0]
 802a94a:	a803      	add	r0, sp, #12
 802a94c:	4629      	mov	r1, r5
 802a94e:	f000 f88d 	bl	802aa6c <__kernel_rem_pio2f>
 802a952:	2e00      	cmp	r6, #0
 802a954:	f6bf af31 	bge.w	802a7ba <__ieee754_rem_pio2f+0x62>
 802a958:	edd5 7a00 	vldr	s15, [r5]
 802a95c:	eef1 7a67 	vneg.f32	s15, s15
 802a960:	edc5 7a00 	vstr	s15, [r5]
 802a964:	edd5 7a01 	vldr	s15, [r5, #4]
 802a968:	eef1 7a67 	vneg.f32	s15, s15
 802a96c:	edc5 7a01 	vstr	s15, [r5, #4]
 802a970:	e77a      	b.n	802a868 <__ieee754_rem_pio2f+0x110>
 802a972:	2303      	movs	r3, #3
 802a974:	e7e5      	b.n	802a942 <__ieee754_rem_pio2f+0x1ea>
 802a976:	bf00      	nop
 802a978:	3f490fd8 	.word	0x3f490fd8
 802a97c:	4016cbe3 	.word	0x4016cbe3
 802a980:	3fc90f80 	.word	0x3fc90f80
 802a984:	3fc90fd0 	.word	0x3fc90fd0
 802a988:	37354400 	.word	0x37354400
 802a98c:	37354443 	.word	0x37354443
 802a990:	2e85a308 	.word	0x2e85a308
 802a994:	43490f80 	.word	0x43490f80
 802a998:	3f22f984 	.word	0x3f22f984
 802a99c:	080303bc 	.word	0x080303bc
 802a9a0:	2e85a300 	.word	0x2e85a300
 802a9a4:	248d3132 	.word	0x248d3132
 802a9a8:	43800000 	.word	0x43800000
 802a9ac:	0803043c 	.word	0x0803043c

0802a9b0 <__kernel_cosf>:
 802a9b0:	ee10 3a10 	vmov	r3, s0
 802a9b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802a9b8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802a9bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802a9c0:	da05      	bge.n	802a9ce <__kernel_cosf+0x1e>
 802a9c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802a9c6:	ee17 2a90 	vmov	r2, s15
 802a9ca:	2a00      	cmp	r2, #0
 802a9cc:	d03b      	beq.n	802aa46 <__kernel_cosf+0x96>
 802a9ce:	ee20 6a00 	vmul.f32	s12, s0, s0
 802a9d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802a9d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 802aa4c <__kernel_cosf+0x9c>
 802a9da:	4a1d      	ldr	r2, [pc, #116]	; (802aa50 <__kernel_cosf+0xa0>)
 802a9dc:	ee66 7a07 	vmul.f32	s15, s12, s14
 802a9e0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 802aa54 <__kernel_cosf+0xa4>
 802a9e4:	eea6 7a25 	vfma.f32	s14, s12, s11
 802a9e8:	4293      	cmp	r3, r2
 802a9ea:	eddf 5a1b 	vldr	s11, [pc, #108]	; 802aa58 <__kernel_cosf+0xa8>
 802a9ee:	eee7 5a06 	vfma.f32	s11, s14, s12
 802a9f2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 802aa5c <__kernel_cosf+0xac>
 802a9f6:	eea5 7a86 	vfma.f32	s14, s11, s12
 802a9fa:	eddf 5a19 	vldr	s11, [pc, #100]	; 802aa60 <__kernel_cosf+0xb0>
 802a9fe:	eee7 5a06 	vfma.f32	s11, s14, s12
 802aa02:	ed9f 7a18 	vldr	s14, [pc, #96]	; 802aa64 <__kernel_cosf+0xb4>
 802aa06:	eea5 7a86 	vfma.f32	s14, s11, s12
 802aa0a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 802aa0e:	ee27 7a06 	vmul.f32	s14, s14, s12
 802aa12:	eee6 0a07 	vfma.f32	s1, s12, s14
 802aa16:	dc04      	bgt.n	802aa22 <__kernel_cosf+0x72>
 802aa18:	ee77 0ae0 	vsub.f32	s1, s15, s1
 802aa1c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 802aa20:	4770      	bx	lr
 802aa22:	4a11      	ldr	r2, [pc, #68]	; (802aa68 <__kernel_cosf+0xb8>)
 802aa24:	4293      	cmp	r3, r2
 802aa26:	bfda      	itte	le
 802aa28:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 802aa2c:	ee07 3a10 	vmovle	s14, r3
 802aa30:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 802aa34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802aa38:	ee36 0ac7 	vsub.f32	s0, s13, s14
 802aa3c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802aa40:	ee30 0a67 	vsub.f32	s0, s0, s15
 802aa44:	4770      	bx	lr
 802aa46:	eeb0 0a66 	vmov.f32	s0, s13
 802aa4a:	4770      	bx	lr
 802aa4c:	ad47d74e 	.word	0xad47d74e
 802aa50:	3e999999 	.word	0x3e999999
 802aa54:	310f74f6 	.word	0x310f74f6
 802aa58:	b493f27c 	.word	0xb493f27c
 802aa5c:	37d00d01 	.word	0x37d00d01
 802aa60:	bab60b61 	.word	0xbab60b61
 802aa64:	3d2aaaab 	.word	0x3d2aaaab
 802aa68:	3f480000 	.word	0x3f480000

0802aa6c <__kernel_rem_pio2f>:
 802aa6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aa70:	ed2d 8b04 	vpush	{d8-d9}
 802aa74:	b0d7      	sub	sp, #348	; 0x15c
 802aa76:	469b      	mov	fp, r3
 802aa78:	460e      	mov	r6, r1
 802aa7a:	4bbe      	ldr	r3, [pc, #760]	; (802ad74 <__kernel_rem_pio2f+0x308>)
 802aa7c:	9964      	ldr	r1, [sp, #400]	; 0x190
 802aa7e:	9002      	str	r0, [sp, #8]
 802aa80:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 802aa84:	9865      	ldr	r0, [sp, #404]	; 0x194
 802aa86:	ed9f 7abf 	vldr	s14, [pc, #764]	; 802ad84 <__kernel_rem_pio2f+0x318>
 802aa8a:	1ed1      	subs	r1, r2, #3
 802aa8c:	2308      	movs	r3, #8
 802aa8e:	fb91 f1f3 	sdiv	r1, r1, r3
 802aa92:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802aa96:	f10b 3aff 	add.w	sl, fp, #4294967295
 802aa9a:	1c4c      	adds	r4, r1, #1
 802aa9c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 802aaa0:	eba1 050a 	sub.w	r5, r1, sl
 802aaa4:	aa1a      	add	r2, sp, #104	; 0x68
 802aaa6:	eb09 070a 	add.w	r7, r9, sl
 802aaaa:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 802aaae:	4696      	mov	lr, r2
 802aab0:	2300      	movs	r3, #0
 802aab2:	42bb      	cmp	r3, r7
 802aab4:	dd0f      	ble.n	802aad6 <__kernel_rem_pio2f+0x6a>
 802aab6:	af42      	add	r7, sp, #264	; 0x108
 802aab8:	2200      	movs	r2, #0
 802aaba:	454a      	cmp	r2, r9
 802aabc:	dc27      	bgt.n	802ab0e <__kernel_rem_pio2f+0xa2>
 802aabe:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 802aac2:	eb0b 0302 	add.w	r3, fp, r2
 802aac6:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 802aaca:	9d02      	ldr	r5, [sp, #8]
 802aacc:	eddf 7aad 	vldr	s15, [pc, #692]	; 802ad84 <__kernel_rem_pio2f+0x318>
 802aad0:	f04f 0c00 	mov.w	ip, #0
 802aad4:	e015      	b.n	802ab02 <__kernel_rem_pio2f+0x96>
 802aad6:	42dd      	cmn	r5, r3
 802aad8:	bf5d      	ittte	pl
 802aada:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 802aade:	ee07 2a90 	vmovpl	s15, r2
 802aae2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802aae6:	eef0 7a47 	vmovmi.f32	s15, s14
 802aaea:	ecee 7a01 	vstmia	lr!, {s15}
 802aaee:	3301      	adds	r3, #1
 802aaf0:	e7df      	b.n	802aab2 <__kernel_rem_pio2f+0x46>
 802aaf2:	ecf5 6a01 	vldmia	r5!, {s13}
 802aaf6:	ed33 7a01 	vldmdb	r3!, {s14}
 802aafa:	eee6 7a87 	vfma.f32	s15, s13, s14
 802aafe:	f10c 0c01 	add.w	ip, ip, #1
 802ab02:	45d4      	cmp	ip, sl
 802ab04:	ddf5      	ble.n	802aaf2 <__kernel_rem_pio2f+0x86>
 802ab06:	ece7 7a01 	vstmia	r7!, {s15}
 802ab0a:	3201      	adds	r2, #1
 802ab0c:	e7d5      	b.n	802aaba <__kernel_rem_pio2f+0x4e>
 802ab0e:	ab06      	add	r3, sp, #24
 802ab10:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 802ab14:	9304      	str	r3, [sp, #16]
 802ab16:	eddf 8a9a 	vldr	s17, [pc, #616]	; 802ad80 <__kernel_rem_pio2f+0x314>
 802ab1a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 802ad7c <__kernel_rem_pio2f+0x310>
 802ab1e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 802ab22:	9303      	str	r3, [sp, #12]
 802ab24:	464d      	mov	r5, r9
 802ab26:	ab56      	add	r3, sp, #344	; 0x158
 802ab28:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 802ab2c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 802ab30:	3f01      	subs	r7, #1
 802ab32:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 802ab36:	00bf      	lsls	r7, r7, #2
 802ab38:	ab56      	add	r3, sp, #344	; 0x158
 802ab3a:	19da      	adds	r2, r3, r7
 802ab3c:	3a4c      	subs	r2, #76	; 0x4c
 802ab3e:	2300      	movs	r3, #0
 802ab40:	1ae9      	subs	r1, r5, r3
 802ab42:	2900      	cmp	r1, #0
 802ab44:	dc4c      	bgt.n	802abe0 <__kernel_rem_pio2f+0x174>
 802ab46:	4620      	mov	r0, r4
 802ab48:	f000 fa62 	bl	802b010 <scalbnf>
 802ab4c:	eeb0 8a40 	vmov.f32	s16, s0
 802ab50:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802ab54:	ee28 0a00 	vmul.f32	s0, s16, s0
 802ab58:	f7ff fd7a 	bl	802a650 <floorf>
 802ab5c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 802ab60:	eea0 8a67 	vfms.f32	s16, s0, s15
 802ab64:	2c00      	cmp	r4, #0
 802ab66:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802ab6a:	edcd 7a01 	vstr	s15, [sp, #4]
 802ab6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802ab72:	ee38 8a67 	vsub.f32	s16, s16, s15
 802ab76:	dd48      	ble.n	802ac0a <__kernel_rem_pio2f+0x19e>
 802ab78:	1e69      	subs	r1, r5, #1
 802ab7a:	ab06      	add	r3, sp, #24
 802ab7c:	f1c4 0008 	rsb	r0, r4, #8
 802ab80:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 802ab84:	9a01      	ldr	r2, [sp, #4]
 802ab86:	fa4c f300 	asr.w	r3, ip, r0
 802ab8a:	441a      	add	r2, r3
 802ab8c:	4083      	lsls	r3, r0
 802ab8e:	9201      	str	r2, [sp, #4]
 802ab90:	ebac 0203 	sub.w	r2, ip, r3
 802ab94:	ab06      	add	r3, sp, #24
 802ab96:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 802ab9a:	f1c4 0307 	rsb	r3, r4, #7
 802ab9e:	fa42 f803 	asr.w	r8, r2, r3
 802aba2:	f1b8 0f00 	cmp.w	r8, #0
 802aba6:	dd41      	ble.n	802ac2c <__kernel_rem_pio2f+0x1c0>
 802aba8:	9b01      	ldr	r3, [sp, #4]
 802abaa:	2000      	movs	r0, #0
 802abac:	3301      	adds	r3, #1
 802abae:	9301      	str	r3, [sp, #4]
 802abb0:	4601      	mov	r1, r0
 802abb2:	4285      	cmp	r5, r0
 802abb4:	dc6d      	bgt.n	802ac92 <__kernel_rem_pio2f+0x226>
 802abb6:	2c00      	cmp	r4, #0
 802abb8:	dd04      	ble.n	802abc4 <__kernel_rem_pio2f+0x158>
 802abba:	2c01      	cmp	r4, #1
 802abbc:	d07e      	beq.n	802acbc <__kernel_rem_pio2f+0x250>
 802abbe:	2c02      	cmp	r4, #2
 802abc0:	f000 8086 	beq.w	802acd0 <__kernel_rem_pio2f+0x264>
 802abc4:	f1b8 0f02 	cmp.w	r8, #2
 802abc8:	d130      	bne.n	802ac2c <__kernel_rem_pio2f+0x1c0>
 802abca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802abce:	ee30 8a48 	vsub.f32	s16, s0, s16
 802abd2:	b359      	cbz	r1, 802ac2c <__kernel_rem_pio2f+0x1c0>
 802abd4:	4620      	mov	r0, r4
 802abd6:	f000 fa1b 	bl	802b010 <scalbnf>
 802abda:	ee38 8a40 	vsub.f32	s16, s16, s0
 802abde:	e025      	b.n	802ac2c <__kernel_rem_pio2f+0x1c0>
 802abe0:	ee60 7a28 	vmul.f32	s15, s0, s17
 802abe4:	a806      	add	r0, sp, #24
 802abe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802abea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802abee:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802abf2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802abf6:	ee10 1a10 	vmov	r1, s0
 802abfa:	ed32 0a01 	vldmdb	r2!, {s0}
 802abfe:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 802ac02:	ee37 0a80 	vadd.f32	s0, s15, s0
 802ac06:	3301      	adds	r3, #1
 802ac08:	e79a      	b.n	802ab40 <__kernel_rem_pio2f+0xd4>
 802ac0a:	d106      	bne.n	802ac1a <__kernel_rem_pio2f+0x1ae>
 802ac0c:	1e6b      	subs	r3, r5, #1
 802ac0e:	aa06      	add	r2, sp, #24
 802ac10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802ac14:	ea4f 2822 	mov.w	r8, r2, asr #8
 802ac18:	e7c3      	b.n	802aba2 <__kernel_rem_pio2f+0x136>
 802ac1a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802ac1e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802ac22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ac26:	da31      	bge.n	802ac8c <__kernel_rem_pio2f+0x220>
 802ac28:	f04f 0800 	mov.w	r8, #0
 802ac2c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802ac30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ac34:	f040 80a8 	bne.w	802ad88 <__kernel_rem_pio2f+0x31c>
 802ac38:	1e6b      	subs	r3, r5, #1
 802ac3a:	4618      	mov	r0, r3
 802ac3c:	2200      	movs	r2, #0
 802ac3e:	4548      	cmp	r0, r9
 802ac40:	da4d      	bge.n	802acde <__kernel_rem_pio2f+0x272>
 802ac42:	2a00      	cmp	r2, #0
 802ac44:	f000 8087 	beq.w	802ad56 <__kernel_rem_pio2f+0x2ea>
 802ac48:	aa06      	add	r2, sp, #24
 802ac4a:	3c08      	subs	r4, #8
 802ac4c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802ac50:	2900      	cmp	r1, #0
 802ac52:	f000 808d 	beq.w	802ad70 <__kernel_rem_pio2f+0x304>
 802ac56:	4620      	mov	r0, r4
 802ac58:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802ac5c:	9302      	str	r3, [sp, #8]
 802ac5e:	f000 f9d7 	bl	802b010 <scalbnf>
 802ac62:	9b02      	ldr	r3, [sp, #8]
 802ac64:	ed9f 7a46 	vldr	s14, [pc, #280]	; 802ad80 <__kernel_rem_pio2f+0x314>
 802ac68:	0099      	lsls	r1, r3, #2
 802ac6a:	aa42      	add	r2, sp, #264	; 0x108
 802ac6c:	1850      	adds	r0, r2, r1
 802ac6e:	1d05      	adds	r5, r0, #4
 802ac70:	461c      	mov	r4, r3
 802ac72:	2c00      	cmp	r4, #0
 802ac74:	f280 80b8 	bge.w	802ade8 <__kernel_rem_pio2f+0x37c>
 802ac78:	2500      	movs	r5, #0
 802ac7a:	1b5c      	subs	r4, r3, r5
 802ac7c:	2c00      	cmp	r4, #0
 802ac7e:	f2c0 80d8 	blt.w	802ae32 <__kernel_rem_pio2f+0x3c6>
 802ac82:	4f3d      	ldr	r7, [pc, #244]	; (802ad78 <__kernel_rem_pio2f+0x30c>)
 802ac84:	eddf 7a3f 	vldr	s15, [pc, #252]	; 802ad84 <__kernel_rem_pio2f+0x318>
 802ac88:	2400      	movs	r4, #0
 802ac8a:	e0c6      	b.n	802ae1a <__kernel_rem_pio2f+0x3ae>
 802ac8c:	f04f 0802 	mov.w	r8, #2
 802ac90:	e78a      	b.n	802aba8 <__kernel_rem_pio2f+0x13c>
 802ac92:	ab06      	add	r3, sp, #24
 802ac94:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802ac98:	b949      	cbnz	r1, 802acae <__kernel_rem_pio2f+0x242>
 802ac9a:	b12b      	cbz	r3, 802aca8 <__kernel_rem_pio2f+0x23c>
 802ac9c:	aa06      	add	r2, sp, #24
 802ac9e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802aca2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802aca6:	2301      	movs	r3, #1
 802aca8:	3001      	adds	r0, #1
 802acaa:	4619      	mov	r1, r3
 802acac:	e781      	b.n	802abb2 <__kernel_rem_pio2f+0x146>
 802acae:	aa06      	add	r2, sp, #24
 802acb0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 802acb4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802acb8:	460b      	mov	r3, r1
 802acba:	e7f5      	b.n	802aca8 <__kernel_rem_pio2f+0x23c>
 802acbc:	1e68      	subs	r0, r5, #1
 802acbe:	ab06      	add	r3, sp, #24
 802acc0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802acc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802acc8:	aa06      	add	r2, sp, #24
 802acca:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802acce:	e779      	b.n	802abc4 <__kernel_rem_pio2f+0x158>
 802acd0:	1e68      	subs	r0, r5, #1
 802acd2:	ab06      	add	r3, sp, #24
 802acd4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802acd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802acdc:	e7f4      	b.n	802acc8 <__kernel_rem_pio2f+0x25c>
 802acde:	a906      	add	r1, sp, #24
 802ace0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802ace4:	3801      	subs	r0, #1
 802ace6:	430a      	orrs	r2, r1
 802ace8:	e7a9      	b.n	802ac3e <__kernel_rem_pio2f+0x1d2>
 802acea:	f10c 0c01 	add.w	ip, ip, #1
 802acee:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802acf2:	2a00      	cmp	r2, #0
 802acf4:	d0f9      	beq.n	802acea <__kernel_rem_pio2f+0x27e>
 802acf6:	eb0b 0305 	add.w	r3, fp, r5
 802acfa:	aa1a      	add	r2, sp, #104	; 0x68
 802acfc:	009b      	lsls	r3, r3, #2
 802acfe:	1898      	adds	r0, r3, r2
 802ad00:	3004      	adds	r0, #4
 802ad02:	1c69      	adds	r1, r5, #1
 802ad04:	3704      	adds	r7, #4
 802ad06:	2200      	movs	r2, #0
 802ad08:	4465      	add	r5, ip
 802ad0a:	9005      	str	r0, [sp, #20]
 802ad0c:	428d      	cmp	r5, r1
 802ad0e:	f6ff af0a 	blt.w	802ab26 <__kernel_rem_pio2f+0xba>
 802ad12:	a81a      	add	r0, sp, #104	; 0x68
 802ad14:	eb02 0c03 	add.w	ip, r2, r3
 802ad18:	4484      	add	ip, r0
 802ad1a:	9803      	ldr	r0, [sp, #12]
 802ad1c:	f8dd e008 	ldr.w	lr, [sp, #8]
 802ad20:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 802ad24:	9001      	str	r0, [sp, #4]
 802ad26:	ee07 0a90 	vmov	s15, r0
 802ad2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802ad2e:	9805      	ldr	r0, [sp, #20]
 802ad30:	edcc 7a00 	vstr	s15, [ip]
 802ad34:	eddf 7a13 	vldr	s15, [pc, #76]	; 802ad84 <__kernel_rem_pio2f+0x318>
 802ad38:	eb00 0802 	add.w	r8, r0, r2
 802ad3c:	f04f 0c00 	mov.w	ip, #0
 802ad40:	45d4      	cmp	ip, sl
 802ad42:	dd0c      	ble.n	802ad5e <__kernel_rem_pio2f+0x2f2>
 802ad44:	eb02 0c07 	add.w	ip, r2, r7
 802ad48:	a842      	add	r0, sp, #264	; 0x108
 802ad4a:	4484      	add	ip, r0
 802ad4c:	edcc 7a01 	vstr	s15, [ip, #4]
 802ad50:	3101      	adds	r1, #1
 802ad52:	3204      	adds	r2, #4
 802ad54:	e7da      	b.n	802ad0c <__kernel_rem_pio2f+0x2a0>
 802ad56:	9b04      	ldr	r3, [sp, #16]
 802ad58:	f04f 0c01 	mov.w	ip, #1
 802ad5c:	e7c7      	b.n	802acee <__kernel_rem_pio2f+0x282>
 802ad5e:	ecfe 6a01 	vldmia	lr!, {s13}
 802ad62:	ed38 7a01 	vldmdb	r8!, {s14}
 802ad66:	f10c 0c01 	add.w	ip, ip, #1
 802ad6a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802ad6e:	e7e7      	b.n	802ad40 <__kernel_rem_pio2f+0x2d4>
 802ad70:	3b01      	subs	r3, #1
 802ad72:	e769      	b.n	802ac48 <__kernel_rem_pio2f+0x1dc>
 802ad74:	08030780 	.word	0x08030780
 802ad78:	08030754 	.word	0x08030754
 802ad7c:	43800000 	.word	0x43800000
 802ad80:	3b800000 	.word	0x3b800000
 802ad84:	00000000 	.word	0x00000000
 802ad88:	4260      	negs	r0, r4
 802ad8a:	eeb0 0a48 	vmov.f32	s0, s16
 802ad8e:	f000 f93f 	bl	802b010 <scalbnf>
 802ad92:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 802ad7c <__kernel_rem_pio2f+0x310>
 802ad96:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802ad9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ad9e:	db1a      	blt.n	802add6 <__kernel_rem_pio2f+0x36a>
 802ada0:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 802ad80 <__kernel_rem_pio2f+0x314>
 802ada4:	ee60 7a27 	vmul.f32	s15, s0, s15
 802ada8:	aa06      	add	r2, sp, #24
 802adaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802adae:	a906      	add	r1, sp, #24
 802adb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802adb4:	3408      	adds	r4, #8
 802adb6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802adba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802adbe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802adc2:	ee10 3a10 	vmov	r3, s0
 802adc6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 802adca:	1c6b      	adds	r3, r5, #1
 802adcc:	ee17 2a90 	vmov	r2, s15
 802add0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802add4:	e73f      	b.n	802ac56 <__kernel_rem_pio2f+0x1ea>
 802add6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802adda:	aa06      	add	r2, sp, #24
 802addc:	ee10 3a10 	vmov	r3, s0
 802ade0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 802ade4:	462b      	mov	r3, r5
 802ade6:	e736      	b.n	802ac56 <__kernel_rem_pio2f+0x1ea>
 802ade8:	aa06      	add	r2, sp, #24
 802adea:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 802adee:	9202      	str	r2, [sp, #8]
 802adf0:	ee07 2a90 	vmov	s15, r2
 802adf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802adf8:	3c01      	subs	r4, #1
 802adfa:	ee67 7a80 	vmul.f32	s15, s15, s0
 802adfe:	ee20 0a07 	vmul.f32	s0, s0, s14
 802ae02:	ed65 7a01 	vstmdb	r5!, {s15}
 802ae06:	e734      	b.n	802ac72 <__kernel_rem_pio2f+0x206>
 802ae08:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 802ae0c:	ecf7 6a01 	vldmia	r7!, {s13}
 802ae10:	ed9c 7a00 	vldr	s14, [ip]
 802ae14:	eee6 7a87 	vfma.f32	s15, s13, s14
 802ae18:	3401      	adds	r4, #1
 802ae1a:	454c      	cmp	r4, r9
 802ae1c:	dc01      	bgt.n	802ae22 <__kernel_rem_pio2f+0x3b6>
 802ae1e:	42a5      	cmp	r5, r4
 802ae20:	daf2      	bge.n	802ae08 <__kernel_rem_pio2f+0x39c>
 802ae22:	aa56      	add	r2, sp, #344	; 0x158
 802ae24:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 802ae28:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 802ae2c:	3501      	adds	r5, #1
 802ae2e:	3804      	subs	r0, #4
 802ae30:	e723      	b.n	802ac7a <__kernel_rem_pio2f+0x20e>
 802ae32:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802ae34:	2a03      	cmp	r2, #3
 802ae36:	d84d      	bhi.n	802aed4 <__kernel_rem_pio2f+0x468>
 802ae38:	e8df f002 	tbb	[pc, r2]
 802ae3c:	021f1f3e 	.word	0x021f1f3e
 802ae40:	aa56      	add	r2, sp, #344	; 0x158
 802ae42:	4411      	add	r1, r2
 802ae44:	399c      	subs	r1, #156	; 0x9c
 802ae46:	4608      	mov	r0, r1
 802ae48:	461c      	mov	r4, r3
 802ae4a:	2c00      	cmp	r4, #0
 802ae4c:	dc5f      	bgt.n	802af0e <__kernel_rem_pio2f+0x4a2>
 802ae4e:	4608      	mov	r0, r1
 802ae50:	461c      	mov	r4, r3
 802ae52:	2c01      	cmp	r4, #1
 802ae54:	dc6b      	bgt.n	802af2e <__kernel_rem_pio2f+0x4c2>
 802ae56:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 802ad84 <__kernel_rem_pio2f+0x318>
 802ae5a:	2b01      	cmp	r3, #1
 802ae5c:	dc77      	bgt.n	802af4e <__kernel_rem_pio2f+0x4e2>
 802ae5e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 802ae62:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 802ae66:	f1b8 0f00 	cmp.w	r8, #0
 802ae6a:	d176      	bne.n	802af5a <__kernel_rem_pio2f+0x4ee>
 802ae6c:	edc6 6a00 	vstr	s13, [r6]
 802ae70:	ed86 7a01 	vstr	s14, [r6, #4]
 802ae74:	edc6 7a02 	vstr	s15, [r6, #8]
 802ae78:	e02c      	b.n	802aed4 <__kernel_rem_pio2f+0x468>
 802ae7a:	aa56      	add	r2, sp, #344	; 0x158
 802ae7c:	4411      	add	r1, r2
 802ae7e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 802ad84 <__kernel_rem_pio2f+0x318>
 802ae82:	399c      	subs	r1, #156	; 0x9c
 802ae84:	4618      	mov	r0, r3
 802ae86:	2800      	cmp	r0, #0
 802ae88:	da32      	bge.n	802aef0 <__kernel_rem_pio2f+0x484>
 802ae8a:	f1b8 0f00 	cmp.w	r8, #0
 802ae8e:	d035      	beq.n	802aefc <__kernel_rem_pio2f+0x490>
 802ae90:	eef1 7a47 	vneg.f32	s15, s14
 802ae94:	edc6 7a00 	vstr	s15, [r6]
 802ae98:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 802ae9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802aea0:	a82f      	add	r0, sp, #188	; 0xbc
 802aea2:	2101      	movs	r1, #1
 802aea4:	428b      	cmp	r3, r1
 802aea6:	da2c      	bge.n	802af02 <__kernel_rem_pio2f+0x496>
 802aea8:	f1b8 0f00 	cmp.w	r8, #0
 802aeac:	d001      	beq.n	802aeb2 <__kernel_rem_pio2f+0x446>
 802aeae:	eef1 7a67 	vneg.f32	s15, s15
 802aeb2:	edc6 7a01 	vstr	s15, [r6, #4]
 802aeb6:	e00d      	b.n	802aed4 <__kernel_rem_pio2f+0x468>
 802aeb8:	aa56      	add	r2, sp, #344	; 0x158
 802aeba:	4411      	add	r1, r2
 802aebc:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 802ad84 <__kernel_rem_pio2f+0x318>
 802aec0:	399c      	subs	r1, #156	; 0x9c
 802aec2:	2b00      	cmp	r3, #0
 802aec4:	da0e      	bge.n	802aee4 <__kernel_rem_pio2f+0x478>
 802aec6:	f1b8 0f00 	cmp.w	r8, #0
 802aeca:	d001      	beq.n	802aed0 <__kernel_rem_pio2f+0x464>
 802aecc:	eef1 7a67 	vneg.f32	s15, s15
 802aed0:	edc6 7a00 	vstr	s15, [r6]
 802aed4:	9b01      	ldr	r3, [sp, #4]
 802aed6:	f003 0007 	and.w	r0, r3, #7
 802aeda:	b057      	add	sp, #348	; 0x15c
 802aedc:	ecbd 8b04 	vpop	{d8-d9}
 802aee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aee4:	ed31 7a01 	vldmdb	r1!, {s14}
 802aee8:	3b01      	subs	r3, #1
 802aeea:	ee77 7a87 	vadd.f32	s15, s15, s14
 802aeee:	e7e8      	b.n	802aec2 <__kernel_rem_pio2f+0x456>
 802aef0:	ed71 7a01 	vldmdb	r1!, {s15}
 802aef4:	3801      	subs	r0, #1
 802aef6:	ee37 7a27 	vadd.f32	s14, s14, s15
 802aefa:	e7c4      	b.n	802ae86 <__kernel_rem_pio2f+0x41a>
 802aefc:	eef0 7a47 	vmov.f32	s15, s14
 802af00:	e7c8      	b.n	802ae94 <__kernel_rem_pio2f+0x428>
 802af02:	ecb0 7a01 	vldmia	r0!, {s14}
 802af06:	3101      	adds	r1, #1
 802af08:	ee77 7a87 	vadd.f32	s15, s15, s14
 802af0c:	e7ca      	b.n	802aea4 <__kernel_rem_pio2f+0x438>
 802af0e:	ed50 7a02 	vldr	s15, [r0, #-8]
 802af12:	ed70 6a01 	vldmdb	r0!, {s13}
 802af16:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802af1a:	3c01      	subs	r4, #1
 802af1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802af20:	ed00 7a01 	vstr	s14, [r0, #-4]
 802af24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802af28:	edc0 7a00 	vstr	s15, [r0]
 802af2c:	e78d      	b.n	802ae4a <__kernel_rem_pio2f+0x3de>
 802af2e:	ed50 7a02 	vldr	s15, [r0, #-8]
 802af32:	ed70 6a01 	vldmdb	r0!, {s13}
 802af36:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802af3a:	3c01      	subs	r4, #1
 802af3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802af40:	ed00 7a01 	vstr	s14, [r0, #-4]
 802af44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802af48:	edc0 7a00 	vstr	s15, [r0]
 802af4c:	e781      	b.n	802ae52 <__kernel_rem_pio2f+0x3e6>
 802af4e:	ed31 7a01 	vldmdb	r1!, {s14}
 802af52:	3b01      	subs	r3, #1
 802af54:	ee77 7a87 	vadd.f32	s15, s15, s14
 802af58:	e77f      	b.n	802ae5a <__kernel_rem_pio2f+0x3ee>
 802af5a:	eef1 6a66 	vneg.f32	s13, s13
 802af5e:	eeb1 7a47 	vneg.f32	s14, s14
 802af62:	edc6 6a00 	vstr	s13, [r6]
 802af66:	ed86 7a01 	vstr	s14, [r6, #4]
 802af6a:	eef1 7a67 	vneg.f32	s15, s15
 802af6e:	e781      	b.n	802ae74 <__kernel_rem_pio2f+0x408>

0802af70 <__kernel_sinf>:
 802af70:	ee10 3a10 	vmov	r3, s0
 802af74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802af78:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802af7c:	da04      	bge.n	802af88 <__kernel_sinf+0x18>
 802af7e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802af82:	ee17 3a90 	vmov	r3, s15
 802af86:	b35b      	cbz	r3, 802afe0 <__kernel_sinf+0x70>
 802af88:	ee20 7a00 	vmul.f32	s14, s0, s0
 802af8c:	eddf 7a15 	vldr	s15, [pc, #84]	; 802afe4 <__kernel_sinf+0x74>
 802af90:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802afe8 <__kernel_sinf+0x78>
 802af94:	eea7 6a27 	vfma.f32	s12, s14, s15
 802af98:	eddf 7a14 	vldr	s15, [pc, #80]	; 802afec <__kernel_sinf+0x7c>
 802af9c:	eee6 7a07 	vfma.f32	s15, s12, s14
 802afa0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 802aff0 <__kernel_sinf+0x80>
 802afa4:	eea7 6a87 	vfma.f32	s12, s15, s14
 802afa8:	eddf 7a12 	vldr	s15, [pc, #72]	; 802aff4 <__kernel_sinf+0x84>
 802afac:	ee60 6a07 	vmul.f32	s13, s0, s14
 802afb0:	eee6 7a07 	vfma.f32	s15, s12, s14
 802afb4:	b930      	cbnz	r0, 802afc4 <__kernel_sinf+0x54>
 802afb6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 802aff8 <__kernel_sinf+0x88>
 802afba:	eea7 6a27 	vfma.f32	s12, s14, s15
 802afbe:	eea6 0a26 	vfma.f32	s0, s12, s13
 802afc2:	4770      	bx	lr
 802afc4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802afc8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802afcc:	eee0 7a86 	vfma.f32	s15, s1, s12
 802afd0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802afd4:	eddf 7a09 	vldr	s15, [pc, #36]	; 802affc <__kernel_sinf+0x8c>
 802afd8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802afdc:	ee30 0a60 	vsub.f32	s0, s0, s1
 802afe0:	4770      	bx	lr
 802afe2:	bf00      	nop
 802afe4:	2f2ec9d3 	.word	0x2f2ec9d3
 802afe8:	b2d72f34 	.word	0xb2d72f34
 802afec:	3638ef1b 	.word	0x3638ef1b
 802aff0:	b9500d01 	.word	0xb9500d01
 802aff4:	3c088889 	.word	0x3c088889
 802aff8:	be2aaaab 	.word	0xbe2aaaab
 802affc:	3e2aaaab 	.word	0x3e2aaaab

0802b000 <fabsf>:
 802b000:	ee10 3a10 	vmov	r3, s0
 802b004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b008:	ee00 3a10 	vmov	s0, r3
 802b00c:	4770      	bx	lr
	...

0802b010 <scalbnf>:
 802b010:	b508      	push	{r3, lr}
 802b012:	ee10 2a10 	vmov	r2, s0
 802b016:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 802b01a:	ed2d 8b02 	vpush	{d8}
 802b01e:	eef0 0a40 	vmov.f32	s1, s0
 802b022:	d004      	beq.n	802b02e <scalbnf+0x1e>
 802b024:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802b028:	d306      	bcc.n	802b038 <scalbnf+0x28>
 802b02a:	ee70 0a00 	vadd.f32	s1, s0, s0
 802b02e:	ecbd 8b02 	vpop	{d8}
 802b032:	eeb0 0a60 	vmov.f32	s0, s1
 802b036:	bd08      	pop	{r3, pc}
 802b038:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802b03c:	d21c      	bcs.n	802b078 <scalbnf+0x68>
 802b03e:	4b1f      	ldr	r3, [pc, #124]	; (802b0bc <scalbnf+0xac>)
 802b040:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802b0c0 <scalbnf+0xb0>
 802b044:	4298      	cmp	r0, r3
 802b046:	ee60 0a27 	vmul.f32	s1, s0, s15
 802b04a:	db10      	blt.n	802b06e <scalbnf+0x5e>
 802b04c:	ee10 2a90 	vmov	r2, s1
 802b050:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 802b054:	3b19      	subs	r3, #25
 802b056:	4403      	add	r3, r0
 802b058:	2bfe      	cmp	r3, #254	; 0xfe
 802b05a:	dd0f      	ble.n	802b07c <scalbnf+0x6c>
 802b05c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 802b0c4 <scalbnf+0xb4>
 802b060:	eeb0 0a48 	vmov.f32	s0, s16
 802b064:	f000 f834 	bl	802b0d0 <copysignf>
 802b068:	ee60 0a08 	vmul.f32	s1, s0, s16
 802b06c:	e7df      	b.n	802b02e <scalbnf+0x1e>
 802b06e:	eddf 7a16 	vldr	s15, [pc, #88]	; 802b0c8 <scalbnf+0xb8>
 802b072:	ee60 0aa7 	vmul.f32	s1, s1, s15
 802b076:	e7da      	b.n	802b02e <scalbnf+0x1e>
 802b078:	0ddb      	lsrs	r3, r3, #23
 802b07a:	e7ec      	b.n	802b056 <scalbnf+0x46>
 802b07c:	2b00      	cmp	r3, #0
 802b07e:	dd06      	ble.n	802b08e <scalbnf+0x7e>
 802b080:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 802b084:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 802b088:	ee00 3a90 	vmov	s1, r3
 802b08c:	e7cf      	b.n	802b02e <scalbnf+0x1e>
 802b08e:	f113 0f16 	cmn.w	r3, #22
 802b092:	da06      	bge.n	802b0a2 <scalbnf+0x92>
 802b094:	f24c 3350 	movw	r3, #50000	; 0xc350
 802b098:	4298      	cmp	r0, r3
 802b09a:	dcdf      	bgt.n	802b05c <scalbnf+0x4c>
 802b09c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 802b0c8 <scalbnf+0xb8>
 802b0a0:	e7de      	b.n	802b060 <scalbnf+0x50>
 802b0a2:	3319      	adds	r3, #25
 802b0a4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 802b0a8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 802b0ac:	eddf 7a07 	vldr	s15, [pc, #28]	; 802b0cc <scalbnf+0xbc>
 802b0b0:	ee07 3a10 	vmov	s14, r3
 802b0b4:	ee67 0a27 	vmul.f32	s1, s14, s15
 802b0b8:	e7b9      	b.n	802b02e <scalbnf+0x1e>
 802b0ba:	bf00      	nop
 802b0bc:	ffff3cb0 	.word	0xffff3cb0
 802b0c0:	4c000000 	.word	0x4c000000
 802b0c4:	7149f2ca 	.word	0x7149f2ca
 802b0c8:	0da24260 	.word	0x0da24260
 802b0cc:	33000000 	.word	0x33000000

0802b0d0 <copysignf>:
 802b0d0:	ee10 3a10 	vmov	r3, s0
 802b0d4:	ee10 2a90 	vmov	r2, s1
 802b0d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b0dc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 802b0e0:	4313      	orrs	r3, r2
 802b0e2:	ee00 3a10 	vmov	s0, r3
 802b0e6:	4770      	bx	lr

0802b0e8 <abort>:
 802b0e8:	b508      	push	{r3, lr}
 802b0ea:	2006      	movs	r0, #6
 802b0ec:	f000 fc30 	bl	802b950 <raise>
 802b0f0:	2001      	movs	r0, #1
 802b0f2:	f7d7 fb1f 	bl	8002734 <_exit>
	...

0802b0f8 <__assert_func>:
 802b0f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802b0fa:	461c      	mov	r4, r3
 802b0fc:	4b09      	ldr	r3, [pc, #36]	; (802b124 <__assert_func+0x2c>)
 802b0fe:	681b      	ldr	r3, [r3, #0]
 802b100:	4605      	mov	r5, r0
 802b102:	68d8      	ldr	r0, [r3, #12]
 802b104:	b152      	cbz	r2, 802b11c <__assert_func+0x24>
 802b106:	4b08      	ldr	r3, [pc, #32]	; (802b128 <__assert_func+0x30>)
 802b108:	9100      	str	r1, [sp, #0]
 802b10a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802b10e:	4907      	ldr	r1, [pc, #28]	; (802b12c <__assert_func+0x34>)
 802b110:	462b      	mov	r3, r5
 802b112:	4622      	mov	r2, r4
 802b114:	f000 f81a 	bl	802b14c <fiprintf>
 802b118:	f7ff ffe6 	bl	802b0e8 <abort>
 802b11c:	4b04      	ldr	r3, [pc, #16]	; (802b130 <__assert_func+0x38>)
 802b11e:	461a      	mov	r2, r3
 802b120:	e7f2      	b.n	802b108 <__assert_func+0x10>
 802b122:	bf00      	nop
 802b124:	20000074 	.word	0x20000074
 802b128:	0803078c 	.word	0x0803078c
 802b12c:	08030799 	.word	0x08030799
 802b130:	080307c7 	.word	0x080307c7

0802b134 <atexit>:
 802b134:	2300      	movs	r3, #0
 802b136:	4601      	mov	r1, r0
 802b138:	461a      	mov	r2, r3
 802b13a:	4618      	mov	r0, r3
 802b13c:	f000 bce4 	b.w	802bb08 <__register_exitproc>

0802b140 <__errno>:
 802b140:	4b01      	ldr	r3, [pc, #4]	; (802b148 <__errno+0x8>)
 802b142:	6818      	ldr	r0, [r3, #0]
 802b144:	4770      	bx	lr
 802b146:	bf00      	nop
 802b148:	20000074 	.word	0x20000074

0802b14c <fiprintf>:
 802b14c:	b40e      	push	{r1, r2, r3}
 802b14e:	b503      	push	{r0, r1, lr}
 802b150:	4601      	mov	r1, r0
 802b152:	ab03      	add	r3, sp, #12
 802b154:	4805      	ldr	r0, [pc, #20]	; (802b16c <fiprintf+0x20>)
 802b156:	f853 2b04 	ldr.w	r2, [r3], #4
 802b15a:	6800      	ldr	r0, [r0, #0]
 802b15c:	9301      	str	r3, [sp, #4]
 802b15e:	f000 f921 	bl	802b3a4 <_vfiprintf_r>
 802b162:	b002      	add	sp, #8
 802b164:	f85d eb04 	ldr.w	lr, [sp], #4
 802b168:	b003      	add	sp, #12
 802b16a:	4770      	bx	lr
 802b16c:	20000074 	.word	0x20000074

0802b170 <__libc_init_array>:
 802b170:	b570      	push	{r4, r5, r6, lr}
 802b172:	4e0d      	ldr	r6, [pc, #52]	; (802b1a8 <__libc_init_array+0x38>)
 802b174:	4c0d      	ldr	r4, [pc, #52]	; (802b1ac <__libc_init_array+0x3c>)
 802b176:	1ba4      	subs	r4, r4, r6
 802b178:	10a4      	asrs	r4, r4, #2
 802b17a:	2500      	movs	r5, #0
 802b17c:	42a5      	cmp	r5, r4
 802b17e:	d109      	bne.n	802b194 <__libc_init_array+0x24>
 802b180:	4e0b      	ldr	r6, [pc, #44]	; (802b1b0 <__libc_init_array+0x40>)
 802b182:	4c0c      	ldr	r4, [pc, #48]	; (802b1b4 <__libc_init_array+0x44>)
 802b184:	f000 ffb0 	bl	802c0e8 <_init>
 802b188:	1ba4      	subs	r4, r4, r6
 802b18a:	10a4      	asrs	r4, r4, #2
 802b18c:	2500      	movs	r5, #0
 802b18e:	42a5      	cmp	r5, r4
 802b190:	d105      	bne.n	802b19e <__libc_init_array+0x2e>
 802b192:	bd70      	pop	{r4, r5, r6, pc}
 802b194:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802b198:	4798      	blx	r3
 802b19a:	3501      	adds	r5, #1
 802b19c:	e7ee      	b.n	802b17c <__libc_init_array+0xc>
 802b19e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802b1a2:	4798      	blx	r3
 802b1a4:	3501      	adds	r5, #1
 802b1a6:	e7f2      	b.n	802b18e <__libc_init_array+0x1e>
 802b1a8:	08030868 	.word	0x08030868
 802b1ac:	08030868 	.word	0x08030868
 802b1b0:	08030868 	.word	0x08030868
 802b1b4:	08030874 	.word	0x08030874

0802b1b8 <malloc>:
 802b1b8:	4b02      	ldr	r3, [pc, #8]	; (802b1c4 <malloc+0xc>)
 802b1ba:	4601      	mov	r1, r0
 802b1bc:	6818      	ldr	r0, [r3, #0]
 802b1be:	f000 b86d 	b.w	802b29c <_malloc_r>
 802b1c2:	bf00      	nop
 802b1c4:	20000074 	.word	0x20000074

0802b1c8 <free>:
 802b1c8:	4b02      	ldr	r3, [pc, #8]	; (802b1d4 <free+0xc>)
 802b1ca:	4601      	mov	r1, r0
 802b1cc:	6818      	ldr	r0, [r3, #0]
 802b1ce:	f000 b817 	b.w	802b200 <_free_r>
 802b1d2:	bf00      	nop
 802b1d4:	20000074 	.word	0x20000074

0802b1d8 <memcpy>:
 802b1d8:	b510      	push	{r4, lr}
 802b1da:	1e43      	subs	r3, r0, #1
 802b1dc:	440a      	add	r2, r1
 802b1de:	4291      	cmp	r1, r2
 802b1e0:	d100      	bne.n	802b1e4 <memcpy+0xc>
 802b1e2:	bd10      	pop	{r4, pc}
 802b1e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b1e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 802b1ec:	e7f7      	b.n	802b1de <memcpy+0x6>

0802b1ee <memset>:
 802b1ee:	4402      	add	r2, r0
 802b1f0:	4603      	mov	r3, r0
 802b1f2:	4293      	cmp	r3, r2
 802b1f4:	d100      	bne.n	802b1f8 <memset+0xa>
 802b1f6:	4770      	bx	lr
 802b1f8:	f803 1b01 	strb.w	r1, [r3], #1
 802b1fc:	e7f9      	b.n	802b1f2 <memset+0x4>
	...

0802b200 <_free_r>:
 802b200:	b538      	push	{r3, r4, r5, lr}
 802b202:	4605      	mov	r5, r0
 802b204:	2900      	cmp	r1, #0
 802b206:	d045      	beq.n	802b294 <_free_r+0x94>
 802b208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b20c:	1f0c      	subs	r4, r1, #4
 802b20e:	2b00      	cmp	r3, #0
 802b210:	bfb8      	it	lt
 802b212:	18e4      	addlt	r4, r4, r3
 802b214:	f000 feba 	bl	802bf8c <__malloc_lock>
 802b218:	4a1f      	ldr	r2, [pc, #124]	; (802b298 <_free_r+0x98>)
 802b21a:	6813      	ldr	r3, [r2, #0]
 802b21c:	4610      	mov	r0, r2
 802b21e:	b933      	cbnz	r3, 802b22e <_free_r+0x2e>
 802b220:	6063      	str	r3, [r4, #4]
 802b222:	6014      	str	r4, [r2, #0]
 802b224:	4628      	mov	r0, r5
 802b226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b22a:	f000 beb0 	b.w	802bf8e <__malloc_unlock>
 802b22e:	42a3      	cmp	r3, r4
 802b230:	d90c      	bls.n	802b24c <_free_r+0x4c>
 802b232:	6821      	ldr	r1, [r4, #0]
 802b234:	1862      	adds	r2, r4, r1
 802b236:	4293      	cmp	r3, r2
 802b238:	bf04      	itt	eq
 802b23a:	681a      	ldreq	r2, [r3, #0]
 802b23c:	685b      	ldreq	r3, [r3, #4]
 802b23e:	6063      	str	r3, [r4, #4]
 802b240:	bf04      	itt	eq
 802b242:	1852      	addeq	r2, r2, r1
 802b244:	6022      	streq	r2, [r4, #0]
 802b246:	6004      	str	r4, [r0, #0]
 802b248:	e7ec      	b.n	802b224 <_free_r+0x24>
 802b24a:	4613      	mov	r3, r2
 802b24c:	685a      	ldr	r2, [r3, #4]
 802b24e:	b10a      	cbz	r2, 802b254 <_free_r+0x54>
 802b250:	42a2      	cmp	r2, r4
 802b252:	d9fa      	bls.n	802b24a <_free_r+0x4a>
 802b254:	6819      	ldr	r1, [r3, #0]
 802b256:	1858      	adds	r0, r3, r1
 802b258:	42a0      	cmp	r0, r4
 802b25a:	d10b      	bne.n	802b274 <_free_r+0x74>
 802b25c:	6820      	ldr	r0, [r4, #0]
 802b25e:	4401      	add	r1, r0
 802b260:	1858      	adds	r0, r3, r1
 802b262:	4282      	cmp	r2, r0
 802b264:	6019      	str	r1, [r3, #0]
 802b266:	d1dd      	bne.n	802b224 <_free_r+0x24>
 802b268:	6810      	ldr	r0, [r2, #0]
 802b26a:	6852      	ldr	r2, [r2, #4]
 802b26c:	605a      	str	r2, [r3, #4]
 802b26e:	4401      	add	r1, r0
 802b270:	6019      	str	r1, [r3, #0]
 802b272:	e7d7      	b.n	802b224 <_free_r+0x24>
 802b274:	d902      	bls.n	802b27c <_free_r+0x7c>
 802b276:	230c      	movs	r3, #12
 802b278:	602b      	str	r3, [r5, #0]
 802b27a:	e7d3      	b.n	802b224 <_free_r+0x24>
 802b27c:	6820      	ldr	r0, [r4, #0]
 802b27e:	1821      	adds	r1, r4, r0
 802b280:	428a      	cmp	r2, r1
 802b282:	bf04      	itt	eq
 802b284:	6811      	ldreq	r1, [r2, #0]
 802b286:	6852      	ldreq	r2, [r2, #4]
 802b288:	6062      	str	r2, [r4, #4]
 802b28a:	bf04      	itt	eq
 802b28c:	1809      	addeq	r1, r1, r0
 802b28e:	6021      	streq	r1, [r4, #0]
 802b290:	605c      	str	r4, [r3, #4]
 802b292:	e7c7      	b.n	802b224 <_free_r+0x24>
 802b294:	bd38      	pop	{r3, r4, r5, pc}
 802b296:	bf00      	nop
 802b298:	2000d038 	.word	0x2000d038

0802b29c <_malloc_r>:
 802b29c:	b570      	push	{r4, r5, r6, lr}
 802b29e:	1ccd      	adds	r5, r1, #3
 802b2a0:	f025 0503 	bic.w	r5, r5, #3
 802b2a4:	3508      	adds	r5, #8
 802b2a6:	2d0c      	cmp	r5, #12
 802b2a8:	bf38      	it	cc
 802b2aa:	250c      	movcc	r5, #12
 802b2ac:	2d00      	cmp	r5, #0
 802b2ae:	4606      	mov	r6, r0
 802b2b0:	db01      	blt.n	802b2b6 <_malloc_r+0x1a>
 802b2b2:	42a9      	cmp	r1, r5
 802b2b4:	d903      	bls.n	802b2be <_malloc_r+0x22>
 802b2b6:	230c      	movs	r3, #12
 802b2b8:	6033      	str	r3, [r6, #0]
 802b2ba:	2000      	movs	r0, #0
 802b2bc:	bd70      	pop	{r4, r5, r6, pc}
 802b2be:	f000 fe65 	bl	802bf8c <__malloc_lock>
 802b2c2:	4a21      	ldr	r2, [pc, #132]	; (802b348 <_malloc_r+0xac>)
 802b2c4:	6814      	ldr	r4, [r2, #0]
 802b2c6:	4621      	mov	r1, r4
 802b2c8:	b991      	cbnz	r1, 802b2f0 <_malloc_r+0x54>
 802b2ca:	4c20      	ldr	r4, [pc, #128]	; (802b34c <_malloc_r+0xb0>)
 802b2cc:	6823      	ldr	r3, [r4, #0]
 802b2ce:	b91b      	cbnz	r3, 802b2d8 <_malloc_r+0x3c>
 802b2d0:	4630      	mov	r0, r6
 802b2d2:	f000 fb05 	bl	802b8e0 <_sbrk_r>
 802b2d6:	6020      	str	r0, [r4, #0]
 802b2d8:	4629      	mov	r1, r5
 802b2da:	4630      	mov	r0, r6
 802b2dc:	f000 fb00 	bl	802b8e0 <_sbrk_r>
 802b2e0:	1c43      	adds	r3, r0, #1
 802b2e2:	d124      	bne.n	802b32e <_malloc_r+0x92>
 802b2e4:	230c      	movs	r3, #12
 802b2e6:	6033      	str	r3, [r6, #0]
 802b2e8:	4630      	mov	r0, r6
 802b2ea:	f000 fe50 	bl	802bf8e <__malloc_unlock>
 802b2ee:	e7e4      	b.n	802b2ba <_malloc_r+0x1e>
 802b2f0:	680b      	ldr	r3, [r1, #0]
 802b2f2:	1b5b      	subs	r3, r3, r5
 802b2f4:	d418      	bmi.n	802b328 <_malloc_r+0x8c>
 802b2f6:	2b0b      	cmp	r3, #11
 802b2f8:	d90f      	bls.n	802b31a <_malloc_r+0x7e>
 802b2fa:	600b      	str	r3, [r1, #0]
 802b2fc:	50cd      	str	r5, [r1, r3]
 802b2fe:	18cc      	adds	r4, r1, r3
 802b300:	4630      	mov	r0, r6
 802b302:	f000 fe44 	bl	802bf8e <__malloc_unlock>
 802b306:	f104 000b 	add.w	r0, r4, #11
 802b30a:	1d23      	adds	r3, r4, #4
 802b30c:	f020 0007 	bic.w	r0, r0, #7
 802b310:	1ac3      	subs	r3, r0, r3
 802b312:	d0d3      	beq.n	802b2bc <_malloc_r+0x20>
 802b314:	425a      	negs	r2, r3
 802b316:	50e2      	str	r2, [r4, r3]
 802b318:	e7d0      	b.n	802b2bc <_malloc_r+0x20>
 802b31a:	428c      	cmp	r4, r1
 802b31c:	684b      	ldr	r3, [r1, #4]
 802b31e:	bf16      	itet	ne
 802b320:	6063      	strne	r3, [r4, #4]
 802b322:	6013      	streq	r3, [r2, #0]
 802b324:	460c      	movne	r4, r1
 802b326:	e7eb      	b.n	802b300 <_malloc_r+0x64>
 802b328:	460c      	mov	r4, r1
 802b32a:	6849      	ldr	r1, [r1, #4]
 802b32c:	e7cc      	b.n	802b2c8 <_malloc_r+0x2c>
 802b32e:	1cc4      	adds	r4, r0, #3
 802b330:	f024 0403 	bic.w	r4, r4, #3
 802b334:	42a0      	cmp	r0, r4
 802b336:	d005      	beq.n	802b344 <_malloc_r+0xa8>
 802b338:	1a21      	subs	r1, r4, r0
 802b33a:	4630      	mov	r0, r6
 802b33c:	f000 fad0 	bl	802b8e0 <_sbrk_r>
 802b340:	3001      	adds	r0, #1
 802b342:	d0cf      	beq.n	802b2e4 <_malloc_r+0x48>
 802b344:	6025      	str	r5, [r4, #0]
 802b346:	e7db      	b.n	802b300 <_malloc_r+0x64>
 802b348:	2000d038 	.word	0x2000d038
 802b34c:	2000d03c 	.word	0x2000d03c

0802b350 <__sfputc_r>:
 802b350:	6893      	ldr	r3, [r2, #8]
 802b352:	3b01      	subs	r3, #1
 802b354:	2b00      	cmp	r3, #0
 802b356:	b410      	push	{r4}
 802b358:	6093      	str	r3, [r2, #8]
 802b35a:	da08      	bge.n	802b36e <__sfputc_r+0x1e>
 802b35c:	6994      	ldr	r4, [r2, #24]
 802b35e:	42a3      	cmp	r3, r4
 802b360:	db01      	blt.n	802b366 <__sfputc_r+0x16>
 802b362:	290a      	cmp	r1, #10
 802b364:	d103      	bne.n	802b36e <__sfputc_r+0x1e>
 802b366:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b36a:	f000 bb0d 	b.w	802b988 <__swbuf_r>
 802b36e:	6813      	ldr	r3, [r2, #0]
 802b370:	1c58      	adds	r0, r3, #1
 802b372:	6010      	str	r0, [r2, #0]
 802b374:	7019      	strb	r1, [r3, #0]
 802b376:	4608      	mov	r0, r1
 802b378:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b37c:	4770      	bx	lr

0802b37e <__sfputs_r>:
 802b37e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b380:	4606      	mov	r6, r0
 802b382:	460f      	mov	r7, r1
 802b384:	4614      	mov	r4, r2
 802b386:	18d5      	adds	r5, r2, r3
 802b388:	42ac      	cmp	r4, r5
 802b38a:	d101      	bne.n	802b390 <__sfputs_r+0x12>
 802b38c:	2000      	movs	r0, #0
 802b38e:	e007      	b.n	802b3a0 <__sfputs_r+0x22>
 802b390:	463a      	mov	r2, r7
 802b392:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b396:	4630      	mov	r0, r6
 802b398:	f7ff ffda 	bl	802b350 <__sfputc_r>
 802b39c:	1c43      	adds	r3, r0, #1
 802b39e:	d1f3      	bne.n	802b388 <__sfputs_r+0xa>
 802b3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802b3a4 <_vfiprintf_r>:
 802b3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b3a8:	460c      	mov	r4, r1
 802b3aa:	b09d      	sub	sp, #116	; 0x74
 802b3ac:	4617      	mov	r7, r2
 802b3ae:	461d      	mov	r5, r3
 802b3b0:	4606      	mov	r6, r0
 802b3b2:	b118      	cbz	r0, 802b3bc <_vfiprintf_r+0x18>
 802b3b4:	6983      	ldr	r3, [r0, #24]
 802b3b6:	b90b      	cbnz	r3, 802b3bc <_vfiprintf_r+0x18>
 802b3b8:	f000 fcfa 	bl	802bdb0 <__sinit>
 802b3bc:	4b7c      	ldr	r3, [pc, #496]	; (802b5b0 <_vfiprintf_r+0x20c>)
 802b3be:	429c      	cmp	r4, r3
 802b3c0:	d158      	bne.n	802b474 <_vfiprintf_r+0xd0>
 802b3c2:	6874      	ldr	r4, [r6, #4]
 802b3c4:	89a3      	ldrh	r3, [r4, #12]
 802b3c6:	0718      	lsls	r0, r3, #28
 802b3c8:	d55e      	bpl.n	802b488 <_vfiprintf_r+0xe4>
 802b3ca:	6923      	ldr	r3, [r4, #16]
 802b3cc:	2b00      	cmp	r3, #0
 802b3ce:	d05b      	beq.n	802b488 <_vfiprintf_r+0xe4>
 802b3d0:	2300      	movs	r3, #0
 802b3d2:	9309      	str	r3, [sp, #36]	; 0x24
 802b3d4:	2320      	movs	r3, #32
 802b3d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802b3da:	2330      	movs	r3, #48	; 0x30
 802b3dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802b3e0:	9503      	str	r5, [sp, #12]
 802b3e2:	f04f 0b01 	mov.w	fp, #1
 802b3e6:	46b8      	mov	r8, r7
 802b3e8:	4645      	mov	r5, r8
 802b3ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 802b3ee:	b10b      	cbz	r3, 802b3f4 <_vfiprintf_r+0x50>
 802b3f0:	2b25      	cmp	r3, #37	; 0x25
 802b3f2:	d154      	bne.n	802b49e <_vfiprintf_r+0xfa>
 802b3f4:	ebb8 0a07 	subs.w	sl, r8, r7
 802b3f8:	d00b      	beq.n	802b412 <_vfiprintf_r+0x6e>
 802b3fa:	4653      	mov	r3, sl
 802b3fc:	463a      	mov	r2, r7
 802b3fe:	4621      	mov	r1, r4
 802b400:	4630      	mov	r0, r6
 802b402:	f7ff ffbc 	bl	802b37e <__sfputs_r>
 802b406:	3001      	adds	r0, #1
 802b408:	f000 80c2 	beq.w	802b590 <_vfiprintf_r+0x1ec>
 802b40c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b40e:	4453      	add	r3, sl
 802b410:	9309      	str	r3, [sp, #36]	; 0x24
 802b412:	f898 3000 	ldrb.w	r3, [r8]
 802b416:	2b00      	cmp	r3, #0
 802b418:	f000 80ba 	beq.w	802b590 <_vfiprintf_r+0x1ec>
 802b41c:	2300      	movs	r3, #0
 802b41e:	f04f 32ff 	mov.w	r2, #4294967295
 802b422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b426:	9304      	str	r3, [sp, #16]
 802b428:	9307      	str	r3, [sp, #28]
 802b42a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802b42e:	931a      	str	r3, [sp, #104]	; 0x68
 802b430:	46a8      	mov	r8, r5
 802b432:	2205      	movs	r2, #5
 802b434:	f818 1b01 	ldrb.w	r1, [r8], #1
 802b438:	485e      	ldr	r0, [pc, #376]	; (802b5b4 <_vfiprintf_r+0x210>)
 802b43a:	f7d4 fee9 	bl	8000210 <memchr>
 802b43e:	9b04      	ldr	r3, [sp, #16]
 802b440:	bb78      	cbnz	r0, 802b4a2 <_vfiprintf_r+0xfe>
 802b442:	06d9      	lsls	r1, r3, #27
 802b444:	bf44      	itt	mi
 802b446:	2220      	movmi	r2, #32
 802b448:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802b44c:	071a      	lsls	r2, r3, #28
 802b44e:	bf44      	itt	mi
 802b450:	222b      	movmi	r2, #43	; 0x2b
 802b452:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802b456:	782a      	ldrb	r2, [r5, #0]
 802b458:	2a2a      	cmp	r2, #42	; 0x2a
 802b45a:	d02a      	beq.n	802b4b2 <_vfiprintf_r+0x10e>
 802b45c:	9a07      	ldr	r2, [sp, #28]
 802b45e:	46a8      	mov	r8, r5
 802b460:	2000      	movs	r0, #0
 802b462:	250a      	movs	r5, #10
 802b464:	4641      	mov	r1, r8
 802b466:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b46a:	3b30      	subs	r3, #48	; 0x30
 802b46c:	2b09      	cmp	r3, #9
 802b46e:	d969      	bls.n	802b544 <_vfiprintf_r+0x1a0>
 802b470:	b360      	cbz	r0, 802b4cc <_vfiprintf_r+0x128>
 802b472:	e024      	b.n	802b4be <_vfiprintf_r+0x11a>
 802b474:	4b50      	ldr	r3, [pc, #320]	; (802b5b8 <_vfiprintf_r+0x214>)
 802b476:	429c      	cmp	r4, r3
 802b478:	d101      	bne.n	802b47e <_vfiprintf_r+0xda>
 802b47a:	68b4      	ldr	r4, [r6, #8]
 802b47c:	e7a2      	b.n	802b3c4 <_vfiprintf_r+0x20>
 802b47e:	4b4f      	ldr	r3, [pc, #316]	; (802b5bc <_vfiprintf_r+0x218>)
 802b480:	429c      	cmp	r4, r3
 802b482:	bf08      	it	eq
 802b484:	68f4      	ldreq	r4, [r6, #12]
 802b486:	e79d      	b.n	802b3c4 <_vfiprintf_r+0x20>
 802b488:	4621      	mov	r1, r4
 802b48a:	4630      	mov	r0, r6
 802b48c:	f000 face 	bl	802ba2c <__swsetup_r>
 802b490:	2800      	cmp	r0, #0
 802b492:	d09d      	beq.n	802b3d0 <_vfiprintf_r+0x2c>
 802b494:	f04f 30ff 	mov.w	r0, #4294967295
 802b498:	b01d      	add	sp, #116	; 0x74
 802b49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b49e:	46a8      	mov	r8, r5
 802b4a0:	e7a2      	b.n	802b3e8 <_vfiprintf_r+0x44>
 802b4a2:	4a44      	ldr	r2, [pc, #272]	; (802b5b4 <_vfiprintf_r+0x210>)
 802b4a4:	1a80      	subs	r0, r0, r2
 802b4a6:	fa0b f000 	lsl.w	r0, fp, r0
 802b4aa:	4318      	orrs	r0, r3
 802b4ac:	9004      	str	r0, [sp, #16]
 802b4ae:	4645      	mov	r5, r8
 802b4b0:	e7be      	b.n	802b430 <_vfiprintf_r+0x8c>
 802b4b2:	9a03      	ldr	r2, [sp, #12]
 802b4b4:	1d11      	adds	r1, r2, #4
 802b4b6:	6812      	ldr	r2, [r2, #0]
 802b4b8:	9103      	str	r1, [sp, #12]
 802b4ba:	2a00      	cmp	r2, #0
 802b4bc:	db01      	blt.n	802b4c2 <_vfiprintf_r+0x11e>
 802b4be:	9207      	str	r2, [sp, #28]
 802b4c0:	e004      	b.n	802b4cc <_vfiprintf_r+0x128>
 802b4c2:	4252      	negs	r2, r2
 802b4c4:	f043 0302 	orr.w	r3, r3, #2
 802b4c8:	9207      	str	r2, [sp, #28]
 802b4ca:	9304      	str	r3, [sp, #16]
 802b4cc:	f898 3000 	ldrb.w	r3, [r8]
 802b4d0:	2b2e      	cmp	r3, #46	; 0x2e
 802b4d2:	d10e      	bne.n	802b4f2 <_vfiprintf_r+0x14e>
 802b4d4:	f898 3001 	ldrb.w	r3, [r8, #1]
 802b4d8:	2b2a      	cmp	r3, #42	; 0x2a
 802b4da:	d138      	bne.n	802b54e <_vfiprintf_r+0x1aa>
 802b4dc:	9b03      	ldr	r3, [sp, #12]
 802b4de:	1d1a      	adds	r2, r3, #4
 802b4e0:	681b      	ldr	r3, [r3, #0]
 802b4e2:	9203      	str	r2, [sp, #12]
 802b4e4:	2b00      	cmp	r3, #0
 802b4e6:	bfb8      	it	lt
 802b4e8:	f04f 33ff 	movlt.w	r3, #4294967295
 802b4ec:	f108 0802 	add.w	r8, r8, #2
 802b4f0:	9305      	str	r3, [sp, #20]
 802b4f2:	4d33      	ldr	r5, [pc, #204]	; (802b5c0 <_vfiprintf_r+0x21c>)
 802b4f4:	f898 1000 	ldrb.w	r1, [r8]
 802b4f8:	2203      	movs	r2, #3
 802b4fa:	4628      	mov	r0, r5
 802b4fc:	f7d4 fe88 	bl	8000210 <memchr>
 802b500:	b140      	cbz	r0, 802b514 <_vfiprintf_r+0x170>
 802b502:	2340      	movs	r3, #64	; 0x40
 802b504:	1b40      	subs	r0, r0, r5
 802b506:	fa03 f000 	lsl.w	r0, r3, r0
 802b50a:	9b04      	ldr	r3, [sp, #16]
 802b50c:	4303      	orrs	r3, r0
 802b50e:	f108 0801 	add.w	r8, r8, #1
 802b512:	9304      	str	r3, [sp, #16]
 802b514:	f898 1000 	ldrb.w	r1, [r8]
 802b518:	482a      	ldr	r0, [pc, #168]	; (802b5c4 <_vfiprintf_r+0x220>)
 802b51a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b51e:	2206      	movs	r2, #6
 802b520:	f108 0701 	add.w	r7, r8, #1
 802b524:	f7d4 fe74 	bl	8000210 <memchr>
 802b528:	2800      	cmp	r0, #0
 802b52a:	d037      	beq.n	802b59c <_vfiprintf_r+0x1f8>
 802b52c:	4b26      	ldr	r3, [pc, #152]	; (802b5c8 <_vfiprintf_r+0x224>)
 802b52e:	bb1b      	cbnz	r3, 802b578 <_vfiprintf_r+0x1d4>
 802b530:	9b03      	ldr	r3, [sp, #12]
 802b532:	3307      	adds	r3, #7
 802b534:	f023 0307 	bic.w	r3, r3, #7
 802b538:	3308      	adds	r3, #8
 802b53a:	9303      	str	r3, [sp, #12]
 802b53c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b53e:	444b      	add	r3, r9
 802b540:	9309      	str	r3, [sp, #36]	; 0x24
 802b542:	e750      	b.n	802b3e6 <_vfiprintf_r+0x42>
 802b544:	fb05 3202 	mla	r2, r5, r2, r3
 802b548:	2001      	movs	r0, #1
 802b54a:	4688      	mov	r8, r1
 802b54c:	e78a      	b.n	802b464 <_vfiprintf_r+0xc0>
 802b54e:	2300      	movs	r3, #0
 802b550:	f108 0801 	add.w	r8, r8, #1
 802b554:	9305      	str	r3, [sp, #20]
 802b556:	4619      	mov	r1, r3
 802b558:	250a      	movs	r5, #10
 802b55a:	4640      	mov	r0, r8
 802b55c:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b560:	3a30      	subs	r2, #48	; 0x30
 802b562:	2a09      	cmp	r2, #9
 802b564:	d903      	bls.n	802b56e <_vfiprintf_r+0x1ca>
 802b566:	2b00      	cmp	r3, #0
 802b568:	d0c3      	beq.n	802b4f2 <_vfiprintf_r+0x14e>
 802b56a:	9105      	str	r1, [sp, #20]
 802b56c:	e7c1      	b.n	802b4f2 <_vfiprintf_r+0x14e>
 802b56e:	fb05 2101 	mla	r1, r5, r1, r2
 802b572:	2301      	movs	r3, #1
 802b574:	4680      	mov	r8, r0
 802b576:	e7f0      	b.n	802b55a <_vfiprintf_r+0x1b6>
 802b578:	ab03      	add	r3, sp, #12
 802b57a:	9300      	str	r3, [sp, #0]
 802b57c:	4622      	mov	r2, r4
 802b57e:	4b13      	ldr	r3, [pc, #76]	; (802b5cc <_vfiprintf_r+0x228>)
 802b580:	a904      	add	r1, sp, #16
 802b582:	4630      	mov	r0, r6
 802b584:	f3af 8000 	nop.w
 802b588:	f1b0 3fff 	cmp.w	r0, #4294967295
 802b58c:	4681      	mov	r9, r0
 802b58e:	d1d5      	bne.n	802b53c <_vfiprintf_r+0x198>
 802b590:	89a3      	ldrh	r3, [r4, #12]
 802b592:	065b      	lsls	r3, r3, #25
 802b594:	f53f af7e 	bmi.w	802b494 <_vfiprintf_r+0xf0>
 802b598:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b59a:	e77d      	b.n	802b498 <_vfiprintf_r+0xf4>
 802b59c:	ab03      	add	r3, sp, #12
 802b59e:	9300      	str	r3, [sp, #0]
 802b5a0:	4622      	mov	r2, r4
 802b5a2:	4b0a      	ldr	r3, [pc, #40]	; (802b5cc <_vfiprintf_r+0x228>)
 802b5a4:	a904      	add	r1, sp, #16
 802b5a6:	4630      	mov	r0, r6
 802b5a8:	f000 f888 	bl	802b6bc <_printf_i>
 802b5ac:	e7ec      	b.n	802b588 <_vfiprintf_r+0x1e4>
 802b5ae:	bf00      	nop
 802b5b0:	08030820 	.word	0x08030820
 802b5b4:	080307cc 	.word	0x080307cc
 802b5b8:	08030840 	.word	0x08030840
 802b5bc:	08030800 	.word	0x08030800
 802b5c0:	080307d2 	.word	0x080307d2
 802b5c4:	080307d6 	.word	0x080307d6
 802b5c8:	00000000 	.word	0x00000000
 802b5cc:	0802b37f 	.word	0x0802b37f

0802b5d0 <_printf_common>:
 802b5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b5d4:	4691      	mov	r9, r2
 802b5d6:	461f      	mov	r7, r3
 802b5d8:	688a      	ldr	r2, [r1, #8]
 802b5da:	690b      	ldr	r3, [r1, #16]
 802b5dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802b5e0:	4293      	cmp	r3, r2
 802b5e2:	bfb8      	it	lt
 802b5e4:	4613      	movlt	r3, r2
 802b5e6:	f8c9 3000 	str.w	r3, [r9]
 802b5ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802b5ee:	4606      	mov	r6, r0
 802b5f0:	460c      	mov	r4, r1
 802b5f2:	b112      	cbz	r2, 802b5fa <_printf_common+0x2a>
 802b5f4:	3301      	adds	r3, #1
 802b5f6:	f8c9 3000 	str.w	r3, [r9]
 802b5fa:	6823      	ldr	r3, [r4, #0]
 802b5fc:	0699      	lsls	r1, r3, #26
 802b5fe:	bf42      	ittt	mi
 802b600:	f8d9 3000 	ldrmi.w	r3, [r9]
 802b604:	3302      	addmi	r3, #2
 802b606:	f8c9 3000 	strmi.w	r3, [r9]
 802b60a:	6825      	ldr	r5, [r4, #0]
 802b60c:	f015 0506 	ands.w	r5, r5, #6
 802b610:	d107      	bne.n	802b622 <_printf_common+0x52>
 802b612:	f104 0a19 	add.w	sl, r4, #25
 802b616:	68e3      	ldr	r3, [r4, #12]
 802b618:	f8d9 2000 	ldr.w	r2, [r9]
 802b61c:	1a9b      	subs	r3, r3, r2
 802b61e:	42ab      	cmp	r3, r5
 802b620:	dc28      	bgt.n	802b674 <_printf_common+0xa4>
 802b622:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802b626:	6822      	ldr	r2, [r4, #0]
 802b628:	3300      	adds	r3, #0
 802b62a:	bf18      	it	ne
 802b62c:	2301      	movne	r3, #1
 802b62e:	0692      	lsls	r2, r2, #26
 802b630:	d42d      	bmi.n	802b68e <_printf_common+0xbe>
 802b632:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802b636:	4639      	mov	r1, r7
 802b638:	4630      	mov	r0, r6
 802b63a:	47c0      	blx	r8
 802b63c:	3001      	adds	r0, #1
 802b63e:	d020      	beq.n	802b682 <_printf_common+0xb2>
 802b640:	6823      	ldr	r3, [r4, #0]
 802b642:	68e5      	ldr	r5, [r4, #12]
 802b644:	f8d9 2000 	ldr.w	r2, [r9]
 802b648:	f003 0306 	and.w	r3, r3, #6
 802b64c:	2b04      	cmp	r3, #4
 802b64e:	bf08      	it	eq
 802b650:	1aad      	subeq	r5, r5, r2
 802b652:	68a3      	ldr	r3, [r4, #8]
 802b654:	6922      	ldr	r2, [r4, #16]
 802b656:	bf0c      	ite	eq
 802b658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b65c:	2500      	movne	r5, #0
 802b65e:	4293      	cmp	r3, r2
 802b660:	bfc4      	itt	gt
 802b662:	1a9b      	subgt	r3, r3, r2
 802b664:	18ed      	addgt	r5, r5, r3
 802b666:	f04f 0900 	mov.w	r9, #0
 802b66a:	341a      	adds	r4, #26
 802b66c:	454d      	cmp	r5, r9
 802b66e:	d11a      	bne.n	802b6a6 <_printf_common+0xd6>
 802b670:	2000      	movs	r0, #0
 802b672:	e008      	b.n	802b686 <_printf_common+0xb6>
 802b674:	2301      	movs	r3, #1
 802b676:	4652      	mov	r2, sl
 802b678:	4639      	mov	r1, r7
 802b67a:	4630      	mov	r0, r6
 802b67c:	47c0      	blx	r8
 802b67e:	3001      	adds	r0, #1
 802b680:	d103      	bne.n	802b68a <_printf_common+0xba>
 802b682:	f04f 30ff 	mov.w	r0, #4294967295
 802b686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b68a:	3501      	adds	r5, #1
 802b68c:	e7c3      	b.n	802b616 <_printf_common+0x46>
 802b68e:	18e1      	adds	r1, r4, r3
 802b690:	1c5a      	adds	r2, r3, #1
 802b692:	2030      	movs	r0, #48	; 0x30
 802b694:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802b698:	4422      	add	r2, r4
 802b69a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802b69e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802b6a2:	3302      	adds	r3, #2
 802b6a4:	e7c5      	b.n	802b632 <_printf_common+0x62>
 802b6a6:	2301      	movs	r3, #1
 802b6a8:	4622      	mov	r2, r4
 802b6aa:	4639      	mov	r1, r7
 802b6ac:	4630      	mov	r0, r6
 802b6ae:	47c0      	blx	r8
 802b6b0:	3001      	adds	r0, #1
 802b6b2:	d0e6      	beq.n	802b682 <_printf_common+0xb2>
 802b6b4:	f109 0901 	add.w	r9, r9, #1
 802b6b8:	e7d8      	b.n	802b66c <_printf_common+0x9c>
	...

0802b6bc <_printf_i>:
 802b6bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802b6c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 802b6c4:	460c      	mov	r4, r1
 802b6c6:	7e09      	ldrb	r1, [r1, #24]
 802b6c8:	b085      	sub	sp, #20
 802b6ca:	296e      	cmp	r1, #110	; 0x6e
 802b6cc:	4617      	mov	r7, r2
 802b6ce:	4606      	mov	r6, r0
 802b6d0:	4698      	mov	r8, r3
 802b6d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802b6d4:	f000 80b3 	beq.w	802b83e <_printf_i+0x182>
 802b6d8:	d822      	bhi.n	802b720 <_printf_i+0x64>
 802b6da:	2963      	cmp	r1, #99	; 0x63
 802b6dc:	d036      	beq.n	802b74c <_printf_i+0x90>
 802b6de:	d80a      	bhi.n	802b6f6 <_printf_i+0x3a>
 802b6e0:	2900      	cmp	r1, #0
 802b6e2:	f000 80b9 	beq.w	802b858 <_printf_i+0x19c>
 802b6e6:	2958      	cmp	r1, #88	; 0x58
 802b6e8:	f000 8083 	beq.w	802b7f2 <_printf_i+0x136>
 802b6ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b6f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 802b6f4:	e032      	b.n	802b75c <_printf_i+0xa0>
 802b6f6:	2964      	cmp	r1, #100	; 0x64
 802b6f8:	d001      	beq.n	802b6fe <_printf_i+0x42>
 802b6fa:	2969      	cmp	r1, #105	; 0x69
 802b6fc:	d1f6      	bne.n	802b6ec <_printf_i+0x30>
 802b6fe:	6820      	ldr	r0, [r4, #0]
 802b700:	6813      	ldr	r3, [r2, #0]
 802b702:	0605      	lsls	r5, r0, #24
 802b704:	f103 0104 	add.w	r1, r3, #4
 802b708:	d52a      	bpl.n	802b760 <_printf_i+0xa4>
 802b70a:	681b      	ldr	r3, [r3, #0]
 802b70c:	6011      	str	r1, [r2, #0]
 802b70e:	2b00      	cmp	r3, #0
 802b710:	da03      	bge.n	802b71a <_printf_i+0x5e>
 802b712:	222d      	movs	r2, #45	; 0x2d
 802b714:	425b      	negs	r3, r3
 802b716:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802b71a:	486f      	ldr	r0, [pc, #444]	; (802b8d8 <_printf_i+0x21c>)
 802b71c:	220a      	movs	r2, #10
 802b71e:	e039      	b.n	802b794 <_printf_i+0xd8>
 802b720:	2973      	cmp	r1, #115	; 0x73
 802b722:	f000 809d 	beq.w	802b860 <_printf_i+0x1a4>
 802b726:	d808      	bhi.n	802b73a <_printf_i+0x7e>
 802b728:	296f      	cmp	r1, #111	; 0x6f
 802b72a:	d020      	beq.n	802b76e <_printf_i+0xb2>
 802b72c:	2970      	cmp	r1, #112	; 0x70
 802b72e:	d1dd      	bne.n	802b6ec <_printf_i+0x30>
 802b730:	6823      	ldr	r3, [r4, #0]
 802b732:	f043 0320 	orr.w	r3, r3, #32
 802b736:	6023      	str	r3, [r4, #0]
 802b738:	e003      	b.n	802b742 <_printf_i+0x86>
 802b73a:	2975      	cmp	r1, #117	; 0x75
 802b73c:	d017      	beq.n	802b76e <_printf_i+0xb2>
 802b73e:	2978      	cmp	r1, #120	; 0x78
 802b740:	d1d4      	bne.n	802b6ec <_printf_i+0x30>
 802b742:	2378      	movs	r3, #120	; 0x78
 802b744:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802b748:	4864      	ldr	r0, [pc, #400]	; (802b8dc <_printf_i+0x220>)
 802b74a:	e055      	b.n	802b7f8 <_printf_i+0x13c>
 802b74c:	6813      	ldr	r3, [r2, #0]
 802b74e:	1d19      	adds	r1, r3, #4
 802b750:	681b      	ldr	r3, [r3, #0]
 802b752:	6011      	str	r1, [r2, #0]
 802b754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802b75c:	2301      	movs	r3, #1
 802b75e:	e08c      	b.n	802b87a <_printf_i+0x1be>
 802b760:	681b      	ldr	r3, [r3, #0]
 802b762:	6011      	str	r1, [r2, #0]
 802b764:	f010 0f40 	tst.w	r0, #64	; 0x40
 802b768:	bf18      	it	ne
 802b76a:	b21b      	sxthne	r3, r3
 802b76c:	e7cf      	b.n	802b70e <_printf_i+0x52>
 802b76e:	6813      	ldr	r3, [r2, #0]
 802b770:	6825      	ldr	r5, [r4, #0]
 802b772:	1d18      	adds	r0, r3, #4
 802b774:	6010      	str	r0, [r2, #0]
 802b776:	0628      	lsls	r0, r5, #24
 802b778:	d501      	bpl.n	802b77e <_printf_i+0xc2>
 802b77a:	681b      	ldr	r3, [r3, #0]
 802b77c:	e002      	b.n	802b784 <_printf_i+0xc8>
 802b77e:	0668      	lsls	r0, r5, #25
 802b780:	d5fb      	bpl.n	802b77a <_printf_i+0xbe>
 802b782:	881b      	ldrh	r3, [r3, #0]
 802b784:	4854      	ldr	r0, [pc, #336]	; (802b8d8 <_printf_i+0x21c>)
 802b786:	296f      	cmp	r1, #111	; 0x6f
 802b788:	bf14      	ite	ne
 802b78a:	220a      	movne	r2, #10
 802b78c:	2208      	moveq	r2, #8
 802b78e:	2100      	movs	r1, #0
 802b790:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802b794:	6865      	ldr	r5, [r4, #4]
 802b796:	60a5      	str	r5, [r4, #8]
 802b798:	2d00      	cmp	r5, #0
 802b79a:	f2c0 8095 	blt.w	802b8c8 <_printf_i+0x20c>
 802b79e:	6821      	ldr	r1, [r4, #0]
 802b7a0:	f021 0104 	bic.w	r1, r1, #4
 802b7a4:	6021      	str	r1, [r4, #0]
 802b7a6:	2b00      	cmp	r3, #0
 802b7a8:	d13d      	bne.n	802b826 <_printf_i+0x16a>
 802b7aa:	2d00      	cmp	r5, #0
 802b7ac:	f040 808e 	bne.w	802b8cc <_printf_i+0x210>
 802b7b0:	4665      	mov	r5, ip
 802b7b2:	2a08      	cmp	r2, #8
 802b7b4:	d10b      	bne.n	802b7ce <_printf_i+0x112>
 802b7b6:	6823      	ldr	r3, [r4, #0]
 802b7b8:	07db      	lsls	r3, r3, #31
 802b7ba:	d508      	bpl.n	802b7ce <_printf_i+0x112>
 802b7bc:	6923      	ldr	r3, [r4, #16]
 802b7be:	6862      	ldr	r2, [r4, #4]
 802b7c0:	429a      	cmp	r2, r3
 802b7c2:	bfde      	ittt	le
 802b7c4:	2330      	movle	r3, #48	; 0x30
 802b7c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 802b7ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 802b7ce:	ebac 0305 	sub.w	r3, ip, r5
 802b7d2:	6123      	str	r3, [r4, #16]
 802b7d4:	f8cd 8000 	str.w	r8, [sp]
 802b7d8:	463b      	mov	r3, r7
 802b7da:	aa03      	add	r2, sp, #12
 802b7dc:	4621      	mov	r1, r4
 802b7de:	4630      	mov	r0, r6
 802b7e0:	f7ff fef6 	bl	802b5d0 <_printf_common>
 802b7e4:	3001      	adds	r0, #1
 802b7e6:	d14d      	bne.n	802b884 <_printf_i+0x1c8>
 802b7e8:	f04f 30ff 	mov.w	r0, #4294967295
 802b7ec:	b005      	add	sp, #20
 802b7ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802b7f2:	4839      	ldr	r0, [pc, #228]	; (802b8d8 <_printf_i+0x21c>)
 802b7f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802b7f8:	6813      	ldr	r3, [r2, #0]
 802b7fa:	6821      	ldr	r1, [r4, #0]
 802b7fc:	1d1d      	adds	r5, r3, #4
 802b7fe:	681b      	ldr	r3, [r3, #0]
 802b800:	6015      	str	r5, [r2, #0]
 802b802:	060a      	lsls	r2, r1, #24
 802b804:	d50b      	bpl.n	802b81e <_printf_i+0x162>
 802b806:	07ca      	lsls	r2, r1, #31
 802b808:	bf44      	itt	mi
 802b80a:	f041 0120 	orrmi.w	r1, r1, #32
 802b80e:	6021      	strmi	r1, [r4, #0]
 802b810:	b91b      	cbnz	r3, 802b81a <_printf_i+0x15e>
 802b812:	6822      	ldr	r2, [r4, #0]
 802b814:	f022 0220 	bic.w	r2, r2, #32
 802b818:	6022      	str	r2, [r4, #0]
 802b81a:	2210      	movs	r2, #16
 802b81c:	e7b7      	b.n	802b78e <_printf_i+0xd2>
 802b81e:	064d      	lsls	r5, r1, #25
 802b820:	bf48      	it	mi
 802b822:	b29b      	uxthmi	r3, r3
 802b824:	e7ef      	b.n	802b806 <_printf_i+0x14a>
 802b826:	4665      	mov	r5, ip
 802b828:	fbb3 f1f2 	udiv	r1, r3, r2
 802b82c:	fb02 3311 	mls	r3, r2, r1, r3
 802b830:	5cc3      	ldrb	r3, [r0, r3]
 802b832:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802b836:	460b      	mov	r3, r1
 802b838:	2900      	cmp	r1, #0
 802b83a:	d1f5      	bne.n	802b828 <_printf_i+0x16c>
 802b83c:	e7b9      	b.n	802b7b2 <_printf_i+0xf6>
 802b83e:	6813      	ldr	r3, [r2, #0]
 802b840:	6825      	ldr	r5, [r4, #0]
 802b842:	6961      	ldr	r1, [r4, #20]
 802b844:	1d18      	adds	r0, r3, #4
 802b846:	6010      	str	r0, [r2, #0]
 802b848:	0628      	lsls	r0, r5, #24
 802b84a:	681b      	ldr	r3, [r3, #0]
 802b84c:	d501      	bpl.n	802b852 <_printf_i+0x196>
 802b84e:	6019      	str	r1, [r3, #0]
 802b850:	e002      	b.n	802b858 <_printf_i+0x19c>
 802b852:	066a      	lsls	r2, r5, #25
 802b854:	d5fb      	bpl.n	802b84e <_printf_i+0x192>
 802b856:	8019      	strh	r1, [r3, #0]
 802b858:	2300      	movs	r3, #0
 802b85a:	6123      	str	r3, [r4, #16]
 802b85c:	4665      	mov	r5, ip
 802b85e:	e7b9      	b.n	802b7d4 <_printf_i+0x118>
 802b860:	6813      	ldr	r3, [r2, #0]
 802b862:	1d19      	adds	r1, r3, #4
 802b864:	6011      	str	r1, [r2, #0]
 802b866:	681d      	ldr	r5, [r3, #0]
 802b868:	6862      	ldr	r2, [r4, #4]
 802b86a:	2100      	movs	r1, #0
 802b86c:	4628      	mov	r0, r5
 802b86e:	f7d4 fccf 	bl	8000210 <memchr>
 802b872:	b108      	cbz	r0, 802b878 <_printf_i+0x1bc>
 802b874:	1b40      	subs	r0, r0, r5
 802b876:	6060      	str	r0, [r4, #4]
 802b878:	6863      	ldr	r3, [r4, #4]
 802b87a:	6123      	str	r3, [r4, #16]
 802b87c:	2300      	movs	r3, #0
 802b87e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b882:	e7a7      	b.n	802b7d4 <_printf_i+0x118>
 802b884:	6923      	ldr	r3, [r4, #16]
 802b886:	462a      	mov	r2, r5
 802b888:	4639      	mov	r1, r7
 802b88a:	4630      	mov	r0, r6
 802b88c:	47c0      	blx	r8
 802b88e:	3001      	adds	r0, #1
 802b890:	d0aa      	beq.n	802b7e8 <_printf_i+0x12c>
 802b892:	6823      	ldr	r3, [r4, #0]
 802b894:	079b      	lsls	r3, r3, #30
 802b896:	d413      	bmi.n	802b8c0 <_printf_i+0x204>
 802b898:	68e0      	ldr	r0, [r4, #12]
 802b89a:	9b03      	ldr	r3, [sp, #12]
 802b89c:	4298      	cmp	r0, r3
 802b89e:	bfb8      	it	lt
 802b8a0:	4618      	movlt	r0, r3
 802b8a2:	e7a3      	b.n	802b7ec <_printf_i+0x130>
 802b8a4:	2301      	movs	r3, #1
 802b8a6:	464a      	mov	r2, r9
 802b8a8:	4639      	mov	r1, r7
 802b8aa:	4630      	mov	r0, r6
 802b8ac:	47c0      	blx	r8
 802b8ae:	3001      	adds	r0, #1
 802b8b0:	d09a      	beq.n	802b7e8 <_printf_i+0x12c>
 802b8b2:	3501      	adds	r5, #1
 802b8b4:	68e3      	ldr	r3, [r4, #12]
 802b8b6:	9a03      	ldr	r2, [sp, #12]
 802b8b8:	1a9b      	subs	r3, r3, r2
 802b8ba:	42ab      	cmp	r3, r5
 802b8bc:	dcf2      	bgt.n	802b8a4 <_printf_i+0x1e8>
 802b8be:	e7eb      	b.n	802b898 <_printf_i+0x1dc>
 802b8c0:	2500      	movs	r5, #0
 802b8c2:	f104 0919 	add.w	r9, r4, #25
 802b8c6:	e7f5      	b.n	802b8b4 <_printf_i+0x1f8>
 802b8c8:	2b00      	cmp	r3, #0
 802b8ca:	d1ac      	bne.n	802b826 <_printf_i+0x16a>
 802b8cc:	7803      	ldrb	r3, [r0, #0]
 802b8ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802b8d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b8d6:	e76c      	b.n	802b7b2 <_printf_i+0xf6>
 802b8d8:	080307dd 	.word	0x080307dd
 802b8dc:	080307ee 	.word	0x080307ee

0802b8e0 <_sbrk_r>:
 802b8e0:	b538      	push	{r3, r4, r5, lr}
 802b8e2:	4c06      	ldr	r4, [pc, #24]	; (802b8fc <_sbrk_r+0x1c>)
 802b8e4:	2300      	movs	r3, #0
 802b8e6:	4605      	mov	r5, r0
 802b8e8:	4608      	mov	r0, r1
 802b8ea:	6023      	str	r3, [r4, #0]
 802b8ec:	f7d6 ff9a 	bl	8002824 <_sbrk>
 802b8f0:	1c43      	adds	r3, r0, #1
 802b8f2:	d102      	bne.n	802b8fa <_sbrk_r+0x1a>
 802b8f4:	6823      	ldr	r3, [r4, #0]
 802b8f6:	b103      	cbz	r3, 802b8fa <_sbrk_r+0x1a>
 802b8f8:	602b      	str	r3, [r5, #0]
 802b8fa:	bd38      	pop	{r3, r4, r5, pc}
 802b8fc:	2000dc68 	.word	0x2000dc68

0802b900 <_raise_r>:
 802b900:	291f      	cmp	r1, #31
 802b902:	b538      	push	{r3, r4, r5, lr}
 802b904:	4604      	mov	r4, r0
 802b906:	460d      	mov	r5, r1
 802b908:	d904      	bls.n	802b914 <_raise_r+0x14>
 802b90a:	2316      	movs	r3, #22
 802b90c:	6003      	str	r3, [r0, #0]
 802b90e:	f04f 30ff 	mov.w	r0, #4294967295
 802b912:	bd38      	pop	{r3, r4, r5, pc}
 802b914:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802b916:	b112      	cbz	r2, 802b91e <_raise_r+0x1e>
 802b918:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b91c:	b94b      	cbnz	r3, 802b932 <_raise_r+0x32>
 802b91e:	4620      	mov	r0, r4
 802b920:	f000 f830 	bl	802b984 <_getpid_r>
 802b924:	462a      	mov	r2, r5
 802b926:	4601      	mov	r1, r0
 802b928:	4620      	mov	r0, r4
 802b92a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b92e:	f000 b817 	b.w	802b960 <_kill_r>
 802b932:	2b01      	cmp	r3, #1
 802b934:	d00a      	beq.n	802b94c <_raise_r+0x4c>
 802b936:	1c59      	adds	r1, r3, #1
 802b938:	d103      	bne.n	802b942 <_raise_r+0x42>
 802b93a:	2316      	movs	r3, #22
 802b93c:	6003      	str	r3, [r0, #0]
 802b93e:	2001      	movs	r0, #1
 802b940:	e7e7      	b.n	802b912 <_raise_r+0x12>
 802b942:	2400      	movs	r4, #0
 802b944:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802b948:	4628      	mov	r0, r5
 802b94a:	4798      	blx	r3
 802b94c:	2000      	movs	r0, #0
 802b94e:	e7e0      	b.n	802b912 <_raise_r+0x12>

0802b950 <raise>:
 802b950:	4b02      	ldr	r3, [pc, #8]	; (802b95c <raise+0xc>)
 802b952:	4601      	mov	r1, r0
 802b954:	6818      	ldr	r0, [r3, #0]
 802b956:	f7ff bfd3 	b.w	802b900 <_raise_r>
 802b95a:	bf00      	nop
 802b95c:	20000074 	.word	0x20000074

0802b960 <_kill_r>:
 802b960:	b538      	push	{r3, r4, r5, lr}
 802b962:	4c07      	ldr	r4, [pc, #28]	; (802b980 <_kill_r+0x20>)
 802b964:	2300      	movs	r3, #0
 802b966:	4605      	mov	r5, r0
 802b968:	4608      	mov	r0, r1
 802b96a:	4611      	mov	r1, r2
 802b96c:	6023      	str	r3, [r4, #0]
 802b96e:	f7d6 fed1 	bl	8002714 <_kill>
 802b972:	1c43      	adds	r3, r0, #1
 802b974:	d102      	bne.n	802b97c <_kill_r+0x1c>
 802b976:	6823      	ldr	r3, [r4, #0]
 802b978:	b103      	cbz	r3, 802b97c <_kill_r+0x1c>
 802b97a:	602b      	str	r3, [r5, #0]
 802b97c:	bd38      	pop	{r3, r4, r5, pc}
 802b97e:	bf00      	nop
 802b980:	2000dc68 	.word	0x2000dc68

0802b984 <_getpid_r>:
 802b984:	f7d6 bebe 	b.w	8002704 <_getpid>

0802b988 <__swbuf_r>:
 802b988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b98a:	460e      	mov	r6, r1
 802b98c:	4614      	mov	r4, r2
 802b98e:	4605      	mov	r5, r0
 802b990:	b118      	cbz	r0, 802b99a <__swbuf_r+0x12>
 802b992:	6983      	ldr	r3, [r0, #24]
 802b994:	b90b      	cbnz	r3, 802b99a <__swbuf_r+0x12>
 802b996:	f000 fa0b 	bl	802bdb0 <__sinit>
 802b99a:	4b21      	ldr	r3, [pc, #132]	; (802ba20 <__swbuf_r+0x98>)
 802b99c:	429c      	cmp	r4, r3
 802b99e:	d12a      	bne.n	802b9f6 <__swbuf_r+0x6e>
 802b9a0:	686c      	ldr	r4, [r5, #4]
 802b9a2:	69a3      	ldr	r3, [r4, #24]
 802b9a4:	60a3      	str	r3, [r4, #8]
 802b9a6:	89a3      	ldrh	r3, [r4, #12]
 802b9a8:	071a      	lsls	r2, r3, #28
 802b9aa:	d52e      	bpl.n	802ba0a <__swbuf_r+0x82>
 802b9ac:	6923      	ldr	r3, [r4, #16]
 802b9ae:	b363      	cbz	r3, 802ba0a <__swbuf_r+0x82>
 802b9b0:	6923      	ldr	r3, [r4, #16]
 802b9b2:	6820      	ldr	r0, [r4, #0]
 802b9b4:	1ac0      	subs	r0, r0, r3
 802b9b6:	6963      	ldr	r3, [r4, #20]
 802b9b8:	b2f6      	uxtb	r6, r6
 802b9ba:	4283      	cmp	r3, r0
 802b9bc:	4637      	mov	r7, r6
 802b9be:	dc04      	bgt.n	802b9ca <__swbuf_r+0x42>
 802b9c0:	4621      	mov	r1, r4
 802b9c2:	4628      	mov	r0, r5
 802b9c4:	f000 f98a 	bl	802bcdc <_fflush_r>
 802b9c8:	bb28      	cbnz	r0, 802ba16 <__swbuf_r+0x8e>
 802b9ca:	68a3      	ldr	r3, [r4, #8]
 802b9cc:	3b01      	subs	r3, #1
 802b9ce:	60a3      	str	r3, [r4, #8]
 802b9d0:	6823      	ldr	r3, [r4, #0]
 802b9d2:	1c5a      	adds	r2, r3, #1
 802b9d4:	6022      	str	r2, [r4, #0]
 802b9d6:	701e      	strb	r6, [r3, #0]
 802b9d8:	6963      	ldr	r3, [r4, #20]
 802b9da:	3001      	adds	r0, #1
 802b9dc:	4283      	cmp	r3, r0
 802b9de:	d004      	beq.n	802b9ea <__swbuf_r+0x62>
 802b9e0:	89a3      	ldrh	r3, [r4, #12]
 802b9e2:	07db      	lsls	r3, r3, #31
 802b9e4:	d519      	bpl.n	802ba1a <__swbuf_r+0x92>
 802b9e6:	2e0a      	cmp	r6, #10
 802b9e8:	d117      	bne.n	802ba1a <__swbuf_r+0x92>
 802b9ea:	4621      	mov	r1, r4
 802b9ec:	4628      	mov	r0, r5
 802b9ee:	f000 f975 	bl	802bcdc <_fflush_r>
 802b9f2:	b190      	cbz	r0, 802ba1a <__swbuf_r+0x92>
 802b9f4:	e00f      	b.n	802ba16 <__swbuf_r+0x8e>
 802b9f6:	4b0b      	ldr	r3, [pc, #44]	; (802ba24 <__swbuf_r+0x9c>)
 802b9f8:	429c      	cmp	r4, r3
 802b9fa:	d101      	bne.n	802ba00 <__swbuf_r+0x78>
 802b9fc:	68ac      	ldr	r4, [r5, #8]
 802b9fe:	e7d0      	b.n	802b9a2 <__swbuf_r+0x1a>
 802ba00:	4b09      	ldr	r3, [pc, #36]	; (802ba28 <__swbuf_r+0xa0>)
 802ba02:	429c      	cmp	r4, r3
 802ba04:	bf08      	it	eq
 802ba06:	68ec      	ldreq	r4, [r5, #12]
 802ba08:	e7cb      	b.n	802b9a2 <__swbuf_r+0x1a>
 802ba0a:	4621      	mov	r1, r4
 802ba0c:	4628      	mov	r0, r5
 802ba0e:	f000 f80d 	bl	802ba2c <__swsetup_r>
 802ba12:	2800      	cmp	r0, #0
 802ba14:	d0cc      	beq.n	802b9b0 <__swbuf_r+0x28>
 802ba16:	f04f 37ff 	mov.w	r7, #4294967295
 802ba1a:	4638      	mov	r0, r7
 802ba1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ba1e:	bf00      	nop
 802ba20:	08030820 	.word	0x08030820
 802ba24:	08030840 	.word	0x08030840
 802ba28:	08030800 	.word	0x08030800

0802ba2c <__swsetup_r>:
 802ba2c:	4b32      	ldr	r3, [pc, #200]	; (802baf8 <__swsetup_r+0xcc>)
 802ba2e:	b570      	push	{r4, r5, r6, lr}
 802ba30:	681d      	ldr	r5, [r3, #0]
 802ba32:	4606      	mov	r6, r0
 802ba34:	460c      	mov	r4, r1
 802ba36:	b125      	cbz	r5, 802ba42 <__swsetup_r+0x16>
 802ba38:	69ab      	ldr	r3, [r5, #24]
 802ba3a:	b913      	cbnz	r3, 802ba42 <__swsetup_r+0x16>
 802ba3c:	4628      	mov	r0, r5
 802ba3e:	f000 f9b7 	bl	802bdb0 <__sinit>
 802ba42:	4b2e      	ldr	r3, [pc, #184]	; (802bafc <__swsetup_r+0xd0>)
 802ba44:	429c      	cmp	r4, r3
 802ba46:	d10f      	bne.n	802ba68 <__swsetup_r+0x3c>
 802ba48:	686c      	ldr	r4, [r5, #4]
 802ba4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ba4e:	b29a      	uxth	r2, r3
 802ba50:	0715      	lsls	r5, r2, #28
 802ba52:	d42c      	bmi.n	802baae <__swsetup_r+0x82>
 802ba54:	06d0      	lsls	r0, r2, #27
 802ba56:	d411      	bmi.n	802ba7c <__swsetup_r+0x50>
 802ba58:	2209      	movs	r2, #9
 802ba5a:	6032      	str	r2, [r6, #0]
 802ba5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ba60:	81a3      	strh	r3, [r4, #12]
 802ba62:	f04f 30ff 	mov.w	r0, #4294967295
 802ba66:	e03e      	b.n	802bae6 <__swsetup_r+0xba>
 802ba68:	4b25      	ldr	r3, [pc, #148]	; (802bb00 <__swsetup_r+0xd4>)
 802ba6a:	429c      	cmp	r4, r3
 802ba6c:	d101      	bne.n	802ba72 <__swsetup_r+0x46>
 802ba6e:	68ac      	ldr	r4, [r5, #8]
 802ba70:	e7eb      	b.n	802ba4a <__swsetup_r+0x1e>
 802ba72:	4b24      	ldr	r3, [pc, #144]	; (802bb04 <__swsetup_r+0xd8>)
 802ba74:	429c      	cmp	r4, r3
 802ba76:	bf08      	it	eq
 802ba78:	68ec      	ldreq	r4, [r5, #12]
 802ba7a:	e7e6      	b.n	802ba4a <__swsetup_r+0x1e>
 802ba7c:	0751      	lsls	r1, r2, #29
 802ba7e:	d512      	bpl.n	802baa6 <__swsetup_r+0x7a>
 802ba80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802ba82:	b141      	cbz	r1, 802ba96 <__swsetup_r+0x6a>
 802ba84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802ba88:	4299      	cmp	r1, r3
 802ba8a:	d002      	beq.n	802ba92 <__swsetup_r+0x66>
 802ba8c:	4630      	mov	r0, r6
 802ba8e:	f7ff fbb7 	bl	802b200 <_free_r>
 802ba92:	2300      	movs	r3, #0
 802ba94:	6363      	str	r3, [r4, #52]	; 0x34
 802ba96:	89a3      	ldrh	r3, [r4, #12]
 802ba98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802ba9c:	81a3      	strh	r3, [r4, #12]
 802ba9e:	2300      	movs	r3, #0
 802baa0:	6063      	str	r3, [r4, #4]
 802baa2:	6923      	ldr	r3, [r4, #16]
 802baa4:	6023      	str	r3, [r4, #0]
 802baa6:	89a3      	ldrh	r3, [r4, #12]
 802baa8:	f043 0308 	orr.w	r3, r3, #8
 802baac:	81a3      	strh	r3, [r4, #12]
 802baae:	6923      	ldr	r3, [r4, #16]
 802bab0:	b94b      	cbnz	r3, 802bac6 <__swsetup_r+0x9a>
 802bab2:	89a3      	ldrh	r3, [r4, #12]
 802bab4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802bab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802babc:	d003      	beq.n	802bac6 <__swsetup_r+0x9a>
 802babe:	4621      	mov	r1, r4
 802bac0:	4630      	mov	r0, r6
 802bac2:	f000 fa23 	bl	802bf0c <__smakebuf_r>
 802bac6:	89a2      	ldrh	r2, [r4, #12]
 802bac8:	f012 0301 	ands.w	r3, r2, #1
 802bacc:	d00c      	beq.n	802bae8 <__swsetup_r+0xbc>
 802bace:	2300      	movs	r3, #0
 802bad0:	60a3      	str	r3, [r4, #8]
 802bad2:	6963      	ldr	r3, [r4, #20]
 802bad4:	425b      	negs	r3, r3
 802bad6:	61a3      	str	r3, [r4, #24]
 802bad8:	6923      	ldr	r3, [r4, #16]
 802bada:	b953      	cbnz	r3, 802baf2 <__swsetup_r+0xc6>
 802badc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bae0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802bae4:	d1ba      	bne.n	802ba5c <__swsetup_r+0x30>
 802bae6:	bd70      	pop	{r4, r5, r6, pc}
 802bae8:	0792      	lsls	r2, r2, #30
 802baea:	bf58      	it	pl
 802baec:	6963      	ldrpl	r3, [r4, #20]
 802baee:	60a3      	str	r3, [r4, #8]
 802baf0:	e7f2      	b.n	802bad8 <__swsetup_r+0xac>
 802baf2:	2000      	movs	r0, #0
 802baf4:	e7f7      	b.n	802bae6 <__swsetup_r+0xba>
 802baf6:	bf00      	nop
 802baf8:	20000074 	.word	0x20000074
 802bafc:	08030820 	.word	0x08030820
 802bb00:	08030840 	.word	0x08030840
 802bb04:	08030800 	.word	0x08030800

0802bb08 <__register_exitproc>:
 802bb08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bb0c:	4d2c      	ldr	r5, [pc, #176]	; (802bbc0 <__register_exitproc+0xb8>)
 802bb0e:	682c      	ldr	r4, [r5, #0]
 802bb10:	4607      	mov	r7, r0
 802bb12:	460e      	mov	r6, r1
 802bb14:	4691      	mov	r9, r2
 802bb16:	4698      	mov	r8, r3
 802bb18:	b934      	cbnz	r4, 802bb28 <__register_exitproc+0x20>
 802bb1a:	4b2a      	ldr	r3, [pc, #168]	; (802bbc4 <__register_exitproc+0xbc>)
 802bb1c:	4c2a      	ldr	r4, [pc, #168]	; (802bbc8 <__register_exitproc+0xc0>)
 802bb1e:	602c      	str	r4, [r5, #0]
 802bb20:	b113      	cbz	r3, 802bb28 <__register_exitproc+0x20>
 802bb22:	681b      	ldr	r3, [r3, #0]
 802bb24:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802bb28:	6863      	ldr	r3, [r4, #4]
 802bb2a:	2b1f      	cmp	r3, #31
 802bb2c:	dd3d      	ble.n	802bbaa <__register_exitproc+0xa2>
 802bb2e:	4b27      	ldr	r3, [pc, #156]	; (802bbcc <__register_exitproc+0xc4>)
 802bb30:	b91b      	cbnz	r3, 802bb3a <__register_exitproc+0x32>
 802bb32:	f04f 30ff 	mov.w	r0, #4294967295
 802bb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bb3a:	208c      	movs	r0, #140	; 0x8c
 802bb3c:	f7ff fb3c 	bl	802b1b8 <malloc>
 802bb40:	4604      	mov	r4, r0
 802bb42:	2800      	cmp	r0, #0
 802bb44:	d0f5      	beq.n	802bb32 <__register_exitproc+0x2a>
 802bb46:	2300      	movs	r3, #0
 802bb48:	682a      	ldr	r2, [r5, #0]
 802bb4a:	6002      	str	r2, [r0, #0]
 802bb4c:	6043      	str	r3, [r0, #4]
 802bb4e:	6028      	str	r0, [r5, #0]
 802bb50:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 802bb54:	b30f      	cbz	r7, 802bb9a <__register_exitproc+0x92>
 802bb56:	f44f 7084 	mov.w	r0, #264	; 0x108
 802bb5a:	f7ff fb2d 	bl	802b1b8 <malloc>
 802bb5e:	2800      	cmp	r0, #0
 802bb60:	d0e7      	beq.n	802bb32 <__register_exitproc+0x2a>
 802bb62:	2300      	movs	r3, #0
 802bb64:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802bb68:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 802bb6c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802bb70:	6862      	ldr	r2, [r4, #4]
 802bb72:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 802bb76:	2301      	movs	r3, #1
 802bb78:	4093      	lsls	r3, r2
 802bb7a:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 802bb7e:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 802bb82:	431a      	orrs	r2, r3
 802bb84:	2f02      	cmp	r7, #2
 802bb86:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802bb8a:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 802bb8e:	bf02      	ittt	eq
 802bb90:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 802bb94:	4313      	orreq	r3, r2
 802bb96:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802bb9a:	6863      	ldr	r3, [r4, #4]
 802bb9c:	1c5a      	adds	r2, r3, #1
 802bb9e:	3302      	adds	r3, #2
 802bba0:	6062      	str	r2, [r4, #4]
 802bba2:	2000      	movs	r0, #0
 802bba4:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802bba8:	e7c5      	b.n	802bb36 <__register_exitproc+0x2e>
 802bbaa:	2f00      	cmp	r7, #0
 802bbac:	d0f5      	beq.n	802bb9a <__register_exitproc+0x92>
 802bbae:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802bbb2:	2800      	cmp	r0, #0
 802bbb4:	d1dc      	bne.n	802bb70 <__register_exitproc+0x68>
 802bbb6:	4b05      	ldr	r3, [pc, #20]	; (802bbcc <__register_exitproc+0xc4>)
 802bbb8:	2b00      	cmp	r3, #0
 802bbba:	d0ba      	beq.n	802bb32 <__register_exitproc+0x2a>
 802bbbc:	e7cb      	b.n	802bb56 <__register_exitproc+0x4e>
 802bbbe:	bf00      	nop
 802bbc0:	2000d0cc 	.word	0x2000d0cc
 802bbc4:	00000000 	.word	0x00000000
 802bbc8:	2000d040 	.word	0x2000d040
 802bbcc:	0802b1b9 	.word	0x0802b1b9

0802bbd0 <__sflush_r>:
 802bbd0:	898a      	ldrh	r2, [r1, #12]
 802bbd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bbd6:	4605      	mov	r5, r0
 802bbd8:	0710      	lsls	r0, r2, #28
 802bbda:	460c      	mov	r4, r1
 802bbdc:	d458      	bmi.n	802bc90 <__sflush_r+0xc0>
 802bbde:	684b      	ldr	r3, [r1, #4]
 802bbe0:	2b00      	cmp	r3, #0
 802bbe2:	dc05      	bgt.n	802bbf0 <__sflush_r+0x20>
 802bbe4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802bbe6:	2b00      	cmp	r3, #0
 802bbe8:	dc02      	bgt.n	802bbf0 <__sflush_r+0x20>
 802bbea:	2000      	movs	r0, #0
 802bbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bbf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802bbf2:	2e00      	cmp	r6, #0
 802bbf4:	d0f9      	beq.n	802bbea <__sflush_r+0x1a>
 802bbf6:	2300      	movs	r3, #0
 802bbf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802bbfc:	682f      	ldr	r7, [r5, #0]
 802bbfe:	6a21      	ldr	r1, [r4, #32]
 802bc00:	602b      	str	r3, [r5, #0]
 802bc02:	d032      	beq.n	802bc6a <__sflush_r+0x9a>
 802bc04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802bc06:	89a3      	ldrh	r3, [r4, #12]
 802bc08:	075a      	lsls	r2, r3, #29
 802bc0a:	d505      	bpl.n	802bc18 <__sflush_r+0x48>
 802bc0c:	6863      	ldr	r3, [r4, #4]
 802bc0e:	1ac0      	subs	r0, r0, r3
 802bc10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802bc12:	b10b      	cbz	r3, 802bc18 <__sflush_r+0x48>
 802bc14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802bc16:	1ac0      	subs	r0, r0, r3
 802bc18:	2300      	movs	r3, #0
 802bc1a:	4602      	mov	r2, r0
 802bc1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802bc1e:	6a21      	ldr	r1, [r4, #32]
 802bc20:	4628      	mov	r0, r5
 802bc22:	47b0      	blx	r6
 802bc24:	1c43      	adds	r3, r0, #1
 802bc26:	89a3      	ldrh	r3, [r4, #12]
 802bc28:	d106      	bne.n	802bc38 <__sflush_r+0x68>
 802bc2a:	6829      	ldr	r1, [r5, #0]
 802bc2c:	291d      	cmp	r1, #29
 802bc2e:	d848      	bhi.n	802bcc2 <__sflush_r+0xf2>
 802bc30:	4a29      	ldr	r2, [pc, #164]	; (802bcd8 <__sflush_r+0x108>)
 802bc32:	40ca      	lsrs	r2, r1
 802bc34:	07d6      	lsls	r6, r2, #31
 802bc36:	d544      	bpl.n	802bcc2 <__sflush_r+0xf2>
 802bc38:	2200      	movs	r2, #0
 802bc3a:	6062      	str	r2, [r4, #4]
 802bc3c:	04d9      	lsls	r1, r3, #19
 802bc3e:	6922      	ldr	r2, [r4, #16]
 802bc40:	6022      	str	r2, [r4, #0]
 802bc42:	d504      	bpl.n	802bc4e <__sflush_r+0x7e>
 802bc44:	1c42      	adds	r2, r0, #1
 802bc46:	d101      	bne.n	802bc4c <__sflush_r+0x7c>
 802bc48:	682b      	ldr	r3, [r5, #0]
 802bc4a:	b903      	cbnz	r3, 802bc4e <__sflush_r+0x7e>
 802bc4c:	6560      	str	r0, [r4, #84]	; 0x54
 802bc4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802bc50:	602f      	str	r7, [r5, #0]
 802bc52:	2900      	cmp	r1, #0
 802bc54:	d0c9      	beq.n	802bbea <__sflush_r+0x1a>
 802bc56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802bc5a:	4299      	cmp	r1, r3
 802bc5c:	d002      	beq.n	802bc64 <__sflush_r+0x94>
 802bc5e:	4628      	mov	r0, r5
 802bc60:	f7ff face 	bl	802b200 <_free_r>
 802bc64:	2000      	movs	r0, #0
 802bc66:	6360      	str	r0, [r4, #52]	; 0x34
 802bc68:	e7c0      	b.n	802bbec <__sflush_r+0x1c>
 802bc6a:	2301      	movs	r3, #1
 802bc6c:	4628      	mov	r0, r5
 802bc6e:	47b0      	blx	r6
 802bc70:	1c41      	adds	r1, r0, #1
 802bc72:	d1c8      	bne.n	802bc06 <__sflush_r+0x36>
 802bc74:	682b      	ldr	r3, [r5, #0]
 802bc76:	2b00      	cmp	r3, #0
 802bc78:	d0c5      	beq.n	802bc06 <__sflush_r+0x36>
 802bc7a:	2b1d      	cmp	r3, #29
 802bc7c:	d001      	beq.n	802bc82 <__sflush_r+0xb2>
 802bc7e:	2b16      	cmp	r3, #22
 802bc80:	d101      	bne.n	802bc86 <__sflush_r+0xb6>
 802bc82:	602f      	str	r7, [r5, #0]
 802bc84:	e7b1      	b.n	802bbea <__sflush_r+0x1a>
 802bc86:	89a3      	ldrh	r3, [r4, #12]
 802bc88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bc8c:	81a3      	strh	r3, [r4, #12]
 802bc8e:	e7ad      	b.n	802bbec <__sflush_r+0x1c>
 802bc90:	690f      	ldr	r7, [r1, #16]
 802bc92:	2f00      	cmp	r7, #0
 802bc94:	d0a9      	beq.n	802bbea <__sflush_r+0x1a>
 802bc96:	0793      	lsls	r3, r2, #30
 802bc98:	680e      	ldr	r6, [r1, #0]
 802bc9a:	bf08      	it	eq
 802bc9c:	694b      	ldreq	r3, [r1, #20]
 802bc9e:	600f      	str	r7, [r1, #0]
 802bca0:	bf18      	it	ne
 802bca2:	2300      	movne	r3, #0
 802bca4:	eba6 0807 	sub.w	r8, r6, r7
 802bca8:	608b      	str	r3, [r1, #8]
 802bcaa:	f1b8 0f00 	cmp.w	r8, #0
 802bcae:	dd9c      	ble.n	802bbea <__sflush_r+0x1a>
 802bcb0:	4643      	mov	r3, r8
 802bcb2:	463a      	mov	r2, r7
 802bcb4:	6a21      	ldr	r1, [r4, #32]
 802bcb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802bcb8:	4628      	mov	r0, r5
 802bcba:	47b0      	blx	r6
 802bcbc:	2800      	cmp	r0, #0
 802bcbe:	dc06      	bgt.n	802bcce <__sflush_r+0xfe>
 802bcc0:	89a3      	ldrh	r3, [r4, #12]
 802bcc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bcc6:	81a3      	strh	r3, [r4, #12]
 802bcc8:	f04f 30ff 	mov.w	r0, #4294967295
 802bccc:	e78e      	b.n	802bbec <__sflush_r+0x1c>
 802bcce:	4407      	add	r7, r0
 802bcd0:	eba8 0800 	sub.w	r8, r8, r0
 802bcd4:	e7e9      	b.n	802bcaa <__sflush_r+0xda>
 802bcd6:	bf00      	nop
 802bcd8:	20400001 	.word	0x20400001

0802bcdc <_fflush_r>:
 802bcdc:	b538      	push	{r3, r4, r5, lr}
 802bcde:	690b      	ldr	r3, [r1, #16]
 802bce0:	4605      	mov	r5, r0
 802bce2:	460c      	mov	r4, r1
 802bce4:	b1db      	cbz	r3, 802bd1e <_fflush_r+0x42>
 802bce6:	b118      	cbz	r0, 802bcf0 <_fflush_r+0x14>
 802bce8:	6983      	ldr	r3, [r0, #24]
 802bcea:	b90b      	cbnz	r3, 802bcf0 <_fflush_r+0x14>
 802bcec:	f000 f860 	bl	802bdb0 <__sinit>
 802bcf0:	4b0c      	ldr	r3, [pc, #48]	; (802bd24 <_fflush_r+0x48>)
 802bcf2:	429c      	cmp	r4, r3
 802bcf4:	d109      	bne.n	802bd0a <_fflush_r+0x2e>
 802bcf6:	686c      	ldr	r4, [r5, #4]
 802bcf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bcfc:	b17b      	cbz	r3, 802bd1e <_fflush_r+0x42>
 802bcfe:	4621      	mov	r1, r4
 802bd00:	4628      	mov	r0, r5
 802bd02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802bd06:	f7ff bf63 	b.w	802bbd0 <__sflush_r>
 802bd0a:	4b07      	ldr	r3, [pc, #28]	; (802bd28 <_fflush_r+0x4c>)
 802bd0c:	429c      	cmp	r4, r3
 802bd0e:	d101      	bne.n	802bd14 <_fflush_r+0x38>
 802bd10:	68ac      	ldr	r4, [r5, #8]
 802bd12:	e7f1      	b.n	802bcf8 <_fflush_r+0x1c>
 802bd14:	4b05      	ldr	r3, [pc, #20]	; (802bd2c <_fflush_r+0x50>)
 802bd16:	429c      	cmp	r4, r3
 802bd18:	bf08      	it	eq
 802bd1a:	68ec      	ldreq	r4, [r5, #12]
 802bd1c:	e7ec      	b.n	802bcf8 <_fflush_r+0x1c>
 802bd1e:	2000      	movs	r0, #0
 802bd20:	bd38      	pop	{r3, r4, r5, pc}
 802bd22:	bf00      	nop
 802bd24:	08030820 	.word	0x08030820
 802bd28:	08030840 	.word	0x08030840
 802bd2c:	08030800 	.word	0x08030800

0802bd30 <std>:
 802bd30:	2300      	movs	r3, #0
 802bd32:	b510      	push	{r4, lr}
 802bd34:	4604      	mov	r4, r0
 802bd36:	e9c0 3300 	strd	r3, r3, [r0]
 802bd3a:	6083      	str	r3, [r0, #8]
 802bd3c:	8181      	strh	r1, [r0, #12]
 802bd3e:	6643      	str	r3, [r0, #100]	; 0x64
 802bd40:	81c2      	strh	r2, [r0, #14]
 802bd42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802bd46:	6183      	str	r3, [r0, #24]
 802bd48:	4619      	mov	r1, r3
 802bd4a:	2208      	movs	r2, #8
 802bd4c:	305c      	adds	r0, #92	; 0x5c
 802bd4e:	f7ff fa4e 	bl	802b1ee <memset>
 802bd52:	4b05      	ldr	r3, [pc, #20]	; (802bd68 <std+0x38>)
 802bd54:	6263      	str	r3, [r4, #36]	; 0x24
 802bd56:	4b05      	ldr	r3, [pc, #20]	; (802bd6c <std+0x3c>)
 802bd58:	62a3      	str	r3, [r4, #40]	; 0x28
 802bd5a:	4b05      	ldr	r3, [pc, #20]	; (802bd70 <std+0x40>)
 802bd5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802bd5e:	4b05      	ldr	r3, [pc, #20]	; (802bd74 <std+0x44>)
 802bd60:	6224      	str	r4, [r4, #32]
 802bd62:	6323      	str	r3, [r4, #48]	; 0x30
 802bd64:	bd10      	pop	{r4, pc}
 802bd66:	bf00      	nop
 802bd68:	0802bf91 	.word	0x0802bf91
 802bd6c:	0802bfb3 	.word	0x0802bfb3
 802bd70:	0802bfeb 	.word	0x0802bfeb
 802bd74:	0802c00f 	.word	0x0802c00f

0802bd78 <_cleanup_r>:
 802bd78:	4901      	ldr	r1, [pc, #4]	; (802bd80 <_cleanup_r+0x8>)
 802bd7a:	f000 b885 	b.w	802be88 <_fwalk_reent>
 802bd7e:	bf00      	nop
 802bd80:	0802bcdd 	.word	0x0802bcdd

0802bd84 <__sfmoreglue>:
 802bd84:	b570      	push	{r4, r5, r6, lr}
 802bd86:	1e4a      	subs	r2, r1, #1
 802bd88:	2568      	movs	r5, #104	; 0x68
 802bd8a:	4355      	muls	r5, r2
 802bd8c:	460e      	mov	r6, r1
 802bd8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802bd92:	f7ff fa83 	bl	802b29c <_malloc_r>
 802bd96:	4604      	mov	r4, r0
 802bd98:	b140      	cbz	r0, 802bdac <__sfmoreglue+0x28>
 802bd9a:	2100      	movs	r1, #0
 802bd9c:	e9c0 1600 	strd	r1, r6, [r0]
 802bda0:	300c      	adds	r0, #12
 802bda2:	60a0      	str	r0, [r4, #8]
 802bda4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802bda8:	f7ff fa21 	bl	802b1ee <memset>
 802bdac:	4620      	mov	r0, r4
 802bdae:	bd70      	pop	{r4, r5, r6, pc}

0802bdb0 <__sinit>:
 802bdb0:	6983      	ldr	r3, [r0, #24]
 802bdb2:	b510      	push	{r4, lr}
 802bdb4:	4604      	mov	r4, r0
 802bdb6:	bb33      	cbnz	r3, 802be06 <__sinit+0x56>
 802bdb8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802bdbc:	6503      	str	r3, [r0, #80]	; 0x50
 802bdbe:	4b12      	ldr	r3, [pc, #72]	; (802be08 <__sinit+0x58>)
 802bdc0:	4a12      	ldr	r2, [pc, #72]	; (802be0c <__sinit+0x5c>)
 802bdc2:	681b      	ldr	r3, [r3, #0]
 802bdc4:	6282      	str	r2, [r0, #40]	; 0x28
 802bdc6:	4298      	cmp	r0, r3
 802bdc8:	bf04      	itt	eq
 802bdca:	2301      	moveq	r3, #1
 802bdcc:	6183      	streq	r3, [r0, #24]
 802bdce:	f000 f81f 	bl	802be10 <__sfp>
 802bdd2:	6060      	str	r0, [r4, #4]
 802bdd4:	4620      	mov	r0, r4
 802bdd6:	f000 f81b 	bl	802be10 <__sfp>
 802bdda:	60a0      	str	r0, [r4, #8]
 802bddc:	4620      	mov	r0, r4
 802bdde:	f000 f817 	bl	802be10 <__sfp>
 802bde2:	2200      	movs	r2, #0
 802bde4:	60e0      	str	r0, [r4, #12]
 802bde6:	2104      	movs	r1, #4
 802bde8:	6860      	ldr	r0, [r4, #4]
 802bdea:	f7ff ffa1 	bl	802bd30 <std>
 802bdee:	2201      	movs	r2, #1
 802bdf0:	2109      	movs	r1, #9
 802bdf2:	68a0      	ldr	r0, [r4, #8]
 802bdf4:	f7ff ff9c 	bl	802bd30 <std>
 802bdf8:	2202      	movs	r2, #2
 802bdfa:	2112      	movs	r1, #18
 802bdfc:	68e0      	ldr	r0, [r4, #12]
 802bdfe:	f7ff ff97 	bl	802bd30 <std>
 802be02:	2301      	movs	r3, #1
 802be04:	61a3      	str	r3, [r4, #24]
 802be06:	bd10      	pop	{r4, pc}
 802be08:	080307c8 	.word	0x080307c8
 802be0c:	0802bd79 	.word	0x0802bd79

0802be10 <__sfp>:
 802be10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802be12:	4b1b      	ldr	r3, [pc, #108]	; (802be80 <__sfp+0x70>)
 802be14:	681e      	ldr	r6, [r3, #0]
 802be16:	69b3      	ldr	r3, [r6, #24]
 802be18:	4607      	mov	r7, r0
 802be1a:	b913      	cbnz	r3, 802be22 <__sfp+0x12>
 802be1c:	4630      	mov	r0, r6
 802be1e:	f7ff ffc7 	bl	802bdb0 <__sinit>
 802be22:	3648      	adds	r6, #72	; 0x48
 802be24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802be28:	3b01      	subs	r3, #1
 802be2a:	d503      	bpl.n	802be34 <__sfp+0x24>
 802be2c:	6833      	ldr	r3, [r6, #0]
 802be2e:	b133      	cbz	r3, 802be3e <__sfp+0x2e>
 802be30:	6836      	ldr	r6, [r6, #0]
 802be32:	e7f7      	b.n	802be24 <__sfp+0x14>
 802be34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802be38:	b16d      	cbz	r5, 802be56 <__sfp+0x46>
 802be3a:	3468      	adds	r4, #104	; 0x68
 802be3c:	e7f4      	b.n	802be28 <__sfp+0x18>
 802be3e:	2104      	movs	r1, #4
 802be40:	4638      	mov	r0, r7
 802be42:	f7ff ff9f 	bl	802bd84 <__sfmoreglue>
 802be46:	6030      	str	r0, [r6, #0]
 802be48:	2800      	cmp	r0, #0
 802be4a:	d1f1      	bne.n	802be30 <__sfp+0x20>
 802be4c:	230c      	movs	r3, #12
 802be4e:	603b      	str	r3, [r7, #0]
 802be50:	4604      	mov	r4, r0
 802be52:	4620      	mov	r0, r4
 802be54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802be56:	4b0b      	ldr	r3, [pc, #44]	; (802be84 <__sfp+0x74>)
 802be58:	6665      	str	r5, [r4, #100]	; 0x64
 802be5a:	e9c4 5500 	strd	r5, r5, [r4]
 802be5e:	60a5      	str	r5, [r4, #8]
 802be60:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802be64:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802be68:	2208      	movs	r2, #8
 802be6a:	4629      	mov	r1, r5
 802be6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802be70:	f7ff f9bd 	bl	802b1ee <memset>
 802be74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802be78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802be7c:	e7e9      	b.n	802be52 <__sfp+0x42>
 802be7e:	bf00      	nop
 802be80:	080307c8 	.word	0x080307c8
 802be84:	ffff0001 	.word	0xffff0001

0802be88 <_fwalk_reent>:
 802be88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802be8c:	4680      	mov	r8, r0
 802be8e:	4689      	mov	r9, r1
 802be90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802be94:	2600      	movs	r6, #0
 802be96:	b914      	cbnz	r4, 802be9e <_fwalk_reent+0x16>
 802be98:	4630      	mov	r0, r6
 802be9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802be9e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802bea2:	3f01      	subs	r7, #1
 802bea4:	d501      	bpl.n	802beaa <_fwalk_reent+0x22>
 802bea6:	6824      	ldr	r4, [r4, #0]
 802bea8:	e7f5      	b.n	802be96 <_fwalk_reent+0xe>
 802beaa:	89ab      	ldrh	r3, [r5, #12]
 802beac:	2b01      	cmp	r3, #1
 802beae:	d907      	bls.n	802bec0 <_fwalk_reent+0x38>
 802beb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802beb4:	3301      	adds	r3, #1
 802beb6:	d003      	beq.n	802bec0 <_fwalk_reent+0x38>
 802beb8:	4629      	mov	r1, r5
 802beba:	4640      	mov	r0, r8
 802bebc:	47c8      	blx	r9
 802bebe:	4306      	orrs	r6, r0
 802bec0:	3568      	adds	r5, #104	; 0x68
 802bec2:	e7ee      	b.n	802bea2 <_fwalk_reent+0x1a>

0802bec4 <__swhatbuf_r>:
 802bec4:	b570      	push	{r4, r5, r6, lr}
 802bec6:	460e      	mov	r6, r1
 802bec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802becc:	2900      	cmp	r1, #0
 802bece:	b096      	sub	sp, #88	; 0x58
 802bed0:	4614      	mov	r4, r2
 802bed2:	461d      	mov	r5, r3
 802bed4:	da07      	bge.n	802bee6 <__swhatbuf_r+0x22>
 802bed6:	2300      	movs	r3, #0
 802bed8:	602b      	str	r3, [r5, #0]
 802beda:	89b3      	ldrh	r3, [r6, #12]
 802bedc:	061a      	lsls	r2, r3, #24
 802bede:	d410      	bmi.n	802bf02 <__swhatbuf_r+0x3e>
 802bee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bee4:	e00e      	b.n	802bf04 <__swhatbuf_r+0x40>
 802bee6:	466a      	mov	r2, sp
 802bee8:	f000 f8b8 	bl	802c05c <_fstat_r>
 802beec:	2800      	cmp	r0, #0
 802beee:	dbf2      	blt.n	802bed6 <__swhatbuf_r+0x12>
 802bef0:	9a01      	ldr	r2, [sp, #4]
 802bef2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802bef6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802befa:	425a      	negs	r2, r3
 802befc:	415a      	adcs	r2, r3
 802befe:	602a      	str	r2, [r5, #0]
 802bf00:	e7ee      	b.n	802bee0 <__swhatbuf_r+0x1c>
 802bf02:	2340      	movs	r3, #64	; 0x40
 802bf04:	2000      	movs	r0, #0
 802bf06:	6023      	str	r3, [r4, #0]
 802bf08:	b016      	add	sp, #88	; 0x58
 802bf0a:	bd70      	pop	{r4, r5, r6, pc}

0802bf0c <__smakebuf_r>:
 802bf0c:	898b      	ldrh	r3, [r1, #12]
 802bf0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802bf10:	079d      	lsls	r5, r3, #30
 802bf12:	4606      	mov	r6, r0
 802bf14:	460c      	mov	r4, r1
 802bf16:	d507      	bpl.n	802bf28 <__smakebuf_r+0x1c>
 802bf18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802bf1c:	6023      	str	r3, [r4, #0]
 802bf1e:	6123      	str	r3, [r4, #16]
 802bf20:	2301      	movs	r3, #1
 802bf22:	6163      	str	r3, [r4, #20]
 802bf24:	b002      	add	sp, #8
 802bf26:	bd70      	pop	{r4, r5, r6, pc}
 802bf28:	ab01      	add	r3, sp, #4
 802bf2a:	466a      	mov	r2, sp
 802bf2c:	f7ff ffca 	bl	802bec4 <__swhatbuf_r>
 802bf30:	9900      	ldr	r1, [sp, #0]
 802bf32:	4605      	mov	r5, r0
 802bf34:	4630      	mov	r0, r6
 802bf36:	f7ff f9b1 	bl	802b29c <_malloc_r>
 802bf3a:	b948      	cbnz	r0, 802bf50 <__smakebuf_r+0x44>
 802bf3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bf40:	059a      	lsls	r2, r3, #22
 802bf42:	d4ef      	bmi.n	802bf24 <__smakebuf_r+0x18>
 802bf44:	f023 0303 	bic.w	r3, r3, #3
 802bf48:	f043 0302 	orr.w	r3, r3, #2
 802bf4c:	81a3      	strh	r3, [r4, #12]
 802bf4e:	e7e3      	b.n	802bf18 <__smakebuf_r+0xc>
 802bf50:	4b0d      	ldr	r3, [pc, #52]	; (802bf88 <__smakebuf_r+0x7c>)
 802bf52:	62b3      	str	r3, [r6, #40]	; 0x28
 802bf54:	89a3      	ldrh	r3, [r4, #12]
 802bf56:	6020      	str	r0, [r4, #0]
 802bf58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802bf5c:	81a3      	strh	r3, [r4, #12]
 802bf5e:	9b00      	ldr	r3, [sp, #0]
 802bf60:	6163      	str	r3, [r4, #20]
 802bf62:	9b01      	ldr	r3, [sp, #4]
 802bf64:	6120      	str	r0, [r4, #16]
 802bf66:	b15b      	cbz	r3, 802bf80 <__smakebuf_r+0x74>
 802bf68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bf6c:	4630      	mov	r0, r6
 802bf6e:	f000 f887 	bl	802c080 <_isatty_r>
 802bf72:	b128      	cbz	r0, 802bf80 <__smakebuf_r+0x74>
 802bf74:	89a3      	ldrh	r3, [r4, #12]
 802bf76:	f023 0303 	bic.w	r3, r3, #3
 802bf7a:	f043 0301 	orr.w	r3, r3, #1
 802bf7e:	81a3      	strh	r3, [r4, #12]
 802bf80:	89a3      	ldrh	r3, [r4, #12]
 802bf82:	431d      	orrs	r5, r3
 802bf84:	81a5      	strh	r5, [r4, #12]
 802bf86:	e7cd      	b.n	802bf24 <__smakebuf_r+0x18>
 802bf88:	0802bd79 	.word	0x0802bd79

0802bf8c <__malloc_lock>:
 802bf8c:	4770      	bx	lr

0802bf8e <__malloc_unlock>:
 802bf8e:	4770      	bx	lr

0802bf90 <__sread>:
 802bf90:	b510      	push	{r4, lr}
 802bf92:	460c      	mov	r4, r1
 802bf94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bf98:	f000 f894 	bl	802c0c4 <_read_r>
 802bf9c:	2800      	cmp	r0, #0
 802bf9e:	bfab      	itete	ge
 802bfa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802bfa2:	89a3      	ldrhlt	r3, [r4, #12]
 802bfa4:	181b      	addge	r3, r3, r0
 802bfa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802bfaa:	bfac      	ite	ge
 802bfac:	6563      	strge	r3, [r4, #84]	; 0x54
 802bfae:	81a3      	strhlt	r3, [r4, #12]
 802bfb0:	bd10      	pop	{r4, pc}

0802bfb2 <__swrite>:
 802bfb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bfb6:	461f      	mov	r7, r3
 802bfb8:	898b      	ldrh	r3, [r1, #12]
 802bfba:	05db      	lsls	r3, r3, #23
 802bfbc:	4605      	mov	r5, r0
 802bfbe:	460c      	mov	r4, r1
 802bfc0:	4616      	mov	r6, r2
 802bfc2:	d505      	bpl.n	802bfd0 <__swrite+0x1e>
 802bfc4:	2302      	movs	r3, #2
 802bfc6:	2200      	movs	r2, #0
 802bfc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bfcc:	f000 f868 	bl	802c0a0 <_lseek_r>
 802bfd0:	89a3      	ldrh	r3, [r4, #12]
 802bfd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bfd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802bfda:	81a3      	strh	r3, [r4, #12]
 802bfdc:	4632      	mov	r2, r6
 802bfde:	463b      	mov	r3, r7
 802bfe0:	4628      	mov	r0, r5
 802bfe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802bfe6:	f000 b817 	b.w	802c018 <_write_r>

0802bfea <__sseek>:
 802bfea:	b510      	push	{r4, lr}
 802bfec:	460c      	mov	r4, r1
 802bfee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bff2:	f000 f855 	bl	802c0a0 <_lseek_r>
 802bff6:	1c43      	adds	r3, r0, #1
 802bff8:	89a3      	ldrh	r3, [r4, #12]
 802bffa:	bf15      	itete	ne
 802bffc:	6560      	strne	r0, [r4, #84]	; 0x54
 802bffe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802c002:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802c006:	81a3      	strheq	r3, [r4, #12]
 802c008:	bf18      	it	ne
 802c00a:	81a3      	strhne	r3, [r4, #12]
 802c00c:	bd10      	pop	{r4, pc}

0802c00e <__sclose>:
 802c00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c012:	f000 b813 	b.w	802c03c <_close_r>
	...

0802c018 <_write_r>:
 802c018:	b538      	push	{r3, r4, r5, lr}
 802c01a:	4c07      	ldr	r4, [pc, #28]	; (802c038 <_write_r+0x20>)
 802c01c:	4605      	mov	r5, r0
 802c01e:	4608      	mov	r0, r1
 802c020:	4611      	mov	r1, r2
 802c022:	2200      	movs	r2, #0
 802c024:	6022      	str	r2, [r4, #0]
 802c026:	461a      	mov	r2, r3
 802c028:	f7d6 fbab 	bl	8002782 <_write>
 802c02c:	1c43      	adds	r3, r0, #1
 802c02e:	d102      	bne.n	802c036 <_write_r+0x1e>
 802c030:	6823      	ldr	r3, [r4, #0]
 802c032:	b103      	cbz	r3, 802c036 <_write_r+0x1e>
 802c034:	602b      	str	r3, [r5, #0]
 802c036:	bd38      	pop	{r3, r4, r5, pc}
 802c038:	2000dc68 	.word	0x2000dc68

0802c03c <_close_r>:
 802c03c:	b538      	push	{r3, r4, r5, lr}
 802c03e:	4c06      	ldr	r4, [pc, #24]	; (802c058 <_close_r+0x1c>)
 802c040:	2300      	movs	r3, #0
 802c042:	4605      	mov	r5, r0
 802c044:	4608      	mov	r0, r1
 802c046:	6023      	str	r3, [r4, #0]
 802c048:	f7d6 fbb7 	bl	80027ba <_close>
 802c04c:	1c43      	adds	r3, r0, #1
 802c04e:	d102      	bne.n	802c056 <_close_r+0x1a>
 802c050:	6823      	ldr	r3, [r4, #0]
 802c052:	b103      	cbz	r3, 802c056 <_close_r+0x1a>
 802c054:	602b      	str	r3, [r5, #0]
 802c056:	bd38      	pop	{r3, r4, r5, pc}
 802c058:	2000dc68 	.word	0x2000dc68

0802c05c <_fstat_r>:
 802c05c:	b538      	push	{r3, r4, r5, lr}
 802c05e:	4c07      	ldr	r4, [pc, #28]	; (802c07c <_fstat_r+0x20>)
 802c060:	2300      	movs	r3, #0
 802c062:	4605      	mov	r5, r0
 802c064:	4608      	mov	r0, r1
 802c066:	4611      	mov	r1, r2
 802c068:	6023      	str	r3, [r4, #0]
 802c06a:	f7d6 fbb2 	bl	80027d2 <_fstat>
 802c06e:	1c43      	adds	r3, r0, #1
 802c070:	d102      	bne.n	802c078 <_fstat_r+0x1c>
 802c072:	6823      	ldr	r3, [r4, #0]
 802c074:	b103      	cbz	r3, 802c078 <_fstat_r+0x1c>
 802c076:	602b      	str	r3, [r5, #0]
 802c078:	bd38      	pop	{r3, r4, r5, pc}
 802c07a:	bf00      	nop
 802c07c:	2000dc68 	.word	0x2000dc68

0802c080 <_isatty_r>:
 802c080:	b538      	push	{r3, r4, r5, lr}
 802c082:	4c06      	ldr	r4, [pc, #24]	; (802c09c <_isatty_r+0x1c>)
 802c084:	2300      	movs	r3, #0
 802c086:	4605      	mov	r5, r0
 802c088:	4608      	mov	r0, r1
 802c08a:	6023      	str	r3, [r4, #0]
 802c08c:	f7d6 fbb1 	bl	80027f2 <_isatty>
 802c090:	1c43      	adds	r3, r0, #1
 802c092:	d102      	bne.n	802c09a <_isatty_r+0x1a>
 802c094:	6823      	ldr	r3, [r4, #0]
 802c096:	b103      	cbz	r3, 802c09a <_isatty_r+0x1a>
 802c098:	602b      	str	r3, [r5, #0]
 802c09a:	bd38      	pop	{r3, r4, r5, pc}
 802c09c:	2000dc68 	.word	0x2000dc68

0802c0a0 <_lseek_r>:
 802c0a0:	b538      	push	{r3, r4, r5, lr}
 802c0a2:	4c07      	ldr	r4, [pc, #28]	; (802c0c0 <_lseek_r+0x20>)
 802c0a4:	4605      	mov	r5, r0
 802c0a6:	4608      	mov	r0, r1
 802c0a8:	4611      	mov	r1, r2
 802c0aa:	2200      	movs	r2, #0
 802c0ac:	6022      	str	r2, [r4, #0]
 802c0ae:	461a      	mov	r2, r3
 802c0b0:	f7d6 fbaa 	bl	8002808 <_lseek>
 802c0b4:	1c43      	adds	r3, r0, #1
 802c0b6:	d102      	bne.n	802c0be <_lseek_r+0x1e>
 802c0b8:	6823      	ldr	r3, [r4, #0]
 802c0ba:	b103      	cbz	r3, 802c0be <_lseek_r+0x1e>
 802c0bc:	602b      	str	r3, [r5, #0]
 802c0be:	bd38      	pop	{r3, r4, r5, pc}
 802c0c0:	2000dc68 	.word	0x2000dc68

0802c0c4 <_read_r>:
 802c0c4:	b538      	push	{r3, r4, r5, lr}
 802c0c6:	4c07      	ldr	r4, [pc, #28]	; (802c0e4 <_read_r+0x20>)
 802c0c8:	4605      	mov	r5, r0
 802c0ca:	4608      	mov	r0, r1
 802c0cc:	4611      	mov	r1, r2
 802c0ce:	2200      	movs	r2, #0
 802c0d0:	6022      	str	r2, [r4, #0]
 802c0d2:	461a      	mov	r2, r3
 802c0d4:	f7d6 fb38 	bl	8002748 <_read>
 802c0d8:	1c43      	adds	r3, r0, #1
 802c0da:	d102      	bne.n	802c0e2 <_read_r+0x1e>
 802c0dc:	6823      	ldr	r3, [r4, #0]
 802c0de:	b103      	cbz	r3, 802c0e2 <_read_r+0x1e>
 802c0e0:	602b      	str	r3, [r5, #0]
 802c0e2:	bd38      	pop	{r3, r4, r5, pc}
 802c0e4:	2000dc68 	.word	0x2000dc68

0802c0e8 <_init>:
 802c0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c0ea:	bf00      	nop
 802c0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c0ee:	bc08      	pop	{r3}
 802c0f0:	469e      	mov	lr, r3
 802c0f2:	4770      	bx	lr

0802c0f4 <_fini>:
 802c0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c0f6:	bf00      	nop
 802c0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c0fa:	bc08      	pop	{r3}
 802c0fc:	469e      	mov	lr, r3
 802c0fe:	4770      	bx	lr
